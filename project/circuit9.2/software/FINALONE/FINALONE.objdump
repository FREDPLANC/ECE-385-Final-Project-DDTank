
FINALONE.elf:     file format elf32-littlenios2
FINALONE.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000193b8 memsz 0x000193b8 flags r-x
    LOAD off    0x0001a3d8 vaddr 0x100193d8 paddr 0x1001b330 align 2**12
         filesz 0x00001f58 memsz 0x00001f58 flags rw-
    LOAD off    0x0001d288 vaddr 0x1001d288 paddr 0x1001d288 align 2**12
         filesz 0x00000000 memsz 0x00177a20 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018a78  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000730  10018ca8  10018ca8  00019ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f58  100193d8  1001b330  0001a3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00177aca  1001d288  1001d288  0001d288  2**2
                  ALLOC, SMALL_DATA
  6 .ocm          00000000  00000000  00000000  0001c330  2**0
                  CONTENTS
  7 .sdram        00000000  10194ca8  10194ca8  0001c330  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001c330  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001158  00000000  00000000  0001c358  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00026c51  00000000  00000000  0001d4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a35c  00000000  00000000  00044101  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d977  00000000  00000000  0004e45d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002f00  00000000  00000000  0005bdd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004625  00000000  00000000  0005ecd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00019802  00000000  00000000  000632f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0007cafc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019a8  00000000  00000000  0007cb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000824de  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000824e1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000824ed  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000824ee  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000824ef  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000824f3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000824f7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000824fb  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00082506  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00082511  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0008251c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000030  00000000  00000000  00082524  2**0
                  CONTENTS, READONLY
 30 .jdi          00004f1a  00000000  00000000  00082554  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00076f76  00000000  00000000  0008746e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10018ca8 l    d  .rodata	00000000 .rodata
100193d8 l    d  .rwdata	00000000 .rwdata
1001d288 l    d  .bss	00000000 .bss
00000000 l    d  .ocm	00000000 .ocm
10194ca8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FINALONE_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 CannonBall.c
00000000 l    df *ABS*	00000000 Ground.c
00000000 l    df *ABS*	00000000 LifeBar.c
00000000 l    df *ABS*	00000000 Player.c
00000000 l    df *ABS*	00000000 drawBuffer.c
1001b2d4 l     O .rwdata	00000004 vga_ctrl
00000000 l    df *ABS*	00000000 gameState.c
00000000 l    df *ABS*	00000000 startInterface.c
1001b2d8 l     O .rwdata	00000004 vga_ctrl
1001b2dc l     O .rwdata	00000004 vga
100193d8 l     O .rwdata	00000170 colors
1001d288 l     O .bss	00000008 TurnState
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
1001b2e0 l     O .rwdata	00000004 vga_ctrl
1001b2e4 l     O .rwdata	00000004 vga
10019548 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
1001b2e8 l     O .rwdata	00000004 vga_ctrl
1001b2ec l     O .rwdata	00000004 vga
100196b8 l     O .rwdata	00000170 colors
1001d2a4 l     O .bss	00000008 TurnState
1001d2ac l     O .bss	00000002 ctl_reg.3769
1001d2ae l     O .bss	00000002 no_device.3770
00000000 l    df *ABS*	00000000 mainLAB9.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
10018f80 l     O .rodata	00000108 two_over_pi
10018f00 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
100190c8 l     O .rodata	00000010 init_jk
10019088 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1001921e l     O .rodata	00000010 zeroes.4404
1000e444 l     F .text	000000bc __sbprintf
1001922e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1000e654 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100101ac l     F .text	00000008 __fp_unlock
100101c0 l     F .text	0000019c __sinit.part.1
1001035c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10019828 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10019c6c l     O .rwdata	00000020 lc_ctype_charset
10019c4c l     O .rwdata	00000020 lc_message_charset
10019c8c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10019260 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
100136e8 l     F .text	000000fc __sprint_r.part.0
10019384 l     O .rodata	00000010 zeroes.4349
10014d24 l     F .text	000000bc __sbprintf
10019394 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
10016488 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1001659c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
100165c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
100166bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
100167a4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10016890 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10016a6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1001b320 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10016d10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10016e4c l     F .text	00000034 alt_dev_reg
1001a274 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10017128 l     F .text	0000020c altera_avalon_jtag_uart_irq
10017334 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10017c10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10018070 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100181d0 l     F .text	0000003c alt_get_errno
1001820c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1001d2e4 g     O .bss	00000004 alt_instruction_exception_handler
10012d2c g     F .text	00000074 _mprec_log10
10012e18 g     F .text	0000008c __any_on
1000227c g     F .text	00000088 updateRedPlayerCamera
100152d8 g     F .text	00000054 _isatty_r
1001926c g     O .rodata	00000028 __mprec_tinytens
100169a8 g     F .text	0000007c alt_main
1000bfe0 g     F .text	000000c0 _puts_r
10194ba8 g     O .bss	00000100 alt_irq
10009190 g     F .text	00000014 fabs
1001532c g     F .text	00000060 _lseek_r
10002208 g     F .text	00000074 updateMagicMoving
1001b330 g       *ABS*	00000000 __flash_rwdata_start
1000a9a0 g     F .text	00000088 .hidden __eqdf2
10001568 g     F .text	00000104 convertCoordinateUpHill
10194ca8 g       *ABS*	00000000 __alt_heap_start
1000238c g     F .text	0000016c gameEndStateHandler
1000bfa4 g     F .text	0000003c printf
10015544 g     F .text	0000009c _wcrtomb_r
100135a8 g     F .text	0000005c __sseek
1001050c g     F .text	00000010 __sinit
100153ec g     F .text	00000140 __swbuf_r
10010fe0 g     F .text	0000007c _setlocale_r
10010364 g     F .text	00000078 __sfmoreglue
10016a48 g     F .text	00000024 __malloc_unlock
10005468 g     F .text	000000fc textVGAColorScreenSaver
100032bc g     F .text	00000180 fillBufferHealth
1000498c g     F .text	000005e4 updateFalling
10007240 g     F .text	00000080 UsbGetRetryCnt
10011b68 g     F .text	0000015c memmove
1001d290 g     O .bss	00000004 gameState
10005564 g     F .text	00000088 IO_init
100104f4 g     F .text	00000018 _cleanup
10011dec g     F .text	000000a8 _Balloc
100003a4 g     F .text	00000934 cannonBallFiring
1000aa28 g     F .text	000000dc .hidden __gtdf2
100185f8 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1001527c g     F .text	0000005c _fstat_r
1001d2c8 g     O .bss	00000004 errno
10002304 g     F .text	00000088 updateBluePlayerCamera
100091a4 g     F .text	000001ec floor
10013524 g     F .text	00000008 __seofread
10003fa4 g     F .text	00000038 fillBufferWord
1001d2d0 g     O .bss	00000004 alt_argv
100232d4 g       *ABS*	00000000 _gp
10016ce0 g     F .text	00000030 usleep
10002648 g     F .text	000000f4 updatePlayerTurn
1001d294 g     O .bss	00000004 cracterCounter
1001a0f4 g     O .rwdata	00000180 alt_fd_list
1000751c g     F .text	0000076c __ieee754_rem_pio2
1000322c g     F .text	00000090 fillBufferExplode
1001861c g     F .text	00000090 alt_find_dev
1000be2c g     F .text	00000148 memcpy
100101b4 g     F .text	0000000c _cleanup_r
1000bcec g     F .text	000000dc .hidden __floatsidf
10194310 g     O .bss	0000003c bluePlayer
10018154 g     F .text	0000007c alt_io_redirect
100162ec g     F .text	000000f4 .hidden __ltdf2
10018ca8 g       *ABS*	00000000 __DTOR_END__
1000c0a0 g     F .text	00000014 puts
10018878 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10013408 g     F .text	00000074 __fpclassifyd
10012c88 g     F .text	000000a4 __ratio
10014d08 g     F .text	0000001c __vfiprintf_internal
1001752c g     F .text	0000021c altera_avalon_jtag_uart_read
1000bf74 g     F .text	00000030 _printf_r
10009640 g     F .text	00000064 .hidden __udivsi3
100166f8 g     F .text	000000ac isatty
100192bc g     O .rodata	000000c8 __mprec_tens
10001150 g     F .text	000001f4 playerMovement
1001105c g     F .text	0000000c __locale_charset
10007c88 g     F .text	000004a4 __kernel_cos
1001d2c4 g     O .bss	00000004 __malloc_top_pad
100068cc g     F .text	00000268 UsbGetConfigDesc2
1001b2f8 g     O .rwdata	00000004 __mb_cur_max
1001108c g     F .text	0000000c _localeconv_r
10012220 g     F .text	0000003c __i2b
10010990 g     F .text	000004c8 __sfvwrite_r
1001347c g     F .text	00000054 _sbrk_r
1001538c g     F .text	00000060 _read_r
1001b318 g     O .rwdata	00000004 alt_max_fd
10014f70 g     F .text	000000f0 _fclose_r
1001017c g     F .text	00000030 fflush
1001d2c0 g     O .bss	00000004 __malloc_max_sbrked_mem
10008ec4 g     F .text	000002cc __kernel_sin
101943c0 g     O .bss	0000032c IngameBuffer
10009724 g     F .text	000008ac .hidden __adddf3
10012a30 g     F .text	0000010c __b2d
10015d28 g     F .text	000005c4 .hidden __umoddi3
100168cc g     F .text	000000dc lseek
1001b2f0 g     O .rwdata	00000004 _global_impure_ptr
10012ea4 g     F .text	00000564 _realloc_r
10194ca8 g       *ABS*	00000000 __bss_end
10017f80 g     F .text	000000f0 alt_iic_isr_register
100184f0 g     F .text	00000108 alt_tick
1001572c g     F .text	000005fc .hidden __udivdi3
100151d8 g     F .text	00000024 _fputwc_r
10019294 g     O .rodata	00000028 __mprec_bigtens
10012004 g     F .text	00000104 __s2b
100163e0 g     F .text	000000a8 .hidden __floatunsidf
1000141c g     F .text	00000074 updateGroundLeftRightxy
10012770 g     F .text	00000060 __mcmp
1000631c g     F .text	00000100 UsbSetAddress
10000d70 g     F .text	000000dc isLegalCannonBall
1001052c g     F .text	00000018 __fp_lock_all
10017f34 g     F .text	0000004c alt_ic_irq_enabled
10018454 g     F .text	0000009c alt_alarm_stop
10003de8 g     F .text	000000fc fillBufferStrength
10000340 g     F .text	00000064 cannonBallCharging
100018dc g     F .text	0000002c yCoordinateConvert
1001d2d8 g     O .bss	00000004 alt_irq_active
10001b30 g     F .text	00000150 PackArrayCrater
10001908 g     F .text	00000148 PackArray
100000fc g     F .exceptions	000000d4 alt_irq_handler
1001a0cc g     O .rwdata	00000028 alt_dev_null
1000812c g     F .text	00000d98 __kernel_rem_pio2
10003d08 g     F .text	000000e0 fillBufferCharging
10017bf0 g     F .text	00000020 alt_dcache_flush_all
10012108 g     F .text	00000068 __hi0bits
1000565c g     F .text	00000068 IO_read
1000bc6c g     F .text	00000080 .hidden __fixdfsi
1001b330 g       *ABS*	00000000 __ram_rwdata_end
10001cec g     F .text	00000078 gameInterface
1001b310 g     O .rwdata	00000008 alt_dev_list
10016d4c g     F .text	00000100 write
100193d8 g       *ABS*	00000000 __ram_rodata_end
10016604 g     F .text	000000b8 fstat
10003ee4 g     F .text	000000c0 fillBufferFlying
100162ec g     F .text	000000f4 .hidden __ledf2
1001d298 g     O .bss	00000004 playerstrength
100072c0 g     F .text	00000080 UsbPrintMem
100124e8 g     F .text	00000140 __pow5mult
100137fc g     F .text	0000150c ___vfiprintf_internal_r
1001d2b8 g     O .bss	00000004 __nlocale_changed
100096a4 g     F .text	00000058 .hidden __umodsi3
10001a50 g     F .text	000000e0 SetZeroArray
10003188 g     F .text	000000a4 fillBufferCannon
10194ca8 g       *ABS*	00000000 end
10017068 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10001490 g     F .text	000000d8 updateUphillLeftRightxy
10018ca8 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000bdc8 g     F .text	00000064 .hidden __clzsi2
10017748 g     F .text	00000224 altera_avalon_jtag_uart_write
10007340 g     F .text	000000ec cos
00000000 g       *ABS*	00000000 __alt_mem_ocm
1001051c g     F .text	00000004 __sfp_lock_acquire
10011a84 g     F .text	000000e4 memchr
1000c14c g     F .text	000022dc ___vfprintf_internal_r
10006c34 g     F .text	00000100 UsbClassRequest
10010680 g     F .text	00000310 _free_r
10011068 g     F .text	00000010 __locale_mb_cur_max
10018af4 g     F .text	00000180 __call_exitprocs
1001d2b4 g     O .bss	00000004 __mlocale_changed
1001b2fc g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
1001d2dc g     O .bss	00000004 _alt_tick_rate
1000742c g     F .text	000000f0 sin
10012628 g     F .text	00000148 __lshift
1001d2e0 g     O .bss	00000004 _alt_nticks
10016aa8 g     F .text	00000104 read
10016eb8 g     F .text	0000004c alt_sys_init
101946ec g     O .bss	0000032c InitialgameBuffer
10005124 g     F .text	000001c8 findexplosionPoint
100189dc g     F .text	00000118 __register_exitproc
1000273c g     F .text	00000488 updateCannonBall
1001225c g     F .text	0000028c __multiply
100173d4 g     F .text	00000068 altera_avalon_jtag_uart_close
100096fc g     F .text	00000028 .hidden __mulsi3
100193d8 g       *ABS*	00000000 __ram_rwdata_start
10018ca8 g       *ABS*	00000000 __ram_rodata_start
1001d2e8 g     O .bss	00000028 __malloc_current_mallinfo
10012b3c g     F .text	0000014c __d2b
1000641c g     F .text	00000148 UsbGetDeviceDesc1
10016f04 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100187b4 g     F .text	000000c4 alt_get_fd
10017a98 g     F .text	00000158 alt_busy_sleep
10014e40 g     F .text	00000054 _close_r
10018960 g     F .text	0000007c memcmp
10016fc4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10194ca8 g       *ABS*	00000000 __alt_stack_base
10017014 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000e500 g     F .text	00000154 __swsetup_r
10009fd0 g     F .text	000009d0 .hidden __divdf3
100103dc g     F .text	00000118 __sfp
10012da0 g     F .text	00000078 __copybits
1000343c g     F .text	000008cc fillBufferAngle
10019cc4 g     O .rwdata	00000408 __malloc_av_
10010528 g     F .text	00000004 __sinit_lock_release
1000ab04 g     F .text	0000086c .hidden __muldf3
100134d0 g     F .text	00000054 __sread
100071bc g     F .text	00000084 UsbWaitTDListDone
100186ac g     F .text	00000108 alt_find_file
10017c4c g     F .text	000000a4 alt_dev_llist_insert
10016a24 g     F .text	00000024 __malloc_lock
10016c30 g     F .text	000000b0 sbrk
10010120 g     F .text	0000005c _fflush_r
10014e94 g     F .text	000000dc _calloc_r
1001d288 g       *ABS*	00000000 __bss_start
10011cc4 g     F .text	00000128 memset
100056c4 g     F .text	00000b08 main
1000026c g     F .text	000000d4 cannonBallInit
10001c80 g     F .text	00000048 endingFill
1001d2d4 g     O .bss	00000004 alt_envp
1001d2bc g     O .bss	00000004 __malloc_max_total_mem
10016f64 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10003fdc g     F .text	000000c4 fillBufferArrow
10006b34 g     F .text	00000100 UsbSetConfig
10002fd0 g     F .text	000001b8 fillBufferPlayers
1001552c g     F .text	00000018 __swbuf
10013604 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10015060 g     F .text	00000014 fclose
1000e87c g     F .text	00001688 _dtoa_r
10011278 g     F .text	0000080c _malloc_r
100156a0 g     F .text	00000030 __ascii_wctomb
1001b31c g     O .rwdata	00000004 alt_errno
10010e58 g     F .text	000000c4 _fwalk
1001d29c g     O .bss	00000004 moveX
10009548 g     F .text	00000084 .hidden __divsi3
100052ec g     F .text	0000017c setColorPalette
1001055c g     F .text	00000124 _malloc_trim_r
10006d34 g     F .text	00000148 UsbGetHidDesc
10018ca8 g       *ABS*	00000000 __CTOR_END__
1001360c g     F .text	000000dc strcmp
10001e44 g     F .text	000003c4 gameStartStateHandler
10018ca8 g       *ABS*	00000000 __flash_rodata_start
10018ca8 g       *ABS*	00000000 __DTOR_LIST__
1000952c g     F .text	0000001c copysign
1000a9a0 g     F .text	00000088 .hidden __nedf2
10006224 g     F .text	00000044 UsbRead
10016e80 g     F .text	00000038 alt_irq_init
10016bac g     F .text	00000084 alt_release_fd
100190d8 g     O .rodata	00000100 .hidden __clz_tab
1001d2b0 g     O .bss	00000004 _PathLocale
10018914 g     F .text	00000014 atexit
10014de0 g     F .text	00000060 _write_r
10001d64 g     F .text	000000e0 gameInitStateHandler
10011098 g     F .text	00000018 setlocale
1001b2f4 g     O .rwdata	00000004 _impure_ptr
10194a18 g     O .bss	00000190 cracterOriginal
1001d2cc g     O .bss	00000004 alt_argc
10000cd8 g     F .text	00000098 cannonBallAngle
1000ff04 g     F .text	0000021c __sflush_r
10009390 g     F .text	0000019c scalbn
10017d50 g     F .text	00000060 _do_dtors
10011084 g     F .text	00000008 __locale_cjk_lang
10001cc8 g     F .text	00000024 gameStateInit
10002bc4 g     F .text	00000188 explodingHarm
10000020 g       .exceptions	00000000 alt_irq_entry
100129cc g     F .text	00000064 __ulp
10010544 g     F .text	00000018 __fp_unlock_all
10002d4c g     F .text	00000284 attackingGround
1001b308 g     O .rwdata	00000008 alt_fs_list
10006e7c g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
100110b0 g     F .text	0000000c localeconv
10017dd0 g     F .text	00000050 alt_ic_isr_register
1001b330 g       *ABS*	00000000 _edata
10194ca8 g       *ABS*	00000000 _end
100061cc g     F .text	00000058 UsbWrite
10015074 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
1001743c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10001344 g     F .text	000000d8 updateDownhillLeftRightxy
100040a0 g     F .text	00000068 fillBufferCrater
10017ea8 g     F .text	0000008c alt_ic_irq_disable
1001352c g     F .text	0000007c __swrite
1001b300 g     O .rwdata	00000004 __malloc_trim_threshold
10011078 g     F .text	0000000c __locale_msgcharset
10018928 g     F .text	00000038 exit
10000f94 g     F .text	000001bc playersInit
10010f1c g     F .text	000000c4 _fwalk_reent
100127d0 g     F .text	000001fc __mdiff
1019434c g     O .bss	0000003c redPlayer
100095cc g     F .text	00000074 .hidden __modsi3
10000f6c g     F .text	00000028 strengthBarInit
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10010520 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100055ec g     F .text	00000070 IO_write
10001770 g     F .text	0000016c convertCoordinateGround
10018c74 g     F .text	00000034 _exit
100024f8 g     F .text	00000124 gameInit
1001796c g     F .text	0000012c alt_alarm_start
1000489c g     F .text	000000f0 updateMovementCracter
100110bc g     F .text	000001bc __smakebuf_r
1001d2a0 g     O .bss	00000004 lastPress
1000c0b4 g     F .text	00000098 strlen
100182f8 g     F .text	0000015c open
10004f70 g     F .text	000001b4 updatefallingPoint
10004108 g     F .text	00000794 updatedPlayerMovement
1000261c g     F .text	0000002c playerTurnInit
1000aa28 g     F .text	000000dc .hidden __gedf2
1001b304 g     O .rwdata	00000004 __wctomb
10000e4c g     F .text	00000120 ground_init
100137e4 g     F .text	00000018 __sprint_r
10017db0 g     F .text	00000020 alt_icache_flush_all
1001b324 g     O .rwdata	00000004 alt_priority_mask
10017e20 g     F .text	00000088 alt_ic_irq_enable
1000e428 g     F .text	0000001c __vfprintf_internal
100156d0 g     F .text	0000005c _wctomb_r
1000b370 g     F .text	000008fc .hidden __subdf3
10012170 g     F .text	000000b0 __lo0bits
1000673c g     F .text	00000190 UsbGetConfigDesc1
1001b328 g     O .rwdata	00000008 alt_alarm_list
10017cf0 g     F .text	00000060 _do_ctors
10006268 g     F .text	000000b4 UsbSoftReset
100155e0 g     F .text	000000c0 wcrtomb
100164c4 g     F .text	000000d8 close
10194388 g     O .bss	00000038 cannonBall
1001d310 g     O .bss	00177000 ground
10006564 g     F .text	000001d8 UsbGetDeviceDesc2
1001680c g     F .text	00000084 alt_load
1000166c g     F .text	00000104 convertCoordinateDownHill
100151fc g     F .text	00000080 fputwc
10010524 g     F .text	00000004 __sinit_lock_acquire
10011ebc g     F .text	00000148 __multadd
10011e94 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840674 	movhi	r2,4121
10000140:	1092ea04 	addi	r2,r2,19368
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840674 	movhi	r2,4121
10000158:	1092ea04 	addi	r2,r2,19368
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a80417 	ldw	r2,-24560(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a80417 	ldw	r2,-24560(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	068400b4 	movhi	gp,4098
    ori gp, gp, %lo(_gp)
1000023c:	d68cb514 	ori	gp,gp,13012
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	10b4a214 	ori	r2,r2,53896

    movhi r3, %hi(__bss_end)
10000248:	00c40674 	movhi	r3,4121
    ori r3, r3, %lo(__bss_end)
1000024c:	18d32a14 	ori	r3,r3,19624

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	001680c0 	call	1001680c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	00169a80 	call	100169a8 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <cannonBallInit>:
#include "CannonBall.h"
#include "math.h"

void cannonBallInit(){
1000026c:	deffff04 	addi	sp,sp,-4
10000270:	df000015 	stw	fp,0(sp)
10000274:	d839883a 	mov	fp,sp
    // Cannon Ball initialization
    cannonBall.x_pos = 0;
10000278:	00840674 	movhi	r2,4121
1000027c:	1090e204 	addi	r2,r2,17288
10000280:	10000115 	stw	zero,4(r2)
    cannonBall.y_pos = 0;
10000284:	00840674 	movhi	r2,4121
10000288:	1090e204 	addi	r2,r2,17288
1000028c:	10000015 	stw	zero,0(r2)
    cannonBall.x_prev = 0;
10000290:	00840674 	movhi	r2,4121
10000294:	1090e204 	addi	r2,r2,17288
10000298:	10000215 	stw	zero,8(r2)
    cannonBall.y_prev = 0;
1000029c:	00840674 	movhi	r2,4121
100002a0:	1090e204 	addi	r2,r2,17288
100002a4:	10000315 	stw	zero,12(r2)
    cannonBall.v_x = 0;
100002a8:	00840674 	movhi	r2,4121
100002ac:	1090e204 	addi	r2,r2,17288
100002b0:	10000415 	stw	zero,16(r2)
    cannonBall.v_y = 0;
100002b4:	00840674 	movhi	r2,4121
100002b8:	1090e204 	addi	r2,r2,17288
100002bc:	10000515 	stw	zero,20(r2)
    cannonBall.state = 0;
100002c0:	00840674 	movhi	r2,4121
100002c4:	1090e204 	addi	r2,r2,17288
100002c8:	10000615 	stw	zero,24(r2)
    cannonBall.explodingCount = EXPLOSION_DURATION;
100002cc:	00840674 	movhi	r2,4121
100002d0:	1090e204 	addi	r2,r2,17288
100002d4:	00c00284 	movi	r3,10
100002d8:	10c00715 	stw	r3,28(r2)
    cannonBall.chargingTimeCount = 0;
100002dc:	00840674 	movhi	r2,4121
100002e0:	1090e204 	addi	r2,r2,17288
100002e4:	10000815 	stw	zero,32(r2)
    cannonBall.fired_v_x = 0;
100002e8:	00840674 	movhi	r2,4121
100002ec:	1090e204 	addi	r2,r2,17288
100002f0:	10000915 	stw	zero,36(r2)
    cannonBall.fired_v_y = 0;
100002f4:	00840674 	movhi	r2,4121
100002f8:	1090e204 	addi	r2,r2,17288
100002fc:	10000a15 	stw	zero,40(r2)
    cannonBall.target = -1;
10000300:	00840674 	movhi	r2,4121
10000304:	1090e204 	addi	r2,r2,17288
10000308:	00ffffc4 	movi	r3,-1
1000030c:	10c00b15 	stw	r3,44(r2)
    cannonBall.angle = FIRING_ANGLE_MIN;
10000310:	00840674 	movhi	r2,4121
10000314:	1090e204 	addi	r2,r2,17288
10000318:	00c00504 	movi	r3,20
1000031c:	10c00c15 	stw	r3,48(r2)
    cannonBall.magic = 0; // 0 means not magic, just normal
10000320:	00840674 	movhi	r2,4121
10000324:	1090e204 	addi	r2,r2,17288
10000328:	10000d15 	stw	zero,52(r2)
    return;
1000032c:	0001883a 	nop
}
10000330:	e037883a 	mov	sp,fp
10000334:	df000017 	ldw	fp,0(sp)
10000338:	dec00104 	addi	sp,sp,4
1000033c:	f800283a 	ret

10000340 <cannonBallCharging>:

void cannonBallCharging(){
10000340:	deffff04 	addi	sp,sp,-4
10000344:	df000015 	stw	fp,0(sp)
10000348:	d839883a 	mov	fp,sp
    cannonBall.state = 1;
1000034c:	00840674 	movhi	r2,4121
10000350:	1090e204 	addi	r2,r2,17288
10000354:	00c00044 	movi	r3,1
10000358:	10c00615 	stw	r3,24(r2)
    if(cannonBall.chargingTimeCount < CHARGING_MAXIMUM_COUNT) cannonBall.chargingTimeCount += 1;
1000035c:	00840674 	movhi	r2,4121
10000360:	1090e204 	addi	r2,r2,17288
10000364:	10800817 	ldw	r2,32(r2)
10000368:	10800508 	cmpgei	r2,r2,20
1000036c:	1000081e 	bne	r2,zero,10000390 <cannonBallCharging+0x50>
10000370:	00840674 	movhi	r2,4121
10000374:	1090e204 	addi	r2,r2,17288
10000378:	10800817 	ldw	r2,32(r2)
1000037c:	10c00044 	addi	r3,r2,1
10000380:	00840674 	movhi	r2,4121
10000384:	1090e204 	addi	r2,r2,17288
10000388:	10c00815 	stw	r3,32(r2)
    // printf("%d CannonBall Charging Time \n" , cannonBall.chargingTimeCount);
    return;
1000038c:	0001883a 	nop
10000390:	0001883a 	nop
}
10000394:	e037883a 	mov	sp,fp
10000398:	df000017 	ldw	fp,0(sp)
1000039c:	dec00104 	addi	sp,sp,4
100003a0:	f800283a 	ret

100003a4 <cannonBallFiring>:

void cannonBallFiring(int next_player, int posture, int player_x, int player_y, struct player* playerStruct){ // directly pick from TurningState; Posture is the posture of player 
100003a4:	defff004 	addi	sp,sp,-64
100003a8:	dfc00f15 	stw	ra,60(sp)
100003ac:	df000e15 	stw	fp,56(sp)
100003b0:	dc400d15 	stw	r17,52(sp)
100003b4:	dc000c15 	stw	r16,48(sp)
100003b8:	df000e04 	addi	fp,sp,56
100003bc:	e13ffa15 	stw	r4,-24(fp)
100003c0:	e17ffb15 	stw	r5,-20(fp)
100003c4:	e1bffc15 	stw	r6,-16(fp)
100003c8:	e1fffd15 	stw	r7,-12(fp)
    cannonBall.target = next_player;
100003cc:	00840674 	movhi	r2,4121
100003d0:	1090e204 	addi	r2,r2,17288
100003d4:	e0fffa17 	ldw	r3,-24(fp)
100003d8:	10c00b15 	stw	r3,44(r2)
    cannonBall.state = 2;
100003dc:	00840674 	movhi	r2,4121
100003e0:	1090e204 	addi	r2,r2,17288
100003e4:	00c00084 	movi	r3,2
100003e8:	10c00615 	stw	r3,24(r2)
    int chargingTable[5] = {CHARGING_LEVEL_1, CHARGING_LEVEL_2, CHARGING_LEVEL_3, CHARGING_LEVEL_4, CHARGING_LEVEL_5};
100003ec:	00800144 	movi	r2,5
100003f0:	e0bff515 	stw	r2,-44(fp)
100003f4:	00800284 	movi	r2,10
100003f8:	e0bff615 	stw	r2,-40(fp)
100003fc:	008003c4 	movi	r2,15
10000400:	e0bff715 	stw	r2,-36(fp)
10000404:	00800504 	movi	r2,20
10000408:	e0bff815 	stw	r2,-32(fp)
1000040c:	00800644 	movi	r2,25
10000410:	e0bff915 	stw	r2,-28(fp)
    int intensity = chargingTable[cannonBall.chargingTimeCount / (CHARGING_COUNT_INTERVAL)];
10000414:	00840674 	movhi	r2,4121
10000418:	1090e204 	addi	r2,r2,17288
1000041c:	10800817 	ldw	r2,32(r2)
10000420:	01400144 	movi	r5,5
10000424:	1009883a 	mov	r4,r2
10000428:	00095480 	call	10009548 <__divsi3>
1000042c:	1085883a 	add	r2,r2,r2
10000430:	1085883a 	add	r2,r2,r2
10000434:	e0fff204 	addi	r3,fp,-56
10000438:	1885883a 	add	r2,r3,r2
1000043c:	10800304 	addi	r2,r2,12
10000440:	10800017 	ldw	r2,0(r2)
10000444:	e0bff215 	stw	r2,-56(fp)
    double convertedAngle;
    // printf("The intensity is %d \n", intensity);
    switch(posture){
10000448:	e0bffb17 	ldw	r2,-20(fp)
1000044c:	108001a8 	cmpgeui	r2,r2,6
10000450:	1001f11e 	bne	r2,zero,10000c18 <cannonBallFiring+0x874>
10000454:	e0bffb17 	ldw	r2,-20(fp)
10000458:	100690ba 	slli	r3,r2,2
1000045c:	00840034 	movhi	r2,4096
10000460:	10811c04 	addi	r2,r2,1136
10000464:	1885883a 	add	r2,r3,r2
10000468:	10800017 	ldw	r2,0(r2)
1000046c:	1000683a 	jmp	r2
10000470:	10000488 	cmpgei	zero,r2,18
10000474:	100005cc 	andi	zero,r2,23
10000478:	10000708 	cmpgei	zero,r2,28
1000047c:	10000850 	cmplti	zero,r2,33
10000480:	10000990 	cmplti	zero,r2,38
10000484:	10000ad8 	cmpnei	zero,r2,43
        case 0: // face left
            convertedAngle = cannonBall.angle*PI/180;
10000488:	00840674 	movhi	r2,4121
1000048c:	1090e204 	addi	r2,r2,17288
10000490:	10800c17 	ldw	r2,48(r2)
10000494:	1009883a 	mov	r4,r2
10000498:	000bcec0 	call	1000bcec <__floatsidf>
1000049c:	1011883a 	mov	r8,r2
100004a0:	1813883a 	mov	r9,r3
100004a4:	01951074 	movhi	r6,21569
100004a8:	3185d104 	addi	r6,r6,5956
100004ac:	01d00274 	movhi	r7,16393
100004b0:	39c87ec4 	addi	r7,r7,8699
100004b4:	4009883a 	mov	r4,r8
100004b8:	480b883a 	mov	r5,r9
100004bc:	000ab040 	call	1000ab04 <__muldf3>
100004c0:	1009883a 	mov	r4,r2
100004c4:	180b883a 	mov	r5,r3
100004c8:	2005883a 	mov	r2,r4
100004cc:	2807883a 	mov	r3,r5
100004d0:	000d883a 	mov	r6,zero
100004d4:	01d019f4 	movhi	r7,16487
100004d8:	39e00004 	addi	r7,r7,-32768
100004dc:	1009883a 	mov	r4,r2
100004e0:	180b883a 	mov	r5,r3
100004e4:	0009fd00 	call	10009fd0 <__divdf3>
100004e8:	1009883a 	mov	r4,r2
100004ec:	180b883a 	mov	r5,r3
100004f0:	e13ff315 	stw	r4,-52(fp)
100004f4:	e17ff415 	stw	r5,-48(fp)
            // cannonBall.fired_v_x = -intensity*cos(convertedAngle);
            // cannonBall.fired_v_y = intensity*sin(convertedAngle);
            cannonBall.v_x = -intensity*cos(convertedAngle);
100004f8:	e0bff217 	ldw	r2,-56(fp)
100004fc:	0085c83a 	sub	r2,zero,r2
10000500:	1009883a 	mov	r4,r2
10000504:	000bcec0 	call	1000bcec <__floatsidf>
10000508:	1021883a 	mov	r16,r2
1000050c:	1823883a 	mov	r17,r3
10000510:	e13ff317 	ldw	r4,-52(fp)
10000514:	e17ff417 	ldw	r5,-48(fp)
10000518:	00073400 	call	10007340 <cos>
1000051c:	1009883a 	mov	r4,r2
10000520:	180b883a 	mov	r5,r3
10000524:	200d883a 	mov	r6,r4
10000528:	280f883a 	mov	r7,r5
1000052c:	8009883a 	mov	r4,r16
10000530:	880b883a 	mov	r5,r17
10000534:	000ab040 	call	1000ab04 <__muldf3>
10000538:	1009883a 	mov	r4,r2
1000053c:	180b883a 	mov	r5,r3
10000540:	2005883a 	mov	r2,r4
10000544:	2807883a 	mov	r3,r5
10000548:	1009883a 	mov	r4,r2
1000054c:	180b883a 	mov	r5,r3
10000550:	000bc6c0 	call	1000bc6c <__fixdfsi>
10000554:	1007883a 	mov	r3,r2
10000558:	00840674 	movhi	r2,4121
1000055c:	1090e204 	addi	r2,r2,17288
10000560:	10c00415 	stw	r3,16(r2)
            cannonBall.v_y = intensity*sin(convertedAngle);
10000564:	e13ff217 	ldw	r4,-56(fp)
10000568:	000bcec0 	call	1000bcec <__floatsidf>
1000056c:	1021883a 	mov	r16,r2
10000570:	1823883a 	mov	r17,r3
10000574:	e13ff317 	ldw	r4,-52(fp)
10000578:	e17ff417 	ldw	r5,-48(fp)
1000057c:	000742c0 	call	1000742c <sin>
10000580:	1009883a 	mov	r4,r2
10000584:	180b883a 	mov	r5,r3
10000588:	200d883a 	mov	r6,r4
1000058c:	280f883a 	mov	r7,r5
10000590:	8009883a 	mov	r4,r16
10000594:	880b883a 	mov	r5,r17
10000598:	000ab040 	call	1000ab04 <__muldf3>
1000059c:	1009883a 	mov	r4,r2
100005a0:	180b883a 	mov	r5,r3
100005a4:	2005883a 	mov	r2,r4
100005a8:	2807883a 	mov	r3,r5
100005ac:	1009883a 	mov	r4,r2
100005b0:	180b883a 	mov	r5,r3
100005b4:	000bc6c0 	call	1000bc6c <__fixdfsi>
100005b8:	1007883a 	mov	r3,r2
100005bc:	00840674 	movhi	r2,4121
100005c0:	1090e204 	addi	r2,r2,17288
100005c4:	10c00515 	stw	r3,20(r2)
            break;
100005c8:	00019306 	br	10000c18 <cannonBallFiring+0x874>
        case 1: // face right
            convertedAngle = cannonBall.angle*PI/180;
100005cc:	00840674 	movhi	r2,4121
100005d0:	1090e204 	addi	r2,r2,17288
100005d4:	10800c17 	ldw	r2,48(r2)
100005d8:	1009883a 	mov	r4,r2
100005dc:	000bcec0 	call	1000bcec <__floatsidf>
100005e0:	1011883a 	mov	r8,r2
100005e4:	1813883a 	mov	r9,r3
100005e8:	01951074 	movhi	r6,21569
100005ec:	3185d104 	addi	r6,r6,5956
100005f0:	01d00274 	movhi	r7,16393
100005f4:	39c87ec4 	addi	r7,r7,8699
100005f8:	4009883a 	mov	r4,r8
100005fc:	480b883a 	mov	r5,r9
10000600:	000ab040 	call	1000ab04 <__muldf3>
10000604:	1009883a 	mov	r4,r2
10000608:	180b883a 	mov	r5,r3
1000060c:	2005883a 	mov	r2,r4
10000610:	2807883a 	mov	r3,r5
10000614:	000d883a 	mov	r6,zero
10000618:	01d019f4 	movhi	r7,16487
1000061c:	39e00004 	addi	r7,r7,-32768
10000620:	1009883a 	mov	r4,r2
10000624:	180b883a 	mov	r5,r3
10000628:	0009fd00 	call	10009fd0 <__divdf3>
1000062c:	1009883a 	mov	r4,r2
10000630:	180b883a 	mov	r5,r3
10000634:	e13ff315 	stw	r4,-52(fp)
10000638:	e17ff415 	stw	r5,-48(fp)
            // cannonBall.fired_v_x = intensity*cos(convertedAngle);
            // cannonBall.fired_v_y = intensity*sin(convertedAngle);
            cannonBall.v_x = intensity*cos(convertedAngle);
1000063c:	e13ff217 	ldw	r4,-56(fp)
10000640:	000bcec0 	call	1000bcec <__floatsidf>
10000644:	1021883a 	mov	r16,r2
10000648:	1823883a 	mov	r17,r3
1000064c:	e13ff317 	ldw	r4,-52(fp)
10000650:	e17ff417 	ldw	r5,-48(fp)
10000654:	00073400 	call	10007340 <cos>
10000658:	1009883a 	mov	r4,r2
1000065c:	180b883a 	mov	r5,r3
10000660:	200d883a 	mov	r6,r4
10000664:	280f883a 	mov	r7,r5
10000668:	8009883a 	mov	r4,r16
1000066c:	880b883a 	mov	r5,r17
10000670:	000ab040 	call	1000ab04 <__muldf3>
10000674:	1009883a 	mov	r4,r2
10000678:	180b883a 	mov	r5,r3
1000067c:	2005883a 	mov	r2,r4
10000680:	2807883a 	mov	r3,r5
10000684:	1009883a 	mov	r4,r2
10000688:	180b883a 	mov	r5,r3
1000068c:	000bc6c0 	call	1000bc6c <__fixdfsi>
10000690:	1007883a 	mov	r3,r2
10000694:	00840674 	movhi	r2,4121
10000698:	1090e204 	addi	r2,r2,17288
1000069c:	10c00415 	stw	r3,16(r2)
            cannonBall.v_y = intensity*sin(convertedAngle);
100006a0:	e13ff217 	ldw	r4,-56(fp)
100006a4:	000bcec0 	call	1000bcec <__floatsidf>
100006a8:	1021883a 	mov	r16,r2
100006ac:	1823883a 	mov	r17,r3
100006b0:	e13ff317 	ldw	r4,-52(fp)
100006b4:	e17ff417 	ldw	r5,-48(fp)
100006b8:	000742c0 	call	1000742c <sin>
100006bc:	1009883a 	mov	r4,r2
100006c0:	180b883a 	mov	r5,r3
100006c4:	200d883a 	mov	r6,r4
100006c8:	280f883a 	mov	r7,r5
100006cc:	8009883a 	mov	r4,r16
100006d0:	880b883a 	mov	r5,r17
100006d4:	000ab040 	call	1000ab04 <__muldf3>
100006d8:	1009883a 	mov	r4,r2
100006dc:	180b883a 	mov	r5,r3
100006e0:	2005883a 	mov	r2,r4
100006e4:	2807883a 	mov	r3,r5
100006e8:	1009883a 	mov	r4,r2
100006ec:	180b883a 	mov	r5,r3
100006f0:	000bc6c0 	call	1000bc6c <__fixdfsi>
100006f4:	1007883a 	mov	r3,r2
100006f8:	00840674 	movhi	r2,4121
100006fc:	1090e204 	addi	r2,r2,17288
10000700:	10c00515 	stw	r3,20(r2)
            break;
10000704:	00014406 	br	10000c18 <cannonBallFiring+0x874>
        case 2: // uphill left
            convertedAngle = (cannonBall.angle - 30)*PI/180;
10000708:	00840674 	movhi	r2,4121
1000070c:	1090e204 	addi	r2,r2,17288
10000710:	10800c17 	ldw	r2,48(r2)
10000714:	10bff884 	addi	r2,r2,-30
10000718:	1009883a 	mov	r4,r2
1000071c:	000bcec0 	call	1000bcec <__floatsidf>
10000720:	1011883a 	mov	r8,r2
10000724:	1813883a 	mov	r9,r3
10000728:	01951074 	movhi	r6,21569
1000072c:	3185d104 	addi	r6,r6,5956
10000730:	01d00274 	movhi	r7,16393
10000734:	39c87ec4 	addi	r7,r7,8699
10000738:	4009883a 	mov	r4,r8
1000073c:	480b883a 	mov	r5,r9
10000740:	000ab040 	call	1000ab04 <__muldf3>
10000744:	1009883a 	mov	r4,r2
10000748:	180b883a 	mov	r5,r3
1000074c:	2005883a 	mov	r2,r4
10000750:	2807883a 	mov	r3,r5
10000754:	000d883a 	mov	r6,zero
10000758:	01d019f4 	movhi	r7,16487
1000075c:	39e00004 	addi	r7,r7,-32768
10000760:	1009883a 	mov	r4,r2
10000764:	180b883a 	mov	r5,r3
10000768:	0009fd00 	call	10009fd0 <__divdf3>
1000076c:	1009883a 	mov	r4,r2
10000770:	180b883a 	mov	r5,r3
10000774:	e13ff315 	stw	r4,-52(fp)
10000778:	e17ff415 	stw	r5,-48(fp)
            // cannonBall.fired_v_x = -intensity*cos(convertedAngle);
            // cannonBall.fired_v_y = intensity*sin(convertedAngle);
            cannonBall.v_x = -intensity*cos(convertedAngle);
1000077c:	e0bff217 	ldw	r2,-56(fp)
10000780:	0085c83a 	sub	r2,zero,r2
10000784:	1009883a 	mov	r4,r2
10000788:	000bcec0 	call	1000bcec <__floatsidf>
1000078c:	1021883a 	mov	r16,r2
10000790:	1823883a 	mov	r17,r3
10000794:	e13ff317 	ldw	r4,-52(fp)
10000798:	e17ff417 	ldw	r5,-48(fp)
1000079c:	00073400 	call	10007340 <cos>
100007a0:	1009883a 	mov	r4,r2
100007a4:	180b883a 	mov	r5,r3
100007a8:	200d883a 	mov	r6,r4
100007ac:	280f883a 	mov	r7,r5
100007b0:	8009883a 	mov	r4,r16
100007b4:	880b883a 	mov	r5,r17
100007b8:	000ab040 	call	1000ab04 <__muldf3>
100007bc:	1009883a 	mov	r4,r2
100007c0:	180b883a 	mov	r5,r3
100007c4:	2005883a 	mov	r2,r4
100007c8:	2807883a 	mov	r3,r5
100007cc:	1009883a 	mov	r4,r2
100007d0:	180b883a 	mov	r5,r3
100007d4:	000bc6c0 	call	1000bc6c <__fixdfsi>
100007d8:	1007883a 	mov	r3,r2
100007dc:	00840674 	movhi	r2,4121
100007e0:	1090e204 	addi	r2,r2,17288
100007e4:	10c00415 	stw	r3,16(r2)
            cannonBall.v_y = intensity*sin(convertedAngle);
100007e8:	e13ff217 	ldw	r4,-56(fp)
100007ec:	000bcec0 	call	1000bcec <__floatsidf>
100007f0:	1021883a 	mov	r16,r2
100007f4:	1823883a 	mov	r17,r3
100007f8:	e13ff317 	ldw	r4,-52(fp)
100007fc:	e17ff417 	ldw	r5,-48(fp)
10000800:	000742c0 	call	1000742c <sin>
10000804:	1009883a 	mov	r4,r2
10000808:	180b883a 	mov	r5,r3
1000080c:	200d883a 	mov	r6,r4
10000810:	280f883a 	mov	r7,r5
10000814:	8009883a 	mov	r4,r16
10000818:	880b883a 	mov	r5,r17
1000081c:	000ab040 	call	1000ab04 <__muldf3>
10000820:	1009883a 	mov	r4,r2
10000824:	180b883a 	mov	r5,r3
10000828:	2005883a 	mov	r2,r4
1000082c:	2807883a 	mov	r3,r5
10000830:	1009883a 	mov	r4,r2
10000834:	180b883a 	mov	r5,r3
10000838:	000bc6c0 	call	1000bc6c <__fixdfsi>
1000083c:	1007883a 	mov	r3,r2
10000840:	00840674 	movhi	r2,4121
10000844:	1090e204 	addi	r2,r2,17288
10000848:	10c00515 	stw	r3,20(r2)
            break;
1000084c:	0000f206 	br	10000c18 <cannonBallFiring+0x874>
        case 3: // uphill right
            convertedAngle = (cannonBall.angle + 30)*PI/180;
10000850:	00840674 	movhi	r2,4121
10000854:	1090e204 	addi	r2,r2,17288
10000858:	10800c17 	ldw	r2,48(r2)
1000085c:	10800784 	addi	r2,r2,30
10000860:	1009883a 	mov	r4,r2
10000864:	000bcec0 	call	1000bcec <__floatsidf>
10000868:	1011883a 	mov	r8,r2
1000086c:	1813883a 	mov	r9,r3
10000870:	01951074 	movhi	r6,21569
10000874:	3185d104 	addi	r6,r6,5956
10000878:	01d00274 	movhi	r7,16393
1000087c:	39c87ec4 	addi	r7,r7,8699
10000880:	4009883a 	mov	r4,r8
10000884:	480b883a 	mov	r5,r9
10000888:	000ab040 	call	1000ab04 <__muldf3>
1000088c:	1009883a 	mov	r4,r2
10000890:	180b883a 	mov	r5,r3
10000894:	2005883a 	mov	r2,r4
10000898:	2807883a 	mov	r3,r5
1000089c:	000d883a 	mov	r6,zero
100008a0:	01d019f4 	movhi	r7,16487
100008a4:	39e00004 	addi	r7,r7,-32768
100008a8:	1009883a 	mov	r4,r2
100008ac:	180b883a 	mov	r5,r3
100008b0:	0009fd00 	call	10009fd0 <__divdf3>
100008b4:	1009883a 	mov	r4,r2
100008b8:	180b883a 	mov	r5,r3
100008bc:	e13ff315 	stw	r4,-52(fp)
100008c0:	e17ff415 	stw	r5,-48(fp)
            // cannonBall.fired_v_x = intensity*cos(convertedAngle);
            // cannonBall.fired_v_y = intensity*sin(convertedAngle);
            cannonBall.v_x = intensity*cos(convertedAngle);
100008c4:	e13ff217 	ldw	r4,-56(fp)
100008c8:	000bcec0 	call	1000bcec <__floatsidf>
100008cc:	1021883a 	mov	r16,r2
100008d0:	1823883a 	mov	r17,r3
100008d4:	e13ff317 	ldw	r4,-52(fp)
100008d8:	e17ff417 	ldw	r5,-48(fp)
100008dc:	00073400 	call	10007340 <cos>
100008e0:	1009883a 	mov	r4,r2
100008e4:	180b883a 	mov	r5,r3
100008e8:	200d883a 	mov	r6,r4
100008ec:	280f883a 	mov	r7,r5
100008f0:	8009883a 	mov	r4,r16
100008f4:	880b883a 	mov	r5,r17
100008f8:	000ab040 	call	1000ab04 <__muldf3>
100008fc:	1009883a 	mov	r4,r2
10000900:	180b883a 	mov	r5,r3
10000904:	2005883a 	mov	r2,r4
10000908:	2807883a 	mov	r3,r5
1000090c:	1009883a 	mov	r4,r2
10000910:	180b883a 	mov	r5,r3
10000914:	000bc6c0 	call	1000bc6c <__fixdfsi>
10000918:	1007883a 	mov	r3,r2
1000091c:	00840674 	movhi	r2,4121
10000920:	1090e204 	addi	r2,r2,17288
10000924:	10c00415 	stw	r3,16(r2)
            cannonBall.v_y = intensity*sin(convertedAngle);
10000928:	e13ff217 	ldw	r4,-56(fp)
1000092c:	000bcec0 	call	1000bcec <__floatsidf>
10000930:	1021883a 	mov	r16,r2
10000934:	1823883a 	mov	r17,r3
10000938:	e13ff317 	ldw	r4,-52(fp)
1000093c:	e17ff417 	ldw	r5,-48(fp)
10000940:	000742c0 	call	1000742c <sin>
10000944:	1009883a 	mov	r4,r2
10000948:	180b883a 	mov	r5,r3
1000094c:	200d883a 	mov	r6,r4
10000950:	280f883a 	mov	r7,r5
10000954:	8009883a 	mov	r4,r16
10000958:	880b883a 	mov	r5,r17
1000095c:	000ab040 	call	1000ab04 <__muldf3>
10000960:	1009883a 	mov	r4,r2
10000964:	180b883a 	mov	r5,r3
10000968:	2005883a 	mov	r2,r4
1000096c:	2807883a 	mov	r3,r5
10000970:	1009883a 	mov	r4,r2
10000974:	180b883a 	mov	r5,r3
10000978:	000bc6c0 	call	1000bc6c <__fixdfsi>
1000097c:	1007883a 	mov	r3,r2
10000980:	00840674 	movhi	r2,4121
10000984:	1090e204 	addi	r2,r2,17288
10000988:	10c00515 	stw	r3,20(r2)
            break;
1000098c:	0000a206 	br	10000c18 <cannonBallFiring+0x874>
        case 4: // downhill left
            convertedAngle = (cannonBall.angle + 30)*PI/180;
10000990:	00840674 	movhi	r2,4121
10000994:	1090e204 	addi	r2,r2,17288
10000998:	10800c17 	ldw	r2,48(r2)
1000099c:	10800784 	addi	r2,r2,30
100009a0:	1009883a 	mov	r4,r2
100009a4:	000bcec0 	call	1000bcec <__floatsidf>
100009a8:	1011883a 	mov	r8,r2
100009ac:	1813883a 	mov	r9,r3
100009b0:	01951074 	movhi	r6,21569
100009b4:	3185d104 	addi	r6,r6,5956
100009b8:	01d00274 	movhi	r7,16393
100009bc:	39c87ec4 	addi	r7,r7,8699
100009c0:	4009883a 	mov	r4,r8
100009c4:	480b883a 	mov	r5,r9
100009c8:	000ab040 	call	1000ab04 <__muldf3>
100009cc:	1009883a 	mov	r4,r2
100009d0:	180b883a 	mov	r5,r3
100009d4:	2005883a 	mov	r2,r4
100009d8:	2807883a 	mov	r3,r5
100009dc:	000d883a 	mov	r6,zero
100009e0:	01d019f4 	movhi	r7,16487
100009e4:	39e00004 	addi	r7,r7,-32768
100009e8:	1009883a 	mov	r4,r2
100009ec:	180b883a 	mov	r5,r3
100009f0:	0009fd00 	call	10009fd0 <__divdf3>
100009f4:	1009883a 	mov	r4,r2
100009f8:	180b883a 	mov	r5,r3
100009fc:	e13ff315 	stw	r4,-52(fp)
10000a00:	e17ff415 	stw	r5,-48(fp)
            // cannonBall.fired_v_x = -intensity*cos(convertedAngle);
            // cannonBall.fired_v_y = intensity*sin(convertedAngle);
            cannonBall.v_x = -intensity*cos(convertedAngle);
10000a04:	e0bff217 	ldw	r2,-56(fp)
10000a08:	0085c83a 	sub	r2,zero,r2
10000a0c:	1009883a 	mov	r4,r2
10000a10:	000bcec0 	call	1000bcec <__floatsidf>
10000a14:	1021883a 	mov	r16,r2
10000a18:	1823883a 	mov	r17,r3
10000a1c:	e13ff317 	ldw	r4,-52(fp)
10000a20:	e17ff417 	ldw	r5,-48(fp)
10000a24:	00073400 	call	10007340 <cos>
10000a28:	1009883a 	mov	r4,r2
10000a2c:	180b883a 	mov	r5,r3
10000a30:	200d883a 	mov	r6,r4
10000a34:	280f883a 	mov	r7,r5
10000a38:	8009883a 	mov	r4,r16
10000a3c:	880b883a 	mov	r5,r17
10000a40:	000ab040 	call	1000ab04 <__muldf3>
10000a44:	1009883a 	mov	r4,r2
10000a48:	180b883a 	mov	r5,r3
10000a4c:	2005883a 	mov	r2,r4
10000a50:	2807883a 	mov	r3,r5
10000a54:	1009883a 	mov	r4,r2
10000a58:	180b883a 	mov	r5,r3
10000a5c:	000bc6c0 	call	1000bc6c <__fixdfsi>
10000a60:	1007883a 	mov	r3,r2
10000a64:	00840674 	movhi	r2,4121
10000a68:	1090e204 	addi	r2,r2,17288
10000a6c:	10c00415 	stw	r3,16(r2)
            cannonBall.v_y = intensity*sin(convertedAngle);
10000a70:	e13ff217 	ldw	r4,-56(fp)
10000a74:	000bcec0 	call	1000bcec <__floatsidf>
10000a78:	1021883a 	mov	r16,r2
10000a7c:	1823883a 	mov	r17,r3
10000a80:	e13ff317 	ldw	r4,-52(fp)
10000a84:	e17ff417 	ldw	r5,-48(fp)
10000a88:	000742c0 	call	1000742c <sin>
10000a8c:	1009883a 	mov	r4,r2
10000a90:	180b883a 	mov	r5,r3
10000a94:	200d883a 	mov	r6,r4
10000a98:	280f883a 	mov	r7,r5
10000a9c:	8009883a 	mov	r4,r16
10000aa0:	880b883a 	mov	r5,r17
10000aa4:	000ab040 	call	1000ab04 <__muldf3>
10000aa8:	1009883a 	mov	r4,r2
10000aac:	180b883a 	mov	r5,r3
10000ab0:	2005883a 	mov	r2,r4
10000ab4:	2807883a 	mov	r3,r5
10000ab8:	1009883a 	mov	r4,r2
10000abc:	180b883a 	mov	r5,r3
10000ac0:	000bc6c0 	call	1000bc6c <__fixdfsi>
10000ac4:	1007883a 	mov	r3,r2
10000ac8:	00840674 	movhi	r2,4121
10000acc:	1090e204 	addi	r2,r2,17288
10000ad0:	10c00515 	stw	r3,20(r2)
            break;
10000ad4:	00005006 	br	10000c18 <cannonBallFiring+0x874>
        case 5: // downhill right
            convertedAngle = (cannonBall.angle - 30)*PI/180;
10000ad8:	00840674 	movhi	r2,4121
10000adc:	1090e204 	addi	r2,r2,17288
10000ae0:	10800c17 	ldw	r2,48(r2)
10000ae4:	10bff884 	addi	r2,r2,-30
10000ae8:	1009883a 	mov	r4,r2
10000aec:	000bcec0 	call	1000bcec <__floatsidf>
10000af0:	1011883a 	mov	r8,r2
10000af4:	1813883a 	mov	r9,r3
10000af8:	01951074 	movhi	r6,21569
10000afc:	3185d104 	addi	r6,r6,5956
10000b00:	01d00274 	movhi	r7,16393
10000b04:	39c87ec4 	addi	r7,r7,8699
10000b08:	4009883a 	mov	r4,r8
10000b0c:	480b883a 	mov	r5,r9
10000b10:	000ab040 	call	1000ab04 <__muldf3>
10000b14:	1009883a 	mov	r4,r2
10000b18:	180b883a 	mov	r5,r3
10000b1c:	2005883a 	mov	r2,r4
10000b20:	2807883a 	mov	r3,r5
10000b24:	000d883a 	mov	r6,zero
10000b28:	01d019f4 	movhi	r7,16487
10000b2c:	39e00004 	addi	r7,r7,-32768
10000b30:	1009883a 	mov	r4,r2
10000b34:	180b883a 	mov	r5,r3
10000b38:	0009fd00 	call	10009fd0 <__divdf3>
10000b3c:	1009883a 	mov	r4,r2
10000b40:	180b883a 	mov	r5,r3
10000b44:	e13ff315 	stw	r4,-52(fp)
10000b48:	e17ff415 	stw	r5,-48(fp)
            // cannonBall.fired_v_x = intensity*cos(convertedAngle);
            // cannonBall.fired_v_y = intensity*sin(convertedAngle);
            cannonBall.v_x = intensity*cos(convertedAngle);
10000b4c:	e13ff217 	ldw	r4,-56(fp)
10000b50:	000bcec0 	call	1000bcec <__floatsidf>
10000b54:	1021883a 	mov	r16,r2
10000b58:	1823883a 	mov	r17,r3
10000b5c:	e13ff317 	ldw	r4,-52(fp)
10000b60:	e17ff417 	ldw	r5,-48(fp)
10000b64:	00073400 	call	10007340 <cos>
10000b68:	1009883a 	mov	r4,r2
10000b6c:	180b883a 	mov	r5,r3
10000b70:	200d883a 	mov	r6,r4
10000b74:	280f883a 	mov	r7,r5
10000b78:	8009883a 	mov	r4,r16
10000b7c:	880b883a 	mov	r5,r17
10000b80:	000ab040 	call	1000ab04 <__muldf3>
10000b84:	1009883a 	mov	r4,r2
10000b88:	180b883a 	mov	r5,r3
10000b8c:	2005883a 	mov	r2,r4
10000b90:	2807883a 	mov	r3,r5
10000b94:	1009883a 	mov	r4,r2
10000b98:	180b883a 	mov	r5,r3
10000b9c:	000bc6c0 	call	1000bc6c <__fixdfsi>
10000ba0:	1007883a 	mov	r3,r2
10000ba4:	00840674 	movhi	r2,4121
10000ba8:	1090e204 	addi	r2,r2,17288
10000bac:	10c00415 	stw	r3,16(r2)
            cannonBall.v_y = intensity*sin(convertedAngle);
10000bb0:	e13ff217 	ldw	r4,-56(fp)
10000bb4:	000bcec0 	call	1000bcec <__floatsidf>
10000bb8:	1021883a 	mov	r16,r2
10000bbc:	1823883a 	mov	r17,r3
10000bc0:	e13ff317 	ldw	r4,-52(fp)
10000bc4:	e17ff417 	ldw	r5,-48(fp)
10000bc8:	000742c0 	call	1000742c <sin>
10000bcc:	1009883a 	mov	r4,r2
10000bd0:	180b883a 	mov	r5,r3
10000bd4:	200d883a 	mov	r6,r4
10000bd8:	280f883a 	mov	r7,r5
10000bdc:	8009883a 	mov	r4,r16
10000be0:	880b883a 	mov	r5,r17
10000be4:	000ab040 	call	1000ab04 <__muldf3>
10000be8:	1009883a 	mov	r4,r2
10000bec:	180b883a 	mov	r5,r3
10000bf0:	2005883a 	mov	r2,r4
10000bf4:	2807883a 	mov	r3,r5
10000bf8:	1009883a 	mov	r4,r2
10000bfc:	180b883a 	mov	r5,r3
10000c00:	000bc6c0 	call	1000bc6c <__fixdfsi>
10000c04:	1007883a 	mov	r3,r2
10000c08:	00840674 	movhi	r2,4121
10000c0c:	1090e204 	addi	r2,r2,17288
10000c10:	10c00515 	stw	r3,20(r2)
            break;
10000c14:	0001883a 	nop
    }
    // pay attention!!! The coordinate here is the center coordinate of the player
    cannonBall.x_pos = player_x;
10000c18:	00840674 	movhi	r2,4121
10000c1c:	1090e204 	addi	r2,r2,17288
10000c20:	e0fffc17 	ldw	r3,-16(fp)
10000c24:	10c00115 	stw	r3,4(r2)
    cannonBall.x_prev = player_x;
10000c28:	00840674 	movhi	r2,4121
10000c2c:	1090e204 	addi	r2,r2,17288
10000c30:	e0fffc17 	ldw	r3,-16(fp)
10000c34:	10c00215 	stw	r3,8(r2)
    cannonBall.y_pos = player_y;
10000c38:	00840674 	movhi	r2,4121
10000c3c:	1090e204 	addi	r2,r2,17288
10000c40:	e0fffd17 	ldw	r3,-12(fp)
10000c44:	10c00015 	stw	r3,0(r2)
    cannonBall.y_prev = player_y;
10000c48:	00840674 	movhi	r2,4121
10000c4c:	1090e204 	addi	r2,r2,17288
10000c50:	e0fffd17 	ldw	r3,-12(fp)
10000c54:	10c00315 	stw	r3,12(r2)

    if((playerStruct->magic == 1)){
10000c58:	e0800217 	ldw	r2,8(fp)
10000c5c:	10800e17 	ldw	r2,56(r2)
10000c60:	10800058 	cmpnei	r2,r2,1
10000c64:	1000141e 	bne	r2,zero,10000cb8 <cannonBallFiring+0x914>
        if(playerStruct->direction <= 1){
10000c68:	e0800217 	ldw	r2,8(fp)
10000c6c:	10800717 	ldw	r2,28(r2)
10000c70:	10800088 	cmpgei	r2,r2,2
10000c74:	10000d1e 	bne	r2,zero,10000cac <cannonBallFiring+0x908>
            cannonBall.magic = 1;
10000c78:	00840674 	movhi	r2,4121
10000c7c:	1090e204 	addi	r2,r2,17288
10000c80:	00c00044 	movi	r3,1
10000c84:	10c00d15 	stw	r3,52(r2)
            playerStruct->x_prev = playerStruct->x_pos;
10000c88:	e0800217 	ldw	r2,8(fp)
10000c8c:	10c00017 	ldw	r3,0(r2)
10000c90:	e0800217 	ldw	r2,8(fp)
10000c94:	10c00215 	stw	r3,8(r2)
            playerStruct->y_prev = playerStruct->y_pos;
10000c98:	e0800217 	ldw	r2,8(fp)
10000c9c:	10c00117 	ldw	r3,4(r2)
10000ca0:	e0800217 	ldw	r2,8(fp)
10000ca4:	10c00315 	stw	r3,12(r2)
        }  // this is the magic cannonball
        else playerStruct->magic = 0;
    }
    // printf("The calculated V_x %d\n",cannonBall.v_x );
    // printf("The calculated V_y %d\n",cannonBall.v_y );
    return;
10000ca8:	00000306 	br	10000cb8 <cannonBallFiring+0x914>
        if(playerStruct->direction <= 1){
            cannonBall.magic = 1;
            playerStruct->x_prev = playerStruct->x_pos;
            playerStruct->y_prev = playerStruct->y_pos;
        }  // this is the magic cannonball
        else playerStruct->magic = 0;
10000cac:	e0800217 	ldw	r2,8(fp)
10000cb0:	10000e15 	stw	zero,56(r2)
    }
    // printf("The calculated V_x %d\n",cannonBall.v_x );
    // printf("The calculated V_y %d\n",cannonBall.v_y );
    return;
10000cb4:	0001883a 	nop
10000cb8:	0001883a 	nop
    
}
10000cbc:	e6fffe04 	addi	sp,fp,-8
10000cc0:	dfc00317 	ldw	ra,12(sp)
10000cc4:	df000217 	ldw	fp,8(sp)
10000cc8:	dc400117 	ldw	r17,4(sp)
10000ccc:	dc000017 	ldw	r16,0(sp)
10000cd0:	dec00404 	addi	sp,sp,16
10000cd4:	f800283a 	ret

10000cd8 <cannonBallAngle>:

void cannonBallAngle(int keycode){
10000cd8:	defffe04 	addi	sp,sp,-8
10000cdc:	df000115 	stw	fp,4(sp)
10000ce0:	df000104 	addi	fp,sp,4
10000ce4:	e13fff15 	stw	r4,-4(fp)
    if(keycode == KEY_UP){ // raise the angle
10000ce8:	e0bfff17 	ldw	r2,-4(fp)
10000cec:	10801498 	cmpnei	r2,r2,82
10000cf0:	10000d1e 	bne	r2,zero,10000d28 <cannonBallAngle+0x50>
        if(cannonBall.angle < FIRING_ANGLE_MAX) cannonBall.angle += FIRING_ANGLE_INTERVAL;
10000cf4:	00840674 	movhi	r2,4121
10000cf8:	1090e204 	addi	r2,r2,17288
10000cfc:	10800c17 	ldw	r2,48(r2)
10000d00:	10801188 	cmpgei	r2,r2,70
10000d04:	1000151e 	bne	r2,zero,10000d5c <cannonBallAngle+0x84>
10000d08:	00840674 	movhi	r2,4121
10000d0c:	1090e204 	addi	r2,r2,17288
10000d10:	10800c17 	ldw	r2,48(r2)
10000d14:	10c00144 	addi	r3,r2,5
10000d18:	00840674 	movhi	r2,4121
10000d1c:	1090e204 	addi	r2,r2,17288
10000d20:	10c00c15 	stw	r3,48(r2)
    }
    else{ // down the angle
        if(cannonBall.angle > FIRING_ANGLE_MIN) cannonBall.angle -= FIRING_ANGLE_INTERVAL;
    }
    // printf("The cannBall angle now is %d \n", cannonBall.angle);
    return;
10000d24:	00000d06 	br	10000d5c <cannonBallAngle+0x84>
void cannonBallAngle(int keycode){
    if(keycode == KEY_UP){ // raise the angle
        if(cannonBall.angle < FIRING_ANGLE_MAX) cannonBall.angle += FIRING_ANGLE_INTERVAL;
    }
    else{ // down the angle
        if(cannonBall.angle > FIRING_ANGLE_MIN) cannonBall.angle -= FIRING_ANGLE_INTERVAL;
10000d28:	00840674 	movhi	r2,4121
10000d2c:	1090e204 	addi	r2,r2,17288
10000d30:	10800c17 	ldw	r2,48(r2)
10000d34:	10800550 	cmplti	r2,r2,21
10000d38:	1000081e 	bne	r2,zero,10000d5c <cannonBallAngle+0x84>
10000d3c:	00840674 	movhi	r2,4121
10000d40:	1090e204 	addi	r2,r2,17288
10000d44:	10800c17 	ldw	r2,48(r2)
10000d48:	10fffec4 	addi	r3,r2,-5
10000d4c:	00840674 	movhi	r2,4121
10000d50:	1090e204 	addi	r2,r2,17288
10000d54:	10c00c15 	stw	r3,48(r2)
    }
    // printf("The cannBall angle now is %d \n", cannonBall.angle);
    return;
10000d58:	0001883a 	nop
10000d5c:	0001883a 	nop
}
10000d60:	e037883a 	mov	sp,fp
10000d64:	df000017 	ldw	fp,0(sp)
10000d68:	dec00104 	addi	sp,sp,4
10000d6c:	f800283a 	ret

10000d70 <isLegalCannonBall>:

int isLegalCannonBall(){  // 0 for not legal
10000d70:	defffb04 	addi	sp,sp,-20
10000d74:	df000415 	stw	fp,16(sp)
10000d78:	df000404 	addi	fp,sp,16
    int ball_left, ball_right, ball_top, ball_down;
    ball_left = cannonBall.x_pos-CANNONBALL_SIZE/2;
10000d7c:	00840674 	movhi	r2,4121
10000d80:	1090e204 	addi	r2,r2,17288
10000d84:	10800117 	ldw	r2,4(r2)
10000d88:	10bfff84 	addi	r2,r2,-2
10000d8c:	e0bffc15 	stw	r2,-16(fp)
    ball_right = cannonBall.x_pos+CANNONBALL_SIZE/2;
10000d90:	00840674 	movhi	r2,4121
10000d94:	1090e204 	addi	r2,r2,17288
10000d98:	10800117 	ldw	r2,4(r2)
10000d9c:	10800084 	addi	r2,r2,2
10000da0:	e0bffd15 	stw	r2,-12(fp)
    ball_top = cannonBall.y_pos-CANNONBALL_SIZE/2;
10000da4:	00840674 	movhi	r2,4121
10000da8:	1090e204 	addi	r2,r2,17288
10000dac:	10800017 	ldw	r2,0(r2)
10000db0:	10bfff84 	addi	r2,r2,-2
10000db4:	e0bffe15 	stw	r2,-8(fp)
    ball_down = cannonBall.y_pos+CANNONBALL_SIZE/2;
10000db8:	00840674 	movhi	r2,4121
10000dbc:	1090e204 	addi	r2,r2,17288
10000dc0:	10800017 	ldw	r2,0(r2)
10000dc4:	10800084 	addi	r2,r2,2
10000dc8:	e0bfff15 	stw	r2,-4(fp)

    if((ball_left < GAME_LEFTEDGE) || (ball_right > GAME_RIGHTEDGE) || (ball_down < GAME_DOWNEDGE) || (ball_top > GAME_HEIGHT)){ // not legal
10000dcc:	e0bffc17 	ldw	r2,-16(fp)
10000dd0:	10000816 	blt	r2,zero,10000df4 <isLegalCannonBall+0x84>
10000dd4:	e0bffd17 	ldw	r2,-12(fp)
10000dd8:	1080c848 	cmpgei	r2,r2,801
10000ddc:	1000051e 	bne	r2,zero,10000df4 <isLegalCannonBall+0x84>
10000de0:	e0bfff17 	ldw	r2,-4(fp)
10000de4:	10000316 	blt	r2,zero,10000df4 <isLegalCannonBall+0x84>
10000de8:	e0bffe17 	ldw	r2,-8(fp)
10000dec:	10807850 	cmplti	r2,r2,481
10000df0:	1000021e 	bne	r2,zero,10000dfc <isLegalCannonBall+0x8c>
        return 0;
10000df4:	0005883a 	mov	r2,zero
10000df8:	00001006 	br	10000e3c <isLegalCannonBall+0xcc>
    }
    if((ball_left + cannonBall.v_x < GAME_LEFTEDGE) || (ball_right + cannonBall.fired_v_x > GAME_RIGHTEDGE)){ // not legal
10000dfc:	00840674 	movhi	r2,4121
10000e00:	1090e204 	addi	r2,r2,17288
10000e04:	10c00417 	ldw	r3,16(r2)
10000e08:	e0bffc17 	ldw	r2,-16(fp)
10000e0c:	1885883a 	add	r2,r3,r2
10000e10:	10000716 	blt	r2,zero,10000e30 <isLegalCannonBall+0xc0>
10000e14:	00840674 	movhi	r2,4121
10000e18:	1090e204 	addi	r2,r2,17288
10000e1c:	10c00917 	ldw	r3,36(r2)
10000e20:	e0bffd17 	ldw	r2,-12(fp)
10000e24:	1885883a 	add	r2,r3,r2
10000e28:	1080c850 	cmplti	r2,r2,801
10000e2c:	1000021e 	bne	r2,zero,10000e38 <isLegalCannonBall+0xc8>
        return 0;
10000e30:	0005883a 	mov	r2,zero
10000e34:	00000106 	br	10000e3c <isLegalCannonBall+0xcc>
    }
    return 1;
10000e38:	00800044 	movi	r2,1

}
10000e3c:	e037883a 	mov	sp,fp
10000e40:	df000017 	ldw	fp,0(sp)
10000e44:	dec00104 	addi	sp,sp,4
10000e48:	f800283a 	ret

10000e4c <ground_init>:
//         ground.validGround[i] = 1;
//     }
    
//     return;
// }
void ground_init(){
10000e4c:	defffb04 	addi	sp,sp,-20
10000e50:	dfc00415 	stw	ra,16(sp)
10000e54:	df000315 	stw	fp,12(sp)
10000e58:	dc000215 	stw	r16,8(sp)
10000e5c:	df000304 	addi	fp,sp,12
		// printf("b\n");
	int x,y,value;
	for (y = 0; y < 240; y++){
10000e60:	e03ffe15 	stw	zero,-8(fp)
10000e64:	00001906 	br	10000ecc <ground_init+0x80>
		for (x = 0; x < 800; x++){
10000e68:	e03ffd15 	stw	zero,-12(fp)
10000e6c:	00001106 	br	10000eb4 <ground_init+0x68>
			// value = (480-y-1)*320 + (x/2);
			// pixel_color[value] = 0xAA;//0x66;
			ground.validGround[x][y] = 1;
10000e70:	040400b4 	movhi	r16,4098
10000e74:	8434c404 	addi	r16,r16,-11504
10000e78:	e0bffd17 	ldw	r2,-12(fp)
10000e7c:	01407804 	movi	r5,480
10000e80:	1009883a 	mov	r4,r2
10000e84:	00096fc0 	call	100096fc <__mulsi3>
10000e88:	1007883a 	mov	r3,r2
10000e8c:	e0bffe17 	ldw	r2,-8(fp)
10000e90:	1885883a 	add	r2,r3,r2
10000e94:	1085883a 	add	r2,r2,r2
10000e98:	1085883a 	add	r2,r2,r2
10000e9c:	8085883a 	add	r2,r16,r2
10000ea0:	00c00044 	movi	r3,1
10000ea4:	10c00015 	stw	r3,0(r2)
// }
void ground_init(){
		// printf("b\n");
	int x,y,value;
	for (y = 0; y < 240; y++){
		for (x = 0; x < 800; x++){
10000ea8:	e0bffd17 	ldw	r2,-12(fp)
10000eac:	10800044 	addi	r2,r2,1
10000eb0:	e0bffd15 	stw	r2,-12(fp)
10000eb4:	e0bffd17 	ldw	r2,-12(fp)
10000eb8:	1080c810 	cmplti	r2,r2,800
10000ebc:	103fec1e 	bne	r2,zero,10000e70 <__alt_data_end+0xf8000e70>
//     return;
// }
void ground_init(){
		// printf("b\n");
	int x,y,value;
	for (y = 0; y < 240; y++){
10000ec0:	e0bffe17 	ldw	r2,-8(fp)
10000ec4:	10800044 	addi	r2,r2,1
10000ec8:	e0bffe15 	stw	r2,-8(fp)
10000ecc:	e0bffe17 	ldw	r2,-8(fp)
10000ed0:	10803c10 	cmplti	r2,r2,240
10000ed4:	103fe41e 	bne	r2,zero,10000e68 <__alt_data_end+0xf8000e68>
			// value = (480-y-1)*320 + (x/2);
			// pixel_color[value] = 0xAA;//0x66;
			ground.validGround[x][y] = 1;
		}
	}
	for (y = 240; y < 480; y++){
10000ed8:	00803c04 	movi	r2,240
10000edc:	e0bffe15 	stw	r2,-8(fp)
10000ee0:	00001806 	br	10000f44 <ground_init+0xf8>
		for (x = 0; x < 800; x++){
10000ee4:	e03ffd15 	stw	zero,-12(fp)
10000ee8:	00001006 	br	10000f2c <ground_init+0xe0>
			ground.validGround[x][y] = 0;
10000eec:	040400b4 	movhi	r16,4098
10000ef0:	8434c404 	addi	r16,r16,-11504
10000ef4:	e0bffd17 	ldw	r2,-12(fp)
10000ef8:	01407804 	movi	r5,480
10000efc:	1009883a 	mov	r4,r2
10000f00:	00096fc0 	call	100096fc <__mulsi3>
10000f04:	1007883a 	mov	r3,r2
10000f08:	e0bffe17 	ldw	r2,-8(fp)
10000f0c:	1885883a 	add	r2,r3,r2
10000f10:	1085883a 	add	r2,r2,r2
10000f14:	1085883a 	add	r2,r2,r2
10000f18:	8085883a 	add	r2,r16,r2
10000f1c:	10000015 	stw	zero,0(r2)
			// pixel_color[value] = 0xAA;//0x66;
			ground.validGround[x][y] = 1;
		}
	}
	for (y = 240; y < 480; y++){
		for (x = 0; x < 800; x++){
10000f20:	e0bffd17 	ldw	r2,-12(fp)
10000f24:	10800044 	addi	r2,r2,1
10000f28:	e0bffd15 	stw	r2,-12(fp)
10000f2c:	e0bffd17 	ldw	r2,-12(fp)
10000f30:	1080c810 	cmplti	r2,r2,800
10000f34:	103fed1e 	bne	r2,zero,10000eec <__alt_data_end+0xf8000eec>
			// value = (480-y-1)*320 + (x/2);
			// pixel_color[value] = 0xAA;//0x66;
			ground.validGround[x][y] = 1;
		}
	}
	for (y = 240; y < 480; y++){
10000f38:	e0bffe17 	ldw	r2,-8(fp)
10000f3c:	10800044 	addi	r2,r2,1
10000f40:	e0bffe15 	stw	r2,-8(fp)
10000f44:	e0bffe17 	ldw	r2,-8(fp)
10000f48:	10807810 	cmplti	r2,r2,480
10000f4c:	103fe51e 	bne	r2,zero,10000ee4 <__alt_data_end+0xf8000ee4>
		for (x = 0; x < 800; x++){
			ground.validGround[x][y] = 0;
		}
	}
	return;
10000f50:	0001883a 	nop
10000f54:	e6ffff04 	addi	sp,fp,-4
10000f58:	dfc00217 	ldw	ra,8(sp)
10000f5c:	df000117 	ldw	fp,4(sp)
10000f60:	dc000017 	ldw	r16,0(sp)
10000f64:	dec00304 	addi	sp,sp,12
10000f68:	f800283a 	ret

10000f6c <strengthBarInit>:
#include "LifeBar.h"




void strengthBarInit(){
10000f6c:	deffff04 	addi	sp,sp,-4
10000f70:	df000015 	stw	fp,0(sp)
10000f74:	d839883a 	mov	fp,sp
    // lifeBar initialization
    playerstrength.strength = MAX_STRENGTH;
10000f78:	00803204 	movi	r2,200
10000f7c:	d0a7f115 	stw	r2,-24636(gp)

    
    return;
10000f80:	0001883a 	nop
10000f84:	e037883a 	mov	sp,fp
10000f88:	df000017 	ldw	fp,0(sp)
10000f8c:	dec00104 	addi	sp,sp,4
10000f90:	f800283a 	ret

10000f94 <playersInit>:
#include "Player.h"

void playersInit(){
10000f94:	deffff04 	addi	sp,sp,-4
10000f98:	df000015 	stw	fp,0(sp)
10000f9c:	d839883a 	mov	fp,sp
    // red player

    redPlayer.x_pos = RED_PLAYER_X_INIT_POS;
10000fa0:	00840674 	movhi	r2,4121
10000fa4:	1090d304 	addi	r2,r2,17228
10000fa8:	00c01904 	movi	r3,100
10000fac:	10c00015 	stw	r3,0(r2)
    redPlayer.y_pos = RED_PLAYER_Y_INIT_POS;
10000fb0:	00840674 	movhi	r2,4121
10000fb4:	1090d304 	addi	r2,r2,17228
10000fb8:	00c03e84 	movi	r3,250
10000fbc:	10c00115 	stw	r3,4(r2)
    // redPlayer.y_pos = 201;
    // printf("%d y\n",redPlayer.y_pos);
	// printf("%d x\n",redPlayer.x_pos);
    // printf("%d yy\n",RED_PLAYER_Y_INIT_POS);
	// printf("%d xx\n",RED_PLAYER_X_INIT_POS);
    redPlayer.state = 0;
10000fc0:	00840674 	movhi	r2,4121
10000fc4:	1090d304 	addi	r2,r2,17228
10000fc8:	10000415 	stw	zero,16(r2)
    redPlayer.pos_state = 0;
10000fcc:	00840674 	movhi	r2,4121
10000fd0:	1090d304 	addi	r2,r2,17228
10000fd4:	10000515 	stw	zero,20(r2)
    redPlayer.health = PLAYER_MAX_HEALTH;
10000fd8:	00840674 	movhi	r2,4121
10000fdc:	1090d304 	addi	r2,r2,17228
10000fe0:	00c00144 	movi	r3,5
10000fe4:	10c00615 	stw	r3,24(r2)
    redPlayer.direction = 1;   // red player standing at left, facing right
10000fe8:	00840674 	movhi	r2,4121
10000fec:	1090d304 	addi	r2,r2,17228
10000ff0:	00c00044 	movi	r3,1
10000ff4:	10c00715 	stw	r3,28(r2)
    redPlayer.x_prev = RED_PLAYER_X_INIT_POS;
10000ff8:	00840674 	movhi	r2,4121
10000ffc:	1090d304 	addi	r2,r2,17228
10001000:	00c01904 	movi	r3,100
10001004:	10c00215 	stw	r3,8(r2)
    redPlayer.y_prev = RED_PLAYER_Y_INIT_POS;
10001008:	00840674 	movhi	r2,4121
1000100c:	1090d304 	addi	r2,r2,17228
10001010:	00c03e84 	movi	r3,250
10001014:	10c00315 	stw	r3,12(r2)
    redPlayer.x_left = RED_PLAYER_X_INIT_POS - 10;
10001018:	00840674 	movhi	r2,4121
1000101c:	1090d304 	addi	r2,r2,17228
10001020:	00c01684 	movi	r3,90
10001024:	10c00915 	stw	r3,36(r2)
    redPlayer.y_left = RED_PLAYER_Y_INIT_POS - 10;
10001028:	00840674 	movhi	r2,4121
1000102c:	1090d304 	addi	r2,r2,17228
10001030:	00c03c04 	movi	r3,240
10001034:	10c00b15 	stw	r3,44(r2)
    redPlayer.x_right = RED_PLAYER_X_INIT_POS + 10;
10001038:	00840674 	movhi	r2,4121
1000103c:	1090d304 	addi	r2,r2,17228
10001040:	00c01b84 	movi	r3,110
10001044:	10c00a15 	stw	r3,40(r2)
    redPlayer.y_right = RED_PLAYER_Y_INIT_POS - 10;
10001048:	00840674 	movhi	r2,4121
1000104c:	1090d304 	addi	r2,r2,17228
10001050:	00c03c04 	movi	r3,240
10001054:	10c00c15 	stw	r3,48(r2)
    redPlayer.v_y = 0;
10001058:	00840674 	movhi	r2,4121
1000105c:	1090d304 	addi	r2,r2,17228
10001060:	10000d15 	stw	zero,52(r2)
    redPlayer.magic = 0;
10001064:	00840674 	movhi	r2,4121
10001068:	1090d304 	addi	r2,r2,17228
1000106c:	10000e15 	stw	zero,56(r2)
    
    // blue player
    bluePlayer.x_pos = BLUE_PLAYER_X_INIT_POS;
10001070:	00840674 	movhi	r2,4121
10001074:	1090c404 	addi	r2,r2,17168
10001078:	00c0aec4 	movi	r3,699
1000107c:	10c00015 	stw	r3,0(r2)
    bluePlayer.y_pos = BLUE_PLAYER_Y_INIT_POS;
10001080:	00840674 	movhi	r2,4121
10001084:	1090c404 	addi	r2,r2,17168
10001088:	00c03e84 	movi	r3,250
1000108c:	10c00115 	stw	r3,4(r2)
    bluePlayer.state = 0;
10001090:	00840674 	movhi	r2,4121
10001094:	1090c404 	addi	r2,r2,17168
10001098:	10000415 	stw	zero,16(r2)
    bluePlayer.pos_state = 0;
1000109c:	00840674 	movhi	r2,4121
100010a0:	1090c404 	addi	r2,r2,17168
100010a4:	10000515 	stw	zero,20(r2)
    bluePlayer.health = PLAYER_MAX_HEALTH;
100010a8:	00840674 	movhi	r2,4121
100010ac:	1090c404 	addi	r2,r2,17168
100010b0:	00c00144 	movi	r3,5
100010b4:	10c00615 	stw	r3,24(r2)
    bluePlayer.direction = 0;  // blue player standing at right, facing left
100010b8:	00840674 	movhi	r2,4121
100010bc:	1090c404 	addi	r2,r2,17168
100010c0:	10000715 	stw	zero,28(r2)
    bluePlayer.x_prev = BLUE_PLAYER_X_INIT_POS;
100010c4:	00840674 	movhi	r2,4121
100010c8:	1090c404 	addi	r2,r2,17168
100010cc:	00c0aec4 	movi	r3,699
100010d0:	10c00215 	stw	r3,8(r2)
    bluePlayer.y_prev = BLUE_PLAYER_Y_INIT_POS;
100010d4:	00840674 	movhi	r2,4121
100010d8:	1090c404 	addi	r2,r2,17168
100010dc:	00c03e84 	movi	r3,250
100010e0:	10c00315 	stw	r3,12(r2)
    bluePlayer.x_left = BLUE_PLAYER_X_INIT_POS - 10;
100010e4:	00840674 	movhi	r2,4121
100010e8:	1090c404 	addi	r2,r2,17168
100010ec:	00c0ac44 	movi	r3,689
100010f0:	10c00915 	stw	r3,36(r2)
    bluePlayer.y_left = BLUE_PLAYER_Y_INIT_POS - 10;
100010f4:	00840674 	movhi	r2,4121
100010f8:	1090c404 	addi	r2,r2,17168
100010fc:	00c03c04 	movi	r3,240
10001100:	10c00b15 	stw	r3,44(r2)
    bluePlayer.x_right = BLUE_PLAYER_X_INIT_POS + 10;
10001104:	00840674 	movhi	r2,4121
10001108:	1090c404 	addi	r2,r2,17168
1000110c:	00c0b144 	movi	r3,709
10001110:	10c00a15 	stw	r3,40(r2)
    bluePlayer.y_right = BLUE_PLAYER_Y_INIT_POS - 10;
10001114:	00840674 	movhi	r2,4121
10001118:	1090c404 	addi	r2,r2,17168
1000111c:	00c03c04 	movi	r3,240
10001120:	10c00c15 	stw	r3,48(r2)
    bluePlayer.v_y = 0;
10001124:	00840674 	movhi	r2,4121
10001128:	1090c404 	addi	r2,r2,17168
1000112c:	10000d15 	stw	zero,52(r2)
    bluePlayer.magic = 0;
10001130:	00840674 	movhi	r2,4121
10001134:	1090c404 	addi	r2,r2,17168
10001138:	10000e15 	stw	zero,56(r2)

    return;
1000113c:	0001883a 	nop
}
10001140:	e037883a 	mov	sp,fp
10001144:	df000017 	ldw	fp,0(sp)
10001148:	dec00104 	addi	sp,sp,4
1000114c:	f800283a 	ret

10001150 <playerMovement>:

void playerMovement(int keycode, int player){
10001150:	defff604 	addi	sp,sp,-40
10001154:	dfc00915 	stw	ra,36(sp)
10001158:	df000815 	stw	fp,32(sp)
1000115c:	df000804 	addi	fp,sp,32
10001160:	e13ffe15 	stw	r4,-8(fp)
10001164:	e17fff15 	stw	r5,-4(fp)
    //  if(keycode == KEY_RIGHT && redPlayer.x_pos < 600){
    //     redPlayer.x_pos++;
    // } 
    // printf("%d x\n" , redPlayer.x_pos);

    int x_pos = (player == 0) ? redPlayer.x_pos: bluePlayer.x_pos;
10001168:	e0bfff17 	ldw	r2,-4(fp)
1000116c:	1000041e 	bne	r2,zero,10001180 <playerMovement+0x30>
10001170:	00840674 	movhi	r2,4121
10001174:	1090d304 	addi	r2,r2,17228
10001178:	10800017 	ldw	r2,0(r2)
1000117c:	00000306 	br	1000118c <playerMovement+0x3c>
10001180:	00840674 	movhi	r2,4121
10001184:	1090c404 	addi	r2,r2,17168
10001188:	10800017 	ldw	r2,0(r2)
1000118c:	e0bff815 	stw	r2,-32(fp)
    int y_pos = (player == 0) ? redPlayer.y_pos: bluePlayer.y_pos;
10001190:	e0bfff17 	ldw	r2,-4(fp)
10001194:	1000041e 	bne	r2,zero,100011a8 <playerMovement+0x58>
10001198:	00840674 	movhi	r2,4121
1000119c:	1090d304 	addi	r2,r2,17228
100011a0:	10800117 	ldw	r2,4(r2)
100011a4:	00000306 	br	100011b4 <playerMovement+0x64>
100011a8:	00840674 	movhi	r2,4121
100011ac:	1090c404 	addi	r2,r2,17168
100011b0:	10800117 	ldw	r2,4(r2)
100011b4:	e0bffa15 	stw	r2,-24(fp)
    int direction;
    int another_x = (player == 1) ? redPlayer.x_pos: bluePlayer.x_pos;
100011b8:	e0bfff17 	ldw	r2,-4(fp)
100011bc:	10800058 	cmpnei	r2,r2,1
100011c0:	1000041e 	bne	r2,zero,100011d4 <playerMovement+0x84>
100011c4:	00840674 	movhi	r2,4121
100011c8:	1090d304 	addi	r2,r2,17228
100011cc:	10800017 	ldw	r2,0(r2)
100011d0:	00000306 	br	100011e0 <playerMovement+0x90>
100011d4:	00840674 	movhi	r2,4121
100011d8:	1090c404 	addi	r2,r2,17168
100011dc:	10800017 	ldw	r2,0(r2)
100011e0:	e0bffb15 	stw	r2,-20(fp)
    int another_y = (player == 1) ? redPlayer.y_pos: bluePlayer.y_pos;
100011e4:	e0bfff17 	ldw	r2,-4(fp)
100011e8:	10800058 	cmpnei	r2,r2,1
100011ec:	1000041e 	bne	r2,zero,10001200 <playerMovement+0xb0>
100011f0:	00840674 	movhi	r2,4121
100011f4:	1090d304 	addi	r2,r2,17228
100011f8:	10800117 	ldw	r2,4(r2)
100011fc:	00000306 	br	1000120c <playerMovement+0xbc>
10001200:	00840674 	movhi	r2,4121
10001204:	1090c404 	addi	r2,r2,17168
10001208:	10800117 	ldw	r2,4(r2)
1000120c:	e0bffc15 	stw	r2,-16(fp)

    int player_state = 0;
10001210:	e03ffd15 	stw	zero,-12(fp)

    if(keycode == KEY_LEFT){
10001214:	e0bffe17 	ldw	r2,-8(fp)
10001218:	10801418 	cmpnei	r2,r2,80
1000121c:	1000111e 	bne	r2,zero,10001264 <playerMovement+0x114>
        player_state = 0;
10001220:	e03ffd15 	stw	zero,-12(fp)
        if(((x_pos-1) >= RED_PLAYER_X_INIT_POS) && (((x_pos-1) != another_x) || (another_y != y_pos))){
10001224:	e0bff817 	ldw	r2,-32(fp)
10001228:	10bfffc4 	addi	r2,r2,-1
1000122c:	10801910 	cmplti	r2,r2,100
10001230:	10000a1e 	bne	r2,zero,1000125c <playerMovement+0x10c>
10001234:	e0bff817 	ldw	r2,-32(fp)
10001238:	10ffffc4 	addi	r3,r2,-1
1000123c:	e0bffb17 	ldw	r2,-20(fp)
10001240:	1880031e 	bne	r3,r2,10001250 <playerMovement+0x100>
10001244:	e0fffc17 	ldw	r3,-16(fp)
10001248:	e0bffa17 	ldw	r2,-24(fp)
1000124c:	18800326 	beq	r3,r2,1000125c <playerMovement+0x10c>
            x_pos -= PLAYER_STEP;
10001250:	e0bff817 	ldw	r2,-32(fp)
10001254:	10bfff04 	addi	r2,r2,-4
10001258:	e0bff815 	stw	r2,-32(fp)
        }
        direction = 0; // face left
1000125c:	e03ff915 	stw	zero,-28(fp)
10001260:	00001206 	br	100012ac <playerMovement+0x15c>
    }
    else{
        player_state = 1;
10001264:	00800044 	movi	r2,1
10001268:	e0bffd15 	stw	r2,-12(fp)
        if(((x_pos+1) <= GAME_RIGHTEDGE) && (((x_pos+1) != another_x) || (another_y != y_pos))){
1000126c:	e0bff817 	ldw	r2,-32(fp)
10001270:	10800044 	addi	r2,r2,1
10001274:	1080c848 	cmpgei	r2,r2,801
10001278:	10000a1e 	bne	r2,zero,100012a4 <playerMovement+0x154>
1000127c:	e0bff817 	ldw	r2,-32(fp)
10001280:	10c00044 	addi	r3,r2,1
10001284:	e0bffb17 	ldw	r2,-20(fp)
10001288:	1880031e 	bne	r3,r2,10001298 <playerMovement+0x148>
1000128c:	e0fffc17 	ldw	r3,-16(fp)
10001290:	e0bffa17 	ldw	r2,-24(fp)
10001294:	18800326 	beq	r3,r2,100012a4 <playerMovement+0x154>
            x_pos += PLAYER_STEP;
10001298:	e0bff817 	ldw	r2,-32(fp)
1000129c:	10800104 	addi	r2,r2,4
100012a0:	e0bff815 	stw	r2,-32(fp)
        }
        direction = 1; // face left
100012a4:	00800044 	movi	r2,1
100012a8:	e0bff915 	stw	r2,-28(fp)
    }

    if(player == 0){
100012ac:	e0bfff17 	ldw	r2,-4(fp)
100012b0:	10000d1e 	bne	r2,zero,100012e8 <playerMovement+0x198>
        redPlayer.x_pos = x_pos;
100012b4:	00840674 	movhi	r2,4121
100012b8:	1090d304 	addi	r2,r2,17228
100012bc:	e0fff817 	ldw	r3,-32(fp)
100012c0:	10c00015 	stw	r3,0(r2)
        redPlayer.y_pos = y_pos;
100012c4:	00840674 	movhi	r2,4121
100012c8:	1090d304 	addi	r2,r2,17228
100012cc:	e0fffa17 	ldw	r3,-24(fp)
100012d0:	10c00115 	stw	r3,4(r2)
        redPlayer.direction = direction;
100012d4:	00840674 	movhi	r2,4121
100012d8:	1090d304 	addi	r2,r2,17228
100012dc:	e0fff917 	ldw	r3,-28(fp)
100012e0:	10c00715 	stw	r3,28(r2)
100012e4:	00000c06 	br	10001318 <playerMovement+0x1c8>
    }
    else{
        bluePlayer.x_pos = x_pos;
100012e8:	00840674 	movhi	r2,4121
100012ec:	1090c404 	addi	r2,r2,17168
100012f0:	e0fff817 	ldw	r3,-32(fp)
100012f4:	10c00015 	stw	r3,0(r2)
        bluePlayer.y_pos = y_pos;
100012f8:	00840674 	movhi	r2,4121
100012fc:	1090c404 	addi	r2,r2,17168
10001300:	e0fffa17 	ldw	r3,-24(fp)
10001304:	10c00115 	stw	r3,4(r2)
        bluePlayer.direction = direction;
10001308:	00840674 	movhi	r2,4121
1000130c:	1090c404 	addi	r2,r2,17168
10001310:	e0fff917 	ldw	r3,-28(fp)
10001314:	10c00715 	stw	r3,28(r2)
    }
    // printf("%d player in move \n" , player);
    //printf("%d x\n" , redPlayer.x_pos);
    printf("The player position: x: %d; y: %d\n", x_pos, y_pos);
10001318:	e1bffa17 	ldw	r6,-24(fp)
1000131c:	e17ff817 	ldw	r5,-32(fp)
10001320:	010400b4 	movhi	r4,4098
10001324:	21232a04 	addi	r4,r4,-29528
10001328:	000bfa40 	call	1000bfa4 <printf>
    return;
1000132c:	0001883a 	nop
}
10001330:	e037883a 	mov	sp,fp
10001334:	dfc00117 	ldw	ra,4(sp)
10001338:	df000017 	ldw	fp,0(sp)
1000133c:	dec00204 	addi	sp,sp,8
10001340:	f800283a 	ret

10001344 <updateDownhillLeftRightxy>:


// calculate the left right foot coordinate x y position
void updateDownhillLeftRightxy(struct player* playerStruct){
10001344:	defffe04 	addi	sp,sp,-8
10001348:	df000115 	stw	fp,4(sp)
1000134c:	df000104 	addi	fp,sp,4
10001350:	e13fff15 	stw	r4,-4(fp)
    if(playerStruct->direction == 4){  // if it is downhill left
10001354:	e0bfff17 	ldw	r2,-4(fp)
10001358:	10800717 	ldw	r2,28(r2)
1000135c:	10800118 	cmpnei	r2,r2,4
10001360:	1000151e 	bne	r2,zero,100013b8 <updateDownhillLeftRightxy+0x74>
        playerStruct->x_left = playerStruct->x_pos - 14; 
10001364:	e0bfff17 	ldw	r2,-4(fp)
10001368:	10800017 	ldw	r2,0(r2)
1000136c:	10fffc84 	addi	r3,r2,-14
10001370:	e0bfff17 	ldw	r2,-4(fp)
10001374:	10c00915 	stw	r3,36(r2)
        playerStruct->x_right = playerStruct->x_pos - 4;
10001378:	e0bfff17 	ldw	r2,-4(fp)
1000137c:	10800017 	ldw	r2,0(r2)
10001380:	10ffff04 	addi	r3,r2,-4
10001384:	e0bfff17 	ldw	r2,-4(fp)
10001388:	10c00a15 	stw	r3,40(r2)
        playerStruct->y_left = playerStruct->y_pos - 3;
1000138c:	e0bfff17 	ldw	r2,-4(fp)
10001390:	10800117 	ldw	r2,4(r2)
10001394:	10ffff44 	addi	r3,r2,-3
10001398:	e0bfff17 	ldw	r2,-4(fp)
1000139c:	10c00b15 	stw	r3,44(r2)
        playerStruct->y_right = playerStruct->y_pos - 13;
100013a0:	e0bfff17 	ldw	r2,-4(fp)
100013a4:	10800117 	ldw	r2,4(r2)
100013a8:	10fffcc4 	addi	r3,r2,-13
100013ac:	e0bfff17 	ldw	r2,-4(fp)
100013b0:	10c00c15 	stw	r3,48(r2)
        playerStruct->x_left = playerStruct->x_pos - 14; 
        playerStruct->x_right = playerStruct->x_pos - 4;
        playerStruct->y_left = playerStruct->y_pos - 3;
        playerStruct->y_right = playerStruct->y_pos - 13;
    }
    return;
100013b4:	00001506 	br	1000140c <updateDownhillLeftRightxy+0xc8>
        playerStruct->x_right = playerStruct->x_pos - 4;
        playerStruct->y_left = playerStruct->y_pos - 3;
        playerStruct->y_right = playerStruct->y_pos - 13;
    }
    else{  // if it is downhill right
        playerStruct->x_left = playerStruct->x_pos - 14; 
100013b8:	e0bfff17 	ldw	r2,-4(fp)
100013bc:	10800017 	ldw	r2,0(r2)
100013c0:	10fffc84 	addi	r3,r2,-14
100013c4:	e0bfff17 	ldw	r2,-4(fp)
100013c8:	10c00915 	stw	r3,36(r2)
        playerStruct->x_right = playerStruct->x_pos - 4;
100013cc:	e0bfff17 	ldw	r2,-4(fp)
100013d0:	10800017 	ldw	r2,0(r2)
100013d4:	10ffff04 	addi	r3,r2,-4
100013d8:	e0bfff17 	ldw	r2,-4(fp)
100013dc:	10c00a15 	stw	r3,40(r2)
        playerStruct->y_left = playerStruct->y_pos - 3;
100013e0:	e0bfff17 	ldw	r2,-4(fp)
100013e4:	10800117 	ldw	r2,4(r2)
100013e8:	10ffff44 	addi	r3,r2,-3
100013ec:	e0bfff17 	ldw	r2,-4(fp)
100013f0:	10c00b15 	stw	r3,44(r2)
        playerStruct->y_right = playerStruct->y_pos - 13;
100013f4:	e0bfff17 	ldw	r2,-4(fp)
100013f8:	10800117 	ldw	r2,4(r2)
100013fc:	10fffcc4 	addi	r3,r2,-13
10001400:	e0bfff17 	ldw	r2,-4(fp)
10001404:	10c00c15 	stw	r3,48(r2)
    }
    return;
10001408:	0001883a 	nop
}
1000140c:	e037883a 	mov	sp,fp
10001410:	df000017 	ldw	fp,0(sp)
10001414:	dec00104 	addi	sp,sp,4
10001418:	f800283a 	ret

1000141c <updateGroundLeftRightxy>:
// calculate the left right foot coordinate x y position
void updateGroundLeftRightxy(struct player* playerStruct){
1000141c:	defffe04 	addi	sp,sp,-8
10001420:	df000115 	stw	fp,4(sp)
10001424:	df000104 	addi	fp,sp,4
10001428:	e13fff15 	stw	r4,-4(fp)
    playerStruct->x_left = playerStruct->x_pos - 10;
1000142c:	e0bfff17 	ldw	r2,-4(fp)
10001430:	10800017 	ldw	r2,0(r2)
10001434:	10fffd84 	addi	r3,r2,-10
10001438:	e0bfff17 	ldw	r2,-4(fp)
1000143c:	10c00915 	stw	r3,36(r2)
    playerStruct->x_right = playerStruct->x_pos + 10;
10001440:	e0bfff17 	ldw	r2,-4(fp)
10001444:	10800017 	ldw	r2,0(r2)
10001448:	10c00284 	addi	r3,r2,10
1000144c:	e0bfff17 	ldw	r2,-4(fp)
10001450:	10c00a15 	stw	r3,40(r2)
    playerStruct->y_left = playerStruct->y_pos - 10 - 1;  // minus 1 for special use: the img should be above the ground while the foot should be in the ground for validation
10001454:	e0bfff17 	ldw	r2,-4(fp)
10001458:	10800117 	ldw	r2,4(r2)
1000145c:	10fffd44 	addi	r3,r2,-11
10001460:	e0bfff17 	ldw	r2,-4(fp)
10001464:	10c00b15 	stw	r3,44(r2)
    playerStruct->y_right = playerStruct->y_pos - 10 - 1;
10001468:	e0bfff17 	ldw	r2,-4(fp)
1000146c:	10800117 	ldw	r2,4(r2)
10001470:	10fffd44 	addi	r3,r2,-11
10001474:	e0bfff17 	ldw	r2,-4(fp)
10001478:	10c00c15 	stw	r3,48(r2)
    return;
1000147c:	0001883a 	nop
}
10001480:	e037883a 	mov	sp,fp
10001484:	df000017 	ldw	fp,0(sp)
10001488:	dec00104 	addi	sp,sp,4
1000148c:	f800283a 	ret

10001490 <updateUphillLeftRightxy>:
// calculate the left right foot coordinate x y position
void updateUphillLeftRightxy(struct player* playerStruct){
10001490:	defffe04 	addi	sp,sp,-8
10001494:	df000115 	stw	fp,4(sp)
10001498:	df000104 	addi	fp,sp,4
1000149c:	e13fff15 	stw	r4,-4(fp)
    if(playerStruct->direction == 2){  // if it is uphill left
100014a0:	e0bfff17 	ldw	r2,-4(fp)
100014a4:	10800717 	ldw	r2,28(r2)
100014a8:	10800098 	cmpnei	r2,r2,2
100014ac:	1000151e 	bne	r2,zero,10001504 <updateUphillLeftRightxy+0x74>
        playerStruct->x_left = playerStruct->x_pos + 3; 
100014b0:	e0bfff17 	ldw	r2,-4(fp)
100014b4:	10800017 	ldw	r2,0(r2)
100014b8:	10c000c4 	addi	r3,r2,3
100014bc:	e0bfff17 	ldw	r2,-4(fp)
100014c0:	10c00915 	stw	r3,36(r2)
        playerStruct->x_right = playerStruct->x_pos + 13;
100014c4:	e0bfff17 	ldw	r2,-4(fp)
100014c8:	10800017 	ldw	r2,0(r2)
100014cc:	10c00344 	addi	r3,r2,13
100014d0:	e0bfff17 	ldw	r2,-4(fp)
100014d4:	10c00a15 	stw	r3,40(r2)
        playerStruct->y_left = playerStruct->y_pos - 14;
100014d8:	e0bfff17 	ldw	r2,-4(fp)
100014dc:	10800117 	ldw	r2,4(r2)
100014e0:	10fffc84 	addi	r3,r2,-14
100014e4:	e0bfff17 	ldw	r2,-4(fp)
100014e8:	10c00b15 	stw	r3,44(r2)
        playerStruct->y_right = playerStruct->y_pos - 4;
100014ec:	e0bfff17 	ldw	r2,-4(fp)
100014f0:	10800117 	ldw	r2,4(r2)
100014f4:	10ffff04 	addi	r3,r2,-4
100014f8:	e0bfff17 	ldw	r2,-4(fp)
100014fc:	10c00c15 	stw	r3,48(r2)
        playerStruct->x_left = playerStruct->x_pos + 3; 
        playerStruct->x_right = playerStruct->x_pos + 13;
        playerStruct->y_left = playerStruct->y_pos - 14;
        playerStruct->y_right = playerStruct->y_pos - 4;
    }
    return;
10001500:	00001506 	br	10001558 <updateUphillLeftRightxy+0xc8>
        playerStruct->x_right = playerStruct->x_pos + 13;
        playerStruct->y_left = playerStruct->y_pos - 14;
        playerStruct->y_right = playerStruct->y_pos - 4;
    }
    else{  // if it is uphill right
        playerStruct->x_left = playerStruct->x_pos + 3; 
10001504:	e0bfff17 	ldw	r2,-4(fp)
10001508:	10800017 	ldw	r2,0(r2)
1000150c:	10c000c4 	addi	r3,r2,3
10001510:	e0bfff17 	ldw	r2,-4(fp)
10001514:	10c00915 	stw	r3,36(r2)
        playerStruct->x_right = playerStruct->x_pos + 13;
10001518:	e0bfff17 	ldw	r2,-4(fp)
1000151c:	10800017 	ldw	r2,0(r2)
10001520:	10c00344 	addi	r3,r2,13
10001524:	e0bfff17 	ldw	r2,-4(fp)
10001528:	10c00a15 	stw	r3,40(r2)
        playerStruct->y_left = playerStruct->y_pos - 14;
1000152c:	e0bfff17 	ldw	r2,-4(fp)
10001530:	10800117 	ldw	r2,4(r2)
10001534:	10fffc84 	addi	r3,r2,-14
10001538:	e0bfff17 	ldw	r2,-4(fp)
1000153c:	10c00b15 	stw	r3,44(r2)
        playerStruct->y_right = playerStruct->y_pos - 4;
10001540:	e0bfff17 	ldw	r2,-4(fp)
10001544:	10800117 	ldw	r2,4(r2)
10001548:	10ffff04 	addi	r3,r2,-4
1000154c:	e0bfff17 	ldw	r2,-4(fp)
10001550:	10c00c15 	stw	r3,48(r2)
    }
    return;
10001554:	0001883a 	nop
}
10001558:	e037883a 	mov	sp,fp
1000155c:	df000017 	ldw	fp,0(sp)
10001560:	dec00104 	addi	sp,sp,4
10001564:	f800283a 	ret

10001568 <convertCoordinateUpHill>:


// when the player transit to another position: e.g from ground position to uphill or downhill position, we should update his position
// choice: 0 --  ground -> right up to uphill;  1 -- ground -> left down to uphill; 2 -- air -> uphill
void convertCoordinateUpHill(struct player* playerStruct, int choice){
10001568:	defffa04 	addi	sp,sp,-24
1000156c:	dfc00515 	stw	ra,20(sp)
10001570:	df000415 	stw	fp,16(sp)
10001574:	df000404 	addi	fp,sp,16
10001578:	e13ffe15 	stw	r4,-8(fp)
1000157c:	e17fff15 	stw	r5,-4(fp)
    int mid_x, mid_y;
    mid_x = (playerStruct->x_left + playerStruct->x_right)/2;
10001580:	e0bffe17 	ldw	r2,-8(fp)
10001584:	10c00917 	ldw	r3,36(r2)
10001588:	e0bffe17 	ldw	r2,-8(fp)
1000158c:	10800a17 	ldw	r2,40(r2)
10001590:	1885883a 	add	r2,r3,r2
10001594:	1006d7fa 	srli	r3,r2,31
10001598:	1885883a 	add	r2,r3,r2
1000159c:	1005d07a 	srai	r2,r2,1
100015a0:	e0bffc15 	stw	r2,-16(fp)
    mid_y = (playerStruct->y_left + playerStruct->y_right)/2;
100015a4:	e0bffe17 	ldw	r2,-8(fp)
100015a8:	10c00b17 	ldw	r3,44(r2)
100015ac:	e0bffe17 	ldw	r2,-8(fp)
100015b0:	10800c17 	ldw	r2,48(r2)
100015b4:	1885883a 	add	r2,r3,r2
100015b8:	1006d7fa 	srli	r3,r2,31
100015bc:	1885883a 	add	r2,r3,r2
100015c0:	1005d07a 	srai	r2,r2,1
100015c4:	e0bffd15 	stw	r2,-12(fp)
    switch(choice){
100015c8:	e0bfff17 	ldw	r2,-4(fp)
100015cc:	10c00060 	cmpeqi	r3,r2,1
100015d0:	18000c1e 	bne	r3,zero,10001604 <convertCoordinateUpHill+0x9c>
100015d4:	10c000a0 	cmpeqi	r3,r2,2
100015d8:	1800131e 	bne	r3,zero,10001628 <convertCoordinateUpHill+0xc0>
100015dc:	10001b1e 	bne	r2,zero,1000164c <convertCoordinateUpHill+0xe4>
        case 0: 
            playerStruct->x_pos = (mid_x - 1) - 8; // right position
100015e0:	e0bffc17 	ldw	r2,-16(fp)
100015e4:	10fffdc4 	addi	r3,r2,-9
100015e8:	e0bffe17 	ldw	r2,-8(fp)
100015ec:	10c00015 	stw	r3,0(r2)
            playerStruct->y_pos = mid_y + 9;
100015f0:	e0bffd17 	ldw	r2,-12(fp)
100015f4:	10c00244 	addi	r3,r2,9
100015f8:	e0bffe17 	ldw	r2,-8(fp)
100015fc:	10c00115 	stw	r3,4(r2)
            break;
10001600:	00001206 	br	1000164c <convertCoordinateUpHill+0xe4>
        case 1:
            playerStruct->x_pos = (mid_x + 1) - 8; // left position
10001604:	e0bffc17 	ldw	r2,-16(fp)
10001608:	10fffe44 	addi	r3,r2,-7
1000160c:	e0bffe17 	ldw	r2,-8(fp)
10001610:	10c00015 	stw	r3,0(r2)
            playerStruct->y_pos = mid_y + 9;
10001614:	e0bffd17 	ldw	r2,-12(fp)
10001618:	10c00244 	addi	r3,r2,9
1000161c:	e0bffe17 	ldw	r2,-8(fp)
10001620:	10c00115 	stw	r3,4(r2)
            break;
10001624:	00000906 	br	1000164c <convertCoordinateUpHill+0xe4>
        case 2:
            playerStruct->x_pos = mid_x - 8;    // convert mid point to center point
10001628:	e0bffc17 	ldw	r2,-16(fp)
1000162c:	10fffe04 	addi	r3,r2,-8
10001630:	e0bffe17 	ldw	r2,-8(fp)
10001634:	10c00015 	stw	r3,0(r2)
            playerStruct->y_pos = mid_y + 9; 
10001638:	e0bffd17 	ldw	r2,-12(fp)
1000163c:	10c00244 	addi	r3,r2,9
10001640:	e0bffe17 	ldw	r2,-8(fp)
10001644:	10c00115 	stw	r3,4(r2)
            break;
10001648:	0001883a 	nop
    }
    updateUphillLeftRightxy(playerStruct);
1000164c:	e13ffe17 	ldw	r4,-8(fp)
10001650:	00014900 	call	10001490 <updateUphillLeftRightxy>
    return;
10001654:	0001883a 	nop
}
10001658:	e037883a 	mov	sp,fp
1000165c:	dfc00117 	ldw	ra,4(sp)
10001660:	df000017 	ldw	fp,0(sp)
10001664:	dec00204 	addi	sp,sp,8
10001668:	f800283a 	ret

1000166c <convertCoordinateDownHill>:

// when the player transit to another position: e.g from ground position to uphill or downhill position, we should update his position
// choice: 0 --  ground -> right down to downhill;  1 -- ground -> left up to downhill; 2 -- air -> downhill
void convertCoordinateDownHill(struct player* playerStruct, int choice){
1000166c:	defffa04 	addi	sp,sp,-24
10001670:	dfc00515 	stw	ra,20(sp)
10001674:	df000415 	stw	fp,16(sp)
10001678:	df000404 	addi	fp,sp,16
1000167c:	e13ffe15 	stw	r4,-8(fp)
10001680:	e17fff15 	stw	r5,-4(fp)
    int mid_x, mid_y;
    mid_x = (playerStruct->x_left + playerStruct->x_right)/2;
10001684:	e0bffe17 	ldw	r2,-8(fp)
10001688:	10c00917 	ldw	r3,36(r2)
1000168c:	e0bffe17 	ldw	r2,-8(fp)
10001690:	10800a17 	ldw	r2,40(r2)
10001694:	1885883a 	add	r2,r3,r2
10001698:	1006d7fa 	srli	r3,r2,31
1000169c:	1885883a 	add	r2,r3,r2
100016a0:	1005d07a 	srai	r2,r2,1
100016a4:	e0bffc15 	stw	r2,-16(fp)
    mid_y = (playerStruct->y_left + playerStruct->y_right)/2;
100016a8:	e0bffe17 	ldw	r2,-8(fp)
100016ac:	10c00b17 	ldw	r3,44(r2)
100016b0:	e0bffe17 	ldw	r2,-8(fp)
100016b4:	10800c17 	ldw	r2,48(r2)
100016b8:	1885883a 	add	r2,r3,r2
100016bc:	1006d7fa 	srli	r3,r2,31
100016c0:	1885883a 	add	r2,r3,r2
100016c4:	1005d07a 	srai	r2,r2,1
100016c8:	e0bffd15 	stw	r2,-12(fp)
    switch(choice){
100016cc:	e0bfff17 	ldw	r2,-4(fp)
100016d0:	10c00060 	cmpeqi	r3,r2,1
100016d4:	18000c1e 	bne	r3,zero,10001708 <convertCoordinateDownHill+0x9c>
100016d8:	10c000a0 	cmpeqi	r3,r2,2
100016dc:	1800131e 	bne	r3,zero,1000172c <convertCoordinateDownHill+0xc0>
100016e0:	10001b1e 	bne	r2,zero,10001750 <convertCoordinateDownHill+0xe4>
        case 0: 
            playerStruct->x_pos = (mid_x - 1) + 9;    // convert mid point to center point
100016e4:	e0bffc17 	ldw	r2,-16(fp)
100016e8:	10c00204 	addi	r3,r2,8
100016ec:	e0bffe17 	ldw	r2,-8(fp)
100016f0:	10c00015 	stw	r3,0(r2)
            playerStruct->y_pos = mid_y + 8; 
100016f4:	e0bffd17 	ldw	r2,-12(fp)
100016f8:	10c00204 	addi	r3,r2,8
100016fc:	e0bffe17 	ldw	r2,-8(fp)
10001700:	10c00115 	stw	r3,4(r2)
            break;
10001704:	00001206 	br	10001750 <convertCoordinateDownHill+0xe4>
        case 1:
            playerStruct->x_pos = (mid_x + 1) + 9;    // convert mid point to center point
10001708:	e0bffc17 	ldw	r2,-16(fp)
1000170c:	10c00284 	addi	r3,r2,10
10001710:	e0bffe17 	ldw	r2,-8(fp)
10001714:	10c00015 	stw	r3,0(r2)
            playerStruct->y_pos = (mid_y) + 8; 
10001718:	e0bffd17 	ldw	r2,-12(fp)
1000171c:	10c00204 	addi	r3,r2,8
10001720:	e0bffe17 	ldw	r2,-8(fp)
10001724:	10c00115 	stw	r3,4(r2)
            break;
10001728:	00000906 	br	10001750 <convertCoordinateDownHill+0xe4>
        case 2:
            playerStruct->x_pos = mid_x + 9;    // convert mid point to center point
1000172c:	e0bffc17 	ldw	r2,-16(fp)
10001730:	10c00244 	addi	r3,r2,9
10001734:	e0bffe17 	ldw	r2,-8(fp)
10001738:	10c00015 	stw	r3,0(r2)
            playerStruct->y_pos = mid_y + 8; 
1000173c:	e0bffd17 	ldw	r2,-12(fp)
10001740:	10c00204 	addi	r3,r2,8
10001744:	e0bffe17 	ldw	r2,-8(fp)
10001748:	10c00115 	stw	r3,4(r2)
            break;
1000174c:	0001883a 	nop
    }
    updateDownhillLeftRightxy(playerStruct);
10001750:	e13ffe17 	ldw	r4,-8(fp)
10001754:	00013440 	call	10001344 <updateDownhillLeftRightxy>
    return;
10001758:	0001883a 	nop
}
1000175c:	e037883a 	mov	sp,fp
10001760:	dfc00117 	ldw	ra,4(sp)
10001764:	df000017 	ldw	fp,0(sp)
10001768:	dec00204 	addi	sp,sp,8
1000176c:	f800283a 	ret

10001770 <convertCoordinateGround>:

// when the player transit to another position: e.g from ground position to uphill or downhill position, we should update his position
// choice: 0 -- downhill -> left up to ground;  1 -- downhill -> right down to ground; 2 -- uphill -> right up to ground; 3 -- uphill -> left down to ground; 4 -- air -> ground
void convertCoordinateGround(struct player* playerStruct, int choice){
10001770:	defffa04 	addi	sp,sp,-24
10001774:	dfc00515 	stw	ra,20(sp)
10001778:	df000415 	stw	fp,16(sp)
1000177c:	df000404 	addi	fp,sp,16
10001780:	e13ffe15 	stw	r4,-8(fp)
10001784:	e17fff15 	stw	r5,-4(fp)
    int mid_x, mid_y;
    mid_x = (playerStruct->x_left + playerStruct->x_right)/2;
10001788:	e0bffe17 	ldw	r2,-8(fp)
1000178c:	10c00917 	ldw	r3,36(r2)
10001790:	e0bffe17 	ldw	r2,-8(fp)
10001794:	10800a17 	ldw	r2,40(r2)
10001798:	1885883a 	add	r2,r3,r2
1000179c:	1006d7fa 	srli	r3,r2,31
100017a0:	1885883a 	add	r2,r3,r2
100017a4:	1005d07a 	srai	r2,r2,1
100017a8:	e0bffc15 	stw	r2,-16(fp)
    mid_y = (playerStruct->y_left + playerStruct->y_right)/2;
100017ac:	e0bffe17 	ldw	r2,-8(fp)
100017b0:	10c00b17 	ldw	r3,44(r2)
100017b4:	e0bffe17 	ldw	r2,-8(fp)
100017b8:	10800c17 	ldw	r2,48(r2)
100017bc:	1885883a 	add	r2,r3,r2
100017c0:	1006d7fa 	srli	r3,r2,31
100017c4:	1885883a 	add	r2,r3,r2
100017c8:	1005d07a 	srai	r2,r2,1
100017cc:	e0bffd15 	stw	r2,-12(fp)
    switch(choice){
100017d0:	e0bfff17 	ldw	r2,-4(fp)
100017d4:	10800168 	cmpgeui	r2,r2,5
100017d8:	1000381e 	bne	r2,zero,100018bc <convertCoordinateGround+0x14c>
100017dc:	e0bfff17 	ldw	r2,-4(fp)
100017e0:	100690ba 	slli	r3,r2,2
100017e4:	00840034 	movhi	r2,4096
100017e8:	1085fe04 	addi	r2,r2,6136
100017ec:	1885883a 	add	r2,r3,r2
100017f0:	10800017 	ldw	r2,0(r2)
100017f4:	1000683a 	jmp	r2
100017f8:	1000180c 	andi	zero,r2,96
100017fc:	10001830 	cmpltui	zero,r2,96
10001800:	10001854 	ori	zero,r2,97
10001804:	10001878 	rdprs	zero,r2,97
10001808:	1000189c 	xori	zero,r2,98
        case 0: 
            playerStruct->x_pos = (mid_x + 1);    // convert mid point to center point
1000180c:	e0bffc17 	ldw	r2,-16(fp)
10001810:	10c00044 	addi	r3,r2,1
10001814:	e0bffe17 	ldw	r2,-8(fp)
10001818:	10c00015 	stw	r3,0(r2)
            playerStruct->y_pos = (mid_y - 1) + 11;
1000181c:	e0bffd17 	ldw	r2,-12(fp)
10001820:	10c00284 	addi	r3,r2,10
10001824:	e0bffe17 	ldw	r2,-8(fp)
10001828:	10c00115 	stw	r3,4(r2)
            break;
1000182c:	00002306 	br	100018bc <convertCoordinateGround+0x14c>
        case 1:
            playerStruct->x_pos = (mid_x - 1);    // convert mid point to center point
10001830:	e0bffc17 	ldw	r2,-16(fp)
10001834:	10ffffc4 	addi	r3,r2,-1
10001838:	e0bffe17 	ldw	r2,-8(fp)
1000183c:	10c00015 	stw	r3,0(r2)
            playerStruct->y_pos = (mid_y + 1) + 11;
10001840:	e0bffd17 	ldw	r2,-12(fp)
10001844:	10c00304 	addi	r3,r2,12
10001848:	e0bffe17 	ldw	r2,-8(fp)
1000184c:	10c00115 	stw	r3,4(r2)
            break;
10001850:	00001a06 	br	100018bc <convertCoordinateGround+0x14c>
        case 2:
            playerStruct->x_pos = (mid_x - 1);    // convert mid point to center point
10001854:	e0bffc17 	ldw	r2,-16(fp)
10001858:	10ffffc4 	addi	r3,r2,-1
1000185c:	e0bffe17 	ldw	r2,-8(fp)
10001860:	10c00015 	stw	r3,0(r2)
            playerStruct->y_pos = (mid_y - 1) + 11;
10001864:	e0bffd17 	ldw	r2,-12(fp)
10001868:	10c00284 	addi	r3,r2,10
1000186c:	e0bffe17 	ldw	r2,-8(fp)
10001870:	10c00115 	stw	r3,4(r2)
            break;
10001874:	00001106 	br	100018bc <convertCoordinateGround+0x14c>
        case 3:
            playerStruct->x_pos = (mid_x + 1);    // convert mid point to center point
10001878:	e0bffc17 	ldw	r2,-16(fp)
1000187c:	10c00044 	addi	r3,r2,1
10001880:	e0bffe17 	ldw	r2,-8(fp)
10001884:	10c00015 	stw	r3,0(r2)
            playerStruct->y_pos = (mid_y + 1) + 11; 
10001888:	e0bffd17 	ldw	r2,-12(fp)
1000188c:	10c00304 	addi	r3,r2,12
10001890:	e0bffe17 	ldw	r2,-8(fp)
10001894:	10c00115 	stw	r3,4(r2)
            break;
10001898:	00000806 	br	100018bc <convertCoordinateGround+0x14c>
        case 4:
            playerStruct->x_pos = mid_x;    // convert mid point to center point
1000189c:	e0bffe17 	ldw	r2,-8(fp)
100018a0:	e0fffc17 	ldw	r3,-16(fp)
100018a4:	10c00015 	stw	r3,0(r2)
            playerStruct->y_pos = mid_y + 11; 
100018a8:	e0bffd17 	ldw	r2,-12(fp)
100018ac:	10c002c4 	addi	r3,r2,11
100018b0:	e0bffe17 	ldw	r2,-8(fp)
100018b4:	10c00115 	stw	r3,4(r2)
            break;
100018b8:	0001883a 	nop
    }
    updateGroundLeftRightxy(playerStruct);
100018bc:	e13ffe17 	ldw	r4,-8(fp)
100018c0:	000141c0 	call	1000141c <updateGroundLeftRightxy>
    return;
100018c4:	0001883a 	nop
}
100018c8:	e037883a 	mov	sp,fp
100018cc:	dfc00117 	ldw	ra,4(sp)
100018d0:	df000017 	ldw	fp,0(sp)
100018d4:	dec00204 	addi	sp,sp,8
100018d8:	f800283a 	ret

100018dc <yCoordinateConvert>:
#include "drawBuffer.h"


int yCoordinateConvert(int y){
100018dc:	defffe04 	addi	sp,sp,-8
100018e0:	df000115 	stw	fp,4(sp)
100018e4:	df000104 	addi	fp,sp,4
100018e8:	e13fff15 	stw	r4,-4(fp)
    return 480 - y - 1;
100018ec:	00c077c4 	movi	r3,479
100018f0:	e0bfff17 	ldw	r2,-4(fp)
100018f4:	1885c83a 	sub	r2,r3,r2
}
100018f8:	e037883a 	mov	sp,fp
100018fc:	df000017 	ldw	fp,0(sp)
10001900:	dec00104 	addi	sp,sp,4
10001904:	f800283a 	ret

10001908 <PackArray>:
    // y3 | y2 | y1 | y0 |  0 |  0 |  0 |  0 |

    // itemId:  6  bit;
    // x:       10 bit;
    // y:       10 bit;
void PackArray(struct TEXT_VGA_STRUCT* buffer, int itemId, int x, int y, int size){
10001908:	defff804 	addi	sp,sp,-32
1000190c:	dfc00715 	stw	ra,28(sp)
10001910:	df000615 	stw	fp,24(sp)
10001914:	df000604 	addi	fp,sp,24
10001918:	e13ffc15 	stw	r4,-16(fp)
1000191c:	e17ffd15 	stw	r5,-12(fp)
10001920:	e1bffe15 	stw	r6,-8(fp)
10001924:	e1ffff15 	stw	r7,-4(fp)
    int converted_Y, converted_X;
    converted_Y = yCoordinateConvert(y + size);
10001928:	e0ffff17 	ldw	r3,-4(fp)
1000192c:	e0800217 	ldw	r2,8(fp)
10001930:	1885883a 	add	r2,r3,r2
10001934:	1009883a 	mov	r4,r2
10001938:	00018dc0 	call	100018dc <yCoordinateConvert>
1000193c:	e0bffa15 	stw	r2,-24(fp)
    converted_X = x + size;
10001940:	e0fffe17 	ldw	r3,-8(fp)
10001944:	e0800217 	ldw	r2,8(fp)
10001948:	1885883a 	add	r2,r3,r2
1000194c:	e0bffb15 	stw	r2,-20(fp)
    buffer->VRAM[OFFSET + buffer->counter] = (converted_Y << 4) & 0xf0;
10001950:	e0bffc17 	ldw	r2,-16(fp)
10001954:	1080c917 	ldw	r2,804(r2)
10001958:	e0fffa17 	ldw	r3,-24(fp)
1000195c:	1806913a 	slli	r3,r3,4
10001960:	1809883a 	mov	r4,r3
10001964:	e0fffc17 	ldw	r3,-16(fp)
10001968:	1885883a 	add	r2,r3,r2
1000196c:	11000005 	stb	r4,0(r2)
    buffer->counter++;
10001970:	e0bffc17 	ldw	r2,-16(fp)
10001974:	1080c917 	ldw	r2,804(r2)
10001978:	10c00044 	addi	r3,r2,1
1000197c:	e0bffc17 	ldw	r2,-16(fp)
10001980:	10c0c915 	stw	r3,804(r2)
    buffer->VRAM[OFFSET + buffer->counter] = ((converted_Y >> 4) & 0x3f) | ((converted_X << 6) & 0xc0) ;
10001984:	e0bffc17 	ldw	r2,-16(fp)
10001988:	1080c917 	ldw	r2,804(r2)
1000198c:	e0fffa17 	ldw	r3,-24(fp)
10001990:	1807d13a 	srai	r3,r3,4
10001994:	18c00fcc 	andi	r3,r3,63
10001998:	1809883a 	mov	r4,r3
1000199c:	e0fffb17 	ldw	r3,-20(fp)
100019a0:	180691ba 	slli	r3,r3,6
100019a4:	20c6b03a 	or	r3,r4,r3
100019a8:	1809883a 	mov	r4,r3
100019ac:	e0fffc17 	ldw	r3,-16(fp)
100019b0:	1885883a 	add	r2,r3,r2
100019b4:	11000005 	stb	r4,0(r2)
    buffer->counter++;
100019b8:	e0bffc17 	ldw	r2,-16(fp)
100019bc:	1080c917 	ldw	r2,804(r2)
100019c0:	10c00044 	addi	r3,r2,1
100019c4:	e0bffc17 	ldw	r2,-16(fp)
100019c8:	10c0c915 	stw	r3,804(r2)
    buffer->VRAM[OFFSET + buffer->counter] = (converted_X >> 2) & 0xff;
100019cc:	e0bffc17 	ldw	r2,-16(fp)
100019d0:	1080c917 	ldw	r2,804(r2)
100019d4:	e0fffb17 	ldw	r3,-20(fp)
100019d8:	1807d0ba 	srai	r3,r3,2
100019dc:	1809883a 	mov	r4,r3
100019e0:	e0fffc17 	ldw	r3,-16(fp)
100019e4:	1885883a 	add	r2,r3,r2
100019e8:	11000005 	stb	r4,0(r2)
    buffer->counter++;
100019ec:	e0bffc17 	ldw	r2,-16(fp)
100019f0:	1080c917 	ldw	r2,804(r2)
100019f4:	10c00044 	addi	r3,r2,1
100019f8:	e0bffc17 	ldw	r2,-16(fp)
100019fc:	10c0c915 	stw	r3,804(r2)
    buffer->VRAM[OFFSET + buffer->counter] = (itemId << 2) & 0xfc;
10001a00:	e0bffc17 	ldw	r2,-16(fp)
10001a04:	10c0c917 	ldw	r3,804(r2)
10001a08:	e0bffd17 	ldw	r2,-12(fp)
10001a0c:	1085883a 	add	r2,r2,r2
10001a10:	1085883a 	add	r2,r2,r2
10001a14:	1009883a 	mov	r4,r2
10001a18:	e0bffc17 	ldw	r2,-16(fp)
10001a1c:	10c5883a 	add	r2,r2,r3
10001a20:	11000005 	stb	r4,0(r2)
    buffer->counter++;
10001a24:	e0bffc17 	ldw	r2,-16(fp)
10001a28:	1080c917 	ldw	r2,804(r2)
10001a2c:	10c00044 	addi	r3,r2,1
10001a30:	e0bffc17 	ldw	r2,-16(fp)
10001a34:	10c0c915 	stw	r3,804(r2)
//	printf("%d | %d | %d | %d\n", ((itemId << 2) & 0xfc), ((x >> 2) & 0xff), (((converted_Y >> 4) & 0x3f) | ((x << 6) & 0xc0)), ((converted_Y << 4) & 0xf0));
    return;
10001a38:	0001883a 	nop
}
10001a3c:	e037883a 	mov	sp,fp
10001a40:	dfc00117 	ldw	ra,4(sp)
10001a44:	df000017 	ldw	fp,0(sp)
10001a48:	dec00204 	addi	sp,sp,8
10001a4c:	f800283a 	ret

10001a50 <SetZeroArray>:

void SetZeroArray(struct TEXT_VGA_STRUCT* buffer, int skipNUM){ // skip num is the number of item to skip
10001a50:	defffd04 	addi	sp,sp,-12
10001a54:	df000215 	stw	fp,8(sp)
10001a58:	df000204 	addi	fp,sp,8
10001a5c:	e13ffe15 	stw	r4,-8(fp)
10001a60:	e17fff15 	stw	r5,-4(fp)
    while(skipNUM > 0){
10001a64:	00002b06 	br	10001b14 <SetZeroArray+0xc4>
        buffer->VRAM[OFFSET + buffer->counter] = 0;
10001a68:	e0bffe17 	ldw	r2,-8(fp)
10001a6c:	1080c917 	ldw	r2,804(r2)
10001a70:	e0fffe17 	ldw	r3,-8(fp)
10001a74:	1885883a 	add	r2,r3,r2
10001a78:	10000005 	stb	zero,0(r2)
        buffer->counter++;
10001a7c:	e0bffe17 	ldw	r2,-8(fp)
10001a80:	1080c917 	ldw	r2,804(r2)
10001a84:	10c00044 	addi	r3,r2,1
10001a88:	e0bffe17 	ldw	r2,-8(fp)
10001a8c:	10c0c915 	stw	r3,804(r2)
        buffer->VRAM[OFFSET + buffer->counter] = 0;
10001a90:	e0bffe17 	ldw	r2,-8(fp)
10001a94:	1080c917 	ldw	r2,804(r2)
10001a98:	e0fffe17 	ldw	r3,-8(fp)
10001a9c:	1885883a 	add	r2,r3,r2
10001aa0:	10000005 	stb	zero,0(r2)
        buffer->counter++;
10001aa4:	e0bffe17 	ldw	r2,-8(fp)
10001aa8:	1080c917 	ldw	r2,804(r2)
10001aac:	10c00044 	addi	r3,r2,1
10001ab0:	e0bffe17 	ldw	r2,-8(fp)
10001ab4:	10c0c915 	stw	r3,804(r2)
        buffer->VRAM[OFFSET + buffer->counter] = 0;
10001ab8:	e0bffe17 	ldw	r2,-8(fp)
10001abc:	1080c917 	ldw	r2,804(r2)
10001ac0:	e0fffe17 	ldw	r3,-8(fp)
10001ac4:	1885883a 	add	r2,r3,r2
10001ac8:	10000005 	stb	zero,0(r2)
        buffer->counter++;
10001acc:	e0bffe17 	ldw	r2,-8(fp)
10001ad0:	1080c917 	ldw	r2,804(r2)
10001ad4:	10c00044 	addi	r3,r2,1
10001ad8:	e0bffe17 	ldw	r2,-8(fp)
10001adc:	10c0c915 	stw	r3,804(r2)
        buffer->VRAM[OFFSET + buffer->counter] = 0;
10001ae0:	e0bffe17 	ldw	r2,-8(fp)
10001ae4:	1080c917 	ldw	r2,804(r2)
10001ae8:	e0fffe17 	ldw	r3,-8(fp)
10001aec:	1885883a 	add	r2,r3,r2
10001af0:	10000005 	stb	zero,0(r2)
        buffer->counter++;
10001af4:	e0bffe17 	ldw	r2,-8(fp)
10001af8:	1080c917 	ldw	r2,804(r2)
10001afc:	10c00044 	addi	r3,r2,1
10001b00:	e0bffe17 	ldw	r2,-8(fp)
10001b04:	10c0c915 	stw	r3,804(r2)
        skipNUM -= 1;
10001b08:	e0bfff17 	ldw	r2,-4(fp)
10001b0c:	10bfffc4 	addi	r2,r2,-1
10001b10:	e0bfff15 	stw	r2,-4(fp)
//	printf("%d | %d | %d | %d\n", ((itemId << 2) & 0xfc), ((x >> 2) & 0xff), (((converted_Y >> 4) & 0x3f) | ((x << 6) & 0xc0)), ((converted_Y << 4) & 0xf0));
    return;
}

void SetZeroArray(struct TEXT_VGA_STRUCT* buffer, int skipNUM){ // skip num is the number of item to skip
    while(skipNUM > 0){
10001b14:	e0bfff17 	ldw	r2,-4(fp)
10001b18:	00bfd316 	blt	zero,r2,10001a68 <__alt_data_end+0xf8001a68>
        buffer->counter++;
        buffer->VRAM[OFFSET + buffer->counter] = 0;
        buffer->counter++;
        skipNUM -= 1;
    }
}
10001b1c:	0001883a 	nop
10001b20:	e037883a 	mov	sp,fp
10001b24:	df000017 	ldw	fp,0(sp)
10001b28:	dec00104 	addi	sp,sp,4
10001b2c:	f800283a 	ret

10001b30 <PackArrayCrater>:

void PackArrayCrater(struct TEXT_VGA_STRUCT* buffer, int itemId, int x, int y){
10001b30:	defff804 	addi	sp,sp,-32
10001b34:	dfc00715 	stw	ra,28(sp)
10001b38:	df000615 	stw	fp,24(sp)
10001b3c:	df000604 	addi	fp,sp,24
10001b40:	e13ffc15 	stw	r4,-16(fp)
10001b44:	e17ffd15 	stw	r5,-12(fp)
10001b48:	e1bffe15 	stw	r6,-8(fp)
10001b4c:	e1ffff15 	stw	r7,-4(fp)
    int converted_Y, converted_X;
    
    
    converted_Y = yCoordinateConvert(y + 24);
10001b50:	e0bfff17 	ldw	r2,-4(fp)
10001b54:	10800604 	addi	r2,r2,24
10001b58:	1009883a 	mov	r4,r2
10001b5c:	00018dc0 	call	100018dc <yCoordinateConvert>
10001b60:	e0bffa15 	stw	r2,-24(fp)
    converted_X = x + 40;
10001b64:	e0bffe17 	ldw	r2,-8(fp)
10001b68:	10800a04 	addi	r2,r2,40
10001b6c:	e0bffb15 	stw	r2,-20(fp)
    buffer->VRAM[CRATER_OFFSET + buffer->crater_counter] = (converted_Y << 4) & 0xf0;
10001b70:	e0bffc17 	ldw	r2,-16(fp)
10001b74:	1080ca17 	ldw	r2,808(r2)
10001b78:	10803204 	addi	r2,r2,200
10001b7c:	e0fffa17 	ldw	r3,-24(fp)
10001b80:	1806913a 	slli	r3,r3,4
10001b84:	1809883a 	mov	r4,r3
10001b88:	e0fffc17 	ldw	r3,-16(fp)
10001b8c:	1885883a 	add	r2,r3,r2
10001b90:	11000005 	stb	r4,0(r2)
    buffer->crater_counter++;
10001b94:	e0bffc17 	ldw	r2,-16(fp)
10001b98:	1080ca17 	ldw	r2,808(r2)
10001b9c:	10c00044 	addi	r3,r2,1
10001ba0:	e0bffc17 	ldw	r2,-16(fp)
10001ba4:	10c0ca15 	stw	r3,808(r2)
    buffer->VRAM[CRATER_OFFSET + buffer->crater_counter] = ((converted_Y >> 4) & 0x3f) | ((converted_X << 6) & 0xc0) ;
10001ba8:	e0bffc17 	ldw	r2,-16(fp)
10001bac:	1080ca17 	ldw	r2,808(r2)
10001bb0:	10803204 	addi	r2,r2,200
10001bb4:	e0fffa17 	ldw	r3,-24(fp)
10001bb8:	1807d13a 	srai	r3,r3,4
10001bbc:	18c00fcc 	andi	r3,r3,63
10001bc0:	1809883a 	mov	r4,r3
10001bc4:	e0fffb17 	ldw	r3,-20(fp)
10001bc8:	180691ba 	slli	r3,r3,6
10001bcc:	20c6b03a 	or	r3,r4,r3
10001bd0:	1809883a 	mov	r4,r3
10001bd4:	e0fffc17 	ldw	r3,-16(fp)
10001bd8:	1885883a 	add	r2,r3,r2
10001bdc:	11000005 	stb	r4,0(r2)
    buffer->crater_counter++;
10001be0:	e0bffc17 	ldw	r2,-16(fp)
10001be4:	1080ca17 	ldw	r2,808(r2)
10001be8:	10c00044 	addi	r3,r2,1
10001bec:	e0bffc17 	ldw	r2,-16(fp)
10001bf0:	10c0ca15 	stw	r3,808(r2)
    buffer->VRAM[CRATER_OFFSET + buffer->crater_counter] = (converted_X >> 2) & 0xff;
10001bf4:	e0bffc17 	ldw	r2,-16(fp)
10001bf8:	1080ca17 	ldw	r2,808(r2)
10001bfc:	10803204 	addi	r2,r2,200
10001c00:	e0fffb17 	ldw	r3,-20(fp)
10001c04:	1807d0ba 	srai	r3,r3,2
10001c08:	1809883a 	mov	r4,r3
10001c0c:	e0fffc17 	ldw	r3,-16(fp)
10001c10:	1885883a 	add	r2,r3,r2
10001c14:	11000005 	stb	r4,0(r2)
    buffer->crater_counter++;
10001c18:	e0bffc17 	ldw	r2,-16(fp)
10001c1c:	1080ca17 	ldw	r2,808(r2)
10001c20:	10c00044 	addi	r3,r2,1
10001c24:	e0bffc17 	ldw	r2,-16(fp)
10001c28:	10c0ca15 	stw	r3,808(r2)
    buffer->VRAM[CRATER_OFFSET + buffer->crater_counter] = (itemId << 2) & 0xfc;
10001c2c:	e0bffc17 	ldw	r2,-16(fp)
10001c30:	1080ca17 	ldw	r2,808(r2)
10001c34:	10c03204 	addi	r3,r2,200
10001c38:	e0bffd17 	ldw	r2,-12(fp)
10001c3c:	1085883a 	add	r2,r2,r2
10001c40:	1085883a 	add	r2,r2,r2
10001c44:	1009883a 	mov	r4,r2
10001c48:	e0bffc17 	ldw	r2,-16(fp)
10001c4c:	10c5883a 	add	r2,r2,r3
10001c50:	11000005 	stb	r4,0(r2)
    buffer->crater_counter++;
10001c54:	e0bffc17 	ldw	r2,-16(fp)
10001c58:	1080ca17 	ldw	r2,808(r2)
10001c5c:	10c00044 	addi	r3,r2,1
10001c60:	e0bffc17 	ldw	r2,-16(fp)
10001c64:	10c0ca15 	stw	r3,808(r2)

    
//	printf("%d | %d | %d | %d\n", ((itemId << 2) & 0xfc), ((x >> 2) & 0xff), (((converted_Y >> 4) & 0x3f) | ((x << 6) & 0xc0)), ((converted_Y << 4) & 0xf0));
    return;
10001c68:	0001883a 	nop
}
10001c6c:	e037883a 	mov	sp,fp
10001c70:	dfc00117 	ldw	ra,4(sp)
10001c74:	df000017 	ldw	fp,0(sp)
10001c78:	dec00204 	addi	sp,sp,8
10001c7c:	f800283a 	ret

10001c80 <endingFill>:





void endingFill(struct TEXT_VGA_STRUCT* buffer){   // fill ending words 0xFFFF and copy it to the vga_ctrl
10001c80:	defffd04 	addi	sp,sp,-12
10001c84:	dfc00215 	stw	ra,8(sp)
10001c88:	df000115 	stw	fp,4(sp)
10001c8c:	df000104 	addi	fp,sp,4
10001c90:	e13fff15 	stw	r4,-4(fp)
//
//    buffer->VRAM[CRATER_OFFSET + buffer->crater_counter + 3] = 0xff;

    // memcopy to the ctrl

    memcpy((vga_ctrl->VRAM),(buffer->VRAM),sizeof(buffer->VRAM));
10001c94:	d0a00017 	ldw	r2,-32768(gp)
10001c98:	1007883a 	mov	r3,r2
10001c9c:	e0bfff17 	ldw	r2,-4(fp)
10001ca0:	0180c804 	movi	r6,800
10001ca4:	100b883a 	mov	r5,r2
10001ca8:	1809883a 	mov	r4,r3
10001cac:	000be2c0 	call	1000be2c <memcpy>
//    }
//
//    printf("------------------------------------\n");

    
    return;
10001cb0:	0001883a 	nop
}
10001cb4:	e037883a 	mov	sp,fp
10001cb8:	dfc00117 	ldw	ra,4(sp)
10001cbc:	df000017 	ldw	fp,0(sp)
10001cc0:	dec00204 	addi	sp,sp,8
10001cc4:	f800283a 	ret

10001cc8 <gameStateInit>:
#include "gameState.h"

void gameStateInit(){
10001cc8:	deffff04 	addi	sp,sp,-4
10001ccc:	df000015 	stw	fp,0(sp)
10001cd0:	d839883a 	mov	fp,sp
    gameState.state = 0;  // initialize it to be the start state
10001cd4:	d027ef15 	stw	zero,-24644(gp)
    return;
10001cd8:	0001883a 	nop
10001cdc:	e037883a 	mov	sp,fp
10001ce0:	df000017 	ldw	fp,0(sp)
10001ce4:	dec00104 	addi	sp,sp,4
10001ce8:	f800283a 	ret

10001cec <gameInterface>:
int cracterOriginal[100];
int cracterCounter;
int lastPress;


void gameInterface(int keycode){
10001cec:	defffc04 	addi	sp,sp,-16
10001cf0:	dfc00315 	stw	ra,12(sp)
10001cf4:	df000215 	stw	fp,8(sp)
10001cf8:	df000204 	addi	fp,sp,8
10001cfc:	e13fff15 	stw	r4,-4(fp)
    int game_state = gameState.state;
10001d00:	d0a7ef17 	ldw	r2,-24644(gp)
10001d04:	e0bffe15 	stw	r2,-8(fp)
    switch (game_state) {
10001d08:	e0bffe17 	ldw	r2,-8(fp)
10001d0c:	10c00060 	cmpeqi	r3,r2,1
10001d10:	1800061e 	bne	r3,zero,10001d2c <gameInterface+0x40>
10001d14:	10c000a0 	cmpeqi	r3,r2,2
10001d18:	1800071e 	bne	r3,zero,10001d38 <gameInterface+0x4c>
10001d1c:	1000091e 	bne	r2,zero,10001d44 <gameInterface+0x58>
        case 0: // The game init state
            gameInitStateHandler(keycode);
10001d20:	e13fff17 	ldw	r4,-4(fp)
10001d24:	0001d640 	call	10001d64 <gameInitStateHandler>
            break;
10001d28:	00000606 	br	10001d44 <gameInterface+0x58>
        case 1: // The game has started
            gameStartStateHandler(keycode);
10001d2c:	e13fff17 	ldw	r4,-4(fp)
10001d30:	0001e440 	call	10001e44 <gameStartStateHandler>
            break;
10001d34:	00000306 	br	10001d44 <gameInterface+0x58>
        case 2: // The game has ended
            gameEndStateHandler(keycode);
10001d38:	e13fff17 	ldw	r4,-4(fp)
10001d3c:	000238c0 	call	1000238c <gameEndStateHandler>
            break;
10001d40:	0001883a 	nop

    }
    game_state = gameState.state;
10001d44:	d0a7ef17 	ldw	r2,-24644(gp)
10001d48:	e0bffe15 	stw	r2,-8(fp)
//    drawExplosion();
//    drawLifeBar();
//    drawChargingBar();
//    drawAngleText();

    return;
10001d4c:	0001883a 	nop
}
10001d50:	e037883a 	mov	sp,fp
10001d54:	dfc00117 	ldw	ra,4(sp)
10001d58:	df000017 	ldw	fp,0(sp)
10001d5c:	dec00204 	addi	sp,sp,8
10001d60:	f800283a 	ret

10001d64 <gameInitStateHandler>:

void gameInitStateHandler(int keycode){
10001d64:	defffc04 	addi	sp,sp,-16
10001d68:	dfc00315 	stw	ra,12(sp)
10001d6c:	df000215 	stw	fp,8(sp)
10001d70:	df000204 	addi	fp,sp,8
10001d74:	e13fff15 	stw	r4,-4(fp)
    if(keycode == KEY_ENTER){
10001d78:	e0bfff17 	ldw	r2,-4(fp)
10001d7c:	10800a18 	cmpnei	r2,r2,40
10001d80:	1000021e 	bne	r2,zero,10001d8c <gameInitStateHandler+0x28>
        gameState.state = 1; 
10001d84:	00800044 	movi	r2,1
10001d88:	d0a7ef15 	stw	r2,-24644(gp)
    }
    IngameBuffer.counter = 0; // rebuld the lookup table;
10001d8c:	00840674 	movhi	r2,4121
10001d90:	1090f004 	addi	r2,r2,17344
10001d94:	1000c915 	stw	zero,804(r2)
    SetZeroArray(&IngameBuffer, 47); // 1 reserved
10001d98:	01400bc4 	movi	r5,47
10001d9c:	01040674 	movhi	r4,4121
10001da0:	2110f004 	addi	r4,r4,17344
10001da4:	0001a500 	call	10001a50 <SetZeroArray>
    PackArray(&IngameBuffer, 26, 320 + 12, 280, 0);
10001da8:	d8000015 	stw	zero,0(sp)
10001dac:	01c04604 	movi	r7,280
10001db0:	01805304 	movi	r6,332
10001db4:	01400684 	movi	r5,26
10001db8:	01040674 	movhi	r4,4121
10001dbc:	2110f004 	addi	r4,r4,17344
10001dc0:	00019080 	call	10001908 <PackArray>
    PackArray(&IngameBuffer, 1 + 10, 320 - 80, 280, 10);
10001dc4:	00800284 	movi	r2,10
10001dc8:	d8800015 	stw	r2,0(sp)
10001dcc:	01c04604 	movi	r7,280
10001dd0:	01803c04 	movi	r6,240
10001dd4:	014002c4 	movi	r5,11
10001dd8:	01040674 	movhi	r4,4121
10001ddc:	2110f004 	addi	r4,r4,17344
10001de0:	00019080 	call	10001908 <PackArray>
    PackArray(&IngameBuffer, 4, 320 + 80, 280, 10);
10001de4:	00800284 	movi	r2,10
10001de8:	d8800015 	stw	r2,0(sp)
10001dec:	01c04604 	movi	r7,280
10001df0:	01806404 	movi	r6,400
10001df4:	01400104 	movi	r5,4
10001df8:	01040674 	movhi	r4,4121
10001dfc:	2110f004 	addi	r4,r4,17344
10001e00:	00019080 	call	10001908 <PackArray>
    memcpy((vga_ctrl->VRAM),(IngameBuffer.VRAM),sizeof(IngameBuffer.VRAM));
10001e04:	d0a00117 	ldw	r2,-32764(gp)
10001e08:	1007883a 	mov	r3,r2
10001e0c:	00840674 	movhi	r2,4121
10001e10:	1090f004 	addi	r2,r2,17344
10001e14:	1009883a 	mov	r4,r2
10001e18:	0080c804 	movi	r2,800
10001e1c:	100d883a 	mov	r6,r2
10001e20:	200b883a 	mov	r5,r4
10001e24:	1809883a 	mov	r4,r3
10001e28:	000be2c0 	call	1000be2c <memcpy>
    return;
10001e2c:	0001883a 	nop
}
10001e30:	e037883a 	mov	sp,fp
10001e34:	dfc00117 	ldw	ra,4(sp)
10001e38:	df000017 	ldw	fp,0(sp)
10001e3c:	dec00204 	addi	sp,sp,8
10001e40:	f800283a 	ret

10001e44 <gameStartStateHandler>:

void gameStartStateHandler(int keycode){
10001e44:	defffb04 	addi	sp,sp,-20
10001e48:	dfc00415 	stw	ra,16(sp)
10001e4c:	df000315 	stw	fp,12(sp)
10001e50:	df000304 	addi	fp,sp,12
10001e54:	e13fff15 	stw	r4,-4(fp)
    int now_player = (TurnState.next_player == 0) ? 1:0;
10001e58:	d0a7ee17 	ldw	r2,-24648(gp)
10001e5c:	1005003a 	cmpeq	r2,r2,zero
10001e60:	10803fcc 	andi	r2,r2,255
10001e64:	e0bffe15 	stw	r2,-8(fp)
    if((lastPress == 1) && (keycode != KEY_F)){
10001e68:	d0a7f317 	ldw	r2,-24628(gp)
10001e6c:	10800058 	cmpnei	r2,r2,1
10001e70:	1000171e 	bne	r2,zero,10001ed0 <gameStartStateHandler+0x8c>
10001e74:	e0bfff17 	ldw	r2,-4(fp)
10001e78:	10800260 	cmpeqi	r2,r2,9
10001e7c:	1000141e 	bne	r2,zero,10001ed0 <gameStartStateHandler+0x8c>
        if(now_player == 0){
10001e80:	e0bffe17 	ldw	r2,-8(fp)
10001e84:	1000091e 	bne	r2,zero,10001eac <gameStartStateHandler+0x68>
            redPlayer.magic = (redPlayer.magic == 0) ? 1:0;
10001e88:	00840674 	movhi	r2,4121
10001e8c:	1090d304 	addi	r2,r2,17228
10001e90:	10800e17 	ldw	r2,56(r2)
10001e94:	1005003a 	cmpeq	r2,r2,zero
10001e98:	10c03fcc 	andi	r3,r2,255
10001e9c:	00840674 	movhi	r2,4121
10001ea0:	1090d304 	addi	r2,r2,17228
10001ea4:	10c00e15 	stw	r3,56(r2)
10001ea8:	00000806 	br	10001ecc <gameStartStateHandler+0x88>
        } 
        else{
            bluePlayer.magic = (bluePlayer.magic == 0) ? 1:0;
10001eac:	00840674 	movhi	r2,4121
10001eb0:	1090c404 	addi	r2,r2,17168
10001eb4:	10800e17 	ldw	r2,56(r2)
10001eb8:	1005003a 	cmpeq	r2,r2,zero
10001ebc:	10c03fcc 	andi	r3,r2,255
10001ec0:	00840674 	movhi	r2,4121
10001ec4:	1090c404 	addi	r2,r2,17168
10001ec8:	10c00e15 	stw	r3,56(r2)
        }
        lastPress = 0;
10001ecc:	d027f315 	stw	zero,-24628(gp)
    }

    //printf("%d Turn State 1 means freezing \n" , TurnState.turn);
    if(keycode == KEY_ESC){ // END GAME
10001ed0:	e0bfff17 	ldw	r2,-4(fp)
10001ed4:	10800a58 	cmpnei	r2,r2,41
10001ed8:	1000031e 	bne	r2,zero,10001ee8 <gameStartStateHandler+0xa4>
        gameState.state = 2;
10001edc:	00800084 	movi	r2,2
10001ee0:	d0a7ef15 	stw	r2,-24644(gp)
10001ee4:	00007e06 	br	100020e0 <gameStartStateHandler+0x29c>
    }
    else{ 
        if(TurnState.turn != 1){ //When the mode is not freezing, the player can move
10001ee8:	d0a7ed17 	ldw	r2,-24652(gp)
10001eec:	10800060 	cmpeqi	r2,r2,1
10001ef0:	10004a1e 	bne	r2,zero,1000201c <gameStartStateHandler+0x1d8>
            if((keycode == KEY_DOWN) || (keycode ==KEY_UP)){  // When the player is inputed movement
10001ef4:	e0bfff17 	ldw	r2,-4(fp)
10001ef8:	10801460 	cmpeqi	r2,r2,81
10001efc:	1000031e 	bne	r2,zero,10001f0c <gameStartStateHandler+0xc8>
10001f00:	e0bfff17 	ldw	r2,-4(fp)
10001f04:	10801498 	cmpnei	r2,r2,82
10001f08:	1000031e 	bne	r2,zero,10001f18 <gameStartStateHandler+0xd4>
                cannonBallAngle(keycode);
10001f0c:	e13fff17 	ldw	r4,-4(fp)
10001f10:	0000cd80 	call	10000cd8 <cannonBallAngle>
10001f14:	00007206 	br	100020e0 <gameStartStateHandler+0x29c>
            }
            else if(((keycode == KEY_LEFT)|| (keycode == KEY_RIGHT)) && (playerstrength.strength != 0)){
10001f18:	e0bfff17 	ldw	r2,-4(fp)
10001f1c:	10801420 	cmpeqi	r2,r2,80
10001f20:	1000031e 	bne	r2,zero,10001f30 <gameStartStateHandler+0xec>
10001f24:	e0bfff17 	ldw	r2,-4(fp)
10001f28:	108013d8 	cmpnei	r2,r2,79
10001f2c:	10000e1e 	bne	r2,zero,10001f68 <gameStartStateHandler+0x124>
10001f30:	d0a7f117 	ldw	r2,-24636(gp)
10001f34:	10000c26 	beq	r2,zero,10001f68 <gameStartStateHandler+0x124>
               if(now_player == 0) updatedPlayerMovement(keycode, &redPlayer);
10001f38:	e0bffe17 	ldw	r2,-8(fp)
10001f3c:	1000051e 	bne	r2,zero,10001f54 <gameStartStateHandler+0x110>
10001f40:	01440674 	movhi	r5,4121
10001f44:	2950d304 	addi	r5,r5,17228
10001f48:	e13fff17 	ldw	r4,-4(fp)
10001f4c:	00041080 	call	10004108 <updatedPlayerMovement>
10001f50:	00006306 	br	100020e0 <gameStartStateHandler+0x29c>
               else updatedPlayerMovement(keycode, &bluePlayer);
10001f54:	01440674 	movhi	r5,4121
10001f58:	2950c404 	addi	r5,r5,17168
10001f5c:	e13fff17 	ldw	r4,-4(fp)
10001f60:	00041080 	call	10004108 <updatedPlayerMovement>
        if(TurnState.turn != 1){ //When the mode is not freezing, the player can move
            if((keycode == KEY_DOWN) || (keycode ==KEY_UP)){  // When the player is inputed movement
                cannonBallAngle(keycode);
            }
            else if(((keycode == KEY_LEFT)|| (keycode == KEY_RIGHT)) && (playerstrength.strength != 0)){
               if(now_player == 0) updatedPlayerMovement(keycode, &redPlayer);
10001f64:	00005e06 	br	100020e0 <gameStartStateHandler+0x29c>
               else updatedPlayerMovement(keycode, &bluePlayer);
                //  playerMovement(keycode, now_player);
            }
            else if((keycode == KEY_A) || (keycode == KEY_D) || (keycode == KEY_S) || (keycode == KEY_W)){  // The player in turn is moving the camera
10001f68:	e0bfff17 	ldw	r2,-4(fp)
10001f6c:	10800120 	cmpeqi	r2,r2,4
10001f70:	1000091e 	bne	r2,zero,10001f98 <gameStartStateHandler+0x154>
10001f74:	e0bfff17 	ldw	r2,-4(fp)
10001f78:	108001e0 	cmpeqi	r2,r2,7
10001f7c:	1000061e 	bne	r2,zero,10001f98 <gameStartStateHandler+0x154>
10001f80:	e0bfff17 	ldw	r2,-4(fp)
10001f84:	108005a0 	cmpeqi	r2,r2,22
10001f88:	1000031e 	bne	r2,zero,10001f98 <gameStartStateHandler+0x154>
10001f8c:	e0bfff17 	ldw	r2,-4(fp)
10001f90:	10800698 	cmpnei	r2,r2,26
10001f94:	1000161e 	bne	r2,zero,10001ff0 <gameStartStateHandler+0x1ac>
                if((keycode == KEY_A) && (moveX >= 5) ) moveX -= 5;
10001f98:	e0bfff17 	ldw	r2,-4(fp)
10001f9c:	10800118 	cmpnei	r2,r2,4
10001fa0:	1000061e 	bne	r2,zero,10001fbc <gameStartStateHandler+0x178>
10001fa4:	d0a7f217 	ldw	r2,-24632(gp)
10001fa8:	10800150 	cmplti	r2,r2,5
10001fac:	1000031e 	bne	r2,zero,10001fbc <gameStartStateHandler+0x178>
10001fb0:	d0a7f217 	ldw	r2,-24632(gp)
10001fb4:	10bffec4 	addi	r2,r2,-5
10001fb8:	d0a7f215 	stw	r2,-24632(gp)
                if((keycode == KEY_D) && (moveX <= 155)) moveX += 5;
10001fbc:	e0bfff17 	ldw	r2,-4(fp)
10001fc0:	108001d8 	cmpnei	r2,r2,7
10001fc4:	1000061e 	bne	r2,zero,10001fe0 <gameStartStateHandler+0x19c>
10001fc8:	d0a7f217 	ldw	r2,-24632(gp)
10001fcc:	10802708 	cmpgei	r2,r2,156
10001fd0:	1000031e 	bne	r2,zero,10001fe0 <gameStartStateHandler+0x19c>
10001fd4:	d0a7f217 	ldw	r2,-24632(gp)
10001fd8:	10800144 	addi	r2,r2,5
10001fdc:	d0a7f215 	stw	r2,-24632(gp)
                updateMovementCracter(&IngameBuffer);
10001fe0:	01040674 	movhi	r4,4121
10001fe4:	2110f004 	addi	r4,r4,17344
10001fe8:	000489c0 	call	1000489c <updateMovementCracter>
10001fec:	00003c06 	br	100020e0 <gameStartStateHandler+0x29c>
            } 
            else if(keycode == KEY_F){
10001ff0:	e0bfff17 	ldw	r2,-4(fp)
10001ff4:	10800258 	cmpnei	r2,r2,9
10001ff8:	1000031e 	bne	r2,zero,10002008 <gameStartStateHandler+0x1c4>
                lastPress = 1;
10001ffc:	00800044 	movi	r2,1
10002000:	d0a7f315 	stw	r2,-24628(gp)
10002004:	00003606 	br	100020e0 <gameStartStateHandler+0x29c>
            } 
            else if(keycode == KEY_SPACE){ // start charging
10002008:	e0bfff17 	ldw	r2,-4(fp)
1000200c:	10800b18 	cmpnei	r2,r2,44
10002010:	1000331e 	bne	r2,zero,100020e0 <gameStartStateHandler+0x29c>
                cannonBallCharging();
10002014:	00003400 	call	10000340 <cannonBallCharging>
10002018:	00003106 	br	100020e0 <gameStartStateHandler+0x29c>
            }
        }
        else{  // When the mode is freezing, and only action player can take is charging if ball state is charging. 
            //printf("%d CannonBall state \n" , cannonBall.state); 
            if(cannonBall.state == 1){  //the player has already been charging the cannon ball
1000201c:	00840674 	movhi	r2,4121
10002020:	1090e204 	addi	r2,r2,17288
10002024:	10800617 	ldw	r2,24(r2)
10002028:	10800058 	cmpnei	r2,r2,1
1000202c:	10002c1e 	bne	r2,zero,100020e0 <gameStartStateHandler+0x29c>
                if(keycode == KEY_SPACE){  // KEEP CHARGING
10002030:	e0bfff17 	ldw	r2,-4(fp)
10002034:	10800b18 	cmpnei	r2,r2,44
10002038:	1000021e 	bne	r2,zero,10002044 <gameStartStateHandler+0x200>
                    cannonBallCharging(); // keep charge the cannonBall;
1000203c:	00003400 	call	10000340 <cannonBallCharging>
10002040:	00002706 	br	100020e0 <gameStartStateHandler+0x29c>
                }
                else{ // Other key is pressed, means charging end
                    if(now_player == 0) cannonBallFiring(TurnState.next_player, redPlayer.direction, redPlayer.x_pos, redPlayer.y_pos, &redPlayer); // fire the cannonBall
10002044:	e0bffe17 	ldw	r2,-8(fp)
10002048:	1000131e 	bne	r2,zero,10002098 <gameStartStateHandler+0x254>
1000204c:	d0e7ee17 	ldw	r3,-24648(gp)
10002050:	00840674 	movhi	r2,4121
10002054:	1090d304 	addi	r2,r2,17228
10002058:	11000717 	ldw	r4,28(r2)
1000205c:	00840674 	movhi	r2,4121
10002060:	1090d304 	addi	r2,r2,17228
10002064:	11400017 	ldw	r5,0(r2)
10002068:	00840674 	movhi	r2,4121
1000206c:	1090d304 	addi	r2,r2,17228
10002070:	11800117 	ldw	r6,4(r2)
10002074:	00840674 	movhi	r2,4121
10002078:	1090d304 	addi	r2,r2,17228
1000207c:	d8800015 	stw	r2,0(sp)
10002080:	300f883a 	mov	r7,r6
10002084:	280d883a 	mov	r6,r5
10002088:	200b883a 	mov	r5,r4
1000208c:	1809883a 	mov	r4,r3
10002090:	00003a40 	call	100003a4 <cannonBallFiring>
10002094:	00001206 	br	100020e0 <gameStartStateHandler+0x29c>
                    else cannonBallFiring(TurnState.next_player, bluePlayer.direction, bluePlayer.x_pos, bluePlayer.y_pos, &bluePlayer);
10002098:	d0e7ee17 	ldw	r3,-24648(gp)
1000209c:	00840674 	movhi	r2,4121
100020a0:	1090c404 	addi	r2,r2,17168
100020a4:	11000717 	ldw	r4,28(r2)
100020a8:	00840674 	movhi	r2,4121
100020ac:	1090c404 	addi	r2,r2,17168
100020b0:	11400017 	ldw	r5,0(r2)
100020b4:	00840674 	movhi	r2,4121
100020b8:	1090c404 	addi	r2,r2,17168
100020bc:	11800117 	ldw	r6,4(r2)
100020c0:	00840674 	movhi	r2,4121
100020c4:	1090c404 	addi	r2,r2,17168
100020c8:	d8800015 	stw	r2,0(sp)
100020cc:	300f883a 	mov	r7,r6
100020d0:	280d883a 	mov	r6,r5
100020d4:	200b883a 	mov	r5,r4
100020d8:	1809883a 	mov	r4,r3
100020dc:	00003a40 	call	100003a4 <cannonBallFiring>
                }
            }
        }
    }
    if(now_player == 0) updateMagicMoving(&redPlayer);
100020e0:	e0bffe17 	ldw	r2,-8(fp)
100020e4:	1000041e 	bne	r2,zero,100020f8 <gameStartStateHandler+0x2b4>
100020e8:	01040674 	movhi	r4,4121
100020ec:	2110d304 	addi	r4,r4,17228
100020f0:	00022080 	call	10002208 <updateMagicMoving>
100020f4:	00000306 	br	10002104 <gameStartStateHandler+0x2c0>
    else updateMagicMoving(&bluePlayer);
100020f8:	01040674 	movhi	r4,4121
100020fc:	2110c404 	addi	r4,r4,17168
10002100:	00022080 	call	10002208 <updateMagicMoving>
    updateFalling(&bluePlayer);
10002104:	01040674 	movhi	r4,4121
10002108:	2110c404 	addi	r4,r4,17168
1000210c:	000498c0 	call	1000498c <updateFalling>
    updateFalling(&redPlayer);
10002110:	01040674 	movhi	r4,4121
10002114:	2110d304 	addi	r4,r4,17228
10002118:	000498c0 	call	1000498c <updateFalling>
    if(bluePlayer.y_pos <= 0){
1000211c:	00840674 	movhi	r2,4121
10002120:	1090c404 	addi	r2,r2,17168
10002124:	10800117 	ldw	r2,4(r2)
10002128:	00800616 	blt	zero,r2,10002144 <gameStartStateHandler+0x300>
        bluePlayer.health = 0;
1000212c:	00840674 	movhi	r2,4121
10002130:	1090c404 	addi	r2,r2,17168
10002134:	10000615 	stw	zero,24(r2)
        gameState.state = 2;
10002138:	00800084 	movi	r2,2
1000213c:	d0a7ef15 	stw	r2,-24644(gp)
10002140:	00000906 	br	10002168 <gameStartStateHandler+0x324>
    } 
    else if(redPlayer.y_pos <= 0){
10002144:	00840674 	movhi	r2,4121
10002148:	1090d304 	addi	r2,r2,17228
1000214c:	10800117 	ldw	r2,4(r2)
10002150:	00800516 	blt	zero,r2,10002168 <gameStartStateHandler+0x324>
        redPlayer.health = 0;
10002154:	00840674 	movhi	r2,4121
10002158:	1090d304 	addi	r2,r2,17228
1000215c:	10000615 	stw	zero,24(r2)
        gameState.state = 2;
10002160:	00800084 	movi	r2,2
10002164:	d0a7ef15 	stw	r2,-24644(gp)
    }
    updateCannonBall(); // update the position of cannonball in the list
10002168:	000273c0 	call	1000273c <updateCannonBall>
    updatePlayerTurn();
1000216c:	00026480 	call	10002648 <updatePlayerTurn>
    

    IngameBuffer.counter = 0; // rebuld the lookup table;
10002170:	00840674 	movhi	r2,4121
10002174:	1090f004 	addi	r2,r2,17344
10002178:	1000c915 	stw	zero,804(r2)
    // fillBufferPlayers();  // 2 objects
    // fillBufferCannon();   // 1 objects
    // fillBufferExplode();  // 1 objects

    // This is the correct one
    fillBufferArrow(now_player);    // 1 objects
1000217c:	e13ffe17 	ldw	r4,-8(fp)
10002180:	0003fdc0 	call	10003fdc <fillBufferArrow>
    fillBufferAngle(now_player);    // 1 objects
10002184:	e13ffe17 	ldw	r4,-8(fp)
10002188:	000343c0 	call	1000343c <fillBufferAngle>
    fillBufferWord();     // 3 objects
1000218c:	0003fa40 	call	10003fa4 <fillBufferWord>
    SetZeroArray(&IngameBuffer, 1); // 1 reserved
10002190:	01400044 	movi	r5,1
10002194:	01040674 	movhi	r4,4121
10002198:	2110f004 	addi	r4,r4,17344
1000219c:	0001a500 	call	10001a50 <SetZeroArray>
    fillBufferStrength(now_player); // 10 objects
100021a0:	e13ffe17 	ldw	r4,-8(fp)
100021a4:	0003de80 	call	10003de8 <fillBufferStrength>
    fillBufferCharging(); // 10 objects
100021a8:	0003d080 	call	10003d08 <fillBufferCharging>
    SetZeroArray(&IngameBuffer, 1); // need to skip this 1 item;
100021ac:	01400044 	movi	r5,1
100021b0:	01040674 	movhi	r4,4121
100021b4:	2110f004 	addi	r4,r4,17344
100021b8:	0001a500 	call	10001a50 <SetZeroArray>
    fillBufferFlying(now_player);
100021bc:	e13ffe17 	ldw	r4,-8(fp)
100021c0:	0003ee40 	call	10003ee4 <fillBufferFlying>
    SetZeroArray(&IngameBuffer, 8); // need to skip this 8 item;
100021c4:	01400204 	movi	r5,8
100021c8:	01040674 	movhi	r4,4121
100021cc:	2110f004 	addi	r4,r4,17344
100021d0:	0001a500 	call	10001a50 <SetZeroArray>
    fillBufferHealth();   // 10 objects
100021d4:	00032bc0 	call	100032bc <fillBufferHealth>
    fillBufferExplode();  // 1 objects
100021d8:	000322c0 	call	1000322c <fillBufferExplode>
    fillBufferCannon();   // 1 objects
100021dc:	00031880 	call	10003188 <fillBufferCannon>
    fillBufferPlayers();  // 2 objects
100021e0:	0002fd00 	call	10002fd0 <fillBufferPlayers>
    
    endingFill(&IngameBuffer);
100021e4:	01040674 	movhi	r4,4121
100021e8:	2110f004 	addi	r4,r4,17344
100021ec:	0001c800 	call	10001c80 <endingFill>
  
    return;
100021f0:	0001883a 	nop
}
100021f4:	e037883a 	mov	sp,fp
100021f8:	dfc00117 	ldw	ra,4(sp)
100021fc:	df000017 	ldw	fp,0(sp)
10002200:	dec00204 	addi	sp,sp,8
10002204:	f800283a 	ret

10002208 <updateMagicMoving>:

void updateMagicMoving(struct player* playerStruct){
10002208:	defffe04 	addi	sp,sp,-8
1000220c:	df000115 	stw	fp,4(sp)
10002210:	df000104 	addi	fp,sp,4
10002214:	e13fff15 	stw	r4,-4(fp)
    if((playerStruct->magic == 1) && (cannonBall.state == 2)){
10002218:	e0bfff17 	ldw	r2,-4(fp)
1000221c:	10800e17 	ldw	r2,56(r2)
10002220:	10800058 	cmpnei	r2,r2,1
10002224:	1000101e 	bne	r2,zero,10002268 <updateMagicMoving+0x60>
10002228:	00840674 	movhi	r2,4121
1000222c:	1090e204 	addi	r2,r2,17288
10002230:	10800617 	ldw	r2,24(r2)
10002234:	10800098 	cmpnei	r2,r2,2
10002238:	10000b1e 	bne	r2,zero,10002268 <updateMagicMoving+0x60>
        playerStruct->x_pos = cannonBall.x_pos;
1000223c:	00840674 	movhi	r2,4121
10002240:	1090e204 	addi	r2,r2,17288
10002244:	10c00117 	ldw	r3,4(r2)
10002248:	e0bfff17 	ldw	r2,-4(fp)
1000224c:	10c00015 	stw	r3,0(r2)
        playerStruct->y_pos = cannonBall.y_pos;
10002250:	00840674 	movhi	r2,4121
10002254:	1090e204 	addi	r2,r2,17288
10002258:	10c00017 	ldw	r3,0(r2)
1000225c:	e0bfff17 	ldw	r2,-4(fp)
10002260:	10c00115 	stw	r3,4(r2)
    }
    return;
10002264:	0001883a 	nop
10002268:	0001883a 	nop
}
1000226c:	e037883a 	mov	sp,fp
10002270:	df000017 	ldw	fp,0(sp)
10002274:	dec00104 	addi	sp,sp,4
10002278:	f800283a 	ret

1000227c <updateRedPlayerCamera>:


void updateRedPlayerCamera(){
1000227c:	defffe04 	addi	sp,sp,-8
10002280:	dfc00115 	stw	ra,4(sp)
10002284:	df000015 	stw	fp,0(sp)
10002288:	d839883a 	mov	fp,sp
    if(redPlayer.x_pos + 320 > 800){
1000228c:	00840674 	movhi	r2,4121
10002290:	1090d304 	addi	r2,r2,17228
10002294:	10800017 	ldw	r2,0(r2)
10002298:	10805004 	addi	r2,r2,320
1000229c:	1080c850 	cmplti	r2,r2,801
100022a0:	1000031e 	bne	r2,zero,100022b0 <updateRedPlayerCamera+0x34>
        moveX = 800-640;
100022a4:	00802804 	movi	r2,160
100022a8:	d0a7f215 	stw	r2,-24632(gp)
100022ac:	00000c06 	br	100022e0 <updateRedPlayerCamera+0x64>
    }
    else if(redPlayer.x_pos - 320 < 0){
100022b0:	00840674 	movhi	r2,4121
100022b4:	1090d304 	addi	r2,r2,17228
100022b8:	10800017 	ldw	r2,0(r2)
100022bc:	10bfb004 	addi	r2,r2,-320
100022c0:	1000020e 	bge	r2,zero,100022cc <updateRedPlayerCamera+0x50>
        moveX = 0;
100022c4:	d027f215 	stw	zero,-24632(gp)
100022c8:	00000506 	br	100022e0 <updateRedPlayerCamera+0x64>
    }
    else moveX = redPlayer.x_pos - 320;
100022cc:	00840674 	movhi	r2,4121
100022d0:	1090d304 	addi	r2,r2,17228
100022d4:	10800017 	ldw	r2,0(r2)
100022d8:	10bfb004 	addi	r2,r2,-320
100022dc:	d0a7f215 	stw	r2,-24632(gp)
    updateMovementCracter(&IngameBuffer);
100022e0:	01040674 	movhi	r4,4121
100022e4:	2110f004 	addi	r4,r4,17344
100022e8:	000489c0 	call	1000489c <updateMovementCracter>
    return;
100022ec:	0001883a 	nop
}
100022f0:	e037883a 	mov	sp,fp
100022f4:	dfc00117 	ldw	ra,4(sp)
100022f8:	df000017 	ldw	fp,0(sp)
100022fc:	dec00204 	addi	sp,sp,8
10002300:	f800283a 	ret

10002304 <updateBluePlayerCamera>:

void updateBluePlayerCamera(){
10002304:	defffe04 	addi	sp,sp,-8
10002308:	dfc00115 	stw	ra,4(sp)
1000230c:	df000015 	stw	fp,0(sp)
10002310:	d839883a 	mov	fp,sp
    if(bluePlayer.x_pos + 320 > 800){
10002314:	00840674 	movhi	r2,4121
10002318:	1090c404 	addi	r2,r2,17168
1000231c:	10800017 	ldw	r2,0(r2)
10002320:	10805004 	addi	r2,r2,320
10002324:	1080c850 	cmplti	r2,r2,801
10002328:	1000031e 	bne	r2,zero,10002338 <updateBluePlayerCamera+0x34>
        moveX = 800-640;
1000232c:	00802804 	movi	r2,160
10002330:	d0a7f215 	stw	r2,-24632(gp)
10002334:	00000c06 	br	10002368 <updateBluePlayerCamera+0x64>
    }
    else if(bluePlayer.x_pos - 320 < 0){
10002338:	00840674 	movhi	r2,4121
1000233c:	1090c404 	addi	r2,r2,17168
10002340:	10800017 	ldw	r2,0(r2)
10002344:	10bfb004 	addi	r2,r2,-320
10002348:	1000020e 	bge	r2,zero,10002354 <updateBluePlayerCamera+0x50>
        moveX = 0;
1000234c:	d027f215 	stw	zero,-24632(gp)
10002350:	00000506 	br	10002368 <updateBluePlayerCamera+0x64>
    }
    else moveX = bluePlayer.x_pos - 320;
10002354:	00840674 	movhi	r2,4121
10002358:	1090c404 	addi	r2,r2,17168
1000235c:	10800017 	ldw	r2,0(r2)
10002360:	10bfb004 	addi	r2,r2,-320
10002364:	d0a7f215 	stw	r2,-24632(gp)
    updateMovementCracter(&IngameBuffer);
10002368:	01040674 	movhi	r4,4121
1000236c:	2110f004 	addi	r4,r4,17344
10002370:	000489c0 	call	1000489c <updateMovementCracter>
    return;
10002374:	0001883a 	nop
}
10002378:	e037883a 	mov	sp,fp
1000237c:	dfc00117 	ldw	ra,4(sp)
10002380:	df000017 	ldw	fp,0(sp)
10002384:	dec00204 	addi	sp,sp,8
10002388:	f800283a 	ret

1000238c <gameEndStateHandler>:


void gameEndStateHandler(int keycode){
1000238c:	defffc04 	addi	sp,sp,-16
10002390:	dfc00315 	stw	ra,12(sp)
10002394:	df000215 	stw	fp,8(sp)
10002398:	df000204 	addi	fp,sp,8
1000239c:	e13fff15 	stw	r4,-4(fp)
    if(keycode == KEY_ENTER){
100023a0:	e0bfff17 	ldw	r2,-4(fp)
100023a4:	10800a18 	cmpnei	r2,r2,40
100023a8:	1000031e 	bne	r2,zero,100023b8 <gameEndStateHandler+0x2c>
        gameState.state = 0; 
100023ac:	d027ef15 	stw	zero,-24644(gp)
        gameInit();
100023b0:	00024f80 	call	100024f8 <gameInit>
            SetZeroArray(&IngameBuffer, 1); // red none
        }
        memcpy((vga_ctrl->VRAM),(IngameBuffer.VRAM),sizeof(IngameBuffer.VRAM));
    }
    
    return;
100023b4:	00004b06 	br	100024e4 <gameEndStateHandler+0x158>
    if(keycode == KEY_ENTER){
        gameState.state = 0; 
        gameInit();
    }
    else{
        IngameBuffer.counter = 0; // rebuld the lookup table;
100023b8:	00840674 	movhi	r2,4121
100023bc:	1090f004 	addi	r2,r2,17344
100023c0:	1000c915 	stw	zero,804(r2)
        SetZeroArray(&IngameBuffer, 46); // 1 reserved
100023c4:	01400b84 	movi	r5,46
100023c8:	01040674 	movhi	r4,4121
100023cc:	2110f004 	addi	r4,r4,17344
100023d0:	0001a500 	call	10001a50 <SetZeroArray>
        if(redPlayer.health == 0) PackArray(&IngameBuffer, 3, 320 - 80, 280, 40);
100023d4:	00840674 	movhi	r2,4121
100023d8:	1090d304 	addi	r2,r2,17228
100023dc:	10800617 	ldw	r2,24(r2)
100023e0:	1000091e 	bne	r2,zero,10002408 <gameEndStateHandler+0x7c>
100023e4:	00800a04 	movi	r2,40
100023e8:	d8800015 	stw	r2,0(sp)
100023ec:	01c04604 	movi	r7,280
100023f0:	01803c04 	movi	r6,240
100023f4:	014000c4 	movi	r5,3
100023f8:	01040674 	movhi	r4,4121
100023fc:	2110f004 	addi	r4,r4,17344
10002400:	00019080 	call	10001908 <PackArray>
10002404:	00000806 	br	10002428 <gameEndStateHandler+0x9c>
        else PackArray(&IngameBuffer, 3, 320 + 80, 280, 40);
10002408:	00800a04 	movi	r2,40
1000240c:	d8800015 	stw	r2,0(sp)
10002410:	01c04604 	movi	r7,280
10002414:	01806404 	movi	r6,400
10002418:	014000c4 	movi	r5,3
1000241c:	01040674 	movhi	r4,4121
10002420:	2110f004 	addi	r4,r4,17344
10002424:	00019080 	call	10001908 <PackArray>
        PackArray(&IngameBuffer, 26, 320 + 12, 280, 0);
10002428:	d8000015 	stw	zero,0(sp)
1000242c:	01c04604 	movi	r7,280
10002430:	01805304 	movi	r6,332
10002434:	01400684 	movi	r5,26
10002438:	01040674 	movhi	r4,4121
1000243c:	2110f004 	addi	r4,r4,17344
10002440:	00019080 	call	10001908 <PackArray>
        if(redPlayer.health == 0) {
10002444:	00840674 	movhi	r2,4121
10002448:	1090d304 	addi	r2,r2,17228
1000244c:	10800617 	ldw	r2,24(r2)
10002450:	10000d1e 	bne	r2,zero,10002488 <gameEndStateHandler+0xfc>
            SetZeroArray(&IngameBuffer, 1); // red none
10002454:	01400044 	movi	r5,1
10002458:	01040674 	movhi	r4,4121
1000245c:	2110f004 	addi	r4,r4,17344
10002460:	0001a500 	call	10001a50 <SetZeroArray>
            PackArray(&IngameBuffer, 4, 320 + 80, 280, 10); // blue exist
10002464:	00800284 	movi	r2,10
10002468:	d8800015 	stw	r2,0(sp)
1000246c:	01c04604 	movi	r7,280
10002470:	01806404 	movi	r6,400
10002474:	01400104 	movi	r5,4
10002478:	01040674 	movhi	r4,4121
1000247c:	2110f004 	addi	r4,r4,17344
10002480:	00019080 	call	10001908 <PackArray>
10002484:	00000c06 	br	100024b8 <gameEndStateHandler+0x12c>
        }
        else{
            PackArray(&IngameBuffer, 1 + 10, 320 - 80, 280, 10);
10002488:	00800284 	movi	r2,10
1000248c:	d8800015 	stw	r2,0(sp)
10002490:	01c04604 	movi	r7,280
10002494:	01803c04 	movi	r6,240
10002498:	014002c4 	movi	r5,11
1000249c:	01040674 	movhi	r4,4121
100024a0:	2110f004 	addi	r4,r4,17344
100024a4:	00019080 	call	10001908 <PackArray>
            SetZeroArray(&IngameBuffer, 1); // red none
100024a8:	01400044 	movi	r5,1
100024ac:	01040674 	movhi	r4,4121
100024b0:	2110f004 	addi	r4,r4,17344
100024b4:	0001a500 	call	10001a50 <SetZeroArray>
        }
        memcpy((vga_ctrl->VRAM),(IngameBuffer.VRAM),sizeof(IngameBuffer.VRAM));
100024b8:	d0a00117 	ldw	r2,-32764(gp)
100024bc:	1007883a 	mov	r3,r2
100024c0:	00840674 	movhi	r2,4121
100024c4:	1090f004 	addi	r2,r2,17344
100024c8:	1009883a 	mov	r4,r2
100024cc:	0080c804 	movi	r2,800
100024d0:	100d883a 	mov	r6,r2
100024d4:	200b883a 	mov	r5,r4
100024d8:	1809883a 	mov	r4,r3
100024dc:	000be2c0 	call	1000be2c <memcpy>
    }
    
    return;
100024e0:	0001883a 	nop
}
100024e4:	e037883a 	mov	sp,fp
100024e8:	dfc00117 	ldw	ra,4(sp)
100024ec:	df000017 	ldw	fp,0(sp)
100024f0:	dec00204 	addi	sp,sp,8
100024f4:	f800283a 	ret

100024f8 <gameInit>:


void gameInit(){
100024f8:	defffb04 	addi	sp,sp,-20
100024fc:	dfc00415 	stw	ra,16(sp)
10002500:	df000315 	stw	fp,12(sp)
10002504:	df000304 	addi	fp,sp,12
    gameStateInit();
10002508:	0001cc80 	call	10001cc8 <gameStateInit>
    playersInit();
1000250c:	0000f940 	call	10000f94 <playersInit>
    strengthBarInit();
10002510:	0000f6c0 	call	10000f6c <strengthBarInit>
	ground_init();
10002514:	0000e4c0 	call	10000e4c <ground_init>
	playerTurnInit();
10002518:	000261c0 	call	1000261c <playerTurnInit>
	cannonBallInit();
1000251c:	000026c0 	call	1000026c <cannonBallInit>
    moveX = 0;
10002520:	d027f215 	stw	zero,-24632(gp)
    for(int i =0; i < 100; i++) cracterOriginal[i] = 0;
10002524:	e03ffd15 	stw	zero,-12(fp)
10002528:	00000a06 	br	10002554 <gameInit+0x5c>
1000252c:	00840674 	movhi	r2,4121
10002530:	10928604 	addi	r2,r2,18968
10002534:	e0fffd17 	ldw	r3,-12(fp)
10002538:	18c7883a 	add	r3,r3,r3
1000253c:	18c7883a 	add	r3,r3,r3
10002540:	10c5883a 	add	r2,r2,r3
10002544:	10000015 	stw	zero,0(r2)
10002548:	e0bffd17 	ldw	r2,-12(fp)
1000254c:	10800044 	addi	r2,r2,1
10002550:	e0bffd15 	stw	r2,-12(fp)
10002554:	e0bffd17 	ldw	r2,-12(fp)
10002558:	10801910 	cmplti	r2,r2,100
1000255c:	103ff31e 	bne	r2,zero,1000252c <__alt_data_end+0xf800252c>
    cracterCounter = 0;
10002560:	d027f015 	stw	zero,-24640(gp)
    IngameBuffer.counter = 0;
10002564:	00840674 	movhi	r2,4121
10002568:	1090f004 	addi	r2,r2,17344
1000256c:	1000c915 	stw	zero,804(r2)
    for(int i = 4*50; i < 4*80; i++){
10002570:	00803204 	movi	r2,200
10002574:	e0bffe15 	stw	r2,-8(fp)
10002578:	00000806 	br	1000259c <gameInit+0xa4>
    	IngameBuffer.VRAM[i] = 0;
1000257c:	00840674 	movhi	r2,4121
10002580:	1090f004 	addi	r2,r2,17344
10002584:	e0fffe17 	ldw	r3,-8(fp)
10002588:	10c5883a 	add	r2,r2,r3
1000258c:	10000005 	stb	zero,0(r2)
	cannonBallInit();
    moveX = 0;
    for(int i =0; i < 100; i++) cracterOriginal[i] = 0;
    cracterCounter = 0;
    IngameBuffer.counter = 0;
    for(int i = 4*50; i < 4*80; i++){
10002590:	e0bffe17 	ldw	r2,-8(fp)
10002594:	10800044 	addi	r2,r2,1
10002598:	e0bffe15 	stw	r2,-8(fp)
1000259c:	e0bffe17 	ldw	r2,-8(fp)
100025a0:	10805010 	cmplti	r2,r2,320
100025a4:	103ff51e 	bne	r2,zero,1000257c <__alt_data_end+0xf800257c>
    	IngameBuffer.VRAM[i] = 0;
    }
    InitialgameBuffer.counter = 0;
100025a8:	00840674 	movhi	r2,4121
100025ac:	1091bb04 	addi	r2,r2,18156
100025b0:	1000c915 	stw	zero,804(r2)
    for(int i = 4*50; i < 4*80; i++){
100025b4:	00803204 	movi	r2,200
100025b8:	e0bfff15 	stw	r2,-4(fp)
100025bc:	00000806 	br	100025e0 <gameInit+0xe8>
		InitialgameBuffer.VRAM[i] = 0;
100025c0:	00840674 	movhi	r2,4121
100025c4:	1091bb04 	addi	r2,r2,18156
100025c8:	e0ffff17 	ldw	r3,-4(fp)
100025cc:	10c5883a 	add	r2,r2,r3
100025d0:	10000005 	stb	zero,0(r2)
    IngameBuffer.counter = 0;
    for(int i = 4*50; i < 4*80; i++){
    	IngameBuffer.VRAM[i] = 0;
    }
    InitialgameBuffer.counter = 0;
    for(int i = 4*50; i < 4*80; i++){
100025d4:	e0bfff17 	ldw	r2,-4(fp)
100025d8:	10800044 	addi	r2,r2,1
100025dc:	e0bfff15 	stw	r2,-4(fp)
100025e0:	e0bfff17 	ldw	r2,-4(fp)
100025e4:	10805010 	cmplti	r2,r2,320
100025e8:	103ff51e 	bne	r2,zero,100025c0 <__alt_data_end+0xf80025c0>
		InitialgameBuffer.VRAM[i] = 0;
	}
    IngameBuffer.crater_counter = 0;
100025ec:	00840674 	movhi	r2,4121
100025f0:	1090f004 	addi	r2,r2,17344
100025f4:	1000ca15 	stw	zero,808(r2)
    InitialgameBuffer.crater_counter = 0;
100025f8:	00840674 	movhi	r2,4121
100025fc:	1091bb04 	addi	r2,r2,18156
10002600:	1000ca15 	stw	zero,808(r2)
    
    return;
10002604:	0001883a 	nop
}
10002608:	e037883a 	mov	sp,fp
1000260c:	dfc00117 	ldw	ra,4(sp)
10002610:	df000017 	ldw	fp,0(sp)
10002614:	dec00204 	addi	sp,sp,8
10002618:	f800283a 	ret

1000261c <playerTurnInit>:

void playerTurnInit(){
1000261c:	deffff04 	addi	sp,sp,-4
10002620:	df000015 	stw	fp,0(sp)
10002624:	d839883a 	mov	fp,sp
    TurnState.turn = 0; // start with player A
10002628:	d027ed15 	stw	zero,-24652(gp)
    TurnState.next_player = 1; // start with 0
1000262c:	00800044 	movi	r2,1
10002630:	d0a7ee15 	stw	r2,-24648(gp)
}
10002634:	0001883a 	nop
10002638:	e037883a 	mov	sp,fp
1000263c:	df000017 	ldw	fp,0(sp)
10002640:	dec00104 	addi	sp,sp,4
10002644:	f800283a 	ret

10002648 <updatePlayerTurn>:
void updatePlayerTurn(){
10002648:	defffd04 	addi	sp,sp,-12
1000264c:	dfc00215 	stw	ra,8(sp)
10002650:	df000115 	stw	fp,4(sp)
10002654:	df000104 	addi	fp,sp,4
    int now_player;
    if(cannonBall.state != 0) TurnState.turn = 1; // freezing state, player cannot be controlled to move right or left.
10002658:	00840674 	movhi	r2,4121
1000265c:	1090e204 	addi	r2,r2,17288
10002660:	10800617 	ldw	r2,24(r2)
10002664:	10000326 	beq	r2,zero,10002674 <updatePlayerTurn+0x2c>
10002668:	00800044 	movi	r2,1
1000266c:	d0a7ed15 	stw	r2,-24652(gp)
        else if(now_player == 1) {
            updateBluePlayerCamera();
            
        }
    }
    return;
10002670:	00002c06 	br	10002724 <updatePlayerTurn+0xdc>
    TurnState.next_player = 1; // start with 0
}
void updatePlayerTurn(){
    int now_player;
    if(cannonBall.state != 0) TurnState.turn = 1; // freezing state, player cannot be controlled to move right or left.
    else if((TurnState.turn == 1) && (bluePlayer.pos_state != 1) && (redPlayer.pos_state != 1)){ // the cannonBall has ended exploding and two players are on the ground
10002674:	d0a7ed17 	ldw	r2,-24652(gp)
10002678:	10800058 	cmpnei	r2,r2,1
1000267c:	1000291e 	bne	r2,zero,10002724 <updatePlayerTurn+0xdc>
10002680:	00840674 	movhi	r2,4121
10002684:	1090c404 	addi	r2,r2,17168
10002688:	10800517 	ldw	r2,20(r2)
1000268c:	10800060 	cmpeqi	r2,r2,1
10002690:	1000241e 	bne	r2,zero,10002724 <updatePlayerTurn+0xdc>
10002694:	00840674 	movhi	r2,4121
10002698:	1090d304 	addi	r2,r2,17228
1000269c:	10800517 	ldw	r2,20(r2)
100026a0:	10800060 	cmpeqi	r2,r2,1
100026a4:	10001f1e 	bne	r2,zero,10002724 <updatePlayerTurn+0xdc>
        strengthBarInit();
100026a8:	0000f6c0 	call	10000f6c <strengthBarInit>
        TurnState.turn = (TurnState.next_player == 1) ? 2:0;
100026ac:	d0a7ee17 	ldw	r2,-24648(gp)
100026b0:	10800058 	cmpnei	r2,r2,1
100026b4:	1000021e 	bne	r2,zero,100026c0 <updatePlayerTurn+0x78>
100026b8:	00800084 	movi	r2,2
100026bc:	00000106 	br	100026c4 <updatePlayerTurn+0x7c>
100026c0:	0005883a 	mov	r2,zero
100026c4:	d0a7ed15 	stw	r2,-24652(gp)
        TurnState.next_player = (TurnState.next_player == 1) ? 0:1;
100026c8:	d0a7ee17 	ldw	r2,-24648(gp)
100026cc:	10800058 	cmpnei	r2,r2,1
100026d0:	10803fcc 	andi	r2,r2,255
100026d4:	d0a7ee15 	stw	r2,-24648(gp)
        now_player = (TurnState.next_player == 0) ? 1:0;
100026d8:	d0a7ee17 	ldw	r2,-24648(gp)
100026dc:	1005003a 	cmpeq	r2,r2,zero
100026e0:	10803fcc 	andi	r2,r2,255
100026e4:	e0bfff15 	stw	r2,-4(fp)
        redPlayer.magic = 0;
100026e8:	00840674 	movhi	r2,4121
100026ec:	1090d304 	addi	r2,r2,17228
100026f0:	10000e15 	stw	zero,56(r2)
        bluePlayer.magic = 0;
100026f4:	00840674 	movhi	r2,4121
100026f8:	1090c404 	addi	r2,r2,17168
100026fc:	10000e15 	stw	zero,56(r2)
        if(now_player == 0) {
10002700:	e0bfff17 	ldw	r2,-4(fp)
10002704:	1000021e 	bne	r2,zero,10002710 <updatePlayerTurn+0xc8>
            updateRedPlayerCamera();
10002708:	000227c0 	call	1000227c <updateRedPlayerCamera>
        else if(now_player == 1) {
            updateBluePlayerCamera();
            
        }
    }
    return;
1000270c:	00000506 	br	10002724 <updatePlayerTurn+0xdc>
        bluePlayer.magic = 0;
        if(now_player == 0) {
            updateRedPlayerCamera();
            
        }
        else if(now_player == 1) {
10002710:	e0bfff17 	ldw	r2,-4(fp)
10002714:	10800058 	cmpnei	r2,r2,1
10002718:	1000021e 	bne	r2,zero,10002724 <updatePlayerTurn+0xdc>
            updateBluePlayerCamera();
1000271c:	00023040 	call	10002304 <updateBluePlayerCamera>
            
        }
    }
    return;
10002720:	0001883a 	nop
10002724:	0001883a 	nop
}
10002728:	e037883a 	mov	sp,fp
1000272c:	dfc00117 	ldw	ra,4(sp)
10002730:	df000017 	ldw	fp,0(sp)
10002734:	dec00204 	addi	sp,sp,8
10002738:	f800283a 	ret

1000273c <updateCannonBall>:

void updateCannonBall(){
1000273c:	defffc04 	addi	sp,sp,-16
10002740:	dfc00315 	stw	ra,12(sp)
10002744:	df000215 	stw	fp,8(sp)
10002748:	dc400115 	stw	r17,4(sp)
1000274c:	dc000015 	stw	r16,0(sp)
10002750:	df000204 	addi	fp,sp,8
    if(cannonBall.state == 2){ // flying mode
10002754:	00840674 	movhi	r2,4121
10002758:	1090e204 	addi	r2,r2,17288
1000275c:	10800617 	ldw	r2,24(r2)
10002760:	10800098 	cmpnei	r2,r2,2
10002764:	1000fc1e 	bne	r2,zero,10002b58 <updateCannonBall+0x41c>
    	cannonBall.x_pos += cannonBall.v_x;  // update the position
10002768:	00840674 	movhi	r2,4121
1000276c:	1090e204 	addi	r2,r2,17288
10002770:	10c00117 	ldw	r3,4(r2)
10002774:	00840674 	movhi	r2,4121
10002778:	1090e204 	addi	r2,r2,17288
1000277c:	10800417 	ldw	r2,16(r2)
10002780:	1887883a 	add	r3,r3,r2
10002784:	00840674 	movhi	r2,4121
10002788:	1090e204 	addi	r2,r2,17288
1000278c:	10c00115 	stw	r3,4(r2)
		cannonBall.y_pos += cannonBall.v_y;
10002790:	00840674 	movhi	r2,4121
10002794:	1090e204 	addi	r2,r2,17288
10002798:	10c00017 	ldw	r3,0(r2)
1000279c:	00840674 	movhi	r2,4121
100027a0:	1090e204 	addi	r2,r2,17288
100027a4:	10800517 	ldw	r2,20(r2)
100027a8:	1887883a 	add	r3,r3,r2
100027ac:	00840674 	movhi	r2,4121
100027b0:	1090e204 	addi	r2,r2,17288
100027b4:	10c00015 	stw	r3,0(r2)
		cannonBall.v_y -= GRAVITY;
100027b8:	00840674 	movhi	r2,4121
100027bc:	1090e204 	addi	r2,r2,17288
100027c0:	10800517 	ldw	r2,20(r2)
100027c4:	10ffff44 	addi	r3,r2,-3
100027c8:	00840674 	movhi	r2,4121
100027cc:	1090e204 	addi	r2,r2,17288
100027d0:	10c00515 	stw	r3,20(r2)
		//     cannonBall.v_y = cannonBall.fired_v_y;
		//     cannonBall.fired_v_x = 0;
		//     cannonBall.fired_v_y = 0;
		// }
		// boundary judgement
		if(isLegalCannonBall() == 0){ // not legal
100027d4:	0000d700 	call	10000d70 <isLegalCannonBall>
100027d8:	10002b1e 	bne	r2,zero,10002888 <updateCannonBall+0x14c>
            if(cannonBall.magic == 1){
100027dc:	00840674 	movhi	r2,4121
100027e0:	1090e204 	addi	r2,r2,17288
100027e4:	10800d17 	ldw	r2,52(r2)
100027e8:	10800058 	cmpnei	r2,r2,1
100027ec:	1000241e 	bne	r2,zero,10002880 <updateCannonBall+0x144>
                if(cannonBall.target == 1){
100027f0:	00840674 	movhi	r2,4121
100027f4:	1090e204 	addi	r2,r2,17288
100027f8:	10800b17 	ldw	r2,44(r2)
100027fc:	10800058 	cmpnei	r2,r2,1
10002800:	1000101e 	bne	r2,zero,10002844 <updateCannonBall+0x108>
                    redPlayer.magic = 0;
10002804:	00840674 	movhi	r2,4121
10002808:	1090d304 	addi	r2,r2,17228
1000280c:	10000e15 	stw	zero,56(r2)
                    redPlayer.x_pos = redPlayer.x_prev;  // let him go back to the previous position
10002810:	00840674 	movhi	r2,4121
10002814:	1090d304 	addi	r2,r2,17228
10002818:	10c00217 	ldw	r3,8(r2)
1000281c:	00840674 	movhi	r2,4121
10002820:	1090d304 	addi	r2,r2,17228
10002824:	10c00015 	stw	r3,0(r2)
                    redPlayer.y_pos = redPlayer.y_prev;
10002828:	00840674 	movhi	r2,4121
1000282c:	1090d304 	addi	r2,r2,17228
10002830:	10c00317 	ldw	r3,12(r2)
10002834:	00840674 	movhi	r2,4121
10002838:	1090d304 	addi	r2,r2,17228
1000283c:	10c00115 	stw	r3,4(r2)
10002840:	00000f06 	br	10002880 <updateCannonBall+0x144>
                }
                else{
                    bluePlayer.magic = 0;
10002844:	00840674 	movhi	r2,4121
10002848:	1090c404 	addi	r2,r2,17168
1000284c:	10000e15 	stw	zero,56(r2)
                    bluePlayer.x_pos = bluePlayer.x_prev;
10002850:	00840674 	movhi	r2,4121
10002854:	1090c404 	addi	r2,r2,17168
10002858:	10c00217 	ldw	r3,8(r2)
1000285c:	00840674 	movhi	r2,4121
10002860:	1090c404 	addi	r2,r2,17168
10002864:	10c00015 	stw	r3,0(r2)
                    bluePlayer.y_pos = bluePlayer.y_prev;
10002868:	00840674 	movhi	r2,4121
1000286c:	1090c404 	addi	r2,r2,17168
10002870:	10c00317 	ldw	r3,12(r2)
10002874:	00840674 	movhi	r2,4121
10002878:	1090c404 	addi	r2,r2,17168
1000287c:	10c00115 	stw	r3,4(r2)
                }
            }
			cannonBallInit(); // erase the cannonball
10002880:	000026c0 	call	1000026c <cannonBallInit>
            cannonBallInit(); // erase the cannonball
        }
        else cannonBall.explodingCount -= 1; // count exploding
    }

    return;
10002884:	0000c706 	br	10002ba4 <updateCannonBall+0x468>
                    bluePlayer.y_pos = bluePlayer.y_prev;
                }
            }
			cannonBallInit(); // erase the cannonball
		}
        else if(cannonBall.y_pos <= 239){
10002888:	00840674 	movhi	r2,4121
1000288c:	1090e204 	addi	r2,r2,17288
10002890:	10800017 	ldw	r2,0(r2)
10002894:	10803c08 	cmpgei	r2,r2,240
10002898:	1000c21e 	bne	r2,zero,10002ba4 <updateCannonBall+0x468>
            if(ground.validGround[cannonBall.x_pos][cannonBall.y_pos] == 1){ // touch the valid ground, turn into explode
1000289c:	00840674 	movhi	r2,4121
100028a0:	1090e204 	addi	r2,r2,17288
100028a4:	10c00117 	ldw	r3,4(r2)
100028a8:	00840674 	movhi	r2,4121
100028ac:	1090e204 	addi	r2,r2,17288
100028b0:	14400017 	ldw	r17,0(r2)
100028b4:	040400b4 	movhi	r16,4098
100028b8:	8434c404 	addi	r16,r16,-11504
100028bc:	01407804 	movi	r5,480
100028c0:	1809883a 	mov	r4,r3
100028c4:	00096fc0 	call	100096fc <__mulsi3>
100028c8:	1445883a 	add	r2,r2,r17
100028cc:	1085883a 	add	r2,r2,r2
100028d0:	1085883a 	add	r2,r2,r2
100028d4:	8085883a 	add	r2,r16,r2
100028d8:	10800017 	ldw	r2,0(r2)
100028dc:	10800058 	cmpnei	r2,r2,1
100028e0:	1000b01e 	bne	r2,zero,10002ba4 <updateCannonBall+0x468>
                
                if(cannonBall.magic == 1){
100028e4:	00840674 	movhi	r2,4121
100028e8:	1090e204 	addi	r2,r2,17288
100028ec:	10800d17 	ldw	r2,52(r2)
100028f0:	10800058 	cmpnei	r2,r2,1
100028f4:	1000721e 	bne	r2,zero,10002ac0 <updateCannonBall+0x384>
                    if(cannonBall.target == 1){
100028f8:	00840674 	movhi	r2,4121
100028fc:	1090e204 	addi	r2,r2,17288
10002900:	10800b17 	ldw	r2,44(r2)
10002904:	10800058 	cmpnei	r2,r2,1
10002908:	1000361e 	bne	r2,zero,100029e4 <updateCannonBall+0x2a8>
                        redPlayer.magic = 0;
1000290c:	00840674 	movhi	r2,4121
10002910:	1090d304 	addi	r2,r2,17228
10002914:	10000e15 	stw	zero,56(r2)
                        redPlayer.x_pos = cannonBall.x_pos - cannonBall.v_x;  // let him go back to the previous position
10002918:	00840674 	movhi	r2,4121
1000291c:	1090e204 	addi	r2,r2,17288
10002920:	10c00117 	ldw	r3,4(r2)
10002924:	00840674 	movhi	r2,4121
10002928:	1090e204 	addi	r2,r2,17288
1000292c:	10800417 	ldw	r2,16(r2)
10002930:	1887c83a 	sub	r3,r3,r2
10002934:	00840674 	movhi	r2,4121
10002938:	1090d304 	addi	r2,r2,17228
1000293c:	10c00015 	stw	r3,0(r2)
                        redPlayer.y_pos = cannonBall.y_pos - cannonBall.v_y - GRAVITY;
10002940:	00840674 	movhi	r2,4121
10002944:	1090e204 	addi	r2,r2,17288
10002948:	10c00017 	ldw	r3,0(r2)
1000294c:	00840674 	movhi	r2,4121
10002950:	1090e204 	addi	r2,r2,17288
10002954:	10800517 	ldw	r2,20(r2)
10002958:	1885c83a 	sub	r2,r3,r2
1000295c:	10ffff44 	addi	r3,r2,-3
10002960:	00840674 	movhi	r2,4121
10002964:	1090d304 	addi	r2,r2,17228
10002968:	10c00115 	stw	r3,4(r2)
                        if(ground.validGround[redPlayer.x_pos][redPlayer.y_pos + 12] == 0) redPlayer.y_pos += 12;
1000296c:	00840674 	movhi	r2,4121
10002970:	1090d304 	addi	r2,r2,17228
10002974:	10c00017 	ldw	r3,0(r2)
10002978:	00840674 	movhi	r2,4121
1000297c:	1090d304 	addi	r2,r2,17228
10002980:	10800117 	ldw	r2,4(r2)
10002984:	14400304 	addi	r17,r2,12
10002988:	040400b4 	movhi	r16,4098
1000298c:	8434c404 	addi	r16,r16,-11504
10002990:	01407804 	movi	r5,480
10002994:	1809883a 	mov	r4,r3
10002998:	00096fc0 	call	100096fc <__mulsi3>
1000299c:	1445883a 	add	r2,r2,r17
100029a0:	1085883a 	add	r2,r2,r2
100029a4:	1085883a 	add	r2,r2,r2
100029a8:	8085883a 	add	r2,r16,r2
100029ac:	10800017 	ldw	r2,0(r2)
100029b0:	1000071e 	bne	r2,zero,100029d0 <updateCannonBall+0x294>
100029b4:	00840674 	movhi	r2,4121
100029b8:	1090d304 	addi	r2,r2,17228
100029bc:	10800117 	ldw	r2,4(r2)
100029c0:	10c00304 	addi	r3,r2,12
100029c4:	00840674 	movhi	r2,4121
100029c8:	1090d304 	addi	r2,r2,17228
100029cc:	10c00115 	stw	r3,4(r2)
                        // if(cannonBall.v_y + GRAVITY >= 0) redPlayer.y_pos = cannonBall.y_pos;
                        // else redPlayer.y_pos = cannonBall.y_pos + 20;
                        redPlayer.pos_state = 1;
100029d0:	00840674 	movhi	r2,4121
100029d4:	1090d304 	addi	r2,r2,17228
100029d8:	00c00044 	movi	r3,1
100029dc:	10c00515 	stw	r3,20(r2)
100029e0:	00003506 	br	10002ab8 <updateCannonBall+0x37c>
                    }
                    else{
                        bluePlayer.magic = 0;
100029e4:	00840674 	movhi	r2,4121
100029e8:	1090c404 	addi	r2,r2,17168
100029ec:	10000e15 	stw	zero,56(r2)
                        // if(cannonBall.v_y + GRAVITY >= 0) bluePlayer.y_pos = cannonBall.y_pos;
                        // else bluePlayer.y_pos = cannonBall.y_pos + 20;
                        bluePlayer.x_pos = cannonBall.x_pos - cannonBall.v_x;  // let him go back to the previous position
100029f0:	00840674 	movhi	r2,4121
100029f4:	1090e204 	addi	r2,r2,17288
100029f8:	10c00117 	ldw	r3,4(r2)
100029fc:	00840674 	movhi	r2,4121
10002a00:	1090e204 	addi	r2,r2,17288
10002a04:	10800417 	ldw	r2,16(r2)
10002a08:	1887c83a 	sub	r3,r3,r2
10002a0c:	00840674 	movhi	r2,4121
10002a10:	1090c404 	addi	r2,r2,17168
10002a14:	10c00015 	stw	r3,0(r2)
                        bluePlayer.y_pos = cannonBall.y_pos - cannonBall.v_y - GRAVITY;
10002a18:	00840674 	movhi	r2,4121
10002a1c:	1090e204 	addi	r2,r2,17288
10002a20:	10c00017 	ldw	r3,0(r2)
10002a24:	00840674 	movhi	r2,4121
10002a28:	1090e204 	addi	r2,r2,17288
10002a2c:	10800517 	ldw	r2,20(r2)
10002a30:	1885c83a 	sub	r2,r3,r2
10002a34:	10ffff44 	addi	r3,r2,-3
10002a38:	00840674 	movhi	r2,4121
10002a3c:	1090c404 	addi	r2,r2,17168
10002a40:	10c00115 	stw	r3,4(r2)
                        if(ground.validGround[bluePlayer.x_pos][bluePlayer.y_pos + 12] == 0) bluePlayer.y_pos += 12;
10002a44:	00840674 	movhi	r2,4121
10002a48:	1090c404 	addi	r2,r2,17168
10002a4c:	10c00017 	ldw	r3,0(r2)
10002a50:	00840674 	movhi	r2,4121
10002a54:	1090c404 	addi	r2,r2,17168
10002a58:	10800117 	ldw	r2,4(r2)
10002a5c:	14400304 	addi	r17,r2,12
10002a60:	040400b4 	movhi	r16,4098
10002a64:	8434c404 	addi	r16,r16,-11504
10002a68:	01407804 	movi	r5,480
10002a6c:	1809883a 	mov	r4,r3
10002a70:	00096fc0 	call	100096fc <__mulsi3>
10002a74:	1445883a 	add	r2,r2,r17
10002a78:	1085883a 	add	r2,r2,r2
10002a7c:	1085883a 	add	r2,r2,r2
10002a80:	8085883a 	add	r2,r16,r2
10002a84:	10800017 	ldw	r2,0(r2)
10002a88:	1000071e 	bne	r2,zero,10002aa8 <updateCannonBall+0x36c>
10002a8c:	00840674 	movhi	r2,4121
10002a90:	1090c404 	addi	r2,r2,17168
10002a94:	10800117 	ldw	r2,4(r2)
10002a98:	10c00304 	addi	r3,r2,12
10002a9c:	00840674 	movhi	r2,4121
10002aa0:	1090c404 	addi	r2,r2,17168
10002aa4:	10c00115 	stw	r3,4(r2)
                        bluePlayer.pos_state = 1;
10002aa8:	00840674 	movhi	r2,4121
10002aac:	1090c404 	addi	r2,r2,17168
10002ab0:	00c00044 	movi	r3,1
10002ab4:	10c00515 	stw	r3,20(r2)
                    }
                    cannonBallInit();
10002ab8:	000026c0 	call	1000026c <cannonBallInit>
                    return;
10002abc:	00003a06 	br	10002ba8 <updateCannonBall+0x46c>
                }
                findexplosionPoint();
10002ac0:	00051240 	call	10005124 <findexplosionPoint>
                cannonBall.state = 3;
10002ac4:	00840674 	movhi	r2,4121
10002ac8:	1090e204 	addi	r2,r2,17288
10002acc:	00c000c4 	movi	r3,3
10002ad0:	10c00615 	stw	r3,24(r2)
                explodingHarm();
10002ad4:	0002bc40 	call	10002bc4 <explodingHarm>
                attackingGround(cannonBall.x_pos, cannonBall.y_pos); // firstly assume that the exploding point is the pos of cannonball
10002ad8:	00840674 	movhi	r2,4121
10002adc:	1090e204 	addi	r2,r2,17288
10002ae0:	10c00117 	ldw	r3,4(r2)
10002ae4:	00840674 	movhi	r2,4121
10002ae8:	1090e204 	addi	r2,r2,17288
10002aec:	10800017 	ldw	r2,0(r2)
10002af0:	100b883a 	mov	r5,r2
10002af4:	1809883a 	mov	r4,r3
10002af8:	0002d4c0 	call	10002d4c <attackingGround>
                //printf("The crater position: x: %d; y: %d\n", cannonBall.x_pos, cannonBall.y_pos);
                cracterOriginal[cracterCounter] = cannonBall.x_pos;
10002afc:	d0e7f017 	ldw	r3,-24640(gp)
10002b00:	00840674 	movhi	r2,4121
10002b04:	1090e204 	addi	r2,r2,17288
10002b08:	11000117 	ldw	r4,4(r2)
10002b0c:	00840674 	movhi	r2,4121
10002b10:	10928604 	addi	r2,r2,18968
10002b14:	18c7883a 	add	r3,r3,r3
10002b18:	18c7883a 	add	r3,r3,r3
10002b1c:	10c5883a 	add	r2,r2,r3
10002b20:	11000015 	stw	r4,0(r2)
                cracterCounter += 1; 
10002b24:	d0a7f017 	ldw	r2,-24640(gp)
10002b28:	10800044 	addi	r2,r2,1
10002b2c:	d0a7f015 	stw	r2,-24640(gp)
                fillBufferCrater(cannonBall.x_pos, cannonBall.y_pos);   // a new crater is formed fill as many as possible 
10002b30:	00840674 	movhi	r2,4121
10002b34:	1090e204 	addi	r2,r2,17288
10002b38:	10c00117 	ldw	r3,4(r2)
10002b3c:	00840674 	movhi	r2,4121
10002b40:	1090e204 	addi	r2,r2,17288
10002b44:	10800017 	ldw	r2,0(r2)
10002b48:	100b883a 	mov	r5,r2
10002b4c:	1809883a 	mov	r4,r3
10002b50:	00040a00 	call	100040a0 <fillBufferCrater>
            cannonBallInit(); // erase the cannonball
        }
        else cannonBall.explodingCount -= 1; // count exploding
    }

    return;
10002b54:	00001306 	br	10002ba4 <updateCannonBall+0x468>
            }
        }

    }

    else if(cannonBall.state == 3){ // exploding mode
10002b58:	00840674 	movhi	r2,4121
10002b5c:	1090e204 	addi	r2,r2,17288
10002b60:	10800617 	ldw	r2,24(r2)
10002b64:	108000d8 	cmpnei	r2,r2,3
10002b68:	10000e1e 	bne	r2,zero,10002ba4 <updateCannonBall+0x468>
        if(cannonBall.explodingCount <= 0){ // has ended exploding
10002b6c:	00840674 	movhi	r2,4121
10002b70:	1090e204 	addi	r2,r2,17288
10002b74:	10800717 	ldw	r2,28(r2)
10002b78:	00800216 	blt	zero,r2,10002b84 <updateCannonBall+0x448>
            cannonBallInit(); // erase the cannonball
10002b7c:	000026c0 	call	1000026c <cannonBallInit>
        }
        else cannonBall.explodingCount -= 1; // count exploding
    }

    return;
10002b80:	00000806 	br	10002ba4 <updateCannonBall+0x468>

    else if(cannonBall.state == 3){ // exploding mode
        if(cannonBall.explodingCount <= 0){ // has ended exploding
            cannonBallInit(); // erase the cannonball
        }
        else cannonBall.explodingCount -= 1; // count exploding
10002b84:	00840674 	movhi	r2,4121
10002b88:	1090e204 	addi	r2,r2,17288
10002b8c:	10800717 	ldw	r2,28(r2)
10002b90:	10ffffc4 	addi	r3,r2,-1
10002b94:	00840674 	movhi	r2,4121
10002b98:	1090e204 	addi	r2,r2,17288
10002b9c:	10c00715 	stw	r3,28(r2)
    }

    return;
10002ba0:	0001883a 	nop
10002ba4:	0001883a 	nop
}
10002ba8:	e6fffe04 	addi	sp,fp,-8
10002bac:	dfc00317 	ldw	ra,12(sp)
10002bb0:	df000217 	ldw	fp,8(sp)
10002bb4:	dc400117 	ldw	r17,4(sp)
10002bb8:	dc000017 	ldw	r16,0(sp)
10002bbc:	dec00404 	addi	sp,sp,16
10002bc0:	f800283a 	ret

10002bc4 <explodingHarm>:

void explodingHarm(){
10002bc4:	defffa04 	addi	sp,sp,-24
10002bc8:	dfc00515 	stw	ra,20(sp)
10002bcc:	df000415 	stw	fp,16(sp)
10002bd0:	dc000315 	stw	r16,12(sp)
10002bd4:	df000404 	addi	fp,sp,16
    int player_x, player_y;
    int healthDec = 0;
10002bd8:	e03ffe15 	stw	zero,-8(fp)
    if(cannonBall.target == 0){
10002bdc:	00840674 	movhi	r2,4121
10002be0:	1090e204 	addi	r2,r2,17288
10002be4:	10800b17 	ldw	r2,44(r2)
10002be8:	1000091e 	bne	r2,zero,10002c10 <explodingHarm+0x4c>
        player_x = redPlayer.x_pos;
10002bec:	00840674 	movhi	r2,4121
10002bf0:	1090d304 	addi	r2,r2,17228
10002bf4:	10800017 	ldw	r2,0(r2)
10002bf8:	e0bffc15 	stw	r2,-16(fp)
        player_y = redPlayer.y_pos;
10002bfc:	00840674 	movhi	r2,4121
10002c00:	1090d304 	addi	r2,r2,17228
10002c04:	10800117 	ldw	r2,4(r2)
10002c08:	e0bffd15 	stw	r2,-12(fp)
10002c0c:	00000806 	br	10002c30 <explodingHarm+0x6c>
    }
    else{
        player_x = bluePlayer.x_pos;
10002c10:	00840674 	movhi	r2,4121
10002c14:	1090c404 	addi	r2,r2,17168
10002c18:	10800017 	ldw	r2,0(r2)
10002c1c:	e0bffc15 	stw	r2,-16(fp)
        player_y = bluePlayer.y_pos;
10002c20:	00840674 	movhi	r2,4121
10002c24:	1090c404 	addi	r2,r2,17168
10002c28:	10800117 	ldw	r2,4(r2)
10002c2c:	e0bffd15 	stw	r2,-12(fp)
    }
    if(((cannonBall.x_pos-player_x)*(cannonBall.x_pos-player_x) + (cannonBall.y_pos-player_y)*(cannonBall.y_pos-player_y)) <= (40)*(40)){ // IF THE PLAYER IS WITHIN THE RANGE
10002c30:	00840674 	movhi	r2,4121
10002c34:	1090e204 	addi	r2,r2,17288
10002c38:	10c00117 	ldw	r3,4(r2)
10002c3c:	e0bffc17 	ldw	r2,-16(fp)
10002c40:	1889c83a 	sub	r4,r3,r2
10002c44:	00840674 	movhi	r2,4121
10002c48:	1090e204 	addi	r2,r2,17288
10002c4c:	10c00117 	ldw	r3,4(r2)
10002c50:	e0bffc17 	ldw	r2,-16(fp)
10002c54:	1885c83a 	sub	r2,r3,r2
10002c58:	100b883a 	mov	r5,r2
10002c5c:	00096fc0 	call	100096fc <__mulsi3>
10002c60:	1021883a 	mov	r16,r2
10002c64:	00840674 	movhi	r2,4121
10002c68:	1090e204 	addi	r2,r2,17288
10002c6c:	10c00017 	ldw	r3,0(r2)
10002c70:	e0bffd17 	ldw	r2,-12(fp)
10002c74:	1889c83a 	sub	r4,r3,r2
10002c78:	00840674 	movhi	r2,4121
10002c7c:	1090e204 	addi	r2,r2,17288
10002c80:	10c00017 	ldw	r3,0(r2)
10002c84:	e0bffd17 	ldw	r2,-12(fp)
10002c88:	1885c83a 	sub	r2,r3,r2
10002c8c:	100b883a 	mov	r5,r2
10002c90:	00096fc0 	call	100096fc <__mulsi3>
10002c94:	8085883a 	add	r2,r16,r2
10002c98:	10819048 	cmpgei	r2,r2,1601
10002c9c:	1000021e 	bne	r2,zero,10002ca8 <explodingHarm+0xe4>
        healthDec = 1;
10002ca0:	00800044 	movi	r2,1
10002ca4:	e0bffe15 	stw	r2,-8(fp)
    }

    if(cannonBall.target == 0){
10002ca8:	00840674 	movhi	r2,4121
10002cac:	1090e204 	addi	r2,r2,17288
10002cb0:	10800b17 	ldw	r2,44(r2)
10002cb4:	10000f1e 	bne	r2,zero,10002cf4 <explodingHarm+0x130>
        redPlayer.health -= healthDec;
10002cb8:	00840674 	movhi	r2,4121
10002cbc:	1090d304 	addi	r2,r2,17228
10002cc0:	10c00617 	ldw	r3,24(r2)
10002cc4:	e0bffe17 	ldw	r2,-8(fp)
10002cc8:	1887c83a 	sub	r3,r3,r2
10002ccc:	00840674 	movhi	r2,4121
10002cd0:	1090d304 	addi	r2,r2,17228
10002cd4:	10c00615 	stw	r3,24(r2)
        if(redPlayer.health == 0) gameState.state = 2;
10002cd8:	00840674 	movhi	r2,4121
10002cdc:	1090d304 	addi	r2,r2,17228
10002ce0:	10800617 	ldw	r2,24(r2)
10002ce4:	1000121e 	bne	r2,zero,10002d30 <explodingHarm+0x16c>
10002ce8:	00800084 	movi	r2,2
10002cec:	d0a7ef15 	stw	r2,-24644(gp)
    else{
        bluePlayer.health -= healthDec;
        if(bluePlayer.health == 0) gameState.state = 2;
    }
    
    return;
10002cf0:	00000f06 	br	10002d30 <explodingHarm+0x16c>
    if(cannonBall.target == 0){
        redPlayer.health -= healthDec;
        if(redPlayer.health == 0) gameState.state = 2;
    }
    else{
        bluePlayer.health -= healthDec;
10002cf4:	00840674 	movhi	r2,4121
10002cf8:	1090c404 	addi	r2,r2,17168
10002cfc:	10c00617 	ldw	r3,24(r2)
10002d00:	e0bffe17 	ldw	r2,-8(fp)
10002d04:	1887c83a 	sub	r3,r3,r2
10002d08:	00840674 	movhi	r2,4121
10002d0c:	1090c404 	addi	r2,r2,17168
10002d10:	10c00615 	stw	r3,24(r2)
        if(bluePlayer.health == 0) gameState.state = 2;
10002d14:	00840674 	movhi	r2,4121
10002d18:	1090c404 	addi	r2,r2,17168
10002d1c:	10800617 	ldw	r2,24(r2)
10002d20:	1000031e 	bne	r2,zero,10002d30 <explodingHarm+0x16c>
10002d24:	00800084 	movi	r2,2
10002d28:	d0a7ef15 	stw	r2,-24644(gp)
    }
    
    return;
10002d2c:	0001883a 	nop
10002d30:	0001883a 	nop
}
10002d34:	e6ffff04 	addi	sp,fp,-4
10002d38:	dfc00217 	ldw	ra,8(sp)
10002d3c:	df000117 	ldw	fp,4(sp)
10002d40:	dc000017 	ldw	r16,0(sp)
10002d44:	dec00304 	addi	sp,sp,12
10002d48:	f800283a 	ret

10002d4c <attackingGround>:

void attackingGround(int cent_x, int cent_y){
10002d4c:	defff504 	addi	sp,sp,-44
10002d50:	dfc00a15 	stw	ra,40(sp)
10002d54:	df000915 	stw	fp,36(sp)
10002d58:	dc000815 	stw	r16,32(sp)
10002d5c:	df000904 	addi	fp,sp,36
10002d60:	e13ffd15 	stw	r4,-12(fp)
10002d64:	e17ffe15 	stw	r5,-8(fp)
    if((cent_x<0)||(cent_x> 800) || (cent_y< 0) || (cent_y> 480) ){
10002d68:	e0bffd17 	ldw	r2,-12(fp)
10002d6c:	10009116 	blt	r2,zero,10002fb4 <attackingGround+0x268>
10002d70:	e0bffd17 	ldw	r2,-12(fp)
10002d74:	1080c848 	cmpgei	r2,r2,801
10002d78:	10008e1e 	bne	r2,zero,10002fb4 <attackingGround+0x268>
10002d7c:	e0bffe17 	ldw	r2,-8(fp)
10002d80:	10008c16 	blt	r2,zero,10002fb4 <attackingGround+0x268>
10002d84:	e0bffe17 	ldw	r2,-8(fp)
10002d88:	10807850 	cmplti	r2,r2,481
10002d8c:	10008926 	beq	r2,zero,10002fb4 <attackingGround+0x268>
		return;
	}
	int left = (cent_x < 40)?0:(cent_x - 40);
10002d90:	e0bffd17 	ldw	r2,-12(fp)
10002d94:	10800a10 	cmplti	r2,r2,40
10002d98:	1000031e 	bne	r2,zero,10002da8 <attackingGround+0x5c>
10002d9c:	e0bffd17 	ldw	r2,-12(fp)
10002da0:	10bff604 	addi	r2,r2,-40
10002da4:	00000106 	br	10002dac <attackingGround+0x60>
10002da8:	0005883a 	mov	r2,zero
10002dac:	e0bff715 	stw	r2,-36(fp)
	int right =(cent_x > 760)?800: (cent_x+ 40);
10002db0:	e0bffd17 	ldw	r2,-12(fp)
10002db4:	1080be48 	cmpgei	r2,r2,761
10002db8:	1000031e 	bne	r2,zero,10002dc8 <attackingGround+0x7c>
10002dbc:	e0bffd17 	ldw	r2,-12(fp)
10002dc0:	10800a04 	addi	r2,r2,40
10002dc4:	00000106 	br	10002dcc <attackingGround+0x80>
10002dc8:	0080c804 	movi	r2,800
10002dcc:	e0bff815 	stw	r2,-32(fp)
    //draw the higher side of the explosion
	for ( int y = cent_y; y < cent_y + 25; y++){
10002dd0:	e0bffe17 	ldw	r2,-8(fp)
10002dd4:	e0bff915 	stw	r2,-28(fp)
10002dd8:	00002b06 	br	10002e88 <attackingGround+0x13c>
		if (y > 240){
10002ddc:	e0bff917 	ldw	r2,-28(fp)
10002de0:	10803c50 	cmplti	r2,r2,241
10002de4:	10002d26 	beq	r2,zero,10002e9c <attackingGround+0x150>
			break;
		}
		for (int x = left; x < right; x++){
10002de8:	e0bff717 	ldw	r2,-36(fp)
10002dec:	e0bffa15 	stw	r2,-24(fp)
10002df0:	00001006 	br	10002e34 <attackingGround+0xe8>
			// }
			// else{
			// 	value = (value & 0xf0) | 0x09;
			// }
			// pixel_color[(480-y-1)*320 + (x/2)] = value;
			ground.validGround[x][y] = 0; 
10002df4:	040400b4 	movhi	r16,4098
10002df8:	8434c404 	addi	r16,r16,-11504
10002dfc:	e0bffa17 	ldw	r2,-24(fp)
10002e00:	01407804 	movi	r5,480
10002e04:	1009883a 	mov	r4,r2
10002e08:	00096fc0 	call	100096fc <__mulsi3>
10002e0c:	1007883a 	mov	r3,r2
10002e10:	e0bff917 	ldw	r2,-28(fp)
10002e14:	1885883a 	add	r2,r3,r2
10002e18:	1085883a 	add	r2,r2,r2
10002e1c:	1085883a 	add	r2,r2,r2
10002e20:	8085883a 	add	r2,r16,r2
10002e24:	10000015 	stw	zero,0(r2)
    //draw the higher side of the explosion
	for ( int y = cent_y; y < cent_y + 25; y++){
		if (y > 240){
			break;
		}
		for (int x = left; x < right; x++){
10002e28:	e0bffa17 	ldw	r2,-24(fp)
10002e2c:	10800044 	addi	r2,r2,1
10002e30:	e0bffa15 	stw	r2,-24(fp)
10002e34:	e0fffa17 	ldw	r3,-24(fp)
10002e38:	e0bff817 	ldw	r2,-32(fp)
10002e3c:	18bfed16 	blt	r3,r2,10002df4 <__alt_data_end+0xf8002df4>
			// pixel_color[(480-y-1)*320 + (x/2)] = value;
			ground.validGround[x][y] = 0; 
			//ground[y*640 + x] = 0;

		}
		left = (left == 0)? 0:(left + 1);
10002e40:	e0bff717 	ldw	r2,-36(fp)
10002e44:	10000326 	beq	r2,zero,10002e54 <attackingGround+0x108>
10002e48:	e0bff717 	ldw	r2,-36(fp)
10002e4c:	10800044 	addi	r2,r2,1
10002e50:	00000106 	br	10002e58 <attackingGround+0x10c>
10002e54:	0005883a 	mov	r2,zero
10002e58:	e0bff715 	stw	r2,-36(fp)
		right = (right == 800)? 800:(right - 1);
10002e5c:	e0bff817 	ldw	r2,-32(fp)
10002e60:	1080c820 	cmpeqi	r2,r2,800
10002e64:	1000031e 	bne	r2,zero,10002e74 <attackingGround+0x128>
10002e68:	e0bff817 	ldw	r2,-32(fp)
10002e6c:	10bfffc4 	addi	r2,r2,-1
10002e70:	00000106 	br	10002e78 <attackingGround+0x12c>
10002e74:	0080c804 	movi	r2,800
10002e78:	e0bff815 	stw	r2,-32(fp)
		return;
	}
	int left = (cent_x < 40)?0:(cent_x - 40);
	int right =(cent_x > 760)?800: (cent_x+ 40);
    //draw the higher side of the explosion
	for ( int y = cent_y; y < cent_y + 25; y++){
10002e7c:	e0bff917 	ldw	r2,-28(fp)
10002e80:	10800044 	addi	r2,r2,1
10002e84:	e0bff915 	stw	r2,-28(fp)
10002e88:	e0bffe17 	ldw	r2,-8(fp)
10002e8c:	10800644 	addi	r2,r2,25
10002e90:	e0fff917 	ldw	r3,-28(fp)
10002e94:	18bfd116 	blt	r3,r2,10002ddc <__alt_data_end+0xf8002ddc>
10002e98:	00000106 	br	10002ea0 <attackingGround+0x154>
		if (y > 240){
			break;
10002e9c:	0001883a 	nop
		}
		left = (left == 0)? 0:(left + 1);
		right = (right == 800)? 800:(right - 1);
	}
    
    left = (cent_x < 40)?0:(cent_x - 40);
10002ea0:	e0bffd17 	ldw	r2,-12(fp)
10002ea4:	10800a10 	cmplti	r2,r2,40
10002ea8:	1000031e 	bne	r2,zero,10002eb8 <attackingGround+0x16c>
10002eac:	e0bffd17 	ldw	r2,-12(fp)
10002eb0:	10bff604 	addi	r2,r2,-40
10002eb4:	00000106 	br	10002ebc <attackingGround+0x170>
10002eb8:	0005883a 	mov	r2,zero
10002ebc:	e0bff715 	stw	r2,-36(fp)
	right =(cent_x > 760)?800: (cent_x+ 40);
10002ec0:	e0bffd17 	ldw	r2,-12(fp)
10002ec4:	1080be48 	cmpgei	r2,r2,761
10002ec8:	1000031e 	bne	r2,zero,10002ed8 <attackingGround+0x18c>
10002ecc:	e0bffd17 	ldw	r2,-12(fp)
10002ed0:	10800a04 	addi	r2,r2,40
10002ed4:	00000106 	br	10002edc <attackingGround+0x190>
10002ed8:	0080c804 	movi	r2,800
10002edc:	e0bff815 	stw	r2,-32(fp)
    // draw the lower side of the explosion 
    for ( int y = cent_y; y > cent_y - 25; y--){
10002ee0:	e0bffe17 	ldw	r2,-8(fp)
10002ee4:	e0bffb15 	stw	r2,-20(fp)
10002ee8:	00002a06 	br	10002f94 <attackingGround+0x248>
		if (y < 0){
10002eec:	e0bffb17 	ldw	r2,-20(fp)
10002ef0:	10002d16 	blt	r2,zero,10002fa8 <attackingGround+0x25c>
			break;
		}
		for (int x = left; x < right; x++){
10002ef4:	e0bff717 	ldw	r2,-36(fp)
10002ef8:	e0bffc15 	stw	r2,-16(fp)
10002efc:	00001006 	br	10002f40 <attackingGround+0x1f4>
			// }
			// else{
			// 	value = (value & 0xf0) | 0x09;
			// }
			// pixel_color[(480-y-1)*320 + (x/2)] = value;
			ground.validGround[x][y] = 0; 
10002f00:	040400b4 	movhi	r16,4098
10002f04:	8434c404 	addi	r16,r16,-11504
10002f08:	e0bffc17 	ldw	r2,-16(fp)
10002f0c:	01407804 	movi	r5,480
10002f10:	1009883a 	mov	r4,r2
10002f14:	00096fc0 	call	100096fc <__mulsi3>
10002f18:	1007883a 	mov	r3,r2
10002f1c:	e0bffb17 	ldw	r2,-20(fp)
10002f20:	1885883a 	add	r2,r3,r2
10002f24:	1085883a 	add	r2,r2,r2
10002f28:	1085883a 	add	r2,r2,r2
10002f2c:	8085883a 	add	r2,r16,r2
10002f30:	10000015 	stw	zero,0(r2)
    // draw the lower side of the explosion 
    for ( int y = cent_y; y > cent_y - 25; y--){
		if (y < 0){
			break;
		}
		for (int x = left; x < right; x++){
10002f34:	e0bffc17 	ldw	r2,-16(fp)
10002f38:	10800044 	addi	r2,r2,1
10002f3c:	e0bffc15 	stw	r2,-16(fp)
10002f40:	e0fffc17 	ldw	r3,-16(fp)
10002f44:	e0bff817 	ldw	r2,-32(fp)
10002f48:	18bfed16 	blt	r3,r2,10002f00 <__alt_data_end+0xf8002f00>
			// pixel_color[(480-y-1)*320 + (x/2)] = value;
			ground.validGround[x][y] = 0; 
			//ground[y*640 + x] = 0;

		}
		left = (left == 0)? 0:(left +  1);
10002f4c:	e0bff717 	ldw	r2,-36(fp)
10002f50:	10000326 	beq	r2,zero,10002f60 <attackingGround+0x214>
10002f54:	e0bff717 	ldw	r2,-36(fp)
10002f58:	10800044 	addi	r2,r2,1
10002f5c:	00000106 	br	10002f64 <attackingGround+0x218>
10002f60:	0005883a 	mov	r2,zero
10002f64:	e0bff715 	stw	r2,-36(fp)
		right = (right == 800)? 800:(right - 1);
10002f68:	e0bff817 	ldw	r2,-32(fp)
10002f6c:	1080c820 	cmpeqi	r2,r2,800
10002f70:	1000031e 	bne	r2,zero,10002f80 <attackingGround+0x234>
10002f74:	e0bff817 	ldw	r2,-32(fp)
10002f78:	10bfffc4 	addi	r2,r2,-1
10002f7c:	00000106 	br	10002f84 <attackingGround+0x238>
10002f80:	0080c804 	movi	r2,800
10002f84:	e0bff815 	stw	r2,-32(fp)
	}
    
    left = (cent_x < 40)?0:(cent_x - 40);
	right =(cent_x > 760)?800: (cent_x+ 40);
    // draw the lower side of the explosion 
    for ( int y = cent_y; y > cent_y - 25; y--){
10002f88:	e0bffb17 	ldw	r2,-20(fp)
10002f8c:	10bfffc4 	addi	r2,r2,-1
10002f90:	e0bffb15 	stw	r2,-20(fp)
10002f94:	e0bffe17 	ldw	r2,-8(fp)
10002f98:	10fff9c4 	addi	r3,r2,-25
10002f9c:	e0bffb17 	ldw	r2,-20(fp)
10002fa0:	18bfd216 	blt	r3,r2,10002eec <__alt_data_end+0xf8002eec>

		}
		left = (left == 0)? 0:(left +  1);
		right = (right == 800)? 800:(right - 1);
	}
    return;
10002fa4:	00000106 	br	10002fac <attackingGround+0x260>
    left = (cent_x < 40)?0:(cent_x - 40);
	right =(cent_x > 760)?800: (cent_x+ 40);
    // draw the lower side of the explosion 
    for ( int y = cent_y; y > cent_y - 25; y--){
		if (y < 0){
			break;
10002fa8:	0001883a 	nop

		}
		left = (left == 0)? 0:(left +  1);
		right = (right == 800)? 800:(right - 1);
	}
    return;
10002fac:	0001883a 	nop
10002fb0:	00000106 	br	10002fb8 <attackingGround+0x26c>
    return;
}

void attackingGround(int cent_x, int cent_y){
    if((cent_x<0)||(cent_x> 800) || (cent_y< 0) || (cent_y> 480) ){
		return;
10002fb4:	0001883a 	nop
		}
		left = (left == 0)? 0:(left +  1);
		right = (right == 800)? 800:(right - 1);
	}
    return;
}
10002fb8:	e6ffff04 	addi	sp,fp,-4
10002fbc:	dfc00217 	ldw	ra,8(sp)
10002fc0:	df000117 	ldw	fp,4(sp)
10002fc4:	dc000017 	ldw	r16,0(sp)
10002fc8:	dec00304 	addi	sp,sp,12
10002fcc:	f800283a 	ret

10002fd0 <fillBufferPlayers>:


void fillBufferPlayers(){  // 2 objects
10002fd0:	defffd04 	addi	sp,sp,-12
10002fd4:	dfc00215 	stw	ra,8(sp)
10002fd8:	df000115 	stw	fp,4(sp)
10002fdc:	df000104 	addi	fp,sp,4
    // red player:
    if((redPlayer.direction == 0) || (redPlayer.direction == 1)) PackArray(&IngameBuffer, redPlayer.direction + 10, redPlayer.x_pos - moveX, redPlayer.y_pos, 10);
10002fe0:	00840674 	movhi	r2,4121
10002fe4:	1090d304 	addi	r2,r2,17228
10002fe8:	10800717 	ldw	r2,28(r2)
10002fec:	10000526 	beq	r2,zero,10003004 <fillBufferPlayers+0x34>
10002ff0:	00840674 	movhi	r2,4121
10002ff4:	1090d304 	addi	r2,r2,17228
10002ff8:	10800717 	ldw	r2,28(r2)
10002ffc:	10800058 	cmpnei	r2,r2,1
10003000:	1000151e 	bne	r2,zero,10003058 <fillBufferPlayers+0x88>
10003004:	00840674 	movhi	r2,4121
10003008:	1090d304 	addi	r2,r2,17228
1000300c:	10800717 	ldw	r2,28(r2)
10003010:	11000284 	addi	r4,r2,10
10003014:	00840674 	movhi	r2,4121
10003018:	1090d304 	addi	r2,r2,17228
1000301c:	10c00017 	ldw	r3,0(r2)
10003020:	d0a7f217 	ldw	r2,-24632(gp)
10003024:	1887c83a 	sub	r3,r3,r2
10003028:	00840674 	movhi	r2,4121
1000302c:	1090d304 	addi	r2,r2,17228
10003030:	11400117 	ldw	r5,4(r2)
10003034:	00800284 	movi	r2,10
10003038:	d8800015 	stw	r2,0(sp)
1000303c:	280f883a 	mov	r7,r5
10003040:	180d883a 	mov	r6,r3
10003044:	200b883a 	mov	r5,r4
10003048:	01040674 	movhi	r4,4121
1000304c:	2110f004 	addi	r4,r4,17344
10003050:	00019080 	call	10001908 <PackArray>
10003054:	00001406 	br	100030a8 <fillBufferPlayers+0xd8>
    else PackArray(&IngameBuffer, redPlayer.direction + 10, redPlayer.x_pos - moveX, redPlayer.y_pos, 16);
10003058:	00840674 	movhi	r2,4121
1000305c:	1090d304 	addi	r2,r2,17228
10003060:	10800717 	ldw	r2,28(r2)
10003064:	11000284 	addi	r4,r2,10
10003068:	00840674 	movhi	r2,4121
1000306c:	1090d304 	addi	r2,r2,17228
10003070:	10c00017 	ldw	r3,0(r2)
10003074:	d0a7f217 	ldw	r2,-24632(gp)
10003078:	1887c83a 	sub	r3,r3,r2
1000307c:	00840674 	movhi	r2,4121
10003080:	1090d304 	addi	r2,r2,17228
10003084:	11400117 	ldw	r5,4(r2)
10003088:	00800404 	movi	r2,16
1000308c:	d8800015 	stw	r2,0(sp)
10003090:	280f883a 	mov	r7,r5
10003094:	180d883a 	mov	r6,r3
10003098:	200b883a 	mov	r5,r4
1000309c:	01040674 	movhi	r4,4121
100030a0:	2110f004 	addi	r4,r4,17344
100030a4:	00019080 	call	10001908 <PackArray>
    // blue player:
    if((bluePlayer.direction == 0) || (bluePlayer.direction == 1)) PackArray(&IngameBuffer, bluePlayer.direction + 4, bluePlayer.x_pos - moveX, bluePlayer.y_pos, 10);
100030a8:	00840674 	movhi	r2,4121
100030ac:	1090c404 	addi	r2,r2,17168
100030b0:	10800717 	ldw	r2,28(r2)
100030b4:	10000526 	beq	r2,zero,100030cc <fillBufferPlayers+0xfc>
100030b8:	00840674 	movhi	r2,4121
100030bc:	1090c404 	addi	r2,r2,17168
100030c0:	10800717 	ldw	r2,28(r2)
100030c4:	10800058 	cmpnei	r2,r2,1
100030c8:	1000151e 	bne	r2,zero,10003120 <fillBufferPlayers+0x150>
100030cc:	00840674 	movhi	r2,4121
100030d0:	1090c404 	addi	r2,r2,17168
100030d4:	10800717 	ldw	r2,28(r2)
100030d8:	11000104 	addi	r4,r2,4
100030dc:	00840674 	movhi	r2,4121
100030e0:	1090c404 	addi	r2,r2,17168
100030e4:	10c00017 	ldw	r3,0(r2)
100030e8:	d0a7f217 	ldw	r2,-24632(gp)
100030ec:	1887c83a 	sub	r3,r3,r2
100030f0:	00840674 	movhi	r2,4121
100030f4:	1090c404 	addi	r2,r2,17168
100030f8:	11400117 	ldw	r5,4(r2)
100030fc:	00800284 	movi	r2,10
10003100:	d8800015 	stw	r2,0(sp)
10003104:	280f883a 	mov	r7,r5
10003108:	180d883a 	mov	r6,r3
1000310c:	200b883a 	mov	r5,r4
10003110:	01040674 	movhi	r4,4121
10003114:	2110f004 	addi	r4,r4,17344
10003118:	00019080 	call	10001908 <PackArray>
1000311c:	00001406 	br	10003170 <fillBufferPlayers+0x1a0>
    else PackArray(&IngameBuffer, bluePlayer.direction + 4, bluePlayer.x_pos - moveX, bluePlayer.y_pos, 16);
10003120:	00840674 	movhi	r2,4121
10003124:	1090c404 	addi	r2,r2,17168
10003128:	10800717 	ldw	r2,28(r2)
1000312c:	11000104 	addi	r4,r2,4
10003130:	00840674 	movhi	r2,4121
10003134:	1090c404 	addi	r2,r2,17168
10003138:	10c00017 	ldw	r3,0(r2)
1000313c:	d0a7f217 	ldw	r2,-24632(gp)
10003140:	1887c83a 	sub	r3,r3,r2
10003144:	00840674 	movhi	r2,4121
10003148:	1090c404 	addi	r2,r2,17168
1000314c:	11400117 	ldw	r5,4(r2)
10003150:	00800404 	movi	r2,16
10003154:	d8800015 	stw	r2,0(sp)
10003158:	280f883a 	mov	r7,r5
1000315c:	180d883a 	mov	r6,r3
10003160:	200b883a 	mov	r5,r4
10003164:	01040674 	movhi	r4,4121
10003168:	2110f004 	addi	r4,r4,17344
1000316c:	00019080 	call	10001908 <PackArray>
    return;
10003170:	0001883a 	nop
}
10003174:	e037883a 	mov	sp,fp
10003178:	dfc00117 	ldw	ra,4(sp)
1000317c:	df000017 	ldw	fp,0(sp)
10003180:	dec00204 	addi	sp,sp,8
10003184:	f800283a 	ret

10003188 <fillBufferCannon>:
void fillBufferCannon(){   // 1 objects'
10003188:	defffd04 	addi	sp,sp,-12
1000318c:	dfc00215 	stw	ra,8(sp)
10003190:	df000115 	stw	fp,4(sp)
10003194:	df000104 	addi	fp,sp,4
    if((cannonBall.state == 2) && (cannonBall.magic != 1)){ // when it is flying in the air
10003198:	00840674 	movhi	r2,4121
1000319c:	1090e204 	addi	r2,r2,17288
100031a0:	10800617 	ldw	r2,24(r2)
100031a4:	10800098 	cmpnei	r2,r2,2
100031a8:	1000161e 	bne	r2,zero,10003204 <fillBufferCannon+0x7c>
100031ac:	00840674 	movhi	r2,4121
100031b0:	1090e204 	addi	r2,r2,17288
100031b4:	10800d17 	ldw	r2,52(r2)
100031b8:	10800060 	cmpeqi	r2,r2,1
100031bc:	1000111e 	bne	r2,zero,10003204 <fillBufferCannon+0x7c>
        PackArray(&IngameBuffer, 2, cannonBall.x_pos - moveX, cannonBall.y_pos, 3);
100031c0:	00840674 	movhi	r2,4121
100031c4:	1090e204 	addi	r2,r2,17288
100031c8:	10c00117 	ldw	r3,4(r2)
100031cc:	d0a7f217 	ldw	r2,-24632(gp)
100031d0:	1887c83a 	sub	r3,r3,r2
100031d4:	00840674 	movhi	r2,4121
100031d8:	1090e204 	addi	r2,r2,17288
100031dc:	11000017 	ldw	r4,0(r2)
100031e0:	008000c4 	movi	r2,3
100031e4:	d8800015 	stw	r2,0(sp)
100031e8:	200f883a 	mov	r7,r4
100031ec:	180d883a 	mov	r6,r3
100031f0:	01400084 	movi	r5,2
100031f4:	01040674 	movhi	r4,4121
100031f8:	2110f004 	addi	r4,r4,17344
100031fc:	00019080 	call	10001908 <PackArray>
10003200:	00000406 	br	10003214 <fillBufferCannon+0x8c>
    }
    else SetZeroArray(&IngameBuffer, 1); // need to skip this item;
10003204:	01400044 	movi	r5,1
10003208:	01040674 	movhi	r4,4121
1000320c:	2110f004 	addi	r4,r4,17344
10003210:	0001a500 	call	10001a50 <SetZeroArray>
    return;
10003214:	0001883a 	nop
}
10003218:	e037883a 	mov	sp,fp
1000321c:	dfc00117 	ldw	ra,4(sp)
10003220:	df000017 	ldw	fp,0(sp)
10003224:	dec00204 	addi	sp,sp,8
10003228:	f800283a 	ret

1000322c <fillBufferExplode>:

void fillBufferExplode(){  // 1 objects
1000322c:	defffd04 	addi	sp,sp,-12
10003230:	dfc00215 	stw	ra,8(sp)
10003234:	df000115 	stw	fp,4(sp)
10003238:	df000104 	addi	fp,sp,4
    if(cannonBall.state == 3){ // when it is exploding in the air
1000323c:	00840674 	movhi	r2,4121
10003240:	1090e204 	addi	r2,r2,17288
10003244:	10800617 	ldw	r2,24(r2)
10003248:	108000d8 	cmpnei	r2,r2,3
1000324c:	1000111e 	bne	r2,zero,10003294 <fillBufferExplode+0x68>
        PackArray(&IngameBuffer, 3, cannonBall.x_pos - moveX, cannonBall.y_pos, 40);
10003250:	00840674 	movhi	r2,4121
10003254:	1090e204 	addi	r2,r2,17288
10003258:	10c00117 	ldw	r3,4(r2)
1000325c:	d0a7f217 	ldw	r2,-24632(gp)
10003260:	1887c83a 	sub	r3,r3,r2
10003264:	00840674 	movhi	r2,4121
10003268:	1090e204 	addi	r2,r2,17288
1000326c:	11000017 	ldw	r4,0(r2)
10003270:	00800a04 	movi	r2,40
10003274:	d8800015 	stw	r2,0(sp)
10003278:	200f883a 	mov	r7,r4
1000327c:	180d883a 	mov	r6,r3
10003280:	014000c4 	movi	r5,3
10003284:	01040674 	movhi	r4,4121
10003288:	2110f004 	addi	r4,r4,17344
1000328c:	00019080 	call	10001908 <PackArray>
    }
    else SetZeroArray(&IngameBuffer, 1); // need to skip this item;
    return;
10003290:	00000506 	br	100032a8 <fillBufferExplode+0x7c>

void fillBufferExplode(){  // 1 objects
    if(cannonBall.state == 3){ // when it is exploding in the air
        PackArray(&IngameBuffer, 3, cannonBall.x_pos - moveX, cannonBall.y_pos, 40);
    }
    else SetZeroArray(&IngameBuffer, 1); // need to skip this item;
10003294:	01400044 	movi	r5,1
10003298:	01040674 	movhi	r4,4121
1000329c:	2110f004 	addi	r4,r4,17344
100032a0:	0001a500 	call	10001a50 <SetZeroArray>
    return;
100032a4:	0001883a 	nop
}
100032a8:	e037883a 	mov	sp,fp
100032ac:	dfc00117 	ldw	ra,4(sp)
100032b0:	df000017 	ldw	fp,0(sp)
100032b4:	dec00204 	addi	sp,sp,8
100032b8:	f800283a 	ret

100032bc <fillBufferHealth>:

void fillBufferHealth(){   // 10 objects
100032bc:	defff904 	addi	sp,sp,-28
100032c0:	dfc00615 	stw	ra,24(sp)
100032c4:	df000515 	stw	fp,20(sp)
100032c8:	df000504 	addi	fp,sp,20
    // PackArray(&IngameBuffer, 12, cannonBall.x_pos, cannonBall.y_pos);
    for(int i = 0; i < redPlayer.health; i++){
100032cc:	e03ffc15 	stw	zero,-16(fp)
100032d0:	00000e06 	br	1000330c <fillBufferHealth+0x50>
        PackArray(&IngameBuffer, 17, 30 + 20 + i*30, 460, 0); 
100032d4:	01400784 	movi	r5,30
100032d8:	e13ffc17 	ldw	r4,-16(fp)
100032dc:	00096fc0 	call	100096fc <__mulsi3>
100032e0:	10800c84 	addi	r2,r2,50
100032e4:	d8000015 	stw	zero,0(sp)
100032e8:	01c07304 	movi	r7,460
100032ec:	100d883a 	mov	r6,r2
100032f0:	01400444 	movi	r5,17
100032f4:	01040674 	movhi	r4,4121
100032f8:	2110f004 	addi	r4,r4,17344
100032fc:	00019080 	call	10001908 <PackArray>
    return;
}

void fillBufferHealth(){   // 10 objects
    // PackArray(&IngameBuffer, 12, cannonBall.x_pos, cannonBall.y_pos);
    for(int i = 0; i < redPlayer.health; i++){
10003300:	e0bffc17 	ldw	r2,-16(fp)
10003304:	10800044 	addi	r2,r2,1
10003308:	e0bffc15 	stw	r2,-16(fp)
1000330c:	00840674 	movhi	r2,4121
10003310:	1090d304 	addi	r2,r2,17228
10003314:	10800617 	ldw	r2,24(r2)
10003318:	e0fffc17 	ldw	r3,-16(fp)
1000331c:	18bfed16 	blt	r3,r2,100032d4 <__alt_data_end+0xf80032d4>
        PackArray(&IngameBuffer, 17, 30 + 20 + i*30, 460, 0); 
    }
    for(int i = redPlayer.health; i < 5; i++){
10003320:	00840674 	movhi	r2,4121
10003324:	1090d304 	addi	r2,r2,17228
10003328:	10800617 	ldw	r2,24(r2)
1000332c:	e0bffd15 	stw	r2,-12(fp)
10003330:	00000e06 	br	1000336c <fillBufferHealth+0xb0>
        PackArray(&IngameBuffer, 18, 30 + 20 + i*30, 460, 0); 
10003334:	01400784 	movi	r5,30
10003338:	e13ffd17 	ldw	r4,-12(fp)
1000333c:	00096fc0 	call	100096fc <__mulsi3>
10003340:	10800c84 	addi	r2,r2,50
10003344:	d8000015 	stw	zero,0(sp)
10003348:	01c07304 	movi	r7,460
1000334c:	100d883a 	mov	r6,r2
10003350:	01400484 	movi	r5,18
10003354:	01040674 	movhi	r4,4121
10003358:	2110f004 	addi	r4,r4,17344
1000335c:	00019080 	call	10001908 <PackArray>
void fillBufferHealth(){   // 10 objects
    // PackArray(&IngameBuffer, 12, cannonBall.x_pos, cannonBall.y_pos);
    for(int i = 0; i < redPlayer.health; i++){
        PackArray(&IngameBuffer, 17, 30 + 20 + i*30, 460, 0); 
    }
    for(int i = redPlayer.health; i < 5; i++){
10003360:	e0bffd17 	ldw	r2,-12(fp)
10003364:	10800044 	addi	r2,r2,1
10003368:	e0bffd15 	stw	r2,-12(fp)
1000336c:	e0bffd17 	ldw	r2,-12(fp)
10003370:	10800150 	cmplti	r2,r2,5
10003374:	103fef1e 	bne	r2,zero,10003334 <__alt_data_end+0xf8003334>
        PackArray(&IngameBuffer, 18, 30 + 20 + i*30, 460, 0); 
    }

    for(int j = 0; j < bluePlayer.health; j++){
10003378:	e03ffe15 	stw	zero,-8(fp)
1000337c:	00000e06 	br	100033b8 <fillBufferHealth+0xfc>
        PackArray(&IngameBuffer, 17, 30 + 470 + j*30, 460, 0); 
10003380:	01400784 	movi	r5,30
10003384:	e13ffe17 	ldw	r4,-8(fp)
10003388:	00096fc0 	call	100096fc <__mulsi3>
1000338c:	10807d04 	addi	r2,r2,500
10003390:	d8000015 	stw	zero,0(sp)
10003394:	01c07304 	movi	r7,460
10003398:	100d883a 	mov	r6,r2
1000339c:	01400444 	movi	r5,17
100033a0:	01040674 	movhi	r4,4121
100033a4:	2110f004 	addi	r4,r4,17344
100033a8:	00019080 	call	10001908 <PackArray>
    }
    for(int i = redPlayer.health; i < 5; i++){
        PackArray(&IngameBuffer, 18, 30 + 20 + i*30, 460, 0); 
    }

    for(int j = 0; j < bluePlayer.health; j++){
100033ac:	e0bffe17 	ldw	r2,-8(fp)
100033b0:	10800044 	addi	r2,r2,1
100033b4:	e0bffe15 	stw	r2,-8(fp)
100033b8:	00840674 	movhi	r2,4121
100033bc:	1090c404 	addi	r2,r2,17168
100033c0:	10800617 	ldw	r2,24(r2)
100033c4:	e0fffe17 	ldw	r3,-8(fp)
100033c8:	18bfed16 	blt	r3,r2,10003380 <__alt_data_end+0xf8003380>
        PackArray(&IngameBuffer, 17, 30 + 470 + j*30, 460, 0); 
    }
    for(int j = bluePlayer.health; j < 5; j++){
100033cc:	00840674 	movhi	r2,4121
100033d0:	1090c404 	addi	r2,r2,17168
100033d4:	10800617 	ldw	r2,24(r2)
100033d8:	e0bfff15 	stw	r2,-4(fp)
100033dc:	00000e06 	br	10003418 <fillBufferHealth+0x15c>
        PackArray(&IngameBuffer, 18, 30 + 470 + j*30, 460, 0); 
100033e0:	01400784 	movi	r5,30
100033e4:	e13fff17 	ldw	r4,-4(fp)
100033e8:	00096fc0 	call	100096fc <__mulsi3>
100033ec:	10807d04 	addi	r2,r2,500
100033f0:	d8000015 	stw	zero,0(sp)
100033f4:	01c07304 	movi	r7,460
100033f8:	100d883a 	mov	r6,r2
100033fc:	01400484 	movi	r5,18
10003400:	01040674 	movhi	r4,4121
10003404:	2110f004 	addi	r4,r4,17344
10003408:	00019080 	call	10001908 <PackArray>
    }

    for(int j = 0; j < bluePlayer.health; j++){
        PackArray(&IngameBuffer, 17, 30 + 470 + j*30, 460, 0); 
    }
    for(int j = bluePlayer.health; j < 5; j++){
1000340c:	e0bfff17 	ldw	r2,-4(fp)
10003410:	10800044 	addi	r2,r2,1
10003414:	e0bfff15 	stw	r2,-4(fp)
10003418:	e0bfff17 	ldw	r2,-4(fp)
1000341c:	10800150 	cmplti	r2,r2,5
10003420:	103fef1e 	bne	r2,zero,100033e0 <__alt_data_end+0xf80033e0>
        PackArray(&IngameBuffer, 18, 30 + 470 + j*30, 460, 0); 
    }

    // SetZeroArray(&IngameBuffer, 10); // need to skip this item;
    return;
10003424:	0001883a 	nop
}
10003428:	e037883a 	mov	sp,fp
1000342c:	dfc00117 	ldw	ra,4(sp)
10003430:	df000017 	ldw	fp,0(sp)
10003434:	dec00204 	addi	sp,sp,8
10003438:	f800283a 	ret

1000343c <fillBufferAngle>:

void fillBufferAngle(int player){    // 1 objects
1000343c:	deffef04 	addi	sp,sp,-68
10003440:	dfc01015 	stw	ra,64(sp)
10003444:	df000f15 	stw	fp,60(sp)
10003448:	dc400e15 	stw	r17,56(sp)
1000344c:	dc000d15 	stw	r16,52(sp)
10003450:	df000f04 	addi	fp,sp,60
10003454:	e13ffd15 	stw	r4,-12(fp)
    int chargingTable[5] = {4*CHARGING_LEVEL_1+10, 4*CHARGING_LEVEL_2+10, 4*CHARGING_LEVEL_3+10, 4*CHARGING_LEVEL_4+10, 4*CHARGING_LEVEL_5+10};
10003458:	00800784 	movi	r2,30
1000345c:	e0bff815 	stw	r2,-32(fp)
10003460:	00800c84 	movi	r2,50
10003464:	e0bff915 	stw	r2,-28(fp)
10003468:	00801184 	movi	r2,70
1000346c:	e0bffa15 	stw	r2,-24(fp)
10003470:	00801684 	movi	r2,90
10003474:	e0bffb15 	stw	r2,-20(fp)
10003478:	00801b84 	movi	r2,110
1000347c:	e0bffc15 	stw	r2,-16(fp)
    int intensity, posture, calX, calY;
    double convertedAngle;
    if(cannonBall.state == 0) intensity = 30;
10003480:	00840674 	movhi	r2,4121
10003484:	1090e204 	addi	r2,r2,17288
10003488:	10800617 	ldw	r2,24(r2)
1000348c:	1000031e 	bne	r2,zero,1000349c <fillBufferAngle+0x60>
10003490:	00800784 	movi	r2,30
10003494:	e0bff215 	stw	r2,-56(fp)
10003498:	00000d06 	br	100034d0 <fillBufferAngle+0x94>
    else intensity = chargingTable[cannonBall.chargingTimeCount / (CHARGING_COUNT_INTERVAL)];
1000349c:	00840674 	movhi	r2,4121
100034a0:	1090e204 	addi	r2,r2,17288
100034a4:	10800817 	ldw	r2,32(r2)
100034a8:	01400144 	movi	r5,5
100034ac:	1009883a 	mov	r4,r2
100034b0:	00095480 	call	10009548 <__divsi3>
100034b4:	1085883a 	add	r2,r2,r2
100034b8:	1085883a 	add	r2,r2,r2
100034bc:	e0fff204 	addi	r3,fp,-56
100034c0:	1885883a 	add	r2,r3,r2
100034c4:	10800604 	addi	r2,r2,24
100034c8:	10800017 	ldw	r2,0(r2)
100034cc:	e0bff215 	stw	r2,-56(fp)

    if(player == 0) posture = redPlayer.direction;
100034d0:	e0bffd17 	ldw	r2,-12(fp)
100034d4:	1000051e 	bne	r2,zero,100034ec <fillBufferAngle+0xb0>
100034d8:	00840674 	movhi	r2,4121
100034dc:	1090d304 	addi	r2,r2,17228
100034e0:	10800717 	ldw	r2,28(r2)
100034e4:	e0bff315 	stw	r2,-52(fp)
100034e8:	00000406 	br	100034fc <fillBufferAngle+0xc0>
    else posture = bluePlayer.direction;
100034ec:	00840674 	movhi	r2,4121
100034f0:	1090c404 	addi	r2,r2,17168
100034f4:	10800717 	ldw	r2,28(r2)
100034f8:	e0bff315 	stw	r2,-52(fp)
    switch(posture){
100034fc:	e0bff317 	ldw	r2,-52(fp)
10003500:	108001a8 	cmpgeui	r2,r2,6
10003504:	1001cd1e 	bne	r2,zero,10003c3c <fillBufferAngle+0x800>
10003508:	e0bff317 	ldw	r2,-52(fp)
1000350c:	100690ba 	slli	r3,r2,2
10003510:	00840034 	movhi	r2,4096
10003514:	108d4904 	addi	r2,r2,13604
10003518:	1885883a 	add	r2,r3,r2
1000351c:	10800017 	ldw	r2,0(r2)
10003520:	1000683a 	jmp	r2
10003524:	1000353c 	xorhi	zero,r2,212
10003528:	10003668 	cmpgeui	zero,r2,217
1000352c:	1000378c 	andi	zero,r2,222
10003530:	100038bc 	xorhi	zero,r2,226
10003534:	100039e4 	muli	zero,r2,231
10003538:	10003b14 	ori	zero,r2,236
        case 0: // face left
            convertedAngle = cannonBall.angle*PI/180;
1000353c:	00840674 	movhi	r2,4121
10003540:	1090e204 	addi	r2,r2,17288
10003544:	10800c17 	ldw	r2,48(r2)
10003548:	1009883a 	mov	r4,r2
1000354c:	000bcec0 	call	1000bcec <__floatsidf>
10003550:	1011883a 	mov	r8,r2
10003554:	1813883a 	mov	r9,r3
10003558:	01951074 	movhi	r6,21569
1000355c:	3185d104 	addi	r6,r6,5956
10003560:	01d00274 	movhi	r7,16393
10003564:	39c87ec4 	addi	r7,r7,8699
10003568:	4009883a 	mov	r4,r8
1000356c:	480b883a 	mov	r5,r9
10003570:	000ab040 	call	1000ab04 <__muldf3>
10003574:	1009883a 	mov	r4,r2
10003578:	180b883a 	mov	r5,r3
1000357c:	2005883a 	mov	r2,r4
10003580:	2807883a 	mov	r3,r5
10003584:	000d883a 	mov	r6,zero
10003588:	01d019f4 	movhi	r7,16487
1000358c:	39e00004 	addi	r7,r7,-32768
10003590:	1009883a 	mov	r4,r2
10003594:	180b883a 	mov	r5,r3
10003598:	0009fd00 	call	10009fd0 <__divdf3>
1000359c:	1009883a 	mov	r4,r2
100035a0:	180b883a 	mov	r5,r3
100035a4:	e13ff615 	stw	r4,-40(fp)
100035a8:	e17ff715 	stw	r5,-36(fp)
            // cannonBall.fired_v_x = -intensity*cos(convertedAngle);
            // cannonBall.fired_v_y = intensity*sin(convertedAngle);
            calX = -intensity*cos(convertedAngle);
100035ac:	e0bff217 	ldw	r2,-56(fp)
100035b0:	0085c83a 	sub	r2,zero,r2
100035b4:	1009883a 	mov	r4,r2
100035b8:	000bcec0 	call	1000bcec <__floatsidf>
100035bc:	1021883a 	mov	r16,r2
100035c0:	1823883a 	mov	r17,r3
100035c4:	e13ff617 	ldw	r4,-40(fp)
100035c8:	e17ff717 	ldw	r5,-36(fp)
100035cc:	00073400 	call	10007340 <cos>
100035d0:	1009883a 	mov	r4,r2
100035d4:	180b883a 	mov	r5,r3
100035d8:	200d883a 	mov	r6,r4
100035dc:	280f883a 	mov	r7,r5
100035e0:	8009883a 	mov	r4,r16
100035e4:	880b883a 	mov	r5,r17
100035e8:	000ab040 	call	1000ab04 <__muldf3>
100035ec:	1009883a 	mov	r4,r2
100035f0:	180b883a 	mov	r5,r3
100035f4:	2005883a 	mov	r2,r4
100035f8:	2807883a 	mov	r3,r5
100035fc:	1009883a 	mov	r4,r2
10003600:	180b883a 	mov	r5,r3
10003604:	000bc6c0 	call	1000bc6c <__fixdfsi>
10003608:	e0bff415 	stw	r2,-48(fp)
            calY = intensity*sin(convertedAngle);
1000360c:	e13ff217 	ldw	r4,-56(fp)
10003610:	000bcec0 	call	1000bcec <__floatsidf>
10003614:	1021883a 	mov	r16,r2
10003618:	1823883a 	mov	r17,r3
1000361c:	e13ff617 	ldw	r4,-40(fp)
10003620:	e17ff717 	ldw	r5,-36(fp)
10003624:	000742c0 	call	1000742c <sin>
10003628:	1009883a 	mov	r4,r2
1000362c:	180b883a 	mov	r5,r3
10003630:	200d883a 	mov	r6,r4
10003634:	280f883a 	mov	r7,r5
10003638:	8009883a 	mov	r4,r16
1000363c:	880b883a 	mov	r5,r17
10003640:	000ab040 	call	1000ab04 <__muldf3>
10003644:	1009883a 	mov	r4,r2
10003648:	180b883a 	mov	r5,r3
1000364c:	2005883a 	mov	r2,r4
10003650:	2807883a 	mov	r3,r5
10003654:	1009883a 	mov	r4,r2
10003658:	180b883a 	mov	r5,r3
1000365c:	000bc6c0 	call	1000bc6c <__fixdfsi>
10003660:	e0bff515 	stw	r2,-44(fp)
            break;
10003664:	00017506 	br	10003c3c <fillBufferAngle+0x800>
        case 1: // face right
            convertedAngle = cannonBall.angle*PI/180;
10003668:	00840674 	movhi	r2,4121
1000366c:	1090e204 	addi	r2,r2,17288
10003670:	10800c17 	ldw	r2,48(r2)
10003674:	1009883a 	mov	r4,r2
10003678:	000bcec0 	call	1000bcec <__floatsidf>
1000367c:	1011883a 	mov	r8,r2
10003680:	1813883a 	mov	r9,r3
10003684:	01951074 	movhi	r6,21569
10003688:	3185d104 	addi	r6,r6,5956
1000368c:	01d00274 	movhi	r7,16393
10003690:	39c87ec4 	addi	r7,r7,8699
10003694:	4009883a 	mov	r4,r8
10003698:	480b883a 	mov	r5,r9
1000369c:	000ab040 	call	1000ab04 <__muldf3>
100036a0:	1009883a 	mov	r4,r2
100036a4:	180b883a 	mov	r5,r3
100036a8:	2005883a 	mov	r2,r4
100036ac:	2807883a 	mov	r3,r5
100036b0:	000d883a 	mov	r6,zero
100036b4:	01d019f4 	movhi	r7,16487
100036b8:	39e00004 	addi	r7,r7,-32768
100036bc:	1009883a 	mov	r4,r2
100036c0:	180b883a 	mov	r5,r3
100036c4:	0009fd00 	call	10009fd0 <__divdf3>
100036c8:	1009883a 	mov	r4,r2
100036cc:	180b883a 	mov	r5,r3
100036d0:	e13ff615 	stw	r4,-40(fp)
100036d4:	e17ff715 	stw	r5,-36(fp)
            // cannonBall.fired_v_x = intensity*cos(convertedAngle);
            // cannonBall.fired_v_y = intensity*sin(convertedAngle);
            calX = intensity*cos(convertedAngle);
100036d8:	e13ff217 	ldw	r4,-56(fp)
100036dc:	000bcec0 	call	1000bcec <__floatsidf>
100036e0:	1021883a 	mov	r16,r2
100036e4:	1823883a 	mov	r17,r3
100036e8:	e13ff617 	ldw	r4,-40(fp)
100036ec:	e17ff717 	ldw	r5,-36(fp)
100036f0:	00073400 	call	10007340 <cos>
100036f4:	1009883a 	mov	r4,r2
100036f8:	180b883a 	mov	r5,r3
100036fc:	200d883a 	mov	r6,r4
10003700:	280f883a 	mov	r7,r5
10003704:	8009883a 	mov	r4,r16
10003708:	880b883a 	mov	r5,r17
1000370c:	000ab040 	call	1000ab04 <__muldf3>
10003710:	1009883a 	mov	r4,r2
10003714:	180b883a 	mov	r5,r3
10003718:	2005883a 	mov	r2,r4
1000371c:	2807883a 	mov	r3,r5
10003720:	1009883a 	mov	r4,r2
10003724:	180b883a 	mov	r5,r3
10003728:	000bc6c0 	call	1000bc6c <__fixdfsi>
1000372c:	e0bff415 	stw	r2,-48(fp)
            calY = intensity*sin(convertedAngle);
10003730:	e13ff217 	ldw	r4,-56(fp)
10003734:	000bcec0 	call	1000bcec <__floatsidf>
10003738:	1021883a 	mov	r16,r2
1000373c:	1823883a 	mov	r17,r3
10003740:	e13ff617 	ldw	r4,-40(fp)
10003744:	e17ff717 	ldw	r5,-36(fp)
10003748:	000742c0 	call	1000742c <sin>
1000374c:	1009883a 	mov	r4,r2
10003750:	180b883a 	mov	r5,r3
10003754:	200d883a 	mov	r6,r4
10003758:	280f883a 	mov	r7,r5
1000375c:	8009883a 	mov	r4,r16
10003760:	880b883a 	mov	r5,r17
10003764:	000ab040 	call	1000ab04 <__muldf3>
10003768:	1009883a 	mov	r4,r2
1000376c:	180b883a 	mov	r5,r3
10003770:	2005883a 	mov	r2,r4
10003774:	2807883a 	mov	r3,r5
10003778:	1009883a 	mov	r4,r2
1000377c:	180b883a 	mov	r5,r3
10003780:	000bc6c0 	call	1000bc6c <__fixdfsi>
10003784:	e0bff515 	stw	r2,-44(fp)
            break;
10003788:	00012c06 	br	10003c3c <fillBufferAngle+0x800>
        case 2: // uphill left
            convertedAngle = (cannonBall.angle - 30)*PI/180;
1000378c:	00840674 	movhi	r2,4121
10003790:	1090e204 	addi	r2,r2,17288
10003794:	10800c17 	ldw	r2,48(r2)
10003798:	10bff884 	addi	r2,r2,-30
1000379c:	1009883a 	mov	r4,r2
100037a0:	000bcec0 	call	1000bcec <__floatsidf>
100037a4:	1011883a 	mov	r8,r2
100037a8:	1813883a 	mov	r9,r3
100037ac:	01951074 	movhi	r6,21569
100037b0:	3185d104 	addi	r6,r6,5956
100037b4:	01d00274 	movhi	r7,16393
100037b8:	39c87ec4 	addi	r7,r7,8699
100037bc:	4009883a 	mov	r4,r8
100037c0:	480b883a 	mov	r5,r9
100037c4:	000ab040 	call	1000ab04 <__muldf3>
100037c8:	1009883a 	mov	r4,r2
100037cc:	180b883a 	mov	r5,r3
100037d0:	2005883a 	mov	r2,r4
100037d4:	2807883a 	mov	r3,r5
100037d8:	000d883a 	mov	r6,zero
100037dc:	01d019f4 	movhi	r7,16487
100037e0:	39e00004 	addi	r7,r7,-32768
100037e4:	1009883a 	mov	r4,r2
100037e8:	180b883a 	mov	r5,r3
100037ec:	0009fd00 	call	10009fd0 <__divdf3>
100037f0:	1009883a 	mov	r4,r2
100037f4:	180b883a 	mov	r5,r3
100037f8:	e13ff615 	stw	r4,-40(fp)
100037fc:	e17ff715 	stw	r5,-36(fp)
            // cannonBall.fired_v_x = -intensity*cos(convertedAngle);
            // cannonBall.fired_v_y = intensity*sin(convertedAngle);
            calX = -intensity*cos(convertedAngle);
10003800:	e0bff217 	ldw	r2,-56(fp)
10003804:	0085c83a 	sub	r2,zero,r2
10003808:	1009883a 	mov	r4,r2
1000380c:	000bcec0 	call	1000bcec <__floatsidf>
10003810:	1021883a 	mov	r16,r2
10003814:	1823883a 	mov	r17,r3
10003818:	e13ff617 	ldw	r4,-40(fp)
1000381c:	e17ff717 	ldw	r5,-36(fp)
10003820:	00073400 	call	10007340 <cos>
10003824:	1009883a 	mov	r4,r2
10003828:	180b883a 	mov	r5,r3
1000382c:	200d883a 	mov	r6,r4
10003830:	280f883a 	mov	r7,r5
10003834:	8009883a 	mov	r4,r16
10003838:	880b883a 	mov	r5,r17
1000383c:	000ab040 	call	1000ab04 <__muldf3>
10003840:	1009883a 	mov	r4,r2
10003844:	180b883a 	mov	r5,r3
10003848:	2005883a 	mov	r2,r4
1000384c:	2807883a 	mov	r3,r5
10003850:	1009883a 	mov	r4,r2
10003854:	180b883a 	mov	r5,r3
10003858:	000bc6c0 	call	1000bc6c <__fixdfsi>
1000385c:	e0bff415 	stw	r2,-48(fp)
            calY = intensity*sin(convertedAngle);
10003860:	e13ff217 	ldw	r4,-56(fp)
10003864:	000bcec0 	call	1000bcec <__floatsidf>
10003868:	1021883a 	mov	r16,r2
1000386c:	1823883a 	mov	r17,r3
10003870:	e13ff617 	ldw	r4,-40(fp)
10003874:	e17ff717 	ldw	r5,-36(fp)
10003878:	000742c0 	call	1000742c <sin>
1000387c:	1009883a 	mov	r4,r2
10003880:	180b883a 	mov	r5,r3
10003884:	200d883a 	mov	r6,r4
10003888:	280f883a 	mov	r7,r5
1000388c:	8009883a 	mov	r4,r16
10003890:	880b883a 	mov	r5,r17
10003894:	000ab040 	call	1000ab04 <__muldf3>
10003898:	1009883a 	mov	r4,r2
1000389c:	180b883a 	mov	r5,r3
100038a0:	2005883a 	mov	r2,r4
100038a4:	2807883a 	mov	r3,r5
100038a8:	1009883a 	mov	r4,r2
100038ac:	180b883a 	mov	r5,r3
100038b0:	000bc6c0 	call	1000bc6c <__fixdfsi>
100038b4:	e0bff515 	stw	r2,-44(fp)
            break;
100038b8:	0000e006 	br	10003c3c <fillBufferAngle+0x800>
        case 3: // uphill right
            convertedAngle = (cannonBall.angle + 30)*PI/180;
100038bc:	00840674 	movhi	r2,4121
100038c0:	1090e204 	addi	r2,r2,17288
100038c4:	10800c17 	ldw	r2,48(r2)
100038c8:	10800784 	addi	r2,r2,30
100038cc:	1009883a 	mov	r4,r2
100038d0:	000bcec0 	call	1000bcec <__floatsidf>
100038d4:	1011883a 	mov	r8,r2
100038d8:	1813883a 	mov	r9,r3
100038dc:	01951074 	movhi	r6,21569
100038e0:	3185d104 	addi	r6,r6,5956
100038e4:	01d00274 	movhi	r7,16393
100038e8:	39c87ec4 	addi	r7,r7,8699
100038ec:	4009883a 	mov	r4,r8
100038f0:	480b883a 	mov	r5,r9
100038f4:	000ab040 	call	1000ab04 <__muldf3>
100038f8:	1009883a 	mov	r4,r2
100038fc:	180b883a 	mov	r5,r3
10003900:	2005883a 	mov	r2,r4
10003904:	2807883a 	mov	r3,r5
10003908:	000d883a 	mov	r6,zero
1000390c:	01d019f4 	movhi	r7,16487
10003910:	39e00004 	addi	r7,r7,-32768
10003914:	1009883a 	mov	r4,r2
10003918:	180b883a 	mov	r5,r3
1000391c:	0009fd00 	call	10009fd0 <__divdf3>
10003920:	1009883a 	mov	r4,r2
10003924:	180b883a 	mov	r5,r3
10003928:	e13ff615 	stw	r4,-40(fp)
1000392c:	e17ff715 	stw	r5,-36(fp)
            // cannonBall.fired_v_x = intensity*cos(convertedAngle);
            // cannonBall.fired_v_y = intensity*sin(convertedAngle);
            calX = intensity*cos(convertedAngle);
10003930:	e13ff217 	ldw	r4,-56(fp)
10003934:	000bcec0 	call	1000bcec <__floatsidf>
10003938:	1021883a 	mov	r16,r2
1000393c:	1823883a 	mov	r17,r3
10003940:	e13ff617 	ldw	r4,-40(fp)
10003944:	e17ff717 	ldw	r5,-36(fp)
10003948:	00073400 	call	10007340 <cos>
1000394c:	1009883a 	mov	r4,r2
10003950:	180b883a 	mov	r5,r3
10003954:	200d883a 	mov	r6,r4
10003958:	280f883a 	mov	r7,r5
1000395c:	8009883a 	mov	r4,r16
10003960:	880b883a 	mov	r5,r17
10003964:	000ab040 	call	1000ab04 <__muldf3>
10003968:	1009883a 	mov	r4,r2
1000396c:	180b883a 	mov	r5,r3
10003970:	2005883a 	mov	r2,r4
10003974:	2807883a 	mov	r3,r5
10003978:	1009883a 	mov	r4,r2
1000397c:	180b883a 	mov	r5,r3
10003980:	000bc6c0 	call	1000bc6c <__fixdfsi>
10003984:	e0bff415 	stw	r2,-48(fp)
            calY = intensity*sin(convertedAngle);
10003988:	e13ff217 	ldw	r4,-56(fp)
1000398c:	000bcec0 	call	1000bcec <__floatsidf>
10003990:	1021883a 	mov	r16,r2
10003994:	1823883a 	mov	r17,r3
10003998:	e13ff617 	ldw	r4,-40(fp)
1000399c:	e17ff717 	ldw	r5,-36(fp)
100039a0:	000742c0 	call	1000742c <sin>
100039a4:	1009883a 	mov	r4,r2
100039a8:	180b883a 	mov	r5,r3
100039ac:	200d883a 	mov	r6,r4
100039b0:	280f883a 	mov	r7,r5
100039b4:	8009883a 	mov	r4,r16
100039b8:	880b883a 	mov	r5,r17
100039bc:	000ab040 	call	1000ab04 <__muldf3>
100039c0:	1009883a 	mov	r4,r2
100039c4:	180b883a 	mov	r5,r3
100039c8:	2005883a 	mov	r2,r4
100039cc:	2807883a 	mov	r3,r5
100039d0:	1009883a 	mov	r4,r2
100039d4:	180b883a 	mov	r5,r3
100039d8:	000bc6c0 	call	1000bc6c <__fixdfsi>
100039dc:	e0bff515 	stw	r2,-44(fp)
            break;
100039e0:	00009606 	br	10003c3c <fillBufferAngle+0x800>
        case 4: // downhill left
            convertedAngle = (cannonBall.angle + 30)*PI/180;
100039e4:	00840674 	movhi	r2,4121
100039e8:	1090e204 	addi	r2,r2,17288
100039ec:	10800c17 	ldw	r2,48(r2)
100039f0:	10800784 	addi	r2,r2,30
100039f4:	1009883a 	mov	r4,r2
100039f8:	000bcec0 	call	1000bcec <__floatsidf>
100039fc:	1011883a 	mov	r8,r2
10003a00:	1813883a 	mov	r9,r3
10003a04:	01951074 	movhi	r6,21569
10003a08:	3185d104 	addi	r6,r6,5956
10003a0c:	01d00274 	movhi	r7,16393
10003a10:	39c87ec4 	addi	r7,r7,8699
10003a14:	4009883a 	mov	r4,r8
10003a18:	480b883a 	mov	r5,r9
10003a1c:	000ab040 	call	1000ab04 <__muldf3>
10003a20:	1009883a 	mov	r4,r2
10003a24:	180b883a 	mov	r5,r3
10003a28:	2005883a 	mov	r2,r4
10003a2c:	2807883a 	mov	r3,r5
10003a30:	000d883a 	mov	r6,zero
10003a34:	01d019f4 	movhi	r7,16487
10003a38:	39e00004 	addi	r7,r7,-32768
10003a3c:	1009883a 	mov	r4,r2
10003a40:	180b883a 	mov	r5,r3
10003a44:	0009fd00 	call	10009fd0 <__divdf3>
10003a48:	1009883a 	mov	r4,r2
10003a4c:	180b883a 	mov	r5,r3
10003a50:	e13ff615 	stw	r4,-40(fp)
10003a54:	e17ff715 	stw	r5,-36(fp)
            // cannonBall.fired_v_x = -intensity*cos(convertedAngle);
            // cannonBall.fired_v_y = intensity*sin(convertedAngle);
            calX = -intensity*cos(convertedAngle);
10003a58:	e0bff217 	ldw	r2,-56(fp)
10003a5c:	0085c83a 	sub	r2,zero,r2
10003a60:	1009883a 	mov	r4,r2
10003a64:	000bcec0 	call	1000bcec <__floatsidf>
10003a68:	1021883a 	mov	r16,r2
10003a6c:	1823883a 	mov	r17,r3
10003a70:	e13ff617 	ldw	r4,-40(fp)
10003a74:	e17ff717 	ldw	r5,-36(fp)
10003a78:	00073400 	call	10007340 <cos>
10003a7c:	1009883a 	mov	r4,r2
10003a80:	180b883a 	mov	r5,r3
10003a84:	200d883a 	mov	r6,r4
10003a88:	280f883a 	mov	r7,r5
10003a8c:	8009883a 	mov	r4,r16
10003a90:	880b883a 	mov	r5,r17
10003a94:	000ab040 	call	1000ab04 <__muldf3>
10003a98:	1009883a 	mov	r4,r2
10003a9c:	180b883a 	mov	r5,r3
10003aa0:	2005883a 	mov	r2,r4
10003aa4:	2807883a 	mov	r3,r5
10003aa8:	1009883a 	mov	r4,r2
10003aac:	180b883a 	mov	r5,r3
10003ab0:	000bc6c0 	call	1000bc6c <__fixdfsi>
10003ab4:	e0bff415 	stw	r2,-48(fp)
            calY = intensity*sin(convertedAngle);
10003ab8:	e13ff217 	ldw	r4,-56(fp)
10003abc:	000bcec0 	call	1000bcec <__floatsidf>
10003ac0:	1021883a 	mov	r16,r2
10003ac4:	1823883a 	mov	r17,r3
10003ac8:	e13ff617 	ldw	r4,-40(fp)
10003acc:	e17ff717 	ldw	r5,-36(fp)
10003ad0:	000742c0 	call	1000742c <sin>
10003ad4:	1009883a 	mov	r4,r2
10003ad8:	180b883a 	mov	r5,r3
10003adc:	200d883a 	mov	r6,r4
10003ae0:	280f883a 	mov	r7,r5
10003ae4:	8009883a 	mov	r4,r16
10003ae8:	880b883a 	mov	r5,r17
10003aec:	000ab040 	call	1000ab04 <__muldf3>
10003af0:	1009883a 	mov	r4,r2
10003af4:	180b883a 	mov	r5,r3
10003af8:	2005883a 	mov	r2,r4
10003afc:	2807883a 	mov	r3,r5
10003b00:	1009883a 	mov	r4,r2
10003b04:	180b883a 	mov	r5,r3
10003b08:	000bc6c0 	call	1000bc6c <__fixdfsi>
10003b0c:	e0bff515 	stw	r2,-44(fp)
            break;
10003b10:	00004a06 	br	10003c3c <fillBufferAngle+0x800>
        case 5: // downhill right
            convertedAngle = (cannonBall.angle - 30)*PI/180;
10003b14:	00840674 	movhi	r2,4121
10003b18:	1090e204 	addi	r2,r2,17288
10003b1c:	10800c17 	ldw	r2,48(r2)
10003b20:	10bff884 	addi	r2,r2,-30
10003b24:	1009883a 	mov	r4,r2
10003b28:	000bcec0 	call	1000bcec <__floatsidf>
10003b2c:	1011883a 	mov	r8,r2
10003b30:	1813883a 	mov	r9,r3
10003b34:	01951074 	movhi	r6,21569
10003b38:	3185d104 	addi	r6,r6,5956
10003b3c:	01d00274 	movhi	r7,16393
10003b40:	39c87ec4 	addi	r7,r7,8699
10003b44:	4009883a 	mov	r4,r8
10003b48:	480b883a 	mov	r5,r9
10003b4c:	000ab040 	call	1000ab04 <__muldf3>
10003b50:	1009883a 	mov	r4,r2
10003b54:	180b883a 	mov	r5,r3
10003b58:	2005883a 	mov	r2,r4
10003b5c:	2807883a 	mov	r3,r5
10003b60:	000d883a 	mov	r6,zero
10003b64:	01d019f4 	movhi	r7,16487
10003b68:	39e00004 	addi	r7,r7,-32768
10003b6c:	1009883a 	mov	r4,r2
10003b70:	180b883a 	mov	r5,r3
10003b74:	0009fd00 	call	10009fd0 <__divdf3>
10003b78:	1009883a 	mov	r4,r2
10003b7c:	180b883a 	mov	r5,r3
10003b80:	e13ff615 	stw	r4,-40(fp)
10003b84:	e17ff715 	stw	r5,-36(fp)
            // cannonBall.fired_v_x = intensity*cos(convertedAngle);
            // cannonBall.fired_v_y = intensity*sin(convertedAngle);
            calX = intensity*cos(convertedAngle);
10003b88:	e13ff217 	ldw	r4,-56(fp)
10003b8c:	000bcec0 	call	1000bcec <__floatsidf>
10003b90:	1021883a 	mov	r16,r2
10003b94:	1823883a 	mov	r17,r3
10003b98:	e13ff617 	ldw	r4,-40(fp)
10003b9c:	e17ff717 	ldw	r5,-36(fp)
10003ba0:	00073400 	call	10007340 <cos>
10003ba4:	1009883a 	mov	r4,r2
10003ba8:	180b883a 	mov	r5,r3
10003bac:	200d883a 	mov	r6,r4
10003bb0:	280f883a 	mov	r7,r5
10003bb4:	8009883a 	mov	r4,r16
10003bb8:	880b883a 	mov	r5,r17
10003bbc:	000ab040 	call	1000ab04 <__muldf3>
10003bc0:	1009883a 	mov	r4,r2
10003bc4:	180b883a 	mov	r5,r3
10003bc8:	2005883a 	mov	r2,r4
10003bcc:	2807883a 	mov	r3,r5
10003bd0:	1009883a 	mov	r4,r2
10003bd4:	180b883a 	mov	r5,r3
10003bd8:	000bc6c0 	call	1000bc6c <__fixdfsi>
10003bdc:	e0bff415 	stw	r2,-48(fp)
            calY = intensity*sin(convertedAngle);
10003be0:	e13ff217 	ldw	r4,-56(fp)
10003be4:	000bcec0 	call	1000bcec <__floatsidf>
10003be8:	1021883a 	mov	r16,r2
10003bec:	1823883a 	mov	r17,r3
10003bf0:	e13ff617 	ldw	r4,-40(fp)
10003bf4:	e17ff717 	ldw	r5,-36(fp)
10003bf8:	000742c0 	call	1000742c <sin>
10003bfc:	1009883a 	mov	r4,r2
10003c00:	180b883a 	mov	r5,r3
10003c04:	200d883a 	mov	r6,r4
10003c08:	280f883a 	mov	r7,r5
10003c0c:	8009883a 	mov	r4,r16
10003c10:	880b883a 	mov	r5,r17
10003c14:	000ab040 	call	1000ab04 <__muldf3>
10003c18:	1009883a 	mov	r4,r2
10003c1c:	180b883a 	mov	r5,r3
10003c20:	2005883a 	mov	r2,r4
10003c24:	2807883a 	mov	r3,r5
10003c28:	1009883a 	mov	r4,r2
10003c2c:	180b883a 	mov	r5,r3
10003c30:	000bc6c0 	call	1000bc6c <__fixdfsi>
10003c34:	e0bff515 	stw	r2,-44(fp)
            break;
10003c38:	0001883a 	nop
    }
        // pay attention!!! The coordinate here is the center coordinate of the player
    if(player == 0) {
10003c3c:	e0bffd17 	ldw	r2,-12(fp)
10003c40:	1000151e 	bne	r2,zero,10003c98 <fillBufferAngle+0x85c>
        PackArray(&IngameBuffer, 23, redPlayer.x_pos + calX - moveX, redPlayer.y_pos + calY, 5);
10003c44:	00840674 	movhi	r2,4121
10003c48:	1090d304 	addi	r2,r2,17228
10003c4c:	10c00017 	ldw	r3,0(r2)
10003c50:	e0bff417 	ldw	r2,-48(fp)
10003c54:	1887883a 	add	r3,r3,r2
10003c58:	d0a7f217 	ldw	r2,-24632(gp)
10003c5c:	1889c83a 	sub	r4,r3,r2
10003c60:	00840674 	movhi	r2,4121
10003c64:	1090d304 	addi	r2,r2,17228
10003c68:	10c00117 	ldw	r3,4(r2)
10003c6c:	e0bff517 	ldw	r2,-44(fp)
10003c70:	1887883a 	add	r3,r3,r2
10003c74:	00800144 	movi	r2,5
10003c78:	d8800015 	stw	r2,0(sp)
10003c7c:	180f883a 	mov	r7,r3
10003c80:	200d883a 	mov	r6,r4
10003c84:	014005c4 	movi	r5,23
10003c88:	01040674 	movhi	r4,4121
10003c8c:	2110f004 	addi	r4,r4,17344
10003c90:	00019080 	call	10001908 <PackArray>
    }
    else {
        PackArray(&IngameBuffer, 23, bluePlayer.x_pos + calX - moveX, bluePlayer.y_pos + calY, 5);
    }
    return;
10003c94:	00001506 	br	10003cec <fillBufferAngle+0x8b0>
        // pay attention!!! The coordinate here is the center coordinate of the player
    if(player == 0) {
        PackArray(&IngameBuffer, 23, redPlayer.x_pos + calX - moveX, redPlayer.y_pos + calY, 5);
    }
    else {
        PackArray(&IngameBuffer, 23, bluePlayer.x_pos + calX - moveX, bluePlayer.y_pos + calY, 5);
10003c98:	00840674 	movhi	r2,4121
10003c9c:	1090c404 	addi	r2,r2,17168
10003ca0:	10c00017 	ldw	r3,0(r2)
10003ca4:	e0bff417 	ldw	r2,-48(fp)
10003ca8:	1887883a 	add	r3,r3,r2
10003cac:	d0a7f217 	ldw	r2,-24632(gp)
10003cb0:	1889c83a 	sub	r4,r3,r2
10003cb4:	00840674 	movhi	r2,4121
10003cb8:	1090c404 	addi	r2,r2,17168
10003cbc:	10c00117 	ldw	r3,4(r2)
10003cc0:	e0bff517 	ldw	r2,-44(fp)
10003cc4:	1887883a 	add	r3,r3,r2
10003cc8:	00800144 	movi	r2,5
10003ccc:	d8800015 	stw	r2,0(sp)
10003cd0:	180f883a 	mov	r7,r3
10003cd4:	200d883a 	mov	r6,r4
10003cd8:	014005c4 	movi	r5,23
10003cdc:	01040674 	movhi	r4,4121
10003ce0:	2110f004 	addi	r4,r4,17344
10003ce4:	00019080 	call	10001908 <PackArray>
    }
    return;
10003ce8:	0001883a 	nop
}
10003cec:	e6fffe04 	addi	sp,fp,-8
10003cf0:	dfc00317 	ldw	ra,12(sp)
10003cf4:	df000217 	ldw	fp,8(sp)
10003cf8:	dc400117 	ldw	r17,4(sp)
10003cfc:	dc000017 	ldw	r16,0(sp)
10003d00:	dec00404 	addi	sp,sp,16
10003d04:	f800283a 	ret

10003d08 <fillBufferCharging>:

void fillBufferCharging(){ // 20 objects   --- in real only 10 used
10003d08:	defffa04 	addi	sp,sp,-24
10003d0c:	dfc00515 	stw	ra,20(sp)
10003d10:	df000415 	stw	fp,16(sp)
10003d14:	df000404 	addi	fp,sp,16
    int count;
    count = cannonBall.chargingTimeCount/2; // how many number out of 10 can it fill;
10003d18:	00840674 	movhi	r2,4121
10003d1c:	1090e204 	addi	r2,r2,17288
10003d20:	10800817 	ldw	r2,32(r2)
10003d24:	1006d7fa 	srli	r3,r2,31
10003d28:	1885883a 	add	r2,r3,r2
10003d2c:	1005d07a 	srai	r2,r2,1
10003d30:	e0bfff15 	stw	r2,-4(fp)
    for( int i = 0; i < count; i++){
10003d34:	e03ffd15 	stw	zero,-12(fp)
10003d38:	00000e06 	br	10003d74 <fillBufferCharging+0x6c>
        PackArray(&IngameBuffer, 19, 25 + 195 + i*25, 70, 0); // start with the filled one
10003d3c:	01400644 	movi	r5,25
10003d40:	e13ffd17 	ldw	r4,-12(fp)
10003d44:	00096fc0 	call	100096fc <__mulsi3>
10003d48:	10803704 	addi	r2,r2,220
10003d4c:	d8000015 	stw	zero,0(sp)
10003d50:	01c01184 	movi	r7,70
10003d54:	100d883a 	mov	r6,r2
10003d58:	014004c4 	movi	r5,19
10003d5c:	01040674 	movhi	r4,4121
10003d60:	2110f004 	addi	r4,r4,17344
10003d64:	00019080 	call	10001908 <PackArray>
}

void fillBufferCharging(){ // 20 objects   --- in real only 10 used
    int count;
    count = cannonBall.chargingTimeCount/2; // how many number out of 10 can it fill;
    for( int i = 0; i < count; i++){
10003d68:	e0bffd17 	ldw	r2,-12(fp)
10003d6c:	10800044 	addi	r2,r2,1
10003d70:	e0bffd15 	stw	r2,-12(fp)
10003d74:	e0fffd17 	ldw	r3,-12(fp)
10003d78:	e0bfff17 	ldw	r2,-4(fp)
10003d7c:	18bfef16 	blt	r3,r2,10003d3c <__alt_data_end+0xf8003d3c>
        PackArray(&IngameBuffer, 19, 25 + 195 + i*25, 70, 0); // start with the filled one
    }
    for( int j = count; j < 10; j++){
10003d80:	e0bfff17 	ldw	r2,-4(fp)
10003d84:	e0bffe15 	stw	r2,-8(fp)
10003d88:	00000e06 	br	10003dc4 <fillBufferCharging+0xbc>
        PackArray(&IngameBuffer, 20, 25 + 195 + j*25, 70, 0); // start with the filled one
10003d8c:	01400644 	movi	r5,25
10003d90:	e13ffe17 	ldw	r4,-8(fp)
10003d94:	00096fc0 	call	100096fc <__mulsi3>
10003d98:	10803704 	addi	r2,r2,220
10003d9c:	d8000015 	stw	zero,0(sp)
10003da0:	01c01184 	movi	r7,70
10003da4:	100d883a 	mov	r6,r2
10003da8:	01400504 	movi	r5,20
10003dac:	01040674 	movhi	r4,4121
10003db0:	2110f004 	addi	r4,r4,17344
10003db4:	00019080 	call	10001908 <PackArray>
    int count;
    count = cannonBall.chargingTimeCount/2; // how many number out of 10 can it fill;
    for( int i = 0; i < count; i++){
        PackArray(&IngameBuffer, 19, 25 + 195 + i*25, 70, 0); // start with the filled one
    }
    for( int j = count; j < 10; j++){
10003db8:	e0bffe17 	ldw	r2,-8(fp)
10003dbc:	10800044 	addi	r2,r2,1
10003dc0:	e0bffe15 	stw	r2,-8(fp)
10003dc4:	e0bffe17 	ldw	r2,-8(fp)
10003dc8:	10800290 	cmplti	r2,r2,10
10003dcc:	103fef1e 	bne	r2,zero,10003d8c <__alt_data_end+0xf8003d8c>
        PackArray(&IngameBuffer, 20, 25 + 195 + j*25, 70, 0); // start with the filled one
    }
    
    return;
10003dd0:	0001883a 	nop
}
10003dd4:	e037883a 	mov	sp,fp
10003dd8:	dfc00117 	ldw	ra,4(sp)
10003ddc:	df000017 	ldw	fp,0(sp)
10003de0:	dec00204 	addi	sp,sp,8
10003de4:	f800283a 	ret

10003de8 <fillBufferStrength>:

void fillBufferStrength(int player){ // 10 objects
10003de8:	defff804 	addi	sp,sp,-32
10003dec:	dfc00715 	stw	ra,28(sp)
10003df0:	df000615 	stw	fp,24(sp)
10003df4:	df000604 	addi	fp,sp,24
10003df8:	e13fff15 	stw	r4,-4(fp)
    int offset, count;
    offset = 0;
10003dfc:	e03ffb15 	stw	zero,-20(fp)
    count = playerstrength.strength/20;
10003e00:	d0a7f117 	ldw	r2,-24636(gp)
10003e04:	01400504 	movi	r5,20
10003e08:	1009883a 	mov	r4,r2
10003e0c:	00095480 	call	10009548 <__divsi3>
10003e10:	e0bffe15 	stw	r2,-8(fp)
    if(player == 1) offset = 568; 
10003e14:	e0bfff17 	ldw	r2,-4(fp)
10003e18:	10800058 	cmpnei	r2,r2,1
10003e1c:	1000021e 	bne	r2,zero,10003e28 <fillBufferStrength+0x40>
10003e20:	00808e04 	movi	r2,568
10003e24:	e0bffb15 	stw	r2,-20(fp)
    for(int i = 0; i < count; i++){
10003e28:	e03ffc15 	stw	zero,-16(fp)
10003e2c:	00000f06 	br	10003e6c <fillBufferStrength+0x84>
        PackArray(&IngameBuffer, 21, 32 + 20 + offset, 56 + 16*i, 0); // start with the filled one
10003e30:	e0bffb17 	ldw	r2,-20(fp)
10003e34:	10c00d04 	addi	r3,r2,52
10003e38:	e0bffc17 	ldw	r2,-16(fp)
10003e3c:	1004913a 	slli	r2,r2,4
10003e40:	10800e04 	addi	r2,r2,56
10003e44:	d8000015 	stw	zero,0(sp)
10003e48:	100f883a 	mov	r7,r2
10003e4c:	180d883a 	mov	r6,r3
10003e50:	01400544 	movi	r5,21
10003e54:	01040674 	movhi	r4,4121
10003e58:	2110f004 	addi	r4,r4,17344
10003e5c:	00019080 	call	10001908 <PackArray>
void fillBufferStrength(int player){ // 10 objects
    int offset, count;
    offset = 0;
    count = playerstrength.strength/20;
    if(player == 1) offset = 568; 
    for(int i = 0; i < count; i++){
10003e60:	e0bffc17 	ldw	r2,-16(fp)
10003e64:	10800044 	addi	r2,r2,1
10003e68:	e0bffc15 	stw	r2,-16(fp)
10003e6c:	e0fffc17 	ldw	r3,-16(fp)
10003e70:	e0bffe17 	ldw	r2,-8(fp)
10003e74:	18bfee16 	blt	r3,r2,10003e30 <__alt_data_end+0xf8003e30>
        PackArray(&IngameBuffer, 21, 32 + 20 + offset, 56 + 16*i, 0); // start with the filled one
    }
    for(int j = count; j < 10; j++){
10003e78:	e0bffe17 	ldw	r2,-8(fp)
10003e7c:	e0bffd15 	stw	r2,-12(fp)
10003e80:	00000f06 	br	10003ec0 <fillBufferStrength+0xd8>
        PackArray(&IngameBuffer, 22, 32 + 20 + offset, 56 + 16*j, 0); 
10003e84:	e0bffb17 	ldw	r2,-20(fp)
10003e88:	10c00d04 	addi	r3,r2,52
10003e8c:	e0bffd17 	ldw	r2,-12(fp)
10003e90:	1004913a 	slli	r2,r2,4
10003e94:	10800e04 	addi	r2,r2,56
10003e98:	d8000015 	stw	zero,0(sp)
10003e9c:	100f883a 	mov	r7,r2
10003ea0:	180d883a 	mov	r6,r3
10003ea4:	01400584 	movi	r5,22
10003ea8:	01040674 	movhi	r4,4121
10003eac:	2110f004 	addi	r4,r4,17344
10003eb0:	00019080 	call	10001908 <PackArray>
    count = playerstrength.strength/20;
    if(player == 1) offset = 568; 
    for(int i = 0; i < count; i++){
        PackArray(&IngameBuffer, 21, 32 + 20 + offset, 56 + 16*i, 0); // start with the filled one
    }
    for(int j = count; j < 10; j++){
10003eb4:	e0bffd17 	ldw	r2,-12(fp)
10003eb8:	10800044 	addi	r2,r2,1
10003ebc:	e0bffd15 	stw	r2,-12(fp)
10003ec0:	e0bffd17 	ldw	r2,-12(fp)
10003ec4:	10800290 	cmplti	r2,r2,10
10003ec8:	103fee1e 	bne	r2,zero,10003e84 <__alt_data_end+0xf8003e84>
        PackArray(&IngameBuffer, 22, 32 + 20 + offset, 56 + 16*j, 0); 
    }
    

    // SetZeroArray(&IngameBuffer, 10); // need to skip this item;
    return;
10003ecc:	0001883a 	nop
}
10003ed0:	e037883a 	mov	sp,fp
10003ed4:	dfc00117 	ldw	ra,4(sp)
10003ed8:	df000017 	ldw	fp,0(sp)
10003edc:	dec00204 	addi	sp,sp,8
10003ee0:	f800283a 	ret

10003ee4 <fillBufferFlying>:

void fillBufferFlying(int player){
10003ee4:	defffc04 	addi	sp,sp,-16
10003ee8:	dfc00315 	stw	ra,12(sp)
10003eec:	df000215 	stw	fp,8(sp)
10003ef0:	df000204 	addi	fp,sp,8
10003ef4:	e13fff15 	stw	r4,-4(fp)
    if(player == 0){
10003ef8:	e0bfff17 	ldw	r2,-4(fp)
10003efc:	1000121e 	bne	r2,zero,10003f48 <fillBufferFlying+0x64>
        if(redPlayer.magic == 1) PackArray(&IngameBuffer, 27, 188, 458, 0); // start with the filled one   188
10003f00:	00840674 	movhi	r2,4121
10003f04:	1090d304 	addi	r2,r2,17228
10003f08:	10800e17 	ldw	r2,56(r2)
10003f0c:	10800058 	cmpnei	r2,r2,1
10003f10:	1000081e 	bne	r2,zero,10003f34 <fillBufferFlying+0x50>
10003f14:	d8000015 	stw	zero,0(sp)
10003f18:	01c07284 	movi	r7,458
10003f1c:	01802f04 	movi	r6,188
10003f20:	014006c4 	movi	r5,27
10003f24:	01040674 	movhi	r4,4121
10003f28:	2110f004 	addi	r4,r4,17344
10003f2c:	00019080 	call	10001908 <PackArray>
    } 
    else{
        if(bluePlayer.magic == 1) PackArray(&IngameBuffer, 27, 470, 461, 0);
        else SetZeroArray(&IngameBuffer, 1); // 1 reserved 
    }
    return;
10003f30:	00001706 	br	10003f90 <fillBufferFlying+0xac>
}

void fillBufferFlying(int player){
    if(player == 0){
        if(redPlayer.magic == 1) PackArray(&IngameBuffer, 27, 188, 458, 0); // start with the filled one   188
        else SetZeroArray(&IngameBuffer, 1); // 1 reserved
10003f34:	01400044 	movi	r5,1
10003f38:	01040674 	movhi	r4,4121
10003f3c:	2110f004 	addi	r4,r4,17344
10003f40:	0001a500 	call	10001a50 <SetZeroArray>
    } 
    else{
        if(bluePlayer.magic == 1) PackArray(&IngameBuffer, 27, 470, 461, 0);
        else SetZeroArray(&IngameBuffer, 1); // 1 reserved 
    }
    return;
10003f44:	00001206 	br	10003f90 <fillBufferFlying+0xac>
    if(player == 0){
        if(redPlayer.magic == 1) PackArray(&IngameBuffer, 27, 188, 458, 0); // start with the filled one   188
        else SetZeroArray(&IngameBuffer, 1); // 1 reserved
    } 
    else{
        if(bluePlayer.magic == 1) PackArray(&IngameBuffer, 27, 470, 461, 0);
10003f48:	00840674 	movhi	r2,4121
10003f4c:	1090c404 	addi	r2,r2,17168
10003f50:	10800e17 	ldw	r2,56(r2)
10003f54:	10800058 	cmpnei	r2,r2,1
10003f58:	1000081e 	bne	r2,zero,10003f7c <fillBufferFlying+0x98>
10003f5c:	d8000015 	stw	zero,0(sp)
10003f60:	01c07344 	movi	r7,461
10003f64:	01807584 	movi	r6,470
10003f68:	014006c4 	movi	r5,27
10003f6c:	01040674 	movhi	r4,4121
10003f70:	2110f004 	addi	r4,r4,17344
10003f74:	00019080 	call	10001908 <PackArray>
        else SetZeroArray(&IngameBuffer, 1); // 1 reserved 
    }
    return;
10003f78:	00000506 	br	10003f90 <fillBufferFlying+0xac>
        if(redPlayer.magic == 1) PackArray(&IngameBuffer, 27, 188, 458, 0); // start with the filled one   188
        else SetZeroArray(&IngameBuffer, 1); // 1 reserved
    } 
    else{
        if(bluePlayer.magic == 1) PackArray(&IngameBuffer, 27, 470, 461, 0);
        else SetZeroArray(&IngameBuffer, 1); // 1 reserved 
10003f7c:	01400044 	movi	r5,1
10003f80:	01040674 	movhi	r4,4121
10003f84:	2110f004 	addi	r4,r4,17344
10003f88:	0001a500 	call	10001a50 <SetZeroArray>
    }
    return;
10003f8c:	0001883a 	nop
}
10003f90:	e037883a 	mov	sp,fp
10003f94:	dfc00117 	ldw	ra,4(sp)
10003f98:	df000017 	ldw	fp,0(sp)
10003f9c:	dec00204 	addi	sp,sp,8
10003fa0:	f800283a 	ret

10003fa4 <fillBufferWord>:

void fillBufferWord(){     // 3 objects
10003fa4:	defffe04 	addi	sp,sp,-8
10003fa8:	dfc00115 	stw	ra,4(sp)
10003fac:	df000015 	stw	fp,0(sp)
10003fb0:	d839883a 	mov	fp,sp
    SetZeroArray(&IngameBuffer, 3); // need to skip this item;
10003fb4:	014000c4 	movi	r5,3
10003fb8:	01040674 	movhi	r4,4121
10003fbc:	2110f004 	addi	r4,r4,17344
10003fc0:	0001a500 	call	10001a50 <SetZeroArray>
    return;
10003fc4:	0001883a 	nop
}
10003fc8:	e037883a 	mov	sp,fp
10003fcc:	dfc00117 	ldw	ra,4(sp)
10003fd0:	df000017 	ldw	fp,0(sp)
10003fd4:	dec00204 	addi	sp,sp,8
10003fd8:	f800283a 	ret

10003fdc <fillBufferArrow>:

void fillBufferArrow(int player){    // 1 objects
10003fdc:	defffc04 	addi	sp,sp,-16
10003fe0:	dfc00315 	stw	ra,12(sp)
10003fe4:	df000215 	stw	fp,8(sp)
10003fe8:	df000204 	addi	fp,sp,8
10003fec:	e13fff15 	stw	r4,-4(fp)
    if(player == 1)  PackArray(&IngameBuffer, 16, bluePlayer.x_pos - moveX, bluePlayer.y_pos + 19, 4); 
10003ff0:	e0bfff17 	ldw	r2,-4(fp)
10003ff4:	10800058 	cmpnei	r2,r2,1
10003ff8:	1000121e 	bne	r2,zero,10004044 <fillBufferArrow+0x68>
10003ffc:	00840674 	movhi	r2,4121
10004000:	1090c404 	addi	r2,r2,17168
10004004:	10c00017 	ldw	r3,0(r2)
10004008:	d0a7f217 	ldw	r2,-24632(gp)
1000400c:	1887c83a 	sub	r3,r3,r2
10004010:	00840674 	movhi	r2,4121
10004014:	1090c404 	addi	r2,r2,17168
10004018:	10800117 	ldw	r2,4(r2)
1000401c:	110004c4 	addi	r4,r2,19
10004020:	00800104 	movi	r2,4
10004024:	d8800015 	stw	r2,0(sp)
10004028:	200f883a 	mov	r7,r4
1000402c:	180d883a 	mov	r6,r3
10004030:	01400404 	movi	r5,16
10004034:	01040674 	movhi	r4,4121
10004038:	2110f004 	addi	r4,r4,17344
1000403c:	00019080 	call	10001908 <PackArray>
    else PackArray(&IngameBuffer, 16, redPlayer.x_pos - moveX, redPlayer.y_pos + 19, 4); 
    return;
10004040:	00001206 	br	1000408c <fillBufferArrow+0xb0>
    return;
}

void fillBufferArrow(int player){    // 1 objects
    if(player == 1)  PackArray(&IngameBuffer, 16, bluePlayer.x_pos - moveX, bluePlayer.y_pos + 19, 4); 
    else PackArray(&IngameBuffer, 16, redPlayer.x_pos - moveX, redPlayer.y_pos + 19, 4); 
10004044:	00840674 	movhi	r2,4121
10004048:	1090d304 	addi	r2,r2,17228
1000404c:	10c00017 	ldw	r3,0(r2)
10004050:	d0a7f217 	ldw	r2,-24632(gp)
10004054:	1887c83a 	sub	r3,r3,r2
10004058:	00840674 	movhi	r2,4121
1000405c:	1090d304 	addi	r2,r2,17228
10004060:	10800117 	ldw	r2,4(r2)
10004064:	110004c4 	addi	r4,r2,19
10004068:	00800104 	movi	r2,4
1000406c:	d8800015 	stw	r2,0(sp)
10004070:	200f883a 	mov	r7,r4
10004074:	180d883a 	mov	r6,r3
10004078:	01400404 	movi	r5,16
1000407c:	01040674 	movhi	r4,4121
10004080:	2110f004 	addi	r4,r4,17344
10004084:	00019080 	call	10001908 <PackArray>
    return;
10004088:	0001883a 	nop
}
1000408c:	e037883a 	mov	sp,fp
10004090:	dfc00117 	ldw	ra,4(sp)
10004094:	df000017 	ldw	fp,0(sp)
10004098:	dec00204 	addi	sp,sp,8
1000409c:	f800283a 	ret

100040a0 <fillBufferCrater>:

void fillBufferCrater(int x, int y){   // fill as many as possible
100040a0:	defffc04 	addi	sp,sp,-16
100040a4:	dfc00315 	stw	ra,12(sp)
100040a8:	df000215 	stw	fp,8(sp)
100040ac:	df000204 	addi	fp,sp,8
100040b0:	e13ffe15 	stw	r4,-8(fp)
100040b4:	e17fff15 	stw	r5,-4(fp)
    PackArrayCrater(&IngameBuffer, 1, cannonBall.x_pos - moveX, cannonBall.y_pos);
100040b8:	00840674 	movhi	r2,4121
100040bc:	1090e204 	addi	r2,r2,17288
100040c0:	10c00117 	ldw	r3,4(r2)
100040c4:	d0a7f217 	ldw	r2,-24632(gp)
100040c8:	1887c83a 	sub	r3,r3,r2
100040cc:	00840674 	movhi	r2,4121
100040d0:	1090e204 	addi	r2,r2,17288
100040d4:	10800017 	ldw	r2,0(r2)
100040d8:	100f883a 	mov	r7,r2
100040dc:	180d883a 	mov	r6,r3
100040e0:	01400044 	movi	r5,1
100040e4:	01040674 	movhi	r4,4121
100040e8:	2110f004 	addi	r4,r4,17344
100040ec:	0001b300 	call	10001b30 <PackArrayCrater>
    return;
100040f0:	0001883a 	nop
}
100040f4:	e037883a 	mov	sp,fp
100040f8:	dfc00117 	ldw	ra,4(sp)
100040fc:	df000017 	ldw	fp,0(sp)
10004100:	dec00204 	addi	sp,sp,8
10004104:	f800283a 	ret

10004108 <updatedPlayerMovement>:




// player Movement Part
void updatedPlayerMovement(int keycode,  struct player* playerStruct){
10004108:	defff904 	addi	sp,sp,-28
1000410c:	dfc00615 	stw	ra,24(sp)
10004110:	df000515 	stw	fp,20(sp)
10004114:	dc400415 	stw	r17,16(sp)
10004118:	dc000315 	stw	r16,12(sp)
1000411c:	df000504 	addi	fp,sp,20
10004120:	e13ffc15 	stw	r4,-16(fp)
10004124:	e17ffd15 	stw	r5,-12(fp)
    if(playerStruct->pos_state == 1){ // the player is in the air, he cannot move but falling to the gournd
10004128:	e0bffd17 	ldw	r2,-12(fp)
1000412c:	10800517 	ldw	r2,20(r2)
10004130:	10800060 	cmpeqi	r2,r2,1
10004134:	1001be1e 	bne	r2,zero,10004830 <updatedPlayerMovement+0x728>
    }
    else{
        switch ((playerStruct->direction)/2) {  // update the position
10004138:	e0bffd17 	ldw	r2,-12(fp)
1000413c:	10800717 	ldw	r2,28(r2)
10004140:	1006d7fa 	srli	r3,r2,31
10004144:	1885883a 	add	r2,r3,r2
10004148:	1005d07a 	srai	r2,r2,1
1000414c:	10c00060 	cmpeqi	r3,r2,1
10004150:	1800b61e 	bne	r3,zero,1000442c <updatedPlayerMovement+0x324>
10004154:	10c000a0 	cmpeqi	r3,r2,2
10004158:	1801321e 	bne	r3,zero,10004624 <updatedPlayerMovement+0x51c>
1000415c:	1001b41e 	bne	r2,zero,10004830 <updatedPlayerMovement+0x728>
            case 0: // face left and face right
                if(keycode == KEY_LEFT) {
10004160:	e0bffc17 	ldw	r2,-16(fp)
10004164:	10801418 	cmpnei	r2,r2,80
10004168:	1000571e 	bne	r2,zero,100042c8 <updatedPlayerMovement+0x1c0>
                	if((playerStruct->x_pos -1)==10) return;
1000416c:	e0bffd17 	ldw	r2,-12(fp)
10004170:	10800017 	ldw	r2,0(r2)
10004174:	108002d8 	cmpnei	r2,r2,11
10004178:	1001be26 	beq	r2,zero,10004874 <updatedPlayerMovement+0x76c>
                    playerstrength.strength -= 1;
1000417c:	d0a7f117 	ldw	r2,-24636(gp)
10004180:	10bfffc4 	addi	r2,r2,-1
10004184:	d0a7f115 	stw	r2,-24636(gp)
                    playerStruct->x_pos -= 1;
10004188:	e0bffd17 	ldw	r2,-12(fp)
1000418c:	10800017 	ldw	r2,0(r2)
10004190:	10ffffc4 	addi	r3,r2,-1
10004194:	e0bffd17 	ldw	r2,-12(fp)
10004198:	10c00015 	stw	r3,0(r2)
                    playerStruct->direction = 0;
1000419c:	e0bffd17 	ldw	r2,-12(fp)
100041a0:	10000715 	stw	zero,28(r2)
                    updateGroundLeftRightxy(playerStruct); // update the left right coordinate 
100041a4:	e13ffd17 	ldw	r4,-12(fp)
100041a8:	000141c0 	call	1000141c <updateGroundLeftRightxy>
                    if( (ground.validGround[(playerStruct->x_left + playerStruct->x_right)/2][(playerStruct->y_left + playerStruct->y_right)/2] == 0)){ // right foot is solid, half not)
100041ac:	e0bffd17 	ldw	r2,-12(fp)
100041b0:	10c00917 	ldw	r3,36(r2)
100041b4:	e0bffd17 	ldw	r2,-12(fp)
100041b8:	10800a17 	ldw	r2,40(r2)
100041bc:	1885883a 	add	r2,r3,r2
100041c0:	1006d7fa 	srli	r3,r2,31
100041c4:	1885883a 	add	r2,r3,r2
100041c8:	1005d07a 	srai	r2,r2,1
100041cc:	1009883a 	mov	r4,r2
100041d0:	e0bffd17 	ldw	r2,-12(fp)
100041d4:	10c00b17 	ldw	r3,44(r2)
100041d8:	e0bffd17 	ldw	r2,-12(fp)
100041dc:	10800c17 	ldw	r2,48(r2)
100041e0:	1885883a 	add	r2,r3,r2
100041e4:	1006d7fa 	srli	r3,r2,31
100041e8:	1885883a 	add	r2,r3,r2
100041ec:	1005d07a 	srai	r2,r2,1
100041f0:	1023883a 	mov	r17,r2
100041f4:	040400b4 	movhi	r16,4098
100041f8:	8434c404 	addi	r16,r16,-11504
100041fc:	01407804 	movi	r5,480
10004200:	00096fc0 	call	100096fc <__mulsi3>
10004204:	1445883a 	add	r2,r2,r17
10004208:	1085883a 	add	r2,r2,r2
1000420c:	1085883a 	add	r2,r2,r2
10004210:	8085883a 	add	r2,r16,r2
10004214:	10800017 	ldw	r2,0(r2)
10004218:	1000071e 	bne	r2,zero,10004238 <updatedPlayerMovement+0x130>
                        playerStruct->direction = 2;
1000421c:	e0bffd17 	ldw	r2,-12(fp)
10004220:	00c00084 	movi	r3,2
10004224:	10c00715 	stw	r3,28(r2)
                        convertCoordinateUpHill(playerStruct, 1);
10004228:	01400044 	movi	r5,1
1000422c:	e13ffd17 	ldw	r4,-12(fp)
10004230:	00015680 	call	10001568 <convertCoordinateUpHill>
                        convertCoordinateUpHill(playerStruct, 0);
                    }
                    else{
                    }
                }
                break;
10004234:	00017906 	br	1000481c <updatedPlayerMovement+0x714>
                    updateGroundLeftRightxy(playerStruct); // update the left right coordinate 
                    if( (ground.validGround[(playerStruct->x_left + playerStruct->x_right)/2][(playerStruct->y_left + playerStruct->y_right)/2] == 0)){ // right foot is solid, half not)
                        playerStruct->direction = 2;
                        convertCoordinateUpHill(playerStruct, 1);
                    }
                    else if( (ground.validGround[(playerStruct->x_left + playerStruct->x_right)/2][(playerStruct->y_left + playerStruct->y_right)/2 + 1] == 1)){ // left foot is solid half is not
10004238:	e0bffd17 	ldw	r2,-12(fp)
1000423c:	10c00917 	ldw	r3,36(r2)
10004240:	e0bffd17 	ldw	r2,-12(fp)
10004244:	10800a17 	ldw	r2,40(r2)
10004248:	1885883a 	add	r2,r3,r2
1000424c:	1006d7fa 	srli	r3,r2,31
10004250:	1885883a 	add	r2,r3,r2
10004254:	1005d07a 	srai	r2,r2,1
10004258:	1009883a 	mov	r4,r2
1000425c:	e0bffd17 	ldw	r2,-12(fp)
10004260:	10c00b17 	ldw	r3,44(r2)
10004264:	e0bffd17 	ldw	r2,-12(fp)
10004268:	10800c17 	ldw	r2,48(r2)
1000426c:	1885883a 	add	r2,r3,r2
10004270:	1006d7fa 	srli	r3,r2,31
10004274:	1885883a 	add	r2,r3,r2
10004278:	1005d07a 	srai	r2,r2,1
1000427c:	14400044 	addi	r17,r2,1
10004280:	040400b4 	movhi	r16,4098
10004284:	8434c404 	addi	r16,r16,-11504
10004288:	01407804 	movi	r5,480
1000428c:	00096fc0 	call	100096fc <__mulsi3>
10004290:	1445883a 	add	r2,r2,r17
10004294:	1085883a 	add	r2,r2,r2
10004298:	1085883a 	add	r2,r2,r2
1000429c:	8085883a 	add	r2,r16,r2
100042a0:	10800017 	ldw	r2,0(r2)
100042a4:	10800058 	cmpnei	r2,r2,1
100042a8:	10015c1e 	bne	r2,zero,1000481c <updatedPlayerMovement+0x714>
                        playerStruct->direction = 4; // down hill left
100042ac:	e0bffd17 	ldw	r2,-12(fp)
100042b0:	00c00104 	movi	r3,4
100042b4:	10c00715 	stw	r3,28(r2)
                        convertCoordinateDownHill(playerStruct, 1);
100042b8:	01400044 	movi	r5,1
100042bc:	e13ffd17 	ldw	r4,-12(fp)
100042c0:	000166c0 	call	1000166c <convertCoordinateDownHill>
                        convertCoordinateUpHill(playerStruct, 0);
                    }
                    else{
                    }
                }
                break;
100042c4:	00015506 	br	1000481c <updatedPlayerMovement+0x714>
                    }
                    else{
                    }
                }
                else {
                	if((playerStruct->x_pos + 1) >= 799) return;
100042c8:	e0bffd17 	ldw	r2,-12(fp)
100042cc:	10800017 	ldw	r2,0(r2)
100042d0:	10800044 	addi	r2,r2,1
100042d4:	1080c7d0 	cmplti	r2,r2,799
100042d8:	10016826 	beq	r2,zero,1000487c <updatedPlayerMovement+0x774>
                    playerstrength.strength -= 1;
100042dc:	d0a7f117 	ldw	r2,-24636(gp)
100042e0:	10bfffc4 	addi	r2,r2,-1
100042e4:	d0a7f115 	stw	r2,-24636(gp)
                    playerStruct->x_pos += 1;
100042e8:	e0bffd17 	ldw	r2,-12(fp)
100042ec:	10800017 	ldw	r2,0(r2)
100042f0:	10c00044 	addi	r3,r2,1
100042f4:	e0bffd17 	ldw	r2,-12(fp)
100042f8:	10c00015 	stw	r3,0(r2)
                    playerStruct->direction = 1;
100042fc:	e0bffd17 	ldw	r2,-12(fp)
10004300:	00c00044 	movi	r3,1
10004304:	10c00715 	stw	r3,28(r2)
                    updateGroundLeftRightxy(playerStruct); // update the left right coordinate 
10004308:	e13ffd17 	ldw	r4,-12(fp)
1000430c:	000141c0 	call	1000141c <updateGroundLeftRightxy>
                    if((ground.validGround[(playerStruct->x_left + playerStruct->x_right)/2][(playerStruct->y_left + playerStruct->y_right)/2] == 0)){ // left foot is solid, half not
10004310:	e0bffd17 	ldw	r2,-12(fp)
10004314:	10c00917 	ldw	r3,36(r2)
10004318:	e0bffd17 	ldw	r2,-12(fp)
1000431c:	10800a17 	ldw	r2,40(r2)
10004320:	1885883a 	add	r2,r3,r2
10004324:	1006d7fa 	srli	r3,r2,31
10004328:	1885883a 	add	r2,r3,r2
1000432c:	1005d07a 	srai	r2,r2,1
10004330:	1009883a 	mov	r4,r2
10004334:	e0bffd17 	ldw	r2,-12(fp)
10004338:	10c00b17 	ldw	r3,44(r2)
1000433c:	e0bffd17 	ldw	r2,-12(fp)
10004340:	10800c17 	ldw	r2,48(r2)
10004344:	1885883a 	add	r2,r3,r2
10004348:	1006d7fa 	srli	r3,r2,31
1000434c:	1885883a 	add	r2,r3,r2
10004350:	1005d07a 	srai	r2,r2,1
10004354:	1023883a 	mov	r17,r2
10004358:	040400b4 	movhi	r16,4098
1000435c:	8434c404 	addi	r16,r16,-11504
10004360:	01407804 	movi	r5,480
10004364:	00096fc0 	call	100096fc <__mulsi3>
10004368:	1445883a 	add	r2,r2,r17
1000436c:	1085883a 	add	r2,r2,r2
10004370:	1085883a 	add	r2,r2,r2
10004374:	8085883a 	add	r2,r16,r2
10004378:	10800017 	ldw	r2,0(r2)
1000437c:	1000071e 	bne	r2,zero,1000439c <updatedPlayerMovement+0x294>
                        playerStruct->direction = 5;
10004380:	e0bffd17 	ldw	r2,-12(fp)
10004384:	00c00144 	movi	r3,5
10004388:	10c00715 	stw	r3,28(r2)
                        convertCoordinateDownHill(playerStruct, 0);
1000438c:	000b883a 	mov	r5,zero
10004390:	e13ffd17 	ldw	r4,-12(fp)
10004394:	000166c0 	call	1000166c <convertCoordinateDownHill>
                        convertCoordinateUpHill(playerStruct, 0);
                    }
                    else{
                    }
                }
                break;
10004398:	00012006 	br	1000481c <updatedPlayerMovement+0x714>
                    updateGroundLeftRightxy(playerStruct); // update the left right coordinate 
                    if((ground.validGround[(playerStruct->x_left + playerStruct->x_right)/2][(playerStruct->y_left + playerStruct->y_right)/2] == 0)){ // left foot is solid, half not
                        playerStruct->direction = 5;
                        convertCoordinateDownHill(playerStruct, 0);
                    }
                    else if( (ground.validGround[(playerStruct->x_left + playerStruct->x_right)/2][(playerStruct->y_left + playerStruct->y_right)/2 + 1] == 1)){ // left foot is solid half is not
1000439c:	e0bffd17 	ldw	r2,-12(fp)
100043a0:	10c00917 	ldw	r3,36(r2)
100043a4:	e0bffd17 	ldw	r2,-12(fp)
100043a8:	10800a17 	ldw	r2,40(r2)
100043ac:	1885883a 	add	r2,r3,r2
100043b0:	1006d7fa 	srli	r3,r2,31
100043b4:	1885883a 	add	r2,r3,r2
100043b8:	1005d07a 	srai	r2,r2,1
100043bc:	1009883a 	mov	r4,r2
100043c0:	e0bffd17 	ldw	r2,-12(fp)
100043c4:	10c00b17 	ldw	r3,44(r2)
100043c8:	e0bffd17 	ldw	r2,-12(fp)
100043cc:	10800c17 	ldw	r2,48(r2)
100043d0:	1885883a 	add	r2,r3,r2
100043d4:	1006d7fa 	srli	r3,r2,31
100043d8:	1885883a 	add	r2,r3,r2
100043dc:	1005d07a 	srai	r2,r2,1
100043e0:	14400044 	addi	r17,r2,1
100043e4:	040400b4 	movhi	r16,4098
100043e8:	8434c404 	addi	r16,r16,-11504
100043ec:	01407804 	movi	r5,480
100043f0:	00096fc0 	call	100096fc <__mulsi3>
100043f4:	1445883a 	add	r2,r2,r17
100043f8:	1085883a 	add	r2,r2,r2
100043fc:	1085883a 	add	r2,r2,r2
10004400:	8085883a 	add	r2,r16,r2
10004404:	10800017 	ldw	r2,0(r2)
10004408:	10800058 	cmpnei	r2,r2,1
1000440c:	1001031e 	bne	r2,zero,1000481c <updatedPlayerMovement+0x714>
                        playerStruct->direction = 3; // up hill left
10004410:	e0bffd17 	ldw	r2,-12(fp)
10004414:	00c000c4 	movi	r3,3
10004418:	10c00715 	stw	r3,28(r2)
                        convertCoordinateUpHill(playerStruct, 0);
1000441c:	000b883a 	mov	r5,zero
10004420:	e13ffd17 	ldw	r4,-12(fp)
10004424:	00015680 	call	10001568 <convertCoordinateUpHill>
                    }
                    else{
                    }
                }
                break;
10004428:	0000fc06 	br	1000481c <updatedPlayerMovement+0x714>
            case 1: //up hill  
                if(keycode == KEY_LEFT) {
1000442c:	e0bffc17 	ldw	r2,-16(fp)
10004430:	10801418 	cmpnei	r2,r2,80
10004434:	1000351e 	bne	r2,zero,1000450c <updatedPlayerMovement+0x404>
                    playerstrength.strength -= 1;
10004438:	d0a7f117 	ldw	r2,-24636(gp)
1000443c:	10bfffc4 	addi	r2,r2,-1
10004440:	d0a7f115 	stw	r2,-24636(gp)
                    playerStruct->x_pos -= 1;
10004444:	e0bffd17 	ldw	r2,-12(fp)
10004448:	10800017 	ldw	r2,0(r2)
1000444c:	10ffffc4 	addi	r3,r2,-1
10004450:	e0bffd17 	ldw	r2,-12(fp)
10004454:	10c00015 	stw	r3,0(r2)
                    playerStruct->y_pos -= 1;
10004458:	e0bffd17 	ldw	r2,-12(fp)
1000445c:	10800117 	ldw	r2,4(r2)
10004460:	10ffffc4 	addi	r3,r2,-1
10004464:	e0bffd17 	ldw	r2,-12(fp)
10004468:	10c00115 	stw	r3,4(r2)
                    playerStruct->direction = 2;
1000446c:	e0bffd17 	ldw	r2,-12(fp)
10004470:	00c00084 	movi	r3,2
10004474:	10c00715 	stw	r3,28(r2)
                    updateUphillLeftRightxy(playerStruct); // update the left right coordinate
10004478:	e13ffd17 	ldw	r4,-12(fp)
1000447c:	00014900 	call	10001490 <updateUphillLeftRightxy>
                    if( (ground.validGround[(playerStruct->x_left + playerStruct->x_right)/2][(playerStruct->y_left + playerStruct->y_right)/2 + 1] == 1)){ // left foot is solid, half is not
10004480:	e0bffd17 	ldw	r2,-12(fp)
10004484:	10c00917 	ldw	r3,36(r2)
10004488:	e0bffd17 	ldw	r2,-12(fp)
1000448c:	10800a17 	ldw	r2,40(r2)
10004490:	1885883a 	add	r2,r3,r2
10004494:	1006d7fa 	srli	r3,r2,31
10004498:	1885883a 	add	r2,r3,r2
1000449c:	1005d07a 	srai	r2,r2,1
100044a0:	1009883a 	mov	r4,r2
100044a4:	e0bffd17 	ldw	r2,-12(fp)
100044a8:	10c00b17 	ldw	r3,44(r2)
100044ac:	e0bffd17 	ldw	r2,-12(fp)
100044b0:	10800c17 	ldw	r2,48(r2)
100044b4:	1885883a 	add	r2,r3,r2
100044b8:	1006d7fa 	srli	r3,r2,31
100044bc:	1885883a 	add	r2,r3,r2
100044c0:	1005d07a 	srai	r2,r2,1
100044c4:	14400044 	addi	r17,r2,1
100044c8:	040400b4 	movhi	r16,4098
100044cc:	8434c404 	addi	r16,r16,-11504
100044d0:	01407804 	movi	r5,480
100044d4:	00096fc0 	call	100096fc <__mulsi3>
100044d8:	1445883a 	add	r2,r2,r17
100044dc:	1085883a 	add	r2,r2,r2
100044e0:	1085883a 	add	r2,r2,r2
100044e4:	8085883a 	add	r2,r16,r2
100044e8:	10800017 	ldw	r2,0(r2)
100044ec:	10800058 	cmpnei	r2,r2,1
100044f0:	1000cc1e 	bne	r2,zero,10004824 <updatedPlayerMovement+0x71c>
                        playerStruct->direction = 0;
100044f4:	e0bffd17 	ldw	r2,-12(fp)
100044f8:	10000715 	stw	zero,28(r2)
                        convertCoordinateGround(playerStruct, 3);    
100044fc:	014000c4 	movi	r5,3
10004500:	e13ffd17 	ldw	r4,-12(fp)
10004504:	00017700 	call	10001770 <convertCoordinateGround>
                        playerStruct->direction = 1;
                        convertCoordinateGround(playerStruct, 2);
                    }
                    
                }
                break;
10004508:	0000c606 	br	10004824 <updatedPlayerMovement+0x71c>
                    }
                    else{
                    }
                }
                else {
                    if(ground.validGround[playerStruct->x_right][playerStruct->y_right+1] != 1){
1000450c:	e0bffd17 	ldw	r2,-12(fp)
10004510:	10c00a17 	ldw	r3,40(r2)
10004514:	e0bffd17 	ldw	r2,-12(fp)
10004518:	10800c17 	ldw	r2,48(r2)
1000451c:	14400044 	addi	r17,r2,1
10004520:	040400b4 	movhi	r16,4098
10004524:	8434c404 	addi	r16,r16,-11504
10004528:	01407804 	movi	r5,480
1000452c:	1809883a 	mov	r4,r3
10004530:	00096fc0 	call	100096fc <__mulsi3>
10004534:	1445883a 	add	r2,r2,r17
10004538:	1085883a 	add	r2,r2,r2
1000453c:	1085883a 	add	r2,r2,r2
10004540:	8085883a 	add	r2,r16,r2
10004544:	10800017 	ldw	r2,0(r2)
10004548:	10800060 	cmpeqi	r2,r2,1
1000454c:	1000101e 	bne	r2,zero,10004590 <updatedPlayerMovement+0x488>
                        playerstrength.strength -= 1;
10004550:	d0a7f117 	ldw	r2,-24636(gp)
10004554:	10bfffc4 	addi	r2,r2,-1
10004558:	d0a7f115 	stw	r2,-24636(gp)
                        playerStruct->x_pos += 1;
1000455c:	e0bffd17 	ldw	r2,-12(fp)
10004560:	10800017 	ldw	r2,0(r2)
10004564:	10c00044 	addi	r3,r2,1
10004568:	e0bffd17 	ldw	r2,-12(fp)
1000456c:	10c00015 	stw	r3,0(r2)
                        playerStruct->y_pos += 1;
10004570:	e0bffd17 	ldw	r2,-12(fp)
10004574:	10800117 	ldw	r2,4(r2)
10004578:	10c00044 	addi	r3,r2,1
1000457c:	e0bffd17 	ldw	r2,-12(fp)
10004580:	10c00115 	stw	r3,4(r2)
                        playerStruct->direction = 3;
10004584:	e0bffd17 	ldw	r2,-12(fp)
10004588:	00c000c4 	movi	r3,3
1000458c:	10c00715 	stw	r3,28(r2)
                    }
                    updateUphillLeftRightxy(playerStruct); // update the left right coordinate
10004590:	e13ffd17 	ldw	r4,-12(fp)
10004594:	00014900 	call	10001490 <updateUphillLeftRightxy>
                    if((ground.validGround[(playerStruct->x_left + playerStruct->x_right)/2][(playerStruct->y_left + playerStruct->y_right)/2] == 0)){ // left foot still on the slope, half already in the air;
10004598:	e0bffd17 	ldw	r2,-12(fp)
1000459c:	10c00917 	ldw	r3,36(r2)
100045a0:	e0bffd17 	ldw	r2,-12(fp)
100045a4:	10800a17 	ldw	r2,40(r2)
100045a8:	1885883a 	add	r2,r3,r2
100045ac:	1006d7fa 	srli	r3,r2,31
100045b0:	1885883a 	add	r2,r3,r2
100045b4:	1005d07a 	srai	r2,r2,1
100045b8:	1009883a 	mov	r4,r2
100045bc:	e0bffd17 	ldw	r2,-12(fp)
100045c0:	10c00b17 	ldw	r3,44(r2)
100045c4:	e0bffd17 	ldw	r2,-12(fp)
100045c8:	10800c17 	ldw	r2,48(r2)
100045cc:	1885883a 	add	r2,r3,r2
100045d0:	1006d7fa 	srli	r3,r2,31
100045d4:	1885883a 	add	r2,r3,r2
100045d8:	1005d07a 	srai	r2,r2,1
100045dc:	1023883a 	mov	r17,r2
100045e0:	040400b4 	movhi	r16,4098
100045e4:	8434c404 	addi	r16,r16,-11504
100045e8:	01407804 	movi	r5,480
100045ec:	00096fc0 	call	100096fc <__mulsi3>
100045f0:	1445883a 	add	r2,r2,r17
100045f4:	1085883a 	add	r2,r2,r2
100045f8:	1085883a 	add	r2,r2,r2
100045fc:	8085883a 	add	r2,r16,r2
10004600:	10800017 	ldw	r2,0(r2)
10004604:	1000871e 	bne	r2,zero,10004824 <updatedPlayerMovement+0x71c>
                        playerStruct->direction = 1;
10004608:	e0bffd17 	ldw	r2,-12(fp)
1000460c:	00c00044 	movi	r3,1
10004610:	10c00715 	stw	r3,28(r2)
                        convertCoordinateGround(playerStruct, 2);
10004614:	01400084 	movi	r5,2
10004618:	e13ffd17 	ldw	r4,-12(fp)
1000461c:	00017700 	call	10001770 <convertCoordinateGround>
                    }
                    
                }
                break;
10004620:	00008006 	br	10004824 <updatedPlayerMovement+0x71c>
            case 2: // downhill
                if(keycode == KEY_LEFT) {
10004624:	e0bffc17 	ldw	r2,-16(fp)
10004628:	10801418 	cmpnei	r2,r2,80
1000462c:	1000451e 	bne	r2,zero,10004744 <updatedPlayerMovement+0x63c>
                    if(ground.validGround[playerStruct->x_left][playerStruct->y_left+1] != 1){
10004630:	e0bffd17 	ldw	r2,-12(fp)
10004634:	10c00917 	ldw	r3,36(r2)
10004638:	e0bffd17 	ldw	r2,-12(fp)
1000463c:	10800b17 	ldw	r2,44(r2)
10004640:	14400044 	addi	r17,r2,1
10004644:	040400b4 	movhi	r16,4098
10004648:	8434c404 	addi	r16,r16,-11504
1000464c:	01407804 	movi	r5,480
10004650:	1809883a 	mov	r4,r3
10004654:	00096fc0 	call	100096fc <__mulsi3>
10004658:	1445883a 	add	r2,r2,r17
1000465c:	1085883a 	add	r2,r2,r2
10004660:	1085883a 	add	r2,r2,r2
10004664:	8085883a 	add	r2,r16,r2
10004668:	10800017 	ldw	r2,0(r2)
1000466c:	10800060 	cmpeqi	r2,r2,1
10004670:	1000101e 	bne	r2,zero,100046b4 <updatedPlayerMovement+0x5ac>
                        playerstrength.strength -= 1;
10004674:	d0a7f117 	ldw	r2,-24636(gp)
10004678:	10bfffc4 	addi	r2,r2,-1
1000467c:	d0a7f115 	stw	r2,-24636(gp)
                        playerStruct->x_pos -= 1;
10004680:	e0bffd17 	ldw	r2,-12(fp)
10004684:	10800017 	ldw	r2,0(r2)
10004688:	10ffffc4 	addi	r3,r2,-1
1000468c:	e0bffd17 	ldw	r2,-12(fp)
10004690:	10c00015 	stw	r3,0(r2)
                        playerStruct->y_pos += 1;
10004694:	e0bffd17 	ldw	r2,-12(fp)
10004698:	10800117 	ldw	r2,4(r2)
1000469c:	10c00044 	addi	r3,r2,1
100046a0:	e0bffd17 	ldw	r2,-12(fp)
100046a4:	10c00115 	stw	r3,4(r2)
                        playerStruct->direction = 4;
100046a8:	e0bffd17 	ldw	r2,-12(fp)
100046ac:	00c00104 	movi	r3,4
100046b0:	10c00715 	stw	r3,28(r2)
                    }
                    updateDownhillLeftRightxy(playerStruct); // update the left right coordinate 
100046b4:	e13ffd17 	ldw	r4,-12(fp)
100046b8:	00013440 	call	10001344 <updateDownhillLeftRightxy>
                    if((ground.validGround[(playerStruct->x_left + playerStruct->x_right)/2][(playerStruct->y_left + playerStruct->y_right)/2] == 0)){ // right foot on the slope, half in the air
100046bc:	e0bffd17 	ldw	r2,-12(fp)
100046c0:	10c00917 	ldw	r3,36(r2)
100046c4:	e0bffd17 	ldw	r2,-12(fp)
100046c8:	10800a17 	ldw	r2,40(r2)
100046cc:	1885883a 	add	r2,r3,r2
100046d0:	1006d7fa 	srli	r3,r2,31
100046d4:	1885883a 	add	r2,r3,r2
100046d8:	1005d07a 	srai	r2,r2,1
100046dc:	1009883a 	mov	r4,r2
100046e0:	e0bffd17 	ldw	r2,-12(fp)
100046e4:	10c00b17 	ldw	r3,44(r2)
100046e8:	e0bffd17 	ldw	r2,-12(fp)
100046ec:	10800c17 	ldw	r2,48(r2)
100046f0:	1885883a 	add	r2,r3,r2
100046f4:	1006d7fa 	srli	r3,r2,31
100046f8:	1885883a 	add	r2,r3,r2
100046fc:	1005d07a 	srai	r2,r2,1
10004700:	1023883a 	mov	r17,r2
10004704:	040400b4 	movhi	r16,4098
10004708:	8434c404 	addi	r16,r16,-11504
1000470c:	01407804 	movi	r5,480
10004710:	00096fc0 	call	100096fc <__mulsi3>
10004714:	1445883a 	add	r2,r2,r17
10004718:	1085883a 	add	r2,r2,r2
1000471c:	1085883a 	add	r2,r2,r2
10004720:	8085883a 	add	r2,r16,r2
10004724:	10800017 	ldw	r2,0(r2)
10004728:	1000401e 	bne	r2,zero,1000482c <updatedPlayerMovement+0x724>
                        playerStruct->direction = 0;
1000472c:	e0bffd17 	ldw	r2,-12(fp)
10004730:	10000715 	stw	zero,28(r2)
                        convertCoordinateGround(playerStruct, 0);
10004734:	000b883a 	mov	r5,zero
10004738:	e13ffd17 	ldw	r4,-12(fp)
1000473c:	00017700 	call	10001770 <convertCoordinateGround>
                        convertCoordinateGround(playerStruct, 1);
                    }
                    else{
                    }
                }
                break;
10004740:	00003a06 	br	1000482c <updatedPlayerMovement+0x724>
                        convertCoordinateGround(playerStruct, 0);
                    }
                    
                }
                else {
                    playerstrength.strength -= 1;
10004744:	d0a7f117 	ldw	r2,-24636(gp)
10004748:	10bfffc4 	addi	r2,r2,-1
1000474c:	d0a7f115 	stw	r2,-24636(gp)
                    playerStruct->x_pos += 1;
10004750:	e0bffd17 	ldw	r2,-12(fp)
10004754:	10800017 	ldw	r2,0(r2)
10004758:	10c00044 	addi	r3,r2,1
1000475c:	e0bffd17 	ldw	r2,-12(fp)
10004760:	10c00015 	stw	r3,0(r2)
                    playerStruct->y_pos -= 1;
10004764:	e0bffd17 	ldw	r2,-12(fp)
10004768:	10800117 	ldw	r2,4(r2)
1000476c:	10ffffc4 	addi	r3,r2,-1
10004770:	e0bffd17 	ldw	r2,-12(fp)
10004774:	10c00115 	stw	r3,4(r2)
                    playerStruct->direction = 5;
10004778:	e0bffd17 	ldw	r2,-12(fp)
1000477c:	00c00144 	movi	r3,5
10004780:	10c00715 	stw	r3,28(r2)
                    updateDownhillLeftRightxy(playerStruct); // update the left right coordinate 
10004784:	e13ffd17 	ldw	r4,-12(fp)
10004788:	00013440 	call	10001344 <updateDownhillLeftRightxy>
                    if((ground.validGround[(playerStruct->x_left + playerStruct->x_right)/2][(playerStruct->y_left + playerStruct->y_right)/2 + 1] == 1)){ // left on the slope, half in the ground
1000478c:	e0bffd17 	ldw	r2,-12(fp)
10004790:	10c00917 	ldw	r3,36(r2)
10004794:	e0bffd17 	ldw	r2,-12(fp)
10004798:	10800a17 	ldw	r2,40(r2)
1000479c:	1885883a 	add	r2,r3,r2
100047a0:	1006d7fa 	srli	r3,r2,31
100047a4:	1885883a 	add	r2,r3,r2
100047a8:	1005d07a 	srai	r2,r2,1
100047ac:	1009883a 	mov	r4,r2
100047b0:	e0bffd17 	ldw	r2,-12(fp)
100047b4:	10c00b17 	ldw	r3,44(r2)
100047b8:	e0bffd17 	ldw	r2,-12(fp)
100047bc:	10800c17 	ldw	r2,48(r2)
100047c0:	1885883a 	add	r2,r3,r2
100047c4:	1006d7fa 	srli	r3,r2,31
100047c8:	1885883a 	add	r2,r3,r2
100047cc:	1005d07a 	srai	r2,r2,1
100047d0:	14400044 	addi	r17,r2,1
100047d4:	040400b4 	movhi	r16,4098
100047d8:	8434c404 	addi	r16,r16,-11504
100047dc:	01407804 	movi	r5,480
100047e0:	00096fc0 	call	100096fc <__mulsi3>
100047e4:	1445883a 	add	r2,r2,r17
100047e8:	1085883a 	add	r2,r2,r2
100047ec:	1085883a 	add	r2,r2,r2
100047f0:	8085883a 	add	r2,r16,r2
100047f4:	10800017 	ldw	r2,0(r2)
100047f8:	10800058 	cmpnei	r2,r2,1
100047fc:	10000b1e 	bne	r2,zero,1000482c <updatedPlayerMovement+0x724>
                        playerStruct->direction = 1;
10004800:	e0bffd17 	ldw	r2,-12(fp)
10004804:	00c00044 	movi	r3,1
10004808:	10c00715 	stw	r3,28(r2)
                        convertCoordinateGround(playerStruct, 1);
1000480c:	01400044 	movi	r5,1
10004810:	e13ffd17 	ldw	r4,-12(fp)
10004814:	00017700 	call	10001770 <convertCoordinateGround>
                    }
                    else{
                    }
                }
                break;
10004818:	00000406 	br	1000482c <updatedPlayerMovement+0x724>
                        convertCoordinateUpHill(playerStruct, 0);
                    }
                    else{
                    }
                }
                break;
1000481c:	0001883a 	nop
10004820:	00000306 	br	10004830 <updatedPlayerMovement+0x728>
                        playerStruct->direction = 1;
                        convertCoordinateGround(playerStruct, 2);
                    }
                    
                }
                break;
10004824:	0001883a 	nop
10004828:	00000106 	br	10004830 <updatedPlayerMovement+0x728>
                        convertCoordinateGround(playerStruct, 1);
                    }
                    else{
                    }
                }
                break;
1000482c:	0001883a 	nop
        }
    }    

    int faceDirection;
    if((playerStruct->direction == 0) || (playerStruct->direction == 2) || (playerStruct->direction == 4)){ // face left
10004830:	e0bffd17 	ldw	r2,-12(fp)
10004834:	10800717 	ldw	r2,28(r2)
10004838:	10000826 	beq	r2,zero,1000485c <updatedPlayerMovement+0x754>
1000483c:	e0bffd17 	ldw	r2,-12(fp)
10004840:	10800717 	ldw	r2,28(r2)
10004844:	108000a0 	cmpeqi	r2,r2,2
10004848:	1000041e 	bne	r2,zero,1000485c <updatedPlayerMovement+0x754>
1000484c:	e0bffd17 	ldw	r2,-12(fp)
10004850:	10800717 	ldw	r2,28(r2)
10004854:	10800118 	cmpnei	r2,r2,4
10004858:	1000021e 	bne	r2,zero,10004864 <updatedPlayerMovement+0x75c>
        faceDirection = 0;   // face left
1000485c:	e03ffb15 	stw	zero,-20(fp)
10004860:	00000206 	br	1000486c <updatedPlayerMovement+0x764>
    }
    else faceDirection = 1;  // face right;
10004864:	00800044 	movi	r2,1
10004868:	e0bffb15 	stw	r2,-20(fp)

    return;
1000486c:	0001883a 	nop
10004870:	00000306 	br	10004880 <updatedPlayerMovement+0x778>
    }
    else{
        switch ((playerStruct->direction)/2) {  // update the position
            case 0: // face left and face right
                if(keycode == KEY_LEFT) {
                	if((playerStruct->x_pos -1)==10) return;
10004874:	0001883a 	nop
10004878:	00000106 	br	10004880 <updatedPlayerMovement+0x778>
                    }
                    else{
                    }
                }
                else {
                	if((playerStruct->x_pos + 1) >= 799) return;
1000487c:	0001883a 	nop
        faceDirection = 0;   // face left
    }
    else faceDirection = 1;  // face right;

    return;
}
10004880:	e6fffe04 	addi	sp,fp,-8
10004884:	dfc00317 	ldw	ra,12(sp)
10004888:	df000217 	ldw	fp,8(sp)
1000488c:	dc400117 	ldw	r17,4(sp)
10004890:	dc000017 	ldw	r16,0(sp)
10004894:	dec00404 	addi	sp,sp,16
10004898:	f800283a 	ret

1000489c <updateMovementCracter>:

void updateMovementCracter(struct TEXT_VGA_STRUCT* buffer){
1000489c:	defffb04 	addi	sp,sp,-20
100048a0:	df000415 	stw	fp,16(sp)
100048a4:	df000404 	addi	fp,sp,16
100048a8:	e13fff15 	stw	r4,-4(fp)
    int x_cal;
    int x_lowTwo;
    int x_high;
    int y_high;
    
    for(int i = 0; i < buffer->crater_counter;){
100048ac:	e03ffc15 	stw	zero,-16(fp)
100048b0:	00002d06 	br	10004968 <updateMovementCracter+0xcc>
        y_high = buffer->VRAM[CRATER_OFFSET + i + 1] & 0x3f;
100048b4:	e0bffc17 	ldw	r2,-16(fp)
100048b8:	10803244 	addi	r2,r2,201
100048bc:	e0ffff17 	ldw	r3,-4(fp)
100048c0:	1885883a 	add	r2,r3,r2
100048c4:	10800003 	ldbu	r2,0(r2)
100048c8:	10803fcc 	andi	r2,r2,255
100048cc:	10800fcc 	andi	r2,r2,63
100048d0:	e0bffd15 	stw	r2,-12(fp)
        // x_lowTwo = (buffer->VRAM[CRATER_OFFSET + i + 1] >> 6) & 0x03;
        // x_high = buffer->VRAM[CRATER_OFFSET + i + 2];
        x_cal = cracterOriginal[i/4] - moveX + 40;
100048d4:	e0bffc17 	ldw	r2,-16(fp)
100048d8:	1000010e 	bge	r2,zero,100048e0 <updateMovementCracter+0x44>
100048dc:	108000c4 	addi	r2,r2,3
100048e0:	1005d0ba 	srai	r2,r2,2
100048e4:	1007883a 	mov	r3,r2
100048e8:	00840674 	movhi	r2,4121
100048ec:	10928604 	addi	r2,r2,18968
100048f0:	18c7883a 	add	r3,r3,r3
100048f4:	18c7883a 	add	r3,r3,r3
100048f8:	10c5883a 	add	r2,r2,r3
100048fc:	10c00017 	ldw	r3,0(r2)
10004900:	d0a7f217 	ldw	r2,-24632(gp)
10004904:	1885c83a 	sub	r2,r3,r2
10004908:	10800a04 	addi	r2,r2,40
1000490c:	e0bffe15 	stw	r2,-8(fp)
        buffer->VRAM[CRATER_OFFSET + i + 1] = y_high | ((x_cal << 6) & 0xc0);
10004910:	e0bffc17 	ldw	r2,-16(fp)
10004914:	10803244 	addi	r2,r2,201
10004918:	e0fffe17 	ldw	r3,-8(fp)
1000491c:	180691ba 	slli	r3,r3,6
10004920:	1809883a 	mov	r4,r3
10004924:	e0fffd17 	ldw	r3,-12(fp)
10004928:	20c6b03a 	or	r3,r4,r3
1000492c:	1809883a 	mov	r4,r3
10004930:	e0ffff17 	ldw	r3,-4(fp)
10004934:	1885883a 	add	r2,r3,r2
10004938:	11000005 	stb	r4,0(r2)
        buffer->VRAM[CRATER_OFFSET + i + 2] = (x_cal >> 2) & 0xff;
1000493c:	e0bffc17 	ldw	r2,-16(fp)
10004940:	10803284 	addi	r2,r2,202
10004944:	e0fffe17 	ldw	r3,-8(fp)
10004948:	1807d0ba 	srai	r3,r3,2
1000494c:	1809883a 	mov	r4,r3
10004950:	e0ffff17 	ldw	r3,-4(fp)
10004954:	1885883a 	add	r2,r3,r2
10004958:	11000005 	stb	r4,0(r2)
        i += 4;
1000495c:	e0bffc17 	ldw	r2,-16(fp)
10004960:	10800104 	addi	r2,r2,4
10004964:	e0bffc15 	stw	r2,-16(fp)
    int x_cal;
    int x_lowTwo;
    int x_high;
    int y_high;
    
    for(int i = 0; i < buffer->crater_counter;){
10004968:	e0bfff17 	ldw	r2,-4(fp)
1000496c:	1080ca17 	ldw	r2,808(r2)
10004970:	e0fffc17 	ldw	r3,-16(fp)
10004974:	18bfcf36 	bltu	r3,r2,100048b4 <__alt_data_end+0xf80048b4>
        x_cal = cracterOriginal[i/4] - moveX + 40;
        buffer->VRAM[CRATER_OFFSET + i + 1] = y_high | ((x_cal << 6) & 0xc0);
        buffer->VRAM[CRATER_OFFSET + i + 2] = (x_cal >> 2) & 0xff;
        i += 4;
    }
}
10004978:	0001883a 	nop
1000497c:	e037883a 	mov	sp,fp
10004980:	df000017 	ldw	fp,0(sp)
10004984:	dec00104 	addi	sp,sp,4
10004988:	f800283a 	ret

1000498c <updateFalling>:
//     else faceDirection = 1;  // face right;

//     return;
// }

void updateFalling(struct player* playerStruct){
1000498c:	defff504 	addi	sp,sp,-44
10004990:	dfc00a15 	stw	ra,40(sp)
10004994:	df000915 	stw	fp,36(sp)
10004998:	dc400815 	stw	r17,32(sp)
1000499c:	dc000715 	stw	r16,28(sp)
100049a0:	df000904 	addi	fp,sp,36
100049a4:	e13ffd15 	stw	r4,-12(fp)
    if(playerStruct->magic == 1){
100049a8:	e0bffd17 	ldw	r2,-12(fp)
100049ac:	10800e17 	ldw	r2,56(r2)
100049b0:	10800058 	cmpnei	r2,r2,1
100049b4:	10016426 	beq	r2,zero,10004f48 <updateFalling+0x5bc>
        return;
    }
    if(playerStruct->pos_state == 1){
100049b8:	e0bffd17 	ldw	r2,-12(fp)
100049bc:	10800517 	ldw	r2,20(r2)
100049c0:	10800058 	cmpnei	r2,r2,1
100049c4:	1001101e 	bne	r2,zero,10004e08 <updateFalling+0x47c>
        playerStruct->y_pos -= playerStruct->v_y;
100049c8:	e0bffd17 	ldw	r2,-12(fp)
100049cc:	10c00117 	ldw	r3,4(r2)
100049d0:	e0bffd17 	ldw	r2,-12(fp)
100049d4:	10800d17 	ldw	r2,52(r2)
100049d8:	1887c83a 	sub	r3,r3,r2
100049dc:	e0bffd17 	ldw	r2,-12(fp)
100049e0:	10c00115 	stw	r3,4(r2)
        playerStruct->v_y += 1;
100049e4:	e0bffd17 	ldw	r2,-12(fp)
100049e8:	10800d17 	ldw	r2,52(r2)
100049ec:	10c00044 	addi	r3,r2,1
100049f0:	e0bffd17 	ldw	r2,-12(fp)
100049f4:	10c00d15 	stw	r3,52(r2)

		updateGroundLeftRightxy(playerStruct); // update the left right coordinate
100049f8:	e13ffd17 	ldw	r4,-12(fp)
100049fc:	000141c0 	call	1000141c <updateGroundLeftRightxy>
		int fallyleft, fallymid, fallyright, fallxleft, fallxmid, fallxright;
		fallyleft = playerStruct->y_left;
10004a00:	e0bffd17 	ldw	r2,-12(fp)
10004a04:	10800b17 	ldw	r2,44(r2)
10004a08:	e0bff715 	stw	r2,-36(fp)
		fallyright = playerStruct->y_right;
10004a0c:	e0bffd17 	ldw	r2,-12(fp)
10004a10:	10800c17 	ldw	r2,48(r2)
10004a14:	e0bff815 	stw	r2,-32(fp)
		fallymid = (fallyleft + fallyright)/2;
10004a18:	e0fff717 	ldw	r3,-36(fp)
10004a1c:	e0bff817 	ldw	r2,-32(fp)
10004a20:	1885883a 	add	r2,r3,r2
10004a24:	1006d7fa 	srli	r3,r2,31
10004a28:	1885883a 	add	r2,r3,r2
10004a2c:	1005d07a 	srai	r2,r2,1
10004a30:	e0bff915 	stw	r2,-28(fp)
		fallxleft = playerStruct->x_left;
10004a34:	e0bffd17 	ldw	r2,-12(fp)
10004a38:	10800917 	ldw	r2,36(r2)
10004a3c:	e0bffa15 	stw	r2,-24(fp)
		fallxright = playerStruct->x_right;
10004a40:	e0bffd17 	ldw	r2,-12(fp)
10004a44:	10800a17 	ldw	r2,40(r2)
10004a48:	e0bffb15 	stw	r2,-20(fp)
		fallxmid = (fallxleft + fallxright)/2;
10004a4c:	e0fffa17 	ldw	r3,-24(fp)
10004a50:	e0bffb17 	ldw	r2,-20(fp)
10004a54:	1885883a 	add	r2,r3,r2
10004a58:	1006d7fa 	srli	r3,r2,31
10004a5c:	1885883a 	add	r2,r3,r2
10004a60:	1005d07a 	srai	r2,r2,1
10004a64:	e0bffc15 	stw	r2,-16(fp)

		if((ground.validGround[fallxmid][fallymid] == 1) && ( (ground.validGround[fallxmid][fallymid] == 1) || (ground.validGround[fallxright][fallyright] == 1) )){ // have touch the ground
10004a68:	040400b4 	movhi	r16,4098
10004a6c:	8434c404 	addi	r16,r16,-11504
10004a70:	e0bffc17 	ldw	r2,-16(fp)
10004a74:	01407804 	movi	r5,480
10004a78:	1009883a 	mov	r4,r2
10004a7c:	00096fc0 	call	100096fc <__mulsi3>
10004a80:	1007883a 	mov	r3,r2
10004a84:	e0bff917 	ldw	r2,-28(fp)
10004a88:	1885883a 	add	r2,r3,r2
10004a8c:	1085883a 	add	r2,r2,r2
10004a90:	1085883a 	add	r2,r2,r2
10004a94:	8085883a 	add	r2,r16,r2
10004a98:	10800017 	ldw	r2,0(r2)
10004a9c:	10800058 	cmpnei	r2,r2,1
10004aa0:	1000201e 	bne	r2,zero,10004b24 <updateFalling+0x198>
10004aa4:	040400b4 	movhi	r16,4098
10004aa8:	8434c404 	addi	r16,r16,-11504
10004aac:	e0bffc17 	ldw	r2,-16(fp)
10004ab0:	01407804 	movi	r5,480
10004ab4:	1009883a 	mov	r4,r2
10004ab8:	00096fc0 	call	100096fc <__mulsi3>
10004abc:	1007883a 	mov	r3,r2
10004ac0:	e0bff917 	ldw	r2,-28(fp)
10004ac4:	1885883a 	add	r2,r3,r2
10004ac8:	1085883a 	add	r2,r2,r2
10004acc:	1085883a 	add	r2,r2,r2
10004ad0:	8085883a 	add	r2,r16,r2
10004ad4:	10800017 	ldw	r2,0(r2)
10004ad8:	10800060 	cmpeqi	r2,r2,1
10004adc:	10000f1e 	bne	r2,zero,10004b1c <updateFalling+0x190>
10004ae0:	040400b4 	movhi	r16,4098
10004ae4:	8434c404 	addi	r16,r16,-11504
10004ae8:	e0bffb17 	ldw	r2,-20(fp)
10004aec:	01407804 	movi	r5,480
10004af0:	1009883a 	mov	r4,r2
10004af4:	00096fc0 	call	100096fc <__mulsi3>
10004af8:	1007883a 	mov	r3,r2
10004afc:	e0bff817 	ldw	r2,-32(fp)
10004b00:	1885883a 	add	r2,r3,r2
10004b04:	1085883a 	add	r2,r2,r2
10004b08:	1085883a 	add	r2,r2,r2
10004b0c:	8085883a 	add	r2,r16,r2
10004b10:	10800017 	ldw	r2,0(r2)
10004b14:	10800058 	cmpnei	r2,r2,1
10004b18:	1000021e 	bne	r2,zero,10004b24 <updateFalling+0x198>
            updatefallingPoint(playerStruct);
10004b1c:	e13ffd17 	ldw	r4,-12(fp)
10004b20:	0004f700 	call	10004f70 <updatefallingPoint>
        
        }


		if((ground.validGround[fallxleft][fallyleft] == 1 ) && (ground.validGround[fallxmid][fallymid] == 1) && (ground.validGround[fallxright][fallyright] == 0)){ // The left and the mid side both touching ground downHill position
10004b24:	040400b4 	movhi	r16,4098
10004b28:	8434c404 	addi	r16,r16,-11504
10004b2c:	e0bffa17 	ldw	r2,-24(fp)
10004b30:	01407804 	movi	r5,480
10004b34:	1009883a 	mov	r4,r2
10004b38:	00096fc0 	call	100096fc <__mulsi3>
10004b3c:	1007883a 	mov	r3,r2
10004b40:	e0bff717 	ldw	r2,-36(fp)
10004b44:	1885883a 	add	r2,r3,r2
10004b48:	1085883a 	add	r2,r2,r2
10004b4c:	1085883a 	add	r2,r2,r2
10004b50:	8085883a 	add	r2,r16,r2
10004b54:	10800017 	ldw	r2,0(r2)
10004b58:	10800058 	cmpnei	r2,r2,1
10004b5c:	10002f1e 	bne	r2,zero,10004c1c <updateFalling+0x290>
10004b60:	040400b4 	movhi	r16,4098
10004b64:	8434c404 	addi	r16,r16,-11504
10004b68:	e0bffc17 	ldw	r2,-16(fp)
10004b6c:	01407804 	movi	r5,480
10004b70:	1009883a 	mov	r4,r2
10004b74:	00096fc0 	call	100096fc <__mulsi3>
10004b78:	1007883a 	mov	r3,r2
10004b7c:	e0bff917 	ldw	r2,-28(fp)
10004b80:	1885883a 	add	r2,r3,r2
10004b84:	1085883a 	add	r2,r2,r2
10004b88:	1085883a 	add	r2,r2,r2
10004b8c:	8085883a 	add	r2,r16,r2
10004b90:	10800017 	ldw	r2,0(r2)
10004b94:	10800058 	cmpnei	r2,r2,1
10004b98:	1000201e 	bne	r2,zero,10004c1c <updateFalling+0x290>
10004b9c:	040400b4 	movhi	r16,4098
10004ba0:	8434c404 	addi	r16,r16,-11504
10004ba4:	e0bffb17 	ldw	r2,-20(fp)
10004ba8:	01407804 	movi	r5,480
10004bac:	1009883a 	mov	r4,r2
10004bb0:	00096fc0 	call	100096fc <__mulsi3>
10004bb4:	1007883a 	mov	r3,r2
10004bb8:	e0bff817 	ldw	r2,-32(fp)
10004bbc:	1885883a 	add	r2,r3,r2
10004bc0:	1085883a 	add	r2,r2,r2
10004bc4:	1085883a 	add	r2,r2,r2
10004bc8:	8085883a 	add	r2,r16,r2
10004bcc:	10800017 	ldw	r2,0(r2)
10004bd0:	1000121e 	bne	r2,zero,10004c1c <updateFalling+0x290>
			convertCoordinateDownHill(playerStruct, 2);
10004bd4:	01400084 	movi	r5,2
10004bd8:	e13ffd17 	ldw	r4,-12(fp)
10004bdc:	000166c0 	call	1000166c <convertCoordinateDownHill>
			playerStruct->pos_state = 0; // update the status to be not in air;
10004be0:	e0bffd17 	ldw	r2,-12(fp)
10004be4:	10000515 	stw	zero,20(r2)
            playerStruct->v_y = 0;
10004be8:	e0bffd17 	ldw	r2,-12(fp)
10004bec:	10000d15 	stw	zero,52(r2)
			if(playerStruct->direction == 0) playerStruct->direction = 4; // if face left, update to downhill left;
10004bf0:	e0bffd17 	ldw	r2,-12(fp)
10004bf4:	10800717 	ldw	r2,28(r2)
10004bf8:	1000041e 	bne	r2,zero,10004c0c <updateFalling+0x280>
10004bfc:	e0bffd17 	ldw	r2,-12(fp)
10004c00:	00c00104 	movi	r3,4
10004c04:	10c00715 	stw	r3,28(r2)
10004c08:	00007f06 	br	10004e08 <updateFalling+0x47c>
			else playerStruct->direction = 5; // otherwise update to downhill right;
10004c0c:	e0bffd17 	ldw	r2,-12(fp)
10004c10:	00c00144 	movi	r3,5
10004c14:	10c00715 	stw	r3,28(r2)

		if((ground.validGround[fallxleft][fallyleft] == 1 ) && (ground.validGround[fallxmid][fallymid] == 1) && (ground.validGround[fallxright][fallyright] == 0)){ // The left and the mid side both touching ground downHill position
			convertCoordinateDownHill(playerStruct, 2);
			playerStruct->pos_state = 0; // update the status to be not in air;
            playerStruct->v_y = 0;
			if(playerStruct->direction == 0) playerStruct->direction = 4; // if face left, update to downhill left;
10004c18:	00007b06 	br	10004e08 <updateFalling+0x47c>
			else playerStruct->direction = 5; // otherwise update to downhill right;
		}
		else if((ground.validGround[fallxleft][fallyleft] == 0) && (ground.validGround[fallxmid][fallymid] == 1) && (ground.validGround[fallxright][fallyright] == 1)){  // The right and the mid side both touching ground upHill position
10004c1c:	040400b4 	movhi	r16,4098
10004c20:	8434c404 	addi	r16,r16,-11504
10004c24:	e0bffa17 	ldw	r2,-24(fp)
10004c28:	01407804 	movi	r5,480
10004c2c:	1009883a 	mov	r4,r2
10004c30:	00096fc0 	call	100096fc <__mulsi3>
10004c34:	1007883a 	mov	r3,r2
10004c38:	e0bff717 	ldw	r2,-36(fp)
10004c3c:	1885883a 	add	r2,r3,r2
10004c40:	1085883a 	add	r2,r2,r2
10004c44:	1085883a 	add	r2,r2,r2
10004c48:	8085883a 	add	r2,r16,r2
10004c4c:	10800017 	ldw	r2,0(r2)
10004c50:	1000301e 	bne	r2,zero,10004d14 <updateFalling+0x388>
10004c54:	040400b4 	movhi	r16,4098
10004c58:	8434c404 	addi	r16,r16,-11504
10004c5c:	e0bffc17 	ldw	r2,-16(fp)
10004c60:	01407804 	movi	r5,480
10004c64:	1009883a 	mov	r4,r2
10004c68:	00096fc0 	call	100096fc <__mulsi3>
10004c6c:	1007883a 	mov	r3,r2
10004c70:	e0bff917 	ldw	r2,-28(fp)
10004c74:	1885883a 	add	r2,r3,r2
10004c78:	1085883a 	add	r2,r2,r2
10004c7c:	1085883a 	add	r2,r2,r2
10004c80:	8085883a 	add	r2,r16,r2
10004c84:	10800017 	ldw	r2,0(r2)
10004c88:	10800058 	cmpnei	r2,r2,1
10004c8c:	1000211e 	bne	r2,zero,10004d14 <updateFalling+0x388>
10004c90:	040400b4 	movhi	r16,4098
10004c94:	8434c404 	addi	r16,r16,-11504
10004c98:	e0bffb17 	ldw	r2,-20(fp)
10004c9c:	01407804 	movi	r5,480
10004ca0:	1009883a 	mov	r4,r2
10004ca4:	00096fc0 	call	100096fc <__mulsi3>
10004ca8:	1007883a 	mov	r3,r2
10004cac:	e0bff817 	ldw	r2,-32(fp)
10004cb0:	1885883a 	add	r2,r3,r2
10004cb4:	1085883a 	add	r2,r2,r2
10004cb8:	1085883a 	add	r2,r2,r2
10004cbc:	8085883a 	add	r2,r16,r2
10004cc0:	10800017 	ldw	r2,0(r2)
10004cc4:	10800058 	cmpnei	r2,r2,1
10004cc8:	1000121e 	bne	r2,zero,10004d14 <updateFalling+0x388>
			convertCoordinateUpHill(playerStruct, 2);
10004ccc:	01400084 	movi	r5,2
10004cd0:	e13ffd17 	ldw	r4,-12(fp)
10004cd4:	00015680 	call	10001568 <convertCoordinateUpHill>
			playerStruct->pos_state = 0; // update the status to be not in air;
10004cd8:	e0bffd17 	ldw	r2,-12(fp)
10004cdc:	10000515 	stw	zero,20(r2)
            playerStruct->v_y = 0;
10004ce0:	e0bffd17 	ldw	r2,-12(fp)
10004ce4:	10000d15 	stw	zero,52(r2)
			if(playerStruct->direction == 0) playerStruct->direction = 2; // if face left, update to uphill left;
10004ce8:	e0bffd17 	ldw	r2,-12(fp)
10004cec:	10800717 	ldw	r2,28(r2)
10004cf0:	1000041e 	bne	r2,zero,10004d04 <updateFalling+0x378>
10004cf4:	e0bffd17 	ldw	r2,-12(fp)
10004cf8:	00c00084 	movi	r3,2
10004cfc:	10c00715 	stw	r3,28(r2)
10004d00:	00004106 	br	10004e08 <updateFalling+0x47c>
			else playerStruct->direction = 3; // otherwise update to uphill right;
10004d04:	e0bffd17 	ldw	r2,-12(fp)
10004d08:	00c000c4 	movi	r3,3
10004d0c:	10c00715 	stw	r3,28(r2)
		}
		else if((ground.validGround[fallxleft][fallyleft] == 0) && (ground.validGround[fallxmid][fallymid] == 1) && (ground.validGround[fallxright][fallyright] == 1)){  // The right and the mid side both touching ground upHill position
			convertCoordinateUpHill(playerStruct, 2);
			playerStruct->pos_state = 0; // update the status to be not in air;
            playerStruct->v_y = 0;
			if(playerStruct->direction == 0) playerStruct->direction = 2; // if face left, update to uphill left;
10004d10:	00003d06 	br	10004e08 <updateFalling+0x47c>
			else playerStruct->direction = 3; // otherwise update to uphill right;
		}
		else if((ground.validGround[fallxleft][fallyleft] == 1) && (ground.validGround[fallxmid][fallymid] == 1) && (ground.validGround[fallxright][fallyright] == 1)){ // All the part has touched the ground ground position
10004d14:	040400b4 	movhi	r16,4098
10004d18:	8434c404 	addi	r16,r16,-11504
10004d1c:	e0bffa17 	ldw	r2,-24(fp)
10004d20:	01407804 	movi	r5,480
10004d24:	1009883a 	mov	r4,r2
10004d28:	00096fc0 	call	100096fc <__mulsi3>
10004d2c:	1007883a 	mov	r3,r2
10004d30:	e0bff717 	ldw	r2,-36(fp)
10004d34:	1885883a 	add	r2,r3,r2
10004d38:	1085883a 	add	r2,r2,r2
10004d3c:	1085883a 	add	r2,r2,r2
10004d40:	8085883a 	add	r2,r16,r2
10004d44:	10800017 	ldw	r2,0(r2)
10004d48:	10800058 	cmpnei	r2,r2,1
10004d4c:	10002e1e 	bne	r2,zero,10004e08 <updateFalling+0x47c>
10004d50:	040400b4 	movhi	r16,4098
10004d54:	8434c404 	addi	r16,r16,-11504
10004d58:	e0bffc17 	ldw	r2,-16(fp)
10004d5c:	01407804 	movi	r5,480
10004d60:	1009883a 	mov	r4,r2
10004d64:	00096fc0 	call	100096fc <__mulsi3>
10004d68:	1007883a 	mov	r3,r2
10004d6c:	e0bff917 	ldw	r2,-28(fp)
10004d70:	1885883a 	add	r2,r3,r2
10004d74:	1085883a 	add	r2,r2,r2
10004d78:	1085883a 	add	r2,r2,r2
10004d7c:	8085883a 	add	r2,r16,r2
10004d80:	10800017 	ldw	r2,0(r2)
10004d84:	10800058 	cmpnei	r2,r2,1
10004d88:	10001f1e 	bne	r2,zero,10004e08 <updateFalling+0x47c>
10004d8c:	040400b4 	movhi	r16,4098
10004d90:	8434c404 	addi	r16,r16,-11504
10004d94:	e0bffb17 	ldw	r2,-20(fp)
10004d98:	01407804 	movi	r5,480
10004d9c:	1009883a 	mov	r4,r2
10004da0:	00096fc0 	call	100096fc <__mulsi3>
10004da4:	1007883a 	mov	r3,r2
10004da8:	e0bff817 	ldw	r2,-32(fp)
10004dac:	1885883a 	add	r2,r3,r2
10004db0:	1085883a 	add	r2,r2,r2
10004db4:	1085883a 	add	r2,r2,r2
10004db8:	8085883a 	add	r2,r16,r2
10004dbc:	10800017 	ldw	r2,0(r2)
10004dc0:	10800058 	cmpnei	r2,r2,1
10004dc4:	1000101e 	bne	r2,zero,10004e08 <updateFalling+0x47c>
			convertCoordinateGround(playerStruct, 4);
10004dc8:	01400104 	movi	r5,4
10004dcc:	e13ffd17 	ldw	r4,-12(fp)
10004dd0:	00017700 	call	10001770 <convertCoordinateGround>
			playerStruct->pos_state = 0; // update the status to be not in air;
10004dd4:	e0bffd17 	ldw	r2,-12(fp)
10004dd8:	10000515 	stw	zero,20(r2)
            playerStruct->v_y = 0;
10004ddc:	e0bffd17 	ldw	r2,-12(fp)
10004de0:	10000d15 	stw	zero,52(r2)
			if(playerStruct->direction == 0) playerStruct->direction = 0; // if face left, update to face left;
10004de4:	e0bffd17 	ldw	r2,-12(fp)
10004de8:	10800717 	ldw	r2,28(r2)
10004dec:	1000031e 	bne	r2,zero,10004dfc <updateFalling+0x470>
10004df0:	e0bffd17 	ldw	r2,-12(fp)
10004df4:	10000715 	stw	zero,28(r2)
10004df8:	00000306 	br	10004e08 <updateFalling+0x47c>
			else playerStruct->direction = 1; // otherwise update to face right;
10004dfc:	e0bffd17 	ldw	r2,-12(fp)
10004e00:	00c00044 	movi	r3,1
10004e04:	10c00715 	stw	r3,28(r2)
		}
    }

    if((ground.validGround[playerStruct->x_left][playerStruct->y_left] == 0) && (ground.validGround[playerStruct->x_right][playerStruct->y_right] == 0) && (ground.validGround[(playerStruct->x_left + playerStruct->x_right)/2][(playerStruct->y_left + playerStruct->y_right)/2] == 0)){   // there are space under the feet
10004e08:	e0bffd17 	ldw	r2,-12(fp)
10004e0c:	10c00917 	ldw	r3,36(r2)
10004e10:	e0bffd17 	ldw	r2,-12(fp)
10004e14:	14400b17 	ldw	r17,44(r2)
10004e18:	040400b4 	movhi	r16,4098
10004e1c:	8434c404 	addi	r16,r16,-11504
10004e20:	01407804 	movi	r5,480
10004e24:	1809883a 	mov	r4,r3
10004e28:	00096fc0 	call	100096fc <__mulsi3>
10004e2c:	1445883a 	add	r2,r2,r17
10004e30:	1085883a 	add	r2,r2,r2
10004e34:	1085883a 	add	r2,r2,r2
10004e38:	8085883a 	add	r2,r16,r2
10004e3c:	10800017 	ldw	r2,0(r2)
10004e40:	1000431e 	bne	r2,zero,10004f50 <updateFalling+0x5c4>
10004e44:	e0bffd17 	ldw	r2,-12(fp)
10004e48:	10c00a17 	ldw	r3,40(r2)
10004e4c:	e0bffd17 	ldw	r2,-12(fp)
10004e50:	14400c17 	ldw	r17,48(r2)
10004e54:	040400b4 	movhi	r16,4098
10004e58:	8434c404 	addi	r16,r16,-11504
10004e5c:	01407804 	movi	r5,480
10004e60:	1809883a 	mov	r4,r3
10004e64:	00096fc0 	call	100096fc <__mulsi3>
10004e68:	1445883a 	add	r2,r2,r17
10004e6c:	1085883a 	add	r2,r2,r2
10004e70:	1085883a 	add	r2,r2,r2
10004e74:	8085883a 	add	r2,r16,r2
10004e78:	10800017 	ldw	r2,0(r2)
10004e7c:	1000341e 	bne	r2,zero,10004f50 <updateFalling+0x5c4>
10004e80:	e0bffd17 	ldw	r2,-12(fp)
10004e84:	10c00917 	ldw	r3,36(r2)
10004e88:	e0bffd17 	ldw	r2,-12(fp)
10004e8c:	10800a17 	ldw	r2,40(r2)
10004e90:	1885883a 	add	r2,r3,r2
10004e94:	1006d7fa 	srli	r3,r2,31
10004e98:	1885883a 	add	r2,r3,r2
10004e9c:	1005d07a 	srai	r2,r2,1
10004ea0:	1009883a 	mov	r4,r2
10004ea4:	e0bffd17 	ldw	r2,-12(fp)
10004ea8:	10c00b17 	ldw	r3,44(r2)
10004eac:	e0bffd17 	ldw	r2,-12(fp)
10004eb0:	10800c17 	ldw	r2,48(r2)
10004eb4:	1885883a 	add	r2,r3,r2
10004eb8:	1006d7fa 	srli	r3,r2,31
10004ebc:	1885883a 	add	r2,r3,r2
10004ec0:	1005d07a 	srai	r2,r2,1
10004ec4:	1023883a 	mov	r17,r2
10004ec8:	040400b4 	movhi	r16,4098
10004ecc:	8434c404 	addi	r16,r16,-11504
10004ed0:	01407804 	movi	r5,480
10004ed4:	00096fc0 	call	100096fc <__mulsi3>
10004ed8:	1445883a 	add	r2,r2,r17
10004edc:	1085883a 	add	r2,r2,r2
10004ee0:	1085883a 	add	r2,r2,r2
10004ee4:	8085883a 	add	r2,r16,r2
10004ee8:	10800017 	ldw	r2,0(r2)
10004eec:	1000181e 	bne	r2,zero,10004f50 <updateFalling+0x5c4>
        playerStruct->pos_state = 1;
10004ef0:	e0bffd17 	ldw	r2,-12(fp)
10004ef4:	00c00044 	movi	r3,1
10004ef8:	10c00515 	stw	r3,20(r2)
        if((playerStruct->direction == 0) || (playerStruct->direction == 2) || (playerStruct->direction == 4)){ // face left
10004efc:	e0bffd17 	ldw	r2,-12(fp)
10004f00:	10800717 	ldw	r2,28(r2)
10004f04:	10000826 	beq	r2,zero,10004f28 <updateFalling+0x59c>
10004f08:	e0bffd17 	ldw	r2,-12(fp)
10004f0c:	10800717 	ldw	r2,28(r2)
10004f10:	108000a0 	cmpeqi	r2,r2,2
10004f14:	1000041e 	bne	r2,zero,10004f28 <updateFalling+0x59c>
10004f18:	e0bffd17 	ldw	r2,-12(fp)
10004f1c:	10800717 	ldw	r2,28(r2)
10004f20:	10800118 	cmpnei	r2,r2,4
10004f24:	1000031e 	bne	r2,zero,10004f34 <updateFalling+0x5a8>
            playerStruct->direction = 0;   // face left
10004f28:	e0bffd17 	ldw	r2,-12(fp)
10004f2c:	10000715 	stw	zero,28(r2)
10004f30:	00000306 	br	10004f40 <updateFalling+0x5b4>
        }
        else playerStruct->direction = 1;  // face right;
10004f34:	e0bffd17 	ldw	r2,-12(fp)
10004f38:	00c00044 	movi	r3,1
10004f3c:	10c00715 	stw	r3,28(r2)
	}
    return;
10004f40:	0001883a 	nop
10004f44:	00000206 	br	10004f50 <updateFalling+0x5c4>
//     return;
// }

void updateFalling(struct player* playerStruct){
    if(playerStruct->magic == 1){
        return;
10004f48:	0001883a 	nop
10004f4c:	00000106 	br	10004f54 <updateFalling+0x5c8>
        if((playerStruct->direction == 0) || (playerStruct->direction == 2) || (playerStruct->direction == 4)){ // face left
            playerStruct->direction = 0;   // face left
        }
        else playerStruct->direction = 1;  // face right;
	}
    return;
10004f50:	0001883a 	nop
} 
10004f54:	e6fffe04 	addi	sp,fp,-8
10004f58:	dfc00317 	ldw	ra,12(sp)
10004f5c:	df000217 	ldw	fp,8(sp)
10004f60:	dc400117 	ldw	r17,4(sp)
10004f64:	dc000017 	ldw	r16,0(sp)
10004f68:	dec00404 	addi	sp,sp,16
10004f6c:	f800283a 	ret

10004f70 <updatefallingPoint>:


void updatefallingPoint(struct player* playerStruct){
10004f70:	defff304 	addi	sp,sp,-52
10004f74:	dfc00c15 	stw	ra,48(sp)
10004f78:	df000b15 	stw	fp,44(sp)
10004f7c:	dc000a15 	stw	r16,40(sp)
10004f80:	df000b04 	addi	fp,sp,44
10004f84:	e13ffe15 	stw	r4,-8(fp)
    int fally = playerStruct->y_pos + playerStruct->v_y - 1;
10004f88:	e0bffe17 	ldw	r2,-8(fp)
10004f8c:	10c00117 	ldw	r3,4(r2)
10004f90:	e0bffe17 	ldw	r2,-8(fp)
10004f94:	10800d17 	ldw	r2,52(r2)
10004f98:	1885883a 	add	r2,r3,r2
10004f9c:	10bfffc4 	addi	r2,r2,-1
10004fa0:	e0bff615 	stw	r2,-40(fp)
    int cury = playerStruct->y_pos;
10004fa4:	e0bffe17 	ldw	r2,-8(fp)
10004fa8:	10800117 	ldw	r2,4(r2)
10004fac:	e0bff715 	stw	r2,-36(fp)
    int fallyleft, fallymid, fallyright, fallxleft, fallxmid, fallxright;
    for(int deltaY = fally; deltaY >= cury; deltaY--){
10004fb0:	e0bff617 	ldw	r2,-40(fp)
10004fb4:	e0bff515 	stw	r2,-44(fp)
10004fb8:	00004f06 	br	100050f8 <updatefallingPoint+0x188>
        playerStruct->y_pos = deltaY;
10004fbc:	e0bffe17 	ldw	r2,-8(fp)
10004fc0:	e0fff517 	ldw	r3,-44(fp)
10004fc4:	10c00115 	stw	r3,4(r2)
        updateGroundLeftRightxy(playerStruct); // update the left right coordinate
10004fc8:	e13ffe17 	ldw	r4,-8(fp)
10004fcc:	000141c0 	call	1000141c <updateGroundLeftRightxy>
        fallyleft = playerStruct->y_left;
10004fd0:	e0bffe17 	ldw	r2,-8(fp)
10004fd4:	10800b17 	ldw	r2,44(r2)
10004fd8:	e0bff815 	stw	r2,-32(fp)
        fallyright = playerStruct->y_right;
10004fdc:	e0bffe17 	ldw	r2,-8(fp)
10004fe0:	10800c17 	ldw	r2,48(r2)
10004fe4:	e0bff915 	stw	r2,-28(fp)
        fallymid = (fallyleft + fallyright)/2;
10004fe8:	e0fff817 	ldw	r3,-32(fp)
10004fec:	e0bff917 	ldw	r2,-28(fp)
10004ff0:	1885883a 	add	r2,r3,r2
10004ff4:	1006d7fa 	srli	r3,r2,31
10004ff8:	1885883a 	add	r2,r3,r2
10004ffc:	1005d07a 	srai	r2,r2,1
10005000:	e0bffa15 	stw	r2,-24(fp)
        fallxleft = playerStruct->x_left;
10005004:	e0bffe17 	ldw	r2,-8(fp)
10005008:	10800917 	ldw	r2,36(r2)
1000500c:	e0bffb15 	stw	r2,-20(fp)
        fallxright = playerStruct->x_right;
10005010:	e0bffe17 	ldw	r2,-8(fp)
10005014:	10800a17 	ldw	r2,40(r2)
10005018:	e0bffc15 	stw	r2,-16(fp)
        fallxmid = (fallxleft + fallxright)/2;
1000501c:	e0fffb17 	ldw	r3,-20(fp)
10005020:	e0bffc17 	ldw	r2,-16(fp)
10005024:	1885883a 	add	r2,r3,r2
10005028:	1006d7fa 	srli	r3,r2,31
1000502c:	1885883a 	add	r2,r3,r2
10005030:	1005d07a 	srai	r2,r2,1
10005034:	e0bffd15 	stw	r2,-12(fp)
        if((ground.validGround[fallxmid][fallymid] == 1) && ( (ground.validGround[fallxmid][fallymid] == 1) || (ground.validGround[fallxright][fallyright] == 1) )){ // have touch the ground
10005038:	040400b4 	movhi	r16,4098
1000503c:	8434c404 	addi	r16,r16,-11504
10005040:	e0bffd17 	ldw	r2,-12(fp)
10005044:	01407804 	movi	r5,480
10005048:	1009883a 	mov	r4,r2
1000504c:	00096fc0 	call	100096fc <__mulsi3>
10005050:	1007883a 	mov	r3,r2
10005054:	e0bffa17 	ldw	r2,-24(fp)
10005058:	1885883a 	add	r2,r3,r2
1000505c:	1085883a 	add	r2,r2,r2
10005060:	1085883a 	add	r2,r2,r2
10005064:	8085883a 	add	r2,r16,r2
10005068:	10800017 	ldw	r2,0(r2)
1000506c:	10800058 	cmpnei	r2,r2,1
10005070:	10001e1e 	bne	r2,zero,100050ec <updatefallingPoint+0x17c>
10005074:	040400b4 	movhi	r16,4098
10005078:	8434c404 	addi	r16,r16,-11504
1000507c:	e0bffd17 	ldw	r2,-12(fp)
10005080:	01407804 	movi	r5,480
10005084:	1009883a 	mov	r4,r2
10005088:	00096fc0 	call	100096fc <__mulsi3>
1000508c:	1007883a 	mov	r3,r2
10005090:	e0bffa17 	ldw	r2,-24(fp)
10005094:	1885883a 	add	r2,r3,r2
10005098:	1085883a 	add	r2,r2,r2
1000509c:	1085883a 	add	r2,r2,r2
100050a0:	8085883a 	add	r2,r16,r2
100050a4:	10800017 	ldw	r2,0(r2)
100050a8:	10800060 	cmpeqi	r2,r2,1
100050ac:	1000161e 	bne	r2,zero,10005108 <updatefallingPoint+0x198>
100050b0:	040400b4 	movhi	r16,4098
100050b4:	8434c404 	addi	r16,r16,-11504
100050b8:	e0bffc17 	ldw	r2,-16(fp)
100050bc:	01407804 	movi	r5,480
100050c0:	1009883a 	mov	r4,r2
100050c4:	00096fc0 	call	100096fc <__mulsi3>
100050c8:	1007883a 	mov	r3,r2
100050cc:	e0bff917 	ldw	r2,-28(fp)
100050d0:	1885883a 	add	r2,r3,r2
100050d4:	1085883a 	add	r2,r2,r2
100050d8:	1085883a 	add	r2,r2,r2
100050dc:	8085883a 	add	r2,r16,r2
100050e0:	10800017 	ldw	r2,0(r2)
100050e4:	10800060 	cmpeqi	r2,r2,1
100050e8:	1000071e 	bne	r2,zero,10005108 <updatefallingPoint+0x198>

void updatefallingPoint(struct player* playerStruct){
    int fally = playerStruct->y_pos + playerStruct->v_y - 1;
    int cury = playerStruct->y_pos;
    int fallyleft, fallymid, fallyright, fallxleft, fallxmid, fallxright;
    for(int deltaY = fally; deltaY >= cury; deltaY--){
100050ec:	e0bff517 	ldw	r2,-44(fp)
100050f0:	10bfffc4 	addi	r2,r2,-1
100050f4:	e0bff515 	stw	r2,-44(fp)
100050f8:	e0fff517 	ldw	r3,-44(fp)
100050fc:	e0bff717 	ldw	r2,-36(fp)
10005100:	18bfae0e 	bge	r3,r2,10004fbc <__alt_data_end+0xf8004fbc>
        fallxmid = (fallxleft + fallxright)/2;
        if((ground.validGround[fallxmid][fallymid] == 1) && ( (ground.validGround[fallxmid][fallymid] == 1) || (ground.validGround[fallxright][fallyright] == 1) )){ // have touch the ground
            break;
        }
    }
    return;
10005104:	0001883a 	nop
10005108:	0001883a 	nop
}
1000510c:	e6ffff04 	addi	sp,fp,-4
10005110:	dfc00217 	ldw	ra,8(sp)
10005114:	df000117 	ldw	fp,4(sp)
10005118:	dc000017 	ldw	r16,0(sp)
1000511c:	dec00304 	addi	sp,sp,12
10005120:	f800283a 	ret

10005124 <findexplosionPoint>:
// 	cannonBall.y_pos = mid_y;
// 	return;
// }


void findexplosionPoint(){
10005124:	defff304 	addi	sp,sp,-52
10005128:	dfc00c15 	stw	ra,48(sp)
1000512c:	df000b15 	stw	fp,44(sp)
10005130:	dc400a15 	stw	r17,40(sp)
10005134:	dc000915 	stw	r16,36(sp)
10005138:	df000b04 	addi	fp,sp,44
    int air_x, air_y, ground_x, ground_y, mid_x, mid_y;
    air_x = cannonBall.x_pos - cannonBall.v_x;
1000513c:	00840674 	movhi	r2,4121
10005140:	1090e204 	addi	r2,r2,17288
10005144:	10c00117 	ldw	r3,4(r2)
10005148:	00840674 	movhi	r2,4121
1000514c:	1090e204 	addi	r2,r2,17288
10005150:	10800417 	ldw	r2,16(r2)
10005154:	1885c83a 	sub	r2,r3,r2
10005158:	e0bff615 	stw	r2,-40(fp)
    air_y = cannonBall.y_pos - cannonBall.v_y + GRAVITY;
1000515c:	00840674 	movhi	r2,4121
10005160:	1090e204 	addi	r2,r2,17288
10005164:	10c00017 	ldw	r3,0(r2)
10005168:	00840674 	movhi	r2,4121
1000516c:	1090e204 	addi	r2,r2,17288
10005170:	10800517 	ldw	r2,20(r2)
10005174:	1885c83a 	sub	r2,r3,r2
10005178:	108000c4 	addi	r2,r2,3
1000517c:	e0bff715 	stw	r2,-36(fp)
    
    ground_x = cannonBall.x_pos;
10005180:	00840674 	movhi	r2,4121
10005184:	1090e204 	addi	r2,r2,17288
10005188:	10800117 	ldw	r2,4(r2)
1000518c:	e0bff815 	stw	r2,-32(fp)
    ground_y = cannonBall.y_pos;
10005190:	00840674 	movhi	r2,4121
10005194:	1090e204 	addi	r2,r2,17288
10005198:	10800017 	ldw	r2,0(r2)
1000519c:	e0bff915 	stw	r2,-28(fp)
    // printf("Air x %d, Air y %d \n", air_x, air_y);
    // printf("Ground x %d, Ground y %d \n", ground_x, ground_y);
    double slope;
    slope = (air_x - ground_x) / (air_y - ground_y);
100051a0:	e0fff617 	ldw	r3,-40(fp)
100051a4:	e0bff817 	ldw	r2,-32(fp)
100051a8:	1889c83a 	sub	r4,r3,r2
100051ac:	e0fff717 	ldw	r3,-36(fp)
100051b0:	e0bff917 	ldw	r2,-28(fp)
100051b4:	1885c83a 	sub	r2,r3,r2
100051b8:	100b883a 	mov	r5,r2
100051bc:	00095480 	call	10009548 <__divsi3>
100051c0:	1009883a 	mov	r4,r2
100051c4:	000bcec0 	call	1000bcec <__floatsidf>
100051c8:	1009883a 	mov	r4,r2
100051cc:	180b883a 	mov	r5,r3
100051d0:	e13ffa15 	stw	r4,-24(fp)
100051d4:	e17ffb15 	stw	r5,-20(fp)
    int delta_y, delta_x;
    delta_y = ((air_y - ground_y) >= 0) ? (air_y -ground_y) : (ground_y - air_y);
100051d8:	e0fff717 	ldw	r3,-36(fp)
100051dc:	e0bff917 	ldw	r2,-28(fp)
100051e0:	1885c83a 	sub	r2,r3,r2
100051e4:	1000010e 	bge	r2,zero,100051ec <findexplosionPoint+0xc8>
100051e8:	0085c83a 	sub	r2,zero,r2
100051ec:	e0bffc15 	stw	r2,-16(fp)
    for( int y = 0; y <= delta_y; y++){
100051f0:	e03ff515 	stw	zero,-44(fp)
100051f4:	00003206 	br	100052c0 <findexplosionPoint+0x19c>
        delta_x = y * slope;
100051f8:	e13ff517 	ldw	r4,-44(fp)
100051fc:	000bcec0 	call	1000bcec <__floatsidf>
10005200:	1011883a 	mov	r8,r2
10005204:	1813883a 	mov	r9,r3
10005208:	e1bffa17 	ldw	r6,-24(fp)
1000520c:	e1fffb17 	ldw	r7,-20(fp)
10005210:	4009883a 	mov	r4,r8
10005214:	480b883a 	mov	r5,r9
10005218:	000ab040 	call	1000ab04 <__muldf3>
1000521c:	1009883a 	mov	r4,r2
10005220:	180b883a 	mov	r5,r3
10005224:	2005883a 	mov	r2,r4
10005228:	2807883a 	mov	r3,r5
1000522c:	1009883a 	mov	r4,r2
10005230:	180b883a 	mov	r5,r3
10005234:	000bc6c0 	call	1000bc6c <__fixdfsi>
10005238:	e0bffd15 	stw	r2,-12(fp)
        // printf("The checked x %d, check y %d \n", (air_x - delta_x), (air_y - y));
        if((ground.validGround[air_x - delta_x][air_y - y]) == 1){
1000523c:	e0fff617 	ldw	r3,-40(fp)
10005240:	e0bffd17 	ldw	r2,-12(fp)
10005244:	1889c83a 	sub	r4,r3,r2
10005248:	e0fff717 	ldw	r3,-36(fp)
1000524c:	e0bff517 	ldw	r2,-44(fp)
10005250:	18a3c83a 	sub	r17,r3,r2
10005254:	040400b4 	movhi	r16,4098
10005258:	8434c404 	addi	r16,r16,-11504
1000525c:	01407804 	movi	r5,480
10005260:	00096fc0 	call	100096fc <__mulsi3>
10005264:	1445883a 	add	r2,r2,r17
10005268:	1085883a 	add	r2,r2,r2
1000526c:	1085883a 	add	r2,r2,r2
10005270:	8085883a 	add	r2,r16,r2
10005274:	10800017 	ldw	r2,0(r2)
10005278:	10800058 	cmpnei	r2,r2,1
1000527c:	10000d1e 	bne	r2,zero,100052b4 <findexplosionPoint+0x190>
            cannonBall.x_pos = air_x - delta_x;
10005280:	e0fff617 	ldw	r3,-40(fp)
10005284:	e0bffd17 	ldw	r2,-12(fp)
10005288:	1887c83a 	sub	r3,r3,r2
1000528c:	00840674 	movhi	r2,4121
10005290:	1090e204 	addi	r2,r2,17288
10005294:	10c00115 	stw	r3,4(r2)
	        cannonBall.y_pos = air_y - y;
10005298:	e0fff717 	ldw	r3,-36(fp)
1000529c:	e0bff517 	ldw	r2,-44(fp)
100052a0:	1887c83a 	sub	r3,r3,r2
100052a4:	00840674 	movhi	r2,4121
100052a8:	1090e204 	addi	r2,r2,17288
100052ac:	10c00015 	stw	r3,0(r2)
            break;
100052b0:	00000606 	br	100052cc <findexplosionPoint+0x1a8>
    // printf("Ground x %d, Ground y %d \n", ground_x, ground_y);
    double slope;
    slope = (air_x - ground_x) / (air_y - ground_y);
    int delta_y, delta_x;
    delta_y = ((air_y - ground_y) >= 0) ? (air_y -ground_y) : (ground_y - air_y);
    for( int y = 0; y <= delta_y; y++){
100052b4:	e0bff517 	ldw	r2,-44(fp)
100052b8:	10800044 	addi	r2,r2,1
100052bc:	e0bff515 	stw	r2,-44(fp)
100052c0:	e0bff517 	ldw	r2,-44(fp)
100052c4:	e0fffc17 	ldw	r3,-16(fp)
100052c8:	18bfcb0e 	bge	r3,r2,100051f8 <__alt_data_end+0xf80051f8>
            cannonBall.x_pos = air_x - delta_x;
	        cannonBall.y_pos = air_y - y;
            break;
        }
    }
	return;
100052cc:	0001883a 	nop
}
100052d0:	e6fffe04 	addi	sp,fp,-8
100052d4:	dfc00317 	ldw	ra,12(sp)
100052d8:	df000217 	ldw	fp,8(sp)
100052dc:	dc400117 	ldw	r17,4(sp)
100052e0:	dc000017 	ldw	r16,0(sp)
100052e4:	dec00404 	addi	sp,sp,16
100052e8:	f800283a 	ret

100052ec <setColorPalette>:
#include "text_mode_vga_color.h"



void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
100052ec:	defff904 	addi	sp,sp,-28
100052f0:	df000615 	stw	fp,24(sp)
100052f4:	df000604 	addi	fp,sp,24
100052f8:	2011883a 	mov	r8,r4
100052fc:	2809883a 	mov	r4,r5
10005300:	3007883a 	mov	r3,r6
10005304:	3805883a 	mov	r2,r7
10005308:	e23ffc05 	stb	r8,-16(fp)
1000530c:	e13ffd05 	stb	r4,-12(fp)
10005310:	e0fffe05 	stb	r3,-8(fp)
10005314:	e0bfff05 	stb	r2,-4(fp)
	red = red & 0x0f;
10005318:	e0bffd03 	ldbu	r2,-12(fp)
1000531c:	108003cc 	andi	r2,r2,15
10005320:	e0bffd05 	stb	r2,-12(fp)
	green = green & 0x0f;
10005324:	e0bffe03 	ldbu	r2,-8(fp)
10005328:	108003cc 	andi	r2,r2,15
1000532c:	e0bffe05 	stb	r2,-8(fp)
	blue = blue & 0x0f;
10005330:	e0bfff03 	ldbu	r2,-4(fp)
10005334:	108003cc 	andi	r2,r2,15
10005338:	e0bfff05 	stb	r2,-4(fp)
	if(color%2 == 0){	
1000533c:	e0bffc03 	ldbu	r2,-16(fp)
10005340:	1080004c 	andi	r2,r2,1
10005344:	10803fcc 	andi	r2,r2,255
10005348:	10000b1e 	bne	r2,zero,10005378 <setColorPalette+0x8c>
		vga->colorCombined = ((red << 8) | (green << 4) | blue) & 0xFFF ;
1000534c:	d0a00417 	ldw	r2,-32752(gp)
10005350:	e0fffd03 	ldbu	r3,-12(fp)
10005354:	1808923a 	slli	r4,r3,8
10005358:	e0fffe03 	ldbu	r3,-8(fp)
1000535c:	1806913a 	slli	r3,r3,4
10005360:	20c8b03a 	or	r4,r4,r3
10005364:	e0ffff03 	ldbu	r3,-4(fp)
10005368:	20c6b03a 	or	r3,r4,r3
1000536c:	18c3ffcc 	andi	r3,r3,4095
10005370:	10c06415 	stw	r3,400(r2)
		vga->VRAM[0x400+2*(color-1)+1] = temp2;
		vga->VRAM[0x400+2*(color-1)+2] = temp3;
		vga->VRAM[0x400+2*(color-1)+3] = temp4;
	}
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
}
10005374:	00003706 	br	10005454 <setColorPalette+0x168>
	blue = blue & 0x0f;
	if(color%2 == 0){	
		vga->colorCombined = ((red << 8) | (green << 4) | blue) & 0xFFF ;
	}
	else{
		alt_u32 temp = ((((red << 8) | (green << 4) | blue)<< 12) | vga->colorCombined) << 1;
10005378:	e0bffd03 	ldbu	r2,-12(fp)
1000537c:	1006923a 	slli	r3,r2,8
10005380:	e0bffe03 	ldbu	r2,-8(fp)
10005384:	1004913a 	slli	r2,r2,4
10005388:	1886b03a 	or	r3,r3,r2
1000538c:	e0bfff03 	ldbu	r2,-4(fp)
10005390:	1884b03a 	or	r2,r3,r2
10005394:	1004933a 	slli	r2,r2,12
10005398:	1007883a 	mov	r3,r2
1000539c:	d0a00417 	ldw	r2,-32752(gp)
100053a0:	10806417 	ldw	r2,400(r2)
100053a4:	1884b03a 	or	r2,r3,r2
100053a8:	1085883a 	add	r2,r2,r2
100053ac:	e0bffa15 	stw	r2,-24(fp)
		alt_u8 temp1 = temp & 0xff;
100053b0:	e0bffa17 	ldw	r2,-24(fp)
100053b4:	e0bffb05 	stb	r2,-20(fp)
		alt_u8 temp2 = (temp >> 8) & 0xff;
100053b8:	e0bffa17 	ldw	r2,-24(fp)
100053bc:	1004d23a 	srli	r2,r2,8
100053c0:	e0bffb45 	stb	r2,-19(fp)
		alt_u8 temp3 = (temp >> 16) & 0xff;
100053c4:	e0bffa17 	ldw	r2,-24(fp)
100053c8:	1004d43a 	srli	r2,r2,16
100053cc:	e0bffb85 	stb	r2,-18(fp)
		alt_u8 temp4 = (temp >> 24) & 0xff;
100053d0:	e0bffa17 	ldw	r2,-24(fp)
100053d4:	1004d63a 	srli	r2,r2,24
100053d8:	e0bffbc5 	stb	r2,-17(fp)
		vga->VRAM[0x400+2*(color-1)+0] = temp1;
100053dc:	d0e00417 	ldw	r3,-32752(gp)
100053e0:	e0bffc03 	ldbu	r2,-16(fp)
100053e4:	10807fc4 	addi	r2,r2,511
100053e8:	1085883a 	add	r2,r2,r2
100053ec:	1885883a 	add	r2,r3,r2
100053f0:	e0fffb03 	ldbu	r3,-20(fp)
100053f4:	10c00005 	stb	r3,0(r2)
		vga->VRAM[0x400+2*(color-1)+1] = temp2;
100053f8:	d0e00417 	ldw	r3,-32752(gp)
100053fc:	e0bffc03 	ldbu	r2,-16(fp)
10005400:	10807fc4 	addi	r2,r2,511
10005404:	1085883a 	add	r2,r2,r2
10005408:	10800044 	addi	r2,r2,1
1000540c:	1885883a 	add	r2,r3,r2
10005410:	e0fffb43 	ldbu	r3,-19(fp)
10005414:	10c00005 	stb	r3,0(r2)
		vga->VRAM[0x400+2*(color-1)+2] = temp3;
10005418:	d0e00417 	ldw	r3,-32752(gp)
1000541c:	e0bffc03 	ldbu	r2,-16(fp)
10005420:	10808004 	addi	r2,r2,512
10005424:	1085883a 	add	r2,r2,r2
10005428:	1885883a 	add	r2,r3,r2
1000542c:	e0fffb83 	ldbu	r3,-18(fp)
10005430:	10c00005 	stb	r3,0(r2)
		vga->VRAM[0x400+2*(color-1)+3] = temp4;
10005434:	d0e00417 	ldw	r3,-32752(gp)
10005438:	e0bffc03 	ldbu	r2,-16(fp)
1000543c:	10807fc4 	addi	r2,r2,511
10005440:	1085883a 	add	r2,r2,r2
10005444:	108000c4 	addi	r2,r2,3
10005448:	1885883a 	add	r2,r3,r2
1000544c:	e0fffbc3 	ldbu	r3,-17(fp)
10005450:	10c00005 	stb	r3,0(r2)
	}
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
}
10005454:	0001883a 	nop
10005458:	e037883a 	mov	sp,fp
1000545c:	df000017 	ldw	fp,0(sp)
10005460:	dec00104 	addi	sp,sp,4
10005464:	f800283a 	ret

10005468 <textVGAColorScreenSaver>:


void textVGAColorScreenSaver()
{
10005468:	defff904 	addi	sp,sp,-28
1000546c:	dfc00615 	stw	ra,24(sp)
10005470:	df000515 	stw	fp,20(sp)
10005474:	dcc00415 	stw	r19,16(sp)
10005478:	dc800315 	stw	r18,12(sp)
1000547c:	dc400215 	stw	r17,8(sp)
10005480:	dc000115 	stw	r16,4(sp)
10005484:	df000504 	addi	fp,sp,20
	//This is the function you call for your week 2 demo

//	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
10005488:	e03ffb15 	stw	zero,-20(fp)
1000548c:	00002806 	br	10005530 <textVGAColorScreenSaver+0xc8>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
10005490:	e0bffb17 	ldw	r2,-20(fp)
10005494:	14403fcc 	andi	r17,r2,255
10005498:	040400b4 	movhi	r16,4098
1000549c:	84255204 	addi	r16,r16,-27320
100054a0:	e0bffb17 	ldw	r2,-20(fp)
100054a4:	014005c4 	movi	r5,23
100054a8:	1009883a 	mov	r4,r2
100054ac:	00096fc0 	call	100096fc <__mulsi3>
100054b0:	8085883a 	add	r2,r16,r2
100054b4:	10800504 	addi	r2,r2,20
100054b8:	10800003 	ldbu	r2,0(r2)
100054bc:	14803fcc 	andi	r18,r2,255
100054c0:	040400b4 	movhi	r16,4098
100054c4:	84255204 	addi	r16,r16,-27320
100054c8:	e0bffb17 	ldw	r2,-20(fp)
100054cc:	014005c4 	movi	r5,23
100054d0:	1009883a 	mov	r4,r2
100054d4:	00096fc0 	call	100096fc <__mulsi3>
100054d8:	8085883a 	add	r2,r16,r2
100054dc:	10800544 	addi	r2,r2,21
100054e0:	10800003 	ldbu	r2,0(r2)
100054e4:	14c03fcc 	andi	r19,r2,255
100054e8:	040400b4 	movhi	r16,4098
100054ec:	84255204 	addi	r16,r16,-27320
100054f0:	e0bffb17 	ldw	r2,-20(fp)
100054f4:	014005c4 	movi	r5,23
100054f8:	1009883a 	mov	r4,r2
100054fc:	00096fc0 	call	100096fc <__mulsi3>
10005500:	8085883a 	add	r2,r16,r2
10005504:	10800584 	addi	r2,r2,22
10005508:	10800003 	ldbu	r2,0(r2)
1000550c:	10803fcc 	andi	r2,r2,255
10005510:	100f883a 	mov	r7,r2
10005514:	980d883a 	mov	r6,r19
10005518:	900b883a 	mov	r5,r18
1000551c:	8809883a 	mov	r4,r17
10005520:	00052ec0 	call	100052ec <setColorPalette>
{
	//This is the function you call for your week 2 demo

//	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
10005524:	e0bffb17 	ldw	r2,-20(fp)
10005528:	10800044 	addi	r2,r2,1
1000552c:	e0bffb15 	stw	r2,-20(fp)
10005530:	e0bffb17 	ldw	r2,-20(fp)
10005534:	10800410 	cmplti	r2,r2,16
10005538:	103fd51e 	bne	r2,zero,10005490 <__alt_data_end+0xf8005490>
	// 	x = rand() % (80-strlen(color_string));
	// 	y = rand() % 30;
	// 	textVGADrawColorText (color_string, x, y, bg, fg);
	// 	usleep (1000000);
	// }
}
1000553c:	0001883a 	nop
10005540:	e6fffc04 	addi	sp,fp,-16
10005544:	dfc00517 	ldw	ra,20(sp)
10005548:	df000417 	ldw	fp,16(sp)
1000554c:	dcc00317 	ldw	r19,12(sp)
10005550:	dc800217 	ldw	r18,8(sp)
10005554:	dc400117 	ldw	r17,4(sp)
10005558:	dc000017 	ldw	r16,0(sp)
1000555c:	dec00604 	addi	sp,sp,24
10005560:	f800283a 	ret

10005564 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
10005564:	deffff04 	addi	sp,sp,-4
10005568:	df000015 	stw	fp,0(sp)
1000556c:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10005570:	00801c04 	movi	r2,112
10005574:	00c00044 	movi	r3,1
10005578:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
1000557c:	00802004 	movi	r2,128
10005580:	00c00044 	movi	r3,1
10005584:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10005588:	00801404 	movi	r2,80
1000558c:	00c00044 	movi	r3,1
10005590:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
10005594:	00801804 	movi	r2,96
10005598:	00c00044 	movi	r3,1
1000559c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100055a0:	00800c04 	movi	r2,48
100055a4:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100055a8:	00801004 	movi	r2,64
100055ac:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100055b0:	00802004 	movi	r2,128
100055b4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100055b8:	00801c04 	movi	r2,112
100055bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100055c0:	00801c04 	movi	r2,112
100055c4:	00c00044 	movi	r3,1
100055c8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100055cc:	00802004 	movi	r2,128
100055d0:	00c00044 	movi	r3,1
100055d4:	10c00005 	stb	r3,0(r2)
}
100055d8:	0001883a 	nop
100055dc:	e037883a 	mov	sp,fp
100055e0:	df000017 	ldw	fp,0(sp)
100055e4:	dec00104 	addi	sp,sp,4
100055e8:	f800283a 	ret

100055ec <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
100055ec:	defffd04 	addi	sp,sp,-12
100055f0:	df000215 	stw	fp,8(sp)
100055f4:	df000204 	addi	fp,sp,8
100055f8:	2007883a 	mov	r3,r4
100055fc:	2805883a 	mov	r2,r5
10005600:	e0fffe05 	stb	r3,-8(fp)
10005604:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10005608:	00800c04 	movi	r2,48
1000560c:	e0fffe03 	ldbu	r3,-8(fp)
10005610:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10005614:	00802004 	movi	r2,128
10005618:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
1000561c:	00801804 	movi	r2,96
10005620:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
10005624:	00801004 	movi	r2,64
10005628:	e0ffff0b 	ldhu	r3,-4(fp)
1000562c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
10005630:	00801804 	movi	r2,96
10005634:	00c00044 	movi	r3,1
10005638:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
1000563c:	00802004 	movi	r2,128
10005640:	00c00044 	movi	r3,1
10005644:	10c00005 	stb	r3,0(r2)
}
10005648:	0001883a 	nop
1000564c:	e037883a 	mov	sp,fp
10005650:	df000017 	ldw	fp,0(sp)
10005654:	dec00104 	addi	sp,sp,4
10005658:	f800283a 	ret

1000565c <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
1000565c:	defffd04 	addi	sp,sp,-12
10005660:	df000215 	stw	fp,8(sp)
10005664:	df000204 	addi	fp,sp,8
10005668:	2005883a 	mov	r2,r4
1000566c:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	*otg_hpi_address = Address;
10005670:	00800c04 	movi	r2,48
10005674:	e0ffff03 	ldbu	r3,-4(fp)
10005678:	10c00015 	stw	r3,0(r2)
	*otg_hpi_r = 0;
1000567c:	00801404 	movi	r2,80
10005680:	10000005 	stb	zero,0(r2)
	*otg_hpi_cs = 0;
10005684:	00802004 	movi	r2,128
10005688:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
1000568c:	00801004 	movi	r2,64
10005690:	10800017 	ldw	r2,0(r2)
10005694:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
10005698:	00801404 	movi	r2,80
1000569c:	00c00044 	movi	r3,1
100056a0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100056a4:	00802004 	movi	r2,128
100056a8:	00c00044 	movi	r3,1
100056ac:	10c00005 	stb	r3,0(r2)
	return temp;
100056b0:	e0bffe0b 	ldhu	r2,-8(fp)
}
100056b4:	e037883a 	mov	sp,fp
100056b8:	df000017 	ldw	fp,0(sp)
100056bc:	dec00104 	addi	sp,sp,4
100056c0:	f800283a 	ret

100056c4 <main>:
//----------------------------------------------------------------------------------------//
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void){
100056c4:	defff904 	addi	sp,sp,-28
100056c8:	dfc00615 	stw	ra,24(sp)
100056cc:	df000515 	stw	fp,20(sp)
100056d0:	df000504 	addi	fp,sp,20
	//printf("initstart...\n\n");
	// display_init();
	// *keycode_base = 0x01 & 0xff;
	//printf("return from the init...\n\n");
	
	gameInit();
100056d4:	00024f80 	call	100024f8 <gameInit>
	textVGAColorScreenSaver();
100056d8:	00054680 	call	10005468 <textVGAColorScreenSaver>
	IO_init();
100056dc:	00055640 	call	10005564 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100056e0:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
100056e4:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
100056e8:	e03ffb85 	stb	zero,-18(fp)

	//printf("USB keyboard setup...\n\n");

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100056ec:	00062680 	call	10006268 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100056f0:	000b883a 	mov	r5,zero
100056f4:	01005104 	movi	r4,324
100056f8:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100056fc:	017fffd4 	movui	r5,65535
10005700:	01302414 	movui	r4,49296
10005704:	00061cc0 	call	100061cc <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10005708:	01409604 	movi	r5,600
1000570c:	01006d04 	movi	r4,436
10005710:	00061cc0 	call	100061cc <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10005714:	00811004 	movi	r2,1088
10005718:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
1000571c:	e0bffb0b 	ldhu	r2,-20(fp)
10005720:	100b883a 	mov	r5,r2
10005724:	01005084 	movi	r4,322
10005728:	00061cc0 	call	100061cc <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
1000572c:	00808404 	movi	r2,528
10005730:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10005734:	e0bffe0b 	ldhu	r2,-8(fp)
10005738:	100b883a 	mov	r5,r2
1000573c:	01302314 	movui	r4,49292
10005740:	00061cc0 	call	100061cc <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10005744:	000b883a 	mov	r5,zero
10005748:	01007104 	movi	r4,452
1000574c:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10005750:	000b883a 	mov	r5,zero
10005754:	01007184 	movi	r4,454
10005758:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
1000575c:	000b883a 	mov	r5,zero
10005760:	01007204 	movi	r4,456
10005764:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10005768:	000b883a 	mov	r5,zero
1000576c:	01007284 	movi	r4,458
10005770:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10005774:	000b883a 	mov	r5,zero
10005778:	01007304 	movi	r4,460
1000577c:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10005780:	000b883a 	mov	r5,zero
10005784:	01007384 	movi	r4,462
10005788:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
1000578c:	000b883a 	mov	r5,zero
10005790:	01007404 	movi	r4,464
10005794:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10005798:	000b883a 	mov	r5,zero
1000579c:	01007484 	movi	r4,466
100057a0:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100057a4:	000b883a 	mov	r5,zero
100057a8:	01007504 	movi	r4,468
100057ac:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100057b0:	000b883a 	mov	r5,zero
100057b4:	01007584 	movi	r4,470
100057b8:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100057bc:	000b883a 	mov	r5,zero
100057c0:	01007604 	movi	r4,472
100057c4:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100057c8:	000b883a 	mov	r5,zero
100057cc:	01007684 	movi	r4,474
100057d0:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100057d4:	000b883a 	mov	r5,zero
100057d8:	01007704 	movi	r4,476
100057dc:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100057e0:	000b883a 	mov	r5,zero
100057e4:	01007784 	movi	r4,478
100057e8:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100057ec:	01401c84 	movi	r5,114
100057f0:	01007084 	movi	r4,450
100057f4:	00061cc0 	call	100061cc <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100057f8:	01738054 	movui	r5,52737
100057fc:	01000044 	movi	r4,1
10005800:	00055ec0 	call	100055ec <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10005804:	0001883a 	nop
10005808:	010000c4 	movi	r4,3
1000580c:	000565c0 	call	1000565c <IO_read>
10005810:	10bfffcc 	andi	r2,r2,65535
10005814:	103ffc26 	beq	r2,zero,10005808 <__alt_data_end+0xf8005808>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10005818:	00000806 	br	1000583c <main+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
1000581c:	01000044 	movi	r4,1
10005820:	000565c0 	call	1000565c <IO_read>
10005824:	10bfffcc 	andi	r2,r2,65535
10005828:	100b883a 	mov	r5,r2
1000582c:	010400b4 	movhi	r4,4098
10005830:	21233304 	addi	r4,r4,-29492
10005834:	000bfa40 	call	1000bfa4 <printf>
		goto USB_HOT_PLUG;
10005838:	003fac06 	br	100056ec <__alt_data_end+0xf80056ec>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000583c:	01000044 	movi	r4,1
10005840:	000565c0 	call	1000565c <IO_read>
10005844:	10bfffcc 	andi	r2,r2,65535
10005848:	1083fb58 	cmpnei	r2,r2,4077
1000584c:	103ff31e 	bne	r2,zero,1000581c <__alt_data_end+0xf800581c>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10005850:	010400b4 	movhi	r4,4098
10005854:	21233c04 	addi	r4,r4,-29456
10005858:	000bfa40 	call	1000bfa4 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
1000585c:	01401d04 	movi	r5,116
10005860:	01007084 	movi	r4,450
10005864:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10005868:	01400f04 	movi	r5,60
1000586c:	01007104 	movi	r4,452
10005870:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10005874:	000b883a 	mov	r5,zero
10005878:	01007184 	movi	r4,454
1000587c:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10005880:	000b883a 	mov	r5,zero
10005884:	01007204 	movi	r4,456
10005888:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
1000588c:	000b883a 	mov	r5,zero
10005890:	01007284 	movi	r4,458
10005894:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10005898:	000b883a 	mov	r5,zero
1000589c:	01007304 	movi	r4,460
100058a0:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100058a4:	000b883a 	mov	r5,zero
100058a8:	01007384 	movi	r4,462
100058ac:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100058b0:	000b883a 	mov	r5,zero
100058b4:	01007404 	movi	r4,464
100058b8:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100058bc:	000b883a 	mov	r5,zero
100058c0:	01007484 	movi	r4,466
100058c4:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100058c8:	000b883a 	mov	r5,zero
100058cc:	01007504 	movi	r4,468
100058d0:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100058d4:	000b883a 	mov	r5,zero
100058d8:	01007584 	movi	r4,470
100058dc:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100058e0:	000b883a 	mov	r5,zero
100058e4:	01007604 	movi	r4,472
100058e8:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100058ec:	000b883a 	mov	r5,zero
100058f0:	01007684 	movi	r4,474
100058f4:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100058f8:	000b883a 	mov	r5,zero
100058fc:	01007704 	movi	r4,476
10005900:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10005904:	000b883a 	mov	r5,zero
10005908:	01007784 	movi	r4,478
1000590c:	00061cc0 	call	100061cc <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10005910:	01738054 	movui	r5,52737
10005914:	01000044 	movi	r4,1
10005918:	00055ec0 	call	100055ec <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000591c:	0001883a 	nop
10005920:	01000044 	movi	r4,1
10005924:	000565c0 	call	1000565c <IO_read>
10005928:	10bfffcc 	andi	r2,r2,65535
1000592c:	1083fb58 	cmpnei	r2,r2,4077
10005930:	10000826 	beq	r2,zero,10005954 <main+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10005934:	01000044 	movi	r4,1
10005938:	000565c0 	call	1000565c <IO_read>
1000593c:	10bfffcc 	andi	r2,r2,65535
10005940:	100b883a 	mov	r5,r2
10005944:	010400b4 	movhi	r4,4098
10005948:	21233304 	addi	r4,r4,-29492
1000594c:	000bfa40 	call	1000bfa4 <printf>
		goto USB_HOT_PLUG;
10005950:	003f6606 	br	100056ec <__alt_data_end+0xf80056ec>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10005954:	00b02284 	movi	r2,-16246
10005958:	d0a7f60d 	sth	r2,-24616(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
1000595c:	008c0004 	movi	r2,12288
10005960:	d0a7f68d 	sth	r2,-24614(gp)
	fs_device = A_DP_STAT;
10005964:	00880004 	movi	r2,8192
10005968:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
1000596c:	d0a7f60b 	ldhu	r2,-24616(gp)
10005970:	10bfffcc 	andi	r2,r2,65535
10005974:	1009883a 	mov	r4,r2
10005978:	00062240 	call	10006224 <UsbRead>
1000597c:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
10005980:	d0a7f68b 	ldhu	r2,-24614(gp)
10005984:	e0fffb0b 	ldhu	r3,-20(fp)
10005988:	1884703a 	and	r2,r3,r2
1000598c:	10bfffcc 	andi	r2,r2,65535
10005990:	1000351e 	bne	r2,zero,10005a68 <main+0x3a4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10005994:	e03ffbc5 	stb	zero,-17(fp)
10005998:	00000f06 	br	100059d8 <main+0x314>
		{
			usleep(5*1000);
1000599c:	0104e204 	movi	r4,5000
100059a0:	0016ce00 	call	10016ce0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100059a4:	d0a7f60b 	ldhu	r2,-24616(gp)
100059a8:	10bfffcc 	andi	r2,r2,65535
100059ac:	1009883a 	mov	r4,r2
100059b0:	00062240 	call	10006224 <UsbRead>
100059b4:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
100059b8:	d0a7f68b 	ldhu	r2,-24614(gp)
100059bc:	e0fffb0b 	ldhu	r3,-20(fp)
100059c0:	1884703a 	and	r2,r3,r2
100059c4:	10bfffcc 	andi	r2,r2,65535
100059c8:	1000071e 	bne	r2,zero,100059e8 <main+0x324>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100059cc:	e0bffbc3 	ldbu	r2,-17(fp)
100059d0:	10800044 	addi	r2,r2,1
100059d4:	e0bffbc5 	stb	r2,-17(fp)
100059d8:	e0bffbc3 	ldbu	r2,-17(fp)
100059dc:	10800170 	cmpltui	r2,r2,5
100059e0:	103fee1e 	bne	r2,zero,1000599c <__alt_data_end+0xf800599c>
100059e4:	00000106 	br	100059ec <main+0x328>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
100059e8:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
100059ec:	d0a7f68b 	ldhu	r2,-24614(gp)
100059f0:	e0fffb0b 	ldhu	r3,-20(fp)
100059f4:	1884703a 	and	r2,r3,r2
100059f8:	10bfffcc 	andi	r2,r2,65535
100059fc:	1000261e 	bne	r2,zero,10005a98 <main+0x3d4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10005a00:	010400b4 	movhi	r4,4098
10005a04:	21234004 	addi	r4,r4,-29440
10005a08:	000c0a00 	call	1000c0a0 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10005a0c:	010400b4 	movhi	r4,4098
10005a10:	21234a04 	addi	r4,r4,-29400
10005a14:	000c0a00 	call	1000c0a0 <puts>
			while (!(usb_ctl_val & no_device))
10005a18:	00000d06 	br	10005a50 <main+0x38c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10005a1c:	d0a7f60b 	ldhu	r2,-24616(gp)
10005a20:	10bfffcc 	andi	r2,r2,65535
10005a24:	1009883a 	mov	r4,r2
10005a28:	00062240 	call	10006224 <UsbRead>
10005a2c:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
10005a30:	d0a7f68b 	ldhu	r2,-24614(gp)
10005a34:	e0fffb0b 	ldhu	r3,-20(fp)
10005a38:	1884703a 	and	r2,r3,r2
10005a3c:	10bfffcc 	andi	r2,r2,65535
10005a40:	10000126 	beq	r2,zero,10005a48 <main+0x384>
					goto USB_HOT_PLUG;
10005a44:	003f2906 	br	100056ec <__alt_data_end+0xf80056ec>

				usleep(2000);
10005a48:	0101f404 	movi	r4,2000
10005a4c:	0016ce00 	call	10016ce0 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10005a50:	d0a7f68b 	ldhu	r2,-24614(gp)
10005a54:	e0fffb0b 	ldhu	r3,-20(fp)
10005a58:	1884703a 	and	r2,r3,r2
10005a5c:	10bfffcc 	andi	r2,r2,65535
10005a60:	103fee26 	beq	r2,zero,10005a1c <__alt_data_end+0xf8005a1c>
10005a64:	00000c06 	br	10005a98 <main+0x3d4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10005a68:	e0fffb0b 	ldhu	r3,-20(fp)
10005a6c:	e0bffc0b 	ldhu	r2,-16(fp)
10005a70:	1884703a 	and	r2,r3,r2
10005a74:	10bfffcc 	andi	r2,r2,65535
10005a78:	10000426 	beq	r2,zero,10005a8c <main+0x3c8>
		{
			printf("[INFO]: full speed device\n");
10005a7c:	010400b4 	movhi	r4,4098
10005a80:	21235604 	addi	r4,r4,-29352
10005a84:	000c0a00 	call	1000c0a0 <puts>
10005a88:	00000306 	br	10005a98 <main+0x3d4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10005a8c:	010400b4 	movhi	r4,4098
10005a90:	21235d04 	addi	r4,r4,-29324
10005a94:	000c0a00 	call	1000c0a0 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10005a98:	000631c0 	call	1000631c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005a9c:	00000306 	br	10005aac <main+0x3e8>
	{
		UsbSetAddress();
10005aa0:	000631c0 	call	1000631c <UsbSetAddress>
		usleep(10*1000);
10005aa4:	0109c404 	movi	r4,10000
10005aa8:	0016ce00 	call	10016ce0 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005aac:	010000c4 	movi	r4,3
10005ab0:	000565c0 	call	1000565c <IO_read>
10005ab4:	10bfffcc 	andi	r2,r2,65535
10005ab8:	1080040c 	andi	r2,r2,16
10005abc:	103ff826 	beq	r2,zero,10005aa0 <__alt_data_end+0xf8005aa0>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005ac0:	00071bc0 	call	100071bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10005ac4:	01414184 	movi	r5,1286
10005ac8:	01000084 	movi	r4,2
10005acc:	00055ec0 	call	100055ec <IO_write>
	//printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508); // n
10005ad0:	01414204 	movi	r5,1288
10005ad4:	01000084 	movi	r4,2
10005ad8:	00055ec0 	call	100055ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005adc:	0009883a 	mov	r4,zero
10005ae0:	000565c0 	call	1000565c <IO_read>
10005ae4:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03) // retries occurred
10005ae8:	e0bffb0b 	ldhu	r2,-20(fp)
10005aec:	108000e0 	cmpeqi	r2,r2,3
10005af0:	1000031e 	bne	r2,zero,10005b00 <main+0x43c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005af4:	00072400 	call	10007240 <UsbGetRetryCnt>
10005af8:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
10005afc:	003efb06 	br	100056ec <__alt_data_end+0xf80056ec>
	//printf("------------[ENUM PROCESS]:set address done!---------------\n");

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10005b00:	000641c0 	call	1000641c <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005b04:	00000306 	br	10005b14 <main+0x450>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10005b08:	000641c0 	call	1000641c <UsbGetDeviceDesc1>
		usleep(10*1000);
10005b0c:	0109c404 	movi	r4,10000
10005b10:	0016ce00 	call	10016ce0 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005b14:	010000c4 	movi	r4,3
10005b18:	000565c0 	call	1000565c <IO_read>
10005b1c:	10bfffcc 	andi	r2,r2,65535
10005b20:	1080040c 	andi	r2,r2,16
10005b24:	103ff826 	beq	r2,zero,10005b08 <__alt_data_end+0xf8005b08>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005b28:	00071bc0 	call	100071bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10005b2c:	01414184 	movi	r5,1286
10005b30:	01000084 	movi	r4,2
10005b34:	00055ec0 	call	100055ec <IO_write>
	//printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
10005b38:	01414204 	movi	r5,1288
10005b3c:	01000084 	movi	r4,2
10005b40:	00055ec0 	call	100055ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005b44:	0009883a 	mov	r4,zero
10005b48:	000565c0 	call	1000565c <IO_read>
10005b4c:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005b50:	00000206 	br	10005b5c <main+0x498>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005b54:	00072400 	call	10007240 <UsbGetRetryCnt>
10005b58:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	//printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005b5c:	e0bffb0b 	ldhu	r2,-20(fp)
10005b60:	108000d8 	cmpnei	r2,r2,3
10005b64:	103ffb1e 	bne	r2,zero,10005b54 <__alt_data_end+0xf8005b54>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10005b68:	00065640 	call	10006564 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005b6c:	00000306 	br	10005b7c <main+0x4b8>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10005b70:	00065640 	call	10006564 <UsbGetDeviceDesc2>
		usleep(10*1000);
10005b74:	0109c404 	movi	r4,10000
10005b78:	0016ce00 	call	10016ce0 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005b7c:	010000c4 	movi	r4,3
10005b80:	000565c0 	call	1000565c <IO_read>
10005b84:	10bfffcc 	andi	r2,r2,65535
10005b88:	1080040c 	andi	r2,r2,16
10005b8c:	103ff826 	beq	r2,zero,10005b70 <__alt_data_end+0xf8005b70>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005b90:	00071bc0 	call	100071bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10005b94:	01414184 	movi	r5,1286
10005b98:	01000084 	movi	r4,2
10005b9c:	00055ec0 	call	100055ec <IO_write>
	//printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
10005ba0:	01414204 	movi	r5,1288
10005ba4:	01000084 	movi	r4,2
10005ba8:	00055ec0 	call	100055ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005bac:	0009883a 	mov	r4,zero
10005bb0:	000565c0 	call	1000565c <IO_read>
10005bb4:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005bb8:	00000206 	br	10005bc4 <main+0x500>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005bbc:	00072400 	call	10007240 <UsbGetRetryCnt>
10005bc0:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	//printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005bc4:	e0bffb0b 	ldhu	r2,-20(fp)
10005bc8:	108000d8 	cmpnei	r2,r2,3
10005bcc:	103ffb1e 	bne	r2,zero,10005bbc <__alt_data_end+0xf8005bbc>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10005bd0:	000673c0 	call	1000673c <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005bd4:	00000306 	br	10005be4 <main+0x520>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10005bd8:	000673c0 	call	1000673c <UsbGetConfigDesc1>
		usleep(10*1000);
10005bdc:	0109c404 	movi	r4,10000
10005be0:	0016ce00 	call	10016ce0 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005be4:	010000c4 	movi	r4,3
10005be8:	000565c0 	call	1000565c <IO_read>
10005bec:	10bfffcc 	andi	r2,r2,65535
10005bf0:	1080040c 	andi	r2,r2,16
10005bf4:	103ff826 	beq	r2,zero,10005bd8 <__alt_data_end+0xf8005bd8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005bf8:	00071bc0 	call	100071bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10005bfc:	01414184 	movi	r5,1286
10005c00:	01000084 	movi	r4,2
10005c04:	00055ec0 	call	100055ec <IO_write>
	//printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
10005c08:	01414204 	movi	r5,1288
10005c0c:	01000084 	movi	r4,2
10005c10:	00055ec0 	call	100055ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005c14:	0009883a 	mov	r4,zero
10005c18:	000565c0 	call	1000565c <IO_read>
10005c1c:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005c20:	00000206 	br	10005c2c <main+0x568>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005c24:	00072400 	call	10007240 <UsbGetRetryCnt>
10005c28:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	//printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005c2c:	e0bffb0b 	ldhu	r2,-20(fp)
10005c30:	108000d8 	cmpnei	r2,r2,3
10005c34:	103ffb1e 	bne	r2,zero,10005c24 <__alt_data_end+0xf8005c24>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10005c38:	00068cc0 	call	100068cc <UsbGetConfigDesc2>

	usleep(100*1000);
10005c3c:	010000b4 	movhi	r4,2
10005c40:	2121a804 	addi	r4,r4,-31072
10005c44:	0016ce00 	call	10016ce0 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005c48:	00000306 	br	10005c58 <main+0x594>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10005c4c:	00068cc0 	call	100068cc <UsbGetConfigDesc2>
		usleep(10*1000);
10005c50:	0109c404 	movi	r4,10000
10005c54:	0016ce00 	call	10016ce0 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005c58:	010000c4 	movi	r4,3
10005c5c:	000565c0 	call	1000565c <IO_read>
10005c60:	10bfffcc 	andi	r2,r2,65535
10005c64:	1080040c 	andi	r2,r2,16
10005c68:	103ff826 	beq	r2,zero,10005c4c <__alt_data_end+0xf8005c4c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005c6c:	00071bc0 	call	100071bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10005c70:	01414184 	movi	r5,1286
10005c74:	01000084 	movi	r4,2
10005c78:	00055ec0 	call	100055ec <IO_write>
	//printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
10005c7c:	01414204 	movi	r5,1288
10005c80:	01000084 	movi	r4,2
10005c84:	00055ec0 	call	100055ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005c88:	0009883a 	mov	r4,zero
10005c8c:	000565c0 	call	1000565c <IO_read>
10005c90:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005c94:	00000206 	br	10005ca0 <main+0x5dc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005c98:	00072400 	call	10007240 <UsbGetRetryCnt>
10005c9c:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	//printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005ca0:	e0bffb0b 	ldhu	r2,-20(fp)
10005ca4:	108000d8 	cmpnei	r2,r2,3
10005ca8:	103ffb1e 	bne	r2,zero,10005c98 <__alt_data_end+0xf8005c98>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10005cac:	01415b04 	movi	r5,1388
10005cb0:	01000084 	movi	r4,2
10005cb4:	00055ec0 	call	100055ec <IO_write>
	code = IO_read(HPI_DATA);
10005cb8:	0009883a 	mov	r4,zero
10005cbc:	000565c0 	call	1000565c <IO_read>
10005cc0:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
10005cc4:	e0bffe8b 	ldhu	r2,-6(fp)
10005cc8:	108000cc 	andi	r2,r2,3
10005ccc:	e0bffe8d 	sth	r2,-6(fp)
	//printf("\ncode = %x\n", code);

	if (code == 0x01)
10005cd0:	e0bffe8b 	ldhu	r2,-6(fp)
10005cd4:	10800058 	cmpnei	r2,r2,1
10005cd8:	1000041e 	bne	r2,zero,10005cec <main+0x628>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10005cdc:	010400b4 	movhi	r4,4098
10005ce0:	21236404 	addi	r4,r4,-29296
10005ce4:	000c0a00 	call	1000c0a0 <puts>
10005ce8:	00000306 	br	10005cf8 <main+0x634>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10005cec:	010400b4 	movhi	r4,4098
10005cf0:	21237304 	addi	r4,r4,-29236
10005cf4:	000c0a00 	call	1000c0a0 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10005cf8:	01415d84 	movi	r5,1398
10005cfc:	01000084 	movi	r4,2
10005d00:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x073F);
10005d04:	0141cfc4 	movi	r5,1855
10005d08:	0009883a 	mov	r4,zero
10005d0c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x8105);
10005d10:	01604154 	movui	r5,33029
10005d14:	0009883a 	mov	r4,zero
10005d18:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0003);
10005d1c:	014000c4 	movi	r5,3
10005d20:	0009883a 	mov	r4,zero
10005d24:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);
10005d28:	01400204 	movi	r5,8
10005d2c:	0009883a 	mov	r4,zero
10005d30:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10005d34:	016b0294 	movui	r5,44042
10005d38:	0009883a 	mov	r4,zero
10005d3c:	00055ec0 	call	100055ec <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10005d40:	01415d84 	movi	r5,1398
10005d44:	01006c04 	movi	r4,432
10005d48:	00061cc0 	call	100061cc <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10005d4c:	01415f04 	movi	r5,1404
10005d50:	01000084 	movi	r4,2
10005d54:	00055ec0 	call	100055ec <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10005d58:	0009883a 	mov	r4,zero
10005d5c:	000565c0 	call	1000565c <IO_read>
10005d60:	e0bfff05 	stb	r2,-4(fp)
	//printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10005d64:	0006b340 	call	10006b34 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005d68:	00000306 	br	10005d78 <main+0x6b4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10005d6c:	0006b340 	call	10006b34 <UsbSetConfig>
		usleep(10*1000);
10005d70:	0109c404 	movi	r4,10000
10005d74:	0016ce00 	call	10016ce0 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005d78:	010000c4 	movi	r4,3
10005d7c:	000565c0 	call	1000565c <IO_read>
10005d80:	10bfffcc 	andi	r2,r2,65535
10005d84:	1080040c 	andi	r2,r2,16
10005d88:	103ff826 	beq	r2,zero,10005d6c <__alt_data_end+0xf8005d6c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005d8c:	00071bc0 	call	100071bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10005d90:	01414184 	movi	r5,1286
10005d94:	01000084 	movi	r4,2
10005d98:	00055ec0 	call	100055ec <IO_write>
	//printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
10005d9c:	01414204 	movi	r5,1288
10005da0:	01000084 	movi	r4,2
10005da4:	00055ec0 	call	100055ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005da8:	0009883a 	mov	r4,zero
10005dac:	000565c0 	call	1000565c <IO_read>
10005db0:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005db4:	00000206 	br	10005dc0 <main+0x6fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005db8:	00072400 	call	10007240 <UsbGetRetryCnt>
10005dbc:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	//printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005dc0:	e0bffb0b 	ldhu	r2,-20(fp)
10005dc4:	108000d8 	cmpnei	r2,r2,3
10005dc8:	103ffb1e 	bne	r2,zero,10005db8 <__alt_data_end+0xf8005db8>

	//printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10005dcc:	0006c340 	call	10006c34 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005dd0:	00000306 	br	10005de0 <main+0x71c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10005dd4:	0006c340 	call	10006c34 <UsbClassRequest>
		usleep(10*1000);
10005dd8:	0109c404 	movi	r4,10000
10005ddc:	0016ce00 	call	10016ce0 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005de0:	010000c4 	movi	r4,3
10005de4:	000565c0 	call	1000565c <IO_read>
10005de8:	10bfffcc 	andi	r2,r2,65535
10005dec:	1080040c 	andi	r2,r2,16
10005df0:	103ff826 	beq	r2,zero,10005dd4 <__alt_data_end+0xf8005dd4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005df4:	00071bc0 	call	100071bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10005df8:	01414184 	movi	r5,1286
10005dfc:	01000084 	movi	r4,2
10005e00:	00055ec0 	call	100055ec <IO_write>
	//printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
10005e04:	01414204 	movi	r5,1288
10005e08:	01000084 	movi	r4,2
10005e0c:	00055ec0 	call	100055ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005e10:	0009883a 	mov	r4,zero
10005e14:	000565c0 	call	1000565c <IO_read>
10005e18:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005e1c:	00000206 	br	10005e28 <main+0x764>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005e20:	00072400 	call	10007240 <UsbGetRetryCnt>
10005e24:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	//printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005e28:	e0bffb0b 	ldhu	r2,-20(fp)
10005e2c:	108000d8 	cmpnei	r2,r2,3
10005e30:	103ffb1e 	bne	r2,zero,10005e20 <__alt_data_end+0xf8005e20>
	//printf("------------[ENUM PROCESS]:class request out done!-------------------\n");

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10005e34:	0006d340 	call	10006d34 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005e38:	00000306 	br	10005e48 <main+0x784>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10005e3c:	0006d340 	call	10006d34 <UsbGetHidDesc>
		usleep(10*1000);
10005e40:	0109c404 	movi	r4,10000
10005e44:	0016ce00 	call	10016ce0 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005e48:	010000c4 	movi	r4,3
10005e4c:	000565c0 	call	1000565c <IO_read>
10005e50:	10bfffcc 	andi	r2,r2,65535
10005e54:	1080040c 	andi	r2,r2,16
10005e58:	103ff826 	beq	r2,zero,10005e3c <__alt_data_end+0xf8005e3c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005e5c:	00071bc0 	call	100071bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10005e60:	01414184 	movi	r5,1286
10005e64:	01000084 	movi	r4,2
10005e68:	00055ec0 	call	100055ec <IO_write>
	//printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
10005e6c:	01414204 	movi	r5,1288
10005e70:	01000084 	movi	r4,2
10005e74:	00055ec0 	call	100055ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005e78:	0009883a 	mov	r4,zero
10005e7c:	000565c0 	call	1000565c <IO_read>
10005e80:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005e84:	00000206 	br	10005e90 <main+0x7cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005e88:	00072400 	call	10007240 <UsbGetRetryCnt>
10005e8c:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	//printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005e90:	e0bffb0b 	ldhu	r2,-20(fp)
10005e94:	108000d8 	cmpnei	r2,r2,3
10005e98:	103ffb1e 	bne	r2,zero,10005e88 <__alt_data_end+0xf8005e88>
//	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10005e9c:	0006e7c0 	call	10006e7c <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005ea0:	00000306 	br	10005eb0 <main+0x7ec>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10005ea4:	0006e7c0 	call	10006e7c <UsbGetReportDesc>
		usleep(10*1000);
10005ea8:	0109c404 	movi	r4,10000
10005eac:	0016ce00 	call	10016ce0 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005eb0:	010000c4 	movi	r4,3
10005eb4:	000565c0 	call	1000565c <IO_read>
10005eb8:	10bfffcc 	andi	r2,r2,65535
10005ebc:	1080040c 	andi	r2,r2,16
10005ec0:	103ff826 	beq	r2,zero,10005ea4 <__alt_data_end+0xf8005ea4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10005ec4:	00071bc0 	call	100071bc <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10005ec8:	01414184 	movi	r5,1286
10005ecc:	01000084 	movi	r4,2
10005ed0:	00055ec0 	call	100055ec <IO_write>
	//printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
10005ed4:	01414204 	movi	r5,1288
10005ed8:	01000084 	movi	r4,2
10005edc:	00055ec0 	call	100055ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10005ee0:	0009883a 	mov	r4,zero
10005ee4:	000565c0 	call	1000565c <IO_read>
10005ee8:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005eec:	00000206 	br	10005ef8 <main+0x834>
	{
		usb_ctl_val = UsbGetRetryCnt();
10005ef0:	00072400 	call	10007240 <UsbGetRetryCnt>
10005ef4:	e0bffb0d 	sth	r2,-20(fp)
	//printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	//printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10005ef8:	e0bffb0b 	ldhu	r2,-20(fp)
10005efc:	108000d8 	cmpnei	r2,r2,3
10005f00:	103ffb1e 	bne	r2,zero,10005ef0 <__alt_data_end+0xf8005ef0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10005f04:	010400b4 	movhi	r4,4098
10005f08:	21237c04 	addi	r4,r4,-29200
10005f0c:	000c0a00 	call	1000c0a0 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10005f10:	0109c404 	movi	r4,10000
10005f14:	0016ce00 	call	10016ce0 <usleep>

	while(1)
	{
		toggle++;
10005f18:	e0bffb83 	ldbu	r2,-18(fp)
10005f1c:	10800044 	addi	r2,r2,1
10005f20:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10005f24:	01414004 	movi	r5,1280
10005f28:	01000084 	movi	r4,2
10005f2c:	00055ec0 	call	100055ec <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10005f30:	01414704 	movi	r5,1308
10005f34:	0009883a 	mov	r4,zero
10005f38:	00055ec0 	call	100055ec <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10005f3c:	e0bfff03 	ldbu	r2,-4(fp)
10005f40:	108003cc 	andi	r2,r2,15
10005f44:	100b883a 	mov	r5,r2
10005f48:	0009883a 	mov	r4,zero
10005f4c:	00055ec0 	call	100055ec <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10005f50:	0140a444 	movi	r5,657
10005f54:	0009883a 	mov	r4,zero
10005f58:	00055ec0 	call	100055ec <IO_write>
		if(toggle%2)
10005f5c:	e0bffb83 	ldbu	r2,-18(fp)
10005f60:	1080004c 	andi	r2,r2,1
10005f64:	10803fcc 	andi	r2,r2,255
10005f68:	10000426 	beq	r2,zero,10005f7c <main+0x8b8>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10005f6c:	01400044 	movi	r5,1
10005f70:	0009883a 	mov	r4,zero
10005f74:	00055ec0 	call	100055ec <IO_write>
10005f78:	00000306 	br	10005f88 <main+0x8c4>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10005f7c:	01401044 	movi	r5,65
10005f80:	0009883a 	mov	r4,zero
10005f84:	00055ec0 	call	100055ec <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10005f88:	014004c4 	movi	r5,19
10005f8c:	0009883a 	mov	r4,zero
10005f90:	00055ec0 	call	100055ec <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10005f94:	000b883a 	mov	r5,zero
10005f98:	0009883a 	mov	r4,zero
10005f9c:	00055ec0 	call	100055ec <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005fa0:	01414004 	movi	r5,1280
10005fa4:	01006c04 	movi	r4,432
10005fa8:	00061cc0 	call	100061cc <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10005fac:	00002406 	br	10006040 <main+0x97c>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10005fb0:	01414004 	movi	r5,1280
10005fb4:	01000084 	movi	r4,2
10005fb8:	00055ec0 	call	100055ec <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10005fbc:	01414704 	movi	r5,1308
10005fc0:	0009883a 	mov	r4,zero
10005fc4:	00055ec0 	call	100055ec <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10005fc8:	e0bfff03 	ldbu	r2,-4(fp)
10005fcc:	108003cc 	andi	r2,r2,15
10005fd0:	100b883a 	mov	r5,r2
10005fd4:	0009883a 	mov	r4,zero
10005fd8:	00055ec0 	call	100055ec <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10005fdc:	0140a444 	movi	r5,657
10005fe0:	0009883a 	mov	r4,zero
10005fe4:	00055ec0 	call	100055ec <IO_write>
			if(toggle%2)
10005fe8:	e0bffb83 	ldbu	r2,-18(fp)
10005fec:	1080004c 	andi	r2,r2,1
10005ff0:	10803fcc 	andi	r2,r2,255
10005ff4:	10000426 	beq	r2,zero,10006008 <main+0x944>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10005ff8:	01400044 	movi	r5,1
10005ffc:	0009883a 	mov	r4,zero
10006000:	00055ec0 	call	100055ec <IO_write>
10006004:	00000306 	br	10006014 <main+0x950>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10006008:	01401044 	movi	r5,65
1000600c:	0009883a 	mov	r4,zero
10006010:	00055ec0 	call	100055ec <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10006014:	014004c4 	movi	r5,19
10006018:	0009883a 	mov	r4,zero
1000601c:	00055ec0 	call	100055ec <IO_write>
			IO_write(HPI_DATA,0x0000);//
10006020:	000b883a 	mov	r5,zero
10006024:	0009883a 	mov	r4,zero
10006028:	00055ec0 	call	100055ec <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000602c:	01414004 	movi	r5,1280
10006030:	01006c04 	movi	r4,432
10006034:	00061cc0 	call	100061cc <UsbWrite>
			usleep(10*1000);
10006038:	0109c404 	movi	r4,10000
1000603c:	0016ce00 	call	10016ce0 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006040:	010000c4 	movi	r4,3
10006044:	000565c0 	call	1000565c <IO_read>
10006048:	10bfffcc 	andi	r2,r2,65535
1000604c:	1080040c 	andi	r2,r2,16
10006050:	103fd726 	beq	r2,zero,10005fb0 <__alt_data_end+0xf8005fb0>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10006054:	00071bc0 	call	100071bc <UsbWaitTDListDone>
10006058:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
1000605c:	01014784 	movi	r4,1310
10006060:	00062240 	call	10006224 <UsbRead>
10006064:	10bfffcc 	andi	r2,r2,65535
10006068:	e0bffd15 	stw	r2,-12(fp)
		//printf("\nfirst two keycode values are %04x\n",keycode);
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
1000606c:	00800804 	movi	r2,32
10006070:	e0fffd17 	ldw	r3,-12(fp)
10006074:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
10006078:	01003204 	movi	r4,200
1000607c:	0016ce00 	call	10016ce0 <usleep>
		

		gameInterface(keycode&0xff);
10006080:	e0bffd17 	ldw	r2,-12(fp)
10006084:	10803fcc 	andi	r2,r2,255
10006088:	1009883a 	mov	r4,r2
1000608c:	0001cec0 	call	10001cec <gameInterface>
		

		usb_ctl_val = UsbRead(ctl_reg);
10006090:	d0a7f60b 	ldhu	r2,-24616(gp)
10006094:	10bfffcc 	andi	r2,r2,65535
10006098:	1009883a 	mov	r4,r2
1000609c:	00062240 	call	10006224 <UsbRead>
100060a0:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
100060a4:	d0a7f68b 	ldhu	r2,-24614(gp)
100060a8:	e0fffb0b 	ldhu	r3,-20(fp)
100060ac:	1884703a 	and	r2,r3,r2
100060b0:	10bfffcc 	andi	r2,r2,65535
100060b4:	10003f1e 	bne	r2,zero,100061b4 <main+0xaf0>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100060b8:	e03ffbc5 	stb	zero,-17(fp)
100060bc:	00000f06 	br	100060fc <main+0xa38>
			{
				usleep(5*1000);
100060c0:	0104e204 	movi	r4,5000
100060c4:	0016ce00 	call	10016ce0 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
100060c8:	d0a7f60b 	ldhu	r2,-24616(gp)
100060cc:	10bfffcc 	andi	r2,r2,65535
100060d0:	1009883a 	mov	r4,r2
100060d4:	00062240 	call	10006224 <UsbRead>
100060d8:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
100060dc:	d0a7f68b 	ldhu	r2,-24614(gp)
100060e0:	e0fffb0b 	ldhu	r3,-20(fp)
100060e4:	1884703a 	and	r2,r3,r2
100060e8:	10bfffcc 	andi	r2,r2,65535
100060ec:	1000071e 	bne	r2,zero,1000610c <main+0xa48>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100060f0:	e0bffbc3 	ldbu	r2,-17(fp)
100060f4:	10800044 	addi	r2,r2,1
100060f8:	e0bffbc5 	stb	r2,-17(fp)
100060fc:	e0bffbc3 	ldbu	r2,-17(fp)
10006100:	108001f0 	cmpltui	r2,r2,7
10006104:	103fee1e 	bne	r2,zero,100060c0 <__alt_data_end+0xf80060c0>
10006108:	00000106 	br	10006110 <main+0xa4c>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
1000610c:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
10006110:	d0a7f68b 	ldhu	r2,-24614(gp)
10006114:	e0fffb0b 	ldhu	r3,-20(fp)
10006118:	1884703a 	and	r2,r3,r2
1000611c:	10bfffcc 	andi	r2,r2,65535
10006120:	1000241e 	bne	r2,zero,100061b4 <main+0xaf0>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10006124:	010400b4 	movhi	r4,4098
10006128:	21239004 	addi	r4,r4,-29120
1000612c:	000c0a00 	call	1000c0a0 <puts>
				printf("[INFO]: please insert again!!! \n");
10006130:	010400b4 	movhi	r4,4098
10006134:	21239b04 	addi	r4,r4,-29076
10006138:	000c0a00 	call	1000c0a0 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
1000613c:	00001d06 	br	100061b4 <main+0xaf0>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10006140:	d0a7f60b 	ldhu	r2,-24616(gp)
10006144:	10bfffcc 	andi	r2,r2,65535
10006148:	1009883a 	mov	r4,r2
1000614c:	00062240 	call	10006224 <UsbRead>
10006150:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10006154:	0104e204 	movi	r4,5000
10006158:	0016ce00 	call	10016ce0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000615c:	d0a7f60b 	ldhu	r2,-24616(gp)
10006160:	10bfffcc 	andi	r2,r2,65535
10006164:	1009883a 	mov	r4,r2
10006168:	00062240 	call	10006224 <UsbRead>
1000616c:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10006170:	0104e204 	movi	r4,5000
10006174:	0016ce00 	call	10016ce0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10006178:	d0a7f60b 	ldhu	r2,-24616(gp)
1000617c:	10bfffcc 	andi	r2,r2,65535
10006180:	1009883a 	mov	r4,r2
10006184:	00062240 	call	10006224 <UsbRead>
10006188:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
1000618c:	0104e204 	movi	r4,5000
10006190:	0016ce00 	call	10016ce0 <usleep>

			if(usb_ctl_val & no_device)
10006194:	d0a7f68b 	ldhu	r2,-24614(gp)
10006198:	e0fffb0b 	ldhu	r3,-20(fp)
1000619c:	1884703a 	and	r2,r3,r2
100061a0:	10bfffcc 	andi	r2,r2,65535
100061a4:	10000126 	beq	r2,zero,100061ac <main+0xae8>
				goto USB_HOT_PLUG;
100061a8:	003d5006 	br	100056ec <__alt_data_end+0xf80056ec>

			usleep(200);
100061ac:	01003204 	movi	r4,200
100061b0:	0016ce00 	call	10016ce0 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
100061b4:	d0a7f68b 	ldhu	r2,-24614(gp)
100061b8:	e0fffb0b 	ldhu	r3,-20(fp)
100061bc:	1884703a 	and	r2,r3,r2
100061c0:	10bfffcc 	andi	r2,r2,65535
100061c4:	103fde26 	beq	r2,zero,10006140 <__alt_data_end+0xf8006140>

			usleep(200);
		}


	}//end while
100061c8:	003f5306 	br	10005f18 <__alt_data_end+0xf8005f18>

100061cc <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
100061cc:	defffc04 	addi	sp,sp,-16
100061d0:	dfc00315 	stw	ra,12(sp)
100061d4:	df000215 	stw	fp,8(sp)
100061d8:	df000204 	addi	fp,sp,8
100061dc:	2007883a 	mov	r3,r4
100061e0:	2805883a 	mov	r2,r5
100061e4:	e0fffe0d 	sth	r3,-8(fp)
100061e8:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
100061ec:	e0bffe0b 	ldhu	r2,-8(fp)
100061f0:	100b883a 	mov	r5,r2
100061f4:	01000084 	movi	r4,2
100061f8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA, Data);
100061fc:	e0bfff0b 	ldhu	r2,-4(fp)
10006200:	100b883a 	mov	r5,r2
10006204:	0009883a 	mov	r4,zero
10006208:	00055ec0 	call	100055ec <IO_write>
}
1000620c:	0001883a 	nop
10006210:	e037883a 	mov	sp,fp
10006214:	dfc00117 	ldw	ra,4(sp)
10006218:	df000017 	ldw	fp,0(sp)
1000621c:	dec00204 	addi	sp,sp,8
10006220:	f800283a 	ret

10006224 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10006224:	defffd04 	addi	sp,sp,-12
10006228:	dfc00215 	stw	ra,8(sp)
1000622c:	df000115 	stw	fp,4(sp)
10006230:	df000104 	addi	fp,sp,4
10006234:	2005883a 	mov	r2,r4
10006238:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
1000623c:	e0bfff0b 	ldhu	r2,-4(fp)
10006240:	100b883a 	mov	r5,r2
10006244:	01000084 	movi	r4,2
10006248:	00055ec0 	call	100055ec <IO_write>
	return IO_read(HPI_DATA);
1000624c:	0009883a 	mov	r4,zero
10006250:	000565c0 	call	1000565c <IO_read>
}
10006254:	e037883a 	mov	sp,fp
10006258:	dfc00117 	ldw	ra,4(sp)
1000625c:	df000017 	ldw	fp,0(sp)
10006260:	dec00204 	addi	sp,sp,8
10006264:	f800283a 	ret

10006268 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10006268:	defffe04 	addi	sp,sp,-8
1000626c:	dfc00115 	stw	ra,4(sp)
10006270:	df000015 	stw	fp,0(sp)
10006274:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10006278:	017e9414 	movui	r5,64080
1000627c:	01000044 	movi	r4,1
10006280:	00055ec0 	call	100055ec <IO_write>
	usleep(100000);
10006284:	010000b4 	movhi	r4,2
10006288:	2121a804 	addi	r4,r4,-31072
1000628c:	0016ce00 	call	10016ce0 <usleep>
	printf("[USB INIT]:reset finished!\n");
10006290:	010400b4 	movhi	r4,4098
10006294:	2123a304 	addi	r4,r4,-29044
10006298:	000c0a00 	call	1000c0a0 <puts>

	usleep(500000);
1000629c:	01000234 	movhi	r4,8
100062a0:	21284804 	addi	r4,r4,-24288
100062a4:	0016ce00 	call	10016ce0 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
100062a8:	010400b4 	movhi	r4,4098
100062ac:	2123aa04 	addi	r4,r4,-29016
100062b0:	000c0a00 	call	1000c0a0 <puts>
	IO_read(HPI_MAILBOX);
100062b4:	01000044 	movi	r4,1
100062b8:	000565c0 	call	1000565c <IO_read>
	IO_read(HPI_STATUS);
100062bc:	010000c4 	movi	r4,3
100062c0:	000565c0 	call	1000565c <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
100062c4:	01005104 	movi	r4,324
100062c8:	00062240 	call	10006224 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100062cc:	000b883a 	mov	r5,zero
100062d0:	01005104 	movi	r4,324
100062d4:	00061cc0 	call	100061cc <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
100062d8:	01005204 	movi	r4,328
100062dc:	00062240 	call	10006224 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
100062e0:	000b883a 	mov	r5,zero
100062e4:	01005204 	movi	r4,328
100062e8:	00061cc0 	call	100061cc <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100062ec:	017fffd4 	movui	r5,65535
100062f0:	01302414 	movui	r4,49296
100062f4:	00061cc0 	call	100061cc <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
100062f8:	017fffd4 	movui	r5,65535
100062fc:	01302c14 	movui	r4,49328
10006300:	00061cc0 	call	100061cc <UsbWrite>
}
10006304:	0001883a 	nop
10006308:	e037883a 	mov	sp,fp
1000630c:	dfc00117 	ldw	ra,4(sp)
10006310:	df000017 	ldw	fp,0(sp)
10006314:	dec00204 	addi	sp,sp,8
10006318:	f800283a 	ret

1000631c <UsbSetAddress>:


void UsbSetAddress()
{
1000631c:	defffe04 	addi	sp,sp,-8
10006320:	dfc00115 	stw	ra,4(sp)
10006324:	df000015 	stw	fp,0(sp)
10006328:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000632c:	01414004 	movi	r5,1280
10006330:	01000084 	movi	r4,2
10006334:	00055ec0 	call	100055ec <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10006338:	01414304 	movi	r5,1292
1000633c:	0009883a 	mov	r4,zero
10006340:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006344:	01400204 	movi	r5,8
10006348:	0009883a 	mov	r4,zero
1000634c:	00055ec0 	call	100055ec <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10006350:	01403404 	movi	r5,208
10006354:	0009883a 	mov	r4,zero
10006358:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);
1000635c:	01400044 	movi	r5,1
10006360:	0009883a 	mov	r4,zero
10006364:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10006368:	014004c4 	movi	r5,19
1000636c:	0009883a 	mov	r4,zero
10006370:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10006374:	01414504 	movi	r5,1300
10006378:	0009883a 	mov	r4,zero
1000637c:	00055ec0 	call	100055ec <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10006380:	01414004 	movi	r5,1280
10006384:	0009883a 	mov	r4,zero
10006388:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0002);
1000638c:	01400084 	movi	r5,2
10006390:	0009883a 	mov	r4,zero
10006394:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10006398:	000b883a 	mov	r5,zero
1000639c:	0009883a 	mov	r4,zero
100063a0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);
100063a4:	000b883a 	mov	r5,zero
100063a8:	0009883a 	mov	r4,zero
100063ac:	00055ec0 	call	100055ec <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
100063b0:	000b883a 	mov	r5,zero
100063b4:	0009883a 	mov	r4,zero
100063b8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//
100063bc:	000b883a 	mov	r5,zero
100063c0:	0009883a 	mov	r4,zero
100063c4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0090);//
100063c8:	01402404 	movi	r5,144
100063cc:	0009883a 	mov	r4,zero
100063d0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);
100063d4:	01401044 	movi	r5,65
100063d8:	0009883a 	mov	r4,zero
100063dc:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);
100063e0:	014004c4 	movi	r5,19
100063e4:	0009883a 	mov	r4,zero
100063e8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);
100063ec:	000b883a 	mov	r5,zero
100063f0:	0009883a 	mov	r4,zero
100063f4:	00055ec0 	call	100055ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100063f8:	01414004 	movi	r5,1280
100063fc:	01006c04 	movi	r4,432
10006400:	00061cc0 	call	100061cc <UsbWrite>
}
10006404:	0001883a 	nop
10006408:	e037883a 	mov	sp,fp
1000640c:	dfc00117 	ldw	ra,4(sp)
10006410:	df000017 	ldw	fp,0(sp)
10006414:	dec00204 	addi	sp,sp,8
10006418:	f800283a 	ret

1000641c <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
1000641c:	defffe04 	addi	sp,sp,-8
10006420:	dfc00115 	stw	ra,4(sp)
10006424:	df000015 	stw	fp,0(sp)
10006428:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000642c:	01414004 	movi	r5,1280
10006430:	01000084 	movi	r4,2
10006434:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10006438:	01414304 	movi	r5,1292
1000643c:	0009883a 	mov	r4,zero
10006440:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006444:	01400204 	movi	r5,8
10006448:	0009883a 	mov	r4,zero
1000644c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10006450:	0140b404 	movi	r5,720
10006454:	0009883a 	mov	r4,zero
10006458:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);
1000645c:	01400044 	movi	r5,1
10006460:	0009883a 	mov	r4,zero
10006464:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10006468:	014004c4 	movi	r5,19
1000646c:	0009883a 	mov	r4,zero
10006470:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10006474:	01414504 	movi	r5,1300
10006478:	0009883a 	mov	r4,zero
1000647c:	00055ec0 	call	100055ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10006480:	0141a004 	movi	r5,1664
10006484:	0009883a 	mov	r4,zero
10006488:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
1000648c:	01404004 	movi	r5,256
10006490:	0009883a 	mov	r4,zero
10006494:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10006498:	000b883a 	mov	r5,zero
1000649c:	0009883a 	mov	r4,zero
100064a0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);
100064a4:	01400204 	movi	r5,8
100064a8:	0009883a 	mov	r4,zero
100064ac:	00055ec0 	call	100055ec <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
100064b0:	01414b04 	movi	r5,1324
100064b4:	0009883a 	mov	r4,zero
100064b8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//
100064bc:	01400204 	movi	r5,8
100064c0:	0009883a 	mov	r4,zero
100064c4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//
100064c8:	0140a404 	movi	r5,656
100064cc:	0009883a 	mov	r4,zero
100064d0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);
100064d4:	01401044 	movi	r5,65
100064d8:	0009883a 	mov	r4,zero
100064dc:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);
100064e0:	014004c4 	movi	r5,19
100064e4:	0009883a 	mov	r4,zero
100064e8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0520);
100064ec:	01414804 	movi	r5,1312
100064f0:	0009883a 	mov	r4,zero
100064f4:	00055ec0 	call	100055ec <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
100064f8:	000b883a 	mov	r5,zero
100064fc:	0009883a 	mov	r4,zero
10006500:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10006504:	000b883a 	mov	r5,zero
10006508:	0009883a 	mov	r4,zero
1000650c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10006510:	01408404 	movi	r5,528
10006514:	0009883a 	mov	r4,zero
10006518:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);
1000651c:	01401044 	movi	r5,65
10006520:	0009883a 	mov	r4,zero
10006524:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10006528:	014004c4 	movi	r5,19
1000652c:	0009883a 	mov	r4,zero
10006530:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10006534:	000b883a 	mov	r5,zero
10006538:	0009883a 	mov	r4,zero
1000653c:	00055ec0 	call	100055ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006540:	01414004 	movi	r5,1280
10006544:	01006c04 	movi	r4,432
10006548:	00061cc0 	call	100061cc <UsbWrite>
}
1000654c:	0001883a 	nop
10006550:	e037883a 	mov	sp,fp
10006554:	dfc00117 	ldw	ra,4(sp)
10006558:	df000017 	ldw	fp,0(sp)
1000655c:	dec00204 	addi	sp,sp,8
10006560:	f800283a 	ret

10006564 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10006564:	defffe04 	addi	sp,sp,-8
10006568:	dfc00115 	stw	ra,4(sp)
1000656c:	df000015 	stw	fp,0(sp)
10006570:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006574:	01414004 	movi	r5,1280
10006578:	01000084 	movi	r4,2
1000657c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10006580:	01414304 	movi	r5,1292
10006584:	0009883a 	mov	r4,zero
10006588:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000658c:	01400204 	movi	r5,8
10006590:	0009883a 	mov	r4,zero
10006594:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10006598:	0140b404 	movi	r5,720
1000659c:	0009883a 	mov	r4,zero
100065a0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);
100065a4:	01400044 	movi	r5,1
100065a8:	0009883a 	mov	r4,zero
100065ac:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);
100065b0:	014004c4 	movi	r5,19
100065b4:	0009883a 	mov	r4,zero
100065b8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0514);
100065bc:	01414504 	movi	r5,1300
100065c0:	0009883a 	mov	r4,zero
100065c4:	00055ec0 	call	100055ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100065c8:	0141a004 	movi	r5,1664
100065cc:	0009883a 	mov	r4,zero
100065d0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
100065d4:	01404004 	movi	r5,256
100065d8:	0009883a 	mov	r4,zero
100065dc:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100065e0:	000b883a 	mov	r5,zero
100065e4:	0009883a 	mov	r4,zero
100065e8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0012);//2
100065ec:	01400484 	movi	r5,18
100065f0:	0009883a 	mov	r4,zero
100065f4:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100065f8:	01415104 	movi	r5,1348
100065fc:	0009883a 	mov	r4,zero
10006600:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10006604:	01400204 	movi	r5,8
10006608:	0009883a 	mov	r4,zero
1000660c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10006610:	0140a404 	movi	r5,656
10006614:	0009883a 	mov	r4,zero
10006618:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000661c:	01401044 	movi	r5,65
10006620:	0009883a 	mov	r4,zero
10006624:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10006628:	014004c4 	movi	r5,19
1000662c:	0009883a 	mov	r4,zero
10006630:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10006634:	01414804 	movi	r5,1312
10006638:	0009883a 	mov	r4,zero
1000663c:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10006640:	01415304 	movi	r5,1356
10006644:	0009883a 	mov	r4,zero
10006648:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000664c:	01400204 	movi	r5,8
10006650:	0009883a 	mov	r4,zero
10006654:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10006658:	0140a404 	movi	r5,656
1000665c:	0009883a 	mov	r4,zero
10006660:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10006664:	01400044 	movi	r5,1
10006668:	0009883a 	mov	r4,zero
1000666c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10006670:	014004c4 	movi	r5,19
10006674:	0009883a 	mov	r4,zero
10006678:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000667c:	01414b04 	movi	r5,1324
10006680:	0009883a 	mov	r4,zero
10006684:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10006688:	01415504 	movi	r5,1364
1000668c:	0009883a 	mov	r4,zero
10006690:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10006694:	01400084 	movi	r5,2
10006698:	0009883a 	mov	r4,zero
1000669c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100066a0:	0140a404 	movi	r5,656
100066a4:	0009883a 	mov	r4,zero
100066a8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100066ac:	01401044 	movi	r5,65
100066b0:	0009883a 	mov	r4,zero
100066b4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100066b8:	014004c4 	movi	r5,19
100066bc:	0009883a 	mov	r4,zero
100066c0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100066c4:	01414e04 	movi	r5,1336
100066c8:	0009883a 	mov	r4,zero
100066cc:	00055ec0 	call	100055ec <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
100066d0:	000b883a 	mov	r5,zero
100066d4:	0009883a 	mov	r4,zero
100066d8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100066dc:	000b883a 	mov	r5,zero
100066e0:	0009883a 	mov	r4,zero
100066e4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0210);//c
100066e8:	01408404 	movi	r5,528
100066ec:	0009883a 	mov	r4,zero
100066f0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//e
100066f4:	01401044 	movi	r5,65
100066f8:	0009883a 	mov	r4,zero
100066fc:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10006700:	014004c4 	movi	r5,19
10006704:	0009883a 	mov	r4,zero
10006708:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//2
1000670c:	000b883a 	mov	r5,zero
10006710:	0009883a 	mov	r4,zero
10006714:	00055ec0 	call	100055ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006718:	01414004 	movi	r5,1280
1000671c:	01006c04 	movi	r4,432
10006720:	00061cc0 	call	100061cc <UsbWrite>
}
10006724:	0001883a 	nop
10006728:	e037883a 	mov	sp,fp
1000672c:	dfc00117 	ldw	ra,4(sp)
10006730:	df000017 	ldw	fp,0(sp)
10006734:	dec00204 	addi	sp,sp,8
10006738:	f800283a 	ret

1000673c <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
1000673c:	defffe04 	addi	sp,sp,-8
10006740:	dfc00115 	stw	ra,4(sp)
10006744:	df000015 	stw	fp,0(sp)
10006748:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000674c:	01414004 	movi	r5,1280
10006750:	01000084 	movi	r4,2
10006754:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10006758:	01414304 	movi	r5,1292
1000675c:	0009883a 	mov	r4,zero
10006760:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006764:	01400204 	movi	r5,8
10006768:	0009883a 	mov	r4,zero
1000676c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10006770:	0140b404 	movi	r5,720
10006774:	0009883a 	mov	r4,zero
10006778:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);
1000677c:	01400044 	movi	r5,1
10006780:	0009883a 	mov	r4,zero
10006784:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10006788:	014004c4 	movi	r5,19
1000678c:	0009883a 	mov	r4,zero
10006790:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10006794:	01414504 	movi	r5,1300
10006798:	0009883a 	mov	r4,zero
1000679c:	00055ec0 	call	100055ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100067a0:	0141a004 	movi	r5,1664
100067a4:	0009883a 	mov	r4,zero
100067a8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100067ac:	01408004 	movi	r5,512
100067b0:	0009883a 	mov	r4,zero
100067b4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100067b8:	000b883a 	mov	r5,zero
100067bc:	0009883a 	mov	r4,zero
100067c0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0009);//2
100067c4:	01400244 	movi	r5,9
100067c8:	0009883a 	mov	r4,zero
100067cc:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100067d0:	01415104 	movi	r5,1348
100067d4:	0009883a 	mov	r4,zero
100067d8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100067dc:	01400204 	movi	r5,8
100067e0:	0009883a 	mov	r4,zero
100067e4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100067e8:	0140a404 	movi	r5,656
100067ec:	0009883a 	mov	r4,zero
100067f0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100067f4:	01401044 	movi	r5,65
100067f8:	0009883a 	mov	r4,zero
100067fc:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10006800:	014004c4 	movi	r5,19
10006804:	0009883a 	mov	r4,zero
10006808:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000680c:	01414804 	movi	r5,1312
10006810:	0009883a 	mov	r4,zero
10006814:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10006818:	01415304 	movi	r5,1356
1000681c:	0009883a 	mov	r4,zero
10006820:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10006824:	01400044 	movi	r5,1
10006828:	0009883a 	mov	r4,zero
1000682c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10006830:	0140a404 	movi	r5,656
10006834:	0009883a 	mov	r4,zero
10006838:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1000683c:	01400044 	movi	r5,1
10006840:	0009883a 	mov	r4,zero
10006844:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10006848:	014004c4 	movi	r5,19
1000684c:	0009883a 	mov	r4,zero
10006850:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10006854:	01414b04 	movi	r5,1324
10006858:	0009883a 	mov	r4,zero
1000685c:	00055ec0 	call	100055ec <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10006860:	000b883a 	mov	r5,zero
10006864:	0009883a 	mov	r4,zero
10006868:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//e
1000686c:	000b883a 	mov	r5,zero
10006870:	0009883a 	mov	r4,zero
10006874:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10006878:	01408404 	movi	r5,528
1000687c:	0009883a 	mov	r4,zero
10006880:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10006884:	01401044 	movi	r5,65
10006888:	0009883a 	mov	r4,zero
1000688c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10006890:	014004c4 	movi	r5,19
10006894:	0009883a 	mov	r4,zero
10006898:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//6
1000689c:	000b883a 	mov	r5,zero
100068a0:	0009883a 	mov	r4,zero
100068a4:	00055ec0 	call	100055ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100068a8:	01414004 	movi	r5,1280
100068ac:	01006c04 	movi	r4,432
100068b0:	00061cc0 	call	100061cc <UsbWrite>
}
100068b4:	0001883a 	nop
100068b8:	e037883a 	mov	sp,fp
100068bc:	dfc00117 	ldw	ra,4(sp)
100068c0:	df000017 	ldw	fp,0(sp)
100068c4:	dec00204 	addi	sp,sp,8
100068c8:	f800283a 	ret

100068cc <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
100068cc:	defffe04 	addi	sp,sp,-8
100068d0:	dfc00115 	stw	ra,4(sp)
100068d4:	df000015 	stw	fp,0(sp)
100068d8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100068dc:	01414004 	movi	r5,1280
100068e0:	01000084 	movi	r4,2
100068e4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x050C);
100068e8:	01414304 	movi	r5,1292
100068ec:	0009883a 	mov	r4,zero
100068f0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100068f4:	01400204 	movi	r5,8
100068f8:	0009883a 	mov	r4,zero
100068fc:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10006900:	0140b404 	movi	r5,720
10006904:	0009883a 	mov	r4,zero
10006908:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);
1000690c:	01400044 	movi	r5,1
10006910:	0009883a 	mov	r4,zero
10006914:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10006918:	014004c4 	movi	r5,19
1000691c:	0009883a 	mov	r4,zero
10006920:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10006924:	01414504 	movi	r5,1300
10006928:	0009883a 	mov	r4,zero
1000692c:	00055ec0 	call	100055ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10006930:	0141a004 	movi	r5,1664
10006934:	0009883a 	mov	r4,zero
10006938:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
1000693c:	01408004 	movi	r5,512
10006940:	0009883a 	mov	r4,zero
10006944:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10006948:	000b883a 	mov	r5,zero
1000694c:	0009883a 	mov	r4,zero
10006950:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10006954:	01403fc4 	movi	r5,255
10006958:	0009883a 	mov	r4,zero
1000695c:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10006960:	01415704 	movi	r5,1372
10006964:	0009883a 	mov	r4,zero
10006968:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000696c:	01400204 	movi	r5,8
10006970:	0009883a 	mov	r4,zero
10006974:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10006978:	0140a404 	movi	r5,656
1000697c:	0009883a 	mov	r4,zero
10006980:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10006984:	01401044 	movi	r5,65
10006988:	0009883a 	mov	r4,zero
1000698c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10006990:	014004c4 	movi	r5,19
10006994:	0009883a 	mov	r4,zero
10006998:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000699c:	01414804 	movi	r5,1312
100069a0:	0009883a 	mov	r4,zero
100069a4:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
100069a8:	01415904 	movi	r5,1380
100069ac:	0009883a 	mov	r4,zero
100069b0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100069b4:	01400204 	movi	r5,8
100069b8:	0009883a 	mov	r4,zero
100069bc:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100069c0:	0140a404 	movi	r5,656
100069c4:	0009883a 	mov	r4,zero
100069c8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100069cc:	01400044 	movi	r5,1
100069d0:	0009883a 	mov	r4,zero
100069d4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100069d8:	014004c4 	movi	r5,19
100069dc:	0009883a 	mov	r4,zero
100069e0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100069e4:	01414b04 	movi	r5,1324
100069e8:	0009883a 	mov	r4,zero
100069ec:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
100069f0:	01415b04 	movi	r5,1388
100069f4:	0009883a 	mov	r4,zero
100069f8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100069fc:	01400204 	movi	r5,8
10006a00:	0009883a 	mov	r4,zero
10006a04:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10006a08:	0140a404 	movi	r5,656
10006a0c:	0009883a 	mov	r4,zero
10006a10:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10006a14:	01401044 	movi	r5,65
10006a18:	0009883a 	mov	r4,zero
10006a1c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10006a20:	014004c4 	movi	r5,19
10006a24:	0009883a 	mov	r4,zero
10006a28:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10006a2c:	01414e04 	movi	r5,1336
10006a30:	0009883a 	mov	r4,zero
10006a34:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10006a38:	01415d04 	movi	r5,1396
10006a3c:	0009883a 	mov	r4,zero
10006a40:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10006a44:	01400204 	movi	r5,8
10006a48:	0009883a 	mov	r4,zero
10006a4c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10006a50:	0140a404 	movi	r5,656
10006a54:	0009883a 	mov	r4,zero
10006a58:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10006a5c:	01400044 	movi	r5,1
10006a60:	0009883a 	mov	r4,zero
10006a64:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10006a68:	014004c4 	movi	r5,19
10006a6c:	0009883a 	mov	r4,zero
10006a70:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10006a74:	01415104 	movi	r5,1348
10006a78:	0009883a 	mov	r4,zero
10006a7c:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10006a80:	01415f04 	movi	r5,1404
10006a84:	0009883a 	mov	r4,zero
10006a88:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10006a8c:	01400084 	movi	r5,2
10006a90:	0009883a 	mov	r4,zero
10006a94:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10006a98:	0140a404 	movi	r5,656
10006a9c:	0009883a 	mov	r4,zero
10006aa0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10006aa4:	01401044 	movi	r5,65
10006aa8:	0009883a 	mov	r4,zero
10006aac:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10006ab0:	014004c4 	movi	r5,19
10006ab4:	0009883a 	mov	r4,zero
10006ab8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10006abc:	01415404 	movi	r5,1360
10006ac0:	0009883a 	mov	r4,zero
10006ac4:	00055ec0 	call	100055ec <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10006ac8:	000b883a 	mov	r5,zero
10006acc:	0009883a 	mov	r4,zero
10006ad0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10006ad4:	000b883a 	mov	r5,zero
10006ad8:	0009883a 	mov	r4,zero
10006adc:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10006ae0:	01408404 	movi	r5,528
10006ae4:	0009883a 	mov	r4,zero
10006ae8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10006aec:	01401044 	movi	r5,65
10006af0:	0009883a 	mov	r4,zero
10006af4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10006af8:	014004c4 	movi	r5,19
10006afc:	0009883a 	mov	r4,zero
10006b00:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10006b04:	000b883a 	mov	r5,zero
10006b08:	0009883a 	mov	r4,zero
10006b0c:	00055ec0 	call	100055ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006b10:	01414004 	movi	r5,1280
10006b14:	01006c04 	movi	r4,432
10006b18:	00061cc0 	call	100061cc <UsbWrite>
}
10006b1c:	0001883a 	nop
10006b20:	e037883a 	mov	sp,fp
10006b24:	dfc00117 	ldw	ra,4(sp)
10006b28:	df000017 	ldw	fp,0(sp)
10006b2c:	dec00204 	addi	sp,sp,8
10006b30:	f800283a 	ret

10006b34 <UsbSetConfig>:

void UsbSetConfig()
{
10006b34:	defffe04 	addi	sp,sp,-8
10006b38:	dfc00115 	stw	ra,4(sp)
10006b3c:	df000015 	stw	fp,0(sp)
10006b40:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006b44:	01414004 	movi	r5,1280
10006b48:	01000084 	movi	r4,2
10006b4c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10006b50:	01414304 	movi	r5,1292
10006b54:	0009883a 	mov	r4,zero
10006b58:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006b5c:	01400204 	movi	r5,8
10006b60:	0009883a 	mov	r4,zero
10006b64:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10006b68:	0140b404 	movi	r5,720
10006b6c:	0009883a 	mov	r4,zero
10006b70:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);
10006b74:	01400044 	movi	r5,1
10006b78:	0009883a 	mov	r4,zero
10006b7c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10006b80:	014004c4 	movi	r5,19
10006b84:	0009883a 	mov	r4,zero
10006b88:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10006b8c:	01414504 	movi	r5,1300
10006b90:	0009883a 	mov	r4,zero
10006b94:	00055ec0 	call	100055ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10006b98:	01424004 	movi	r5,2304
10006b9c:	0009883a 	mov	r4,zero
10006ba0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10006ba4:	01400044 	movi	r5,1
10006ba8:	0009883a 	mov	r4,zero
10006bac:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10006bb0:	000b883a 	mov	r5,zero
10006bb4:	0009883a 	mov	r4,zero
10006bb8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10006bbc:	000b883a 	mov	r5,zero
10006bc0:	0009883a 	mov	r4,zero
10006bc4:	00055ec0 	call	100055ec <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10006bc8:	000b883a 	mov	r5,zero
10006bcc:	0009883a 	mov	r4,zero
10006bd0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10006bd4:	000b883a 	mov	r5,zero
10006bd8:	0009883a 	mov	r4,zero
10006bdc:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10006be0:	0140a404 	movi	r5,656
10006be4:	0009883a 	mov	r4,zero
10006be8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10006bec:	01401044 	movi	r5,65
10006bf0:	0009883a 	mov	r4,zero
10006bf4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10006bf8:	014004c4 	movi	r5,19
10006bfc:	0009883a 	mov	r4,zero
10006c00:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10006c04:	000b883a 	mov	r5,zero
10006c08:	0009883a 	mov	r4,zero
10006c0c:	00055ec0 	call	100055ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006c10:	01414004 	movi	r5,1280
10006c14:	01006c04 	movi	r4,432
10006c18:	00061cc0 	call	100061cc <UsbWrite>

}
10006c1c:	0001883a 	nop
10006c20:	e037883a 	mov	sp,fp
10006c24:	dfc00117 	ldw	ra,4(sp)
10006c28:	df000017 	ldw	fp,0(sp)
10006c2c:	dec00204 	addi	sp,sp,8
10006c30:	f800283a 	ret

10006c34 <UsbClassRequest>:

void UsbClassRequest()
{
10006c34:	defffe04 	addi	sp,sp,-8
10006c38:	dfc00115 	stw	ra,4(sp)
10006c3c:	df000015 	stw	fp,0(sp)
10006c40:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006c44:	01414004 	movi	r5,1280
10006c48:	01000084 	movi	r4,2
10006c4c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10006c50:	01414304 	movi	r5,1292
10006c54:	0009883a 	mov	r4,zero
10006c58:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006c5c:	01400204 	movi	r5,8
10006c60:	0009883a 	mov	r4,zero
10006c64:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10006c68:	0140b404 	movi	r5,720
10006c6c:	0009883a 	mov	r4,zero
10006c70:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);
10006c74:	01400044 	movi	r5,1
10006c78:	0009883a 	mov	r4,zero
10006c7c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10006c80:	014004c4 	movi	r5,19
10006c84:	0009883a 	mov	r4,zero
10006c88:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10006c8c:	01414504 	movi	r5,1300
10006c90:	0009883a 	mov	r4,zero
10006c94:	00055ec0 	call	100055ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10006c98:	01428844 	movi	r5,2593
10006c9c:	0009883a 	mov	r4,zero
10006ca0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10006ca4:	000b883a 	mov	r5,zero
10006ca8:	0009883a 	mov	r4,zero
10006cac:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10006cb0:	000b883a 	mov	r5,zero
10006cb4:	0009883a 	mov	r4,zero
10006cb8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10006cbc:	000b883a 	mov	r5,zero
10006cc0:	0009883a 	mov	r4,zero
10006cc4:	00055ec0 	call	100055ec <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10006cc8:	000b883a 	mov	r5,zero
10006ccc:	0009883a 	mov	r4,zero
10006cd0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10006cd4:	000b883a 	mov	r5,zero
10006cd8:	0009883a 	mov	r4,zero
10006cdc:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10006ce0:	0140a404 	movi	r5,656
10006ce4:	0009883a 	mov	r4,zero
10006ce8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10006cec:	01401044 	movi	r5,65
10006cf0:	0009883a 	mov	r4,zero
10006cf4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10006cf8:	014004c4 	movi	r5,19
10006cfc:	0009883a 	mov	r4,zero
10006d00:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);
10006d04:	000b883a 	mov	r5,zero
10006d08:	0009883a 	mov	r4,zero
10006d0c:	00055ec0 	call	100055ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006d10:	01414004 	movi	r5,1280
10006d14:	01006c04 	movi	r4,432
10006d18:	00061cc0 	call	100061cc <UsbWrite>
}
10006d1c:	0001883a 	nop
10006d20:	e037883a 	mov	sp,fp
10006d24:	dfc00117 	ldw	ra,4(sp)
10006d28:	df000017 	ldw	fp,0(sp)
10006d2c:	dec00204 	addi	sp,sp,8
10006d30:	f800283a 	ret

10006d34 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10006d34:	defffe04 	addi	sp,sp,-8
10006d38:	dfc00115 	stw	ra,4(sp)
10006d3c:	df000015 	stw	fp,0(sp)
10006d40:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006d44:	01414004 	movi	r5,1280
10006d48:	01000084 	movi	r4,2
10006d4c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10006d50:	01414304 	movi	r5,1292
10006d54:	0009883a 	mov	r4,zero
10006d58:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006d5c:	01400204 	movi	r5,8
10006d60:	0009883a 	mov	r4,zero
10006d64:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10006d68:	0140b404 	movi	r5,720
10006d6c:	0009883a 	mov	r4,zero
10006d70:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);
10006d74:	01400044 	movi	r5,1
10006d78:	0009883a 	mov	r4,zero
10006d7c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10006d80:	014004c4 	movi	r5,19
10006d84:	0009883a 	mov	r4,zero
10006d88:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10006d8c:	01414504 	movi	r5,1300
10006d90:	0009883a 	mov	r4,zero
10006d94:	00055ec0 	call	100055ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10006d98:	0141a044 	movi	r5,1665
10006d9c:	0009883a 	mov	r4,zero
10006da0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10006da4:	01484004 	movi	r5,8448
10006da8:	0009883a 	mov	r4,zero
10006dac:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10006db0:	000b883a 	mov	r5,zero
10006db4:	0009883a 	mov	r4,zero
10006db8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10006dbc:	01401ec4 	movi	r5,123
10006dc0:	0009883a 	mov	r4,zero
10006dc4:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10006dc8:	01415104 	movi	r5,1348
10006dcc:	0009883a 	mov	r4,zero
10006dd0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10006dd4:	01400204 	movi	r5,8
10006dd8:	0009883a 	mov	r4,zero
10006ddc:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10006de0:	0140a404 	movi	r5,656
10006de4:	0009883a 	mov	r4,zero
10006de8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10006dec:	01401044 	movi	r5,65
10006df0:	0009883a 	mov	r4,zero
10006df4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10006df8:	014004c4 	movi	r5,19
10006dfc:	0009883a 	mov	r4,zero
10006e00:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10006e04:	01414804 	movi	r5,1312
10006e08:	0009883a 	mov	r4,zero
10006e0c:	00055ec0 	call	100055ec <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10006e10:	000b883a 	mov	r5,zero
10006e14:	0009883a 	mov	r4,zero
10006e18:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10006e1c:	000b883a 	mov	r5,zero
10006e20:	0009883a 	mov	r4,zero
10006e24:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10006e28:	01408404 	movi	r5,528
10006e2c:	0009883a 	mov	r4,zero
10006e30:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10006e34:	01401044 	movi	r5,65
10006e38:	0009883a 	mov	r4,zero
10006e3c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10006e40:	014004c4 	movi	r5,19
10006e44:	0009883a 	mov	r4,zero
10006e48:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10006e4c:	000b883a 	mov	r5,zero
10006e50:	0009883a 	mov	r4,zero
10006e54:	00055ec0 	call	100055ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006e58:	01414004 	movi	r5,1280
10006e5c:	01006c04 	movi	r4,432
10006e60:	00061cc0 	call	100061cc <UsbWrite>

}
10006e64:	0001883a 	nop
10006e68:	e037883a 	mov	sp,fp
10006e6c:	dfc00117 	ldw	ra,4(sp)
10006e70:	df000017 	ldw	fp,0(sp)
10006e74:	dec00204 	addi	sp,sp,8
10006e78:	f800283a 	ret

10006e7c <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10006e7c:	defffe04 	addi	sp,sp,-8
10006e80:	dfc00115 	stw	ra,4(sp)
10006e84:	df000015 	stw	fp,0(sp)
10006e88:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006e8c:	01414004 	movi	r5,1280
10006e90:	01000084 	movi	r4,2
10006e94:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x050C);
10006e98:	01414304 	movi	r5,1292
10006e9c:	0009883a 	mov	r4,zero
10006ea0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006ea4:	01400204 	movi	r5,8
10006ea8:	0009883a 	mov	r4,zero
10006eac:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10006eb0:	0140b404 	movi	r5,720
10006eb4:	0009883a 	mov	r4,zero
10006eb8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);
10006ebc:	01400044 	movi	r5,1
10006ec0:	0009883a 	mov	r4,zero
10006ec4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);
10006ec8:	014004c4 	movi	r5,19
10006ecc:	0009883a 	mov	r4,zero
10006ed0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0514);
10006ed4:	01414504 	movi	r5,1300
10006ed8:	0009883a 	mov	r4,zero
10006edc:	00055ec0 	call	100055ec <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10006ee0:	0141a044 	movi	r5,1665
10006ee4:	0009883a 	mov	r4,zero
10006ee8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10006eec:	01488004 	movi	r5,8704
10006ef0:	0009883a 	mov	r4,zero
10006ef4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10006ef8:	000b883a 	mov	r5,zero
10006efc:	0009883a 	mov	r4,zero
10006f00:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10006f04:	01401ec4 	movi	r5,123
10006f08:	0009883a 	mov	r4,zero
10006f0c:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10006f10:	01416004 	movi	r5,1408
10006f14:	0009883a 	mov	r4,zero
10006f18:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10006f1c:	01400204 	movi	r5,8
10006f20:	0009883a 	mov	r4,zero
10006f24:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10006f28:	0140a404 	movi	r5,656
10006f2c:	0009883a 	mov	r4,zero
10006f30:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10006f34:	01401044 	movi	r5,65
10006f38:	0009883a 	mov	r4,zero
10006f3c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10006f40:	014004c4 	movi	r5,19
10006f44:	0009883a 	mov	r4,zero
10006f48:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10006f4c:	01414804 	movi	r5,1312
10006f50:	0009883a 	mov	r4,zero
10006f54:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10006f58:	01416204 	movi	r5,1416
10006f5c:	0009883a 	mov	r4,zero
10006f60:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10006f64:	01400204 	movi	r5,8
10006f68:	0009883a 	mov	r4,zero
10006f6c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10006f70:	0140a404 	movi	r5,656
10006f74:	0009883a 	mov	r4,zero
10006f78:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10006f7c:	01400044 	movi	r5,1
10006f80:	0009883a 	mov	r4,zero
10006f84:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10006f88:	014004c4 	movi	r5,19
10006f8c:	0009883a 	mov	r4,zero
10006f90:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10006f94:	01414b04 	movi	r5,1324
10006f98:	0009883a 	mov	r4,zero
10006f9c:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10006fa0:	01416404 	movi	r5,1424
10006fa4:	0009883a 	mov	r4,zero
10006fa8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10006fac:	01400204 	movi	r5,8
10006fb0:	0009883a 	mov	r4,zero
10006fb4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10006fb8:	0140a404 	movi	r5,656
10006fbc:	0009883a 	mov	r4,zero
10006fc0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10006fc4:	01401044 	movi	r5,65
10006fc8:	0009883a 	mov	r4,zero
10006fcc:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10006fd0:	014004c4 	movi	r5,19
10006fd4:	0009883a 	mov	r4,zero
10006fd8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10006fdc:	01414e04 	movi	r5,1336
10006fe0:	0009883a 	mov	r4,zero
10006fe4:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10006fe8:	01416604 	movi	r5,1432
10006fec:	0009883a 	mov	r4,zero
10006ff0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10006ff4:	01400204 	movi	r5,8
10006ff8:	0009883a 	mov	r4,zero
10006ffc:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10007000:	0140a404 	movi	r5,656
10007004:	0009883a 	mov	r4,zero
10007008:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
1000700c:	01400044 	movi	r5,1
10007010:	0009883a 	mov	r4,zero
10007014:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10007018:	014004c4 	movi	r5,19
1000701c:	0009883a 	mov	r4,zero
10007020:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10007024:	01415104 	movi	r5,1348
10007028:	0009883a 	mov	r4,zero
1000702c:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10007030:	01416804 	movi	r5,1440
10007034:	0009883a 	mov	r4,zero
10007038:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000703c:	01400204 	movi	r5,8
10007040:	0009883a 	mov	r4,zero
10007044:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10007048:	0140a404 	movi	r5,656
1000704c:	0009883a 	mov	r4,zero
10007050:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10007054:	01401044 	movi	r5,65
10007058:	0009883a 	mov	r4,zero
1000705c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10007060:	014004c4 	movi	r5,19
10007064:	0009883a 	mov	r4,zero
10007068:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0550);//e
1000706c:	01415404 	movi	r5,1360
10007070:	0009883a 	mov	r4,zero
10007074:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10007078:	01416a04 	movi	r5,1448
1000707c:	0009883a 	mov	r4,zero
10007080:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10007084:	01400204 	movi	r5,8
10007088:	0009883a 	mov	r4,zero
1000708c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10007090:	0140a404 	movi	r5,656
10007094:	0009883a 	mov	r4,zero
10007098:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1000709c:	01400044 	movi	r5,1
100070a0:	0009883a 	mov	r4,zero
100070a4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100070a8:	014004c4 	movi	r5,19
100070ac:	0009883a 	mov	r4,zero
100070b0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x055c);//a
100070b4:	01415704 	movi	r5,1372
100070b8:	0009883a 	mov	r4,zero
100070bc:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
100070c0:	01416c04 	movi	r5,1456
100070c4:	0009883a 	mov	r4,zero
100070c8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100070cc:	01400204 	movi	r5,8
100070d0:	0009883a 	mov	r4,zero
100070d4:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//560
100070d8:	0140a404 	movi	r5,656
100070dc:	0009883a 	mov	r4,zero
100070e0:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
100070e4:	01401044 	movi	r5,65
100070e8:	0009883a 	mov	r4,zero
100070ec:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100070f0:	014004c4 	movi	r5,19
100070f4:	0009883a 	mov	r4,zero
100070f8:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0568);//6
100070fc:	01415a04 	movi	r5,1384
10007100:	0009883a 	mov	r4,zero
10007104:	00055ec0 	call	100055ec <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10007108:	01416e04 	movi	r5,1464
1000710c:	0009883a 	mov	r4,zero
10007110:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10007114:	014000c4 	movi	r5,3
10007118:	0009883a 	mov	r4,zero
1000711c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10007120:	0140a404 	movi	r5,656
10007124:	0009883a 	mov	r4,zero
10007128:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
1000712c:	01400044 	movi	r5,1
10007130:	0009883a 	mov	r4,zero
10007134:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10007138:	014004c4 	movi	r5,19
1000713c:	0009883a 	mov	r4,zero
10007140:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10007144:	01415d04 	movi	r5,1396
10007148:	0009883a 	mov	r4,zero
1000714c:	00055ec0 	call	100055ec <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10007150:	000b883a 	mov	r5,zero
10007154:	0009883a 	mov	r4,zero
10007158:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//6
1000715c:	000b883a 	mov	r5,zero
10007160:	0009883a 	mov	r4,zero
10007164:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10007168:	01408404 	movi	r5,528
1000716c:	0009883a 	mov	r4,zero
10007170:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10007174:	01401044 	movi	r5,65
10007178:	0009883a 	mov	r4,zero
1000717c:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10007180:	014004c4 	movi	r5,19
10007184:	0009883a 	mov	r4,zero
10007188:	00055ec0 	call	100055ec <IO_write>
	IO_write(HPI_DATA,0x0000);//e
1000718c:	000b883a 	mov	r5,zero
10007190:	0009883a 	mov	r4,zero
10007194:	00055ec0 	call	100055ec <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10007198:	01414004 	movi	r5,1280
1000719c:	01006c04 	movi	r4,432
100071a0:	00061cc0 	call	100061cc <UsbWrite>

}
100071a4:	0001883a 	nop
100071a8:	e037883a 	mov	sp,fp
100071ac:	dfc00117 	ldw	ra,4(sp)
100071b0:	df000017 	ldw	fp,0(sp)
100071b4:	dec00204 	addi	sp,sp,8
100071b8:	f800283a 	ret

100071bc <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
100071bc:	defffd04 	addi	sp,sp,-12
100071c0:	dfc00215 	stw	ra,8(sp)
100071c4:	df000115 	stw	fp,4(sp)
100071c8:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
100071cc:	01005104 	movi	r4,324
100071d0:	00062240 	call	10006224 <UsbRead>
100071d4:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
100071d8:	000b883a 	mov	r5,zero
100071dc:	01005104 	movi	r4,324
100071e0:	00061cc0 	call	100061cc <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100071e4:	00000d06 	br	1000721c <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
100071e8:	e0bfff0b 	ldhu	r2,-4(fp)
100071ec:	10000526 	beq	r2,zero,10007204 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
100071f0:	e0bfff0b 	ldhu	r2,-4(fp)
100071f4:	100b883a 	mov	r5,r2
100071f8:	010400b4 	movhi	r4,4098
100071fc:	2123b304 	addi	r4,r4,-28980
10007200:	000bfa40 	call	1000bfa4 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10007204:	01005104 	movi	r4,324
10007208:	00062240 	call	10006224 <UsbRead>
1000720c:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10007210:	000b883a 	mov	r5,zero
10007214:	01005104 	movi	r4,324
10007218:	00061cc0 	call	100061cc <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
1000721c:	e0bfff0b 	ldhu	r2,-4(fp)
10007220:	10840018 	cmpnei	r2,r2,4096
10007224:	103ff01e 	bne	r2,zero,100071e8 <__alt_data_end+0xf80071e8>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10007228:	e0bfff0b 	ldhu	r2,-4(fp)
}
1000722c:	e037883a 	mov	sp,fp
10007230:	dfc00117 	ldw	ra,4(sp)
10007234:	df000017 	ldw	fp,0(sp)
10007238:	dec00204 	addi	sp,sp,8
1000723c:	f800283a 	ret

10007240 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10007240:	defffd04 	addi	sp,sp,-12
10007244:	dfc00215 	stw	ra,8(sp)
10007248:	df000115 	stw	fp,4(sp)
1000724c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10007250:	010000c4 	movi	r4,3
10007254:	000565c0 	call	1000565c <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10007258:	01005104 	movi	r4,324
1000725c:	00062240 	call	10006224 <UsbRead>
10007260:	10bfffcc 	andi	r2,r2,65535
10007264:	10840018 	cmpnei	r2,r2,4096
10007268:	1000091e 	bne	r2,zero,10007290 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
1000726c:	000b883a 	mov	r5,zero
10007270:	01005104 	movi	r4,324
10007274:	00061cc0 	call	100061cc <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10007278:	0001883a 	nop
1000727c:	010000c4 	movi	r4,3
10007280:	000565c0 	call	1000565c <IO_read>
10007284:	10bfffcc 	andi	r2,r2,65535
10007288:	1080040c 	andi	r2,r2,16
1000728c:	103ffb26 	beq	r2,zero,1000727c <__alt_data_end+0xf800727c>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10007290:	01414204 	movi	r5,1288
10007294:	01000084 	movi	r4,2
10007298:	00055ec0 	call	100055ec <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000729c:	0009883a 	mov	r4,zero
100072a0:	000565c0 	call	1000565c <IO_read>
100072a4:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
100072a8:	e0bfff0b 	ldhu	r2,-4(fp)
}
100072ac:	e037883a 	mov	sp,fp
100072b0:	dfc00117 	ldw	ra,4(sp)
100072b4:	df000017 	ldw	fp,0(sp)
100072b8:	dec00204 	addi	sp,sp,8
100072bc:	f800283a 	ret

100072c0 <UsbPrintMem>:


void UsbPrintMem()
{
100072c0:	defffc04 	addi	sp,sp,-16
100072c4:	dfc00315 	stw	ra,12(sp)
100072c8:	df000215 	stw	fp,8(sp)
100072cc:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
100072d0:	01414004 	movi	r5,1280
100072d4:	01000084 	movi	r4,2
100072d8:	00055ec0 	call	100055ec <IO_write>
	for (i = 0; i <= 200; i += 2)
100072dc:	e03ffe15 	stw	zero,-8(fp)
100072e0:	00000e06 	br	1000731c <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
100072e4:	0009883a 	mov	r4,zero
100072e8:	000565c0 	call	1000565c <IO_read>
100072ec:	10bfffcc 	andi	r2,r2,65535
100072f0:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
100072f4:	e0bffe17 	ldw	r2,-8(fp)
100072f8:	10814004 	addi	r2,r2,1280
100072fc:	e1bfff17 	ldw	r6,-4(fp)
10007300:	100b883a 	mov	r5,r2
10007304:	010400b4 	movhi	r4,4098
10007308:	2123bb04 	addi	r4,r4,-28948
1000730c:	000bfa40 	call	1000bfa4 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10007310:	e0bffe17 	ldw	r2,-8(fp)
10007314:	10800084 	addi	r2,r2,2
10007318:	e0bffe15 	stw	r2,-8(fp)
1000731c:	e0bffe17 	ldw	r2,-8(fp)
10007320:	10803250 	cmplti	r2,r2,201
10007324:	103fef1e 	bne	r2,zero,100072e4 <__alt_data_end+0xf80072e4>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10007328:	0001883a 	nop
1000732c:	e037883a 	mov	sp,fp
10007330:	dfc00117 	ldw	ra,4(sp)
10007334:	df000017 	ldw	fp,0(sp)
10007338:	dec00204 	addi	sp,sp,8
1000733c:	f800283a 	ret

10007340 <cos>:
10007340:	00a00034 	movhi	r2,32768
10007344:	defffa04 	addi	sp,sp,-24
10007348:	10bfffc4 	addi	r2,r2,-1
1000734c:	00cffa74 	movhi	r3,16361
10007350:	dfc00515 	stw	ra,20(sp)
10007354:	2884703a 	and	r2,r5,r2
10007358:	18c87ec4 	addi	r3,r3,8699
1000735c:	1880180e 	bge	r3,r2,100073c0 <cos+0x80>
10007360:	00dffc34 	movhi	r3,32752
10007364:	18ffffc4 	addi	r3,r3,-1
10007368:	1880060e 	bge	r3,r2,10007384 <cos+0x44>
1000736c:	280f883a 	mov	r7,r5
10007370:	200d883a 	mov	r6,r4
10007374:	000b3700 	call	1000b370 <__subdf3>
10007378:	dfc00517 	ldw	ra,20(sp)
1000737c:	dec00604 	addi	sp,sp,24
10007380:	f800283a 	ret
10007384:	d9800104 	addi	r6,sp,4
10007388:	000751c0 	call	1000751c <__ieee754_rem_pio2>
1000738c:	108000cc 	andi	r2,r2,3
10007390:	00c00044 	movi	r3,1
10007394:	10c01726 	beq	r2,r3,100073f4 <cos+0xb4>
10007398:	01000084 	movi	r4,2
1000739c:	11000e26 	beq	r2,r4,100073d8 <cos+0x98>
100073a0:	10001c26 	beq	r2,zero,10007414 <cos+0xd4>
100073a4:	d9800317 	ldw	r6,12(sp)
100073a8:	d9c00417 	ldw	r7,16(sp)
100073ac:	d9000117 	ldw	r4,4(sp)
100073b0:	d9400217 	ldw	r5,8(sp)
100073b4:	d8c00015 	stw	r3,0(sp)
100073b8:	0008ec40 	call	10008ec4 <__kernel_sin>
100073bc:	003fee06 	br	10007378 <__alt_data_end+0xf8007378>
100073c0:	000d883a 	mov	r6,zero
100073c4:	000f883a 	mov	r7,zero
100073c8:	0007c880 	call	10007c88 <__kernel_cos>
100073cc:	dfc00517 	ldw	ra,20(sp)
100073d0:	dec00604 	addi	sp,sp,24
100073d4:	f800283a 	ret
100073d8:	d9800317 	ldw	r6,12(sp)
100073dc:	d9c00417 	ldw	r7,16(sp)
100073e0:	d9000117 	ldw	r4,4(sp)
100073e4:	d9400217 	ldw	r5,8(sp)
100073e8:	0007c880 	call	10007c88 <__kernel_cos>
100073ec:	18e0003c 	xorhi	r3,r3,32768
100073f0:	003fe106 	br	10007378 <__alt_data_end+0xf8007378>
100073f4:	d9800317 	ldw	r6,12(sp)
100073f8:	d9c00417 	ldw	r7,16(sp)
100073fc:	d9000117 	ldw	r4,4(sp)
10007400:	d9400217 	ldw	r5,8(sp)
10007404:	d8800015 	stw	r2,0(sp)
10007408:	0008ec40 	call	10008ec4 <__kernel_sin>
1000740c:	18e0003c 	xorhi	r3,r3,32768
10007410:	003fd906 	br	10007378 <__alt_data_end+0xf8007378>
10007414:	d9800317 	ldw	r6,12(sp)
10007418:	d9c00417 	ldw	r7,16(sp)
1000741c:	d9000117 	ldw	r4,4(sp)
10007420:	d9400217 	ldw	r5,8(sp)
10007424:	0007c880 	call	10007c88 <__kernel_cos>
10007428:	003fd306 	br	10007378 <__alt_data_end+0xf8007378>

1000742c <sin>:
1000742c:	00a00034 	movhi	r2,32768
10007430:	defffa04 	addi	sp,sp,-24
10007434:	10bfffc4 	addi	r2,r2,-1
10007438:	00cffa74 	movhi	r3,16361
1000743c:	dfc00515 	stw	ra,20(sp)
10007440:	2884703a 	and	r2,r5,r2
10007444:	18c87ec4 	addi	r3,r3,8699
10007448:	1880180e 	bge	r3,r2,100074ac <sin+0x80>
1000744c:	00dffc34 	movhi	r3,32752
10007450:	18ffffc4 	addi	r3,r3,-1
10007454:	1880060e 	bge	r3,r2,10007470 <sin+0x44>
10007458:	280f883a 	mov	r7,r5
1000745c:	200d883a 	mov	r6,r4
10007460:	000b3700 	call	1000b370 <__subdf3>
10007464:	dfc00517 	ldw	ra,20(sp)
10007468:	dec00604 	addi	sp,sp,24
1000746c:	f800283a 	ret
10007470:	d9800104 	addi	r6,sp,4
10007474:	000751c0 	call	1000751c <__ieee754_rem_pio2>
10007478:	108000cc 	andi	r2,r2,3
1000747c:	00c00044 	movi	r3,1
10007480:	10c01926 	beq	r2,r3,100074e8 <sin+0xbc>
10007484:	01000084 	movi	r4,2
10007488:	11000f26 	beq	r2,r4,100074c8 <sin+0x9c>
1000748c:	10001c26 	beq	r2,zero,10007500 <sin+0xd4>
10007490:	d9800317 	ldw	r6,12(sp)
10007494:	d9c00417 	ldw	r7,16(sp)
10007498:	d9000117 	ldw	r4,4(sp)
1000749c:	d9400217 	ldw	r5,8(sp)
100074a0:	0007c880 	call	10007c88 <__kernel_cos>
100074a4:	18e0003c 	xorhi	r3,r3,32768
100074a8:	003fee06 	br	10007464 <__alt_data_end+0xf8007464>
100074ac:	d8000015 	stw	zero,0(sp)
100074b0:	000d883a 	mov	r6,zero
100074b4:	000f883a 	mov	r7,zero
100074b8:	0008ec40 	call	10008ec4 <__kernel_sin>
100074bc:	dfc00517 	ldw	ra,20(sp)
100074c0:	dec00604 	addi	sp,sp,24
100074c4:	f800283a 	ret
100074c8:	d9800317 	ldw	r6,12(sp)
100074cc:	d9c00417 	ldw	r7,16(sp)
100074d0:	d9000117 	ldw	r4,4(sp)
100074d4:	d9400217 	ldw	r5,8(sp)
100074d8:	d8c00015 	stw	r3,0(sp)
100074dc:	0008ec40 	call	10008ec4 <__kernel_sin>
100074e0:	18e0003c 	xorhi	r3,r3,32768
100074e4:	003fdf06 	br	10007464 <__alt_data_end+0xf8007464>
100074e8:	d9800317 	ldw	r6,12(sp)
100074ec:	d9c00417 	ldw	r7,16(sp)
100074f0:	d9000117 	ldw	r4,4(sp)
100074f4:	d9400217 	ldw	r5,8(sp)
100074f8:	0007c880 	call	10007c88 <__kernel_cos>
100074fc:	003fd906 	br	10007464 <__alt_data_end+0xf8007464>
10007500:	d9800317 	ldw	r6,12(sp)
10007504:	d9c00417 	ldw	r7,16(sp)
10007508:	d9000117 	ldw	r4,4(sp)
1000750c:	d9400217 	ldw	r5,8(sp)
10007510:	d8c00015 	stw	r3,0(sp)
10007514:	0008ec40 	call	10008ec4 <__kernel_sin>
10007518:	003fd206 	br	10007464 <__alt_data_end+0xf8007464>

1000751c <__ieee754_rem_pio2>:
1000751c:	02200034 	movhi	r8,32768
10007520:	deffea04 	addi	sp,sp,-88
10007524:	423fffc4 	addi	r8,r8,-1
10007528:	00cffa74 	movhi	r3,16361
1000752c:	ddc01315 	stw	r23,76(sp)
10007530:	dc400d15 	stw	r17,52(sp)
10007534:	dfc01515 	stw	ra,84(sp)
10007538:	df001415 	stw	fp,80(sp)
1000753c:	dd801215 	stw	r22,72(sp)
10007540:	dd401115 	stw	r21,68(sp)
10007544:	dd001015 	stw	r20,64(sp)
10007548:	dcc00f15 	stw	r19,60(sp)
1000754c:	dc800e15 	stw	r18,56(sp)
10007550:	dc000c15 	stw	r16,48(sp)
10007554:	2a2e703a 	and	r23,r5,r8
10007558:	18c87ec4 	addi	r3,r3,8699
1000755c:	2823883a 	mov	r17,r5
10007560:	1dc0790e 	bge	r3,r23,10007748 <__ieee754_rem_pio2+0x22c>
10007564:	009000f4 	movhi	r2,16387
10007568:	10b65ec4 	addi	r2,r2,-9861
1000756c:	3021883a 	mov	r16,r6
10007570:	2027883a 	mov	r19,r4
10007574:	15c02316 	blt	r2,r23,10007604 <__ieee754_rem_pio2+0xe8>
10007578:	01cffe74 	movhi	r7,16377
1000757c:	39c87ec4 	addi	r7,r7,8699
10007580:	01951034 	movhi	r6,21568
10007584:	01417a0e 	bge	zero,r5,10007b70 <__ieee754_rem_pio2+0x654>
10007588:	000b3700 	call	1000b370 <__subdf3>
1000758c:	1025883a 	mov	r18,r2
10007590:	008ffe74 	movhi	r2,16377
10007594:	10887ec4 	addi	r2,r2,8699
10007598:	1823883a 	mov	r17,r3
1000759c:	b8808426 	beq	r23,r2,100077b0 <__ieee754_rem_pio2+0x294>
100075a0:	018698b4 	movhi	r6,6754
100075a4:	01cf7474 	movhi	r7,15825
100075a8:	3198cc44 	addi	r6,r6,25393
100075ac:	39ed1844 	addi	r7,r7,-19359
100075b0:	9009883a 	mov	r4,r18
100075b4:	180b883a 	mov	r5,r3
100075b8:	000b3700 	call	1000b370 <__subdf3>
100075bc:	100d883a 	mov	r6,r2
100075c0:	180f883a 	mov	r7,r3
100075c4:	9009883a 	mov	r4,r18
100075c8:	880b883a 	mov	r5,r17
100075cc:	80800015 	stw	r2,0(r16)
100075d0:	80c00115 	stw	r3,4(r16)
100075d4:	000b3700 	call	1000b370 <__subdf3>
100075d8:	018698b4 	movhi	r6,6754
100075dc:	01cf7474 	movhi	r7,15825
100075e0:	3198cc44 	addi	r6,r6,25393
100075e4:	39ed1844 	addi	r7,r7,-19359
100075e8:	1009883a 	mov	r4,r2
100075ec:	180b883a 	mov	r5,r3
100075f0:	000b3700 	call	1000b370 <__subdf3>
100075f4:	80800215 	stw	r2,8(r16)
100075f8:	80c00315 	stw	r3,12(r16)
100075fc:	00800044 	movi	r2,1
10007600:	00005606 	br	1000775c <__ieee754_rem_pio2+0x240>
10007604:	00904e74 	movhi	r2,16697
10007608:	10887ec4 	addi	r2,r2,8699
1000760c:	15c0830e 	bge	r2,r23,1000781c <__ieee754_rem_pio2+0x300>
10007610:	009ffc34 	movhi	r2,32752
10007614:	10bfffc4 	addi	r2,r2,-1
10007618:	15c05c16 	blt	r2,r23,1000778c <__ieee754_rem_pio2+0x270>
1000761c:	b829d53a 	srai	r20,r23,20
10007620:	a53efa84 	addi	r20,r20,-1046
10007624:	a024953a 	slli	r18,r20,20
10007628:	bca5c83a 	sub	r18,r23,r18
1000762c:	900b883a 	mov	r5,r18
10007630:	000bc6c0 	call	1000bc6c <__fixdfsi>
10007634:	1009883a 	mov	r4,r2
10007638:	000bcec0 	call	1000bcec <__floatsidf>
1000763c:	9809883a 	mov	r4,r19
10007640:	900b883a 	mov	r5,r18
10007644:	100d883a 	mov	r6,r2
10007648:	180f883a 	mov	r7,r3
1000764c:	d8800215 	stw	r2,8(sp)
10007650:	d8c00315 	stw	r3,12(sp)
10007654:	000b3700 	call	1000b370 <__subdf3>
10007658:	000d883a 	mov	r6,zero
1000765c:	01d05c34 	movhi	r7,16752
10007660:	1009883a 	mov	r4,r2
10007664:	180b883a 	mov	r5,r3
10007668:	000ab040 	call	1000ab04 <__muldf3>
1000766c:	180b883a 	mov	r5,r3
10007670:	1009883a 	mov	r4,r2
10007674:	182b883a 	mov	r21,r3
10007678:	102d883a 	mov	r22,r2
1000767c:	000bc6c0 	call	1000bc6c <__fixdfsi>
10007680:	1009883a 	mov	r4,r2
10007684:	000bcec0 	call	1000bcec <__floatsidf>
10007688:	100d883a 	mov	r6,r2
1000768c:	180f883a 	mov	r7,r3
10007690:	b009883a 	mov	r4,r22
10007694:	a80b883a 	mov	r5,r21
10007698:	1027883a 	mov	r19,r2
1000769c:	1825883a 	mov	r18,r3
100076a0:	d8800415 	stw	r2,16(sp)
100076a4:	d8c00515 	stw	r3,20(sp)
100076a8:	000b3700 	call	1000b370 <__subdf3>
100076ac:	000d883a 	mov	r6,zero
100076b0:	01d05c34 	movhi	r7,16752
100076b4:	1009883a 	mov	r4,r2
100076b8:	180b883a 	mov	r5,r3
100076bc:	000ab040 	call	1000ab04 <__muldf3>
100076c0:	000d883a 	mov	r6,zero
100076c4:	000f883a 	mov	r7,zero
100076c8:	1009883a 	mov	r4,r2
100076cc:	180b883a 	mov	r5,r3
100076d0:	d8800615 	stw	r2,24(sp)
100076d4:	d8c00715 	stw	r3,28(sp)
100076d8:	000a9a00 	call	1000a9a0 <__eqdf2>
100076dc:	1001431e 	bne	r2,zero,10007bec <__ieee754_rem_pio2+0x6d0>
100076e0:	000f883a 	mov	r7,zero
100076e4:	000d883a 	mov	r6,zero
100076e8:	9809883a 	mov	r4,r19
100076ec:	900b883a 	mov	r5,r18
100076f0:	000a9a00 	call	1000a9a0 <__eqdf2>
100076f4:	100f003a 	cmpeq	r7,r2,zero
100076f8:	00800084 	movi	r2,2
100076fc:	11cfc83a 	sub	r7,r2,r7
10007700:	00800084 	movi	r2,2
10007704:	d8800015 	stw	r2,0(sp)
10007708:	008400b4 	movhi	r2,4098
1000770c:	10a3e004 	addi	r2,r2,-28800
10007710:	d8800115 	stw	r2,4(sp)
10007714:	a00d883a 	mov	r6,r20
10007718:	800b883a 	mov	r5,r16
1000771c:	d9000204 	addi	r4,sp,8
10007720:	000812c0 	call	1000812c <__kernel_rem_pio2>
10007724:	88000d0e 	bge	r17,zero,1000775c <__ieee754_rem_pio2+0x240>
10007728:	81000117 	ldw	r4,4(r16)
1000772c:	80c00317 	ldw	r3,12(r16)
10007730:	0085c83a 	sub	r2,zero,r2
10007734:	2120003c 	xorhi	r4,r4,32768
10007738:	18e0003c 	xorhi	r3,r3,32768
1000773c:	81000115 	stw	r4,4(r16)
10007740:	80c00315 	stw	r3,12(r16)
10007744:	00000506 	br	1000775c <__ieee754_rem_pio2+0x240>
10007748:	31000015 	stw	r4,0(r6)
1000774c:	31400115 	stw	r5,4(r6)
10007750:	30000215 	stw	zero,8(r6)
10007754:	30000315 	stw	zero,12(r6)
10007758:	0005883a 	mov	r2,zero
1000775c:	dfc01517 	ldw	ra,84(sp)
10007760:	df001417 	ldw	fp,80(sp)
10007764:	ddc01317 	ldw	r23,76(sp)
10007768:	dd801217 	ldw	r22,72(sp)
1000776c:	dd401117 	ldw	r21,68(sp)
10007770:	dd001017 	ldw	r20,64(sp)
10007774:	dcc00f17 	ldw	r19,60(sp)
10007778:	dc800e17 	ldw	r18,56(sp)
1000777c:	dc400d17 	ldw	r17,52(sp)
10007780:	dc000c17 	ldw	r16,48(sp)
10007784:	dec01604 	addi	sp,sp,88
10007788:	f800283a 	ret
1000778c:	200d883a 	mov	r6,r4
10007790:	280f883a 	mov	r7,r5
10007794:	000b3700 	call	1000b370 <__subdf3>
10007798:	80800215 	stw	r2,8(r16)
1000779c:	80800015 	stw	r2,0(r16)
100077a0:	80c00315 	stw	r3,12(r16)
100077a4:	80c00115 	stw	r3,4(r16)
100077a8:	0005883a 	mov	r2,zero
100077ac:	003feb06 	br	1000775c <__alt_data_end+0xf800775c>
100077b0:	01cf7474 	movhi	r7,15825
100077b4:	9009883a 	mov	r4,r18
100077b8:	39ed1844 	addi	r7,r7,-19359
100077bc:	01869834 	movhi	r6,6752
100077c0:	180b883a 	mov	r5,r3
100077c4:	000b3700 	call	1000b370 <__subdf3>
100077c8:	018b80f4 	movhi	r6,11779
100077cc:	01cee8f4 	movhi	r7,15267
100077d0:	319c1cc4 	addi	r6,r6,28787
100077d4:	39c66284 	addi	r7,r7,6538
100077d8:	1009883a 	mov	r4,r2
100077dc:	180b883a 	mov	r5,r3
100077e0:	1025883a 	mov	r18,r2
100077e4:	1823883a 	mov	r17,r3
100077e8:	000b3700 	call	1000b370 <__subdf3>
100077ec:	100d883a 	mov	r6,r2
100077f0:	180f883a 	mov	r7,r3
100077f4:	9009883a 	mov	r4,r18
100077f8:	880b883a 	mov	r5,r17
100077fc:	80800015 	stw	r2,0(r16)
10007800:	80c00115 	stw	r3,4(r16)
10007804:	000b3700 	call	1000b370 <__subdf3>
10007808:	018b80f4 	movhi	r6,11779
1000780c:	01cee8f4 	movhi	r7,15267
10007810:	319c1cc4 	addi	r6,r6,28787
10007814:	39c66284 	addi	r7,r7,6538
10007818:	003f7306 	br	100075e8 <__alt_data_end+0xf80075e8>
1000781c:	00091900 	call	10009190 <fabs>
10007820:	019b72b4 	movhi	r6,28106
10007824:	01cff934 	movhi	r7,16356
10007828:	31b220c4 	addi	r6,r6,-14205
1000782c:	39d7cc04 	addi	r7,r7,24368
10007830:	1009883a 	mov	r4,r2
10007834:	180b883a 	mov	r5,r3
10007838:	102d883a 	mov	r22,r2
1000783c:	182b883a 	mov	r21,r3
10007840:	000ab040 	call	1000ab04 <__muldf3>
10007844:	000d883a 	mov	r6,zero
10007848:	01cff834 	movhi	r7,16352
1000784c:	1009883a 	mov	r4,r2
10007850:	180b883a 	mov	r5,r3
10007854:	00097240 	call	10009724 <__adddf3>
10007858:	180b883a 	mov	r5,r3
1000785c:	1009883a 	mov	r4,r2
10007860:	000bc6c0 	call	1000bc6c <__fixdfsi>
10007864:	1009883a 	mov	r4,r2
10007868:	1025883a 	mov	r18,r2
1000786c:	000bcec0 	call	1000bcec <__floatsidf>
10007870:	01cffe74 	movhi	r7,16377
10007874:	39c87ec4 	addi	r7,r7,8699
10007878:	01951034 	movhi	r6,21568
1000787c:	1009883a 	mov	r4,r2
10007880:	180b883a 	mov	r5,r3
10007884:	1029883a 	mov	r20,r2
10007888:	1827883a 	mov	r19,r3
1000788c:	000ab040 	call	1000ab04 <__muldf3>
10007890:	b009883a 	mov	r4,r22
10007894:	a80b883a 	mov	r5,r21
10007898:	100d883a 	mov	r6,r2
1000789c:	180f883a 	mov	r7,r3
100078a0:	000b3700 	call	1000b370 <__subdf3>
100078a4:	018698b4 	movhi	r6,6754
100078a8:	01cf7474 	movhi	r7,15825
100078ac:	a009883a 	mov	r4,r20
100078b0:	3198cc44 	addi	r6,r6,25393
100078b4:	39ed1844 	addi	r7,r7,-19359
100078b8:	980b883a 	mov	r5,r19
100078bc:	1039883a 	mov	fp,r2
100078c0:	d8c00815 	stw	r3,32(sp)
100078c4:	000ab040 	call	1000ab04 <__muldf3>
100078c8:	010007c4 	movi	r4,31
100078cc:	e017883a 	mov	r11,fp
100078d0:	da800817 	ldw	r10,32(sp)
100078d4:	102d883a 	mov	r22,r2
100078d8:	182b883a 	mov	r21,r3
100078dc:	24802816 	blt	r4,r18,10007980 <__ieee754_rem_pio2+0x464>
100078e0:	913fffc4 	addi	r4,r18,-1
100078e4:	2109883a 	add	r4,r4,r4
100078e8:	014400b4 	movhi	r5,4098
100078ec:	2109883a 	add	r4,r4,r4
100078f0:	2963c004 	addi	r5,r5,-28928
100078f4:	2909883a 	add	r4,r5,r4
100078f8:	21000017 	ldw	r4,0(r4)
100078fc:	b9002026 	beq	r23,r4,10007980 <__ieee754_rem_pio2+0x464>
10007900:	100d883a 	mov	r6,r2
10007904:	180f883a 	mov	r7,r3
10007908:	e009883a 	mov	r4,fp
1000790c:	500b883a 	mov	r5,r10
10007910:	da800b15 	stw	r10,44(sp)
10007914:	df000a15 	stw	fp,40(sp)
10007918:	000b3700 	call	1000b370 <__subdf3>
1000791c:	da800b17 	ldw	r10,44(sp)
10007920:	dac00a17 	ldw	r11,40(sp)
10007924:	1019883a 	mov	r12,r2
10007928:	1813883a 	mov	r9,r3
1000792c:	80800015 	stw	r2,0(r16)
10007930:	80c00115 	stw	r3,4(r16)
10007934:	600d883a 	mov	r6,r12
10007938:	480f883a 	mov	r7,r9
1000793c:	5809883a 	mov	r4,r11
10007940:	500b883a 	mov	r5,r10
10007944:	da400b15 	stw	r9,44(sp)
10007948:	db000a15 	stw	r12,40(sp)
1000794c:	000b3700 	call	1000b370 <__subdf3>
10007950:	b00d883a 	mov	r6,r22
10007954:	a80f883a 	mov	r7,r21
10007958:	1009883a 	mov	r4,r2
1000795c:	180b883a 	mov	r5,r3
10007960:	000b3700 	call	1000b370 <__subdf3>
10007964:	80800215 	stw	r2,8(r16)
10007968:	80c00315 	stw	r3,12(r16)
1000796c:	da400b17 	ldw	r9,44(sp)
10007970:	db000a17 	ldw	r12,40(sp)
10007974:	88009f16 	blt	r17,zero,10007bf4 <__ieee754_rem_pio2+0x6d8>
10007978:	9005883a 	mov	r2,r18
1000797c:	003f7706 	br	1000775c <__alt_data_end+0xf800775c>
10007980:	d9400817 	ldw	r5,32(sp)
10007984:	100d883a 	mov	r6,r2
10007988:	180f883a 	mov	r7,r3
1000798c:	e009883a 	mov	r4,fp
10007990:	da800b15 	stw	r10,44(sp)
10007994:	dac00a15 	stw	r11,40(sp)
10007998:	000b3700 	call	1000b370 <__subdf3>
1000799c:	1019883a 	mov	r12,r2
100079a0:	1804d53a 	srli	r2,r3,20
100079a4:	b811d53a 	srai	r8,r23,20
100079a8:	1813883a 	mov	r9,r3
100079ac:	1081ffcc 	andi	r2,r2,2047
100079b0:	80c00115 	stw	r3,4(r16)
100079b4:	83000015 	stw	r12,0(r16)
100079b8:	4085c83a 	sub	r2,r8,r2
100079bc:	00c00404 	movi	r3,16
100079c0:	da800b17 	ldw	r10,44(sp)
100079c4:	dac00a17 	ldw	r11,40(sp)
100079c8:	18bfda0e 	bge	r3,r2,10007934 <__alt_data_end+0xf8007934>
100079cc:	01cf7474 	movhi	r7,15825
100079d0:	39ed1844 	addi	r7,r7,-19359
100079d4:	01869834 	movhi	r6,6752
100079d8:	a009883a 	mov	r4,r20
100079dc:	980b883a 	mov	r5,r19
100079e0:	da000a15 	stw	r8,40(sp)
100079e4:	000ab040 	call	1000ab04 <__muldf3>
100079e8:	d9400817 	ldw	r5,32(sp)
100079ec:	100d883a 	mov	r6,r2
100079f0:	180f883a 	mov	r7,r3
100079f4:	e009883a 	mov	r4,fp
100079f8:	102d883a 	mov	r22,r2
100079fc:	182b883a 	mov	r21,r3
10007a00:	000b3700 	call	1000b370 <__subdf3>
10007a04:	d9400817 	ldw	r5,32(sp)
10007a08:	100d883a 	mov	r6,r2
10007a0c:	180f883a 	mov	r7,r3
10007a10:	e009883a 	mov	r4,fp
10007a14:	182f883a 	mov	r23,r3
10007a18:	d8800915 	stw	r2,36(sp)
10007a1c:	000b3700 	call	1000b370 <__subdf3>
10007a20:	b00d883a 	mov	r6,r22
10007a24:	a80f883a 	mov	r7,r21
10007a28:	1009883a 	mov	r4,r2
10007a2c:	180b883a 	mov	r5,r3
10007a30:	000b3700 	call	1000b370 <__subdf3>
10007a34:	018b80f4 	movhi	r6,11779
10007a38:	01cee8f4 	movhi	r7,15267
10007a3c:	319c1cc4 	addi	r6,r6,28787
10007a40:	39c66284 	addi	r7,r7,6538
10007a44:	a009883a 	mov	r4,r20
10007a48:	980b883a 	mov	r5,r19
10007a4c:	102d883a 	mov	r22,r2
10007a50:	182b883a 	mov	r21,r3
10007a54:	000ab040 	call	1000ab04 <__muldf3>
10007a58:	b00d883a 	mov	r6,r22
10007a5c:	a80f883a 	mov	r7,r21
10007a60:	1009883a 	mov	r4,r2
10007a64:	180b883a 	mov	r5,r3
10007a68:	000b3700 	call	1000b370 <__subdf3>
10007a6c:	d9000917 	ldw	r4,36(sp)
10007a70:	100d883a 	mov	r6,r2
10007a74:	180f883a 	mov	r7,r3
10007a78:	b80b883a 	mov	r5,r23
10007a7c:	102d883a 	mov	r22,r2
10007a80:	182b883a 	mov	r21,r3
10007a84:	000b3700 	call	1000b370 <__subdf3>
10007a88:	1019883a 	mov	r12,r2
10007a8c:	1804d53a 	srli	r2,r3,20
10007a90:	da000a17 	ldw	r8,40(sp)
10007a94:	83000015 	stw	r12,0(r16)
10007a98:	1081ffcc 	andi	r2,r2,2047
10007a9c:	4091c83a 	sub	r8,r8,r2
10007aa0:	80c00115 	stw	r3,4(r16)
10007aa4:	00800c44 	movi	r2,49
10007aa8:	1813883a 	mov	r9,r3
10007aac:	1200730e 	bge	r2,r8,10007c7c <__ieee754_rem_pio2+0x760>
10007ab0:	01cee8f4 	movhi	r7,15267
10007ab4:	39c66284 	addi	r7,r7,6538
10007ab8:	018b8034 	movhi	r6,11776
10007abc:	a009883a 	mov	r4,r20
10007ac0:	980b883a 	mov	r5,r19
10007ac4:	000ab040 	call	1000ab04 <__muldf3>
10007ac8:	d9000917 	ldw	r4,36(sp)
10007acc:	100d883a 	mov	r6,r2
10007ad0:	180f883a 	mov	r7,r3
10007ad4:	b80b883a 	mov	r5,r23
10007ad8:	102d883a 	mov	r22,r2
10007adc:	182b883a 	mov	r21,r3
10007ae0:	000b3700 	call	1000b370 <__subdf3>
10007ae4:	d9000917 	ldw	r4,36(sp)
10007ae8:	100d883a 	mov	r6,r2
10007aec:	180f883a 	mov	r7,r3
10007af0:	b80b883a 	mov	r5,r23
10007af4:	d8c00b15 	stw	r3,44(sp)
10007af8:	d8800a15 	stw	r2,40(sp)
10007afc:	000b3700 	call	1000b370 <__subdf3>
10007b00:	b00d883a 	mov	r6,r22
10007b04:	a80f883a 	mov	r7,r21
10007b08:	1009883a 	mov	r4,r2
10007b0c:	180b883a 	mov	r5,r3
10007b10:	000b3700 	call	1000b370 <__subdf3>
10007b14:	01894834 	movhi	r6,9504
10007b18:	01ce5f34 	movhi	r7,14716
10007b1c:	31927044 	addi	r6,r6,18881
10007b20:	39e0e684 	addi	r7,r7,-31846
10007b24:	a009883a 	mov	r4,r20
10007b28:	980b883a 	mov	r5,r19
10007b2c:	102d883a 	mov	r22,r2
10007b30:	182b883a 	mov	r21,r3
10007b34:	000ab040 	call	1000ab04 <__muldf3>
10007b38:	b00d883a 	mov	r6,r22
10007b3c:	a80f883a 	mov	r7,r21
10007b40:	1009883a 	mov	r4,r2
10007b44:	180b883a 	mov	r5,r3
10007b48:	000b3700 	call	1000b370 <__subdf3>
10007b4c:	dac00a17 	ldw	r11,40(sp)
10007b50:	da800b17 	ldw	r10,44(sp)
10007b54:	102d883a 	mov	r22,r2
10007b58:	182b883a 	mov	r21,r3
10007b5c:	100d883a 	mov	r6,r2
10007b60:	180f883a 	mov	r7,r3
10007b64:	5809883a 	mov	r4,r11
10007b68:	500b883a 	mov	r5,r10
10007b6c:	003f6a06 	br	10007918 <__alt_data_end+0xf8007918>
10007b70:	00097240 	call	10009724 <__adddf3>
10007b74:	1025883a 	mov	r18,r2
10007b78:	008ffe74 	movhi	r2,16377
10007b7c:	10887ec4 	addi	r2,r2,8699
10007b80:	1823883a 	mov	r17,r3
10007b84:	b8802226 	beq	r23,r2,10007c10 <__ieee754_rem_pio2+0x6f4>
10007b88:	018698b4 	movhi	r6,6754
10007b8c:	01cf7474 	movhi	r7,15825
10007b90:	3198cc44 	addi	r6,r6,25393
10007b94:	39ed1844 	addi	r7,r7,-19359
10007b98:	9009883a 	mov	r4,r18
10007b9c:	180b883a 	mov	r5,r3
10007ba0:	00097240 	call	10009724 <__adddf3>
10007ba4:	100d883a 	mov	r6,r2
10007ba8:	180f883a 	mov	r7,r3
10007bac:	9009883a 	mov	r4,r18
10007bb0:	880b883a 	mov	r5,r17
10007bb4:	80800015 	stw	r2,0(r16)
10007bb8:	80c00115 	stw	r3,4(r16)
10007bbc:	000b3700 	call	1000b370 <__subdf3>
10007bc0:	018698b4 	movhi	r6,6754
10007bc4:	01cf7474 	movhi	r7,15825
10007bc8:	3198cc44 	addi	r6,r6,25393
10007bcc:	39ed1844 	addi	r7,r7,-19359
10007bd0:	1009883a 	mov	r4,r2
10007bd4:	180b883a 	mov	r5,r3
10007bd8:	00097240 	call	10009724 <__adddf3>
10007bdc:	80800215 	stw	r2,8(r16)
10007be0:	80c00315 	stw	r3,12(r16)
10007be4:	00bfffc4 	movi	r2,-1
10007be8:	003edc06 	br	1000775c <__alt_data_end+0xf800775c>
10007bec:	01c000c4 	movi	r7,3
10007bf0:	003ec306 	br	10007700 <__alt_data_end+0xf8007700>
10007bf4:	4a60003c 	xorhi	r9,r9,32768
10007bf8:	18e0003c 	xorhi	r3,r3,32768
10007bfc:	83000015 	stw	r12,0(r16)
10007c00:	82400115 	stw	r9,4(r16)
10007c04:	80c00315 	stw	r3,12(r16)
10007c08:	0485c83a 	sub	r2,zero,r18
10007c0c:	003ed306 	br	1000775c <__alt_data_end+0xf800775c>
10007c10:	01cf7474 	movhi	r7,15825
10007c14:	9009883a 	mov	r4,r18
10007c18:	39ed1844 	addi	r7,r7,-19359
10007c1c:	01869834 	movhi	r6,6752
10007c20:	180b883a 	mov	r5,r3
10007c24:	00097240 	call	10009724 <__adddf3>
10007c28:	018b80f4 	movhi	r6,11779
10007c2c:	01cee8f4 	movhi	r7,15267
10007c30:	319c1cc4 	addi	r6,r6,28787
10007c34:	39c66284 	addi	r7,r7,6538
10007c38:	1009883a 	mov	r4,r2
10007c3c:	180b883a 	mov	r5,r3
10007c40:	1025883a 	mov	r18,r2
10007c44:	1823883a 	mov	r17,r3
10007c48:	00097240 	call	10009724 <__adddf3>
10007c4c:	100d883a 	mov	r6,r2
10007c50:	180f883a 	mov	r7,r3
10007c54:	9009883a 	mov	r4,r18
10007c58:	880b883a 	mov	r5,r17
10007c5c:	80800015 	stw	r2,0(r16)
10007c60:	80c00115 	stw	r3,4(r16)
10007c64:	000b3700 	call	1000b370 <__subdf3>
10007c68:	018b80f4 	movhi	r6,11779
10007c6c:	01cee8f4 	movhi	r7,15267
10007c70:	319c1cc4 	addi	r6,r6,28787
10007c74:	39c66284 	addi	r7,r7,6538
10007c78:	003fd506 	br	10007bd0 <__alt_data_end+0xf8007bd0>
10007c7c:	dac00917 	ldw	r11,36(sp)
10007c80:	b815883a 	mov	r10,r23
10007c84:	003f2b06 	br	10007934 <__alt_data_end+0xf8007934>

10007c88 <__kernel_cos>:
10007c88:	defff304 	addi	sp,sp,-52
10007c8c:	dc000315 	stw	r16,12(sp)
10007c90:	04200034 	movhi	r16,32768
10007c94:	843fffc4 	addi	r16,r16,-1
10007c98:	008f9034 	movhi	r2,15936
10007c9c:	df000b15 	stw	fp,44(sp)
10007ca0:	ddc00a15 	stw	r23,40(sp)
10007ca4:	dd800915 	stw	r22,36(sp)
10007ca8:	dcc00615 	stw	r19,24(sp)
10007cac:	dfc00c15 	stw	ra,48(sp)
10007cb0:	dd400815 	stw	r21,32(sp)
10007cb4:	dd000715 	stw	r20,28(sp)
10007cb8:	dc800515 	stw	r18,20(sp)
10007cbc:	dc400415 	stw	r17,16(sp)
10007cc0:	2c20703a 	and	r16,r5,r16
10007cc4:	10bfffc4 	addi	r2,r2,-1
10007cc8:	2827883a 	mov	r19,r5
10007ccc:	202d883a 	mov	r22,r4
10007cd0:	302f883a 	mov	r23,r6
10007cd4:	3839883a 	mov	fp,r7
10007cd8:	14007516 	blt	r2,r16,10007eb0 <__kernel_cos+0x228>
10007cdc:	000bc6c0 	call	1000bc6c <__fixdfsi>
10007ce0:	10010f26 	beq	r2,zero,10008120 <__kernel_cos+0x498>
10007ce4:	b00d883a 	mov	r6,r22
10007ce8:	980f883a 	mov	r7,r19
10007cec:	b009883a 	mov	r4,r22
10007cf0:	980b883a 	mov	r5,r19
10007cf4:	000ab040 	call	1000ab04 <__muldf3>
10007cf8:	01afa234 	movhi	r6,48776
10007cfc:	01ef6a74 	movhi	r7,48553
10007d00:	318e3504 	addi	r6,r6,14548
10007d04:	39feba44 	addi	r7,r7,-1303
10007d08:	1009883a 	mov	r4,r2
10007d0c:	180b883a 	mov	r5,r3
10007d10:	102b883a 	mov	r21,r2
10007d14:	1829883a 	mov	r20,r3
10007d18:	000ab040 	call	1000ab04 <__muldf3>
10007d1c:	01af6d74 	movhi	r6,48565
10007d20:	01cf88b4 	movhi	r7,15906
10007d24:	31ac7104 	addi	r6,r6,-20028
10007d28:	39fba784 	addi	r7,r7,-4450
10007d2c:	1009883a 	mov	r4,r2
10007d30:	180b883a 	mov	r5,r3
10007d34:	00097240 	call	10009724 <__adddf3>
10007d38:	a80d883a 	mov	r6,r21
10007d3c:	a00f883a 	mov	r7,r20
10007d40:	1009883a 	mov	r4,r2
10007d44:	180b883a 	mov	r5,r3
10007d48:	000ab040 	call	1000ab04 <__muldf3>
10007d4c:	01a02734 	movhi	r6,32924
10007d50:	01cfa4b4 	movhi	r7,16018
10007d54:	3194ab44 	addi	r6,r6,21165
10007d58:	39df93c4 	addi	r7,r7,32335
10007d5c:	1009883a 	mov	r4,r2
10007d60:	180b883a 	mov	r5,r3
10007d64:	000b3700 	call	1000b370 <__subdf3>
10007d68:	a80d883a 	mov	r6,r21
10007d6c:	a00f883a 	mov	r7,r20
10007d70:	1009883a 	mov	r4,r2
10007d74:	180b883a 	mov	r5,r3
10007d78:	000ab040 	call	1000ab04 <__muldf3>
10007d7c:	018672f4 	movhi	r6,6603
10007d80:	01cfbeb4 	movhi	r7,16122
10007d84:	31856404 	addi	r6,r6,5520
10007d88:	39c06804 	addi	r7,r7,416
10007d8c:	1009883a 	mov	r4,r2
10007d90:	180b883a 	mov	r5,r3
10007d94:	00097240 	call	10009724 <__adddf3>
10007d98:	a80d883a 	mov	r6,r21
10007d9c:	a00f883a 	mov	r7,r20
10007da0:	1009883a 	mov	r4,r2
10007da4:	180b883a 	mov	r5,r3
10007da8:	000ab040 	call	1000ab04 <__muldf3>
10007dac:	0185b074 	movhi	r6,5825
10007db0:	01cfd5f4 	movhi	r7,16215
10007db4:	31945dc4 	addi	r6,r6,20855
10007db8:	39f05b04 	addi	r7,r7,-16020
10007dbc:	1009883a 	mov	r4,r2
10007dc0:	180b883a 	mov	r5,r3
10007dc4:	000b3700 	call	1000b370 <__subdf3>
10007dc8:	a80d883a 	mov	r6,r21
10007dcc:	a00f883a 	mov	r7,r20
10007dd0:	1009883a 	mov	r4,r2
10007dd4:	180b883a 	mov	r5,r3
10007dd8:	000ab040 	call	1000ab04 <__muldf3>
10007ddc:	01955574 	movhi	r6,21845
10007de0:	01cfe974 	movhi	r7,16293
10007de4:	31955304 	addi	r6,r6,21836
10007de8:	39d55544 	addi	r7,r7,21845
10007dec:	1009883a 	mov	r4,r2
10007df0:	180b883a 	mov	r5,r3
10007df4:	00097240 	call	10009724 <__adddf3>
10007df8:	a80d883a 	mov	r6,r21
10007dfc:	a00f883a 	mov	r7,r20
10007e00:	1009883a 	mov	r4,r2
10007e04:	180b883a 	mov	r5,r3
10007e08:	000ab040 	call	1000ab04 <__muldf3>
10007e0c:	1017883a 	mov	r11,r2
10007e10:	1815883a 	mov	r10,r3
10007e14:	a809883a 	mov	r4,r21
10007e18:	a00b883a 	mov	r5,r20
10007e1c:	000d883a 	mov	r6,zero
10007e20:	01cff834 	movhi	r7,16352
10007e24:	da800215 	stw	r10,8(sp)
10007e28:	dac00115 	stw	r11,4(sp)
10007e2c:	000ab040 	call	1000ab04 <__muldf3>
10007e30:	dac00117 	ldw	r11,4(sp)
10007e34:	da800217 	ldw	r10,8(sp)
10007e38:	a809883a 	mov	r4,r21
10007e3c:	580d883a 	mov	r6,r11
10007e40:	500f883a 	mov	r7,r10
10007e44:	a00b883a 	mov	r5,r20
10007e48:	1023883a 	mov	r17,r2
10007e4c:	1821883a 	mov	r16,r3
10007e50:	000ab040 	call	1000ab04 <__muldf3>
10007e54:	b80d883a 	mov	r6,r23
10007e58:	e00f883a 	mov	r7,fp
10007e5c:	b009883a 	mov	r4,r22
10007e60:	980b883a 	mov	r5,r19
10007e64:	1029883a 	mov	r20,r2
10007e68:	1825883a 	mov	r18,r3
10007e6c:	000ab040 	call	1000ab04 <__muldf3>
10007e70:	a009883a 	mov	r4,r20
10007e74:	900b883a 	mov	r5,r18
10007e78:	100d883a 	mov	r6,r2
10007e7c:	180f883a 	mov	r7,r3
10007e80:	000b3700 	call	1000b370 <__subdf3>
10007e84:	8809883a 	mov	r4,r17
10007e88:	800b883a 	mov	r5,r16
10007e8c:	100d883a 	mov	r6,r2
10007e90:	180f883a 	mov	r7,r3
10007e94:	000b3700 	call	1000b370 <__subdf3>
10007e98:	100d883a 	mov	r6,r2
10007e9c:	180f883a 	mov	r7,r3
10007ea0:	0009883a 	mov	r4,zero
10007ea4:	014ffc34 	movhi	r5,16368
10007ea8:	000b3700 	call	1000b370 <__subdf3>
10007eac:	00008b06 	br	100080dc <__kernel_cos+0x454>
10007eb0:	200d883a 	mov	r6,r4
10007eb4:	280f883a 	mov	r7,r5
10007eb8:	000ab040 	call	1000ab04 <__muldf3>
10007ebc:	01afa234 	movhi	r6,48776
10007ec0:	01ef6a74 	movhi	r7,48553
10007ec4:	318e3504 	addi	r6,r6,14548
10007ec8:	39feba44 	addi	r7,r7,-1303
10007ecc:	1009883a 	mov	r4,r2
10007ed0:	180b883a 	mov	r5,r3
10007ed4:	1025883a 	mov	r18,r2
10007ed8:	1823883a 	mov	r17,r3
10007edc:	000ab040 	call	1000ab04 <__muldf3>
10007ee0:	01af6d74 	movhi	r6,48565
10007ee4:	01cf88b4 	movhi	r7,15906
10007ee8:	31ac7104 	addi	r6,r6,-20028
10007eec:	39fba784 	addi	r7,r7,-4450
10007ef0:	1009883a 	mov	r4,r2
10007ef4:	180b883a 	mov	r5,r3
10007ef8:	00097240 	call	10009724 <__adddf3>
10007efc:	900d883a 	mov	r6,r18
10007f00:	880f883a 	mov	r7,r17
10007f04:	1009883a 	mov	r4,r2
10007f08:	180b883a 	mov	r5,r3
10007f0c:	000ab040 	call	1000ab04 <__muldf3>
10007f10:	01a02734 	movhi	r6,32924
10007f14:	01cfa4b4 	movhi	r7,16018
10007f18:	3194ab44 	addi	r6,r6,21165
10007f1c:	39df93c4 	addi	r7,r7,32335
10007f20:	1009883a 	mov	r4,r2
10007f24:	180b883a 	mov	r5,r3
10007f28:	000b3700 	call	1000b370 <__subdf3>
10007f2c:	900d883a 	mov	r6,r18
10007f30:	880f883a 	mov	r7,r17
10007f34:	1009883a 	mov	r4,r2
10007f38:	180b883a 	mov	r5,r3
10007f3c:	000ab040 	call	1000ab04 <__muldf3>
10007f40:	018672f4 	movhi	r6,6603
10007f44:	01cfbeb4 	movhi	r7,16122
10007f48:	31856404 	addi	r6,r6,5520
10007f4c:	39c06804 	addi	r7,r7,416
10007f50:	1009883a 	mov	r4,r2
10007f54:	180b883a 	mov	r5,r3
10007f58:	00097240 	call	10009724 <__adddf3>
10007f5c:	900d883a 	mov	r6,r18
10007f60:	880f883a 	mov	r7,r17
10007f64:	1009883a 	mov	r4,r2
10007f68:	180b883a 	mov	r5,r3
10007f6c:	000ab040 	call	1000ab04 <__muldf3>
10007f70:	0185b074 	movhi	r6,5825
10007f74:	01cfd5f4 	movhi	r7,16215
10007f78:	31945dc4 	addi	r6,r6,20855
10007f7c:	39f05b04 	addi	r7,r7,-16020
10007f80:	1009883a 	mov	r4,r2
10007f84:	180b883a 	mov	r5,r3
10007f88:	000b3700 	call	1000b370 <__subdf3>
10007f8c:	900d883a 	mov	r6,r18
10007f90:	880f883a 	mov	r7,r17
10007f94:	1009883a 	mov	r4,r2
10007f98:	180b883a 	mov	r5,r3
10007f9c:	000ab040 	call	1000ab04 <__muldf3>
10007fa0:	01955574 	movhi	r6,21845
10007fa4:	01cfe974 	movhi	r7,16293
10007fa8:	31955304 	addi	r6,r6,21836
10007fac:	39d55544 	addi	r7,r7,21845
10007fb0:	1009883a 	mov	r4,r2
10007fb4:	180b883a 	mov	r5,r3
10007fb8:	00097240 	call	10009724 <__adddf3>
10007fbc:	900d883a 	mov	r6,r18
10007fc0:	880f883a 	mov	r7,r17
10007fc4:	1009883a 	mov	r4,r2
10007fc8:	180b883a 	mov	r5,r3
10007fcc:	000ab040 	call	1000ab04 <__muldf3>
10007fd0:	1013883a 	mov	r9,r2
10007fd4:	1017883a 	mov	r11,r2
10007fd8:	008ff4f4 	movhi	r2,16339
10007fdc:	108ccc84 	addi	r2,r2,13106
10007fe0:	1811883a 	mov	r8,r3
10007fe4:	902b883a 	mov	r21,r18
10007fe8:	8829883a 	mov	r20,r17
10007fec:	1815883a 	mov	r10,r3
10007ff0:	143f880e 	bge	r2,r16,10007e14 <__alt_data_end+0xf8007e14>
10007ff4:	008ffa74 	movhi	r2,16361
10007ff8:	14004416 	blt	r2,r16,1000810c <__kernel_cos+0x484>
10007ffc:	00bff834 	movhi	r2,65504
10008000:	80a1883a 	add	r16,r16,r2
10008004:	000d883a 	mov	r6,zero
10008008:	800f883a 	mov	r7,r16
1000800c:	0009883a 	mov	r4,zero
10008010:	014ffc34 	movhi	r5,16368
10008014:	da400115 	stw	r9,4(sp)
10008018:	d8c00215 	stw	r3,8(sp)
1000801c:	000b3700 	call	1000b370 <__subdf3>
10008020:	da000217 	ldw	r8,8(sp)
10008024:	da400117 	ldw	r9,4(sp)
10008028:	102b883a 	mov	r21,r2
1000802c:	d8c00015 	stw	r3,0(sp)
10008030:	9009883a 	mov	r4,r18
10008034:	880b883a 	mov	r5,r17
10008038:	000d883a 	mov	r6,zero
1000803c:	01cff834 	movhi	r7,16352
10008040:	da000215 	stw	r8,8(sp)
10008044:	da400115 	stw	r9,4(sp)
10008048:	000ab040 	call	1000ab04 <__muldf3>
1000804c:	800f883a 	mov	r7,r16
10008050:	000d883a 	mov	r6,zero
10008054:	1009883a 	mov	r4,r2
10008058:	180b883a 	mov	r5,r3
1000805c:	000b3700 	call	1000b370 <__subdf3>
10008060:	da400117 	ldw	r9,4(sp)
10008064:	da000217 	ldw	r8,8(sp)
10008068:	9009883a 	mov	r4,r18
1000806c:	480d883a 	mov	r6,r9
10008070:	400f883a 	mov	r7,r8
10008074:	880b883a 	mov	r5,r17
10008078:	1029883a 	mov	r20,r2
1000807c:	1821883a 	mov	r16,r3
10008080:	000ab040 	call	1000ab04 <__muldf3>
10008084:	b80d883a 	mov	r6,r23
10008088:	e00f883a 	mov	r7,fp
1000808c:	b009883a 	mov	r4,r22
10008090:	980b883a 	mov	r5,r19
10008094:	1025883a 	mov	r18,r2
10008098:	1823883a 	mov	r17,r3
1000809c:	000ab040 	call	1000ab04 <__muldf3>
100080a0:	100d883a 	mov	r6,r2
100080a4:	180f883a 	mov	r7,r3
100080a8:	9009883a 	mov	r4,r18
100080ac:	880b883a 	mov	r5,r17
100080b0:	000b3700 	call	1000b370 <__subdf3>
100080b4:	100d883a 	mov	r6,r2
100080b8:	180f883a 	mov	r7,r3
100080bc:	a009883a 	mov	r4,r20
100080c0:	800b883a 	mov	r5,r16
100080c4:	000b3700 	call	1000b370 <__subdf3>
100080c8:	d9400017 	ldw	r5,0(sp)
100080cc:	100d883a 	mov	r6,r2
100080d0:	180f883a 	mov	r7,r3
100080d4:	a809883a 	mov	r4,r21
100080d8:	000b3700 	call	1000b370 <__subdf3>
100080dc:	dfc00c17 	ldw	ra,48(sp)
100080e0:	df000b17 	ldw	fp,44(sp)
100080e4:	ddc00a17 	ldw	r23,40(sp)
100080e8:	dd800917 	ldw	r22,36(sp)
100080ec:	dd400817 	ldw	r21,32(sp)
100080f0:	dd000717 	ldw	r20,28(sp)
100080f4:	dcc00617 	ldw	r19,24(sp)
100080f8:	dc800517 	ldw	r18,20(sp)
100080fc:	dc400417 	ldw	r17,16(sp)
10008100:	dc000317 	ldw	r16,12(sp)
10008104:	dec00d04 	addi	sp,sp,52
10008108:	f800283a 	ret
1000810c:	008ff9f4 	movhi	r2,16359
10008110:	002b883a 	mov	r21,zero
10008114:	d8800015 	stw	r2,0(sp)
10008118:	040ff4b4 	movhi	r16,16338
1000811c:	003fc406 	br	10008030 <__alt_data_end+0xf8008030>
10008120:	0005883a 	mov	r2,zero
10008124:	00cffc34 	movhi	r3,16368
10008128:	003fec06 	br	100080dc <__alt_data_end+0xf80080dc>

1000812c <__kernel_rem_pio2>:
1000812c:	deff5a04 	addi	sp,sp,-664
10008130:	da00a617 	ldw	r8,664(sp)
10008134:	00c400b4 	movhi	r3,4098
10008138:	18e43204 	addi	r3,r3,-28472
1000813c:	4205883a 	add	r2,r8,r8
10008140:	1085883a 	add	r2,r2,r2
10008144:	1885883a 	add	r2,r3,r2
10008148:	d9008e15 	stw	r4,568(sp)
1000814c:	d9408f15 	stw	r5,572(sp)
10008150:	313fff44 	addi	r4,r6,-3
10008154:	01400604 	movi	r5,24
10008158:	dd80a215 	stw	r22,648(sp)
1000815c:	dc009c15 	stw	r16,624(sp)
10008160:	dfc0a515 	stw	ra,660(sp)
10008164:	df00a415 	stw	fp,656(sp)
10008168:	ddc0a315 	stw	r23,652(sp)
1000816c:	dd40a115 	stw	r21,644(sp)
10008170:	dd00a015 	stw	r20,640(sp)
10008174:	dcc09f15 	stw	r19,636(sp)
10008178:	dc809e15 	stw	r18,632(sp)
1000817c:	dc409d15 	stw	r17,628(sp)
10008180:	3021883a 	mov	r16,r6
10008184:	d9c09315 	stw	r7,588(sp)
10008188:	15800017 	ldw	r22,0(r2)
1000818c:	00095480 	call	10009548 <__divsi3>
10008190:	da009317 	ldw	r8,588(sp)
10008194:	d8809215 	stw	r2,584(sp)
10008198:	423fffc4 	addi	r8,r8,-1
1000819c:	da008d15 	stw	r8,564(sp)
100081a0:	10033d16 	blt	r2,zero,10008e98 <__kernel_rem_pio2+0xd6c>
100081a4:	da009217 	ldw	r8,584(sp)
100081a8:	017ffa04 	movi	r5,-24
100081ac:	42000044 	addi	r8,r8,1
100081b0:	4009883a 	mov	r4,r8
100081b4:	da009515 	stw	r8,596(sp)
100081b8:	00096fc0 	call	100096fc <__mulsi3>
100081bc:	da008d17 	ldw	r8,564(sp)
100081c0:	1421883a 	add	r16,r2,r16
100081c4:	d8809217 	ldw	r2,584(sp)
100081c8:	b207883a 	add	r3,r22,r8
100081cc:	dc009015 	stw	r16,576(sp)
100081d0:	1223c83a 	sub	r17,r2,r8
100081d4:	18001016 	blt	r3,zero,10008218 <__kernel_rem_pio2+0xec>
100081d8:	da00a717 	ldw	r8,668(sp)
100081dc:	8c65883a 	add	r18,r17,r17
100081e0:	94a5883a 	add	r18,r18,r18
100081e4:	1c47883a 	add	r3,r3,r17
100081e8:	dcc05004 	addi	r19,sp,320
100081ec:	44a5883a 	add	r18,r8,r18
100081f0:	1c000044 	addi	r16,r3,1
100081f4:	88015316 	blt	r17,zero,10008744 <__kernel_rem_pio2+0x618>
100081f8:	91000017 	ldw	r4,0(r18)
100081fc:	000bcec0 	call	1000bcec <__floatsidf>
10008200:	98800015 	stw	r2,0(r19)
10008204:	98c00115 	stw	r3,4(r19)
10008208:	8c400044 	addi	r17,r17,1
1000820c:	9cc00204 	addi	r19,r19,8
10008210:	94800104 	addi	r18,r18,4
10008214:	8c3ff71e 	bne	r17,r16,100081f4 <__alt_data_end+0xf80081f4>
10008218:	b0002816 	blt	r22,zero,100082bc <__kernel_rem_pio2+0x190>
1000821c:	da008d17 	ldw	r8,564(sp)
10008220:	b4c00044 	addi	r19,r22,1
10008224:	982690fa 	slli	r19,r19,3
10008228:	402490fa 	slli	r18,r8,3
1000822c:	da008e17 	ldw	r8,568(sp)
10008230:	d8805004 	addi	r2,sp,320
10008234:	94000204 	addi	r16,r18,8
10008238:	d823883a 	mov	r17,sp
1000823c:	14a5883a 	add	r18,r2,r18
10008240:	dcef883a 	add	r23,sp,r19
10008244:	4421883a 	add	r16,r8,r16
10008248:	dd809115 	stw	r22,580(sp)
1000824c:	4039883a 	mov	fp,r8
10008250:	da008d17 	ldw	r8,564(sp)
10008254:	40016016 	blt	r8,zero,100087d8 <__kernel_rem_pio2+0x6ac>
10008258:	e027883a 	mov	r19,fp
1000825c:	9029883a 	mov	r20,r18
10008260:	002d883a 	mov	r22,zero
10008264:	002b883a 	mov	r21,zero
10008268:	a1800017 	ldw	r6,0(r20)
1000826c:	a1c00117 	ldw	r7,4(r20)
10008270:	99000017 	ldw	r4,0(r19)
10008274:	99400117 	ldw	r5,4(r19)
10008278:	9cc00204 	addi	r19,r19,8
1000827c:	a53ffe04 	addi	r20,r20,-8
10008280:	000ab040 	call	1000ab04 <__muldf3>
10008284:	b009883a 	mov	r4,r22
10008288:	a80b883a 	mov	r5,r21
1000828c:	100d883a 	mov	r6,r2
10008290:	180f883a 	mov	r7,r3
10008294:	00097240 	call	10009724 <__adddf3>
10008298:	102d883a 	mov	r22,r2
1000829c:	182b883a 	mov	r21,r3
100082a0:	9c3ff11e 	bne	r19,r16,10008268 <__alt_data_end+0xf8008268>
100082a4:	8d800015 	stw	r22,0(r17)
100082a8:	8d400115 	stw	r21,4(r17)
100082ac:	8c400204 	addi	r17,r17,8
100082b0:	94800204 	addi	r18,r18,8
100082b4:	8dffe61e 	bne	r17,r23,10008250 <__alt_data_end+0xf8008250>
100082b8:	dd809117 	ldw	r22,580(sp)
100082bc:	00d00034 	movhi	r3,16384
100082c0:	da009317 	ldw	r8,588(sp)
100082c4:	18ffff84 	addi	r3,r3,-2
100082c8:	b0c7883a 	add	r3,r22,r3
100082cc:	18c7883a 	add	r3,r3,r3
100082d0:	402090fa 	slli	r16,r8,3
100082d4:	18c7883a 	add	r3,r3,r3
100082d8:	da007804 	addi	r8,sp,480
100082dc:	40d1883a 	add	r8,r8,r3
100082e0:	b0bfffc4 	addi	r2,r22,-1
100082e4:	da009615 	stw	r8,600(sp)
100082e8:	da008e17 	ldw	r8,568(sp)
100082ec:	1085883a 	add	r2,r2,r2
100082f0:	1085883a 	add	r2,r2,r2
100082f4:	19000104 	addi	r4,r3,4
100082f8:	d885883a 	add	r2,sp,r2
100082fc:	4421883a 	add	r16,r8,r16
10008300:	da007804 	addi	r8,sp,480
10008304:	4111883a 	add	r8,r8,r4
10008308:	10807804 	addi	r2,r2,480
1000830c:	da009715 	stw	r8,604(sp)
10008310:	b025883a 	mov	r18,r22
10008314:	d8809815 	stw	r2,608(sp)
10008318:	dd809415 	stw	r22,592(sp)
1000831c:	900490fa 	slli	r2,r18,3
10008320:	d885883a 	add	r2,sp,r2
10008324:	17000017 	ldw	fp,0(r2)
10008328:	15400117 	ldw	r21,4(r2)
1000832c:	04802b0e 	bge	zero,r18,100083dc <__kernel_rem_pio2+0x2b0>
10008330:	00880034 	movhi	r2,8192
10008334:	10bfffc4 	addi	r2,r2,-1
10008338:	90a9883a 	add	r20,r18,r2
1000833c:	a02890fa 	slli	r20,r20,3
10008340:	dc407804 	addi	r17,sp,480
10008344:	dcfffe04 	addi	r19,sp,-8
10008348:	dd29883a 	add	r20,sp,r20
1000834c:	000d883a 	mov	r6,zero
10008350:	01cf9c34 	movhi	r7,15984
10008354:	e009883a 	mov	r4,fp
10008358:	a80b883a 	mov	r5,r21
1000835c:	000ab040 	call	1000ab04 <__muldf3>
10008360:	180b883a 	mov	r5,r3
10008364:	1009883a 	mov	r4,r2
10008368:	000bc6c0 	call	1000bc6c <__fixdfsi>
1000836c:	1009883a 	mov	r4,r2
10008370:	000bcec0 	call	1000bcec <__floatsidf>
10008374:	000d883a 	mov	r6,zero
10008378:	01d05c34 	movhi	r7,16752
1000837c:	1009883a 	mov	r4,r2
10008380:	180b883a 	mov	r5,r3
10008384:	102f883a 	mov	r23,r2
10008388:	182d883a 	mov	r22,r3
1000838c:	000ab040 	call	1000ab04 <__muldf3>
10008390:	100d883a 	mov	r6,r2
10008394:	180f883a 	mov	r7,r3
10008398:	e009883a 	mov	r4,fp
1000839c:	a80b883a 	mov	r5,r21
100083a0:	000b3700 	call	1000b370 <__subdf3>
100083a4:	180b883a 	mov	r5,r3
100083a8:	1009883a 	mov	r4,r2
100083ac:	000bc6c0 	call	1000bc6c <__fixdfsi>
100083b0:	a1800017 	ldw	r6,0(r20)
100083b4:	a1c00117 	ldw	r7,4(r20)
100083b8:	88800015 	stw	r2,0(r17)
100083bc:	b809883a 	mov	r4,r23
100083c0:	b00b883a 	mov	r5,r22
100083c4:	00097240 	call	10009724 <__adddf3>
100083c8:	a53ffe04 	addi	r20,r20,-8
100083cc:	1039883a 	mov	fp,r2
100083d0:	182b883a 	mov	r21,r3
100083d4:	8c400104 	addi	r17,r17,4
100083d8:	a4ffdc1e 	bne	r20,r19,1000834c <__alt_data_end+0xf800834c>
100083dc:	d9809017 	ldw	r6,576(sp)
100083e0:	a80b883a 	mov	r5,r21
100083e4:	e009883a 	mov	r4,fp
100083e8:	00093900 	call	10009390 <scalbn>
100083ec:	000d883a 	mov	r6,zero
100083f0:	01cff034 	movhi	r7,16320
100083f4:	1009883a 	mov	r4,r2
100083f8:	180b883a 	mov	r5,r3
100083fc:	1027883a 	mov	r19,r2
10008400:	1823883a 	mov	r17,r3
10008404:	000ab040 	call	1000ab04 <__muldf3>
10008408:	1009883a 	mov	r4,r2
1000840c:	180b883a 	mov	r5,r3
10008410:	00091a40 	call	100091a4 <floor>
10008414:	000d883a 	mov	r6,zero
10008418:	01d00834 	movhi	r7,16416
1000841c:	1009883a 	mov	r4,r2
10008420:	180b883a 	mov	r5,r3
10008424:	000ab040 	call	1000ab04 <__muldf3>
10008428:	100d883a 	mov	r6,r2
1000842c:	180f883a 	mov	r7,r3
10008430:	9809883a 	mov	r4,r19
10008434:	880b883a 	mov	r5,r17
10008438:	000b3700 	call	1000b370 <__subdf3>
1000843c:	180b883a 	mov	r5,r3
10008440:	1009883a 	mov	r4,r2
10008444:	1827883a 	mov	r19,r3
10008448:	1029883a 	mov	r20,r2
1000844c:	000bc6c0 	call	1000bc6c <__fixdfsi>
10008450:	1009883a 	mov	r4,r2
10008454:	1023883a 	mov	r17,r2
10008458:	000bcec0 	call	1000bcec <__floatsidf>
1000845c:	a009883a 	mov	r4,r20
10008460:	100d883a 	mov	r6,r2
10008464:	180f883a 	mov	r7,r3
10008468:	980b883a 	mov	r5,r19
1000846c:	000b3700 	call	1000b370 <__subdf3>
10008470:	d9009017 	ldw	r4,576(sp)
10008474:	1013883a 	mov	r9,r2
10008478:	102b883a 	mov	r21,r2
1000847c:	1811883a 	mov	r8,r3
10008480:	0100b30e 	bge	zero,r4,10008750 <__kernel_rem_pio2+0x624>
10008484:	90bfffc4 	addi	r2,r18,-1
10008488:	1085883a 	add	r2,r2,r2
1000848c:	1085883a 	add	r2,r2,r2
10008490:	d885883a 	add	r2,sp,r2
10008494:	10807804 	addi	r2,r2,480
10008498:	d9809017 	ldw	r6,576(sp)
1000849c:	11400017 	ldw	r5,0(r2)
100084a0:	01000604 	movi	r4,24
100084a4:	2189c83a 	sub	r4,r4,r6
100084a8:	290dd83a 	sra	r6,r5,r4
100084ac:	d9c09017 	ldw	r7,576(sp)
100084b0:	04c005c4 	movi	r19,23
100084b4:	3108983a 	sll	r4,r6,r4
100084b8:	99e7c83a 	sub	r19,r19,r7
100084bc:	89a3883a 	add	r17,r17,r6
100084c0:	2909c83a 	sub	r4,r5,r4
100084c4:	24e7d83a 	sra	r19,r4,r19
100084c8:	11000015 	stw	r4,0(r2)
100084cc:	04c02a0e 	bge	zero,r19,10008578 <__kernel_rem_pio2+0x44c>
100084d0:	8c400044 	addi	r17,r17,1
100084d4:	0481570e 	bge	zero,r18,10008a34 <__kernel_rem_pio2+0x908>
100084d8:	02804034 	movhi	r10,256
100084dc:	52bfffc4 	addi	r10,r10,-1
100084e0:	d8807804 	addi	r2,sp,480
100084e4:	000b883a 	mov	r5,zero
100084e8:	0029883a 	mov	r20,zero
100084ec:	01c04034 	movhi	r7,256
100084f0:	00000706 	br	10008510 <__kernel_rem_pio2+0x3e4>
100084f4:	390dc83a 	sub	r6,r7,r4
100084f8:	20000226 	beq	r4,zero,10008504 <__kernel_rem_pio2+0x3d8>
100084fc:	11800015 	stw	r6,0(r2)
10008500:	05000044 	movi	r20,1
10008504:	29400044 	addi	r5,r5,1
10008508:	10800104 	addi	r2,r2,4
1000850c:	2c80080e 	bge	r5,r18,10008530 <__kernel_rem_pio2+0x404>
10008510:	11000017 	ldw	r4,0(r2)
10008514:	a03ff726 	beq	r20,zero,100084f4 <__alt_data_end+0xf80084f4>
10008518:	5109c83a 	sub	r4,r10,r4
1000851c:	11000015 	stw	r4,0(r2)
10008520:	29400044 	addi	r5,r5,1
10008524:	05000044 	movi	r20,1
10008528:	10800104 	addi	r2,r2,4
1000852c:	2cbff816 	blt	r5,r18,10008510 <__alt_data_end+0xf8008510>
10008530:	d9009017 	ldw	r4,576(sp)
10008534:	01000e0e 	bge	zero,r4,10008570 <__kernel_rem_pio2+0x444>
10008538:	00800044 	movi	r2,1
1000853c:	20808d26 	beq	r4,r2,10008774 <__kernel_rem_pio2+0x648>
10008540:	00800084 	movi	r2,2
10008544:	20800a1e 	bne	r4,r2,10008570 <__kernel_rem_pio2+0x444>
10008548:	90bfffc4 	addi	r2,r18,-1
1000854c:	1085883a 	add	r2,r2,r2
10008550:	1085883a 	add	r2,r2,r2
10008554:	d885883a 	add	r2,sp,r2
10008558:	10807804 	addi	r2,r2,480
1000855c:	11400017 	ldw	r5,0(r2)
10008560:	01001034 	movhi	r4,64
10008564:	213fffc4 	addi	r4,r4,-1
10008568:	2908703a 	and	r4,r5,r4
1000856c:	11000015 	stw	r4,0(r2)
10008570:	00800084 	movi	r2,2
10008574:	98805d26 	beq	r19,r2,100086ec <__kernel_rem_pio2+0x5c0>
10008578:	400b883a 	mov	r5,r8
1000857c:	000d883a 	mov	r6,zero
10008580:	000f883a 	mov	r7,zero
10008584:	a809883a 	mov	r4,r21
10008588:	da009b15 	stw	r8,620(sp)
1000858c:	000a9a00 	call	1000a9a0 <__eqdf2>
10008590:	da009b17 	ldw	r8,620(sp)
10008594:	10012b1e 	bne	r2,zero,10008a44 <__kernel_rem_pio2+0x918>
10008598:	da009417 	ldw	r8,592(sp)
1000859c:	917fffc4 	addi	r5,r18,-1
100085a0:	2a000e16 	blt	r5,r8,100085dc <__kernel_rem_pio2+0x4b0>
100085a4:	00900034 	movhi	r2,16384
100085a8:	10bfffc4 	addi	r2,r2,-1
100085ac:	9085883a 	add	r2,r18,r2
100085b0:	1085883a 	add	r2,r2,r2
100085b4:	d9809717 	ldw	r6,604(sp)
100085b8:	1085883a 	add	r2,r2,r2
100085bc:	d9007804 	addi	r4,sp,480
100085c0:	0007883a 	mov	r3,zero
100085c4:	2085883a 	add	r2,r4,r2
100085c8:	11000017 	ldw	r4,0(r2)
100085cc:	10bfff04 	addi	r2,r2,-4
100085d0:	1906b03a 	or	r3,r3,r4
100085d4:	11bffc1e 	bne	r2,r6,100085c8 <__alt_data_end+0xf80085c8>
100085d8:	1800821e 	bne	r3,zero,100087e4 <__kernel_rem_pio2+0x6b8>
100085dc:	da009817 	ldw	r8,608(sp)
100085e0:	40800017 	ldw	r2,0(r8)
100085e4:	1001151e 	bne	r2,zero,10008a3c <__kernel_rem_pio2+0x910>
100085e8:	d8809617 	ldw	r2,600(sp)
100085ec:	05000044 	movi	r20,1
100085f0:	10bfff04 	addi	r2,r2,-4
100085f4:	10c00117 	ldw	r3,4(r2)
100085f8:	a5000044 	addi	r20,r20,1
100085fc:	183ffc26 	beq	r3,zero,100085f0 <__alt_data_end+0xf80085f0>
10008600:	9529883a 	add	r20,r18,r20
10008604:	90800044 	addi	r2,r18,1
10008608:	dd009115 	stw	r20,580(sp)
1000860c:	a0803216 	blt	r20,r2,100086d8 <__kernel_rem_pio2+0x5ac>
10008610:	da009317 	ldw	r8,588(sp)
10008614:	d8c09117 	ldw	r3,580(sp)
10008618:	44a3883a 	add	r17,r8,r18
1000861c:	da009217 	ldw	r8,584(sp)
10008620:	882290fa 	slli	r17,r17,3
10008624:	40a5883a 	add	r18,r8,r2
10008628:	da009517 	ldw	r8,596(sp)
1000862c:	100490fa 	slli	r2,r2,3
10008630:	94a5883a 	add	r18,r18,r18
10008634:	40eb883a 	add	r21,r8,r3
10008638:	da00a717 	ldw	r8,668(sp)
1000863c:	ad6b883a 	add	r21,r21,r21
10008640:	94a5883a 	add	r18,r18,r18
10008644:	ad6b883a 	add	r21,r21,r21
10008648:	d8c05004 	addi	r3,sp,320
1000864c:	44a5883a 	add	r18,r8,r18
10008650:	1c63883a 	add	r17,r3,r17
10008654:	d8a7883a 	add	r19,sp,r2
10008658:	456b883a 	add	r21,r8,r21
1000865c:	91000017 	ldw	r4,0(r18)
10008660:	000bcec0 	call	1000bcec <__floatsidf>
10008664:	da008d17 	ldw	r8,564(sp)
10008668:	88800015 	stw	r2,0(r17)
1000866c:	88c00115 	stw	r3,4(r17)
10008670:	40001b16 	blt	r8,zero,100086e0 <__kernel_rem_pio2+0x5b4>
10008674:	dd008e17 	ldw	r20,568(sp)
10008678:	882d883a 	mov	r22,r17
1000867c:	002f883a 	mov	r23,zero
10008680:	0039883a 	mov	fp,zero
10008684:	b1800017 	ldw	r6,0(r22)
10008688:	b1c00117 	ldw	r7,4(r22)
1000868c:	a1000017 	ldw	r4,0(r20)
10008690:	a1400117 	ldw	r5,4(r20)
10008694:	a5000204 	addi	r20,r20,8
10008698:	b5bffe04 	addi	r22,r22,-8
1000869c:	000ab040 	call	1000ab04 <__muldf3>
100086a0:	b809883a 	mov	r4,r23
100086a4:	e00b883a 	mov	r5,fp
100086a8:	100d883a 	mov	r6,r2
100086ac:	180f883a 	mov	r7,r3
100086b0:	00097240 	call	10009724 <__adddf3>
100086b4:	102f883a 	mov	r23,r2
100086b8:	1839883a 	mov	fp,r3
100086bc:	a43ff11e 	bne	r20,r16,10008684 <__alt_data_end+0xf8008684>
100086c0:	9dc00015 	stw	r23,0(r19)
100086c4:	9f000115 	stw	fp,4(r19)
100086c8:	94800104 	addi	r18,r18,4
100086cc:	8c400204 	addi	r17,r17,8
100086d0:	9cc00204 	addi	r19,r19,8
100086d4:	957fe11e 	bne	r18,r21,1000865c <__alt_data_end+0xf800865c>
100086d8:	dc809117 	ldw	r18,580(sp)
100086dc:	003f0f06 	br	1000831c <__alt_data_end+0xf800831c>
100086e0:	002f883a 	mov	r23,zero
100086e4:	0039883a 	mov	fp,zero
100086e8:	003ff506 	br	100086c0 <__alt_data_end+0xf80086c0>
100086ec:	480d883a 	mov	r6,r9
100086f0:	180f883a 	mov	r7,r3
100086f4:	0009883a 	mov	r4,zero
100086f8:	014ffc34 	movhi	r5,16368
100086fc:	000b3700 	call	1000b370 <__subdf3>
10008700:	102b883a 	mov	r21,r2
10008704:	1811883a 	mov	r8,r3
10008708:	a03f9b26 	beq	r20,zero,10008578 <__alt_data_end+0xf8008578>
1000870c:	d9809017 	ldw	r6,576(sp)
10008710:	0009883a 	mov	r4,zero
10008714:	014ffc34 	movhi	r5,16368
10008718:	d8c09b15 	stw	r3,620(sp)
1000871c:	00093900 	call	10009390 <scalbn>
10008720:	da009b17 	ldw	r8,620(sp)
10008724:	a809883a 	mov	r4,r21
10008728:	100d883a 	mov	r6,r2
1000872c:	400b883a 	mov	r5,r8
10008730:	180f883a 	mov	r7,r3
10008734:	000b3700 	call	1000b370 <__subdf3>
10008738:	102b883a 	mov	r21,r2
1000873c:	1811883a 	mov	r8,r3
10008740:	003f8d06 	br	10008578 <__alt_data_end+0xf8008578>
10008744:	0005883a 	mov	r2,zero
10008748:	0007883a 	mov	r3,zero
1000874c:	003eac06 	br	10008200 <__alt_data_end+0xf8008200>
10008750:	d8809017 	ldw	r2,576(sp)
10008754:	1000121e 	bne	r2,zero,100087a0 <__kernel_rem_pio2+0x674>
10008758:	90bfffc4 	addi	r2,r18,-1
1000875c:	1085883a 	add	r2,r2,r2
10008760:	1085883a 	add	r2,r2,r2
10008764:	d885883a 	add	r2,sp,r2
10008768:	14c07817 	ldw	r19,480(r2)
1000876c:	9827d5fa 	srai	r19,r19,23
10008770:	003f5606 	br	100084cc <__alt_data_end+0xf80084cc>
10008774:	90bfffc4 	addi	r2,r18,-1
10008778:	1085883a 	add	r2,r2,r2
1000877c:	1085883a 	add	r2,r2,r2
10008780:	d885883a 	add	r2,sp,r2
10008784:	10807804 	addi	r2,r2,480
10008788:	11000017 	ldw	r4,0(r2)
1000878c:	01402034 	movhi	r5,128
10008790:	297fffc4 	addi	r5,r5,-1
10008794:	2148703a 	and	r4,r4,r5
10008798:	11000015 	stw	r4,0(r2)
1000879c:	003f7406 	br	10008570 <__alt_data_end+0xf8008570>
100087a0:	4809883a 	mov	r4,r9
100087a4:	180b883a 	mov	r5,r3
100087a8:	000d883a 	mov	r6,zero
100087ac:	01cff834 	movhi	r7,16352
100087b0:	d8c09a15 	stw	r3,616(sp)
100087b4:	d8c09b15 	stw	r3,620(sp)
100087b8:	da409915 	stw	r9,612(sp)
100087bc:	000aa280 	call	1000aa28 <__gedf2>
100087c0:	d8c09a17 	ldw	r3,616(sp)
100087c4:	da009b17 	ldw	r8,620(sp)
100087c8:	da409917 	ldw	r9,612(sp)
100087cc:	1000920e 	bge	r2,zero,10008a18 <__kernel_rem_pio2+0x8ec>
100087d0:	0027883a 	mov	r19,zero
100087d4:	003f6806 	br	10008578 <__alt_data_end+0xf8008578>
100087d8:	002d883a 	mov	r22,zero
100087dc:	002b883a 	mov	r21,zero
100087e0:	003eb006 	br	100082a4 <__alt_data_end+0xf80082a4>
100087e4:	2945883a 	add	r2,r5,r5
100087e8:	da009017 	ldw	r8,576(sp)
100087ec:	1085883a 	add	r2,r2,r2
100087f0:	d885883a 	add	r2,sp,r2
100087f4:	10807817 	ldw	r2,480(r2)
100087f8:	423ffa04 	addi	r8,r8,-24
100087fc:	dc409115 	stw	r17,580(sp)
10008800:	dcc08d15 	stw	r19,564(sp)
10008804:	da009015 	stw	r8,576(sp)
10008808:	dd809417 	ldw	r22,592(sp)
1000880c:	2823883a 	mov	r17,r5
10008810:	10000e1e 	bne	r2,zero,1000884c <__kernel_rem_pio2+0x720>
10008814:	00900034 	movhi	r2,16384
10008818:	10bfffc4 	addi	r2,r2,-1
1000881c:	2885883a 	add	r2,r5,r2
10008820:	1085883a 	add	r2,r2,r2
10008824:	d8c07804 	addi	r3,sp,480
10008828:	1085883a 	add	r2,r2,r2
1000882c:	1885883a 	add	r2,r3,r2
10008830:	4007883a 	mov	r3,r8
10008834:	10bfff04 	addi	r2,r2,-4
10008838:	11000117 	ldw	r4,4(r2)
1000883c:	8c7fffc4 	addi	r17,r17,-1
10008840:	18fffa04 	addi	r3,r3,-24
10008844:	203ffb26 	beq	r4,zero,10008834 <__alt_data_end+0xf8008834>
10008848:	d8c09015 	stw	r3,576(sp)
1000884c:	d9809017 	ldw	r6,576(sp)
10008850:	0009883a 	mov	r4,zero
10008854:	014ffc34 	movhi	r5,16368
10008858:	00093900 	call	10009390 <scalbn>
1000885c:	1029883a 	mov	r20,r2
10008860:	182b883a 	mov	r21,r3
10008864:	88018416 	blt	r17,zero,10008e78 <__kernel_rem_pio2+0xd4c>
10008868:	881090fa 	slli	r8,r17,3
1000886c:	d8c07804 	addi	r3,sp,480
10008870:	da008e15 	stw	r8,568(sp)
10008874:	d8808e17 	ldw	r2,568(sp)
10008878:	8c51883a 	add	r8,r17,r17
1000887c:	4211883a 	add	r8,r8,r8
10008880:	d8a1883a 	add	r16,sp,r2
10008884:	1a25883a 	add	r18,r3,r8
10008888:	da3ffe04 	addi	r8,sp,-8
1000888c:	da008c15 	stw	r8,560(sp)
10008890:	8039883a 	mov	fp,r16
10008894:	91000017 	ldw	r4,0(r18)
10008898:	e73ffe04 	addi	fp,fp,-8
1000889c:	94bfff04 	addi	r18,r18,-4
100088a0:	000bcec0 	call	1000bcec <__floatsidf>
100088a4:	a00d883a 	mov	r6,r20
100088a8:	a80f883a 	mov	r7,r21
100088ac:	1009883a 	mov	r4,r2
100088b0:	180b883a 	mov	r5,r3
100088b4:	000ab040 	call	1000ab04 <__muldf3>
100088b8:	a009883a 	mov	r4,r20
100088bc:	a80b883a 	mov	r5,r21
100088c0:	e0800215 	stw	r2,8(fp)
100088c4:	e0c00315 	stw	r3,12(fp)
100088c8:	000d883a 	mov	r6,zero
100088cc:	01cf9c34 	movhi	r7,15984
100088d0:	000ab040 	call	1000ab04 <__muldf3>
100088d4:	da008c17 	ldw	r8,560(sp)
100088d8:	1029883a 	mov	r20,r2
100088dc:	182b883a 	mov	r21,r3
100088e0:	e23fec1e 	bne	fp,r8,10008894 <__alt_data_end+0xf8008894>
100088e4:	0029883a 	mov	r20,zero
100088e8:	b0004f16 	blt	r22,zero,10008a28 <__kernel_rem_pio2+0x8fc>
100088ec:	054400b4 	movhi	r21,4098
100088f0:	014ffe74 	movhi	r5,16377
100088f4:	ad642404 	addi	r21,r21,-28528
100088f8:	8027883a 	mov	r19,r16
100088fc:	01100034 	movhi	r4,16384
10008900:	29487ec4 	addi	r5,r5,8699
10008904:	0039883a 	mov	fp,zero
10008908:	002f883a 	mov	r23,zero
1000890c:	0025883a 	mov	r18,zero
10008910:	00000506 	br	10008928 <__kernel_rem_pio2+0x7fc>
10008914:	9cc00204 	addi	r19,r19,8
10008918:	a4800f16 	blt	r20,r18,10008958 <__kernel_rem_pio2+0x82c>
1000891c:	a9000017 	ldw	r4,0(r21)
10008920:	a9400117 	ldw	r5,4(r21)
10008924:	ad400204 	addi	r21,r21,8
10008928:	99800017 	ldw	r6,0(r19)
1000892c:	99c00117 	ldw	r7,4(r19)
10008930:	94800044 	addi	r18,r18,1
10008934:	000ab040 	call	1000ab04 <__muldf3>
10008938:	e009883a 	mov	r4,fp
1000893c:	b80b883a 	mov	r5,r23
10008940:	100d883a 	mov	r6,r2
10008944:	180f883a 	mov	r7,r3
10008948:	00097240 	call	10009724 <__adddf3>
1000894c:	1039883a 	mov	fp,r2
10008950:	182f883a 	mov	r23,r3
10008954:	b4bfef0e 	bge	r22,r18,10008914 <__alt_data_end+0xf8008914>
10008958:	a00490fa 	slli	r2,r20,3
1000895c:	da008c17 	ldw	r8,560(sp)
10008960:	843ffe04 	addi	r16,r16,-8
10008964:	d885883a 	add	r2,sp,r2
10008968:	10802804 	addi	r2,r2,160
1000896c:	17000015 	stw	fp,0(r2)
10008970:	15c00115 	stw	r23,4(r2)
10008974:	a5000044 	addi	r20,r20,1
10008978:	823fdb1e 	bne	r16,r8,100088e8 <__alt_data_end+0xf80088e8>
1000897c:	da00a617 	ldw	r8,664(sp)
10008980:	00800084 	movi	r2,2
10008984:	12006616 	blt	r2,r8,10008b20 <__kernel_rem_pio2+0x9f4>
10008988:	0200de16 	blt	zero,r8,10008d04 <__kernel_rem_pio2+0xbd8>
1000898c:	4000141e 	bne	r8,zero,100089e0 <__kernel_rem_pio2+0x8b4>
10008990:	da008e17 	ldw	r8,568(sp)
10008994:	d8802804 	addi	r2,sp,160
10008998:	0007883a 	mov	r3,zero
1000899c:	1225883a 	add	r18,r2,r8
100089a0:	043fffc4 	movi	r16,-1
100089a4:	0005883a 	mov	r2,zero
100089a8:	91800017 	ldw	r6,0(r18)
100089ac:	91c00117 	ldw	r7,4(r18)
100089b0:	1009883a 	mov	r4,r2
100089b4:	180b883a 	mov	r5,r3
100089b8:	8c7fffc4 	addi	r17,r17,-1
100089bc:	00097240 	call	10009724 <__adddf3>
100089c0:	94bffe04 	addi	r18,r18,-8
100089c4:	8c3ff81e 	bne	r17,r16,100089a8 <__alt_data_end+0xf80089a8>
100089c8:	da008d17 	ldw	r8,564(sp)
100089cc:	40000126 	beq	r8,zero,100089d4 <__kernel_rem_pio2+0x8a8>
100089d0:	18e0003c 	xorhi	r3,r3,32768
100089d4:	da008f17 	ldw	r8,572(sp)
100089d8:	40800015 	stw	r2,0(r8)
100089dc:	40c00115 	stw	r3,4(r8)
100089e0:	da009117 	ldw	r8,580(sp)
100089e4:	408001cc 	andi	r2,r8,7
100089e8:	dfc0a517 	ldw	ra,660(sp)
100089ec:	df00a417 	ldw	fp,656(sp)
100089f0:	ddc0a317 	ldw	r23,652(sp)
100089f4:	dd80a217 	ldw	r22,648(sp)
100089f8:	dd40a117 	ldw	r21,644(sp)
100089fc:	dd00a017 	ldw	r20,640(sp)
10008a00:	dcc09f17 	ldw	r19,636(sp)
10008a04:	dc809e17 	ldw	r18,632(sp)
10008a08:	dc409d17 	ldw	r17,628(sp)
10008a0c:	dc009c17 	ldw	r16,624(sp)
10008a10:	dec0a604 	addi	sp,sp,664
10008a14:	f800283a 	ret
10008a18:	8c400044 	addi	r17,r17,1
10008a1c:	04810d0e 	bge	zero,r18,10008e54 <__kernel_rem_pio2+0xd28>
10008a20:	04c00084 	movi	r19,2
10008a24:	003eac06 	br	100084d8 <__alt_data_end+0xf80084d8>
10008a28:	0039883a 	mov	fp,zero
10008a2c:	002f883a 	mov	r23,zero
10008a30:	003fc906 	br	10008958 <__alt_data_end+0xf8008958>
10008a34:	0029883a 	mov	r20,zero
10008a38:	003ebd06 	br	10008530 <__alt_data_end+0xf8008530>
10008a3c:	05000044 	movi	r20,1
10008a40:	003eef06 	br	10008600 <__alt_data_end+0xf8008600>
10008a44:	4029883a 	mov	r20,r8
10008a48:	da009017 	ldw	r8,576(sp)
10008a4c:	a809883a 	mov	r4,r21
10008a50:	a00b883a 	mov	r5,r20
10008a54:	020dc83a 	sub	r6,zero,r8
10008a58:	dc409115 	stw	r17,580(sp)
10008a5c:	dd809417 	ldw	r22,592(sp)
10008a60:	dcc08d15 	stw	r19,564(sp)
10008a64:	00093900 	call	10009390 <scalbn>
10008a68:	000d883a 	mov	r6,zero
10008a6c:	01d05c34 	movhi	r7,16752
10008a70:	1009883a 	mov	r4,r2
10008a74:	180b883a 	mov	r5,r3
10008a78:	102b883a 	mov	r21,r2
10008a7c:	1823883a 	mov	r17,r3
10008a80:	000aa280 	call	1000aa28 <__gedf2>
10008a84:	1000e916 	blt	r2,zero,10008e2c <__kernel_rem_pio2+0xd00>
10008a88:	000d883a 	mov	r6,zero
10008a8c:	01cf9c34 	movhi	r7,15984
10008a90:	880b883a 	mov	r5,r17
10008a94:	a809883a 	mov	r4,r21
10008a98:	000ab040 	call	1000ab04 <__muldf3>
10008a9c:	180b883a 	mov	r5,r3
10008aa0:	1009883a 	mov	r4,r2
10008aa4:	000bc6c0 	call	1000bc6c <__fixdfsi>
10008aa8:	1029883a 	mov	r20,r2
10008aac:	9485883a 	add	r2,r18,r18
10008ab0:	1085883a 	add	r2,r2,r2
10008ab4:	a009883a 	mov	r4,r20
10008ab8:	d8a1883a 	add	r16,sp,r2
10008abc:	000bcec0 	call	1000bcec <__floatsidf>
10008ac0:	000d883a 	mov	r6,zero
10008ac4:	01d05c34 	movhi	r7,16752
10008ac8:	1009883a 	mov	r4,r2
10008acc:	180b883a 	mov	r5,r3
10008ad0:	000ab040 	call	1000ab04 <__muldf3>
10008ad4:	880b883a 	mov	r5,r17
10008ad8:	100d883a 	mov	r6,r2
10008adc:	180f883a 	mov	r7,r3
10008ae0:	a809883a 	mov	r4,r21
10008ae4:	000b3700 	call	1000b370 <__subdf3>
10008ae8:	180b883a 	mov	r5,r3
10008aec:	1009883a 	mov	r4,r2
10008af0:	000bc6c0 	call	1000bc6c <__fixdfsi>
10008af4:	da009017 	ldw	r8,576(sp)
10008af8:	94400044 	addi	r17,r18,1
10008afc:	8c47883a 	add	r3,r17,r17
10008b00:	84007804 	addi	r16,r16,480
10008b04:	18c7883a 	add	r3,r3,r3
10008b08:	80800015 	stw	r2,0(r16)
10008b0c:	d8c7883a 	add	r3,sp,r3
10008b10:	42000604 	addi	r8,r8,24
10008b14:	da009015 	stw	r8,576(sp)
10008b18:	1d007815 	stw	r20,480(r3)
10008b1c:	003f4b06 	br	1000884c <__alt_data_end+0xf800884c>
10008b20:	da00a617 	ldw	r8,664(sp)
10008b24:	008000c4 	movi	r2,3
10008b28:	40bfad1e 	bne	r8,r2,100089e0 <__alt_data_end+0xf80089e0>
10008b2c:	0440bc0e 	bge	zero,r17,10008e20 <__kernel_rem_pio2+0xcf4>
10008b30:	da008e17 	ldw	r8,568(sp)
10008b34:	882090fa 	slli	r16,r17,3
10008b38:	dd402804 	addi	r21,sp,160
10008b3c:	da05883a 	add	r2,sp,r8
10008b40:	10802804 	addi	r2,r2,160
10008b44:	15c00017 	ldw	r23,0(r2)
10008b48:	15800117 	ldw	r22,4(r2)
10008b4c:	8029883a 	mov	r20,r16
10008b50:	843ffe04 	addi	r16,r16,-8
10008b54:	ac21883a 	add	r16,r21,r16
10008b58:	ad29883a 	add	r20,r21,r20
10008b5c:	dac02604 	addi	r11,sp,152
10008b60:	8811883a 	mov	r8,r17
10008b64:	84400017 	ldw	r17,0(r16)
10008b68:	87000117 	ldw	fp,4(r16)
10008b6c:	b80d883a 	mov	r6,r23
10008b70:	b00f883a 	mov	r7,r22
10008b74:	8809883a 	mov	r4,r17
10008b78:	e00b883a 	mov	r5,fp
10008b7c:	da009b15 	stw	r8,620(sp)
10008b80:	dac09915 	stw	r11,612(sp)
10008b84:	00097240 	call	10009724 <__adddf3>
10008b88:	100d883a 	mov	r6,r2
10008b8c:	180f883a 	mov	r7,r3
10008b90:	8809883a 	mov	r4,r17
10008b94:	e00b883a 	mov	r5,fp
10008b98:	1027883a 	mov	r19,r2
10008b9c:	1825883a 	mov	r18,r3
10008ba0:	000b3700 	call	1000b370 <__subdf3>
10008ba4:	b80d883a 	mov	r6,r23
10008ba8:	b00f883a 	mov	r7,r22
10008bac:	1009883a 	mov	r4,r2
10008bb0:	180b883a 	mov	r5,r3
10008bb4:	00097240 	call	10009724 <__adddf3>
10008bb8:	dac09917 	ldw	r11,612(sp)
10008bbc:	a0800015 	stw	r2,0(r20)
10008bc0:	a0c00115 	stw	r3,4(r20)
10008bc4:	84c00015 	stw	r19,0(r16)
10008bc8:	84800115 	stw	r18,4(r16)
10008bcc:	843ffe04 	addi	r16,r16,-8
10008bd0:	a53ffe04 	addi	r20,r20,-8
10008bd4:	982f883a 	mov	r23,r19
10008bd8:	902d883a 	mov	r22,r18
10008bdc:	da009b17 	ldw	r8,620(sp)
10008be0:	5c3fe01e 	bne	r11,r16,10008b64 <__alt_data_end+0xf8008b64>
10008be4:	00800044 	movi	r2,1
10008be8:	12008d0e 	bge	r2,r8,10008e20 <__kernel_rem_pio2+0xcf4>
10008bec:	402090fa 	slli	r16,r8,3
10008bf0:	da008e17 	ldw	r8,568(sp)
10008bf4:	8023883a 	mov	r17,r16
10008bf8:	da05883a 	add	r2,sp,r8
10008bfc:	10802804 	addi	r2,r2,160
10008c00:	15800017 	ldw	r22,0(r2)
10008c04:	15000117 	ldw	r20,4(r2)
10008c08:	ac63883a 	add	r17,r21,r17
10008c0c:	843ffe04 	addi	r16,r16,-8
10008c10:	ac21883a 	add	r16,r21,r16
10008c14:	8825883a 	mov	r18,r17
10008c18:	8811883a 	mov	r8,r17
10008c1c:	84400017 	ldw	r17,0(r16)
10008c20:	87000117 	ldw	fp,4(r16)
10008c24:	b009883a 	mov	r4,r22
10008c28:	a00b883a 	mov	r5,r20
10008c2c:	880d883a 	mov	r6,r17
10008c30:	e00f883a 	mov	r7,fp
10008c34:	da009b15 	stw	r8,620(sp)
10008c38:	00097240 	call	10009724 <__adddf3>
10008c3c:	100d883a 	mov	r6,r2
10008c40:	180f883a 	mov	r7,r3
10008c44:	8809883a 	mov	r4,r17
10008c48:	e00b883a 	mov	r5,fp
10008c4c:	102f883a 	mov	r23,r2
10008c50:	1827883a 	mov	r19,r3
10008c54:	000b3700 	call	1000b370 <__subdf3>
10008c58:	b00d883a 	mov	r6,r22
10008c5c:	a00f883a 	mov	r7,r20
10008c60:	1009883a 	mov	r4,r2
10008c64:	180b883a 	mov	r5,r3
10008c68:	00097240 	call	10009724 <__adddf3>
10008c6c:	90800015 	stw	r2,0(r18)
10008c70:	90c00115 	stw	r3,4(r18)
10008c74:	85c00015 	stw	r23,0(r16)
10008c78:	84c00115 	stw	r19,4(r16)
10008c7c:	843ffe04 	addi	r16,r16,-8
10008c80:	94bffe04 	addi	r18,r18,-8
10008c84:	b82d883a 	mov	r22,r23
10008c88:	9829883a 	mov	r20,r19
10008c8c:	da009b17 	ldw	r8,620(sp)
10008c90:	ac3fe21e 	bne	r21,r16,10008c1c <__alt_data_end+0xf8008c1c>
10008c94:	4023883a 	mov	r17,r8
10008c98:	dc002a04 	addi	r16,sp,168
10008c9c:	0005883a 	mov	r2,zero
10008ca0:	0007883a 	mov	r3,zero
10008ca4:	89800017 	ldw	r6,0(r17)
10008ca8:	89c00117 	ldw	r7,4(r17)
10008cac:	1009883a 	mov	r4,r2
10008cb0:	8c7ffe04 	addi	r17,r17,-8
10008cb4:	180b883a 	mov	r5,r3
10008cb8:	00097240 	call	10009724 <__adddf3>
10008cbc:	847ff91e 	bne	r16,r17,10008ca4 <__alt_data_end+0xf8008ca4>
10008cc0:	da008d17 	ldw	r8,564(sp)
10008cc4:	40004726 	beq	r8,zero,10008de4 <__kernel_rem_pio2+0xcb8>
10008cc8:	d9002b17 	ldw	r4,172(sp)
10008ccc:	d9402917 	ldw	r5,164(sp)
10008cd0:	d9802a17 	ldw	r6,168(sp)
10008cd4:	da008f17 	ldw	r8,572(sp)
10008cd8:	d9c02817 	ldw	r7,160(sp)
10008cdc:	2960003c 	xorhi	r5,r5,32768
10008ce0:	2120003c 	xorhi	r4,r4,32768
10008ce4:	18e0003c 	xorhi	r3,r3,32768
10008ce8:	41c00015 	stw	r7,0(r8)
10008cec:	41400115 	stw	r5,4(r8)
10008cf0:	41800215 	stw	r6,8(r8)
10008cf4:	41000315 	stw	r4,12(r8)
10008cf8:	40800415 	stw	r2,16(r8)
10008cfc:	40c00515 	stw	r3,20(r8)
10008d00:	003f3706 	br	100089e0 <__alt_data_end+0xf80089e0>
10008d04:	da008e17 	ldw	r8,568(sp)
10008d08:	d8802804 	addi	r2,sp,160
10008d0c:	dc002604 	addi	r16,sp,152
10008d10:	1225883a 	add	r18,r2,r8
10008d14:	0007883a 	mov	r3,zero
10008d18:	0005883a 	mov	r2,zero
10008d1c:	91800017 	ldw	r6,0(r18)
10008d20:	91c00117 	ldw	r7,4(r18)
10008d24:	1009883a 	mov	r4,r2
10008d28:	94bffe04 	addi	r18,r18,-8
10008d2c:	180b883a 	mov	r5,r3
10008d30:	00097240 	call	10009724 <__adddf3>
10008d34:	943ff91e 	bne	r18,r16,10008d1c <__alt_data_end+0xf8008d1c>
10008d38:	da008d17 	ldw	r8,564(sp)
10008d3c:	d9002817 	ldw	r4,160(sp)
10008d40:	d9402917 	ldw	r5,164(sp)
10008d44:	40001a26 	beq	r8,zero,10008db0 <__kernel_rem_pio2+0xc84>
10008d48:	da008f17 	ldw	r8,572(sp)
10008d4c:	19a0003c 	xorhi	r6,r3,32768
10008d50:	180f883a 	mov	r7,r3
10008d54:	41800115 	stw	r6,4(r8)
10008d58:	40800015 	stw	r2,0(r8)
10008d5c:	100d883a 	mov	r6,r2
10008d60:	000b3700 	call	1000b370 <__subdf3>
10008d64:	04400c0e 	bge	zero,r17,10008d98 <__kernel_rem_pio2+0xc6c>
10008d68:	dc002a04 	addi	r16,sp,168
10008d6c:	04800044 	movi	r18,1
10008d70:	81800017 	ldw	r6,0(r16)
10008d74:	81c00117 	ldw	r7,4(r16)
10008d78:	1009883a 	mov	r4,r2
10008d7c:	180b883a 	mov	r5,r3
10008d80:	94800044 	addi	r18,r18,1
10008d84:	00097240 	call	10009724 <__adddf3>
10008d88:	84000204 	addi	r16,r16,8
10008d8c:	8cbff80e 	bge	r17,r18,10008d70 <__alt_data_end+0xf8008d70>
10008d90:	da008d17 	ldw	r8,564(sp)
10008d94:	40004226 	beq	r8,zero,10008ea0 <__kernel_rem_pio2+0xd74>
10008d98:	da008f17 	ldw	r8,572(sp)
10008d9c:	1009883a 	mov	r4,r2
10008da0:	18a0003c 	xorhi	r2,r3,32768
10008da4:	41000215 	stw	r4,8(r8)
10008da8:	40800315 	stw	r2,12(r8)
10008dac:	003f0c06 	br	100089e0 <__alt_data_end+0xf80089e0>
10008db0:	da008f17 	ldw	r8,572(sp)
10008db4:	100d883a 	mov	r6,r2
10008db8:	180f883a 	mov	r7,r3
10008dbc:	40800015 	stw	r2,0(r8)
10008dc0:	40c00115 	stw	r3,4(r8)
10008dc4:	000b3700 	call	1000b370 <__subdf3>
10008dc8:	047fe716 	blt	zero,r17,10008d68 <__alt_data_end+0xf8008d68>
10008dcc:	da008f17 	ldw	r8,572(sp)
10008dd0:	1009883a 	mov	r4,r2
10008dd4:	1805883a 	mov	r2,r3
10008dd8:	41000215 	stw	r4,8(r8)
10008ddc:	40800315 	stw	r2,12(r8)
10008de0:	003eff06 	br	100089e0 <__alt_data_end+0xf80089e0>
10008de4:	da008f17 	ldw	r8,572(sp)
10008de8:	d9802817 	ldw	r6,160(sp)
10008dec:	d9402a17 	ldw	r5,168(sp)
10008df0:	d9002b17 	ldw	r4,172(sp)
10008df4:	41800015 	stw	r6,0(r8)
10008df8:	d9802917 	ldw	r6,164(sp)
10008dfc:	41400215 	stw	r5,8(r8)
10008e00:	41000315 	stw	r4,12(r8)
10008e04:	41800115 	stw	r6,4(r8)
10008e08:	40800415 	stw	r2,16(r8)
10008e0c:	40c00515 	stw	r3,20(r8)
10008e10:	003ef306 	br	100089e0 <__alt_data_end+0xf80089e0>
10008e14:	da00a617 	ldw	r8,664(sp)
10008e18:	008000c4 	movi	r2,3
10008e1c:	40bef01e 	bne	r8,r2,100089e0 <__alt_data_end+0xf80089e0>
10008e20:	0005883a 	mov	r2,zero
10008e24:	0007883a 	mov	r3,zero
10008e28:	003fa506 	br	10008cc0 <__alt_data_end+0xf8008cc0>
10008e2c:	9485883a 	add	r2,r18,r18
10008e30:	1085883a 	add	r2,r2,r2
10008e34:	d8a1883a 	add	r16,sp,r2
10008e38:	880b883a 	mov	r5,r17
10008e3c:	a809883a 	mov	r4,r21
10008e40:	84007804 	addi	r16,r16,480
10008e44:	000bc6c0 	call	1000bc6c <__fixdfsi>
10008e48:	80800015 	stw	r2,0(r16)
10008e4c:	9023883a 	mov	r17,r18
10008e50:	003e7e06 	br	1000884c <__alt_data_end+0xf800884c>
10008e54:	a80d883a 	mov	r6,r21
10008e58:	400f883a 	mov	r7,r8
10008e5c:	0009883a 	mov	r4,zero
10008e60:	014ffc34 	movhi	r5,16368
10008e64:	000b3700 	call	1000b370 <__subdf3>
10008e68:	102b883a 	mov	r21,r2
10008e6c:	1811883a 	mov	r8,r3
10008e70:	04c00084 	movi	r19,2
10008e74:	003dc006 	br	10008578 <__alt_data_end+0xf8008578>
10008e78:	da00a617 	ldw	r8,664(sp)
10008e7c:	00800084 	movi	r2,2
10008e80:	123fe416 	blt	r2,r8,10008e14 <__alt_data_end+0xf8008e14>
10008e84:	02000c16 	blt	zero,r8,10008eb8 <__kernel_rem_pio2+0xd8c>
10008e88:	403ed51e 	bne	r8,zero,100089e0 <__alt_data_end+0xf80089e0>
10008e8c:	0005883a 	mov	r2,zero
10008e90:	0007883a 	mov	r3,zero
10008e94:	003ecc06 	br	100089c8 <__alt_data_end+0xf80089c8>
10008e98:	d8009215 	stw	zero,584(sp)
10008e9c:	003cc106 	br	100081a4 <__alt_data_end+0xf80081a4>
10008ea0:	da008f17 	ldw	r8,572(sp)
10008ea4:	1009883a 	mov	r4,r2
10008ea8:	1805883a 	mov	r2,r3
10008eac:	41000215 	stw	r4,8(r8)
10008eb0:	40800315 	stw	r2,12(r8)
10008eb4:	003eca06 	br	100089e0 <__alt_data_end+0xf80089e0>
10008eb8:	0005883a 	mov	r2,zero
10008ebc:	0007883a 	mov	r3,zero
10008ec0:	003f9d06 	br	10008d38 <__alt_data_end+0xf8008d38>

10008ec4 <__kernel_sin>:
10008ec4:	00a00034 	movhi	r2,32768
10008ec8:	defff404 	addi	sp,sp,-48
10008ecc:	10bfffc4 	addi	r2,r2,-1
10008ed0:	00cf9034 	movhi	r3,15936
10008ed4:	ddc00915 	stw	r23,36(sp)
10008ed8:	dd800815 	stw	r22,32(sp)
10008edc:	dc400315 	stw	r17,12(sp)
10008ee0:	dc000215 	stw	r16,8(sp)
10008ee4:	dfc00b15 	stw	ra,44(sp)
10008ee8:	df000a15 	stw	fp,40(sp)
10008eec:	dd400715 	stw	r21,28(sp)
10008ef0:	dd000615 	stw	r20,24(sp)
10008ef4:	dcc00515 	stw	r19,20(sp)
10008ef8:	dc800415 	stw	r18,16(sp)
10008efc:	2884703a 	and	r2,r5,r2
10008f00:	18ffffc4 	addi	r3,r3,-1
10008f04:	2821883a 	mov	r16,r5
10008f08:	2023883a 	mov	r17,r4
10008f0c:	302f883a 	mov	r23,r6
10008f10:	382d883a 	mov	r22,r7
10008f14:	18800216 	blt	r3,r2,10008f20 <__kernel_sin+0x5c>
10008f18:	000bc6c0 	call	1000bc6c <__fixdfsi>
10008f1c:	10009926 	beq	r2,zero,10009184 <__kernel_sin+0x2c0>
10008f20:	880d883a 	mov	r6,r17
10008f24:	800f883a 	mov	r7,r16
10008f28:	8809883a 	mov	r4,r17
10008f2c:	800b883a 	mov	r5,r16
10008f30:	000ab040 	call	1000ab04 <__muldf3>
10008f34:	100d883a 	mov	r6,r2
10008f38:	180f883a 	mov	r7,r3
10008f3c:	8809883a 	mov	r4,r17
10008f40:	800b883a 	mov	r5,r16
10008f44:	1027883a 	mov	r19,r2
10008f48:	1825883a 	mov	r18,r3
10008f4c:	000ab040 	call	1000ab04 <__muldf3>
10008f50:	0196b434 	movhi	r6,23248
10008f54:	01cf79b4 	movhi	r7,15846
10008f58:	31b55f04 	addi	r6,r6,-10884
10008f5c:	39f64e84 	addi	r7,r7,-9926
10008f60:	9809883a 	mov	r4,r19
10008f64:	900b883a 	mov	r5,r18
10008f68:	102b883a 	mov	r21,r2
10008f6c:	1829883a 	mov	r20,r3
10008f70:	000ab040 	call	1000ab04 <__muldf3>
10008f74:	01a28b34 	movhi	r6,35372
10008f78:	01cf96f4 	movhi	r7,15963
10008f7c:	31a73ac4 	addi	r6,r6,-25365
10008f80:	39f97984 	addi	r7,r7,-6682
10008f84:	1009883a 	mov	r4,r2
10008f88:	180b883a 	mov	r5,r3
10008f8c:	000b3700 	call	1000b370 <__subdf3>
10008f90:	980d883a 	mov	r6,r19
10008f94:	900f883a 	mov	r7,r18
10008f98:	1009883a 	mov	r4,r2
10008f9c:	180b883a 	mov	r5,r3
10008fa0:	000ab040 	call	1000ab04 <__muldf3>
10008fa4:	0195ecb4 	movhi	r6,22450
10008fa8:	01cfb1f4 	movhi	r7,16071
10008fac:	31bf9f44 	addi	r6,r6,-387
10008fb0:	39c778c4 	addi	r7,r7,7651
10008fb4:	1009883a 	mov	r4,r2
10008fb8:	180b883a 	mov	r5,r3
10008fbc:	00097240 	call	10009724 <__adddf3>
10008fc0:	980d883a 	mov	r6,r19
10008fc4:	900f883a 	mov	r7,r18
10008fc8:	1009883a 	mov	r4,r2
10008fcc:	180b883a 	mov	r5,r3
10008fd0:	000ab040 	call	1000ab04 <__muldf3>
10008fd4:	01867074 	movhi	r6,6593
10008fd8:	01cfcab4 	movhi	r7,16170
10008fdc:	31987544 	addi	r6,r6,25045
10008fe0:	39c06804 	addi	r7,r7,416
10008fe4:	1009883a 	mov	r4,r2
10008fe8:	180b883a 	mov	r5,r3
10008fec:	000b3700 	call	1000b370 <__subdf3>
10008ff0:	980d883a 	mov	r6,r19
10008ff4:	900f883a 	mov	r7,r18
10008ff8:	1009883a 	mov	r4,r2
10008ffc:	180b883a 	mov	r5,r3
10009000:	000ab040 	call	1000ab04 <__muldf3>
10009004:	01844474 	movhi	r6,4369
10009008:	01cfe074 	movhi	r7,16257
1000900c:	31be2984 	addi	r6,r6,-1882
10009010:	39c44444 	addi	r7,r7,4369
10009014:	1009883a 	mov	r4,r2
10009018:	180b883a 	mov	r5,r3
1000901c:	00097240 	call	10009724 <__adddf3>
10009020:	1011883a 	mov	r8,r2
10009024:	d8800c17 	ldw	r2,48(sp)
10009028:	1839883a 	mov	fp,r3
1000902c:	10003e26 	beq	r2,zero,10009128 <__kernel_sin+0x264>
10009030:	000d883a 	mov	r6,zero
10009034:	01cff834 	movhi	r7,16352
10009038:	b809883a 	mov	r4,r23
1000903c:	b00b883a 	mov	r5,r22
10009040:	da000015 	stw	r8,0(sp)
10009044:	000ab040 	call	1000ab04 <__muldf3>
10009048:	da000017 	ldw	r8,0(sp)
1000904c:	e00f883a 	mov	r7,fp
10009050:	a809883a 	mov	r4,r21
10009054:	400d883a 	mov	r6,r8
10009058:	a00b883a 	mov	r5,r20
1000905c:	d8c00115 	stw	r3,4(sp)
10009060:	d8800015 	stw	r2,0(sp)
10009064:	000ab040 	call	1000ab04 <__muldf3>
10009068:	da800017 	ldw	r10,0(sp)
1000906c:	da400117 	ldw	r9,4(sp)
10009070:	100d883a 	mov	r6,r2
10009074:	5009883a 	mov	r4,r10
10009078:	480b883a 	mov	r5,r9
1000907c:	180f883a 	mov	r7,r3
10009080:	000b3700 	call	1000b370 <__subdf3>
10009084:	980d883a 	mov	r6,r19
10009088:	900f883a 	mov	r7,r18
1000908c:	1009883a 	mov	r4,r2
10009090:	180b883a 	mov	r5,r3
10009094:	000ab040 	call	1000ab04 <__muldf3>
10009098:	b80d883a 	mov	r6,r23
1000909c:	b00f883a 	mov	r7,r22
100090a0:	1009883a 	mov	r4,r2
100090a4:	180b883a 	mov	r5,r3
100090a8:	000b3700 	call	1000b370 <__subdf3>
100090ac:	01955574 	movhi	r6,21845
100090b0:	01cff174 	movhi	r7,16325
100090b4:	31955244 	addi	r6,r6,21833
100090b8:	39d55544 	addi	r7,r7,21845
100090bc:	a809883a 	mov	r4,r21
100090c0:	a00b883a 	mov	r5,r20
100090c4:	1027883a 	mov	r19,r2
100090c8:	1825883a 	mov	r18,r3
100090cc:	000ab040 	call	1000ab04 <__muldf3>
100090d0:	100d883a 	mov	r6,r2
100090d4:	180f883a 	mov	r7,r3
100090d8:	9809883a 	mov	r4,r19
100090dc:	900b883a 	mov	r5,r18
100090e0:	00097240 	call	10009724 <__adddf3>
100090e4:	100d883a 	mov	r6,r2
100090e8:	180f883a 	mov	r7,r3
100090ec:	8809883a 	mov	r4,r17
100090f0:	800b883a 	mov	r5,r16
100090f4:	000b3700 	call	1000b370 <__subdf3>
100090f8:	dfc00b17 	ldw	ra,44(sp)
100090fc:	df000a17 	ldw	fp,40(sp)
10009100:	ddc00917 	ldw	r23,36(sp)
10009104:	dd800817 	ldw	r22,32(sp)
10009108:	dd400717 	ldw	r21,28(sp)
1000910c:	dd000617 	ldw	r20,24(sp)
10009110:	dcc00517 	ldw	r19,20(sp)
10009114:	dc800417 	ldw	r18,16(sp)
10009118:	dc400317 	ldw	r17,12(sp)
1000911c:	dc000217 	ldw	r16,8(sp)
10009120:	dec00c04 	addi	sp,sp,48
10009124:	f800283a 	ret
10009128:	400d883a 	mov	r6,r8
1000912c:	9809883a 	mov	r4,r19
10009130:	900b883a 	mov	r5,r18
10009134:	180f883a 	mov	r7,r3
10009138:	000ab040 	call	1000ab04 <__muldf3>
1000913c:	01955574 	movhi	r6,21845
10009140:	01cff174 	movhi	r7,16325
10009144:	31955244 	addi	r6,r6,21833
10009148:	39d55544 	addi	r7,r7,21845
1000914c:	1009883a 	mov	r4,r2
10009150:	180b883a 	mov	r5,r3
10009154:	000b3700 	call	1000b370 <__subdf3>
10009158:	a80d883a 	mov	r6,r21
1000915c:	a00f883a 	mov	r7,r20
10009160:	1009883a 	mov	r4,r2
10009164:	180b883a 	mov	r5,r3
10009168:	000ab040 	call	1000ab04 <__muldf3>
1000916c:	880d883a 	mov	r6,r17
10009170:	800f883a 	mov	r7,r16
10009174:	1009883a 	mov	r4,r2
10009178:	180b883a 	mov	r5,r3
1000917c:	00097240 	call	10009724 <__adddf3>
10009180:	003fdd06 	br	100090f8 <__alt_data_end+0xf80090f8>
10009184:	8805883a 	mov	r2,r17
10009188:	8007883a 	mov	r3,r16
1000918c:	003fda06 	br	100090f8 <__alt_data_end+0xf80090f8>

10009190 <fabs>:
10009190:	00e00034 	movhi	r3,32768
10009194:	18ffffc4 	addi	r3,r3,-1
10009198:	2005883a 	mov	r2,r4
1000919c:	28c6703a 	and	r3,r5,r3
100091a0:	f800283a 	ret

100091a4 <floor>:
100091a4:	2811d53a 	srai	r8,r5,20
100091a8:	defffa04 	addi	sp,sp,-24
100091ac:	dcc00315 	stw	r19,12(sp)
100091b0:	4201ffcc 	andi	r8,r8,2047
100091b4:	dc800215 	stw	r18,8(sp)
100091b8:	dc400115 	stw	r17,4(sp)
100091bc:	dc000015 	stw	r16,0(sp)
100091c0:	dfc00515 	stw	ra,20(sp)
100091c4:	dd000415 	stw	r20,16(sp)
100091c8:	44bf0044 	addi	r18,r8,-1023
100091cc:	018004c4 	movi	r6,19
100091d0:	2821883a 	mov	r16,r5
100091d4:	2005883a 	mov	r2,r4
100091d8:	280f883a 	mov	r7,r5
100091dc:	2827883a 	mov	r19,r5
100091e0:	2023883a 	mov	r17,r4
100091e4:	34801916 	blt	r6,r18,1000924c <floor+0xa8>
100091e8:	90003c16 	blt	r18,zero,100092dc <floor+0x138>
100091ec:	05000434 	movhi	r20,16
100091f0:	a53fffc4 	addi	r20,r20,-1
100091f4:	a4a9d83a 	sra	r20,r20,r18
100091f8:	2d0c703a 	and	r6,r5,r20
100091fc:	310cb03a 	or	r6,r6,r4
10009200:	30001626 	beq	r6,zero,1000925c <floor+0xb8>
10009204:	01a20034 	movhi	r6,34816
10009208:	01df8e34 	movhi	r7,32312
1000920c:	319d6704 	addi	r6,r6,30108
10009210:	39f90f04 	addi	r7,r7,-7108
10009214:	00097240 	call	10009724 <__adddf3>
10009218:	000d883a 	mov	r6,zero
1000921c:	000f883a 	mov	r7,zero
10009220:	1009883a 	mov	r4,r2
10009224:	180b883a 	mov	r5,r3
10009228:	000aa280 	call	1000aa28 <__gedf2>
1000922c:	0080040e 	bge	zero,r2,10009240 <floor+0x9c>
10009230:	80003c16 	blt	r16,zero,10009324 <floor+0x180>
10009234:	0520303a 	nor	r16,zero,r20
10009238:	84e0703a 	and	r16,r16,r19
1000923c:	0023883a 	mov	r17,zero
10009240:	8805883a 	mov	r2,r17
10009244:	8007883a 	mov	r3,r16
10009248:	00000506 	br	10009260 <floor+0xbc>
1000924c:	01800cc4 	movi	r6,51
10009250:	34800b0e 	bge	r6,r18,10009280 <floor+0xdc>
10009254:	01810004 	movi	r6,1024
10009258:	91802f26 	beq	r18,r6,10009318 <floor+0x174>
1000925c:	3807883a 	mov	r3,r7
10009260:	dfc00517 	ldw	ra,20(sp)
10009264:	dd000417 	ldw	r20,16(sp)
10009268:	dcc00317 	ldw	r19,12(sp)
1000926c:	dc800217 	ldw	r18,8(sp)
10009270:	dc400117 	ldw	r17,4(sp)
10009274:	dc000017 	ldw	r16,0(sp)
10009278:	dec00604 	addi	sp,sp,24
1000927c:	f800283a 	ret
10009280:	423efb44 	addi	r8,r8,-1043
10009284:	053fffc4 	movi	r20,-1
10009288:	a228d83a 	srl	r20,r20,r8
1000928c:	250c703a 	and	r6,r4,r20
10009290:	303ff226 	beq	r6,zero,1000925c <__alt_data_end+0xf800925c>
10009294:	01a20034 	movhi	r6,34816
10009298:	01df8e34 	movhi	r7,32312
1000929c:	319d6704 	addi	r6,r6,30108
100092a0:	39f90f04 	addi	r7,r7,-7108
100092a4:	00097240 	call	10009724 <__adddf3>
100092a8:	000d883a 	mov	r6,zero
100092ac:	000f883a 	mov	r7,zero
100092b0:	1009883a 	mov	r4,r2
100092b4:	180b883a 	mov	r5,r3
100092b8:	000aa280 	call	1000aa28 <__gedf2>
100092bc:	00bfe00e 	bge	zero,r2,10009240 <__alt_data_end+0xf8009240>
100092c0:	80001c16 	blt	r16,zero,10009334 <floor+0x190>
100092c4:	0510303a 	nor	r8,zero,r20
100092c8:	9821883a 	mov	r16,r19
100092cc:	8a22703a 	and	r17,r17,r8
100092d0:	8805883a 	mov	r2,r17
100092d4:	8007883a 	mov	r3,r16
100092d8:	003fe106 	br	10009260 <__alt_data_end+0xf8009260>
100092dc:	01a20034 	movhi	r6,34816
100092e0:	01df8e34 	movhi	r7,32312
100092e4:	319d6704 	addi	r6,r6,30108
100092e8:	39f90f04 	addi	r7,r7,-7108
100092ec:	00097240 	call	10009724 <__adddf3>
100092f0:	000d883a 	mov	r6,zero
100092f4:	000f883a 	mov	r7,zero
100092f8:	1009883a 	mov	r4,r2
100092fc:	180b883a 	mov	r5,r3
10009300:	000aa280 	call	1000aa28 <__gedf2>
10009304:	00bfce0e 	bge	zero,r2,10009240 <__alt_data_end+0xf8009240>
10009308:	80001516 	blt	r16,zero,10009360 <floor+0x1bc>
1000930c:	0023883a 	mov	r17,zero
10009310:	0021883a 	mov	r16,zero
10009314:	003fca06 	br	10009240 <__alt_data_end+0xf8009240>
10009318:	200d883a 	mov	r6,r4
1000931c:	00097240 	call	10009724 <__adddf3>
10009320:	003fcf06 	br	10009260 <__alt_data_end+0xf8009260>
10009324:	00800434 	movhi	r2,16
10009328:	14a5d83a 	sra	r18,r2,r18
1000932c:	84a7883a 	add	r19,r16,r18
10009330:	003fc006 	br	10009234 <__alt_data_end+0xf8009234>
10009334:	00800504 	movi	r2,20
10009338:	90801326 	beq	r18,r2,10009388 <floor+0x1e4>
1000933c:	00800d04 	movi	r2,52
10009340:	14a5c83a 	sub	r18,r2,r18
10009344:	00800044 	movi	r2,1
10009348:	1484983a 	sll	r2,r2,r18
1000934c:	1445883a 	add	r2,r2,r17
10009350:	14400b2e 	bgeu	r2,r17,10009380 <floor+0x1dc>
10009354:	84c00044 	addi	r19,r16,1
10009358:	1023883a 	mov	r17,r2
1000935c:	003fd906 	br	100092c4 <__alt_data_end+0xf80092c4>
10009360:	00a00034 	movhi	r2,32768
10009364:	10bfffc4 	addi	r2,r2,-1
10009368:	8084703a 	and	r2,r16,r2
1000936c:	1462b03a 	or	r17,r2,r17
10009370:	883fb326 	beq	r17,zero,10009240 <__alt_data_end+0xf8009240>
10009374:	0023883a 	mov	r17,zero
10009378:	042ffc34 	movhi	r16,49136
1000937c:	003fb006 	br	10009240 <__alt_data_end+0xf8009240>
10009380:	1023883a 	mov	r17,r2
10009384:	003fcf06 	br	100092c4 <__alt_data_end+0xf80092c4>
10009388:	84c00044 	addi	r19,r16,1
1000938c:	003fcd06 	br	100092c4 <__alt_data_end+0xf80092c4>

10009390 <scalbn>:
10009390:	2a1ffc2c 	andhi	r8,r5,32752
10009394:	4011d53a 	srai	r8,r8,20
10009398:	defffe04 	addi	sp,sp,-8
1000939c:	dc000015 	stw	r16,0(sp)
100093a0:	dfc00115 	stw	ra,4(sp)
100093a4:	280f883a 	mov	r7,r5
100093a8:	2015883a 	mov	r10,r4
100093ac:	3021883a 	mov	r16,r6
100093b0:	40001e1e 	bne	r8,zero,1000942c <scalbn+0x9c>
100093b4:	00a00034 	movhi	r2,32768
100093b8:	10bfffc4 	addi	r2,r2,-1
100093bc:	2884703a 	and	r2,r5,r2
100093c0:	1104b03a 	or	r2,r2,r4
100093c4:	10002226 	beq	r2,zero,10009450 <scalbn+0xc0>
100093c8:	01d0d434 	movhi	r7,17232
100093cc:	000d883a 	mov	r6,zero
100093d0:	000ab040 	call	1000ab04 <__muldf3>
100093d4:	013ffff4 	movhi	r4,65535
100093d8:	210f2c04 	addi	r4,r4,15536
100093dc:	1015883a 	mov	r10,r2
100093e0:	180f883a 	mov	r7,r3
100093e4:	81002a16 	blt	r16,r4,10009490 <scalbn+0x100>
100093e8:	191ffc2c 	andhi	r4,r3,32752
100093ec:	2009d53a 	srai	r4,r4,20
100093f0:	223ff284 	addi	r8,r4,-54
100093f4:	8211883a 	add	r8,r16,r8
100093f8:	0081ff84 	movi	r2,2046
100093fc:	12002f16 	blt	r2,r8,100094bc <scalbn+0x12c>
10009400:	0200190e 	bge	zero,r8,10009468 <scalbn+0xd8>
10009404:	4010953a 	slli	r8,r8,20
10009408:	01600434 	movhi	r5,32784
1000940c:	297fffc4 	addi	r5,r5,-1
10009410:	194e703a 	and	r7,r3,r5
10009414:	5005883a 	mov	r2,r10
10009418:	3a06b03a 	or	r3,r7,r8
1000941c:	dfc00117 	ldw	ra,4(sp)
10009420:	dc000017 	ldw	r16,0(sp)
10009424:	dec00204 	addi	sp,sp,8
10009428:	f800283a 	ret
1000942c:	0081ffc4 	movi	r2,2047
10009430:	2807883a 	mov	r3,r5
10009434:	40bfef1e 	bne	r8,r2,100093f4 <__alt_data_end+0xf80093f4>
10009438:	200d883a 	mov	r6,r4
1000943c:	00097240 	call	10009724 <__adddf3>
10009440:	dfc00117 	ldw	ra,4(sp)
10009444:	dc000017 	ldw	r16,0(sp)
10009448:	dec00204 	addi	sp,sp,8
1000944c:	f800283a 	ret
10009450:	2005883a 	mov	r2,r4
10009454:	2807883a 	mov	r3,r5
10009458:	dfc00117 	ldw	ra,4(sp)
1000945c:	dc000017 	ldw	r16,0(sp)
10009460:	dec00204 	addi	sp,sp,8
10009464:	f800283a 	ret
10009468:	00bff2c4 	movi	r2,-53
1000946c:	4080240e 	bge	r8,r2,10009500 <scalbn+0x170>
10009470:	00b0d414 	movui	r2,50000
10009474:	14001116 	blt	r2,r16,100094bc <scalbn+0x12c>
10009478:	0130be74 	movhi	r4,49913
1000947c:	01406974 	movhi	r5,421
10009480:	213cd644 	addi	r4,r4,-3239
10009484:	295b87c4 	addi	r5,r5,28191
10009488:	500d883a 	mov	r6,r10
1000948c:	000952c0 	call	1000952c <copysign>
10009490:	01b0be74 	movhi	r6,49913
10009494:	01c06974 	movhi	r7,421
10009498:	31bcd644 	addi	r6,r6,-3239
1000949c:	39db87c4 	addi	r7,r7,28191
100094a0:	1009883a 	mov	r4,r2
100094a4:	180b883a 	mov	r5,r3
100094a8:	000ab040 	call	1000ab04 <__muldf3>
100094ac:	dfc00117 	ldw	ra,4(sp)
100094b0:	dc000017 	ldw	r16,0(sp)
100094b4:	dec00204 	addi	sp,sp,8
100094b8:	f800283a 	ret
100094bc:	01220034 	movhi	r4,34816
100094c0:	015f8e34 	movhi	r5,32312
100094c4:	500d883a 	mov	r6,r10
100094c8:	211d6704 	addi	r4,r4,30108
100094cc:	29790f04 	addi	r5,r5,-7108
100094d0:	000952c0 	call	1000952c <copysign>
100094d4:	01a20034 	movhi	r6,34816
100094d8:	01df8e34 	movhi	r7,32312
100094dc:	319d6704 	addi	r6,r6,30108
100094e0:	39f90f04 	addi	r7,r7,-7108
100094e4:	1009883a 	mov	r4,r2
100094e8:	180b883a 	mov	r5,r3
100094ec:	000ab040 	call	1000ab04 <__muldf3>
100094f0:	dfc00117 	ldw	ra,4(sp)
100094f4:	dc000017 	ldw	r16,0(sp)
100094f8:	dec00204 	addi	sp,sp,8
100094fc:	f800283a 	ret
10009500:	42000d84 	addi	r8,r8,54
10009504:	4012953a 	slli	r9,r8,20
10009508:	01e00434 	movhi	r7,32784
1000950c:	39ffffc4 	addi	r7,r7,-1
10009510:	19ca703a 	and	r5,r3,r7
10009514:	000d883a 	mov	r6,zero
10009518:	01cf2434 	movhi	r7,15504
1000951c:	5009883a 	mov	r4,r10
10009520:	494ab03a 	or	r5,r9,r5
10009524:	000ab040 	call	1000ab04 <__muldf3>
10009528:	003fbc06 	br	1000941c <__alt_data_end+0xf800941c>

1000952c <copysign>:
1000952c:	2005883a 	mov	r2,r4
10009530:	01200034 	movhi	r4,32768
10009534:	213fffc4 	addi	r4,r4,-1
10009538:	38e0002c 	andhi	r3,r7,32768
1000953c:	290a703a 	and	r5,r5,r4
10009540:	28c6b03a 	or	r3,r5,r3
10009544:	f800283a 	ret

10009548 <__divsi3>:
10009548:	20001b16 	blt	r4,zero,100095b8 <__divsi3+0x70>
1000954c:	000f883a 	mov	r7,zero
10009550:	28001616 	blt	r5,zero,100095ac <__divsi3+0x64>
10009554:	200d883a 	mov	r6,r4
10009558:	29001a2e 	bgeu	r5,r4,100095c4 <__divsi3+0x7c>
1000955c:	00800804 	movi	r2,32
10009560:	00c00044 	movi	r3,1
10009564:	00000106 	br	1000956c <__divsi3+0x24>
10009568:	10000d26 	beq	r2,zero,100095a0 <__divsi3+0x58>
1000956c:	294b883a 	add	r5,r5,r5
10009570:	10bfffc4 	addi	r2,r2,-1
10009574:	18c7883a 	add	r3,r3,r3
10009578:	293ffb36 	bltu	r5,r4,10009568 <__alt_data_end+0xf8009568>
1000957c:	0005883a 	mov	r2,zero
10009580:	18000726 	beq	r3,zero,100095a0 <__divsi3+0x58>
10009584:	0005883a 	mov	r2,zero
10009588:	31400236 	bltu	r6,r5,10009594 <__divsi3+0x4c>
1000958c:	314dc83a 	sub	r6,r6,r5
10009590:	10c4b03a 	or	r2,r2,r3
10009594:	1806d07a 	srli	r3,r3,1
10009598:	280ad07a 	srli	r5,r5,1
1000959c:	183ffa1e 	bne	r3,zero,10009588 <__alt_data_end+0xf8009588>
100095a0:	38000126 	beq	r7,zero,100095a8 <__divsi3+0x60>
100095a4:	0085c83a 	sub	r2,zero,r2
100095a8:	f800283a 	ret
100095ac:	014bc83a 	sub	r5,zero,r5
100095b0:	39c0005c 	xori	r7,r7,1
100095b4:	003fe706 	br	10009554 <__alt_data_end+0xf8009554>
100095b8:	0109c83a 	sub	r4,zero,r4
100095bc:	01c00044 	movi	r7,1
100095c0:	003fe306 	br	10009550 <__alt_data_end+0xf8009550>
100095c4:	00c00044 	movi	r3,1
100095c8:	003fee06 	br	10009584 <__alt_data_end+0xf8009584>

100095cc <__modsi3>:
100095cc:	20001716 	blt	r4,zero,1000962c <__modsi3+0x60>
100095d0:	000f883a 	mov	r7,zero
100095d4:	2005883a 	mov	r2,r4
100095d8:	28001216 	blt	r5,zero,10009624 <__modsi3+0x58>
100095dc:	2900162e 	bgeu	r5,r4,10009638 <__modsi3+0x6c>
100095e0:	01800804 	movi	r6,32
100095e4:	00c00044 	movi	r3,1
100095e8:	00000106 	br	100095f0 <__modsi3+0x24>
100095ec:	30000a26 	beq	r6,zero,10009618 <__modsi3+0x4c>
100095f0:	294b883a 	add	r5,r5,r5
100095f4:	31bfffc4 	addi	r6,r6,-1
100095f8:	18c7883a 	add	r3,r3,r3
100095fc:	293ffb36 	bltu	r5,r4,100095ec <__alt_data_end+0xf80095ec>
10009600:	18000526 	beq	r3,zero,10009618 <__modsi3+0x4c>
10009604:	1806d07a 	srli	r3,r3,1
10009608:	11400136 	bltu	r2,r5,10009610 <__modsi3+0x44>
1000960c:	1145c83a 	sub	r2,r2,r5
10009610:	280ad07a 	srli	r5,r5,1
10009614:	183ffb1e 	bne	r3,zero,10009604 <__alt_data_end+0xf8009604>
10009618:	38000126 	beq	r7,zero,10009620 <__modsi3+0x54>
1000961c:	0085c83a 	sub	r2,zero,r2
10009620:	f800283a 	ret
10009624:	014bc83a 	sub	r5,zero,r5
10009628:	003fec06 	br	100095dc <__alt_data_end+0xf80095dc>
1000962c:	0109c83a 	sub	r4,zero,r4
10009630:	01c00044 	movi	r7,1
10009634:	003fe706 	br	100095d4 <__alt_data_end+0xf80095d4>
10009638:	00c00044 	movi	r3,1
1000963c:	003ff106 	br	10009604 <__alt_data_end+0xf8009604>

10009640 <__udivsi3>:
10009640:	200d883a 	mov	r6,r4
10009644:	2900152e 	bgeu	r5,r4,1000969c <__udivsi3+0x5c>
10009648:	28001416 	blt	r5,zero,1000969c <__udivsi3+0x5c>
1000964c:	00800804 	movi	r2,32
10009650:	00c00044 	movi	r3,1
10009654:	00000206 	br	10009660 <__udivsi3+0x20>
10009658:	10000e26 	beq	r2,zero,10009694 <__udivsi3+0x54>
1000965c:	28000516 	blt	r5,zero,10009674 <__udivsi3+0x34>
10009660:	294b883a 	add	r5,r5,r5
10009664:	10bfffc4 	addi	r2,r2,-1
10009668:	18c7883a 	add	r3,r3,r3
1000966c:	293ffa36 	bltu	r5,r4,10009658 <__alt_data_end+0xf8009658>
10009670:	18000826 	beq	r3,zero,10009694 <__udivsi3+0x54>
10009674:	0005883a 	mov	r2,zero
10009678:	31400236 	bltu	r6,r5,10009684 <__udivsi3+0x44>
1000967c:	314dc83a 	sub	r6,r6,r5
10009680:	10c4b03a 	or	r2,r2,r3
10009684:	1806d07a 	srli	r3,r3,1
10009688:	280ad07a 	srli	r5,r5,1
1000968c:	183ffa1e 	bne	r3,zero,10009678 <__alt_data_end+0xf8009678>
10009690:	f800283a 	ret
10009694:	0005883a 	mov	r2,zero
10009698:	f800283a 	ret
1000969c:	00c00044 	movi	r3,1
100096a0:	003ff406 	br	10009674 <__alt_data_end+0xf8009674>

100096a4 <__umodsi3>:
100096a4:	2005883a 	mov	r2,r4
100096a8:	2900122e 	bgeu	r5,r4,100096f4 <__umodsi3+0x50>
100096ac:	28001116 	blt	r5,zero,100096f4 <__umodsi3+0x50>
100096b0:	01800804 	movi	r6,32
100096b4:	00c00044 	movi	r3,1
100096b8:	00000206 	br	100096c4 <__umodsi3+0x20>
100096bc:	30000c26 	beq	r6,zero,100096f0 <__umodsi3+0x4c>
100096c0:	28000516 	blt	r5,zero,100096d8 <__umodsi3+0x34>
100096c4:	294b883a 	add	r5,r5,r5
100096c8:	31bfffc4 	addi	r6,r6,-1
100096cc:	18c7883a 	add	r3,r3,r3
100096d0:	293ffa36 	bltu	r5,r4,100096bc <__alt_data_end+0xf80096bc>
100096d4:	18000626 	beq	r3,zero,100096f0 <__umodsi3+0x4c>
100096d8:	1806d07a 	srli	r3,r3,1
100096dc:	11400136 	bltu	r2,r5,100096e4 <__umodsi3+0x40>
100096e0:	1145c83a 	sub	r2,r2,r5
100096e4:	280ad07a 	srli	r5,r5,1
100096e8:	183ffb1e 	bne	r3,zero,100096d8 <__alt_data_end+0xf80096d8>
100096ec:	f800283a 	ret
100096f0:	f800283a 	ret
100096f4:	00c00044 	movi	r3,1
100096f8:	003ff706 	br	100096d8 <__alt_data_end+0xf80096d8>

100096fc <__mulsi3>:
100096fc:	0005883a 	mov	r2,zero
10009700:	20000726 	beq	r4,zero,10009720 <__mulsi3+0x24>
10009704:	20c0004c 	andi	r3,r4,1
10009708:	2008d07a 	srli	r4,r4,1
1000970c:	18000126 	beq	r3,zero,10009714 <__mulsi3+0x18>
10009710:	1145883a 	add	r2,r2,r5
10009714:	294b883a 	add	r5,r5,r5
10009718:	203ffa1e 	bne	r4,zero,10009704 <__alt_data_end+0xf8009704>
1000971c:	f800283a 	ret
10009720:	f800283a 	ret

10009724 <__adddf3>:
10009724:	02c00434 	movhi	r11,16
10009728:	5affffc4 	addi	r11,r11,-1
1000972c:	2806d7fa 	srli	r3,r5,31
10009730:	2ad4703a 	and	r10,r5,r11
10009734:	3ad2703a 	and	r9,r7,r11
10009738:	3804d53a 	srli	r2,r7,20
1000973c:	3018d77a 	srli	r12,r6,29
10009740:	280ad53a 	srli	r5,r5,20
10009744:	501490fa 	slli	r10,r10,3
10009748:	2010d77a 	srli	r8,r4,29
1000974c:	481290fa 	slli	r9,r9,3
10009750:	380ed7fa 	srli	r7,r7,31
10009754:	defffb04 	addi	sp,sp,-20
10009758:	dc800215 	stw	r18,8(sp)
1000975c:	dc400115 	stw	r17,4(sp)
10009760:	dc000015 	stw	r16,0(sp)
10009764:	dfc00415 	stw	ra,16(sp)
10009768:	dcc00315 	stw	r19,12(sp)
1000976c:	1c803fcc 	andi	r18,r3,255
10009770:	2c01ffcc 	andi	r16,r5,2047
10009774:	5210b03a 	or	r8,r10,r8
10009778:	202290fa 	slli	r17,r4,3
1000977c:	1081ffcc 	andi	r2,r2,2047
10009780:	4b12b03a 	or	r9,r9,r12
10009784:	300c90fa 	slli	r6,r6,3
10009788:	91c07526 	beq	r18,r7,10009960 <__adddf3+0x23c>
1000978c:	8087c83a 	sub	r3,r16,r2
10009790:	00c0ab0e 	bge	zero,r3,10009a40 <__adddf3+0x31c>
10009794:	10002a1e 	bne	r2,zero,10009840 <__adddf3+0x11c>
10009798:	4984b03a 	or	r2,r9,r6
1000979c:	1000961e 	bne	r2,zero,100099f8 <__adddf3+0x2d4>
100097a0:	888001cc 	andi	r2,r17,7
100097a4:	10000726 	beq	r2,zero,100097c4 <__adddf3+0xa0>
100097a8:	888003cc 	andi	r2,r17,15
100097ac:	00c00104 	movi	r3,4
100097b0:	10c00426 	beq	r2,r3,100097c4 <__adddf3+0xa0>
100097b4:	88c7883a 	add	r3,r17,r3
100097b8:	1c63803a 	cmpltu	r17,r3,r17
100097bc:	4451883a 	add	r8,r8,r17
100097c0:	1823883a 	mov	r17,r3
100097c4:	4080202c 	andhi	r2,r8,128
100097c8:	10005926 	beq	r2,zero,10009930 <__adddf3+0x20c>
100097cc:	84000044 	addi	r16,r16,1
100097d0:	0081ffc4 	movi	r2,2047
100097d4:	8080ba26 	beq	r16,r2,10009ac0 <__adddf3+0x39c>
100097d8:	00bfe034 	movhi	r2,65408
100097dc:	10bfffc4 	addi	r2,r2,-1
100097e0:	4090703a 	and	r8,r8,r2
100097e4:	4004977a 	slli	r2,r8,29
100097e8:	4010927a 	slli	r8,r8,9
100097ec:	8822d0fa 	srli	r17,r17,3
100097f0:	8401ffcc 	andi	r16,r16,2047
100097f4:	4010d33a 	srli	r8,r8,12
100097f8:	9007883a 	mov	r3,r18
100097fc:	1444b03a 	or	r2,r2,r17
10009800:	8401ffcc 	andi	r16,r16,2047
10009804:	8020953a 	slli	r16,r16,20
10009808:	18c03fcc 	andi	r3,r3,255
1000980c:	01000434 	movhi	r4,16
10009810:	213fffc4 	addi	r4,r4,-1
10009814:	180697fa 	slli	r3,r3,31
10009818:	4110703a 	and	r8,r8,r4
1000981c:	4410b03a 	or	r8,r8,r16
10009820:	40c6b03a 	or	r3,r8,r3
10009824:	dfc00417 	ldw	ra,16(sp)
10009828:	dcc00317 	ldw	r19,12(sp)
1000982c:	dc800217 	ldw	r18,8(sp)
10009830:	dc400117 	ldw	r17,4(sp)
10009834:	dc000017 	ldw	r16,0(sp)
10009838:	dec00504 	addi	sp,sp,20
1000983c:	f800283a 	ret
10009840:	0081ffc4 	movi	r2,2047
10009844:	80bfd626 	beq	r16,r2,100097a0 <__alt_data_end+0xf80097a0>
10009848:	4a402034 	orhi	r9,r9,128
1000984c:	00800e04 	movi	r2,56
10009850:	10c09f16 	blt	r2,r3,10009ad0 <__adddf3+0x3ac>
10009854:	008007c4 	movi	r2,31
10009858:	10c0c216 	blt	r2,r3,10009b64 <__adddf3+0x440>
1000985c:	00800804 	movi	r2,32
10009860:	10c5c83a 	sub	r2,r2,r3
10009864:	488a983a 	sll	r5,r9,r2
10009868:	30c8d83a 	srl	r4,r6,r3
1000986c:	3084983a 	sll	r2,r6,r2
10009870:	48c6d83a 	srl	r3,r9,r3
10009874:	290cb03a 	or	r6,r5,r4
10009878:	1004c03a 	cmpne	r2,r2,zero
1000987c:	308cb03a 	or	r6,r6,r2
10009880:	898dc83a 	sub	r6,r17,r6
10009884:	89a3803a 	cmpltu	r17,r17,r6
10009888:	40d1c83a 	sub	r8,r8,r3
1000988c:	4451c83a 	sub	r8,r8,r17
10009890:	3023883a 	mov	r17,r6
10009894:	4080202c 	andhi	r2,r8,128
10009898:	10002326 	beq	r2,zero,10009928 <__adddf3+0x204>
1000989c:	04c02034 	movhi	r19,128
100098a0:	9cffffc4 	addi	r19,r19,-1
100098a4:	44e6703a 	and	r19,r8,r19
100098a8:	98007626 	beq	r19,zero,10009a84 <__adddf3+0x360>
100098ac:	9809883a 	mov	r4,r19
100098b0:	000bdc80 	call	1000bdc8 <__clzsi2>
100098b4:	10fffe04 	addi	r3,r2,-8
100098b8:	010007c4 	movi	r4,31
100098bc:	20c07716 	blt	r4,r3,10009a9c <__adddf3+0x378>
100098c0:	00800804 	movi	r2,32
100098c4:	10c5c83a 	sub	r2,r2,r3
100098c8:	8884d83a 	srl	r2,r17,r2
100098cc:	98d0983a 	sll	r8,r19,r3
100098d0:	88e2983a 	sll	r17,r17,r3
100098d4:	1204b03a 	or	r2,r2,r8
100098d8:	1c007416 	blt	r3,r16,10009aac <__adddf3+0x388>
100098dc:	1c21c83a 	sub	r16,r3,r16
100098e0:	82000044 	addi	r8,r16,1
100098e4:	00c007c4 	movi	r3,31
100098e8:	1a009116 	blt	r3,r8,10009b30 <__adddf3+0x40c>
100098ec:	00c00804 	movi	r3,32
100098f0:	1a07c83a 	sub	r3,r3,r8
100098f4:	8a08d83a 	srl	r4,r17,r8
100098f8:	88e2983a 	sll	r17,r17,r3
100098fc:	10c6983a 	sll	r3,r2,r3
10009900:	1210d83a 	srl	r8,r2,r8
10009904:	8804c03a 	cmpne	r2,r17,zero
10009908:	1906b03a 	or	r3,r3,r4
1000990c:	18a2b03a 	or	r17,r3,r2
10009910:	0021883a 	mov	r16,zero
10009914:	003fa206 	br	100097a0 <__alt_data_end+0xf80097a0>
10009918:	1890b03a 	or	r8,r3,r2
1000991c:	40017d26 	beq	r8,zero,10009f14 <__adddf3+0x7f0>
10009920:	1011883a 	mov	r8,r2
10009924:	1823883a 	mov	r17,r3
10009928:	888001cc 	andi	r2,r17,7
1000992c:	103f9e1e 	bne	r2,zero,100097a8 <__alt_data_end+0xf80097a8>
10009930:	4004977a 	slli	r2,r8,29
10009934:	8822d0fa 	srli	r17,r17,3
10009938:	4010d0fa 	srli	r8,r8,3
1000993c:	9007883a 	mov	r3,r18
10009940:	1444b03a 	or	r2,r2,r17
10009944:	0101ffc4 	movi	r4,2047
10009948:	81002426 	beq	r16,r4,100099dc <__adddf3+0x2b8>
1000994c:	8120703a 	and	r16,r16,r4
10009950:	01000434 	movhi	r4,16
10009954:	213fffc4 	addi	r4,r4,-1
10009958:	4110703a 	and	r8,r8,r4
1000995c:	003fa806 	br	10009800 <__alt_data_end+0xf8009800>
10009960:	8089c83a 	sub	r4,r16,r2
10009964:	01005e0e 	bge	zero,r4,10009ae0 <__adddf3+0x3bc>
10009968:	10002b26 	beq	r2,zero,10009a18 <__adddf3+0x2f4>
1000996c:	0081ffc4 	movi	r2,2047
10009970:	80bf8b26 	beq	r16,r2,100097a0 <__alt_data_end+0xf80097a0>
10009974:	4a402034 	orhi	r9,r9,128
10009978:	00800e04 	movi	r2,56
1000997c:	1100a40e 	bge	r2,r4,10009c10 <__adddf3+0x4ec>
10009980:	498cb03a 	or	r6,r9,r6
10009984:	300ac03a 	cmpne	r5,r6,zero
10009988:	0013883a 	mov	r9,zero
1000998c:	2c4b883a 	add	r5,r5,r17
10009990:	2c63803a 	cmpltu	r17,r5,r17
10009994:	4a11883a 	add	r8,r9,r8
10009998:	8a11883a 	add	r8,r17,r8
1000999c:	2823883a 	mov	r17,r5
100099a0:	4080202c 	andhi	r2,r8,128
100099a4:	103fe026 	beq	r2,zero,10009928 <__alt_data_end+0xf8009928>
100099a8:	84000044 	addi	r16,r16,1
100099ac:	0081ffc4 	movi	r2,2047
100099b0:	8080d226 	beq	r16,r2,10009cfc <__adddf3+0x5d8>
100099b4:	00bfe034 	movhi	r2,65408
100099b8:	10bfffc4 	addi	r2,r2,-1
100099bc:	4090703a 	and	r8,r8,r2
100099c0:	880ad07a 	srli	r5,r17,1
100099c4:	400897fa 	slli	r4,r8,31
100099c8:	88c0004c 	andi	r3,r17,1
100099cc:	28e2b03a 	or	r17,r5,r3
100099d0:	4010d07a 	srli	r8,r8,1
100099d4:	2462b03a 	or	r17,r4,r17
100099d8:	003f7106 	br	100097a0 <__alt_data_end+0xf80097a0>
100099dc:	4088b03a 	or	r4,r8,r2
100099e0:	20014526 	beq	r4,zero,10009ef8 <__adddf3+0x7d4>
100099e4:	01000434 	movhi	r4,16
100099e8:	42000234 	orhi	r8,r8,8
100099ec:	213fffc4 	addi	r4,r4,-1
100099f0:	4110703a 	and	r8,r8,r4
100099f4:	003f8206 	br	10009800 <__alt_data_end+0xf8009800>
100099f8:	18ffffc4 	addi	r3,r3,-1
100099fc:	1800491e 	bne	r3,zero,10009b24 <__adddf3+0x400>
10009a00:	898bc83a 	sub	r5,r17,r6
10009a04:	8963803a 	cmpltu	r17,r17,r5
10009a08:	4251c83a 	sub	r8,r8,r9
10009a0c:	4451c83a 	sub	r8,r8,r17
10009a10:	2823883a 	mov	r17,r5
10009a14:	003f9f06 	br	10009894 <__alt_data_end+0xf8009894>
10009a18:	4984b03a 	or	r2,r9,r6
10009a1c:	103f6026 	beq	r2,zero,100097a0 <__alt_data_end+0xf80097a0>
10009a20:	213fffc4 	addi	r4,r4,-1
10009a24:	2000931e 	bne	r4,zero,10009c74 <__adddf3+0x550>
10009a28:	898d883a 	add	r6,r17,r6
10009a2c:	3463803a 	cmpltu	r17,r6,r17
10009a30:	4251883a 	add	r8,r8,r9
10009a34:	8a11883a 	add	r8,r17,r8
10009a38:	3023883a 	mov	r17,r6
10009a3c:	003fd806 	br	100099a0 <__alt_data_end+0xf80099a0>
10009a40:	1800541e 	bne	r3,zero,10009b94 <__adddf3+0x470>
10009a44:	80800044 	addi	r2,r16,1
10009a48:	1081ffcc 	andi	r2,r2,2047
10009a4c:	00c00044 	movi	r3,1
10009a50:	1880a00e 	bge	r3,r2,10009cd4 <__adddf3+0x5b0>
10009a54:	8989c83a 	sub	r4,r17,r6
10009a58:	8905803a 	cmpltu	r2,r17,r4
10009a5c:	4267c83a 	sub	r19,r8,r9
10009a60:	98a7c83a 	sub	r19,r19,r2
10009a64:	9880202c 	andhi	r2,r19,128
10009a68:	10006326 	beq	r2,zero,10009bf8 <__adddf3+0x4d4>
10009a6c:	3463c83a 	sub	r17,r6,r17
10009a70:	4a07c83a 	sub	r3,r9,r8
10009a74:	344d803a 	cmpltu	r6,r6,r17
10009a78:	19a7c83a 	sub	r19,r3,r6
10009a7c:	3825883a 	mov	r18,r7
10009a80:	983f8a1e 	bne	r19,zero,100098ac <__alt_data_end+0xf80098ac>
10009a84:	8809883a 	mov	r4,r17
10009a88:	000bdc80 	call	1000bdc8 <__clzsi2>
10009a8c:	10800804 	addi	r2,r2,32
10009a90:	10fffe04 	addi	r3,r2,-8
10009a94:	010007c4 	movi	r4,31
10009a98:	20ff890e 	bge	r4,r3,100098c0 <__alt_data_end+0xf80098c0>
10009a9c:	10bff604 	addi	r2,r2,-40
10009aa0:	8884983a 	sll	r2,r17,r2
10009aa4:	0023883a 	mov	r17,zero
10009aa8:	1c3f8c0e 	bge	r3,r16,100098dc <__alt_data_end+0xf80098dc>
10009aac:	023fe034 	movhi	r8,65408
10009ab0:	423fffc4 	addi	r8,r8,-1
10009ab4:	80e1c83a 	sub	r16,r16,r3
10009ab8:	1210703a 	and	r8,r2,r8
10009abc:	003f3806 	br	100097a0 <__alt_data_end+0xf80097a0>
10009ac0:	9007883a 	mov	r3,r18
10009ac4:	0011883a 	mov	r8,zero
10009ac8:	0005883a 	mov	r2,zero
10009acc:	003f4c06 	br	10009800 <__alt_data_end+0xf8009800>
10009ad0:	498cb03a 	or	r6,r9,r6
10009ad4:	300cc03a 	cmpne	r6,r6,zero
10009ad8:	0007883a 	mov	r3,zero
10009adc:	003f6806 	br	10009880 <__alt_data_end+0xf8009880>
10009ae0:	20009c1e 	bne	r4,zero,10009d54 <__adddf3+0x630>
10009ae4:	80800044 	addi	r2,r16,1
10009ae8:	1141ffcc 	andi	r5,r2,2047
10009aec:	01000044 	movi	r4,1
10009af0:	2140670e 	bge	r4,r5,10009c90 <__adddf3+0x56c>
10009af4:	0101ffc4 	movi	r4,2047
10009af8:	11007f26 	beq	r2,r4,10009cf8 <__adddf3+0x5d4>
10009afc:	898d883a 	add	r6,r17,r6
10009b00:	4247883a 	add	r3,r8,r9
10009b04:	3451803a 	cmpltu	r8,r6,r17
10009b08:	40d1883a 	add	r8,r8,r3
10009b0c:	402297fa 	slli	r17,r8,31
10009b10:	300cd07a 	srli	r6,r6,1
10009b14:	4010d07a 	srli	r8,r8,1
10009b18:	1021883a 	mov	r16,r2
10009b1c:	89a2b03a 	or	r17,r17,r6
10009b20:	003f1f06 	br	100097a0 <__alt_data_end+0xf80097a0>
10009b24:	0081ffc4 	movi	r2,2047
10009b28:	80bf481e 	bne	r16,r2,1000984c <__alt_data_end+0xf800984c>
10009b2c:	003f1c06 	br	100097a0 <__alt_data_end+0xf80097a0>
10009b30:	843ff844 	addi	r16,r16,-31
10009b34:	01000804 	movi	r4,32
10009b38:	1406d83a 	srl	r3,r2,r16
10009b3c:	41005026 	beq	r8,r4,10009c80 <__adddf3+0x55c>
10009b40:	01001004 	movi	r4,64
10009b44:	2211c83a 	sub	r8,r4,r8
10009b48:	1204983a 	sll	r2,r2,r8
10009b4c:	88a2b03a 	or	r17,r17,r2
10009b50:	8822c03a 	cmpne	r17,r17,zero
10009b54:	1c62b03a 	or	r17,r3,r17
10009b58:	0011883a 	mov	r8,zero
10009b5c:	0021883a 	mov	r16,zero
10009b60:	003f7106 	br	10009928 <__alt_data_end+0xf8009928>
10009b64:	193ff804 	addi	r4,r3,-32
10009b68:	00800804 	movi	r2,32
10009b6c:	4908d83a 	srl	r4,r9,r4
10009b70:	18804526 	beq	r3,r2,10009c88 <__adddf3+0x564>
10009b74:	00801004 	movi	r2,64
10009b78:	10c5c83a 	sub	r2,r2,r3
10009b7c:	4886983a 	sll	r3,r9,r2
10009b80:	198cb03a 	or	r6,r3,r6
10009b84:	300cc03a 	cmpne	r6,r6,zero
10009b88:	218cb03a 	or	r6,r4,r6
10009b8c:	0007883a 	mov	r3,zero
10009b90:	003f3b06 	br	10009880 <__alt_data_end+0xf8009880>
10009b94:	80002a26 	beq	r16,zero,10009c40 <__adddf3+0x51c>
10009b98:	0101ffc4 	movi	r4,2047
10009b9c:	11006826 	beq	r2,r4,10009d40 <__adddf3+0x61c>
10009ba0:	00c7c83a 	sub	r3,zero,r3
10009ba4:	42002034 	orhi	r8,r8,128
10009ba8:	01000e04 	movi	r4,56
10009bac:	20c07c16 	blt	r4,r3,10009da0 <__adddf3+0x67c>
10009bb0:	010007c4 	movi	r4,31
10009bb4:	20c0da16 	blt	r4,r3,10009f20 <__adddf3+0x7fc>
10009bb8:	01000804 	movi	r4,32
10009bbc:	20c9c83a 	sub	r4,r4,r3
10009bc0:	4114983a 	sll	r10,r8,r4
10009bc4:	88cad83a 	srl	r5,r17,r3
10009bc8:	8908983a 	sll	r4,r17,r4
10009bcc:	40c6d83a 	srl	r3,r8,r3
10009bd0:	5162b03a 	or	r17,r10,r5
10009bd4:	2008c03a 	cmpne	r4,r4,zero
10009bd8:	8922b03a 	or	r17,r17,r4
10009bdc:	3463c83a 	sub	r17,r6,r17
10009be0:	48c7c83a 	sub	r3,r9,r3
10009be4:	344d803a 	cmpltu	r6,r6,r17
10009be8:	1991c83a 	sub	r8,r3,r6
10009bec:	1021883a 	mov	r16,r2
10009bf0:	3825883a 	mov	r18,r7
10009bf4:	003f2706 	br	10009894 <__alt_data_end+0xf8009894>
10009bf8:	24d0b03a 	or	r8,r4,r19
10009bfc:	40001b1e 	bne	r8,zero,10009c6c <__adddf3+0x548>
10009c00:	0005883a 	mov	r2,zero
10009c04:	0007883a 	mov	r3,zero
10009c08:	0021883a 	mov	r16,zero
10009c0c:	003f4d06 	br	10009944 <__alt_data_end+0xf8009944>
10009c10:	008007c4 	movi	r2,31
10009c14:	11003c16 	blt	r2,r4,10009d08 <__adddf3+0x5e4>
10009c18:	00800804 	movi	r2,32
10009c1c:	1105c83a 	sub	r2,r2,r4
10009c20:	488e983a 	sll	r7,r9,r2
10009c24:	310ad83a 	srl	r5,r6,r4
10009c28:	3084983a 	sll	r2,r6,r2
10009c2c:	4912d83a 	srl	r9,r9,r4
10009c30:	394ab03a 	or	r5,r7,r5
10009c34:	1004c03a 	cmpne	r2,r2,zero
10009c38:	288ab03a 	or	r5,r5,r2
10009c3c:	003f5306 	br	1000998c <__alt_data_end+0xf800998c>
10009c40:	4448b03a 	or	r4,r8,r17
10009c44:	20003e26 	beq	r4,zero,10009d40 <__adddf3+0x61c>
10009c48:	00c6303a 	nor	r3,zero,r3
10009c4c:	18003a1e 	bne	r3,zero,10009d38 <__adddf3+0x614>
10009c50:	3463c83a 	sub	r17,r6,r17
10009c54:	4a07c83a 	sub	r3,r9,r8
10009c58:	344d803a 	cmpltu	r6,r6,r17
10009c5c:	1991c83a 	sub	r8,r3,r6
10009c60:	1021883a 	mov	r16,r2
10009c64:	3825883a 	mov	r18,r7
10009c68:	003f0a06 	br	10009894 <__alt_data_end+0xf8009894>
10009c6c:	2023883a 	mov	r17,r4
10009c70:	003f0d06 	br	100098a8 <__alt_data_end+0xf80098a8>
10009c74:	0081ffc4 	movi	r2,2047
10009c78:	80bf3f1e 	bne	r16,r2,10009978 <__alt_data_end+0xf8009978>
10009c7c:	003ec806 	br	100097a0 <__alt_data_end+0xf80097a0>
10009c80:	0005883a 	mov	r2,zero
10009c84:	003fb106 	br	10009b4c <__alt_data_end+0xf8009b4c>
10009c88:	0007883a 	mov	r3,zero
10009c8c:	003fbc06 	br	10009b80 <__alt_data_end+0xf8009b80>
10009c90:	4444b03a 	or	r2,r8,r17
10009c94:	8000871e 	bne	r16,zero,10009eb4 <__adddf3+0x790>
10009c98:	1000ba26 	beq	r2,zero,10009f84 <__adddf3+0x860>
10009c9c:	4984b03a 	or	r2,r9,r6
10009ca0:	103ebf26 	beq	r2,zero,100097a0 <__alt_data_end+0xf80097a0>
10009ca4:	8985883a 	add	r2,r17,r6
10009ca8:	4247883a 	add	r3,r8,r9
10009cac:	1451803a 	cmpltu	r8,r2,r17
10009cb0:	40d1883a 	add	r8,r8,r3
10009cb4:	40c0202c 	andhi	r3,r8,128
10009cb8:	1023883a 	mov	r17,r2
10009cbc:	183f1a26 	beq	r3,zero,10009928 <__alt_data_end+0xf8009928>
10009cc0:	00bfe034 	movhi	r2,65408
10009cc4:	10bfffc4 	addi	r2,r2,-1
10009cc8:	2021883a 	mov	r16,r4
10009ccc:	4090703a 	and	r8,r8,r2
10009cd0:	003eb306 	br	100097a0 <__alt_data_end+0xf80097a0>
10009cd4:	4444b03a 	or	r2,r8,r17
10009cd8:	8000291e 	bne	r16,zero,10009d80 <__adddf3+0x65c>
10009cdc:	10004b1e 	bne	r2,zero,10009e0c <__adddf3+0x6e8>
10009ce0:	4990b03a 	or	r8,r9,r6
10009ce4:	40008b26 	beq	r8,zero,10009f14 <__adddf3+0x7f0>
10009ce8:	4811883a 	mov	r8,r9
10009cec:	3023883a 	mov	r17,r6
10009cf0:	3825883a 	mov	r18,r7
10009cf4:	003eaa06 	br	100097a0 <__alt_data_end+0xf80097a0>
10009cf8:	1021883a 	mov	r16,r2
10009cfc:	0011883a 	mov	r8,zero
10009d00:	0005883a 	mov	r2,zero
10009d04:	003f0f06 	br	10009944 <__alt_data_end+0xf8009944>
10009d08:	217ff804 	addi	r5,r4,-32
10009d0c:	00800804 	movi	r2,32
10009d10:	494ad83a 	srl	r5,r9,r5
10009d14:	20807d26 	beq	r4,r2,10009f0c <__adddf3+0x7e8>
10009d18:	00801004 	movi	r2,64
10009d1c:	1109c83a 	sub	r4,r2,r4
10009d20:	4912983a 	sll	r9,r9,r4
10009d24:	498cb03a 	or	r6,r9,r6
10009d28:	300cc03a 	cmpne	r6,r6,zero
10009d2c:	298ab03a 	or	r5,r5,r6
10009d30:	0013883a 	mov	r9,zero
10009d34:	003f1506 	br	1000998c <__alt_data_end+0xf800998c>
10009d38:	0101ffc4 	movi	r4,2047
10009d3c:	113f9a1e 	bne	r2,r4,10009ba8 <__alt_data_end+0xf8009ba8>
10009d40:	4811883a 	mov	r8,r9
10009d44:	3023883a 	mov	r17,r6
10009d48:	1021883a 	mov	r16,r2
10009d4c:	3825883a 	mov	r18,r7
10009d50:	003e9306 	br	100097a0 <__alt_data_end+0xf80097a0>
10009d54:	8000161e 	bne	r16,zero,10009db0 <__adddf3+0x68c>
10009d58:	444ab03a 	or	r5,r8,r17
10009d5c:	28005126 	beq	r5,zero,10009ea4 <__adddf3+0x780>
10009d60:	0108303a 	nor	r4,zero,r4
10009d64:	20004d1e 	bne	r4,zero,10009e9c <__adddf3+0x778>
10009d68:	89a3883a 	add	r17,r17,r6
10009d6c:	4253883a 	add	r9,r8,r9
10009d70:	898d803a 	cmpltu	r6,r17,r6
10009d74:	3251883a 	add	r8,r6,r9
10009d78:	1021883a 	mov	r16,r2
10009d7c:	003f0806 	br	100099a0 <__alt_data_end+0xf80099a0>
10009d80:	1000301e 	bne	r2,zero,10009e44 <__adddf3+0x720>
10009d84:	4984b03a 	or	r2,r9,r6
10009d88:	10007126 	beq	r2,zero,10009f50 <__adddf3+0x82c>
10009d8c:	4811883a 	mov	r8,r9
10009d90:	3023883a 	mov	r17,r6
10009d94:	3825883a 	mov	r18,r7
10009d98:	0401ffc4 	movi	r16,2047
10009d9c:	003e8006 	br	100097a0 <__alt_data_end+0xf80097a0>
10009da0:	4462b03a 	or	r17,r8,r17
10009da4:	8822c03a 	cmpne	r17,r17,zero
10009da8:	0007883a 	mov	r3,zero
10009dac:	003f8b06 	br	10009bdc <__alt_data_end+0xf8009bdc>
10009db0:	0141ffc4 	movi	r5,2047
10009db4:	11403b26 	beq	r2,r5,10009ea4 <__adddf3+0x780>
10009db8:	0109c83a 	sub	r4,zero,r4
10009dbc:	42002034 	orhi	r8,r8,128
10009dc0:	01400e04 	movi	r5,56
10009dc4:	29006716 	blt	r5,r4,10009f64 <__adddf3+0x840>
10009dc8:	014007c4 	movi	r5,31
10009dcc:	29007016 	blt	r5,r4,10009f90 <__adddf3+0x86c>
10009dd0:	01400804 	movi	r5,32
10009dd4:	290bc83a 	sub	r5,r5,r4
10009dd8:	4154983a 	sll	r10,r8,r5
10009ddc:	890ed83a 	srl	r7,r17,r4
10009de0:	894a983a 	sll	r5,r17,r5
10009de4:	4108d83a 	srl	r4,r8,r4
10009de8:	51e2b03a 	or	r17,r10,r7
10009dec:	280ac03a 	cmpne	r5,r5,zero
10009df0:	8962b03a 	or	r17,r17,r5
10009df4:	89a3883a 	add	r17,r17,r6
10009df8:	2253883a 	add	r9,r4,r9
10009dfc:	898d803a 	cmpltu	r6,r17,r6
10009e00:	3251883a 	add	r8,r6,r9
10009e04:	1021883a 	mov	r16,r2
10009e08:	003ee506 	br	100099a0 <__alt_data_end+0xf80099a0>
10009e0c:	4984b03a 	or	r2,r9,r6
10009e10:	103e6326 	beq	r2,zero,100097a0 <__alt_data_end+0xf80097a0>
10009e14:	8987c83a 	sub	r3,r17,r6
10009e18:	88c9803a 	cmpltu	r4,r17,r3
10009e1c:	4245c83a 	sub	r2,r8,r9
10009e20:	1105c83a 	sub	r2,r2,r4
10009e24:	1100202c 	andhi	r4,r2,128
10009e28:	203ebb26 	beq	r4,zero,10009918 <__alt_data_end+0xf8009918>
10009e2c:	3463c83a 	sub	r17,r6,r17
10009e30:	4a07c83a 	sub	r3,r9,r8
10009e34:	344d803a 	cmpltu	r6,r6,r17
10009e38:	1991c83a 	sub	r8,r3,r6
10009e3c:	3825883a 	mov	r18,r7
10009e40:	003e5706 	br	100097a0 <__alt_data_end+0xf80097a0>
10009e44:	4984b03a 	or	r2,r9,r6
10009e48:	10002e26 	beq	r2,zero,10009f04 <__adddf3+0x7e0>
10009e4c:	4004d0fa 	srli	r2,r8,3
10009e50:	8822d0fa 	srli	r17,r17,3
10009e54:	4010977a 	slli	r8,r8,29
10009e58:	10c0022c 	andhi	r3,r2,8
10009e5c:	4462b03a 	or	r17,r8,r17
10009e60:	18000826 	beq	r3,zero,10009e84 <__adddf3+0x760>
10009e64:	4808d0fa 	srli	r4,r9,3
10009e68:	20c0022c 	andhi	r3,r4,8
10009e6c:	1800051e 	bne	r3,zero,10009e84 <__adddf3+0x760>
10009e70:	300cd0fa 	srli	r6,r6,3
10009e74:	4806977a 	slli	r3,r9,29
10009e78:	2005883a 	mov	r2,r4
10009e7c:	3825883a 	mov	r18,r7
10009e80:	19a2b03a 	or	r17,r3,r6
10009e84:	8810d77a 	srli	r8,r17,29
10009e88:	100490fa 	slli	r2,r2,3
10009e8c:	882290fa 	slli	r17,r17,3
10009e90:	0401ffc4 	movi	r16,2047
10009e94:	4090b03a 	or	r8,r8,r2
10009e98:	003e4106 	br	100097a0 <__alt_data_end+0xf80097a0>
10009e9c:	0141ffc4 	movi	r5,2047
10009ea0:	117fc71e 	bne	r2,r5,10009dc0 <__alt_data_end+0xf8009dc0>
10009ea4:	4811883a 	mov	r8,r9
10009ea8:	3023883a 	mov	r17,r6
10009eac:	1021883a 	mov	r16,r2
10009eb0:	003e3b06 	br	100097a0 <__alt_data_end+0xf80097a0>
10009eb4:	10002f26 	beq	r2,zero,10009f74 <__adddf3+0x850>
10009eb8:	4984b03a 	or	r2,r9,r6
10009ebc:	10001126 	beq	r2,zero,10009f04 <__adddf3+0x7e0>
10009ec0:	4004d0fa 	srli	r2,r8,3
10009ec4:	8822d0fa 	srli	r17,r17,3
10009ec8:	4010977a 	slli	r8,r8,29
10009ecc:	10c0022c 	andhi	r3,r2,8
10009ed0:	4462b03a 	or	r17,r8,r17
10009ed4:	183feb26 	beq	r3,zero,10009e84 <__alt_data_end+0xf8009e84>
10009ed8:	4808d0fa 	srli	r4,r9,3
10009edc:	20c0022c 	andhi	r3,r4,8
10009ee0:	183fe81e 	bne	r3,zero,10009e84 <__alt_data_end+0xf8009e84>
10009ee4:	300cd0fa 	srli	r6,r6,3
10009ee8:	4806977a 	slli	r3,r9,29
10009eec:	2005883a 	mov	r2,r4
10009ef0:	19a2b03a 	or	r17,r3,r6
10009ef4:	003fe306 	br	10009e84 <__alt_data_end+0xf8009e84>
10009ef8:	0011883a 	mov	r8,zero
10009efc:	0005883a 	mov	r2,zero
10009f00:	003e3f06 	br	10009800 <__alt_data_end+0xf8009800>
10009f04:	0401ffc4 	movi	r16,2047
10009f08:	003e2506 	br	100097a0 <__alt_data_end+0xf80097a0>
10009f0c:	0013883a 	mov	r9,zero
10009f10:	003f8406 	br	10009d24 <__alt_data_end+0xf8009d24>
10009f14:	0005883a 	mov	r2,zero
10009f18:	0007883a 	mov	r3,zero
10009f1c:	003e8906 	br	10009944 <__alt_data_end+0xf8009944>
10009f20:	197ff804 	addi	r5,r3,-32
10009f24:	01000804 	movi	r4,32
10009f28:	414ad83a 	srl	r5,r8,r5
10009f2c:	19002426 	beq	r3,r4,10009fc0 <__adddf3+0x89c>
10009f30:	01001004 	movi	r4,64
10009f34:	20c7c83a 	sub	r3,r4,r3
10009f38:	40c6983a 	sll	r3,r8,r3
10009f3c:	1c46b03a 	or	r3,r3,r17
10009f40:	1806c03a 	cmpne	r3,r3,zero
10009f44:	28e2b03a 	or	r17,r5,r3
10009f48:	0007883a 	mov	r3,zero
10009f4c:	003f2306 	br	10009bdc <__alt_data_end+0xf8009bdc>
10009f50:	0007883a 	mov	r3,zero
10009f54:	5811883a 	mov	r8,r11
10009f58:	00bfffc4 	movi	r2,-1
10009f5c:	0401ffc4 	movi	r16,2047
10009f60:	003e7806 	br	10009944 <__alt_data_end+0xf8009944>
10009f64:	4462b03a 	or	r17,r8,r17
10009f68:	8822c03a 	cmpne	r17,r17,zero
10009f6c:	0009883a 	mov	r4,zero
10009f70:	003fa006 	br	10009df4 <__alt_data_end+0xf8009df4>
10009f74:	4811883a 	mov	r8,r9
10009f78:	3023883a 	mov	r17,r6
10009f7c:	0401ffc4 	movi	r16,2047
10009f80:	003e0706 	br	100097a0 <__alt_data_end+0xf80097a0>
10009f84:	4811883a 	mov	r8,r9
10009f88:	3023883a 	mov	r17,r6
10009f8c:	003e0406 	br	100097a0 <__alt_data_end+0xf80097a0>
10009f90:	21fff804 	addi	r7,r4,-32
10009f94:	01400804 	movi	r5,32
10009f98:	41ced83a 	srl	r7,r8,r7
10009f9c:	21400a26 	beq	r4,r5,10009fc8 <__adddf3+0x8a4>
10009fa0:	01401004 	movi	r5,64
10009fa4:	2909c83a 	sub	r4,r5,r4
10009fa8:	4108983a 	sll	r4,r8,r4
10009fac:	2448b03a 	or	r4,r4,r17
10009fb0:	2008c03a 	cmpne	r4,r4,zero
10009fb4:	3922b03a 	or	r17,r7,r4
10009fb8:	0009883a 	mov	r4,zero
10009fbc:	003f8d06 	br	10009df4 <__alt_data_end+0xf8009df4>
10009fc0:	0007883a 	mov	r3,zero
10009fc4:	003fdd06 	br	10009f3c <__alt_data_end+0xf8009f3c>
10009fc8:	0009883a 	mov	r4,zero
10009fcc:	003ff706 	br	10009fac <__alt_data_end+0xf8009fac>

10009fd0 <__divdf3>:
10009fd0:	defff004 	addi	sp,sp,-64
10009fd4:	dc800815 	stw	r18,32(sp)
10009fd8:	2824d53a 	srli	r18,r5,20
10009fdc:	dd800c15 	stw	r22,48(sp)
10009fe0:	282cd7fa 	srli	r22,r5,31
10009fe4:	dc000615 	stw	r16,24(sp)
10009fe8:	04000434 	movhi	r16,16
10009fec:	843fffc4 	addi	r16,r16,-1
10009ff0:	dfc00f15 	stw	ra,60(sp)
10009ff4:	df000e15 	stw	fp,56(sp)
10009ff8:	ddc00d15 	stw	r23,52(sp)
10009ffc:	dd400b15 	stw	r21,44(sp)
1000a000:	dd000a15 	stw	r20,40(sp)
1000a004:	dcc00915 	stw	r19,36(sp)
1000a008:	dc400715 	stw	r17,28(sp)
1000a00c:	9481ffcc 	andi	r18,r18,2047
1000a010:	2c20703a 	and	r16,r5,r16
1000a014:	b2003fcc 	andi	r8,r22,255
1000a018:	90006126 	beq	r18,zero,1000a1a0 <__divdf3+0x1d0>
1000a01c:	0081ffc4 	movi	r2,2047
1000a020:	202b883a 	mov	r21,r4
1000a024:	90803726 	beq	r18,r2,1000a104 <__divdf3+0x134>
1000a028:	80800434 	orhi	r2,r16,16
1000a02c:	100490fa 	slli	r2,r2,3
1000a030:	2020d77a 	srli	r16,r4,29
1000a034:	202a90fa 	slli	r21,r4,3
1000a038:	94bf0044 	addi	r18,r18,-1023
1000a03c:	80a0b03a 	or	r16,r16,r2
1000a040:	0013883a 	mov	r9,zero
1000a044:	000b883a 	mov	r5,zero
1000a048:	3806d53a 	srli	r3,r7,20
1000a04c:	382ed7fa 	srli	r23,r7,31
1000a050:	04400434 	movhi	r17,16
1000a054:	8c7fffc4 	addi	r17,r17,-1
1000a058:	18c1ffcc 	andi	r3,r3,2047
1000a05c:	3029883a 	mov	r20,r6
1000a060:	3c62703a 	and	r17,r7,r17
1000a064:	bf003fcc 	andi	fp,r23,255
1000a068:	18006e26 	beq	r3,zero,1000a224 <__divdf3+0x254>
1000a06c:	0081ffc4 	movi	r2,2047
1000a070:	18806626 	beq	r3,r2,1000a20c <__divdf3+0x23c>
1000a074:	88800434 	orhi	r2,r17,16
1000a078:	100490fa 	slli	r2,r2,3
1000a07c:	3022d77a 	srli	r17,r6,29
1000a080:	302890fa 	slli	r20,r6,3
1000a084:	18ff0044 	addi	r3,r3,-1023
1000a088:	88a2b03a 	or	r17,r17,r2
1000a08c:	000f883a 	mov	r7,zero
1000a090:	b5e6f03a 	xor	r19,r22,r23
1000a094:	3a4cb03a 	or	r6,r7,r9
1000a098:	008003c4 	movi	r2,15
1000a09c:	9809883a 	mov	r4,r19
1000a0a0:	90c7c83a 	sub	r3,r18,r3
1000a0a4:	9cc03fcc 	andi	r19,r19,255
1000a0a8:	11809636 	bltu	r2,r6,1000a304 <__divdf3+0x334>
1000a0ac:	300c90ba 	slli	r6,r6,2
1000a0b0:	00840074 	movhi	r2,4097
1000a0b4:	10a83104 	addi	r2,r2,-24380
1000a0b8:	308d883a 	add	r6,r6,r2
1000a0bc:	30800017 	ldw	r2,0(r6)
1000a0c0:	1000683a 	jmp	r2
1000a0c4:	1000a304 	addi	zero,r2,652
1000a0c8:	1000a13c 	xorhi	zero,r2,644
1000a0cc:	1000a2f4 	orhi	zero,r2,651
1000a0d0:	1000a130 	cmpltui	zero,r2,644
1000a0d4:	1000a2f4 	orhi	zero,r2,651
1000a0d8:	1000a2c8 	cmpgei	zero,r2,651
1000a0dc:	1000a2f4 	orhi	zero,r2,651
1000a0e0:	1000a130 	cmpltui	zero,r2,644
1000a0e4:	1000a13c 	xorhi	zero,r2,644
1000a0e8:	1000a13c 	xorhi	zero,r2,644
1000a0ec:	1000a2c8 	cmpgei	zero,r2,651
1000a0f0:	1000a130 	cmpltui	zero,r2,644
1000a0f4:	1000a120 	cmpeqi	zero,r2,644
1000a0f8:	1000a120 	cmpeqi	zero,r2,644
1000a0fc:	1000a120 	cmpeqi	zero,r2,644
1000a100:	1000a68c 	andi	zero,r2,666
1000a104:	2404b03a 	or	r2,r4,r16
1000a108:	10006c1e 	bne	r2,zero,1000a2bc <__divdf3+0x2ec>
1000a10c:	02400204 	movi	r9,8
1000a110:	0021883a 	mov	r16,zero
1000a114:	002b883a 	mov	r21,zero
1000a118:	01400084 	movi	r5,2
1000a11c:	003fca06 	br	1000a048 <__alt_data_end+0xf800a048>
1000a120:	8023883a 	mov	r17,r16
1000a124:	a829883a 	mov	r20,r21
1000a128:	4039883a 	mov	fp,r8
1000a12c:	280f883a 	mov	r7,r5
1000a130:	00800084 	movi	r2,2
1000a134:	3881601e 	bne	r7,r2,1000a6b8 <__divdf3+0x6e8>
1000a138:	e027883a 	mov	r19,fp
1000a13c:	9900004c 	andi	r4,r19,1
1000a140:	0081ffc4 	movi	r2,2047
1000a144:	0021883a 	mov	r16,zero
1000a148:	002b883a 	mov	r21,zero
1000a14c:	1004953a 	slli	r2,r2,20
1000a150:	20c03fcc 	andi	r3,r4,255
1000a154:	01400434 	movhi	r5,16
1000a158:	297fffc4 	addi	r5,r5,-1
1000a15c:	180697fa 	slli	r3,r3,31
1000a160:	8160703a 	and	r16,r16,r5
1000a164:	80a0b03a 	or	r16,r16,r2
1000a168:	80c6b03a 	or	r3,r16,r3
1000a16c:	a805883a 	mov	r2,r21
1000a170:	dfc00f17 	ldw	ra,60(sp)
1000a174:	df000e17 	ldw	fp,56(sp)
1000a178:	ddc00d17 	ldw	r23,52(sp)
1000a17c:	dd800c17 	ldw	r22,48(sp)
1000a180:	dd400b17 	ldw	r21,44(sp)
1000a184:	dd000a17 	ldw	r20,40(sp)
1000a188:	dcc00917 	ldw	r19,36(sp)
1000a18c:	dc800817 	ldw	r18,32(sp)
1000a190:	dc400717 	ldw	r17,28(sp)
1000a194:	dc000617 	ldw	r16,24(sp)
1000a198:	dec01004 	addi	sp,sp,64
1000a19c:	f800283a 	ret
1000a1a0:	2404b03a 	or	r2,r4,r16
1000a1a4:	2023883a 	mov	r17,r4
1000a1a8:	10003f26 	beq	r2,zero,1000a2a8 <__divdf3+0x2d8>
1000a1ac:	80015e26 	beq	r16,zero,1000a728 <__divdf3+0x758>
1000a1b0:	8009883a 	mov	r4,r16
1000a1b4:	d9800215 	stw	r6,8(sp)
1000a1b8:	d9c00515 	stw	r7,20(sp)
1000a1bc:	da000415 	stw	r8,16(sp)
1000a1c0:	000bdc80 	call	1000bdc8 <__clzsi2>
1000a1c4:	d9800217 	ldw	r6,8(sp)
1000a1c8:	d9c00517 	ldw	r7,20(sp)
1000a1cc:	da000417 	ldw	r8,16(sp)
1000a1d0:	113ffd44 	addi	r4,r2,-11
1000a1d4:	00c00704 	movi	r3,28
1000a1d8:	19014f16 	blt	r3,r4,1000a718 <__divdf3+0x748>
1000a1dc:	00c00744 	movi	r3,29
1000a1e0:	157ffe04 	addi	r21,r2,-8
1000a1e4:	1907c83a 	sub	r3,r3,r4
1000a1e8:	8560983a 	sll	r16,r16,r21
1000a1ec:	88c6d83a 	srl	r3,r17,r3
1000a1f0:	8d6a983a 	sll	r21,r17,r21
1000a1f4:	1c20b03a 	or	r16,r3,r16
1000a1f8:	1080fcc4 	addi	r2,r2,1011
1000a1fc:	00a5c83a 	sub	r18,zero,r2
1000a200:	0013883a 	mov	r9,zero
1000a204:	000b883a 	mov	r5,zero
1000a208:	003f8f06 	br	1000a048 <__alt_data_end+0xf800a048>
1000a20c:	3444b03a 	or	r2,r6,r17
1000a210:	1000231e 	bne	r2,zero,1000a2a0 <__divdf3+0x2d0>
1000a214:	0023883a 	mov	r17,zero
1000a218:	0029883a 	mov	r20,zero
1000a21c:	01c00084 	movi	r7,2
1000a220:	003f9b06 	br	1000a090 <__alt_data_end+0xf800a090>
1000a224:	3444b03a 	or	r2,r6,r17
1000a228:	10001926 	beq	r2,zero,1000a290 <__divdf3+0x2c0>
1000a22c:	88014b26 	beq	r17,zero,1000a75c <__divdf3+0x78c>
1000a230:	8809883a 	mov	r4,r17
1000a234:	d9400115 	stw	r5,4(sp)
1000a238:	d9800215 	stw	r6,8(sp)
1000a23c:	da000415 	stw	r8,16(sp)
1000a240:	da400315 	stw	r9,12(sp)
1000a244:	000bdc80 	call	1000bdc8 <__clzsi2>
1000a248:	d9400117 	ldw	r5,4(sp)
1000a24c:	d9800217 	ldw	r6,8(sp)
1000a250:	da000417 	ldw	r8,16(sp)
1000a254:	da400317 	ldw	r9,12(sp)
1000a258:	113ffd44 	addi	r4,r2,-11
1000a25c:	00c00704 	movi	r3,28
1000a260:	19013a16 	blt	r3,r4,1000a74c <__divdf3+0x77c>
1000a264:	00c00744 	movi	r3,29
1000a268:	153ffe04 	addi	r20,r2,-8
1000a26c:	1907c83a 	sub	r3,r3,r4
1000a270:	8d22983a 	sll	r17,r17,r20
1000a274:	30c6d83a 	srl	r3,r6,r3
1000a278:	3528983a 	sll	r20,r6,r20
1000a27c:	1c62b03a 	or	r17,r3,r17
1000a280:	1080fcc4 	addi	r2,r2,1011
1000a284:	0087c83a 	sub	r3,zero,r2
1000a288:	000f883a 	mov	r7,zero
1000a28c:	003f8006 	br	1000a090 <__alt_data_end+0xf800a090>
1000a290:	0023883a 	mov	r17,zero
1000a294:	0029883a 	mov	r20,zero
1000a298:	01c00044 	movi	r7,1
1000a29c:	003f7c06 	br	1000a090 <__alt_data_end+0xf800a090>
1000a2a0:	01c000c4 	movi	r7,3
1000a2a4:	003f7a06 	br	1000a090 <__alt_data_end+0xf800a090>
1000a2a8:	02400104 	movi	r9,4
1000a2ac:	0021883a 	mov	r16,zero
1000a2b0:	002b883a 	mov	r21,zero
1000a2b4:	01400044 	movi	r5,1
1000a2b8:	003f6306 	br	1000a048 <__alt_data_end+0xf800a048>
1000a2bc:	02400304 	movi	r9,12
1000a2c0:	014000c4 	movi	r5,3
1000a2c4:	003f6006 	br	1000a048 <__alt_data_end+0xf800a048>
1000a2c8:	04000434 	movhi	r16,16
1000a2cc:	0009883a 	mov	r4,zero
1000a2d0:	843fffc4 	addi	r16,r16,-1
1000a2d4:	057fffc4 	movi	r21,-1
1000a2d8:	0081ffc4 	movi	r2,2047
1000a2dc:	003f9b06 	br	1000a14c <__alt_data_end+0xf800a14c>
1000a2e0:	00c00044 	movi	r3,1
1000a2e4:	1887c83a 	sub	r3,r3,r2
1000a2e8:	01000e04 	movi	r4,56
1000a2ec:	20c1530e 	bge	r4,r3,1000a83c <__divdf3+0x86c>
1000a2f0:	9900004c 	andi	r4,r19,1
1000a2f4:	0005883a 	mov	r2,zero
1000a2f8:	0021883a 	mov	r16,zero
1000a2fc:	002b883a 	mov	r21,zero
1000a300:	003f9206 	br	1000a14c <__alt_data_end+0xf800a14c>
1000a304:	8c012e36 	bltu	r17,r16,1000a7c0 <__divdf3+0x7f0>
1000a308:	84412c26 	beq	r16,r17,1000a7bc <__divdf3+0x7ec>
1000a30c:	a82f883a 	mov	r23,r21
1000a310:	18ffffc4 	addi	r3,r3,-1
1000a314:	002b883a 	mov	r21,zero
1000a318:	a004d63a 	srli	r2,r20,24
1000a31c:	8822923a 	slli	r17,r17,8
1000a320:	a028923a 	slli	r20,r20,8
1000a324:	8009883a 	mov	r4,r16
1000a328:	88acb03a 	or	r22,r17,r2
1000a32c:	dd000015 	stw	r20,0(sp)
1000a330:	b028d43a 	srli	r20,r22,16
1000a334:	d8c00215 	stw	r3,8(sp)
1000a338:	b4bfffcc 	andi	r18,r22,65535
1000a33c:	a00b883a 	mov	r5,r20
1000a340:	00096400 	call	10009640 <__udivsi3>
1000a344:	100b883a 	mov	r5,r2
1000a348:	9009883a 	mov	r4,r18
1000a34c:	1023883a 	mov	r17,r2
1000a350:	00096fc0 	call	100096fc <__mulsi3>
1000a354:	8009883a 	mov	r4,r16
1000a358:	a00b883a 	mov	r5,r20
1000a35c:	1039883a 	mov	fp,r2
1000a360:	00096a40 	call	100096a4 <__umodsi3>
1000a364:	1004943a 	slli	r2,r2,16
1000a368:	b808d43a 	srli	r4,r23,16
1000a36c:	d8c00217 	ldw	r3,8(sp)
1000a370:	2084b03a 	or	r2,r4,r2
1000a374:	1700062e 	bgeu	r2,fp,1000a390 <__divdf3+0x3c0>
1000a378:	1585883a 	add	r2,r2,r22
1000a37c:	893fffc4 	addi	r4,r17,-1
1000a380:	15811d36 	bltu	r2,r22,1000a7f8 <__divdf3+0x828>
1000a384:	17011c2e 	bgeu	r2,fp,1000a7f8 <__divdf3+0x828>
1000a388:	8c7fff84 	addi	r17,r17,-2
1000a38c:	1585883a 	add	r2,r2,r22
1000a390:	1739c83a 	sub	fp,r2,fp
1000a394:	a00b883a 	mov	r5,r20
1000a398:	e009883a 	mov	r4,fp
1000a39c:	d8c00215 	stw	r3,8(sp)
1000a3a0:	00096400 	call	10009640 <__udivsi3>
1000a3a4:	100b883a 	mov	r5,r2
1000a3a8:	9009883a 	mov	r4,r18
1000a3ac:	1021883a 	mov	r16,r2
1000a3b0:	00096fc0 	call	100096fc <__mulsi3>
1000a3b4:	a00b883a 	mov	r5,r20
1000a3b8:	e009883a 	mov	r4,fp
1000a3bc:	d8800415 	stw	r2,16(sp)
1000a3c0:	00096a40 	call	100096a4 <__umodsi3>
1000a3c4:	1004943a 	slli	r2,r2,16
1000a3c8:	da000417 	ldw	r8,16(sp)
1000a3cc:	bdffffcc 	andi	r23,r23,65535
1000a3d0:	b884b03a 	or	r2,r23,r2
1000a3d4:	d8c00217 	ldw	r3,8(sp)
1000a3d8:	1200062e 	bgeu	r2,r8,1000a3f4 <__divdf3+0x424>
1000a3dc:	1585883a 	add	r2,r2,r22
1000a3e0:	813fffc4 	addi	r4,r16,-1
1000a3e4:	15810236 	bltu	r2,r22,1000a7f0 <__divdf3+0x820>
1000a3e8:	1201012e 	bgeu	r2,r8,1000a7f0 <__divdf3+0x820>
1000a3ec:	843fff84 	addi	r16,r16,-2
1000a3f0:	1585883a 	add	r2,r2,r22
1000a3f4:	8822943a 	slli	r17,r17,16
1000a3f8:	d9800017 	ldw	r6,0(sp)
1000a3fc:	1211c83a 	sub	r8,r2,r8
1000a400:	8c22b03a 	or	r17,r17,r16
1000a404:	373fffcc 	andi	fp,r6,65535
1000a408:	8abfffcc 	andi	r10,r17,65535
1000a40c:	8820d43a 	srli	r16,r17,16
1000a410:	5009883a 	mov	r4,r10
1000a414:	e00b883a 	mov	r5,fp
1000a418:	302ed43a 	srli	r23,r6,16
1000a41c:	d8c00215 	stw	r3,8(sp)
1000a420:	da000415 	stw	r8,16(sp)
1000a424:	da800115 	stw	r10,4(sp)
1000a428:	00096fc0 	call	100096fc <__mulsi3>
1000a42c:	800b883a 	mov	r5,r16
1000a430:	e009883a 	mov	r4,fp
1000a434:	d8800515 	stw	r2,20(sp)
1000a438:	00096fc0 	call	100096fc <__mulsi3>
1000a43c:	8009883a 	mov	r4,r16
1000a440:	b80b883a 	mov	r5,r23
1000a444:	d8800315 	stw	r2,12(sp)
1000a448:	00096fc0 	call	100096fc <__mulsi3>
1000a44c:	da800117 	ldw	r10,4(sp)
1000a450:	b80b883a 	mov	r5,r23
1000a454:	1021883a 	mov	r16,r2
1000a458:	5009883a 	mov	r4,r10
1000a45c:	00096fc0 	call	100096fc <__mulsi3>
1000a460:	d9c00517 	ldw	r7,20(sp)
1000a464:	da400317 	ldw	r9,12(sp)
1000a468:	d8c00217 	ldw	r3,8(sp)
1000a46c:	3808d43a 	srli	r4,r7,16
1000a470:	1245883a 	add	r2,r2,r9
1000a474:	da000417 	ldw	r8,16(sp)
1000a478:	2085883a 	add	r2,r4,r2
1000a47c:	1240022e 	bgeu	r2,r9,1000a488 <__divdf3+0x4b8>
1000a480:	01000074 	movhi	r4,1
1000a484:	8121883a 	add	r16,r16,r4
1000a488:	1008d43a 	srli	r4,r2,16
1000a48c:	1004943a 	slli	r2,r2,16
1000a490:	39ffffcc 	andi	r7,r7,65535
1000a494:	2409883a 	add	r4,r4,r16
1000a498:	11c5883a 	add	r2,r2,r7
1000a49c:	4100bb36 	bltu	r8,r4,1000a78c <__divdf3+0x7bc>
1000a4a0:	4100d726 	beq	r8,r4,1000a800 <__divdf3+0x830>
1000a4a4:	4109c83a 	sub	r4,r8,r4
1000a4a8:	a8a1c83a 	sub	r16,r21,r2
1000a4ac:	ac2b803a 	cmpltu	r21,r21,r16
1000a4b0:	256bc83a 	sub	r21,r4,r21
1000a4b4:	b540d926 	beq	r22,r21,1000a81c <__divdf3+0x84c>
1000a4b8:	a00b883a 	mov	r5,r20
1000a4bc:	a809883a 	mov	r4,r21
1000a4c0:	d8c00215 	stw	r3,8(sp)
1000a4c4:	00096400 	call	10009640 <__udivsi3>
1000a4c8:	100b883a 	mov	r5,r2
1000a4cc:	9009883a 	mov	r4,r18
1000a4d0:	d8800515 	stw	r2,20(sp)
1000a4d4:	00096fc0 	call	100096fc <__mulsi3>
1000a4d8:	a809883a 	mov	r4,r21
1000a4dc:	a00b883a 	mov	r5,r20
1000a4e0:	d8800415 	stw	r2,16(sp)
1000a4e4:	00096a40 	call	100096a4 <__umodsi3>
1000a4e8:	1004943a 	slli	r2,r2,16
1000a4ec:	8008d43a 	srli	r4,r16,16
1000a4f0:	da000417 	ldw	r8,16(sp)
1000a4f4:	d8c00217 	ldw	r3,8(sp)
1000a4f8:	2084b03a 	or	r2,r4,r2
1000a4fc:	d9c00517 	ldw	r7,20(sp)
1000a500:	1200062e 	bgeu	r2,r8,1000a51c <__divdf3+0x54c>
1000a504:	1585883a 	add	r2,r2,r22
1000a508:	393fffc4 	addi	r4,r7,-1
1000a50c:	1580c536 	bltu	r2,r22,1000a824 <__divdf3+0x854>
1000a510:	1200c42e 	bgeu	r2,r8,1000a824 <__divdf3+0x854>
1000a514:	39ffff84 	addi	r7,r7,-2
1000a518:	1585883a 	add	r2,r2,r22
1000a51c:	122bc83a 	sub	r21,r2,r8
1000a520:	a00b883a 	mov	r5,r20
1000a524:	a809883a 	mov	r4,r21
1000a528:	d8c00215 	stw	r3,8(sp)
1000a52c:	d9c00515 	stw	r7,20(sp)
1000a530:	00096400 	call	10009640 <__udivsi3>
1000a534:	9009883a 	mov	r4,r18
1000a538:	100b883a 	mov	r5,r2
1000a53c:	d8800415 	stw	r2,16(sp)
1000a540:	00096fc0 	call	100096fc <__mulsi3>
1000a544:	a809883a 	mov	r4,r21
1000a548:	a00b883a 	mov	r5,r20
1000a54c:	1025883a 	mov	r18,r2
1000a550:	00096a40 	call	100096a4 <__umodsi3>
1000a554:	1004943a 	slli	r2,r2,16
1000a558:	813fffcc 	andi	r4,r16,65535
1000a55c:	d8c00217 	ldw	r3,8(sp)
1000a560:	20a0b03a 	or	r16,r4,r2
1000a564:	d9c00517 	ldw	r7,20(sp)
1000a568:	da000417 	ldw	r8,16(sp)
1000a56c:	8480062e 	bgeu	r16,r18,1000a588 <__divdf3+0x5b8>
1000a570:	85a1883a 	add	r16,r16,r22
1000a574:	40bfffc4 	addi	r2,r8,-1
1000a578:	8580ac36 	bltu	r16,r22,1000a82c <__divdf3+0x85c>
1000a57c:	8480ab2e 	bgeu	r16,r18,1000a82c <__divdf3+0x85c>
1000a580:	423fff84 	addi	r8,r8,-2
1000a584:	85a1883a 	add	r16,r16,r22
1000a588:	3804943a 	slli	r2,r7,16
1000a58c:	84a1c83a 	sub	r16,r16,r18
1000a590:	e009883a 	mov	r4,fp
1000a594:	1228b03a 	or	r20,r2,r8
1000a598:	a1ffffcc 	andi	r7,r20,65535
1000a59c:	a024d43a 	srli	r18,r20,16
1000a5a0:	380b883a 	mov	r5,r7
1000a5a4:	d8c00215 	stw	r3,8(sp)
1000a5a8:	d9c00515 	stw	r7,20(sp)
1000a5ac:	00096fc0 	call	100096fc <__mulsi3>
1000a5b0:	900b883a 	mov	r5,r18
1000a5b4:	e009883a 	mov	r4,fp
1000a5b8:	102b883a 	mov	r21,r2
1000a5bc:	00096fc0 	call	100096fc <__mulsi3>
1000a5c0:	900b883a 	mov	r5,r18
1000a5c4:	b809883a 	mov	r4,r23
1000a5c8:	1039883a 	mov	fp,r2
1000a5cc:	00096fc0 	call	100096fc <__mulsi3>
1000a5d0:	d9c00517 	ldw	r7,20(sp)
1000a5d4:	b80b883a 	mov	r5,r23
1000a5d8:	1025883a 	mov	r18,r2
1000a5dc:	3809883a 	mov	r4,r7
1000a5e0:	00096fc0 	call	100096fc <__mulsi3>
1000a5e4:	a808d43a 	srli	r4,r21,16
1000a5e8:	1705883a 	add	r2,r2,fp
1000a5ec:	d8c00217 	ldw	r3,8(sp)
1000a5f0:	2085883a 	add	r2,r4,r2
1000a5f4:	1700022e 	bgeu	r2,fp,1000a600 <__divdf3+0x630>
1000a5f8:	01000074 	movhi	r4,1
1000a5fc:	9125883a 	add	r18,r18,r4
1000a600:	1008d43a 	srli	r4,r2,16
1000a604:	1004943a 	slli	r2,r2,16
1000a608:	ad7fffcc 	andi	r21,r21,65535
1000a60c:	2489883a 	add	r4,r4,r18
1000a610:	1545883a 	add	r2,r2,r21
1000a614:	81003836 	bltu	r16,r4,1000a6f8 <__divdf3+0x728>
1000a618:	81003626 	beq	r16,r4,1000a6f4 <__divdf3+0x724>
1000a61c:	a5000054 	ori	r20,r20,1
1000a620:	1880ffc4 	addi	r2,r3,1023
1000a624:	00bf2e0e 	bge	zero,r2,1000a2e0 <__alt_data_end+0xf800a2e0>
1000a628:	a10001cc 	andi	r4,r20,7
1000a62c:	20000726 	beq	r4,zero,1000a64c <__divdf3+0x67c>
1000a630:	a10003cc 	andi	r4,r20,15
1000a634:	01400104 	movi	r5,4
1000a638:	21400426 	beq	r4,r5,1000a64c <__divdf3+0x67c>
1000a63c:	a149883a 	add	r4,r20,r5
1000a640:	2529803a 	cmpltu	r20,r4,r20
1000a644:	8d23883a 	add	r17,r17,r20
1000a648:	2029883a 	mov	r20,r4
1000a64c:	8900402c 	andhi	r4,r17,256
1000a650:	20000426 	beq	r4,zero,1000a664 <__divdf3+0x694>
1000a654:	18810004 	addi	r2,r3,1024
1000a658:	00ffc034 	movhi	r3,65280
1000a65c:	18ffffc4 	addi	r3,r3,-1
1000a660:	88e2703a 	and	r17,r17,r3
1000a664:	00c1ff84 	movi	r3,2046
1000a668:	18beb416 	blt	r3,r2,1000a13c <__alt_data_end+0xf800a13c>
1000a66c:	a028d0fa 	srli	r20,r20,3
1000a670:	882a977a 	slli	r21,r17,29
1000a674:	8820927a 	slli	r16,r17,9
1000a678:	1081ffcc 	andi	r2,r2,2047
1000a67c:	ad2ab03a 	or	r21,r21,r20
1000a680:	8020d33a 	srli	r16,r16,12
1000a684:	9900004c 	andi	r4,r19,1
1000a688:	003eb006 	br	1000a14c <__alt_data_end+0xf800a14c>
1000a68c:	8080022c 	andhi	r2,r16,8
1000a690:	10001226 	beq	r2,zero,1000a6dc <__divdf3+0x70c>
1000a694:	8880022c 	andhi	r2,r17,8
1000a698:	1000101e 	bne	r2,zero,1000a6dc <__divdf3+0x70c>
1000a69c:	00800434 	movhi	r2,16
1000a6a0:	8c000234 	orhi	r16,r17,8
1000a6a4:	10bfffc4 	addi	r2,r2,-1
1000a6a8:	b809883a 	mov	r4,r23
1000a6ac:	80a0703a 	and	r16,r16,r2
1000a6b0:	a02b883a 	mov	r21,r20
1000a6b4:	003f0806 	br	1000a2d8 <__alt_data_end+0xf800a2d8>
1000a6b8:	008000c4 	movi	r2,3
1000a6bc:	3880b126 	beq	r7,r2,1000a984 <__divdf3+0x9b4>
1000a6c0:	00800044 	movi	r2,1
1000a6c4:	38805b1e 	bne	r7,r2,1000a834 <__divdf3+0x864>
1000a6c8:	e009883a 	mov	r4,fp
1000a6cc:	0005883a 	mov	r2,zero
1000a6d0:	0021883a 	mov	r16,zero
1000a6d4:	002b883a 	mov	r21,zero
1000a6d8:	003e9c06 	br	1000a14c <__alt_data_end+0xf800a14c>
1000a6dc:	00800434 	movhi	r2,16
1000a6e0:	84000234 	orhi	r16,r16,8
1000a6e4:	10bfffc4 	addi	r2,r2,-1
1000a6e8:	b009883a 	mov	r4,r22
1000a6ec:	80a0703a 	and	r16,r16,r2
1000a6f0:	003ef906 	br	1000a2d8 <__alt_data_end+0xf800a2d8>
1000a6f4:	103fca26 	beq	r2,zero,1000a620 <__alt_data_end+0xf800a620>
1000a6f8:	b421883a 	add	r16,r22,r16
1000a6fc:	a17fffc4 	addi	r5,r20,-1
1000a700:	8580422e 	bgeu	r16,r22,1000a80c <__divdf3+0x83c>
1000a704:	2829883a 	mov	r20,r5
1000a708:	813fc41e 	bne	r16,r4,1000a61c <__alt_data_end+0xf800a61c>
1000a70c:	d9800017 	ldw	r6,0(sp)
1000a710:	30bfc21e 	bne	r6,r2,1000a61c <__alt_data_end+0xf800a61c>
1000a714:	003fc206 	br	1000a620 <__alt_data_end+0xf800a620>
1000a718:	143ff604 	addi	r16,r2,-40
1000a71c:	8c20983a 	sll	r16,r17,r16
1000a720:	002b883a 	mov	r21,zero
1000a724:	003eb406 	br	1000a1f8 <__alt_data_end+0xf800a1f8>
1000a728:	d9800215 	stw	r6,8(sp)
1000a72c:	d9c00515 	stw	r7,20(sp)
1000a730:	da000415 	stw	r8,16(sp)
1000a734:	000bdc80 	call	1000bdc8 <__clzsi2>
1000a738:	10800804 	addi	r2,r2,32
1000a73c:	da000417 	ldw	r8,16(sp)
1000a740:	d9c00517 	ldw	r7,20(sp)
1000a744:	d9800217 	ldw	r6,8(sp)
1000a748:	003ea106 	br	1000a1d0 <__alt_data_end+0xf800a1d0>
1000a74c:	147ff604 	addi	r17,r2,-40
1000a750:	3462983a 	sll	r17,r6,r17
1000a754:	0029883a 	mov	r20,zero
1000a758:	003ec906 	br	1000a280 <__alt_data_end+0xf800a280>
1000a75c:	3009883a 	mov	r4,r6
1000a760:	d9400115 	stw	r5,4(sp)
1000a764:	d9800215 	stw	r6,8(sp)
1000a768:	da000415 	stw	r8,16(sp)
1000a76c:	da400315 	stw	r9,12(sp)
1000a770:	000bdc80 	call	1000bdc8 <__clzsi2>
1000a774:	10800804 	addi	r2,r2,32
1000a778:	da400317 	ldw	r9,12(sp)
1000a77c:	da000417 	ldw	r8,16(sp)
1000a780:	d9800217 	ldw	r6,8(sp)
1000a784:	d9400117 	ldw	r5,4(sp)
1000a788:	003eb306 	br	1000a258 <__alt_data_end+0xf800a258>
1000a78c:	d9800017 	ldw	r6,0(sp)
1000a790:	a9ab883a 	add	r21,r21,r6
1000a794:	a98b803a 	cmpltu	r5,r21,r6
1000a798:	2d8b883a 	add	r5,r5,r22
1000a79c:	2a11883a 	add	r8,r5,r8
1000a7a0:	897fffc4 	addi	r5,r17,-1
1000a7a4:	b2000c2e 	bgeu	r22,r8,1000a7d8 <__divdf3+0x808>
1000a7a8:	41003f36 	bltu	r8,r4,1000a8a8 <__divdf3+0x8d8>
1000a7ac:	22006c26 	beq	r4,r8,1000a960 <__divdf3+0x990>
1000a7b0:	4109c83a 	sub	r4,r8,r4
1000a7b4:	2823883a 	mov	r17,r5
1000a7b8:	003f3b06 	br	1000a4a8 <__alt_data_end+0xf800a4a8>
1000a7bc:	ad3ed336 	bltu	r21,r20,1000a30c <__alt_data_end+0xf800a30c>
1000a7c0:	a804d07a 	srli	r2,r21,1
1000a7c4:	802e97fa 	slli	r23,r16,31
1000a7c8:	a82a97fa 	slli	r21,r21,31
1000a7cc:	8020d07a 	srli	r16,r16,1
1000a7d0:	b8aeb03a 	or	r23,r23,r2
1000a7d4:	003ed006 	br	1000a318 <__alt_data_end+0xf800a318>
1000a7d8:	b23ff51e 	bne	r22,r8,1000a7b0 <__alt_data_end+0xf800a7b0>
1000a7dc:	d9800017 	ldw	r6,0(sp)
1000a7e0:	a9bff12e 	bgeu	r21,r6,1000a7a8 <__alt_data_end+0xf800a7a8>
1000a7e4:	b109c83a 	sub	r4,r22,r4
1000a7e8:	2823883a 	mov	r17,r5
1000a7ec:	003f2e06 	br	1000a4a8 <__alt_data_end+0xf800a4a8>
1000a7f0:	2021883a 	mov	r16,r4
1000a7f4:	003eff06 	br	1000a3f4 <__alt_data_end+0xf800a3f4>
1000a7f8:	2023883a 	mov	r17,r4
1000a7fc:	003ee406 	br	1000a390 <__alt_data_end+0xf800a390>
1000a800:	a8bfe236 	bltu	r21,r2,1000a78c <__alt_data_end+0xf800a78c>
1000a804:	0009883a 	mov	r4,zero
1000a808:	003f2706 	br	1000a4a8 <__alt_data_end+0xf800a4a8>
1000a80c:	81002d36 	bltu	r16,r4,1000a8c4 <__divdf3+0x8f4>
1000a810:	24005626 	beq	r4,r16,1000a96c <__divdf3+0x99c>
1000a814:	2829883a 	mov	r20,r5
1000a818:	003f8006 	br	1000a61c <__alt_data_end+0xf800a61c>
1000a81c:	053fffc4 	movi	r20,-1
1000a820:	003f7f06 	br	1000a620 <__alt_data_end+0xf800a620>
1000a824:	200f883a 	mov	r7,r4
1000a828:	003f3c06 	br	1000a51c <__alt_data_end+0xf800a51c>
1000a82c:	1011883a 	mov	r8,r2
1000a830:	003f5506 	br	1000a588 <__alt_data_end+0xf800a588>
1000a834:	e027883a 	mov	r19,fp
1000a838:	003f7906 	br	1000a620 <__alt_data_end+0xf800a620>
1000a83c:	010007c4 	movi	r4,31
1000a840:	20c02816 	blt	r4,r3,1000a8e4 <__divdf3+0x914>
1000a844:	00800804 	movi	r2,32
1000a848:	10c5c83a 	sub	r2,r2,r3
1000a84c:	888a983a 	sll	r5,r17,r2
1000a850:	a0c8d83a 	srl	r4,r20,r3
1000a854:	a084983a 	sll	r2,r20,r2
1000a858:	88e2d83a 	srl	r17,r17,r3
1000a85c:	2906b03a 	or	r3,r5,r4
1000a860:	1004c03a 	cmpne	r2,r2,zero
1000a864:	1886b03a 	or	r3,r3,r2
1000a868:	188001cc 	andi	r2,r3,7
1000a86c:	10000726 	beq	r2,zero,1000a88c <__divdf3+0x8bc>
1000a870:	188003cc 	andi	r2,r3,15
1000a874:	01000104 	movi	r4,4
1000a878:	11000426 	beq	r2,r4,1000a88c <__divdf3+0x8bc>
1000a87c:	1805883a 	mov	r2,r3
1000a880:	10c00104 	addi	r3,r2,4
1000a884:	1885803a 	cmpltu	r2,r3,r2
1000a888:	88a3883a 	add	r17,r17,r2
1000a88c:	8880202c 	andhi	r2,r17,128
1000a890:	10002926 	beq	r2,zero,1000a938 <__divdf3+0x968>
1000a894:	9900004c 	andi	r4,r19,1
1000a898:	00800044 	movi	r2,1
1000a89c:	0021883a 	mov	r16,zero
1000a8a0:	002b883a 	mov	r21,zero
1000a8a4:	003e2906 	br	1000a14c <__alt_data_end+0xf800a14c>
1000a8a8:	d9800017 	ldw	r6,0(sp)
1000a8ac:	8c7fff84 	addi	r17,r17,-2
1000a8b0:	a9ab883a 	add	r21,r21,r6
1000a8b4:	a98b803a 	cmpltu	r5,r21,r6
1000a8b8:	2d8b883a 	add	r5,r5,r22
1000a8bc:	2a11883a 	add	r8,r5,r8
1000a8c0:	003ef806 	br	1000a4a4 <__alt_data_end+0xf800a4a4>
1000a8c4:	d9800017 	ldw	r6,0(sp)
1000a8c8:	318f883a 	add	r7,r6,r6
1000a8cc:	398b803a 	cmpltu	r5,r7,r6
1000a8d0:	2d8d883a 	add	r6,r5,r22
1000a8d4:	81a1883a 	add	r16,r16,r6
1000a8d8:	a17fff84 	addi	r5,r20,-2
1000a8dc:	d9c00015 	stw	r7,0(sp)
1000a8e0:	003f8806 	br	1000a704 <__alt_data_end+0xf800a704>
1000a8e4:	013ff844 	movi	r4,-31
1000a8e8:	2085c83a 	sub	r2,r4,r2
1000a8ec:	8888d83a 	srl	r4,r17,r2
1000a8f0:	00800804 	movi	r2,32
1000a8f4:	18802126 	beq	r3,r2,1000a97c <__divdf3+0x9ac>
1000a8f8:	04001004 	movi	r16,64
1000a8fc:	80c7c83a 	sub	r3,r16,r3
1000a900:	88e0983a 	sll	r16,r17,r3
1000a904:	8504b03a 	or	r2,r16,r20
1000a908:	1004c03a 	cmpne	r2,r2,zero
1000a90c:	2084b03a 	or	r2,r4,r2
1000a910:	144001cc 	andi	r17,r2,7
1000a914:	88000d1e 	bne	r17,zero,1000a94c <__divdf3+0x97c>
1000a918:	0021883a 	mov	r16,zero
1000a91c:	102ad0fa 	srli	r21,r2,3
1000a920:	9900004c 	andi	r4,r19,1
1000a924:	0005883a 	mov	r2,zero
1000a928:	ac6ab03a 	or	r21,r21,r17
1000a92c:	003e0706 	br	1000a14c <__alt_data_end+0xf800a14c>
1000a930:	1007883a 	mov	r3,r2
1000a934:	0023883a 	mov	r17,zero
1000a938:	8820927a 	slli	r16,r17,9
1000a93c:	1805883a 	mov	r2,r3
1000a940:	8822977a 	slli	r17,r17,29
1000a944:	8020d33a 	srli	r16,r16,12
1000a948:	003ff406 	br	1000a91c <__alt_data_end+0xf800a91c>
1000a94c:	10c003cc 	andi	r3,r2,15
1000a950:	01000104 	movi	r4,4
1000a954:	193ff626 	beq	r3,r4,1000a930 <__alt_data_end+0xf800a930>
1000a958:	0023883a 	mov	r17,zero
1000a95c:	003fc806 	br	1000a880 <__alt_data_end+0xf800a880>
1000a960:	a8bfd136 	bltu	r21,r2,1000a8a8 <__alt_data_end+0xf800a8a8>
1000a964:	2823883a 	mov	r17,r5
1000a968:	003fa606 	br	1000a804 <__alt_data_end+0xf800a804>
1000a96c:	d9800017 	ldw	r6,0(sp)
1000a970:	30bfd436 	bltu	r6,r2,1000a8c4 <__alt_data_end+0xf800a8c4>
1000a974:	2829883a 	mov	r20,r5
1000a978:	003f6406 	br	1000a70c <__alt_data_end+0xf800a70c>
1000a97c:	0021883a 	mov	r16,zero
1000a980:	003fe006 	br	1000a904 <__alt_data_end+0xf800a904>
1000a984:	00800434 	movhi	r2,16
1000a988:	8c000234 	orhi	r16,r17,8
1000a98c:	10bfffc4 	addi	r2,r2,-1
1000a990:	e009883a 	mov	r4,fp
1000a994:	80a0703a 	and	r16,r16,r2
1000a998:	a02b883a 	mov	r21,r20
1000a99c:	003e4e06 	br	1000a2d8 <__alt_data_end+0xf800a2d8>

1000a9a0 <__eqdf2>:
1000a9a0:	2804d53a 	srli	r2,r5,20
1000a9a4:	3806d53a 	srli	r3,r7,20
1000a9a8:	02000434 	movhi	r8,16
1000a9ac:	423fffc4 	addi	r8,r8,-1
1000a9b0:	1081ffcc 	andi	r2,r2,2047
1000a9b4:	0281ffc4 	movi	r10,2047
1000a9b8:	2a12703a 	and	r9,r5,r8
1000a9bc:	18c1ffcc 	andi	r3,r3,2047
1000a9c0:	3a10703a 	and	r8,r7,r8
1000a9c4:	280ad7fa 	srli	r5,r5,31
1000a9c8:	380ed7fa 	srli	r7,r7,31
1000a9cc:	12801026 	beq	r2,r10,1000aa10 <__eqdf2+0x70>
1000a9d0:	0281ffc4 	movi	r10,2047
1000a9d4:	1a800a26 	beq	r3,r10,1000aa00 <__eqdf2+0x60>
1000a9d8:	10c00226 	beq	r2,r3,1000a9e4 <__eqdf2+0x44>
1000a9dc:	00800044 	movi	r2,1
1000a9e0:	f800283a 	ret
1000a9e4:	4a3ffd1e 	bne	r9,r8,1000a9dc <__alt_data_end+0xf800a9dc>
1000a9e8:	21bffc1e 	bne	r4,r6,1000a9dc <__alt_data_end+0xf800a9dc>
1000a9ec:	29c00c26 	beq	r5,r7,1000aa20 <__eqdf2+0x80>
1000a9f0:	103ffa1e 	bne	r2,zero,1000a9dc <__alt_data_end+0xf800a9dc>
1000a9f4:	2244b03a 	or	r2,r4,r9
1000a9f8:	1004c03a 	cmpne	r2,r2,zero
1000a9fc:	f800283a 	ret
1000aa00:	3214b03a 	or	r10,r6,r8
1000aa04:	503ff426 	beq	r10,zero,1000a9d8 <__alt_data_end+0xf800a9d8>
1000aa08:	00800044 	movi	r2,1
1000aa0c:	f800283a 	ret
1000aa10:	2254b03a 	or	r10,r4,r9
1000aa14:	503fee26 	beq	r10,zero,1000a9d0 <__alt_data_end+0xf800a9d0>
1000aa18:	00800044 	movi	r2,1
1000aa1c:	f800283a 	ret
1000aa20:	0005883a 	mov	r2,zero
1000aa24:	f800283a 	ret

1000aa28 <__gedf2>:
1000aa28:	2804d53a 	srli	r2,r5,20
1000aa2c:	3806d53a 	srli	r3,r7,20
1000aa30:	02000434 	movhi	r8,16
1000aa34:	423fffc4 	addi	r8,r8,-1
1000aa38:	1081ffcc 	andi	r2,r2,2047
1000aa3c:	0241ffc4 	movi	r9,2047
1000aa40:	2a14703a 	and	r10,r5,r8
1000aa44:	18c1ffcc 	andi	r3,r3,2047
1000aa48:	3a10703a 	and	r8,r7,r8
1000aa4c:	280ad7fa 	srli	r5,r5,31
1000aa50:	380ed7fa 	srli	r7,r7,31
1000aa54:	12401d26 	beq	r2,r9,1000aacc <__gedf2+0xa4>
1000aa58:	0241ffc4 	movi	r9,2047
1000aa5c:	1a401226 	beq	r3,r9,1000aaa8 <__gedf2+0x80>
1000aa60:	1000081e 	bne	r2,zero,1000aa84 <__gedf2+0x5c>
1000aa64:	2296b03a 	or	r11,r4,r10
1000aa68:	5813003a 	cmpeq	r9,r11,zero
1000aa6c:	1800091e 	bne	r3,zero,1000aa94 <__gedf2+0x6c>
1000aa70:	3218b03a 	or	r12,r6,r8
1000aa74:	6000071e 	bne	r12,zero,1000aa94 <__gedf2+0x6c>
1000aa78:	0005883a 	mov	r2,zero
1000aa7c:	5800101e 	bne	r11,zero,1000aac0 <__gedf2+0x98>
1000aa80:	f800283a 	ret
1000aa84:	18000c1e 	bne	r3,zero,1000aab8 <__gedf2+0x90>
1000aa88:	3212b03a 	or	r9,r6,r8
1000aa8c:	48000c26 	beq	r9,zero,1000aac0 <__gedf2+0x98>
1000aa90:	0013883a 	mov	r9,zero
1000aa94:	39c03fcc 	andi	r7,r7,255
1000aa98:	48000826 	beq	r9,zero,1000aabc <__gedf2+0x94>
1000aa9c:	38000926 	beq	r7,zero,1000aac4 <__gedf2+0x9c>
1000aaa0:	00800044 	movi	r2,1
1000aaa4:	f800283a 	ret
1000aaa8:	3212b03a 	or	r9,r6,r8
1000aaac:	483fec26 	beq	r9,zero,1000aa60 <__alt_data_end+0xf800aa60>
1000aab0:	00bfff84 	movi	r2,-2
1000aab4:	f800283a 	ret
1000aab8:	39c03fcc 	andi	r7,r7,255
1000aabc:	29c00626 	beq	r5,r7,1000aad8 <__gedf2+0xb0>
1000aac0:	283ff726 	beq	r5,zero,1000aaa0 <__alt_data_end+0xf800aaa0>
1000aac4:	00bfffc4 	movi	r2,-1
1000aac8:	f800283a 	ret
1000aacc:	2292b03a 	or	r9,r4,r10
1000aad0:	483fe126 	beq	r9,zero,1000aa58 <__alt_data_end+0xf800aa58>
1000aad4:	003ff606 	br	1000aab0 <__alt_data_end+0xf800aab0>
1000aad8:	18bff916 	blt	r3,r2,1000aac0 <__alt_data_end+0xf800aac0>
1000aadc:	10c00316 	blt	r2,r3,1000aaec <__gedf2+0xc4>
1000aae0:	42bff736 	bltu	r8,r10,1000aac0 <__alt_data_end+0xf800aac0>
1000aae4:	52000326 	beq	r10,r8,1000aaf4 <__gedf2+0xcc>
1000aae8:	5200042e 	bgeu	r10,r8,1000aafc <__gedf2+0xd4>
1000aaec:	283fec1e 	bne	r5,zero,1000aaa0 <__alt_data_end+0xf800aaa0>
1000aaf0:	003ff406 	br	1000aac4 <__alt_data_end+0xf800aac4>
1000aaf4:	313ff236 	bltu	r6,r4,1000aac0 <__alt_data_end+0xf800aac0>
1000aaf8:	21bffc36 	bltu	r4,r6,1000aaec <__alt_data_end+0xf800aaec>
1000aafc:	0005883a 	mov	r2,zero
1000ab00:	f800283a 	ret

1000ab04 <__muldf3>:
1000ab04:	deffee04 	addi	sp,sp,-72
1000ab08:	dd000c15 	stw	r20,48(sp)
1000ab0c:	2828d53a 	srli	r20,r5,20
1000ab10:	ddc00f15 	stw	r23,60(sp)
1000ab14:	282ed7fa 	srli	r23,r5,31
1000ab18:	dc000815 	stw	r16,32(sp)
1000ab1c:	04000434 	movhi	r16,16
1000ab20:	dcc00b15 	stw	r19,44(sp)
1000ab24:	843fffc4 	addi	r16,r16,-1
1000ab28:	dfc01115 	stw	ra,68(sp)
1000ab2c:	df001015 	stw	fp,64(sp)
1000ab30:	dd800e15 	stw	r22,56(sp)
1000ab34:	dd400d15 	stw	r21,52(sp)
1000ab38:	dc800a15 	stw	r18,40(sp)
1000ab3c:	dc400915 	stw	r17,36(sp)
1000ab40:	a501ffcc 	andi	r20,r20,2047
1000ab44:	2c20703a 	and	r16,r5,r16
1000ab48:	b827883a 	mov	r19,r23
1000ab4c:	ba403fcc 	andi	r9,r23,255
1000ab50:	a0006026 	beq	r20,zero,1000acd4 <__muldf3+0x1d0>
1000ab54:	0081ffc4 	movi	r2,2047
1000ab58:	202d883a 	mov	r22,r4
1000ab5c:	a0803626 	beq	r20,r2,1000ac38 <__muldf3+0x134>
1000ab60:	84000434 	orhi	r16,r16,16
1000ab64:	200ad77a 	srli	r5,r4,29
1000ab68:	800490fa 	slli	r2,r16,3
1000ab6c:	202c90fa 	slli	r22,r4,3
1000ab70:	a53f0044 	addi	r20,r20,-1023
1000ab74:	28a0b03a 	or	r16,r5,r2
1000ab78:	002b883a 	mov	r21,zero
1000ab7c:	000b883a 	mov	r5,zero
1000ab80:	3804d53a 	srli	r2,r7,20
1000ab84:	3838d7fa 	srli	fp,r7,31
1000ab88:	04400434 	movhi	r17,16
1000ab8c:	8c7fffc4 	addi	r17,r17,-1
1000ab90:	1081ffcc 	andi	r2,r2,2047
1000ab94:	3025883a 	mov	r18,r6
1000ab98:	3c62703a 	and	r17,r7,r17
1000ab9c:	e2803fcc 	andi	r10,fp,255
1000aba0:	10006d26 	beq	r2,zero,1000ad58 <__muldf3+0x254>
1000aba4:	00c1ffc4 	movi	r3,2047
1000aba8:	10c06526 	beq	r2,r3,1000ad40 <__muldf3+0x23c>
1000abac:	8c400434 	orhi	r17,r17,16
1000abb0:	300ed77a 	srli	r7,r6,29
1000abb4:	880690fa 	slli	r3,r17,3
1000abb8:	302490fa 	slli	r18,r6,3
1000abbc:	10bf0044 	addi	r2,r2,-1023
1000abc0:	38e2b03a 	or	r17,r7,r3
1000abc4:	000f883a 	mov	r7,zero
1000abc8:	a087883a 	add	r3,r20,r2
1000abcc:	010003c4 	movi	r4,15
1000abd0:	3d44b03a 	or	r2,r7,r21
1000abd4:	e5ccf03a 	xor	r6,fp,r23
1000abd8:	1a000044 	addi	r8,r3,1
1000abdc:	20809b36 	bltu	r4,r2,1000ae4c <__muldf3+0x348>
1000abe0:	100490ba 	slli	r2,r2,2
1000abe4:	01040074 	movhi	r4,4097
1000abe8:	212afe04 	addi	r4,r4,-21512
1000abec:	1105883a 	add	r2,r2,r4
1000abf0:	10800017 	ldw	r2,0(r2)
1000abf4:	1000683a 	jmp	r2
1000abf8:	1000ae4c 	andi	zero,r2,697
1000abfc:	1000ac58 	cmpnei	zero,r2,689
1000ac00:	1000ac58 	cmpnei	zero,r2,689
1000ac04:	1000ac54 	ori	zero,r2,689
1000ac08:	1000ae28 	cmpgeui	zero,r2,696
1000ac0c:	1000ae28 	cmpgeui	zero,r2,696
1000ac10:	1000ae10 	cmplti	zero,r2,696
1000ac14:	1000ac54 	ori	zero,r2,689
1000ac18:	1000ae28 	cmpgeui	zero,r2,696
1000ac1c:	1000ae10 	cmplti	zero,r2,696
1000ac20:	1000ae28 	cmpgeui	zero,r2,696
1000ac24:	1000ac54 	ori	zero,r2,689
1000ac28:	1000ae38 	rdprs	zero,r2,696
1000ac2c:	1000ae38 	rdprs	zero,r2,696
1000ac30:	1000ae38 	rdprs	zero,r2,696
1000ac34:	1000b198 	cmpnei	zero,r2,710
1000ac38:	2404b03a 	or	r2,r4,r16
1000ac3c:	1000711e 	bne	r2,zero,1000ae04 <__muldf3+0x300>
1000ac40:	05400204 	movi	r21,8
1000ac44:	0021883a 	mov	r16,zero
1000ac48:	002d883a 	mov	r22,zero
1000ac4c:	01400084 	movi	r5,2
1000ac50:	003fcb06 	br	1000ab80 <__alt_data_end+0xf800ab80>
1000ac54:	500d883a 	mov	r6,r10
1000ac58:	00800084 	movi	r2,2
1000ac5c:	38805926 	beq	r7,r2,1000adc4 <__muldf3+0x2c0>
1000ac60:	008000c4 	movi	r2,3
1000ac64:	3881bb26 	beq	r7,r2,1000b354 <__muldf3+0x850>
1000ac68:	00800044 	movi	r2,1
1000ac6c:	3881961e 	bne	r7,r2,1000b2c8 <__muldf3+0x7c4>
1000ac70:	3027883a 	mov	r19,r6
1000ac74:	0005883a 	mov	r2,zero
1000ac78:	0021883a 	mov	r16,zero
1000ac7c:	002d883a 	mov	r22,zero
1000ac80:	1004953a 	slli	r2,r2,20
1000ac84:	98c03fcc 	andi	r3,r19,255
1000ac88:	04400434 	movhi	r17,16
1000ac8c:	8c7fffc4 	addi	r17,r17,-1
1000ac90:	180697fa 	slli	r3,r3,31
1000ac94:	8460703a 	and	r16,r16,r17
1000ac98:	80a0b03a 	or	r16,r16,r2
1000ac9c:	80c6b03a 	or	r3,r16,r3
1000aca0:	b005883a 	mov	r2,r22
1000aca4:	dfc01117 	ldw	ra,68(sp)
1000aca8:	df001017 	ldw	fp,64(sp)
1000acac:	ddc00f17 	ldw	r23,60(sp)
1000acb0:	dd800e17 	ldw	r22,56(sp)
1000acb4:	dd400d17 	ldw	r21,52(sp)
1000acb8:	dd000c17 	ldw	r20,48(sp)
1000acbc:	dcc00b17 	ldw	r19,44(sp)
1000acc0:	dc800a17 	ldw	r18,40(sp)
1000acc4:	dc400917 	ldw	r17,36(sp)
1000acc8:	dc000817 	ldw	r16,32(sp)
1000accc:	dec01204 	addi	sp,sp,72
1000acd0:	f800283a 	ret
1000acd4:	2404b03a 	or	r2,r4,r16
1000acd8:	202b883a 	mov	r21,r4
1000acdc:	10004426 	beq	r2,zero,1000adf0 <__muldf3+0x2ec>
1000ace0:	80015126 	beq	r16,zero,1000b228 <__muldf3+0x724>
1000ace4:	8009883a 	mov	r4,r16
1000ace8:	d9800715 	stw	r6,28(sp)
1000acec:	d9c00215 	stw	r7,8(sp)
1000acf0:	da400415 	stw	r9,16(sp)
1000acf4:	000bdc80 	call	1000bdc8 <__clzsi2>
1000acf8:	d9800717 	ldw	r6,28(sp)
1000acfc:	d9c00217 	ldw	r7,8(sp)
1000ad00:	da400417 	ldw	r9,16(sp)
1000ad04:	113ffd44 	addi	r4,r2,-11
1000ad08:	00c00704 	movi	r3,28
1000ad0c:	19014216 	blt	r3,r4,1000b218 <__muldf3+0x714>
1000ad10:	00c00744 	movi	r3,29
1000ad14:	15bffe04 	addi	r22,r2,-8
1000ad18:	1907c83a 	sub	r3,r3,r4
1000ad1c:	85a0983a 	sll	r16,r16,r22
1000ad20:	a8c6d83a 	srl	r3,r21,r3
1000ad24:	adac983a 	sll	r22,r21,r22
1000ad28:	1c20b03a 	or	r16,r3,r16
1000ad2c:	1080fcc4 	addi	r2,r2,1011
1000ad30:	00a9c83a 	sub	r20,zero,r2
1000ad34:	002b883a 	mov	r21,zero
1000ad38:	000b883a 	mov	r5,zero
1000ad3c:	003f9006 	br	1000ab80 <__alt_data_end+0xf800ab80>
1000ad40:	3446b03a 	or	r3,r6,r17
1000ad44:	1800281e 	bne	r3,zero,1000ade8 <__muldf3+0x2e4>
1000ad48:	0023883a 	mov	r17,zero
1000ad4c:	0025883a 	mov	r18,zero
1000ad50:	01c00084 	movi	r7,2
1000ad54:	003f9c06 	br	1000abc8 <__alt_data_end+0xf800abc8>
1000ad58:	3446b03a 	or	r3,r6,r17
1000ad5c:	18001e26 	beq	r3,zero,1000add8 <__muldf3+0x2d4>
1000ad60:	88012126 	beq	r17,zero,1000b1e8 <__muldf3+0x6e4>
1000ad64:	8809883a 	mov	r4,r17
1000ad68:	d9400215 	stw	r5,8(sp)
1000ad6c:	d9800715 	stw	r6,28(sp)
1000ad70:	da400415 	stw	r9,16(sp)
1000ad74:	da800315 	stw	r10,12(sp)
1000ad78:	000bdc80 	call	1000bdc8 <__clzsi2>
1000ad7c:	d9400217 	ldw	r5,8(sp)
1000ad80:	d9800717 	ldw	r6,28(sp)
1000ad84:	da400417 	ldw	r9,16(sp)
1000ad88:	da800317 	ldw	r10,12(sp)
1000ad8c:	113ffd44 	addi	r4,r2,-11
1000ad90:	00c00704 	movi	r3,28
1000ad94:	19011016 	blt	r3,r4,1000b1d8 <__muldf3+0x6d4>
1000ad98:	00c00744 	movi	r3,29
1000ad9c:	14bffe04 	addi	r18,r2,-8
1000ada0:	1907c83a 	sub	r3,r3,r4
1000ada4:	8ca2983a 	sll	r17,r17,r18
1000ada8:	30c6d83a 	srl	r3,r6,r3
1000adac:	34a4983a 	sll	r18,r6,r18
1000adb0:	1c62b03a 	or	r17,r3,r17
1000adb4:	1080fcc4 	addi	r2,r2,1011
1000adb8:	0085c83a 	sub	r2,zero,r2
1000adbc:	000f883a 	mov	r7,zero
1000adc0:	003f8106 	br	1000abc8 <__alt_data_end+0xf800abc8>
1000adc4:	3027883a 	mov	r19,r6
1000adc8:	0081ffc4 	movi	r2,2047
1000adcc:	0021883a 	mov	r16,zero
1000add0:	002d883a 	mov	r22,zero
1000add4:	003faa06 	br	1000ac80 <__alt_data_end+0xf800ac80>
1000add8:	0023883a 	mov	r17,zero
1000addc:	0025883a 	mov	r18,zero
1000ade0:	01c00044 	movi	r7,1
1000ade4:	003f7806 	br	1000abc8 <__alt_data_end+0xf800abc8>
1000ade8:	01c000c4 	movi	r7,3
1000adec:	003f7606 	br	1000abc8 <__alt_data_end+0xf800abc8>
1000adf0:	05400104 	movi	r21,4
1000adf4:	0021883a 	mov	r16,zero
1000adf8:	002d883a 	mov	r22,zero
1000adfc:	01400044 	movi	r5,1
1000ae00:	003f5f06 	br	1000ab80 <__alt_data_end+0xf800ab80>
1000ae04:	05400304 	movi	r21,12
1000ae08:	014000c4 	movi	r5,3
1000ae0c:	003f5c06 	br	1000ab80 <__alt_data_end+0xf800ab80>
1000ae10:	04000434 	movhi	r16,16
1000ae14:	0027883a 	mov	r19,zero
1000ae18:	843fffc4 	addi	r16,r16,-1
1000ae1c:	05bfffc4 	movi	r22,-1
1000ae20:	0081ffc4 	movi	r2,2047
1000ae24:	003f9606 	br	1000ac80 <__alt_data_end+0xf800ac80>
1000ae28:	8023883a 	mov	r17,r16
1000ae2c:	b025883a 	mov	r18,r22
1000ae30:	280f883a 	mov	r7,r5
1000ae34:	003f8806 	br	1000ac58 <__alt_data_end+0xf800ac58>
1000ae38:	8023883a 	mov	r17,r16
1000ae3c:	b025883a 	mov	r18,r22
1000ae40:	480d883a 	mov	r6,r9
1000ae44:	280f883a 	mov	r7,r5
1000ae48:	003f8306 	br	1000ac58 <__alt_data_end+0xf800ac58>
1000ae4c:	b026d43a 	srli	r19,r22,16
1000ae50:	902ed43a 	srli	r23,r18,16
1000ae54:	b5bfffcc 	andi	r22,r22,65535
1000ae58:	94bfffcc 	andi	r18,r18,65535
1000ae5c:	b00b883a 	mov	r5,r22
1000ae60:	9009883a 	mov	r4,r18
1000ae64:	d8c00515 	stw	r3,20(sp)
1000ae68:	d9800715 	stw	r6,28(sp)
1000ae6c:	da000615 	stw	r8,24(sp)
1000ae70:	00096fc0 	call	100096fc <__mulsi3>
1000ae74:	980b883a 	mov	r5,r19
1000ae78:	9009883a 	mov	r4,r18
1000ae7c:	1029883a 	mov	r20,r2
1000ae80:	00096fc0 	call	100096fc <__mulsi3>
1000ae84:	b80b883a 	mov	r5,r23
1000ae88:	9809883a 	mov	r4,r19
1000ae8c:	102b883a 	mov	r21,r2
1000ae90:	00096fc0 	call	100096fc <__mulsi3>
1000ae94:	b809883a 	mov	r4,r23
1000ae98:	b00b883a 	mov	r5,r22
1000ae9c:	1039883a 	mov	fp,r2
1000aea0:	00096fc0 	call	100096fc <__mulsi3>
1000aea4:	a008d43a 	srli	r4,r20,16
1000aea8:	1545883a 	add	r2,r2,r21
1000aeac:	d8c00517 	ldw	r3,20(sp)
1000aeb0:	2085883a 	add	r2,r4,r2
1000aeb4:	d9800717 	ldw	r6,28(sp)
1000aeb8:	da000617 	ldw	r8,24(sp)
1000aebc:	1540022e 	bgeu	r2,r21,1000aec8 <__muldf3+0x3c4>
1000aec0:	01000074 	movhi	r4,1
1000aec4:	e139883a 	add	fp,fp,r4
1000aec8:	100e943a 	slli	r7,r2,16
1000aecc:	1004d43a 	srli	r2,r2,16
1000aed0:	882ad43a 	srli	r21,r17,16
1000aed4:	a53fffcc 	andi	r20,r20,65535
1000aed8:	8c7fffcc 	andi	r17,r17,65535
1000aedc:	3d29883a 	add	r20,r7,r20
1000aee0:	b00b883a 	mov	r5,r22
1000aee4:	8809883a 	mov	r4,r17
1000aee8:	d8c00515 	stw	r3,20(sp)
1000aeec:	d9800715 	stw	r6,28(sp)
1000aef0:	da000615 	stw	r8,24(sp)
1000aef4:	dd000115 	stw	r20,4(sp)
1000aef8:	d8800015 	stw	r2,0(sp)
1000aefc:	00096fc0 	call	100096fc <__mulsi3>
1000af00:	980b883a 	mov	r5,r19
1000af04:	8809883a 	mov	r4,r17
1000af08:	d8800215 	stw	r2,8(sp)
1000af0c:	00096fc0 	call	100096fc <__mulsi3>
1000af10:	9809883a 	mov	r4,r19
1000af14:	a80b883a 	mov	r5,r21
1000af18:	1029883a 	mov	r20,r2
1000af1c:	00096fc0 	call	100096fc <__mulsi3>
1000af20:	b00b883a 	mov	r5,r22
1000af24:	a809883a 	mov	r4,r21
1000af28:	d8800415 	stw	r2,16(sp)
1000af2c:	00096fc0 	call	100096fc <__mulsi3>
1000af30:	d9c00217 	ldw	r7,8(sp)
1000af34:	1505883a 	add	r2,r2,r20
1000af38:	d8c00517 	ldw	r3,20(sp)
1000af3c:	3826d43a 	srli	r19,r7,16
1000af40:	d9800717 	ldw	r6,28(sp)
1000af44:	da000617 	ldw	r8,24(sp)
1000af48:	9885883a 	add	r2,r19,r2
1000af4c:	da400417 	ldw	r9,16(sp)
1000af50:	1500022e 	bgeu	r2,r20,1000af5c <__muldf3+0x458>
1000af54:	01000074 	movhi	r4,1
1000af58:	4913883a 	add	r9,r9,r4
1000af5c:	1028d43a 	srli	r20,r2,16
1000af60:	1004943a 	slli	r2,r2,16
1000af64:	802cd43a 	srli	r22,r16,16
1000af68:	843fffcc 	andi	r16,r16,65535
1000af6c:	3cffffcc 	andi	r19,r7,65535
1000af70:	9009883a 	mov	r4,r18
1000af74:	800b883a 	mov	r5,r16
1000af78:	a269883a 	add	r20,r20,r9
1000af7c:	d8c00515 	stw	r3,20(sp)
1000af80:	d9800715 	stw	r6,28(sp)
1000af84:	da000615 	stw	r8,24(sp)
1000af88:	14e7883a 	add	r19,r2,r19
1000af8c:	00096fc0 	call	100096fc <__mulsi3>
1000af90:	9009883a 	mov	r4,r18
1000af94:	b00b883a 	mov	r5,r22
1000af98:	d8800315 	stw	r2,12(sp)
1000af9c:	00096fc0 	call	100096fc <__mulsi3>
1000afa0:	b809883a 	mov	r4,r23
1000afa4:	b00b883a 	mov	r5,r22
1000afa8:	d8800215 	stw	r2,8(sp)
1000afac:	00096fc0 	call	100096fc <__mulsi3>
1000afb0:	b80b883a 	mov	r5,r23
1000afb4:	8009883a 	mov	r4,r16
1000afb8:	d8800415 	stw	r2,16(sp)
1000afbc:	00096fc0 	call	100096fc <__mulsi3>
1000afc0:	da800317 	ldw	r10,12(sp)
1000afc4:	d9c00217 	ldw	r7,8(sp)
1000afc8:	d9000017 	ldw	r4,0(sp)
1000afcc:	502ed43a 	srli	r23,r10,16
1000afd0:	11c5883a 	add	r2,r2,r7
1000afd4:	24e5883a 	add	r18,r4,r19
1000afd8:	b885883a 	add	r2,r23,r2
1000afdc:	d8c00517 	ldw	r3,20(sp)
1000afe0:	d9800717 	ldw	r6,28(sp)
1000afe4:	da000617 	ldw	r8,24(sp)
1000afe8:	da400417 	ldw	r9,16(sp)
1000afec:	11c0022e 	bgeu	r2,r7,1000aff8 <__muldf3+0x4f4>
1000aff0:	01000074 	movhi	r4,1
1000aff4:	4913883a 	add	r9,r9,r4
1000aff8:	100ed43a 	srli	r7,r2,16
1000affc:	1004943a 	slli	r2,r2,16
1000b000:	55ffffcc 	andi	r23,r10,65535
1000b004:	3a53883a 	add	r9,r7,r9
1000b008:	8809883a 	mov	r4,r17
1000b00c:	800b883a 	mov	r5,r16
1000b010:	d8c00515 	stw	r3,20(sp)
1000b014:	d9800715 	stw	r6,28(sp)
1000b018:	da000615 	stw	r8,24(sp)
1000b01c:	da400415 	stw	r9,16(sp)
1000b020:	15ef883a 	add	r23,r2,r23
1000b024:	00096fc0 	call	100096fc <__mulsi3>
1000b028:	8809883a 	mov	r4,r17
1000b02c:	b00b883a 	mov	r5,r22
1000b030:	d8800215 	stw	r2,8(sp)
1000b034:	00096fc0 	call	100096fc <__mulsi3>
1000b038:	b00b883a 	mov	r5,r22
1000b03c:	a809883a 	mov	r4,r21
1000b040:	d8800315 	stw	r2,12(sp)
1000b044:	00096fc0 	call	100096fc <__mulsi3>
1000b048:	8009883a 	mov	r4,r16
1000b04c:	a80b883a 	mov	r5,r21
1000b050:	1023883a 	mov	r17,r2
1000b054:	00096fc0 	call	100096fc <__mulsi3>
1000b058:	d9c00217 	ldw	r7,8(sp)
1000b05c:	da800317 	ldw	r10,12(sp)
1000b060:	d8c00517 	ldw	r3,20(sp)
1000b064:	3808d43a 	srli	r4,r7,16
1000b068:	1285883a 	add	r2,r2,r10
1000b06c:	d9800717 	ldw	r6,28(sp)
1000b070:	2085883a 	add	r2,r4,r2
1000b074:	da000617 	ldw	r8,24(sp)
1000b078:	da400417 	ldw	r9,16(sp)
1000b07c:	1280022e 	bgeu	r2,r10,1000b088 <__muldf3+0x584>
1000b080:	01000074 	movhi	r4,1
1000b084:	8923883a 	add	r17,r17,r4
1000b088:	1008943a 	slli	r4,r2,16
1000b08c:	39ffffcc 	andi	r7,r7,65535
1000b090:	e4b9883a 	add	fp,fp,r18
1000b094:	21cf883a 	add	r7,r4,r7
1000b098:	e4e7803a 	cmpltu	r19,fp,r19
1000b09c:	3d0f883a 	add	r7,r7,r20
1000b0a0:	bf39883a 	add	fp,r23,fp
1000b0a4:	99c9883a 	add	r4,r19,r7
1000b0a8:	e5ef803a 	cmpltu	r23,fp,r23
1000b0ac:	490b883a 	add	r5,r9,r4
1000b0b0:	1004d43a 	srli	r2,r2,16
1000b0b4:	b965883a 	add	r18,r23,r5
1000b0b8:	24c9803a 	cmpltu	r4,r4,r19
1000b0bc:	3d29803a 	cmpltu	r20,r7,r20
1000b0c0:	a128b03a 	or	r20,r20,r4
1000b0c4:	95ef803a 	cmpltu	r23,r18,r23
1000b0c8:	2a53803a 	cmpltu	r9,r5,r9
1000b0cc:	a0a9883a 	add	r20,r20,r2
1000b0d0:	4deeb03a 	or	r23,r9,r23
1000b0d4:	a5ef883a 	add	r23,r20,r23
1000b0d8:	bc63883a 	add	r17,r23,r17
1000b0dc:	e004927a 	slli	r2,fp,9
1000b0e0:	d9000117 	ldw	r4,4(sp)
1000b0e4:	882e927a 	slli	r23,r17,9
1000b0e8:	9022d5fa 	srli	r17,r18,23
1000b0ec:	e038d5fa 	srli	fp,fp,23
1000b0f0:	1104b03a 	or	r2,r2,r4
1000b0f4:	9024927a 	slli	r18,r18,9
1000b0f8:	1004c03a 	cmpne	r2,r2,zero
1000b0fc:	bc62b03a 	or	r17,r23,r17
1000b100:	1738b03a 	or	fp,r2,fp
1000b104:	8880402c 	andhi	r2,r17,256
1000b108:	e4a4b03a 	or	r18,fp,r18
1000b10c:	10000726 	beq	r2,zero,1000b12c <__muldf3+0x628>
1000b110:	9006d07a 	srli	r3,r18,1
1000b114:	880497fa 	slli	r2,r17,31
1000b118:	9480004c 	andi	r18,r18,1
1000b11c:	8822d07a 	srli	r17,r17,1
1000b120:	1ca4b03a 	or	r18,r3,r18
1000b124:	14a4b03a 	or	r18,r2,r18
1000b128:	4007883a 	mov	r3,r8
1000b12c:	1880ffc4 	addi	r2,r3,1023
1000b130:	0080460e 	bge	zero,r2,1000b24c <__muldf3+0x748>
1000b134:	910001cc 	andi	r4,r18,7
1000b138:	20000726 	beq	r4,zero,1000b158 <__muldf3+0x654>
1000b13c:	910003cc 	andi	r4,r18,15
1000b140:	01400104 	movi	r5,4
1000b144:	21400426 	beq	r4,r5,1000b158 <__muldf3+0x654>
1000b148:	9149883a 	add	r4,r18,r5
1000b14c:	24a5803a 	cmpltu	r18,r4,r18
1000b150:	8ca3883a 	add	r17,r17,r18
1000b154:	2025883a 	mov	r18,r4
1000b158:	8900402c 	andhi	r4,r17,256
1000b15c:	20000426 	beq	r4,zero,1000b170 <__muldf3+0x66c>
1000b160:	18810004 	addi	r2,r3,1024
1000b164:	00ffc034 	movhi	r3,65280
1000b168:	18ffffc4 	addi	r3,r3,-1
1000b16c:	88e2703a 	and	r17,r17,r3
1000b170:	00c1ff84 	movi	r3,2046
1000b174:	18bf1316 	blt	r3,r2,1000adc4 <__alt_data_end+0xf800adc4>
1000b178:	882c977a 	slli	r22,r17,29
1000b17c:	9024d0fa 	srli	r18,r18,3
1000b180:	8822927a 	slli	r17,r17,9
1000b184:	1081ffcc 	andi	r2,r2,2047
1000b188:	b4acb03a 	or	r22,r22,r18
1000b18c:	8820d33a 	srli	r16,r17,12
1000b190:	3027883a 	mov	r19,r6
1000b194:	003eba06 	br	1000ac80 <__alt_data_end+0xf800ac80>
1000b198:	8080022c 	andhi	r2,r16,8
1000b19c:	10000926 	beq	r2,zero,1000b1c4 <__muldf3+0x6c0>
1000b1a0:	8880022c 	andhi	r2,r17,8
1000b1a4:	1000071e 	bne	r2,zero,1000b1c4 <__muldf3+0x6c0>
1000b1a8:	00800434 	movhi	r2,16
1000b1ac:	8c000234 	orhi	r16,r17,8
1000b1b0:	10bfffc4 	addi	r2,r2,-1
1000b1b4:	e027883a 	mov	r19,fp
1000b1b8:	80a0703a 	and	r16,r16,r2
1000b1bc:	902d883a 	mov	r22,r18
1000b1c0:	003f1706 	br	1000ae20 <__alt_data_end+0xf800ae20>
1000b1c4:	00800434 	movhi	r2,16
1000b1c8:	84000234 	orhi	r16,r16,8
1000b1cc:	10bfffc4 	addi	r2,r2,-1
1000b1d0:	80a0703a 	and	r16,r16,r2
1000b1d4:	003f1206 	br	1000ae20 <__alt_data_end+0xf800ae20>
1000b1d8:	147ff604 	addi	r17,r2,-40
1000b1dc:	3462983a 	sll	r17,r6,r17
1000b1e0:	0025883a 	mov	r18,zero
1000b1e4:	003ef306 	br	1000adb4 <__alt_data_end+0xf800adb4>
1000b1e8:	3009883a 	mov	r4,r6
1000b1ec:	d9400215 	stw	r5,8(sp)
1000b1f0:	d9800715 	stw	r6,28(sp)
1000b1f4:	da400415 	stw	r9,16(sp)
1000b1f8:	da800315 	stw	r10,12(sp)
1000b1fc:	000bdc80 	call	1000bdc8 <__clzsi2>
1000b200:	10800804 	addi	r2,r2,32
1000b204:	da800317 	ldw	r10,12(sp)
1000b208:	da400417 	ldw	r9,16(sp)
1000b20c:	d9800717 	ldw	r6,28(sp)
1000b210:	d9400217 	ldw	r5,8(sp)
1000b214:	003edd06 	br	1000ad8c <__alt_data_end+0xf800ad8c>
1000b218:	143ff604 	addi	r16,r2,-40
1000b21c:	ac20983a 	sll	r16,r21,r16
1000b220:	002d883a 	mov	r22,zero
1000b224:	003ec106 	br	1000ad2c <__alt_data_end+0xf800ad2c>
1000b228:	d9800715 	stw	r6,28(sp)
1000b22c:	d9c00215 	stw	r7,8(sp)
1000b230:	da400415 	stw	r9,16(sp)
1000b234:	000bdc80 	call	1000bdc8 <__clzsi2>
1000b238:	10800804 	addi	r2,r2,32
1000b23c:	da400417 	ldw	r9,16(sp)
1000b240:	d9c00217 	ldw	r7,8(sp)
1000b244:	d9800717 	ldw	r6,28(sp)
1000b248:	003eae06 	br	1000ad04 <__alt_data_end+0xf800ad04>
1000b24c:	00c00044 	movi	r3,1
1000b250:	1887c83a 	sub	r3,r3,r2
1000b254:	01000e04 	movi	r4,56
1000b258:	20fe8516 	blt	r4,r3,1000ac70 <__alt_data_end+0xf800ac70>
1000b25c:	010007c4 	movi	r4,31
1000b260:	20c01b16 	blt	r4,r3,1000b2d0 <__muldf3+0x7cc>
1000b264:	00800804 	movi	r2,32
1000b268:	10c5c83a 	sub	r2,r2,r3
1000b26c:	888a983a 	sll	r5,r17,r2
1000b270:	90c8d83a 	srl	r4,r18,r3
1000b274:	9084983a 	sll	r2,r18,r2
1000b278:	88e2d83a 	srl	r17,r17,r3
1000b27c:	2906b03a 	or	r3,r5,r4
1000b280:	1004c03a 	cmpne	r2,r2,zero
1000b284:	1886b03a 	or	r3,r3,r2
1000b288:	188001cc 	andi	r2,r3,7
1000b28c:	10000726 	beq	r2,zero,1000b2ac <__muldf3+0x7a8>
1000b290:	188003cc 	andi	r2,r3,15
1000b294:	01000104 	movi	r4,4
1000b298:	11000426 	beq	r2,r4,1000b2ac <__muldf3+0x7a8>
1000b29c:	1805883a 	mov	r2,r3
1000b2a0:	10c00104 	addi	r3,r2,4
1000b2a4:	1885803a 	cmpltu	r2,r3,r2
1000b2a8:	88a3883a 	add	r17,r17,r2
1000b2ac:	8880202c 	andhi	r2,r17,128
1000b2b0:	10001c26 	beq	r2,zero,1000b324 <__muldf3+0x820>
1000b2b4:	3027883a 	mov	r19,r6
1000b2b8:	00800044 	movi	r2,1
1000b2bc:	0021883a 	mov	r16,zero
1000b2c0:	002d883a 	mov	r22,zero
1000b2c4:	003e6e06 	br	1000ac80 <__alt_data_end+0xf800ac80>
1000b2c8:	4007883a 	mov	r3,r8
1000b2cc:	003f9706 	br	1000b12c <__alt_data_end+0xf800b12c>
1000b2d0:	017ff844 	movi	r5,-31
1000b2d4:	2885c83a 	sub	r2,r5,r2
1000b2d8:	888ad83a 	srl	r5,r17,r2
1000b2dc:	00800804 	movi	r2,32
1000b2e0:	18801a26 	beq	r3,r2,1000b34c <__muldf3+0x848>
1000b2e4:	01001004 	movi	r4,64
1000b2e8:	20c7c83a 	sub	r3,r4,r3
1000b2ec:	88e2983a 	sll	r17,r17,r3
1000b2f0:	8ca4b03a 	or	r18,r17,r18
1000b2f4:	9004c03a 	cmpne	r2,r18,zero
1000b2f8:	2884b03a 	or	r2,r5,r2
1000b2fc:	144001cc 	andi	r17,r2,7
1000b300:	88000d1e 	bne	r17,zero,1000b338 <__muldf3+0x834>
1000b304:	0021883a 	mov	r16,zero
1000b308:	102cd0fa 	srli	r22,r2,3
1000b30c:	3027883a 	mov	r19,r6
1000b310:	0005883a 	mov	r2,zero
1000b314:	b46cb03a 	or	r22,r22,r17
1000b318:	003e5906 	br	1000ac80 <__alt_data_end+0xf800ac80>
1000b31c:	1007883a 	mov	r3,r2
1000b320:	0023883a 	mov	r17,zero
1000b324:	8820927a 	slli	r16,r17,9
1000b328:	1805883a 	mov	r2,r3
1000b32c:	8822977a 	slli	r17,r17,29
1000b330:	8020d33a 	srli	r16,r16,12
1000b334:	003ff406 	br	1000b308 <__alt_data_end+0xf800b308>
1000b338:	10c003cc 	andi	r3,r2,15
1000b33c:	01000104 	movi	r4,4
1000b340:	193ff626 	beq	r3,r4,1000b31c <__alt_data_end+0xf800b31c>
1000b344:	0023883a 	mov	r17,zero
1000b348:	003fd506 	br	1000b2a0 <__alt_data_end+0xf800b2a0>
1000b34c:	0023883a 	mov	r17,zero
1000b350:	003fe706 	br	1000b2f0 <__alt_data_end+0xf800b2f0>
1000b354:	00800434 	movhi	r2,16
1000b358:	8c000234 	orhi	r16,r17,8
1000b35c:	10bfffc4 	addi	r2,r2,-1
1000b360:	3027883a 	mov	r19,r6
1000b364:	80a0703a 	and	r16,r16,r2
1000b368:	902d883a 	mov	r22,r18
1000b36c:	003eac06 	br	1000ae20 <__alt_data_end+0xf800ae20>

1000b370 <__subdf3>:
1000b370:	02000434 	movhi	r8,16
1000b374:	423fffc4 	addi	r8,r8,-1
1000b378:	defffb04 	addi	sp,sp,-20
1000b37c:	2a14703a 	and	r10,r5,r8
1000b380:	3812d53a 	srli	r9,r7,20
1000b384:	3a10703a 	and	r8,r7,r8
1000b388:	2006d77a 	srli	r3,r4,29
1000b38c:	3004d77a 	srli	r2,r6,29
1000b390:	dc000015 	stw	r16,0(sp)
1000b394:	501490fa 	slli	r10,r10,3
1000b398:	2820d53a 	srli	r16,r5,20
1000b39c:	401090fa 	slli	r8,r8,3
1000b3a0:	dc800215 	stw	r18,8(sp)
1000b3a4:	dc400115 	stw	r17,4(sp)
1000b3a8:	dfc00415 	stw	ra,16(sp)
1000b3ac:	202290fa 	slli	r17,r4,3
1000b3b0:	dcc00315 	stw	r19,12(sp)
1000b3b4:	4a41ffcc 	andi	r9,r9,2047
1000b3b8:	0101ffc4 	movi	r4,2047
1000b3bc:	2824d7fa 	srli	r18,r5,31
1000b3c0:	8401ffcc 	andi	r16,r16,2047
1000b3c4:	50c6b03a 	or	r3,r10,r3
1000b3c8:	380ed7fa 	srli	r7,r7,31
1000b3cc:	408ab03a 	or	r5,r8,r2
1000b3d0:	300c90fa 	slli	r6,r6,3
1000b3d4:	49009626 	beq	r9,r4,1000b630 <__subdf3+0x2c0>
1000b3d8:	39c0005c 	xori	r7,r7,1
1000b3dc:	8245c83a 	sub	r2,r16,r9
1000b3e0:	3c807426 	beq	r7,r18,1000b5b4 <__subdf3+0x244>
1000b3e4:	0080af0e 	bge	zero,r2,1000b6a4 <__subdf3+0x334>
1000b3e8:	48002a1e 	bne	r9,zero,1000b494 <__subdf3+0x124>
1000b3ec:	2988b03a 	or	r4,r5,r6
1000b3f0:	20009a1e 	bne	r4,zero,1000b65c <__subdf3+0x2ec>
1000b3f4:	888001cc 	andi	r2,r17,7
1000b3f8:	10000726 	beq	r2,zero,1000b418 <__subdf3+0xa8>
1000b3fc:	888003cc 	andi	r2,r17,15
1000b400:	01000104 	movi	r4,4
1000b404:	11000426 	beq	r2,r4,1000b418 <__subdf3+0xa8>
1000b408:	890b883a 	add	r5,r17,r4
1000b40c:	2c63803a 	cmpltu	r17,r5,r17
1000b410:	1c47883a 	add	r3,r3,r17
1000b414:	2823883a 	mov	r17,r5
1000b418:	1880202c 	andhi	r2,r3,128
1000b41c:	10005926 	beq	r2,zero,1000b584 <__subdf3+0x214>
1000b420:	84000044 	addi	r16,r16,1
1000b424:	0081ffc4 	movi	r2,2047
1000b428:	8080be26 	beq	r16,r2,1000b724 <__subdf3+0x3b4>
1000b42c:	017fe034 	movhi	r5,65408
1000b430:	297fffc4 	addi	r5,r5,-1
1000b434:	1946703a 	and	r3,r3,r5
1000b438:	1804977a 	slli	r2,r3,29
1000b43c:	1806927a 	slli	r3,r3,9
1000b440:	8822d0fa 	srli	r17,r17,3
1000b444:	8401ffcc 	andi	r16,r16,2047
1000b448:	180ad33a 	srli	r5,r3,12
1000b44c:	9100004c 	andi	r4,r18,1
1000b450:	1444b03a 	or	r2,r2,r17
1000b454:	80c1ffcc 	andi	r3,r16,2047
1000b458:	1820953a 	slli	r16,r3,20
1000b45c:	20c03fcc 	andi	r3,r4,255
1000b460:	180897fa 	slli	r4,r3,31
1000b464:	00c00434 	movhi	r3,16
1000b468:	18ffffc4 	addi	r3,r3,-1
1000b46c:	28c6703a 	and	r3,r5,r3
1000b470:	1c06b03a 	or	r3,r3,r16
1000b474:	1906b03a 	or	r3,r3,r4
1000b478:	dfc00417 	ldw	ra,16(sp)
1000b47c:	dcc00317 	ldw	r19,12(sp)
1000b480:	dc800217 	ldw	r18,8(sp)
1000b484:	dc400117 	ldw	r17,4(sp)
1000b488:	dc000017 	ldw	r16,0(sp)
1000b48c:	dec00504 	addi	sp,sp,20
1000b490:	f800283a 	ret
1000b494:	0101ffc4 	movi	r4,2047
1000b498:	813fd626 	beq	r16,r4,1000b3f4 <__alt_data_end+0xf800b3f4>
1000b49c:	29402034 	orhi	r5,r5,128
1000b4a0:	01000e04 	movi	r4,56
1000b4a4:	2080a316 	blt	r4,r2,1000b734 <__subdf3+0x3c4>
1000b4a8:	010007c4 	movi	r4,31
1000b4ac:	2080c616 	blt	r4,r2,1000b7c8 <__subdf3+0x458>
1000b4b0:	01000804 	movi	r4,32
1000b4b4:	2089c83a 	sub	r4,r4,r2
1000b4b8:	2910983a 	sll	r8,r5,r4
1000b4bc:	308ed83a 	srl	r7,r6,r2
1000b4c0:	3108983a 	sll	r4,r6,r4
1000b4c4:	2884d83a 	srl	r2,r5,r2
1000b4c8:	41ccb03a 	or	r6,r8,r7
1000b4cc:	2008c03a 	cmpne	r4,r4,zero
1000b4d0:	310cb03a 	or	r6,r6,r4
1000b4d4:	898dc83a 	sub	r6,r17,r6
1000b4d8:	89a3803a 	cmpltu	r17,r17,r6
1000b4dc:	1887c83a 	sub	r3,r3,r2
1000b4e0:	1c47c83a 	sub	r3,r3,r17
1000b4e4:	3023883a 	mov	r17,r6
1000b4e8:	1880202c 	andhi	r2,r3,128
1000b4ec:	10002326 	beq	r2,zero,1000b57c <__subdf3+0x20c>
1000b4f0:	04c02034 	movhi	r19,128
1000b4f4:	9cffffc4 	addi	r19,r19,-1
1000b4f8:	1ce6703a 	and	r19,r3,r19
1000b4fc:	98007a26 	beq	r19,zero,1000b6e8 <__subdf3+0x378>
1000b500:	9809883a 	mov	r4,r19
1000b504:	000bdc80 	call	1000bdc8 <__clzsi2>
1000b508:	113ffe04 	addi	r4,r2,-8
1000b50c:	00c007c4 	movi	r3,31
1000b510:	19007b16 	blt	r3,r4,1000b700 <__subdf3+0x390>
1000b514:	00800804 	movi	r2,32
1000b518:	1105c83a 	sub	r2,r2,r4
1000b51c:	8884d83a 	srl	r2,r17,r2
1000b520:	9906983a 	sll	r3,r19,r4
1000b524:	8922983a 	sll	r17,r17,r4
1000b528:	10c4b03a 	or	r2,r2,r3
1000b52c:	24007816 	blt	r4,r16,1000b710 <__subdf3+0x3a0>
1000b530:	2421c83a 	sub	r16,r4,r16
1000b534:	80c00044 	addi	r3,r16,1
1000b538:	010007c4 	movi	r4,31
1000b53c:	20c09516 	blt	r4,r3,1000b794 <__subdf3+0x424>
1000b540:	01400804 	movi	r5,32
1000b544:	28cbc83a 	sub	r5,r5,r3
1000b548:	88c8d83a 	srl	r4,r17,r3
1000b54c:	8962983a 	sll	r17,r17,r5
1000b550:	114a983a 	sll	r5,r2,r5
1000b554:	10c6d83a 	srl	r3,r2,r3
1000b558:	8804c03a 	cmpne	r2,r17,zero
1000b55c:	290ab03a 	or	r5,r5,r4
1000b560:	28a2b03a 	or	r17,r5,r2
1000b564:	0021883a 	mov	r16,zero
1000b568:	003fa206 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000b56c:	2090b03a 	or	r8,r4,r2
1000b570:	40018e26 	beq	r8,zero,1000bbac <__subdf3+0x83c>
1000b574:	1007883a 	mov	r3,r2
1000b578:	2023883a 	mov	r17,r4
1000b57c:	888001cc 	andi	r2,r17,7
1000b580:	103f9e1e 	bne	r2,zero,1000b3fc <__alt_data_end+0xf800b3fc>
1000b584:	1804977a 	slli	r2,r3,29
1000b588:	8822d0fa 	srli	r17,r17,3
1000b58c:	1810d0fa 	srli	r8,r3,3
1000b590:	9100004c 	andi	r4,r18,1
1000b594:	1444b03a 	or	r2,r2,r17
1000b598:	00c1ffc4 	movi	r3,2047
1000b59c:	80c02826 	beq	r16,r3,1000b640 <__subdf3+0x2d0>
1000b5a0:	01400434 	movhi	r5,16
1000b5a4:	297fffc4 	addi	r5,r5,-1
1000b5a8:	80e0703a 	and	r16,r16,r3
1000b5ac:	414a703a 	and	r5,r8,r5
1000b5b0:	003fa806 	br	1000b454 <__alt_data_end+0xf800b454>
1000b5b4:	0080630e 	bge	zero,r2,1000b744 <__subdf3+0x3d4>
1000b5b8:	48003026 	beq	r9,zero,1000b67c <__subdf3+0x30c>
1000b5bc:	0101ffc4 	movi	r4,2047
1000b5c0:	813f8c26 	beq	r16,r4,1000b3f4 <__alt_data_end+0xf800b3f4>
1000b5c4:	29402034 	orhi	r5,r5,128
1000b5c8:	01000e04 	movi	r4,56
1000b5cc:	2080a90e 	bge	r4,r2,1000b874 <__subdf3+0x504>
1000b5d0:	298cb03a 	or	r6,r5,r6
1000b5d4:	3012c03a 	cmpne	r9,r6,zero
1000b5d8:	0005883a 	mov	r2,zero
1000b5dc:	4c53883a 	add	r9,r9,r17
1000b5e0:	4c63803a 	cmpltu	r17,r9,r17
1000b5e4:	10c7883a 	add	r3,r2,r3
1000b5e8:	88c7883a 	add	r3,r17,r3
1000b5ec:	4823883a 	mov	r17,r9
1000b5f0:	1880202c 	andhi	r2,r3,128
1000b5f4:	1000d026 	beq	r2,zero,1000b938 <__subdf3+0x5c8>
1000b5f8:	84000044 	addi	r16,r16,1
1000b5fc:	0081ffc4 	movi	r2,2047
1000b600:	8080fe26 	beq	r16,r2,1000b9fc <__subdf3+0x68c>
1000b604:	00bfe034 	movhi	r2,65408
1000b608:	10bfffc4 	addi	r2,r2,-1
1000b60c:	1886703a 	and	r3,r3,r2
1000b610:	880ad07a 	srli	r5,r17,1
1000b614:	180497fa 	slli	r2,r3,31
1000b618:	8900004c 	andi	r4,r17,1
1000b61c:	2922b03a 	or	r17,r5,r4
1000b620:	1806d07a 	srli	r3,r3,1
1000b624:	1462b03a 	or	r17,r2,r17
1000b628:	3825883a 	mov	r18,r7
1000b62c:	003f7106 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000b630:	2984b03a 	or	r2,r5,r6
1000b634:	103f6826 	beq	r2,zero,1000b3d8 <__alt_data_end+0xf800b3d8>
1000b638:	39c03fcc 	andi	r7,r7,255
1000b63c:	003f6706 	br	1000b3dc <__alt_data_end+0xf800b3dc>
1000b640:	4086b03a 	or	r3,r8,r2
1000b644:	18015226 	beq	r3,zero,1000bb90 <__subdf3+0x820>
1000b648:	00c00434 	movhi	r3,16
1000b64c:	41400234 	orhi	r5,r8,8
1000b650:	18ffffc4 	addi	r3,r3,-1
1000b654:	28ca703a 	and	r5,r5,r3
1000b658:	003f7e06 	br	1000b454 <__alt_data_end+0xf800b454>
1000b65c:	10bfffc4 	addi	r2,r2,-1
1000b660:	1000491e 	bne	r2,zero,1000b788 <__subdf3+0x418>
1000b664:	898fc83a 	sub	r7,r17,r6
1000b668:	89e3803a 	cmpltu	r17,r17,r7
1000b66c:	1947c83a 	sub	r3,r3,r5
1000b670:	1c47c83a 	sub	r3,r3,r17
1000b674:	3823883a 	mov	r17,r7
1000b678:	003f9b06 	br	1000b4e8 <__alt_data_end+0xf800b4e8>
1000b67c:	2988b03a 	or	r4,r5,r6
1000b680:	203f5c26 	beq	r4,zero,1000b3f4 <__alt_data_end+0xf800b3f4>
1000b684:	10bfffc4 	addi	r2,r2,-1
1000b688:	1000931e 	bne	r2,zero,1000b8d8 <__subdf3+0x568>
1000b68c:	898d883a 	add	r6,r17,r6
1000b690:	3463803a 	cmpltu	r17,r6,r17
1000b694:	1947883a 	add	r3,r3,r5
1000b698:	88c7883a 	add	r3,r17,r3
1000b69c:	3023883a 	mov	r17,r6
1000b6a0:	003fd306 	br	1000b5f0 <__alt_data_end+0xf800b5f0>
1000b6a4:	1000541e 	bne	r2,zero,1000b7f8 <__subdf3+0x488>
1000b6a8:	80800044 	addi	r2,r16,1
1000b6ac:	1081ffcc 	andi	r2,r2,2047
1000b6b0:	01000044 	movi	r4,1
1000b6b4:	2080a20e 	bge	r4,r2,1000b940 <__subdf3+0x5d0>
1000b6b8:	8989c83a 	sub	r4,r17,r6
1000b6bc:	8905803a 	cmpltu	r2,r17,r4
1000b6c0:	1967c83a 	sub	r19,r3,r5
1000b6c4:	98a7c83a 	sub	r19,r19,r2
1000b6c8:	9880202c 	andhi	r2,r19,128
1000b6cc:	10006326 	beq	r2,zero,1000b85c <__subdf3+0x4ec>
1000b6d0:	3463c83a 	sub	r17,r6,r17
1000b6d4:	28c7c83a 	sub	r3,r5,r3
1000b6d8:	344d803a 	cmpltu	r6,r6,r17
1000b6dc:	19a7c83a 	sub	r19,r3,r6
1000b6e0:	3825883a 	mov	r18,r7
1000b6e4:	983f861e 	bne	r19,zero,1000b500 <__alt_data_end+0xf800b500>
1000b6e8:	8809883a 	mov	r4,r17
1000b6ec:	000bdc80 	call	1000bdc8 <__clzsi2>
1000b6f0:	10800804 	addi	r2,r2,32
1000b6f4:	113ffe04 	addi	r4,r2,-8
1000b6f8:	00c007c4 	movi	r3,31
1000b6fc:	193f850e 	bge	r3,r4,1000b514 <__alt_data_end+0xf800b514>
1000b700:	10bff604 	addi	r2,r2,-40
1000b704:	8884983a 	sll	r2,r17,r2
1000b708:	0023883a 	mov	r17,zero
1000b70c:	243f880e 	bge	r4,r16,1000b530 <__alt_data_end+0xf800b530>
1000b710:	00ffe034 	movhi	r3,65408
1000b714:	18ffffc4 	addi	r3,r3,-1
1000b718:	8121c83a 	sub	r16,r16,r4
1000b71c:	10c6703a 	and	r3,r2,r3
1000b720:	003f3406 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000b724:	9100004c 	andi	r4,r18,1
1000b728:	000b883a 	mov	r5,zero
1000b72c:	0005883a 	mov	r2,zero
1000b730:	003f4806 	br	1000b454 <__alt_data_end+0xf800b454>
1000b734:	298cb03a 	or	r6,r5,r6
1000b738:	300cc03a 	cmpne	r6,r6,zero
1000b73c:	0005883a 	mov	r2,zero
1000b740:	003f6406 	br	1000b4d4 <__alt_data_end+0xf800b4d4>
1000b744:	10009a1e 	bne	r2,zero,1000b9b0 <__subdf3+0x640>
1000b748:	82400044 	addi	r9,r16,1
1000b74c:	4881ffcc 	andi	r2,r9,2047
1000b750:	02800044 	movi	r10,1
1000b754:	5080670e 	bge	r10,r2,1000b8f4 <__subdf3+0x584>
1000b758:	0081ffc4 	movi	r2,2047
1000b75c:	4880af26 	beq	r9,r2,1000ba1c <__subdf3+0x6ac>
1000b760:	898d883a 	add	r6,r17,r6
1000b764:	1945883a 	add	r2,r3,r5
1000b768:	3447803a 	cmpltu	r3,r6,r17
1000b76c:	1887883a 	add	r3,r3,r2
1000b770:	182297fa 	slli	r17,r3,31
1000b774:	300cd07a 	srli	r6,r6,1
1000b778:	1806d07a 	srli	r3,r3,1
1000b77c:	4821883a 	mov	r16,r9
1000b780:	89a2b03a 	or	r17,r17,r6
1000b784:	003f1b06 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000b788:	0101ffc4 	movi	r4,2047
1000b78c:	813f441e 	bne	r16,r4,1000b4a0 <__alt_data_end+0xf800b4a0>
1000b790:	003f1806 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000b794:	843ff844 	addi	r16,r16,-31
1000b798:	01400804 	movi	r5,32
1000b79c:	1408d83a 	srl	r4,r2,r16
1000b7a0:	19405026 	beq	r3,r5,1000b8e4 <__subdf3+0x574>
1000b7a4:	01401004 	movi	r5,64
1000b7a8:	28c7c83a 	sub	r3,r5,r3
1000b7ac:	10c4983a 	sll	r2,r2,r3
1000b7b0:	88a2b03a 	or	r17,r17,r2
1000b7b4:	8822c03a 	cmpne	r17,r17,zero
1000b7b8:	2462b03a 	or	r17,r4,r17
1000b7bc:	0007883a 	mov	r3,zero
1000b7c0:	0021883a 	mov	r16,zero
1000b7c4:	003f6d06 	br	1000b57c <__alt_data_end+0xf800b57c>
1000b7c8:	11fff804 	addi	r7,r2,-32
1000b7cc:	01000804 	movi	r4,32
1000b7d0:	29ced83a 	srl	r7,r5,r7
1000b7d4:	11004526 	beq	r2,r4,1000b8ec <__subdf3+0x57c>
1000b7d8:	01001004 	movi	r4,64
1000b7dc:	2089c83a 	sub	r4,r4,r2
1000b7e0:	2904983a 	sll	r2,r5,r4
1000b7e4:	118cb03a 	or	r6,r2,r6
1000b7e8:	300cc03a 	cmpne	r6,r6,zero
1000b7ec:	398cb03a 	or	r6,r7,r6
1000b7f0:	0005883a 	mov	r2,zero
1000b7f4:	003f3706 	br	1000b4d4 <__alt_data_end+0xf800b4d4>
1000b7f8:	80002a26 	beq	r16,zero,1000b8a4 <__subdf3+0x534>
1000b7fc:	0101ffc4 	movi	r4,2047
1000b800:	49006626 	beq	r9,r4,1000b99c <__subdf3+0x62c>
1000b804:	0085c83a 	sub	r2,zero,r2
1000b808:	18c02034 	orhi	r3,r3,128
1000b80c:	01000e04 	movi	r4,56
1000b810:	20807e16 	blt	r4,r2,1000ba0c <__subdf3+0x69c>
1000b814:	010007c4 	movi	r4,31
1000b818:	2080e716 	blt	r4,r2,1000bbb8 <__subdf3+0x848>
1000b81c:	01000804 	movi	r4,32
1000b820:	2089c83a 	sub	r4,r4,r2
1000b824:	1914983a 	sll	r10,r3,r4
1000b828:	8890d83a 	srl	r8,r17,r2
1000b82c:	8908983a 	sll	r4,r17,r4
1000b830:	1884d83a 	srl	r2,r3,r2
1000b834:	5222b03a 	or	r17,r10,r8
1000b838:	2006c03a 	cmpne	r3,r4,zero
1000b83c:	88e2b03a 	or	r17,r17,r3
1000b840:	3463c83a 	sub	r17,r6,r17
1000b844:	2885c83a 	sub	r2,r5,r2
1000b848:	344d803a 	cmpltu	r6,r6,r17
1000b84c:	1187c83a 	sub	r3,r2,r6
1000b850:	4821883a 	mov	r16,r9
1000b854:	3825883a 	mov	r18,r7
1000b858:	003f2306 	br	1000b4e8 <__alt_data_end+0xf800b4e8>
1000b85c:	24d0b03a 	or	r8,r4,r19
1000b860:	40001b1e 	bne	r8,zero,1000b8d0 <__subdf3+0x560>
1000b864:	0005883a 	mov	r2,zero
1000b868:	0009883a 	mov	r4,zero
1000b86c:	0021883a 	mov	r16,zero
1000b870:	003f4906 	br	1000b598 <__alt_data_end+0xf800b598>
1000b874:	010007c4 	movi	r4,31
1000b878:	20803a16 	blt	r4,r2,1000b964 <__subdf3+0x5f4>
1000b87c:	01000804 	movi	r4,32
1000b880:	2089c83a 	sub	r4,r4,r2
1000b884:	2912983a 	sll	r9,r5,r4
1000b888:	3090d83a 	srl	r8,r6,r2
1000b88c:	3108983a 	sll	r4,r6,r4
1000b890:	2884d83a 	srl	r2,r5,r2
1000b894:	4a12b03a 	or	r9,r9,r8
1000b898:	2008c03a 	cmpne	r4,r4,zero
1000b89c:	4912b03a 	or	r9,r9,r4
1000b8a0:	003f4e06 	br	1000b5dc <__alt_data_end+0xf800b5dc>
1000b8a4:	1c48b03a 	or	r4,r3,r17
1000b8a8:	20003c26 	beq	r4,zero,1000b99c <__subdf3+0x62c>
1000b8ac:	0084303a 	nor	r2,zero,r2
1000b8b0:	1000381e 	bne	r2,zero,1000b994 <__subdf3+0x624>
1000b8b4:	3463c83a 	sub	r17,r6,r17
1000b8b8:	28c5c83a 	sub	r2,r5,r3
1000b8bc:	344d803a 	cmpltu	r6,r6,r17
1000b8c0:	1187c83a 	sub	r3,r2,r6
1000b8c4:	4821883a 	mov	r16,r9
1000b8c8:	3825883a 	mov	r18,r7
1000b8cc:	003f0606 	br	1000b4e8 <__alt_data_end+0xf800b4e8>
1000b8d0:	2023883a 	mov	r17,r4
1000b8d4:	003f0906 	br	1000b4fc <__alt_data_end+0xf800b4fc>
1000b8d8:	0101ffc4 	movi	r4,2047
1000b8dc:	813f3a1e 	bne	r16,r4,1000b5c8 <__alt_data_end+0xf800b5c8>
1000b8e0:	003ec406 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000b8e4:	0005883a 	mov	r2,zero
1000b8e8:	003fb106 	br	1000b7b0 <__alt_data_end+0xf800b7b0>
1000b8ec:	0005883a 	mov	r2,zero
1000b8f0:	003fbc06 	br	1000b7e4 <__alt_data_end+0xf800b7e4>
1000b8f4:	1c44b03a 	or	r2,r3,r17
1000b8f8:	80008e1e 	bne	r16,zero,1000bb34 <__subdf3+0x7c4>
1000b8fc:	1000c826 	beq	r2,zero,1000bc20 <__subdf3+0x8b0>
1000b900:	2984b03a 	or	r2,r5,r6
1000b904:	103ebb26 	beq	r2,zero,1000b3f4 <__alt_data_end+0xf800b3f4>
1000b908:	8989883a 	add	r4,r17,r6
1000b90c:	1945883a 	add	r2,r3,r5
1000b910:	2447803a 	cmpltu	r3,r4,r17
1000b914:	1887883a 	add	r3,r3,r2
1000b918:	1880202c 	andhi	r2,r3,128
1000b91c:	2023883a 	mov	r17,r4
1000b920:	103f1626 	beq	r2,zero,1000b57c <__alt_data_end+0xf800b57c>
1000b924:	00bfe034 	movhi	r2,65408
1000b928:	10bfffc4 	addi	r2,r2,-1
1000b92c:	5021883a 	mov	r16,r10
1000b930:	1886703a 	and	r3,r3,r2
1000b934:	003eaf06 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000b938:	3825883a 	mov	r18,r7
1000b93c:	003f0f06 	br	1000b57c <__alt_data_end+0xf800b57c>
1000b940:	1c44b03a 	or	r2,r3,r17
1000b944:	8000251e 	bne	r16,zero,1000b9dc <__subdf3+0x66c>
1000b948:	1000661e 	bne	r2,zero,1000bae4 <__subdf3+0x774>
1000b94c:	2990b03a 	or	r8,r5,r6
1000b950:	40009626 	beq	r8,zero,1000bbac <__subdf3+0x83c>
1000b954:	2807883a 	mov	r3,r5
1000b958:	3023883a 	mov	r17,r6
1000b95c:	3825883a 	mov	r18,r7
1000b960:	003ea406 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000b964:	127ff804 	addi	r9,r2,-32
1000b968:	01000804 	movi	r4,32
1000b96c:	2a52d83a 	srl	r9,r5,r9
1000b970:	11008c26 	beq	r2,r4,1000bba4 <__subdf3+0x834>
1000b974:	01001004 	movi	r4,64
1000b978:	2085c83a 	sub	r2,r4,r2
1000b97c:	2884983a 	sll	r2,r5,r2
1000b980:	118cb03a 	or	r6,r2,r6
1000b984:	300cc03a 	cmpne	r6,r6,zero
1000b988:	4992b03a 	or	r9,r9,r6
1000b98c:	0005883a 	mov	r2,zero
1000b990:	003f1206 	br	1000b5dc <__alt_data_end+0xf800b5dc>
1000b994:	0101ffc4 	movi	r4,2047
1000b998:	493f9c1e 	bne	r9,r4,1000b80c <__alt_data_end+0xf800b80c>
1000b99c:	2807883a 	mov	r3,r5
1000b9a0:	3023883a 	mov	r17,r6
1000b9a4:	4821883a 	mov	r16,r9
1000b9a8:	3825883a 	mov	r18,r7
1000b9ac:	003e9106 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000b9b0:	80001f1e 	bne	r16,zero,1000ba30 <__subdf3+0x6c0>
1000b9b4:	1c48b03a 	or	r4,r3,r17
1000b9b8:	20005a26 	beq	r4,zero,1000bb24 <__subdf3+0x7b4>
1000b9bc:	0084303a 	nor	r2,zero,r2
1000b9c0:	1000561e 	bne	r2,zero,1000bb1c <__subdf3+0x7ac>
1000b9c4:	89a3883a 	add	r17,r17,r6
1000b9c8:	1945883a 	add	r2,r3,r5
1000b9cc:	898d803a 	cmpltu	r6,r17,r6
1000b9d0:	3087883a 	add	r3,r6,r2
1000b9d4:	4821883a 	mov	r16,r9
1000b9d8:	003f0506 	br	1000b5f0 <__alt_data_end+0xf800b5f0>
1000b9dc:	10002b1e 	bne	r2,zero,1000ba8c <__subdf3+0x71c>
1000b9e0:	2984b03a 	or	r2,r5,r6
1000b9e4:	10008026 	beq	r2,zero,1000bbe8 <__subdf3+0x878>
1000b9e8:	2807883a 	mov	r3,r5
1000b9ec:	3023883a 	mov	r17,r6
1000b9f0:	3825883a 	mov	r18,r7
1000b9f4:	0401ffc4 	movi	r16,2047
1000b9f8:	003e7e06 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000b9fc:	3809883a 	mov	r4,r7
1000ba00:	0011883a 	mov	r8,zero
1000ba04:	0005883a 	mov	r2,zero
1000ba08:	003ee306 	br	1000b598 <__alt_data_end+0xf800b598>
1000ba0c:	1c62b03a 	or	r17,r3,r17
1000ba10:	8822c03a 	cmpne	r17,r17,zero
1000ba14:	0005883a 	mov	r2,zero
1000ba18:	003f8906 	br	1000b840 <__alt_data_end+0xf800b840>
1000ba1c:	3809883a 	mov	r4,r7
1000ba20:	4821883a 	mov	r16,r9
1000ba24:	0011883a 	mov	r8,zero
1000ba28:	0005883a 	mov	r2,zero
1000ba2c:	003eda06 	br	1000b598 <__alt_data_end+0xf800b598>
1000ba30:	0101ffc4 	movi	r4,2047
1000ba34:	49003b26 	beq	r9,r4,1000bb24 <__subdf3+0x7b4>
1000ba38:	0085c83a 	sub	r2,zero,r2
1000ba3c:	18c02034 	orhi	r3,r3,128
1000ba40:	01000e04 	movi	r4,56
1000ba44:	20806e16 	blt	r4,r2,1000bc00 <__subdf3+0x890>
1000ba48:	010007c4 	movi	r4,31
1000ba4c:	20807716 	blt	r4,r2,1000bc2c <__subdf3+0x8bc>
1000ba50:	01000804 	movi	r4,32
1000ba54:	2089c83a 	sub	r4,r4,r2
1000ba58:	1914983a 	sll	r10,r3,r4
1000ba5c:	8890d83a 	srl	r8,r17,r2
1000ba60:	8908983a 	sll	r4,r17,r4
1000ba64:	1884d83a 	srl	r2,r3,r2
1000ba68:	5222b03a 	or	r17,r10,r8
1000ba6c:	2006c03a 	cmpne	r3,r4,zero
1000ba70:	88e2b03a 	or	r17,r17,r3
1000ba74:	89a3883a 	add	r17,r17,r6
1000ba78:	1145883a 	add	r2,r2,r5
1000ba7c:	898d803a 	cmpltu	r6,r17,r6
1000ba80:	3087883a 	add	r3,r6,r2
1000ba84:	4821883a 	mov	r16,r9
1000ba88:	003ed906 	br	1000b5f0 <__alt_data_end+0xf800b5f0>
1000ba8c:	2984b03a 	or	r2,r5,r6
1000ba90:	10004226 	beq	r2,zero,1000bb9c <__subdf3+0x82c>
1000ba94:	1808d0fa 	srli	r4,r3,3
1000ba98:	8822d0fa 	srli	r17,r17,3
1000ba9c:	1806977a 	slli	r3,r3,29
1000baa0:	2080022c 	andhi	r2,r4,8
1000baa4:	1c62b03a 	or	r17,r3,r17
1000baa8:	10000826 	beq	r2,zero,1000bacc <__subdf3+0x75c>
1000baac:	2812d0fa 	srli	r9,r5,3
1000bab0:	4880022c 	andhi	r2,r9,8
1000bab4:	1000051e 	bne	r2,zero,1000bacc <__subdf3+0x75c>
1000bab8:	300cd0fa 	srli	r6,r6,3
1000babc:	2804977a 	slli	r2,r5,29
1000bac0:	4809883a 	mov	r4,r9
1000bac4:	3825883a 	mov	r18,r7
1000bac8:	11a2b03a 	or	r17,r2,r6
1000bacc:	8806d77a 	srli	r3,r17,29
1000bad0:	200890fa 	slli	r4,r4,3
1000bad4:	882290fa 	slli	r17,r17,3
1000bad8:	0401ffc4 	movi	r16,2047
1000badc:	1906b03a 	or	r3,r3,r4
1000bae0:	003e4406 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000bae4:	2984b03a 	or	r2,r5,r6
1000bae8:	103e4226 	beq	r2,zero,1000b3f4 <__alt_data_end+0xf800b3f4>
1000baec:	8989c83a 	sub	r4,r17,r6
1000baf0:	8911803a 	cmpltu	r8,r17,r4
1000baf4:	1945c83a 	sub	r2,r3,r5
1000baf8:	1205c83a 	sub	r2,r2,r8
1000bafc:	1200202c 	andhi	r8,r2,128
1000bb00:	403e9a26 	beq	r8,zero,1000b56c <__alt_data_end+0xf800b56c>
1000bb04:	3463c83a 	sub	r17,r6,r17
1000bb08:	28c5c83a 	sub	r2,r5,r3
1000bb0c:	344d803a 	cmpltu	r6,r6,r17
1000bb10:	1187c83a 	sub	r3,r2,r6
1000bb14:	3825883a 	mov	r18,r7
1000bb18:	003e3606 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000bb1c:	0101ffc4 	movi	r4,2047
1000bb20:	493fc71e 	bne	r9,r4,1000ba40 <__alt_data_end+0xf800ba40>
1000bb24:	2807883a 	mov	r3,r5
1000bb28:	3023883a 	mov	r17,r6
1000bb2c:	4821883a 	mov	r16,r9
1000bb30:	003e3006 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000bb34:	10003626 	beq	r2,zero,1000bc10 <__subdf3+0x8a0>
1000bb38:	2984b03a 	or	r2,r5,r6
1000bb3c:	10001726 	beq	r2,zero,1000bb9c <__subdf3+0x82c>
1000bb40:	1808d0fa 	srli	r4,r3,3
1000bb44:	8822d0fa 	srli	r17,r17,3
1000bb48:	1806977a 	slli	r3,r3,29
1000bb4c:	2080022c 	andhi	r2,r4,8
1000bb50:	1c62b03a 	or	r17,r3,r17
1000bb54:	10000726 	beq	r2,zero,1000bb74 <__subdf3+0x804>
1000bb58:	2812d0fa 	srli	r9,r5,3
1000bb5c:	4880022c 	andhi	r2,r9,8
1000bb60:	1000041e 	bne	r2,zero,1000bb74 <__subdf3+0x804>
1000bb64:	300cd0fa 	srli	r6,r6,3
1000bb68:	2804977a 	slli	r2,r5,29
1000bb6c:	4809883a 	mov	r4,r9
1000bb70:	11a2b03a 	or	r17,r2,r6
1000bb74:	8806d77a 	srli	r3,r17,29
1000bb78:	200890fa 	slli	r4,r4,3
1000bb7c:	882290fa 	slli	r17,r17,3
1000bb80:	3825883a 	mov	r18,r7
1000bb84:	1906b03a 	or	r3,r3,r4
1000bb88:	0401ffc4 	movi	r16,2047
1000bb8c:	003e1906 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000bb90:	000b883a 	mov	r5,zero
1000bb94:	0005883a 	mov	r2,zero
1000bb98:	003e2e06 	br	1000b454 <__alt_data_end+0xf800b454>
1000bb9c:	0401ffc4 	movi	r16,2047
1000bba0:	003e1406 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000bba4:	0005883a 	mov	r2,zero
1000bba8:	003f7506 	br	1000b980 <__alt_data_end+0xf800b980>
1000bbac:	0005883a 	mov	r2,zero
1000bbb0:	0009883a 	mov	r4,zero
1000bbb4:	003e7806 	br	1000b598 <__alt_data_end+0xf800b598>
1000bbb8:	123ff804 	addi	r8,r2,-32
1000bbbc:	01000804 	movi	r4,32
1000bbc0:	1a10d83a 	srl	r8,r3,r8
1000bbc4:	11002526 	beq	r2,r4,1000bc5c <__subdf3+0x8ec>
1000bbc8:	01001004 	movi	r4,64
1000bbcc:	2085c83a 	sub	r2,r4,r2
1000bbd0:	1884983a 	sll	r2,r3,r2
1000bbd4:	1444b03a 	or	r2,r2,r17
1000bbd8:	1004c03a 	cmpne	r2,r2,zero
1000bbdc:	40a2b03a 	or	r17,r8,r2
1000bbe0:	0005883a 	mov	r2,zero
1000bbe4:	003f1606 	br	1000b840 <__alt_data_end+0xf800b840>
1000bbe8:	02000434 	movhi	r8,16
1000bbec:	0009883a 	mov	r4,zero
1000bbf0:	423fffc4 	addi	r8,r8,-1
1000bbf4:	00bfffc4 	movi	r2,-1
1000bbf8:	0401ffc4 	movi	r16,2047
1000bbfc:	003e6606 	br	1000b598 <__alt_data_end+0xf800b598>
1000bc00:	1c62b03a 	or	r17,r3,r17
1000bc04:	8822c03a 	cmpne	r17,r17,zero
1000bc08:	0005883a 	mov	r2,zero
1000bc0c:	003f9906 	br	1000ba74 <__alt_data_end+0xf800ba74>
1000bc10:	2807883a 	mov	r3,r5
1000bc14:	3023883a 	mov	r17,r6
1000bc18:	0401ffc4 	movi	r16,2047
1000bc1c:	003df506 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000bc20:	2807883a 	mov	r3,r5
1000bc24:	3023883a 	mov	r17,r6
1000bc28:	003df206 	br	1000b3f4 <__alt_data_end+0xf800b3f4>
1000bc2c:	123ff804 	addi	r8,r2,-32
1000bc30:	01000804 	movi	r4,32
1000bc34:	1a10d83a 	srl	r8,r3,r8
1000bc38:	11000a26 	beq	r2,r4,1000bc64 <__subdf3+0x8f4>
1000bc3c:	01001004 	movi	r4,64
1000bc40:	2085c83a 	sub	r2,r4,r2
1000bc44:	1884983a 	sll	r2,r3,r2
1000bc48:	1444b03a 	or	r2,r2,r17
1000bc4c:	1004c03a 	cmpne	r2,r2,zero
1000bc50:	40a2b03a 	or	r17,r8,r2
1000bc54:	0005883a 	mov	r2,zero
1000bc58:	003f8606 	br	1000ba74 <__alt_data_end+0xf800ba74>
1000bc5c:	0005883a 	mov	r2,zero
1000bc60:	003fdc06 	br	1000bbd4 <__alt_data_end+0xf800bbd4>
1000bc64:	0005883a 	mov	r2,zero
1000bc68:	003ff706 	br	1000bc48 <__alt_data_end+0xf800bc48>

1000bc6c <__fixdfsi>:
1000bc6c:	280cd53a 	srli	r6,r5,20
1000bc70:	00c00434 	movhi	r3,16
1000bc74:	18ffffc4 	addi	r3,r3,-1
1000bc78:	3181ffcc 	andi	r6,r6,2047
1000bc7c:	01c0ff84 	movi	r7,1022
1000bc80:	28c6703a 	and	r3,r5,r3
1000bc84:	280ad7fa 	srli	r5,r5,31
1000bc88:	3980120e 	bge	r7,r6,1000bcd4 <__fixdfsi+0x68>
1000bc8c:	00810744 	movi	r2,1053
1000bc90:	11800c16 	blt	r2,r6,1000bcc4 <__fixdfsi+0x58>
1000bc94:	00810cc4 	movi	r2,1075
1000bc98:	1185c83a 	sub	r2,r2,r6
1000bc9c:	01c007c4 	movi	r7,31
1000bca0:	18c00434 	orhi	r3,r3,16
1000bca4:	38800d16 	blt	r7,r2,1000bcdc <__fixdfsi+0x70>
1000bca8:	31befb44 	addi	r6,r6,-1043
1000bcac:	2084d83a 	srl	r2,r4,r2
1000bcb0:	1986983a 	sll	r3,r3,r6
1000bcb4:	1884b03a 	or	r2,r3,r2
1000bcb8:	28000726 	beq	r5,zero,1000bcd8 <__fixdfsi+0x6c>
1000bcbc:	0085c83a 	sub	r2,zero,r2
1000bcc0:	f800283a 	ret
1000bcc4:	00a00034 	movhi	r2,32768
1000bcc8:	10bfffc4 	addi	r2,r2,-1
1000bccc:	2885883a 	add	r2,r5,r2
1000bcd0:	f800283a 	ret
1000bcd4:	0005883a 	mov	r2,zero
1000bcd8:	f800283a 	ret
1000bcdc:	008104c4 	movi	r2,1043
1000bce0:	1185c83a 	sub	r2,r2,r6
1000bce4:	1884d83a 	srl	r2,r3,r2
1000bce8:	003ff306 	br	1000bcb8 <__alt_data_end+0xf800bcb8>

1000bcec <__floatsidf>:
1000bcec:	defffd04 	addi	sp,sp,-12
1000bcf0:	dfc00215 	stw	ra,8(sp)
1000bcf4:	dc400115 	stw	r17,4(sp)
1000bcf8:	dc000015 	stw	r16,0(sp)
1000bcfc:	20002b26 	beq	r4,zero,1000bdac <__floatsidf+0xc0>
1000bd00:	2023883a 	mov	r17,r4
1000bd04:	2020d7fa 	srli	r16,r4,31
1000bd08:	20002d16 	blt	r4,zero,1000bdc0 <__floatsidf+0xd4>
1000bd0c:	8809883a 	mov	r4,r17
1000bd10:	000bdc80 	call	1000bdc8 <__clzsi2>
1000bd14:	01410784 	movi	r5,1054
1000bd18:	288bc83a 	sub	r5,r5,r2
1000bd1c:	01010cc4 	movi	r4,1075
1000bd20:	2149c83a 	sub	r4,r4,r5
1000bd24:	00c007c4 	movi	r3,31
1000bd28:	1900160e 	bge	r3,r4,1000bd84 <__floatsidf+0x98>
1000bd2c:	00c104c4 	movi	r3,1043
1000bd30:	1947c83a 	sub	r3,r3,r5
1000bd34:	88c6983a 	sll	r3,r17,r3
1000bd38:	00800434 	movhi	r2,16
1000bd3c:	10bfffc4 	addi	r2,r2,-1
1000bd40:	1886703a 	and	r3,r3,r2
1000bd44:	2941ffcc 	andi	r5,r5,2047
1000bd48:	800d883a 	mov	r6,r16
1000bd4c:	0005883a 	mov	r2,zero
1000bd50:	280a953a 	slli	r5,r5,20
1000bd54:	31803fcc 	andi	r6,r6,255
1000bd58:	01000434 	movhi	r4,16
1000bd5c:	300c97fa 	slli	r6,r6,31
1000bd60:	213fffc4 	addi	r4,r4,-1
1000bd64:	1906703a 	and	r3,r3,r4
1000bd68:	1946b03a 	or	r3,r3,r5
1000bd6c:	1986b03a 	or	r3,r3,r6
1000bd70:	dfc00217 	ldw	ra,8(sp)
1000bd74:	dc400117 	ldw	r17,4(sp)
1000bd78:	dc000017 	ldw	r16,0(sp)
1000bd7c:	dec00304 	addi	sp,sp,12
1000bd80:	f800283a 	ret
1000bd84:	00c002c4 	movi	r3,11
1000bd88:	1887c83a 	sub	r3,r3,r2
1000bd8c:	88c6d83a 	srl	r3,r17,r3
1000bd90:	8904983a 	sll	r2,r17,r4
1000bd94:	01000434 	movhi	r4,16
1000bd98:	213fffc4 	addi	r4,r4,-1
1000bd9c:	2941ffcc 	andi	r5,r5,2047
1000bda0:	1906703a 	and	r3,r3,r4
1000bda4:	800d883a 	mov	r6,r16
1000bda8:	003fe906 	br	1000bd50 <__alt_data_end+0xf800bd50>
1000bdac:	000d883a 	mov	r6,zero
1000bdb0:	000b883a 	mov	r5,zero
1000bdb4:	0007883a 	mov	r3,zero
1000bdb8:	0005883a 	mov	r2,zero
1000bdbc:	003fe406 	br	1000bd50 <__alt_data_end+0xf800bd50>
1000bdc0:	0123c83a 	sub	r17,zero,r4
1000bdc4:	003fd106 	br	1000bd0c <__alt_data_end+0xf800bd0c>

1000bdc8 <__clzsi2>:
1000bdc8:	00bfffd4 	movui	r2,65535
1000bdcc:	11000536 	bltu	r2,r4,1000bde4 <__clzsi2+0x1c>
1000bdd0:	00803fc4 	movi	r2,255
1000bdd4:	11000f36 	bltu	r2,r4,1000be14 <__clzsi2+0x4c>
1000bdd8:	00800804 	movi	r2,32
1000bddc:	0007883a 	mov	r3,zero
1000bde0:	00000506 	br	1000bdf8 <__clzsi2+0x30>
1000bde4:	00804034 	movhi	r2,256
1000bde8:	10bfffc4 	addi	r2,r2,-1
1000bdec:	11000c2e 	bgeu	r2,r4,1000be20 <__clzsi2+0x58>
1000bdf0:	00800204 	movi	r2,8
1000bdf4:	00c00604 	movi	r3,24
1000bdf8:	20c8d83a 	srl	r4,r4,r3
1000bdfc:	00c400b4 	movhi	r3,4098
1000be00:	18e43604 	addi	r3,r3,-28456
1000be04:	1909883a 	add	r4,r3,r4
1000be08:	20c00003 	ldbu	r3,0(r4)
1000be0c:	10c5c83a 	sub	r2,r2,r3
1000be10:	f800283a 	ret
1000be14:	00800604 	movi	r2,24
1000be18:	00c00204 	movi	r3,8
1000be1c:	003ff606 	br	1000bdf8 <__alt_data_end+0xf800bdf8>
1000be20:	00800404 	movi	r2,16
1000be24:	1007883a 	mov	r3,r2
1000be28:	003ff306 	br	1000bdf8 <__alt_data_end+0xf800bdf8>

1000be2c <memcpy>:
1000be2c:	defffd04 	addi	sp,sp,-12
1000be30:	dfc00215 	stw	ra,8(sp)
1000be34:	dc400115 	stw	r17,4(sp)
1000be38:	dc000015 	stw	r16,0(sp)
1000be3c:	00c003c4 	movi	r3,15
1000be40:	2005883a 	mov	r2,r4
1000be44:	1980452e 	bgeu	r3,r6,1000bf5c <memcpy+0x130>
1000be48:	2906b03a 	or	r3,r5,r4
1000be4c:	18c000cc 	andi	r3,r3,3
1000be50:	1800441e 	bne	r3,zero,1000bf64 <memcpy+0x138>
1000be54:	347ffc04 	addi	r17,r6,-16
1000be58:	8822d13a 	srli	r17,r17,4
1000be5c:	28c00104 	addi	r3,r5,4
1000be60:	23400104 	addi	r13,r4,4
1000be64:	8820913a 	slli	r16,r17,4
1000be68:	2b000204 	addi	r12,r5,8
1000be6c:	22c00204 	addi	r11,r4,8
1000be70:	84000504 	addi	r16,r16,20
1000be74:	2a800304 	addi	r10,r5,12
1000be78:	22400304 	addi	r9,r4,12
1000be7c:	2c21883a 	add	r16,r5,r16
1000be80:	2811883a 	mov	r8,r5
1000be84:	200f883a 	mov	r7,r4
1000be88:	41000017 	ldw	r4,0(r8)
1000be8c:	1fc00017 	ldw	ra,0(r3)
1000be90:	63c00017 	ldw	r15,0(r12)
1000be94:	39000015 	stw	r4,0(r7)
1000be98:	53800017 	ldw	r14,0(r10)
1000be9c:	6fc00015 	stw	ra,0(r13)
1000bea0:	5bc00015 	stw	r15,0(r11)
1000bea4:	4b800015 	stw	r14,0(r9)
1000bea8:	18c00404 	addi	r3,r3,16
1000beac:	39c00404 	addi	r7,r7,16
1000beb0:	42000404 	addi	r8,r8,16
1000beb4:	6b400404 	addi	r13,r13,16
1000beb8:	63000404 	addi	r12,r12,16
1000bebc:	5ac00404 	addi	r11,r11,16
1000bec0:	52800404 	addi	r10,r10,16
1000bec4:	4a400404 	addi	r9,r9,16
1000bec8:	1c3fef1e 	bne	r3,r16,1000be88 <__alt_data_end+0xf800be88>
1000becc:	89c00044 	addi	r7,r17,1
1000bed0:	380e913a 	slli	r7,r7,4
1000bed4:	310003cc 	andi	r4,r6,15
1000bed8:	02c000c4 	movi	r11,3
1000bedc:	11c7883a 	add	r3,r2,r7
1000bee0:	29cb883a 	add	r5,r5,r7
1000bee4:	5900212e 	bgeu	r11,r4,1000bf6c <memcpy+0x140>
1000bee8:	1813883a 	mov	r9,r3
1000beec:	2811883a 	mov	r8,r5
1000bef0:	200f883a 	mov	r7,r4
1000bef4:	42800017 	ldw	r10,0(r8)
1000bef8:	4a400104 	addi	r9,r9,4
1000befc:	39ffff04 	addi	r7,r7,-4
1000bf00:	4abfff15 	stw	r10,-4(r9)
1000bf04:	42000104 	addi	r8,r8,4
1000bf08:	59fffa36 	bltu	r11,r7,1000bef4 <__alt_data_end+0xf800bef4>
1000bf0c:	213fff04 	addi	r4,r4,-4
1000bf10:	2008d0ba 	srli	r4,r4,2
1000bf14:	318000cc 	andi	r6,r6,3
1000bf18:	21000044 	addi	r4,r4,1
1000bf1c:	2109883a 	add	r4,r4,r4
1000bf20:	2109883a 	add	r4,r4,r4
1000bf24:	1907883a 	add	r3,r3,r4
1000bf28:	290b883a 	add	r5,r5,r4
1000bf2c:	30000626 	beq	r6,zero,1000bf48 <memcpy+0x11c>
1000bf30:	198d883a 	add	r6,r3,r6
1000bf34:	29c00003 	ldbu	r7,0(r5)
1000bf38:	18c00044 	addi	r3,r3,1
1000bf3c:	29400044 	addi	r5,r5,1
1000bf40:	19ffffc5 	stb	r7,-1(r3)
1000bf44:	19bffb1e 	bne	r3,r6,1000bf34 <__alt_data_end+0xf800bf34>
1000bf48:	dfc00217 	ldw	ra,8(sp)
1000bf4c:	dc400117 	ldw	r17,4(sp)
1000bf50:	dc000017 	ldw	r16,0(sp)
1000bf54:	dec00304 	addi	sp,sp,12
1000bf58:	f800283a 	ret
1000bf5c:	2007883a 	mov	r3,r4
1000bf60:	003ff206 	br	1000bf2c <__alt_data_end+0xf800bf2c>
1000bf64:	2007883a 	mov	r3,r4
1000bf68:	003ff106 	br	1000bf30 <__alt_data_end+0xf800bf30>
1000bf6c:	200d883a 	mov	r6,r4
1000bf70:	003fee06 	br	1000bf2c <__alt_data_end+0xf800bf2c>

1000bf74 <_printf_r>:
1000bf74:	defffd04 	addi	sp,sp,-12
1000bf78:	2805883a 	mov	r2,r5
1000bf7c:	dfc00015 	stw	ra,0(sp)
1000bf80:	d9800115 	stw	r6,4(sp)
1000bf84:	d9c00215 	stw	r7,8(sp)
1000bf88:	21400217 	ldw	r5,8(r4)
1000bf8c:	d9c00104 	addi	r7,sp,4
1000bf90:	100d883a 	mov	r6,r2
1000bf94:	000c14c0 	call	1000c14c <___vfprintf_internal_r>
1000bf98:	dfc00017 	ldw	ra,0(sp)
1000bf9c:	dec00304 	addi	sp,sp,12
1000bfa0:	f800283a 	ret

1000bfa4 <printf>:
1000bfa4:	defffc04 	addi	sp,sp,-16
1000bfa8:	dfc00015 	stw	ra,0(sp)
1000bfac:	d9400115 	stw	r5,4(sp)
1000bfb0:	d9800215 	stw	r6,8(sp)
1000bfb4:	d9c00315 	stw	r7,12(sp)
1000bfb8:	008400b4 	movhi	r2,4098
1000bfbc:	10acbd04 	addi	r2,r2,-19724
1000bfc0:	10800017 	ldw	r2,0(r2)
1000bfc4:	200b883a 	mov	r5,r4
1000bfc8:	d9800104 	addi	r6,sp,4
1000bfcc:	11000217 	ldw	r4,8(r2)
1000bfd0:	000e4280 	call	1000e428 <__vfprintf_internal>
1000bfd4:	dfc00017 	ldw	ra,0(sp)
1000bfd8:	dec00404 	addi	sp,sp,16
1000bfdc:	f800283a 	ret

1000bfe0 <_puts_r>:
1000bfe0:	defff604 	addi	sp,sp,-40
1000bfe4:	dc000715 	stw	r16,28(sp)
1000bfe8:	2021883a 	mov	r16,r4
1000bfec:	2809883a 	mov	r4,r5
1000bff0:	dc400815 	stw	r17,32(sp)
1000bff4:	dfc00915 	stw	ra,36(sp)
1000bff8:	2823883a 	mov	r17,r5
1000bffc:	000c0b40 	call	1000c0b4 <strlen>
1000c000:	10c00044 	addi	r3,r2,1
1000c004:	d8800115 	stw	r2,4(sp)
1000c008:	008400b4 	movhi	r2,4098
1000c00c:	10a47604 	addi	r2,r2,-28200
1000c010:	d8800215 	stw	r2,8(sp)
1000c014:	00800044 	movi	r2,1
1000c018:	d8800315 	stw	r2,12(sp)
1000c01c:	00800084 	movi	r2,2
1000c020:	dc400015 	stw	r17,0(sp)
1000c024:	d8c00615 	stw	r3,24(sp)
1000c028:	dec00415 	stw	sp,16(sp)
1000c02c:	d8800515 	stw	r2,20(sp)
1000c030:	80000226 	beq	r16,zero,1000c03c <_puts_r+0x5c>
1000c034:	80800e17 	ldw	r2,56(r16)
1000c038:	10001426 	beq	r2,zero,1000c08c <_puts_r+0xac>
1000c03c:	81400217 	ldw	r5,8(r16)
1000c040:	2880030b 	ldhu	r2,12(r5)
1000c044:	10c8000c 	andi	r3,r2,8192
1000c048:	1800061e 	bne	r3,zero,1000c064 <_puts_r+0x84>
1000c04c:	29001917 	ldw	r4,100(r5)
1000c050:	00f7ffc4 	movi	r3,-8193
1000c054:	10880014 	ori	r2,r2,8192
1000c058:	20c6703a 	and	r3,r4,r3
1000c05c:	2880030d 	sth	r2,12(r5)
1000c060:	28c01915 	stw	r3,100(r5)
1000c064:	d9800404 	addi	r6,sp,16
1000c068:	8009883a 	mov	r4,r16
1000c06c:	00109900 	call	10010990 <__sfvwrite_r>
1000c070:	1000091e 	bne	r2,zero,1000c098 <_puts_r+0xb8>
1000c074:	00800284 	movi	r2,10
1000c078:	dfc00917 	ldw	ra,36(sp)
1000c07c:	dc400817 	ldw	r17,32(sp)
1000c080:	dc000717 	ldw	r16,28(sp)
1000c084:	dec00a04 	addi	sp,sp,40
1000c088:	f800283a 	ret
1000c08c:	8009883a 	mov	r4,r16
1000c090:	001050c0 	call	1001050c <__sinit>
1000c094:	003fe906 	br	1000c03c <__alt_data_end+0xf800c03c>
1000c098:	00bfffc4 	movi	r2,-1
1000c09c:	003ff606 	br	1000c078 <__alt_data_end+0xf800c078>

1000c0a0 <puts>:
1000c0a0:	008400b4 	movhi	r2,4098
1000c0a4:	10acbd04 	addi	r2,r2,-19724
1000c0a8:	200b883a 	mov	r5,r4
1000c0ac:	11000017 	ldw	r4,0(r2)
1000c0b0:	000bfe01 	jmpi	1000bfe0 <_puts_r>

1000c0b4 <strlen>:
1000c0b4:	208000cc 	andi	r2,r4,3
1000c0b8:	10002026 	beq	r2,zero,1000c13c <strlen+0x88>
1000c0bc:	20800007 	ldb	r2,0(r4)
1000c0c0:	10002026 	beq	r2,zero,1000c144 <strlen+0x90>
1000c0c4:	2005883a 	mov	r2,r4
1000c0c8:	00000206 	br	1000c0d4 <strlen+0x20>
1000c0cc:	10c00007 	ldb	r3,0(r2)
1000c0d0:	18001826 	beq	r3,zero,1000c134 <strlen+0x80>
1000c0d4:	10800044 	addi	r2,r2,1
1000c0d8:	10c000cc 	andi	r3,r2,3
1000c0dc:	183ffb1e 	bne	r3,zero,1000c0cc <__alt_data_end+0xf800c0cc>
1000c0e0:	10c00017 	ldw	r3,0(r2)
1000c0e4:	01ffbff4 	movhi	r7,65279
1000c0e8:	39ffbfc4 	addi	r7,r7,-257
1000c0ec:	00ca303a 	nor	r5,zero,r3
1000c0f0:	01a02074 	movhi	r6,32897
1000c0f4:	19c7883a 	add	r3,r3,r7
1000c0f8:	31a02004 	addi	r6,r6,-32640
1000c0fc:	1946703a 	and	r3,r3,r5
1000c100:	1986703a 	and	r3,r3,r6
1000c104:	1800091e 	bne	r3,zero,1000c12c <strlen+0x78>
1000c108:	10800104 	addi	r2,r2,4
1000c10c:	10c00017 	ldw	r3,0(r2)
1000c110:	19cb883a 	add	r5,r3,r7
1000c114:	00c6303a 	nor	r3,zero,r3
1000c118:	28c6703a 	and	r3,r5,r3
1000c11c:	1986703a 	and	r3,r3,r6
1000c120:	183ff926 	beq	r3,zero,1000c108 <__alt_data_end+0xf800c108>
1000c124:	00000106 	br	1000c12c <strlen+0x78>
1000c128:	10800044 	addi	r2,r2,1
1000c12c:	10c00007 	ldb	r3,0(r2)
1000c130:	183ffd1e 	bne	r3,zero,1000c128 <__alt_data_end+0xf800c128>
1000c134:	1105c83a 	sub	r2,r2,r4
1000c138:	f800283a 	ret
1000c13c:	2005883a 	mov	r2,r4
1000c140:	003fe706 	br	1000c0e0 <__alt_data_end+0xf800c0e0>
1000c144:	0005883a 	mov	r2,zero
1000c148:	f800283a 	ret

1000c14c <___vfprintf_internal_r>:
1000c14c:	deffb804 	addi	sp,sp,-288
1000c150:	dfc04715 	stw	ra,284(sp)
1000c154:	ddc04515 	stw	r23,276(sp)
1000c158:	dd404315 	stw	r21,268(sp)
1000c15c:	d9002d15 	stw	r4,180(sp)
1000c160:	282f883a 	mov	r23,r5
1000c164:	302b883a 	mov	r21,r6
1000c168:	d9c02e15 	stw	r7,184(sp)
1000c16c:	df004615 	stw	fp,280(sp)
1000c170:	dd804415 	stw	r22,272(sp)
1000c174:	dd004215 	stw	r20,264(sp)
1000c178:	dcc04115 	stw	r19,260(sp)
1000c17c:	dc804015 	stw	r18,256(sp)
1000c180:	dc403f15 	stw	r17,252(sp)
1000c184:	dc003e15 	stw	r16,248(sp)
1000c188:	001108c0 	call	1001108c <_localeconv_r>
1000c18c:	10800017 	ldw	r2,0(r2)
1000c190:	1009883a 	mov	r4,r2
1000c194:	d8803415 	stw	r2,208(sp)
1000c198:	000c0b40 	call	1000c0b4 <strlen>
1000c19c:	d8803715 	stw	r2,220(sp)
1000c1a0:	d8802d17 	ldw	r2,180(sp)
1000c1a4:	10000226 	beq	r2,zero,1000c1b0 <___vfprintf_internal_r+0x64>
1000c1a8:	10800e17 	ldw	r2,56(r2)
1000c1ac:	1000fb26 	beq	r2,zero,1000c59c <___vfprintf_internal_r+0x450>
1000c1b0:	b880030b 	ldhu	r2,12(r23)
1000c1b4:	10c8000c 	andi	r3,r2,8192
1000c1b8:	1800061e 	bne	r3,zero,1000c1d4 <___vfprintf_internal_r+0x88>
1000c1bc:	b9001917 	ldw	r4,100(r23)
1000c1c0:	00f7ffc4 	movi	r3,-8193
1000c1c4:	10880014 	ori	r2,r2,8192
1000c1c8:	20c6703a 	and	r3,r4,r3
1000c1cc:	b880030d 	sth	r2,12(r23)
1000c1d0:	b8c01915 	stw	r3,100(r23)
1000c1d4:	10c0020c 	andi	r3,r2,8
1000c1d8:	1800c326 	beq	r3,zero,1000c4e8 <___vfprintf_internal_r+0x39c>
1000c1dc:	b8c00417 	ldw	r3,16(r23)
1000c1e0:	1800c126 	beq	r3,zero,1000c4e8 <___vfprintf_internal_r+0x39c>
1000c1e4:	1080068c 	andi	r2,r2,26
1000c1e8:	00c00284 	movi	r3,10
1000c1ec:	10c0c626 	beq	r2,r3,1000c508 <___vfprintf_internal_r+0x3bc>
1000c1f0:	d8c00404 	addi	r3,sp,16
1000c1f4:	050400b4 	movhi	r20,4098
1000c1f8:	d9001e04 	addi	r4,sp,120
1000c1fc:	a5248784 	addi	r20,r20,-28130
1000c200:	d8c01e15 	stw	r3,120(sp)
1000c204:	d8002015 	stw	zero,128(sp)
1000c208:	d8001f15 	stw	zero,124(sp)
1000c20c:	d8003315 	stw	zero,204(sp)
1000c210:	d8003615 	stw	zero,216(sp)
1000c214:	d8003815 	stw	zero,224(sp)
1000c218:	1811883a 	mov	r8,r3
1000c21c:	d8003915 	stw	zero,228(sp)
1000c220:	d8003a15 	stw	zero,232(sp)
1000c224:	d8002f15 	stw	zero,188(sp)
1000c228:	d9002815 	stw	r4,160(sp)
1000c22c:	a8800007 	ldb	r2,0(r21)
1000c230:	10028b26 	beq	r2,zero,1000cc60 <___vfprintf_internal_r+0xb14>
1000c234:	00c00944 	movi	r3,37
1000c238:	a823883a 	mov	r17,r21
1000c23c:	10c0021e 	bne	r2,r3,1000c248 <___vfprintf_internal_r+0xfc>
1000c240:	00001406 	br	1000c294 <___vfprintf_internal_r+0x148>
1000c244:	10c00326 	beq	r2,r3,1000c254 <___vfprintf_internal_r+0x108>
1000c248:	8c400044 	addi	r17,r17,1
1000c24c:	88800007 	ldb	r2,0(r17)
1000c250:	103ffc1e 	bne	r2,zero,1000c244 <__alt_data_end+0xf800c244>
1000c254:	8d61c83a 	sub	r16,r17,r21
1000c258:	80000e26 	beq	r16,zero,1000c294 <___vfprintf_internal_r+0x148>
1000c25c:	d8c02017 	ldw	r3,128(sp)
1000c260:	d8801f17 	ldw	r2,124(sp)
1000c264:	45400015 	stw	r21,0(r8)
1000c268:	1c07883a 	add	r3,r3,r16
1000c26c:	10800044 	addi	r2,r2,1
1000c270:	d8c02015 	stw	r3,128(sp)
1000c274:	44000115 	stw	r16,4(r8)
1000c278:	d8801f15 	stw	r2,124(sp)
1000c27c:	00c001c4 	movi	r3,7
1000c280:	1880a916 	blt	r3,r2,1000c528 <___vfprintf_internal_r+0x3dc>
1000c284:	42000204 	addi	r8,r8,8
1000c288:	d9402f17 	ldw	r5,188(sp)
1000c28c:	2c0b883a 	add	r5,r5,r16
1000c290:	d9402f15 	stw	r5,188(sp)
1000c294:	88800007 	ldb	r2,0(r17)
1000c298:	1000aa26 	beq	r2,zero,1000c544 <___vfprintf_internal_r+0x3f8>
1000c29c:	8d400044 	addi	r21,r17,1
1000c2a0:	8c400047 	ldb	r17,1(r17)
1000c2a4:	0021883a 	mov	r16,zero
1000c2a8:	00bfffc4 	movi	r2,-1
1000c2ac:	0025883a 	mov	r18,zero
1000c2b0:	dc002905 	stb	r16,164(sp)
1000c2b4:	d8002785 	stb	zero,158(sp)
1000c2b8:	d8002b05 	stb	zero,172(sp)
1000c2bc:	d8802a15 	stw	r2,168(sp)
1000c2c0:	d8003115 	stw	zero,196(sp)
1000c2c4:	04c01604 	movi	r19,88
1000c2c8:	05800244 	movi	r22,9
1000c2cc:	9021883a 	mov	r16,r18
1000c2d0:	4039883a 	mov	fp,r8
1000c2d4:	ad400044 	addi	r21,r21,1
1000c2d8:	88bff804 	addi	r2,r17,-32
1000c2dc:	98833236 	bltu	r19,r2,1000cfa8 <___vfprintf_internal_r+0xe5c>
1000c2e0:	100490ba 	slli	r2,r2,2
1000c2e4:	00c40074 	movhi	r3,4097
1000c2e8:	18f0be04 	addi	r3,r3,-15624
1000c2ec:	10c5883a 	add	r2,r2,r3
1000c2f0:	10800017 	ldw	r2,0(r2)
1000c2f4:	1000683a 	jmp	r2
1000c2f8:	1000cea0 	cmpeqi	zero,r2,826
1000c2fc:	1000cfa8 	cmpgeui	zero,r2,830
1000c300:	1000cfa8 	cmpgeui	zero,r2,830
1000c304:	1000cec0 	call	11000cec <__alt_heap_start+0xe6c044>
1000c308:	1000cfa8 	cmpgeui	zero,r2,830
1000c30c:	1000cfa8 	cmpgeui	zero,r2,830
1000c310:	1000cfa8 	cmpgeui	zero,r2,830
1000c314:	1000cfa8 	cmpgeui	zero,r2,830
1000c318:	1000cfa8 	cmpgeui	zero,r2,830
1000c31c:	1000cfa8 	cmpgeui	zero,r2,830
1000c320:	1000c5a8 	cmpgeui	zero,r2,790
1000c324:	1000cdb0 	cmpltui	zero,r2,822
1000c328:	1000cfa8 	cmpgeui	zero,r2,830
1000c32c:	1000c46c 	andhi	zero,r2,785
1000c330:	1000c5cc 	andi	zero,r2,791
1000c334:	1000cfa8 	cmpgeui	zero,r2,830
1000c338:	1000c61c 	xori	zero,r2,792
1000c33c:	1000c628 	cmpgeui	zero,r2,792
1000c340:	1000c628 	cmpgeui	zero,r2,792
1000c344:	1000c628 	cmpgeui	zero,r2,792
1000c348:	1000c628 	cmpgeui	zero,r2,792
1000c34c:	1000c628 	cmpgeui	zero,r2,792
1000c350:	1000c628 	cmpgeui	zero,r2,792
1000c354:	1000c628 	cmpgeui	zero,r2,792
1000c358:	1000c628 	cmpgeui	zero,r2,792
1000c35c:	1000c628 	cmpgeui	zero,r2,792
1000c360:	1000cfa8 	cmpgeui	zero,r2,830
1000c364:	1000cfa8 	cmpgeui	zero,r2,830
1000c368:	1000cfa8 	cmpgeui	zero,r2,830
1000c36c:	1000cfa8 	cmpgeui	zero,r2,830
1000c370:	1000cfa8 	cmpgeui	zero,r2,830
1000c374:	1000cfa8 	cmpgeui	zero,r2,830
1000c378:	1000cfa8 	cmpgeui	zero,r2,830
1000c37c:	1000cfa8 	cmpgeui	zero,r2,830
1000c380:	1000cfa8 	cmpgeui	zero,r2,830
1000c384:	1000cfa8 	cmpgeui	zero,r2,830
1000c388:	1000c664 	muli	zero,r2,793
1000c38c:	1000c72c 	andhi	zero,r2,796
1000c390:	1000cfa8 	cmpgeui	zero,r2,830
1000c394:	1000c72c 	andhi	zero,r2,796
1000c398:	1000cfa8 	cmpgeui	zero,r2,830
1000c39c:	1000cfa8 	cmpgeui	zero,r2,830
1000c3a0:	1000cfa8 	cmpgeui	zero,r2,830
1000c3a4:	1000cfa8 	cmpgeui	zero,r2,830
1000c3a8:	1000c7d8 	cmpnei	zero,r2,799
1000c3ac:	1000cfa8 	cmpgeui	zero,r2,830
1000c3b0:	1000cfa8 	cmpgeui	zero,r2,830
1000c3b4:	1000c7e4 	muli	zero,r2,799
1000c3b8:	1000cfa8 	cmpgeui	zero,r2,830
1000c3bc:	1000cfa8 	cmpgeui	zero,r2,830
1000c3c0:	1000cfa8 	cmpgeui	zero,r2,830
1000c3c4:	1000cfa8 	cmpgeui	zero,r2,830
1000c3c8:	1000cfa8 	cmpgeui	zero,r2,830
1000c3cc:	1000cc68 	cmpgeui	zero,r2,817
1000c3d0:	1000cfa8 	cmpgeui	zero,r2,830
1000c3d4:	1000cfa8 	cmpgeui	zero,r2,830
1000c3d8:	1000ccd4 	ori	zero,r2,819
1000c3dc:	1000cfa8 	cmpgeui	zero,r2,830
1000c3e0:	1000cfa8 	cmpgeui	zero,r2,830
1000c3e4:	1000cfa8 	cmpgeui	zero,r2,830
1000c3e8:	1000cfa8 	cmpgeui	zero,r2,830
1000c3ec:	1000cfa8 	cmpgeui	zero,r2,830
1000c3f0:	1000cfa8 	cmpgeui	zero,r2,830
1000c3f4:	1000cfa8 	cmpgeui	zero,r2,830
1000c3f8:	1000cfa8 	cmpgeui	zero,r2,830
1000c3fc:	1000cfa8 	cmpgeui	zero,r2,830
1000c400:	1000cfa8 	cmpgeui	zero,r2,830
1000c404:	1000cf4c 	andi	zero,r2,829
1000c408:	1000cecc 	andi	zero,r2,827
1000c40c:	1000c72c 	andhi	zero,r2,796
1000c410:	1000c72c 	andhi	zero,r2,796
1000c414:	1000c72c 	andhi	zero,r2,796
1000c418:	1000ceec 	andhi	zero,r2,827
1000c41c:	1000cecc 	andi	zero,r2,827
1000c420:	1000cfa8 	cmpgeui	zero,r2,830
1000c424:	1000cfa8 	cmpgeui	zero,r2,830
1000c428:	1000cef8 	rdprs	zero,r2,827
1000c42c:	1000cfa8 	cmpgeui	zero,r2,830
1000c430:	1000cf0c 	andi	zero,r2,828
1000c434:	1000cd90 	cmplti	zero,r2,822
1000c438:	1000c478 	rdprs	zero,r2,785
1000c43c:	1000cdc8 	cmpgei	zero,r2,823
1000c440:	1000cfa8 	cmpgeui	zero,r2,830
1000c444:	1000cdd4 	ori	zero,r2,823
1000c448:	1000cfa8 	cmpgeui	zero,r2,830
1000c44c:	1000ce38 	rdprs	zero,r2,824
1000c450:	1000cfa8 	cmpgeui	zero,r2,830
1000c454:	1000cfa8 	cmpgeui	zero,r2,830
1000c458:	1000ce58 	cmpnei	zero,r2,825
1000c45c:	d8c03117 	ldw	r3,196(sp)
1000c460:	d8802e15 	stw	r2,184(sp)
1000c464:	00c7c83a 	sub	r3,zero,r3
1000c468:	d8c03115 	stw	r3,196(sp)
1000c46c:	84000114 	ori	r16,r16,4
1000c470:	ac400007 	ldb	r17,0(r21)
1000c474:	003f9706 	br	1000c2d4 <__alt_data_end+0xf800c2d4>
1000c478:	00800c04 	movi	r2,48
1000c47c:	d8802705 	stb	r2,156(sp)
1000c480:	00801e04 	movi	r2,120
1000c484:	d8802745 	stb	r2,157(sp)
1000c488:	d9002a17 	ldw	r4,168(sp)
1000c48c:	d8802e17 	ldw	r2,184(sp)
1000c490:	d8002785 	stb	zero,158(sp)
1000c494:	e011883a 	mov	r8,fp
1000c498:	10c00104 	addi	r3,r2,4
1000c49c:	14c00017 	ldw	r19,0(r2)
1000c4a0:	002d883a 	mov	r22,zero
1000c4a4:	80800094 	ori	r2,r16,2
1000c4a8:	2002ca16 	blt	r4,zero,1000cfd4 <___vfprintf_internal_r+0xe88>
1000c4ac:	00bfdfc4 	movi	r2,-129
1000c4b0:	80a4703a 	and	r18,r16,r2
1000c4b4:	d8c02e15 	stw	r3,184(sp)
1000c4b8:	94800094 	ori	r18,r18,2
1000c4bc:	9802b41e 	bne	r19,zero,1000cf90 <___vfprintf_internal_r+0xe44>
1000c4c0:	014400b4 	movhi	r5,4098
1000c4c4:	29648004 	addi	r5,r5,-28160
1000c4c8:	d9403915 	stw	r5,228(sp)
1000c4cc:	04401e04 	movi	r17,120
1000c4d0:	d8802a17 	ldw	r2,168(sp)
1000c4d4:	0039883a 	mov	fp,zero
1000c4d8:	1001fa26 	beq	r2,zero,1000ccc4 <___vfprintf_internal_r+0xb78>
1000c4dc:	0027883a 	mov	r19,zero
1000c4e0:	002d883a 	mov	r22,zero
1000c4e4:	00021906 	br	1000cd4c <___vfprintf_internal_r+0xc00>
1000c4e8:	d9002d17 	ldw	r4,180(sp)
1000c4ec:	b80b883a 	mov	r5,r23
1000c4f0:	000e5000 	call	1000e500 <__swsetup_r>
1000c4f4:	1005dc1e 	bne	r2,zero,1000dc68 <___vfprintf_internal_r+0x1b1c>
1000c4f8:	b880030b 	ldhu	r2,12(r23)
1000c4fc:	00c00284 	movi	r3,10
1000c500:	1080068c 	andi	r2,r2,26
1000c504:	10ff3a1e 	bne	r2,r3,1000c1f0 <__alt_data_end+0xf800c1f0>
1000c508:	b880038f 	ldh	r2,14(r23)
1000c50c:	103f3816 	blt	r2,zero,1000c1f0 <__alt_data_end+0xf800c1f0>
1000c510:	d9c02e17 	ldw	r7,184(sp)
1000c514:	d9002d17 	ldw	r4,180(sp)
1000c518:	a80d883a 	mov	r6,r21
1000c51c:	b80b883a 	mov	r5,r23
1000c520:	000e4440 	call	1000e444 <__sbprintf>
1000c524:	00001106 	br	1000c56c <___vfprintf_internal_r+0x420>
1000c528:	d9002d17 	ldw	r4,180(sp)
1000c52c:	d9801e04 	addi	r6,sp,120
1000c530:	b80b883a 	mov	r5,r23
1000c534:	00137e40 	call	100137e4 <__sprint_r>
1000c538:	1000081e 	bne	r2,zero,1000c55c <___vfprintf_internal_r+0x410>
1000c53c:	da000404 	addi	r8,sp,16
1000c540:	003f5106 	br	1000c288 <__alt_data_end+0xf800c288>
1000c544:	d8802017 	ldw	r2,128(sp)
1000c548:	10000426 	beq	r2,zero,1000c55c <___vfprintf_internal_r+0x410>
1000c54c:	d9002d17 	ldw	r4,180(sp)
1000c550:	d9801e04 	addi	r6,sp,120
1000c554:	b80b883a 	mov	r5,r23
1000c558:	00137e40 	call	100137e4 <__sprint_r>
1000c55c:	b880030b 	ldhu	r2,12(r23)
1000c560:	1080100c 	andi	r2,r2,64
1000c564:	1005c01e 	bne	r2,zero,1000dc68 <___vfprintf_internal_r+0x1b1c>
1000c568:	d8802f17 	ldw	r2,188(sp)
1000c56c:	dfc04717 	ldw	ra,284(sp)
1000c570:	df004617 	ldw	fp,280(sp)
1000c574:	ddc04517 	ldw	r23,276(sp)
1000c578:	dd804417 	ldw	r22,272(sp)
1000c57c:	dd404317 	ldw	r21,268(sp)
1000c580:	dd004217 	ldw	r20,264(sp)
1000c584:	dcc04117 	ldw	r19,260(sp)
1000c588:	dc804017 	ldw	r18,256(sp)
1000c58c:	dc403f17 	ldw	r17,252(sp)
1000c590:	dc003e17 	ldw	r16,248(sp)
1000c594:	dec04804 	addi	sp,sp,288
1000c598:	f800283a 	ret
1000c59c:	d9002d17 	ldw	r4,180(sp)
1000c5a0:	001050c0 	call	1001050c <__sinit>
1000c5a4:	003f0206 	br	1000c1b0 <__alt_data_end+0xf800c1b0>
1000c5a8:	d9002e17 	ldw	r4,184(sp)
1000c5ac:	d9402e17 	ldw	r5,184(sp)
1000c5b0:	21000017 	ldw	r4,0(r4)
1000c5b4:	28800104 	addi	r2,r5,4
1000c5b8:	d9003115 	stw	r4,196(sp)
1000c5bc:	203fa716 	blt	r4,zero,1000c45c <__alt_data_end+0xf800c45c>
1000c5c0:	d8802e15 	stw	r2,184(sp)
1000c5c4:	ac400007 	ldb	r17,0(r21)
1000c5c8:	003f4206 	br	1000c2d4 <__alt_data_end+0xf800c2d4>
1000c5cc:	ac400007 	ldb	r17,0(r21)
1000c5d0:	01000a84 	movi	r4,42
1000c5d4:	a8c00044 	addi	r3,r21,1
1000c5d8:	89075826 	beq	r17,r4,1000e33c <___vfprintf_internal_r+0x21f0>
1000c5dc:	8cbff404 	addi	r18,r17,-48
1000c5e0:	b486ae36 	bltu	r22,r18,1000e09c <___vfprintf_internal_r+0x1f50>
1000c5e4:	0009883a 	mov	r4,zero
1000c5e8:	1823883a 	mov	r17,r3
1000c5ec:	01400284 	movi	r5,10
1000c5f0:	00096fc0 	call	100096fc <__mulsi3>
1000c5f4:	88c00007 	ldb	r3,0(r17)
1000c5f8:	1489883a 	add	r4,r2,r18
1000c5fc:	8d400044 	addi	r21,r17,1
1000c600:	1cbff404 	addi	r18,r3,-48
1000c604:	a823883a 	mov	r17,r21
1000c608:	b4bff82e 	bgeu	r22,r18,1000c5ec <__alt_data_end+0xf800c5ec>
1000c60c:	1823883a 	mov	r17,r3
1000c610:	2005f616 	blt	r4,zero,1000ddec <___vfprintf_internal_r+0x1ca0>
1000c614:	d9002a15 	stw	r4,168(sp)
1000c618:	003f2f06 	br	1000c2d8 <__alt_data_end+0xf800c2d8>
1000c61c:	84002014 	ori	r16,r16,128
1000c620:	ac400007 	ldb	r17,0(r21)
1000c624:	003f2b06 	br	1000c2d4 <__alt_data_end+0xf800c2d4>
1000c628:	8cbff404 	addi	r18,r17,-48
1000c62c:	d8003115 	stw	zero,196(sp)
1000c630:	0009883a 	mov	r4,zero
1000c634:	a823883a 	mov	r17,r21
1000c638:	01400284 	movi	r5,10
1000c63c:	00096fc0 	call	100096fc <__mulsi3>
1000c640:	88c00007 	ldb	r3,0(r17)
1000c644:	9089883a 	add	r4,r18,r2
1000c648:	ad400044 	addi	r21,r21,1
1000c64c:	1cbff404 	addi	r18,r3,-48
1000c650:	a823883a 	mov	r17,r21
1000c654:	b4bff82e 	bgeu	r22,r18,1000c638 <__alt_data_end+0xf800c638>
1000c658:	1823883a 	mov	r17,r3
1000c65c:	d9003115 	stw	r4,196(sp)
1000c660:	003f1d06 	br	1000c2d8 <__alt_data_end+0xf800c2d8>
1000c664:	8025883a 	mov	r18,r16
1000c668:	dc002903 	ldbu	r16,164(sp)
1000c66c:	e011883a 	mov	r8,fp
1000c670:	84003fcc 	andi	r16,r16,255
1000c674:	8007531e 	bne	r16,zero,1000e3c4 <___vfprintf_internal_r+0x2278>
1000c678:	94800414 	ori	r18,r18,16
1000c67c:	9080080c 	andi	r2,r18,32
1000c680:	1003a326 	beq	r2,zero,1000d510 <___vfprintf_internal_r+0x13c4>
1000c684:	d9002e17 	ldw	r4,184(sp)
1000c688:	20800117 	ldw	r2,4(r4)
1000c68c:	24c00017 	ldw	r19,0(r4)
1000c690:	21000204 	addi	r4,r4,8
1000c694:	d9002e15 	stw	r4,184(sp)
1000c698:	102d883a 	mov	r22,r2
1000c69c:	10047316 	blt	r2,zero,1000d86c <___vfprintf_internal_r+0x1720>
1000c6a0:	d9002a17 	ldw	r4,168(sp)
1000c6a4:	df002783 	ldbu	fp,158(sp)
1000c6a8:	2003e416 	blt	r4,zero,1000d63c <___vfprintf_internal_r+0x14f0>
1000c6ac:	00ffdfc4 	movi	r3,-129
1000c6b0:	9d84b03a 	or	r2,r19,r22
1000c6b4:	90e4703a 	and	r18,r18,r3
1000c6b8:	10018026 	beq	r2,zero,1000ccbc <___vfprintf_internal_r+0xb70>
1000c6bc:	b003ab26 	beq	r22,zero,1000d56c <___vfprintf_internal_r+0x1420>
1000c6c0:	dc402915 	stw	r17,164(sp)
1000c6c4:	dc001e04 	addi	r16,sp,120
1000c6c8:	b023883a 	mov	r17,r22
1000c6cc:	402d883a 	mov	r22,r8
1000c6d0:	9809883a 	mov	r4,r19
1000c6d4:	880b883a 	mov	r5,r17
1000c6d8:	01800284 	movi	r6,10
1000c6dc:	000f883a 	mov	r7,zero
1000c6e0:	0015d280 	call	10015d28 <__umoddi3>
1000c6e4:	10800c04 	addi	r2,r2,48
1000c6e8:	843fffc4 	addi	r16,r16,-1
1000c6ec:	9809883a 	mov	r4,r19
1000c6f0:	880b883a 	mov	r5,r17
1000c6f4:	80800005 	stb	r2,0(r16)
1000c6f8:	01800284 	movi	r6,10
1000c6fc:	000f883a 	mov	r7,zero
1000c700:	001572c0 	call	1001572c <__udivdi3>
1000c704:	1027883a 	mov	r19,r2
1000c708:	10c4b03a 	or	r2,r2,r3
1000c70c:	1823883a 	mov	r17,r3
1000c710:	103fef1e 	bne	r2,zero,1000c6d0 <__alt_data_end+0xf800c6d0>
1000c714:	d8c02817 	ldw	r3,160(sp)
1000c718:	dc402917 	ldw	r17,164(sp)
1000c71c:	b011883a 	mov	r8,r22
1000c720:	1c07c83a 	sub	r3,r3,r16
1000c724:	d8c02b15 	stw	r3,172(sp)
1000c728:	00005f06 	br	1000c8a8 <___vfprintf_internal_r+0x75c>
1000c72c:	8025883a 	mov	r18,r16
1000c730:	dc002903 	ldbu	r16,164(sp)
1000c734:	e011883a 	mov	r8,fp
1000c738:	84003fcc 	andi	r16,r16,255
1000c73c:	80071e1e 	bne	r16,zero,1000e3b8 <___vfprintf_internal_r+0x226c>
1000c740:	9080020c 	andi	r2,r18,8
1000c744:	1004af26 	beq	r2,zero,1000da04 <___vfprintf_internal_r+0x18b8>
1000c748:	d9002e17 	ldw	r4,184(sp)
1000c74c:	d9402e17 	ldw	r5,184(sp)
1000c750:	d8802e17 	ldw	r2,184(sp)
1000c754:	21000017 	ldw	r4,0(r4)
1000c758:	29400117 	ldw	r5,4(r5)
1000c75c:	10800204 	addi	r2,r2,8
1000c760:	d9003615 	stw	r4,216(sp)
1000c764:	d9403815 	stw	r5,224(sp)
1000c768:	d8802e15 	stw	r2,184(sp)
1000c76c:	d9003617 	ldw	r4,216(sp)
1000c770:	d9403817 	ldw	r5,224(sp)
1000c774:	da003d15 	stw	r8,244(sp)
1000c778:	04000044 	movi	r16,1
1000c77c:	00134080 	call	10013408 <__fpclassifyd>
1000c780:	da003d17 	ldw	r8,244(sp)
1000c784:	1404441e 	bne	r2,r16,1000d898 <___vfprintf_internal_r+0x174c>
1000c788:	d9003617 	ldw	r4,216(sp)
1000c78c:	d9403817 	ldw	r5,224(sp)
1000c790:	000d883a 	mov	r6,zero
1000c794:	000f883a 	mov	r7,zero
1000c798:	00162ec0 	call	100162ec <__ledf2>
1000c79c:	da003d17 	ldw	r8,244(sp)
1000c7a0:	1005e316 	blt	r2,zero,1000df30 <___vfprintf_internal_r+0x1de4>
1000c7a4:	df002783 	ldbu	fp,158(sp)
1000c7a8:	008011c4 	movi	r2,71
1000c7ac:	1445580e 	bge	r2,r17,1000dd10 <___vfprintf_internal_r+0x1bc4>
1000c7b0:	040400b4 	movhi	r16,4098
1000c7b4:	84247804 	addi	r16,r16,-28192
1000c7b8:	00c000c4 	movi	r3,3
1000c7bc:	00bfdfc4 	movi	r2,-129
1000c7c0:	d8c02915 	stw	r3,164(sp)
1000c7c4:	90a4703a 	and	r18,r18,r2
1000c7c8:	d8c02b15 	stw	r3,172(sp)
1000c7cc:	d8002a15 	stw	zero,168(sp)
1000c7d0:	d8003215 	stw	zero,200(sp)
1000c7d4:	00003a06 	br	1000c8c0 <___vfprintf_internal_r+0x774>
1000c7d8:	84000214 	ori	r16,r16,8
1000c7dc:	ac400007 	ldb	r17,0(r21)
1000c7e0:	003ebc06 	br	1000c2d4 <__alt_data_end+0xf800c2d4>
1000c7e4:	8025883a 	mov	r18,r16
1000c7e8:	dc002903 	ldbu	r16,164(sp)
1000c7ec:	e011883a 	mov	r8,fp
1000c7f0:	84003fcc 	andi	r16,r16,255
1000c7f4:	8007001e 	bne	r16,zero,1000e3f8 <___vfprintf_internal_r+0x22ac>
1000c7f8:	94800414 	ori	r18,r18,16
1000c7fc:	9080080c 	andi	r2,r18,32
1000c800:	1002fa26 	beq	r2,zero,1000d3ec <___vfprintf_internal_r+0x12a0>
1000c804:	d9002e17 	ldw	r4,184(sp)
1000c808:	d9402a17 	ldw	r5,168(sp)
1000c80c:	d8002785 	stb	zero,158(sp)
1000c810:	20800204 	addi	r2,r4,8
1000c814:	24c00017 	ldw	r19,0(r4)
1000c818:	25800117 	ldw	r22,4(r4)
1000c81c:	2804b116 	blt	r5,zero,1000dae4 <___vfprintf_internal_r+0x1998>
1000c820:	013fdfc4 	movi	r4,-129
1000c824:	9d86b03a 	or	r3,r19,r22
1000c828:	d8802e15 	stw	r2,184(sp)
1000c82c:	9124703a 	and	r18,r18,r4
1000c830:	1802fb1e 	bne	r3,zero,1000d420 <___vfprintf_internal_r+0x12d4>
1000c834:	d8c02a17 	ldw	r3,168(sp)
1000c838:	0039883a 	mov	fp,zero
1000c83c:	1805e526 	beq	r3,zero,1000dfd4 <___vfprintf_internal_r+0x1e88>
1000c840:	0027883a 	mov	r19,zero
1000c844:	002d883a 	mov	r22,zero
1000c848:	dc001e04 	addi	r16,sp,120
1000c84c:	9806d0fa 	srli	r3,r19,3
1000c850:	b008977a 	slli	r4,r22,29
1000c854:	b02cd0fa 	srli	r22,r22,3
1000c858:	9cc001cc 	andi	r19,r19,7
1000c85c:	98800c04 	addi	r2,r19,48
1000c860:	843fffc4 	addi	r16,r16,-1
1000c864:	20e6b03a 	or	r19,r4,r3
1000c868:	80800005 	stb	r2,0(r16)
1000c86c:	9d86b03a 	or	r3,r19,r22
1000c870:	183ff61e 	bne	r3,zero,1000c84c <__alt_data_end+0xf800c84c>
1000c874:	90c0004c 	andi	r3,r18,1
1000c878:	18014126 	beq	r3,zero,1000cd80 <___vfprintf_internal_r+0xc34>
1000c87c:	10803fcc 	andi	r2,r2,255
1000c880:	1080201c 	xori	r2,r2,128
1000c884:	10bfe004 	addi	r2,r2,-128
1000c888:	00c00c04 	movi	r3,48
1000c88c:	10c13c26 	beq	r2,r3,1000cd80 <___vfprintf_internal_r+0xc34>
1000c890:	80ffffc5 	stb	r3,-1(r16)
1000c894:	d8c02817 	ldw	r3,160(sp)
1000c898:	80bfffc4 	addi	r2,r16,-1
1000c89c:	1021883a 	mov	r16,r2
1000c8a0:	1887c83a 	sub	r3,r3,r2
1000c8a4:	d8c02b15 	stw	r3,172(sp)
1000c8a8:	d8802b17 	ldw	r2,172(sp)
1000c8ac:	d9002a17 	ldw	r4,168(sp)
1000c8b0:	1100010e 	bge	r2,r4,1000c8b8 <___vfprintf_internal_r+0x76c>
1000c8b4:	2005883a 	mov	r2,r4
1000c8b8:	d8802915 	stw	r2,164(sp)
1000c8bc:	d8003215 	stw	zero,200(sp)
1000c8c0:	e7003fcc 	andi	fp,fp,255
1000c8c4:	e700201c 	xori	fp,fp,128
1000c8c8:	e73fe004 	addi	fp,fp,-128
1000c8cc:	e0000326 	beq	fp,zero,1000c8dc <___vfprintf_internal_r+0x790>
1000c8d0:	d8c02917 	ldw	r3,164(sp)
1000c8d4:	18c00044 	addi	r3,r3,1
1000c8d8:	d8c02915 	stw	r3,164(sp)
1000c8dc:	90c0008c 	andi	r3,r18,2
1000c8e0:	d8c02c15 	stw	r3,176(sp)
1000c8e4:	18000326 	beq	r3,zero,1000c8f4 <___vfprintf_internal_r+0x7a8>
1000c8e8:	d8c02917 	ldw	r3,164(sp)
1000c8ec:	18c00084 	addi	r3,r3,2
1000c8f0:	d8c02915 	stw	r3,164(sp)
1000c8f4:	90c0210c 	andi	r3,r18,132
1000c8f8:	d8c03015 	stw	r3,192(sp)
1000c8fc:	1801c51e 	bne	r3,zero,1000d014 <___vfprintf_internal_r+0xec8>
1000c900:	d9003117 	ldw	r4,196(sp)
1000c904:	d8c02917 	ldw	r3,164(sp)
1000c908:	20e7c83a 	sub	r19,r4,r3
1000c90c:	04c1c10e 	bge	zero,r19,1000d014 <___vfprintf_internal_r+0xec8>
1000c910:	02400404 	movi	r9,16
1000c914:	d8c02017 	ldw	r3,128(sp)
1000c918:	d8801f17 	ldw	r2,124(sp)
1000c91c:	4cc52f0e 	bge	r9,r19,1000dddc <___vfprintf_internal_r+0x1c90>
1000c920:	014400b4 	movhi	r5,4098
1000c924:	29648b84 	addi	r5,r5,-28114
1000c928:	dc403b15 	stw	r17,236(sp)
1000c92c:	d9403515 	stw	r5,212(sp)
1000c930:	9823883a 	mov	r17,r19
1000c934:	482d883a 	mov	r22,r9
1000c938:	9027883a 	mov	r19,r18
1000c93c:	070001c4 	movi	fp,7
1000c940:	8025883a 	mov	r18,r16
1000c944:	dc002d17 	ldw	r16,180(sp)
1000c948:	00000306 	br	1000c958 <___vfprintf_internal_r+0x80c>
1000c94c:	8c7ffc04 	addi	r17,r17,-16
1000c950:	42000204 	addi	r8,r8,8
1000c954:	b440130e 	bge	r22,r17,1000c9a4 <___vfprintf_internal_r+0x858>
1000c958:	010400b4 	movhi	r4,4098
1000c95c:	18c00404 	addi	r3,r3,16
1000c960:	10800044 	addi	r2,r2,1
1000c964:	21248b84 	addi	r4,r4,-28114
1000c968:	41000015 	stw	r4,0(r8)
1000c96c:	45800115 	stw	r22,4(r8)
1000c970:	d8c02015 	stw	r3,128(sp)
1000c974:	d8801f15 	stw	r2,124(sp)
1000c978:	e0bff40e 	bge	fp,r2,1000c94c <__alt_data_end+0xf800c94c>
1000c97c:	d9801e04 	addi	r6,sp,120
1000c980:	b80b883a 	mov	r5,r23
1000c984:	8009883a 	mov	r4,r16
1000c988:	00137e40 	call	100137e4 <__sprint_r>
1000c98c:	103ef31e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000c990:	8c7ffc04 	addi	r17,r17,-16
1000c994:	d8c02017 	ldw	r3,128(sp)
1000c998:	d8801f17 	ldw	r2,124(sp)
1000c99c:	da000404 	addi	r8,sp,16
1000c9a0:	b47fed16 	blt	r22,r17,1000c958 <__alt_data_end+0xf800c958>
1000c9a4:	9021883a 	mov	r16,r18
1000c9a8:	9825883a 	mov	r18,r19
1000c9ac:	8827883a 	mov	r19,r17
1000c9b0:	dc403b17 	ldw	r17,236(sp)
1000c9b4:	d9403517 	ldw	r5,212(sp)
1000c9b8:	98c7883a 	add	r3,r19,r3
1000c9bc:	10800044 	addi	r2,r2,1
1000c9c0:	41400015 	stw	r5,0(r8)
1000c9c4:	44c00115 	stw	r19,4(r8)
1000c9c8:	d8c02015 	stw	r3,128(sp)
1000c9cc:	d8801f15 	stw	r2,124(sp)
1000c9d0:	010001c4 	movi	r4,7
1000c9d4:	2082c516 	blt	r4,r2,1000d4ec <___vfprintf_internal_r+0x13a0>
1000c9d8:	df002787 	ldb	fp,158(sp)
1000c9dc:	42000204 	addi	r8,r8,8
1000c9e0:	e0000c26 	beq	fp,zero,1000ca14 <___vfprintf_internal_r+0x8c8>
1000c9e4:	d8801f17 	ldw	r2,124(sp)
1000c9e8:	d9002784 	addi	r4,sp,158
1000c9ec:	18c00044 	addi	r3,r3,1
1000c9f0:	10800044 	addi	r2,r2,1
1000c9f4:	41000015 	stw	r4,0(r8)
1000c9f8:	01000044 	movi	r4,1
1000c9fc:	41000115 	stw	r4,4(r8)
1000ca00:	d8c02015 	stw	r3,128(sp)
1000ca04:	d8801f15 	stw	r2,124(sp)
1000ca08:	010001c4 	movi	r4,7
1000ca0c:	20825e16 	blt	r4,r2,1000d388 <___vfprintf_internal_r+0x123c>
1000ca10:	42000204 	addi	r8,r8,8
1000ca14:	d8802c17 	ldw	r2,176(sp)
1000ca18:	10000c26 	beq	r2,zero,1000ca4c <___vfprintf_internal_r+0x900>
1000ca1c:	d8801f17 	ldw	r2,124(sp)
1000ca20:	d9002704 	addi	r4,sp,156
1000ca24:	18c00084 	addi	r3,r3,2
1000ca28:	10800044 	addi	r2,r2,1
1000ca2c:	41000015 	stw	r4,0(r8)
1000ca30:	01000084 	movi	r4,2
1000ca34:	41000115 	stw	r4,4(r8)
1000ca38:	d8c02015 	stw	r3,128(sp)
1000ca3c:	d8801f15 	stw	r2,124(sp)
1000ca40:	010001c4 	movi	r4,7
1000ca44:	20825816 	blt	r4,r2,1000d3a8 <___vfprintf_internal_r+0x125c>
1000ca48:	42000204 	addi	r8,r8,8
1000ca4c:	d9003017 	ldw	r4,192(sp)
1000ca50:	00802004 	movi	r2,128
1000ca54:	2081bb26 	beq	r4,r2,1000d144 <___vfprintf_internal_r+0xff8>
1000ca58:	d9402a17 	ldw	r5,168(sp)
1000ca5c:	d8802b17 	ldw	r2,172(sp)
1000ca60:	28adc83a 	sub	r22,r5,r2
1000ca64:	0580310e 	bge	zero,r22,1000cb2c <___vfprintf_internal_r+0x9e0>
1000ca68:	07000404 	movi	fp,16
1000ca6c:	d8801f17 	ldw	r2,124(sp)
1000ca70:	e584360e 	bge	fp,r22,1000db4c <___vfprintf_internal_r+0x1a00>
1000ca74:	014400b4 	movhi	r5,4098
1000ca78:	29648784 	addi	r5,r5,-28130
1000ca7c:	dc402a15 	stw	r17,168(sp)
1000ca80:	d9402c15 	stw	r5,176(sp)
1000ca84:	b023883a 	mov	r17,r22
1000ca88:	04c001c4 	movi	r19,7
1000ca8c:	a82d883a 	mov	r22,r21
1000ca90:	902b883a 	mov	r21,r18
1000ca94:	8025883a 	mov	r18,r16
1000ca98:	dc002d17 	ldw	r16,180(sp)
1000ca9c:	00000306 	br	1000caac <___vfprintf_internal_r+0x960>
1000caa0:	8c7ffc04 	addi	r17,r17,-16
1000caa4:	42000204 	addi	r8,r8,8
1000caa8:	e440110e 	bge	fp,r17,1000caf0 <___vfprintf_internal_r+0x9a4>
1000caac:	18c00404 	addi	r3,r3,16
1000cab0:	10800044 	addi	r2,r2,1
1000cab4:	45000015 	stw	r20,0(r8)
1000cab8:	47000115 	stw	fp,4(r8)
1000cabc:	d8c02015 	stw	r3,128(sp)
1000cac0:	d8801f15 	stw	r2,124(sp)
1000cac4:	98bff60e 	bge	r19,r2,1000caa0 <__alt_data_end+0xf800caa0>
1000cac8:	d9801e04 	addi	r6,sp,120
1000cacc:	b80b883a 	mov	r5,r23
1000cad0:	8009883a 	mov	r4,r16
1000cad4:	00137e40 	call	100137e4 <__sprint_r>
1000cad8:	103ea01e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000cadc:	8c7ffc04 	addi	r17,r17,-16
1000cae0:	d8c02017 	ldw	r3,128(sp)
1000cae4:	d8801f17 	ldw	r2,124(sp)
1000cae8:	da000404 	addi	r8,sp,16
1000caec:	e47fef16 	blt	fp,r17,1000caac <__alt_data_end+0xf800caac>
1000caf0:	9021883a 	mov	r16,r18
1000caf4:	a825883a 	mov	r18,r21
1000caf8:	b02b883a 	mov	r21,r22
1000cafc:	882d883a 	mov	r22,r17
1000cb00:	dc402a17 	ldw	r17,168(sp)
1000cb04:	d9002c17 	ldw	r4,176(sp)
1000cb08:	1d87883a 	add	r3,r3,r22
1000cb0c:	10800044 	addi	r2,r2,1
1000cb10:	41000015 	stw	r4,0(r8)
1000cb14:	45800115 	stw	r22,4(r8)
1000cb18:	d8c02015 	stw	r3,128(sp)
1000cb1c:	d8801f15 	stw	r2,124(sp)
1000cb20:	010001c4 	movi	r4,7
1000cb24:	20821016 	blt	r4,r2,1000d368 <___vfprintf_internal_r+0x121c>
1000cb28:	42000204 	addi	r8,r8,8
1000cb2c:	9080400c 	andi	r2,r18,256
1000cb30:	10013a1e 	bne	r2,zero,1000d01c <___vfprintf_internal_r+0xed0>
1000cb34:	d9402b17 	ldw	r5,172(sp)
1000cb38:	d8801f17 	ldw	r2,124(sp)
1000cb3c:	44000015 	stw	r16,0(r8)
1000cb40:	1947883a 	add	r3,r3,r5
1000cb44:	10800044 	addi	r2,r2,1
1000cb48:	41400115 	stw	r5,4(r8)
1000cb4c:	d8c02015 	stw	r3,128(sp)
1000cb50:	d8801f15 	stw	r2,124(sp)
1000cb54:	010001c4 	movi	r4,7
1000cb58:	2081f516 	blt	r4,r2,1000d330 <___vfprintf_internal_r+0x11e4>
1000cb5c:	42000204 	addi	r8,r8,8
1000cb60:	9480010c 	andi	r18,r18,4
1000cb64:	90003226 	beq	r18,zero,1000cc30 <___vfprintf_internal_r+0xae4>
1000cb68:	d9403117 	ldw	r5,196(sp)
1000cb6c:	d8802917 	ldw	r2,164(sp)
1000cb70:	28a1c83a 	sub	r16,r5,r2
1000cb74:	04002e0e 	bge	zero,r16,1000cc30 <___vfprintf_internal_r+0xae4>
1000cb78:	04400404 	movi	r17,16
1000cb7c:	d8801f17 	ldw	r2,124(sp)
1000cb80:	8c04c40e 	bge	r17,r16,1000de94 <___vfprintf_internal_r+0x1d48>
1000cb84:	014400b4 	movhi	r5,4098
1000cb88:	29648b84 	addi	r5,r5,-28114
1000cb8c:	d9403515 	stw	r5,212(sp)
1000cb90:	048001c4 	movi	r18,7
1000cb94:	dcc02d17 	ldw	r19,180(sp)
1000cb98:	00000306 	br	1000cba8 <___vfprintf_internal_r+0xa5c>
1000cb9c:	843ffc04 	addi	r16,r16,-16
1000cba0:	42000204 	addi	r8,r8,8
1000cba4:	8c00130e 	bge	r17,r16,1000cbf4 <___vfprintf_internal_r+0xaa8>
1000cba8:	010400b4 	movhi	r4,4098
1000cbac:	18c00404 	addi	r3,r3,16
1000cbb0:	10800044 	addi	r2,r2,1
1000cbb4:	21248b84 	addi	r4,r4,-28114
1000cbb8:	41000015 	stw	r4,0(r8)
1000cbbc:	44400115 	stw	r17,4(r8)
1000cbc0:	d8c02015 	stw	r3,128(sp)
1000cbc4:	d8801f15 	stw	r2,124(sp)
1000cbc8:	90bff40e 	bge	r18,r2,1000cb9c <__alt_data_end+0xf800cb9c>
1000cbcc:	d9801e04 	addi	r6,sp,120
1000cbd0:	b80b883a 	mov	r5,r23
1000cbd4:	9809883a 	mov	r4,r19
1000cbd8:	00137e40 	call	100137e4 <__sprint_r>
1000cbdc:	103e5f1e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000cbe0:	843ffc04 	addi	r16,r16,-16
1000cbe4:	d8c02017 	ldw	r3,128(sp)
1000cbe8:	d8801f17 	ldw	r2,124(sp)
1000cbec:	da000404 	addi	r8,sp,16
1000cbf0:	8c3fed16 	blt	r17,r16,1000cba8 <__alt_data_end+0xf800cba8>
1000cbf4:	d9403517 	ldw	r5,212(sp)
1000cbf8:	1c07883a 	add	r3,r3,r16
1000cbfc:	10800044 	addi	r2,r2,1
1000cc00:	41400015 	stw	r5,0(r8)
1000cc04:	44000115 	stw	r16,4(r8)
1000cc08:	d8c02015 	stw	r3,128(sp)
1000cc0c:	d8801f15 	stw	r2,124(sp)
1000cc10:	010001c4 	movi	r4,7
1000cc14:	2080060e 	bge	r4,r2,1000cc30 <___vfprintf_internal_r+0xae4>
1000cc18:	d9002d17 	ldw	r4,180(sp)
1000cc1c:	d9801e04 	addi	r6,sp,120
1000cc20:	b80b883a 	mov	r5,r23
1000cc24:	00137e40 	call	100137e4 <__sprint_r>
1000cc28:	103e4c1e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000cc2c:	d8c02017 	ldw	r3,128(sp)
1000cc30:	d8803117 	ldw	r2,196(sp)
1000cc34:	d9002917 	ldw	r4,164(sp)
1000cc38:	1100010e 	bge	r2,r4,1000cc40 <___vfprintf_internal_r+0xaf4>
1000cc3c:	2005883a 	mov	r2,r4
1000cc40:	d9402f17 	ldw	r5,188(sp)
1000cc44:	288b883a 	add	r5,r5,r2
1000cc48:	d9402f15 	stw	r5,188(sp)
1000cc4c:	1801c01e 	bne	r3,zero,1000d350 <___vfprintf_internal_r+0x1204>
1000cc50:	a8800007 	ldb	r2,0(r21)
1000cc54:	d8001f15 	stw	zero,124(sp)
1000cc58:	da000404 	addi	r8,sp,16
1000cc5c:	103d751e 	bne	r2,zero,1000c234 <__alt_data_end+0xf800c234>
1000cc60:	a823883a 	mov	r17,r21
1000cc64:	003d8b06 	br	1000c294 <__alt_data_end+0xf800c294>
1000cc68:	8025883a 	mov	r18,r16
1000cc6c:	dc002903 	ldbu	r16,164(sp)
1000cc70:	e011883a 	mov	r8,fp
1000cc74:	84003fcc 	andi	r16,r16,255
1000cc78:	8005e51e 	bne	r16,zero,1000e410 <___vfprintf_internal_r+0x22c4>
1000cc7c:	94800414 	ori	r18,r18,16
1000cc80:	9080080c 	andi	r2,r18,32
1000cc84:	10022b26 	beq	r2,zero,1000d534 <___vfprintf_internal_r+0x13e8>
1000cc88:	d9002e17 	ldw	r4,184(sp)
1000cc8c:	d9402a17 	ldw	r5,168(sp)
1000cc90:	d8002785 	stb	zero,158(sp)
1000cc94:	20c00204 	addi	r3,r4,8
1000cc98:	24c00017 	ldw	r19,0(r4)
1000cc9c:	25800117 	ldw	r22,4(r4)
1000cca0:	28042e16 	blt	r5,zero,1000dd5c <___vfprintf_internal_r+0x1c10>
1000cca4:	013fdfc4 	movi	r4,-129
1000cca8:	9d84b03a 	or	r2,r19,r22
1000ccac:	d8c02e15 	stw	r3,184(sp)
1000ccb0:	9124703a 	and	r18,r18,r4
1000ccb4:	0039883a 	mov	fp,zero
1000ccb8:	103e801e 	bne	r2,zero,1000c6bc <__alt_data_end+0xf800c6bc>
1000ccbc:	d9002a17 	ldw	r4,168(sp)
1000ccc0:	2002e01e 	bne	r4,zero,1000d844 <___vfprintf_internal_r+0x16f8>
1000ccc4:	d8002a15 	stw	zero,168(sp)
1000ccc8:	d8002b15 	stw	zero,172(sp)
1000cccc:	dc001e04 	addi	r16,sp,120
1000ccd0:	003ef506 	br	1000c8a8 <__alt_data_end+0xf800c8a8>
1000ccd4:	8025883a 	mov	r18,r16
1000ccd8:	dc002903 	ldbu	r16,164(sp)
1000ccdc:	e011883a 	mov	r8,fp
1000cce0:	84003fcc 	andi	r16,r16,255
1000cce4:	8005ba1e 	bne	r16,zero,1000e3d0 <___vfprintf_internal_r+0x2284>
1000cce8:	010400b4 	movhi	r4,4098
1000ccec:	21247b04 	addi	r4,r4,-28180
1000ccf0:	d9003915 	stw	r4,228(sp)
1000ccf4:	9080080c 	andi	r2,r18,32
1000ccf8:	10006126 	beq	r2,zero,1000ce80 <___vfprintf_internal_r+0xd34>
1000ccfc:	d9402e17 	ldw	r5,184(sp)
1000cd00:	2cc00017 	ldw	r19,0(r5)
1000cd04:	2d800117 	ldw	r22,4(r5)
1000cd08:	29400204 	addi	r5,r5,8
1000cd0c:	d9402e15 	stw	r5,184(sp)
1000cd10:	9080004c 	andi	r2,r18,1
1000cd14:	1001ac26 	beq	r2,zero,1000d3c8 <___vfprintf_internal_r+0x127c>
1000cd18:	9d84b03a 	or	r2,r19,r22
1000cd1c:	10038526 	beq	r2,zero,1000db34 <___vfprintf_internal_r+0x19e8>
1000cd20:	d8c02a17 	ldw	r3,168(sp)
1000cd24:	00800c04 	movi	r2,48
1000cd28:	d8802705 	stb	r2,156(sp)
1000cd2c:	dc402745 	stb	r17,157(sp)
1000cd30:	d8002785 	stb	zero,158(sp)
1000cd34:	90800094 	ori	r2,r18,2
1000cd38:	18047916 	blt	r3,zero,1000df20 <___vfprintf_internal_r+0x1dd4>
1000cd3c:	00bfdfc4 	movi	r2,-129
1000cd40:	90a4703a 	and	r18,r18,r2
1000cd44:	94800094 	ori	r18,r18,2
1000cd48:	0039883a 	mov	fp,zero
1000cd4c:	d9003917 	ldw	r4,228(sp)
1000cd50:	dc001e04 	addi	r16,sp,120
1000cd54:	988003cc 	andi	r2,r19,15
1000cd58:	b006973a 	slli	r3,r22,28
1000cd5c:	2085883a 	add	r2,r4,r2
1000cd60:	9826d13a 	srli	r19,r19,4
1000cd64:	10800003 	ldbu	r2,0(r2)
1000cd68:	b02cd13a 	srli	r22,r22,4
1000cd6c:	843fffc4 	addi	r16,r16,-1
1000cd70:	1ce6b03a 	or	r19,r3,r19
1000cd74:	80800005 	stb	r2,0(r16)
1000cd78:	9d84b03a 	or	r2,r19,r22
1000cd7c:	103ff51e 	bne	r2,zero,1000cd54 <__alt_data_end+0xf800cd54>
1000cd80:	d8c02817 	ldw	r3,160(sp)
1000cd84:	1c07c83a 	sub	r3,r3,r16
1000cd88:	d8c02b15 	stw	r3,172(sp)
1000cd8c:	003ec606 	br	1000c8a8 <__alt_data_end+0xf800c8a8>
1000cd90:	8025883a 	mov	r18,r16
1000cd94:	dc002903 	ldbu	r16,164(sp)
1000cd98:	e011883a 	mov	r8,fp
1000cd9c:	84003fcc 	andi	r16,r16,255
1000cda0:	803e9626 	beq	r16,zero,1000c7fc <__alt_data_end+0xf800c7fc>
1000cda4:	d8c02b03 	ldbu	r3,172(sp)
1000cda8:	d8c02785 	stb	r3,158(sp)
1000cdac:	003e9306 	br	1000c7fc <__alt_data_end+0xf800c7fc>
1000cdb0:	00c00044 	movi	r3,1
1000cdb4:	d8c02905 	stb	r3,164(sp)
1000cdb8:	00c00ac4 	movi	r3,43
1000cdbc:	d8c02b05 	stb	r3,172(sp)
1000cdc0:	ac400007 	ldb	r17,0(r21)
1000cdc4:	003d4306 	br	1000c2d4 <__alt_data_end+0xf800c2d4>
1000cdc8:	84000814 	ori	r16,r16,32
1000cdcc:	ac400007 	ldb	r17,0(r21)
1000cdd0:	003d4006 	br	1000c2d4 <__alt_data_end+0xf800c2d4>
1000cdd4:	d8802e17 	ldw	r2,184(sp)
1000cdd8:	8025883a 	mov	r18,r16
1000cddc:	d8002785 	stb	zero,158(sp)
1000cde0:	14000017 	ldw	r16,0(r2)
1000cde4:	e011883a 	mov	r8,fp
1000cde8:	14c00104 	addi	r19,r2,4
1000cdec:	80042d26 	beq	r16,zero,1000dea4 <___vfprintf_internal_r+0x1d58>
1000cdf0:	d8c02a17 	ldw	r3,168(sp)
1000cdf4:	1803e416 	blt	r3,zero,1000dd88 <___vfprintf_internal_r+0x1c3c>
1000cdf8:	180d883a 	mov	r6,r3
1000cdfc:	000b883a 	mov	r5,zero
1000ce00:	8009883a 	mov	r4,r16
1000ce04:	df003d15 	stw	fp,244(sp)
1000ce08:	0011a840 	call	10011a84 <memchr>
1000ce0c:	da003d17 	ldw	r8,244(sp)
1000ce10:	10046826 	beq	r2,zero,1000dfb4 <___vfprintf_internal_r+0x1e68>
1000ce14:	1405c83a 	sub	r2,r2,r16
1000ce18:	d8802b15 	stw	r2,172(sp)
1000ce1c:	1003e016 	blt	r2,zero,1000dda0 <___vfprintf_internal_r+0x1c54>
1000ce20:	df002783 	ldbu	fp,158(sp)
1000ce24:	d8802915 	stw	r2,164(sp)
1000ce28:	dcc02e15 	stw	r19,184(sp)
1000ce2c:	d8002a15 	stw	zero,168(sp)
1000ce30:	d8003215 	stw	zero,200(sp)
1000ce34:	003ea206 	br	1000c8c0 <__alt_data_end+0xf800c8c0>
1000ce38:	8025883a 	mov	r18,r16
1000ce3c:	dc002903 	ldbu	r16,164(sp)
1000ce40:	e011883a 	mov	r8,fp
1000ce44:	84003fcc 	andi	r16,r16,255
1000ce48:	803f8d26 	beq	r16,zero,1000cc80 <__alt_data_end+0xf800cc80>
1000ce4c:	d8c02b03 	ldbu	r3,172(sp)
1000ce50:	d8c02785 	stb	r3,158(sp)
1000ce54:	003f8a06 	br	1000cc80 <__alt_data_end+0xf800cc80>
1000ce58:	8025883a 	mov	r18,r16
1000ce5c:	dc002903 	ldbu	r16,164(sp)
1000ce60:	e011883a 	mov	r8,fp
1000ce64:	84003fcc 	andi	r16,r16,255
1000ce68:	8005661e 	bne	r16,zero,1000e404 <___vfprintf_internal_r+0x22b8>
1000ce6c:	010400b4 	movhi	r4,4098
1000ce70:	21248004 	addi	r4,r4,-28160
1000ce74:	d9003915 	stw	r4,228(sp)
1000ce78:	9080080c 	andi	r2,r18,32
1000ce7c:	103f9f1e 	bne	r2,zero,1000ccfc <__alt_data_end+0xf800ccfc>
1000ce80:	9080040c 	andi	r2,r18,16
1000ce84:	1002eb26 	beq	r2,zero,1000da34 <___vfprintf_internal_r+0x18e8>
1000ce88:	d8802e17 	ldw	r2,184(sp)
1000ce8c:	002d883a 	mov	r22,zero
1000ce90:	14c00017 	ldw	r19,0(r2)
1000ce94:	10800104 	addi	r2,r2,4
1000ce98:	d8802e15 	stw	r2,184(sp)
1000ce9c:	003f9c06 	br	1000cd10 <__alt_data_end+0xf800cd10>
1000cea0:	d8802b07 	ldb	r2,172(sp)
1000cea4:	1002e11e 	bne	r2,zero,1000da2c <___vfprintf_internal_r+0x18e0>
1000cea8:	00c00044 	movi	r3,1
1000ceac:	d8c02905 	stb	r3,164(sp)
1000ceb0:	00c00804 	movi	r3,32
1000ceb4:	d8c02b05 	stb	r3,172(sp)
1000ceb8:	ac400007 	ldb	r17,0(r21)
1000cebc:	003d0506 	br	1000c2d4 <__alt_data_end+0xf800c2d4>
1000cec0:	84000054 	ori	r16,r16,1
1000cec4:	ac400007 	ldb	r17,0(r21)
1000cec8:	003d0206 	br	1000c2d4 <__alt_data_end+0xf800c2d4>
1000cecc:	8025883a 	mov	r18,r16
1000ced0:	dc002903 	ldbu	r16,164(sp)
1000ced4:	e011883a 	mov	r8,fp
1000ced8:	84003fcc 	andi	r16,r16,255
1000cedc:	803de726 	beq	r16,zero,1000c67c <__alt_data_end+0xf800c67c>
1000cee0:	d8c02b03 	ldbu	r3,172(sp)
1000cee4:	d8c02785 	stb	r3,158(sp)
1000cee8:	003de406 	br	1000c67c <__alt_data_end+0xf800c67c>
1000ceec:	84001014 	ori	r16,r16,64
1000cef0:	ac400007 	ldb	r17,0(r21)
1000cef4:	003cf706 	br	1000c2d4 <__alt_data_end+0xf800c2d4>
1000cef8:	ac400007 	ldb	r17,0(r21)
1000cefc:	00801b04 	movi	r2,108
1000cf00:	88838f26 	beq	r17,r2,1000dd40 <___vfprintf_internal_r+0x1bf4>
1000cf04:	84000414 	ori	r16,r16,16
1000cf08:	003cf206 	br	1000c2d4 <__alt_data_end+0xf800c2d4>
1000cf0c:	8025883a 	mov	r18,r16
1000cf10:	dc002903 	ldbu	r16,164(sp)
1000cf14:	e011883a 	mov	r8,fp
1000cf18:	84003fcc 	andi	r16,r16,255
1000cf1c:	80053f1e 	bne	r16,zero,1000e41c <___vfprintf_internal_r+0x22d0>
1000cf20:	9080080c 	andi	r2,r18,32
1000cf24:	1002d226 	beq	r2,zero,1000da70 <___vfprintf_internal_r+0x1924>
1000cf28:	d9002e17 	ldw	r4,184(sp)
1000cf2c:	d9402f17 	ldw	r5,188(sp)
1000cf30:	20800017 	ldw	r2,0(r4)
1000cf34:	2807d7fa 	srai	r3,r5,31
1000cf38:	21000104 	addi	r4,r4,4
1000cf3c:	d9002e15 	stw	r4,184(sp)
1000cf40:	11400015 	stw	r5,0(r2)
1000cf44:	10c00115 	stw	r3,4(r2)
1000cf48:	003cb806 	br	1000c22c <__alt_data_end+0xf800c22c>
1000cf4c:	d8c02e17 	ldw	r3,184(sp)
1000cf50:	d9002e17 	ldw	r4,184(sp)
1000cf54:	8025883a 	mov	r18,r16
1000cf58:	18800017 	ldw	r2,0(r3)
1000cf5c:	21000104 	addi	r4,r4,4
1000cf60:	00c00044 	movi	r3,1
1000cf64:	e011883a 	mov	r8,fp
1000cf68:	d8c02915 	stw	r3,164(sp)
1000cf6c:	d8002785 	stb	zero,158(sp)
1000cf70:	d8801405 	stb	r2,80(sp)
1000cf74:	d9002e15 	stw	r4,184(sp)
1000cf78:	d8c02b15 	stw	r3,172(sp)
1000cf7c:	d8002a15 	stw	zero,168(sp)
1000cf80:	d8003215 	stw	zero,200(sp)
1000cf84:	dc001404 	addi	r16,sp,80
1000cf88:	0039883a 	mov	fp,zero
1000cf8c:	003e5306 	br	1000c8dc <__alt_data_end+0xf800c8dc>
1000cf90:	010400b4 	movhi	r4,4098
1000cf94:	21248004 	addi	r4,r4,-28160
1000cf98:	0039883a 	mov	fp,zero
1000cf9c:	d9003915 	stw	r4,228(sp)
1000cfa0:	04401e04 	movi	r17,120
1000cfa4:	003f6906 	br	1000cd4c <__alt_data_end+0xf800cd4c>
1000cfa8:	8025883a 	mov	r18,r16
1000cfac:	dc002903 	ldbu	r16,164(sp)
1000cfb0:	e011883a 	mov	r8,fp
1000cfb4:	84003fcc 	andi	r16,r16,255
1000cfb8:	8005081e 	bne	r16,zero,1000e3dc <___vfprintf_internal_r+0x2290>
1000cfbc:	883d6126 	beq	r17,zero,1000c544 <__alt_data_end+0xf800c544>
1000cfc0:	00c00044 	movi	r3,1
1000cfc4:	d8c02915 	stw	r3,164(sp)
1000cfc8:	dc401405 	stb	r17,80(sp)
1000cfcc:	d8002785 	stb	zero,158(sp)
1000cfd0:	003fe906 	br	1000cf78 <__alt_data_end+0xf800cf78>
1000cfd4:	014400b4 	movhi	r5,4098
1000cfd8:	29648004 	addi	r5,r5,-28160
1000cfdc:	d9403915 	stw	r5,228(sp)
1000cfe0:	d8c02e15 	stw	r3,184(sp)
1000cfe4:	1025883a 	mov	r18,r2
1000cfe8:	04401e04 	movi	r17,120
1000cfec:	9d84b03a 	or	r2,r19,r22
1000cff0:	1000fc1e 	bne	r2,zero,1000d3e4 <___vfprintf_internal_r+0x1298>
1000cff4:	0039883a 	mov	fp,zero
1000cff8:	00800084 	movi	r2,2
1000cffc:	10803fcc 	andi	r2,r2,255
1000d000:	00c00044 	movi	r3,1
1000d004:	10c20f26 	beq	r2,r3,1000d844 <___vfprintf_internal_r+0x16f8>
1000d008:	00c00084 	movi	r3,2
1000d00c:	10fd3326 	beq	r2,r3,1000c4dc <__alt_data_end+0xf800c4dc>
1000d010:	003e0b06 	br	1000c840 <__alt_data_end+0xf800c840>
1000d014:	d8c02017 	ldw	r3,128(sp)
1000d018:	003e7106 	br	1000c9e0 <__alt_data_end+0xf800c9e0>
1000d01c:	00801944 	movi	r2,101
1000d020:	14407e0e 	bge	r2,r17,1000d21c <___vfprintf_internal_r+0x10d0>
1000d024:	d9003617 	ldw	r4,216(sp)
1000d028:	d9403817 	ldw	r5,224(sp)
1000d02c:	000d883a 	mov	r6,zero
1000d030:	000f883a 	mov	r7,zero
1000d034:	d8c03c15 	stw	r3,240(sp)
1000d038:	da003d15 	stw	r8,244(sp)
1000d03c:	000a9a00 	call	1000a9a0 <__eqdf2>
1000d040:	d8c03c17 	ldw	r3,240(sp)
1000d044:	da003d17 	ldw	r8,244(sp)
1000d048:	1000f71e 	bne	r2,zero,1000d428 <___vfprintf_internal_r+0x12dc>
1000d04c:	d8801f17 	ldw	r2,124(sp)
1000d050:	010400b4 	movhi	r4,4098
1000d054:	21248704 	addi	r4,r4,-28132
1000d058:	18c00044 	addi	r3,r3,1
1000d05c:	10800044 	addi	r2,r2,1
1000d060:	41000015 	stw	r4,0(r8)
1000d064:	01000044 	movi	r4,1
1000d068:	41000115 	stw	r4,4(r8)
1000d06c:	d8c02015 	stw	r3,128(sp)
1000d070:	d8801f15 	stw	r2,124(sp)
1000d074:	010001c4 	movi	r4,7
1000d078:	2082b816 	blt	r4,r2,1000db5c <___vfprintf_internal_r+0x1a10>
1000d07c:	42000204 	addi	r8,r8,8
1000d080:	d8802617 	ldw	r2,152(sp)
1000d084:	d9403317 	ldw	r5,204(sp)
1000d088:	11400216 	blt	r2,r5,1000d094 <___vfprintf_internal_r+0xf48>
1000d08c:	9080004c 	andi	r2,r18,1
1000d090:	103eb326 	beq	r2,zero,1000cb60 <__alt_data_end+0xf800cb60>
1000d094:	d8803717 	ldw	r2,220(sp)
1000d098:	d9003417 	ldw	r4,208(sp)
1000d09c:	d9403717 	ldw	r5,220(sp)
1000d0a0:	1887883a 	add	r3,r3,r2
1000d0a4:	d8801f17 	ldw	r2,124(sp)
1000d0a8:	41000015 	stw	r4,0(r8)
1000d0ac:	41400115 	stw	r5,4(r8)
1000d0b0:	10800044 	addi	r2,r2,1
1000d0b4:	d8c02015 	stw	r3,128(sp)
1000d0b8:	d8801f15 	stw	r2,124(sp)
1000d0bc:	010001c4 	movi	r4,7
1000d0c0:	20832916 	blt	r4,r2,1000dd68 <___vfprintf_internal_r+0x1c1c>
1000d0c4:	42000204 	addi	r8,r8,8
1000d0c8:	d8803317 	ldw	r2,204(sp)
1000d0cc:	143fffc4 	addi	r16,r2,-1
1000d0d0:	043ea30e 	bge	zero,r16,1000cb60 <__alt_data_end+0xf800cb60>
1000d0d4:	04400404 	movi	r17,16
1000d0d8:	d8801f17 	ldw	r2,124(sp)
1000d0dc:	8c00880e 	bge	r17,r16,1000d300 <___vfprintf_internal_r+0x11b4>
1000d0e0:	014400b4 	movhi	r5,4098
1000d0e4:	29648784 	addi	r5,r5,-28130
1000d0e8:	d9402c15 	stw	r5,176(sp)
1000d0ec:	058001c4 	movi	r22,7
1000d0f0:	dcc02d17 	ldw	r19,180(sp)
1000d0f4:	00000306 	br	1000d104 <___vfprintf_internal_r+0xfb8>
1000d0f8:	42000204 	addi	r8,r8,8
1000d0fc:	843ffc04 	addi	r16,r16,-16
1000d100:	8c00820e 	bge	r17,r16,1000d30c <___vfprintf_internal_r+0x11c0>
1000d104:	18c00404 	addi	r3,r3,16
1000d108:	10800044 	addi	r2,r2,1
1000d10c:	45000015 	stw	r20,0(r8)
1000d110:	44400115 	stw	r17,4(r8)
1000d114:	d8c02015 	stw	r3,128(sp)
1000d118:	d8801f15 	stw	r2,124(sp)
1000d11c:	b0bff60e 	bge	r22,r2,1000d0f8 <__alt_data_end+0xf800d0f8>
1000d120:	d9801e04 	addi	r6,sp,120
1000d124:	b80b883a 	mov	r5,r23
1000d128:	9809883a 	mov	r4,r19
1000d12c:	00137e40 	call	100137e4 <__sprint_r>
1000d130:	103d0a1e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d134:	d8c02017 	ldw	r3,128(sp)
1000d138:	d8801f17 	ldw	r2,124(sp)
1000d13c:	da000404 	addi	r8,sp,16
1000d140:	003fee06 	br	1000d0fc <__alt_data_end+0xf800d0fc>
1000d144:	d9403117 	ldw	r5,196(sp)
1000d148:	d8802917 	ldw	r2,164(sp)
1000d14c:	28adc83a 	sub	r22,r5,r2
1000d150:	05be410e 	bge	zero,r22,1000ca58 <__alt_data_end+0xf800ca58>
1000d154:	07000404 	movi	fp,16
1000d158:	d8801f17 	ldw	r2,124(sp)
1000d15c:	e5838f0e 	bge	fp,r22,1000df9c <___vfprintf_internal_r+0x1e50>
1000d160:	014400b4 	movhi	r5,4098
1000d164:	29648784 	addi	r5,r5,-28130
1000d168:	dc403015 	stw	r17,192(sp)
1000d16c:	d9402c15 	stw	r5,176(sp)
1000d170:	b023883a 	mov	r17,r22
1000d174:	04c001c4 	movi	r19,7
1000d178:	a82d883a 	mov	r22,r21
1000d17c:	902b883a 	mov	r21,r18
1000d180:	8025883a 	mov	r18,r16
1000d184:	dc002d17 	ldw	r16,180(sp)
1000d188:	00000306 	br	1000d198 <___vfprintf_internal_r+0x104c>
1000d18c:	8c7ffc04 	addi	r17,r17,-16
1000d190:	42000204 	addi	r8,r8,8
1000d194:	e440110e 	bge	fp,r17,1000d1dc <___vfprintf_internal_r+0x1090>
1000d198:	18c00404 	addi	r3,r3,16
1000d19c:	10800044 	addi	r2,r2,1
1000d1a0:	45000015 	stw	r20,0(r8)
1000d1a4:	47000115 	stw	fp,4(r8)
1000d1a8:	d8c02015 	stw	r3,128(sp)
1000d1ac:	d8801f15 	stw	r2,124(sp)
1000d1b0:	98bff60e 	bge	r19,r2,1000d18c <__alt_data_end+0xf800d18c>
1000d1b4:	d9801e04 	addi	r6,sp,120
1000d1b8:	b80b883a 	mov	r5,r23
1000d1bc:	8009883a 	mov	r4,r16
1000d1c0:	00137e40 	call	100137e4 <__sprint_r>
1000d1c4:	103ce51e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d1c8:	8c7ffc04 	addi	r17,r17,-16
1000d1cc:	d8c02017 	ldw	r3,128(sp)
1000d1d0:	d8801f17 	ldw	r2,124(sp)
1000d1d4:	da000404 	addi	r8,sp,16
1000d1d8:	e47fef16 	blt	fp,r17,1000d198 <__alt_data_end+0xf800d198>
1000d1dc:	9021883a 	mov	r16,r18
1000d1e0:	a825883a 	mov	r18,r21
1000d1e4:	b02b883a 	mov	r21,r22
1000d1e8:	882d883a 	mov	r22,r17
1000d1ec:	dc403017 	ldw	r17,192(sp)
1000d1f0:	d9002c17 	ldw	r4,176(sp)
1000d1f4:	1d87883a 	add	r3,r3,r22
1000d1f8:	10800044 	addi	r2,r2,1
1000d1fc:	41000015 	stw	r4,0(r8)
1000d200:	45800115 	stw	r22,4(r8)
1000d204:	d8c02015 	stw	r3,128(sp)
1000d208:	d8801f15 	stw	r2,124(sp)
1000d20c:	010001c4 	movi	r4,7
1000d210:	20818e16 	blt	r4,r2,1000d84c <___vfprintf_internal_r+0x1700>
1000d214:	42000204 	addi	r8,r8,8
1000d218:	003e0f06 	br	1000ca58 <__alt_data_end+0xf800ca58>
1000d21c:	d9403317 	ldw	r5,204(sp)
1000d220:	00800044 	movi	r2,1
1000d224:	18c00044 	addi	r3,r3,1
1000d228:	1141530e 	bge	r2,r5,1000d778 <___vfprintf_internal_r+0x162c>
1000d22c:	dc401f17 	ldw	r17,124(sp)
1000d230:	00800044 	movi	r2,1
1000d234:	40800115 	stw	r2,4(r8)
1000d238:	8c400044 	addi	r17,r17,1
1000d23c:	44000015 	stw	r16,0(r8)
1000d240:	d8c02015 	stw	r3,128(sp)
1000d244:	dc401f15 	stw	r17,124(sp)
1000d248:	008001c4 	movi	r2,7
1000d24c:	14416b16 	blt	r2,r17,1000d7fc <___vfprintf_internal_r+0x16b0>
1000d250:	42000204 	addi	r8,r8,8
1000d254:	d8803717 	ldw	r2,220(sp)
1000d258:	d9003417 	ldw	r4,208(sp)
1000d25c:	8c400044 	addi	r17,r17,1
1000d260:	10c7883a 	add	r3,r2,r3
1000d264:	40800115 	stw	r2,4(r8)
1000d268:	41000015 	stw	r4,0(r8)
1000d26c:	d8c02015 	stw	r3,128(sp)
1000d270:	dc401f15 	stw	r17,124(sp)
1000d274:	008001c4 	movi	r2,7
1000d278:	14416916 	blt	r2,r17,1000d820 <___vfprintf_internal_r+0x16d4>
1000d27c:	45800204 	addi	r22,r8,8
1000d280:	d9003617 	ldw	r4,216(sp)
1000d284:	d9403817 	ldw	r5,224(sp)
1000d288:	000d883a 	mov	r6,zero
1000d28c:	000f883a 	mov	r7,zero
1000d290:	d8c03c15 	stw	r3,240(sp)
1000d294:	000a9a00 	call	1000a9a0 <__eqdf2>
1000d298:	d8c03c17 	ldw	r3,240(sp)
1000d29c:	1000bc26 	beq	r2,zero,1000d590 <___vfprintf_internal_r+0x1444>
1000d2a0:	d9403317 	ldw	r5,204(sp)
1000d2a4:	84000044 	addi	r16,r16,1
1000d2a8:	8c400044 	addi	r17,r17,1
1000d2ac:	28bfffc4 	addi	r2,r5,-1
1000d2b0:	1887883a 	add	r3,r3,r2
1000d2b4:	b0800115 	stw	r2,4(r22)
1000d2b8:	b4000015 	stw	r16,0(r22)
1000d2bc:	d8c02015 	stw	r3,128(sp)
1000d2c0:	dc401f15 	stw	r17,124(sp)
1000d2c4:	008001c4 	movi	r2,7
1000d2c8:	14414316 	blt	r2,r17,1000d7d8 <___vfprintf_internal_r+0x168c>
1000d2cc:	b5800204 	addi	r22,r22,8
1000d2d0:	d9003a17 	ldw	r4,232(sp)
1000d2d4:	df0022c4 	addi	fp,sp,139
1000d2d8:	8c400044 	addi	r17,r17,1
1000d2dc:	20c7883a 	add	r3,r4,r3
1000d2e0:	b7000015 	stw	fp,0(r22)
1000d2e4:	b1000115 	stw	r4,4(r22)
1000d2e8:	d8c02015 	stw	r3,128(sp)
1000d2ec:	dc401f15 	stw	r17,124(sp)
1000d2f0:	008001c4 	movi	r2,7
1000d2f4:	14400e16 	blt	r2,r17,1000d330 <___vfprintf_internal_r+0x11e4>
1000d2f8:	b2000204 	addi	r8,r22,8
1000d2fc:	003e1806 	br	1000cb60 <__alt_data_end+0xf800cb60>
1000d300:	010400b4 	movhi	r4,4098
1000d304:	21248784 	addi	r4,r4,-28130
1000d308:	d9002c15 	stw	r4,176(sp)
1000d30c:	d9002c17 	ldw	r4,176(sp)
1000d310:	1c07883a 	add	r3,r3,r16
1000d314:	44000115 	stw	r16,4(r8)
1000d318:	41000015 	stw	r4,0(r8)
1000d31c:	10800044 	addi	r2,r2,1
1000d320:	d8c02015 	stw	r3,128(sp)
1000d324:	d8801f15 	stw	r2,124(sp)
1000d328:	010001c4 	movi	r4,7
1000d32c:	20be0b0e 	bge	r4,r2,1000cb5c <__alt_data_end+0xf800cb5c>
1000d330:	d9002d17 	ldw	r4,180(sp)
1000d334:	d9801e04 	addi	r6,sp,120
1000d338:	b80b883a 	mov	r5,r23
1000d33c:	00137e40 	call	100137e4 <__sprint_r>
1000d340:	103c861e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d344:	d8c02017 	ldw	r3,128(sp)
1000d348:	da000404 	addi	r8,sp,16
1000d34c:	003e0406 	br	1000cb60 <__alt_data_end+0xf800cb60>
1000d350:	d9002d17 	ldw	r4,180(sp)
1000d354:	d9801e04 	addi	r6,sp,120
1000d358:	b80b883a 	mov	r5,r23
1000d35c:	00137e40 	call	100137e4 <__sprint_r>
1000d360:	103e3b26 	beq	r2,zero,1000cc50 <__alt_data_end+0xf800cc50>
1000d364:	003c7d06 	br	1000c55c <__alt_data_end+0xf800c55c>
1000d368:	d9002d17 	ldw	r4,180(sp)
1000d36c:	d9801e04 	addi	r6,sp,120
1000d370:	b80b883a 	mov	r5,r23
1000d374:	00137e40 	call	100137e4 <__sprint_r>
1000d378:	103c781e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d37c:	d8c02017 	ldw	r3,128(sp)
1000d380:	da000404 	addi	r8,sp,16
1000d384:	003de906 	br	1000cb2c <__alt_data_end+0xf800cb2c>
1000d388:	d9002d17 	ldw	r4,180(sp)
1000d38c:	d9801e04 	addi	r6,sp,120
1000d390:	b80b883a 	mov	r5,r23
1000d394:	00137e40 	call	100137e4 <__sprint_r>
1000d398:	103c701e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d39c:	d8c02017 	ldw	r3,128(sp)
1000d3a0:	da000404 	addi	r8,sp,16
1000d3a4:	003d9b06 	br	1000ca14 <__alt_data_end+0xf800ca14>
1000d3a8:	d9002d17 	ldw	r4,180(sp)
1000d3ac:	d9801e04 	addi	r6,sp,120
1000d3b0:	b80b883a 	mov	r5,r23
1000d3b4:	00137e40 	call	100137e4 <__sprint_r>
1000d3b8:	103c681e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d3bc:	d8c02017 	ldw	r3,128(sp)
1000d3c0:	da000404 	addi	r8,sp,16
1000d3c4:	003da106 	br	1000ca4c <__alt_data_end+0xf800ca4c>
1000d3c8:	d9402a17 	ldw	r5,168(sp)
1000d3cc:	d8002785 	stb	zero,158(sp)
1000d3d0:	283f0616 	blt	r5,zero,1000cfec <__alt_data_end+0xf800cfec>
1000d3d4:	00ffdfc4 	movi	r3,-129
1000d3d8:	9d84b03a 	or	r2,r19,r22
1000d3dc:	90e4703a 	and	r18,r18,r3
1000d3e0:	103c3b26 	beq	r2,zero,1000c4d0 <__alt_data_end+0xf800c4d0>
1000d3e4:	0039883a 	mov	fp,zero
1000d3e8:	003e5806 	br	1000cd4c <__alt_data_end+0xf800cd4c>
1000d3ec:	9080040c 	andi	r2,r18,16
1000d3f0:	1001b326 	beq	r2,zero,1000dac0 <___vfprintf_internal_r+0x1974>
1000d3f4:	d8c02e17 	ldw	r3,184(sp)
1000d3f8:	d9002a17 	ldw	r4,168(sp)
1000d3fc:	d8002785 	stb	zero,158(sp)
1000d400:	18800104 	addi	r2,r3,4
1000d404:	1cc00017 	ldw	r19,0(r3)
1000d408:	002d883a 	mov	r22,zero
1000d40c:	2001b516 	blt	r4,zero,1000dae4 <___vfprintf_internal_r+0x1998>
1000d410:	00ffdfc4 	movi	r3,-129
1000d414:	d8802e15 	stw	r2,184(sp)
1000d418:	90e4703a 	and	r18,r18,r3
1000d41c:	983d0526 	beq	r19,zero,1000c834 <__alt_data_end+0xf800c834>
1000d420:	0039883a 	mov	fp,zero
1000d424:	003d0806 	br	1000c848 <__alt_data_end+0xf800c848>
1000d428:	dc402617 	ldw	r17,152(sp)
1000d42c:	0441d30e 	bge	zero,r17,1000db7c <___vfprintf_internal_r+0x1a30>
1000d430:	dc403217 	ldw	r17,200(sp)
1000d434:	d8803317 	ldw	r2,204(sp)
1000d438:	1440010e 	bge	r2,r17,1000d440 <___vfprintf_internal_r+0x12f4>
1000d43c:	1023883a 	mov	r17,r2
1000d440:	04400a0e 	bge	zero,r17,1000d46c <___vfprintf_internal_r+0x1320>
1000d444:	d8801f17 	ldw	r2,124(sp)
1000d448:	1c47883a 	add	r3,r3,r17
1000d44c:	44000015 	stw	r16,0(r8)
1000d450:	10800044 	addi	r2,r2,1
1000d454:	44400115 	stw	r17,4(r8)
1000d458:	d8c02015 	stw	r3,128(sp)
1000d45c:	d8801f15 	stw	r2,124(sp)
1000d460:	010001c4 	movi	r4,7
1000d464:	20826516 	blt	r4,r2,1000ddfc <___vfprintf_internal_r+0x1cb0>
1000d468:	42000204 	addi	r8,r8,8
1000d46c:	88026116 	blt	r17,zero,1000ddf4 <___vfprintf_internal_r+0x1ca8>
1000d470:	d9003217 	ldw	r4,200(sp)
1000d474:	2463c83a 	sub	r17,r4,r17
1000d478:	04407b0e 	bge	zero,r17,1000d668 <___vfprintf_internal_r+0x151c>
1000d47c:	05800404 	movi	r22,16
1000d480:	d8801f17 	ldw	r2,124(sp)
1000d484:	b4419d0e 	bge	r22,r17,1000dafc <___vfprintf_internal_r+0x19b0>
1000d488:	010400b4 	movhi	r4,4098
1000d48c:	21248784 	addi	r4,r4,-28130
1000d490:	d9002c15 	stw	r4,176(sp)
1000d494:	070001c4 	movi	fp,7
1000d498:	dcc02d17 	ldw	r19,180(sp)
1000d49c:	00000306 	br	1000d4ac <___vfprintf_internal_r+0x1360>
1000d4a0:	42000204 	addi	r8,r8,8
1000d4a4:	8c7ffc04 	addi	r17,r17,-16
1000d4a8:	b441970e 	bge	r22,r17,1000db08 <___vfprintf_internal_r+0x19bc>
1000d4ac:	18c00404 	addi	r3,r3,16
1000d4b0:	10800044 	addi	r2,r2,1
1000d4b4:	45000015 	stw	r20,0(r8)
1000d4b8:	45800115 	stw	r22,4(r8)
1000d4bc:	d8c02015 	stw	r3,128(sp)
1000d4c0:	d8801f15 	stw	r2,124(sp)
1000d4c4:	e0bff60e 	bge	fp,r2,1000d4a0 <__alt_data_end+0xf800d4a0>
1000d4c8:	d9801e04 	addi	r6,sp,120
1000d4cc:	b80b883a 	mov	r5,r23
1000d4d0:	9809883a 	mov	r4,r19
1000d4d4:	00137e40 	call	100137e4 <__sprint_r>
1000d4d8:	103c201e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d4dc:	d8c02017 	ldw	r3,128(sp)
1000d4e0:	d8801f17 	ldw	r2,124(sp)
1000d4e4:	da000404 	addi	r8,sp,16
1000d4e8:	003fee06 	br	1000d4a4 <__alt_data_end+0xf800d4a4>
1000d4ec:	d9002d17 	ldw	r4,180(sp)
1000d4f0:	d9801e04 	addi	r6,sp,120
1000d4f4:	b80b883a 	mov	r5,r23
1000d4f8:	00137e40 	call	100137e4 <__sprint_r>
1000d4fc:	103c171e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d500:	d8c02017 	ldw	r3,128(sp)
1000d504:	df002787 	ldb	fp,158(sp)
1000d508:	da000404 	addi	r8,sp,16
1000d50c:	003d3406 	br	1000c9e0 <__alt_data_end+0xf800c9e0>
1000d510:	9080040c 	andi	r2,r18,16
1000d514:	10016126 	beq	r2,zero,1000da9c <___vfprintf_internal_r+0x1950>
1000d518:	d9402e17 	ldw	r5,184(sp)
1000d51c:	2cc00017 	ldw	r19,0(r5)
1000d520:	29400104 	addi	r5,r5,4
1000d524:	d9402e15 	stw	r5,184(sp)
1000d528:	982dd7fa 	srai	r22,r19,31
1000d52c:	b005883a 	mov	r2,r22
1000d530:	003c5a06 	br	1000c69c <__alt_data_end+0xf800c69c>
1000d534:	9080040c 	andi	r2,r18,16
1000d538:	10003526 	beq	r2,zero,1000d610 <___vfprintf_internal_r+0x14c4>
1000d53c:	d8c02e17 	ldw	r3,184(sp)
1000d540:	d9002a17 	ldw	r4,168(sp)
1000d544:	d8002785 	stb	zero,158(sp)
1000d548:	18800104 	addi	r2,r3,4
1000d54c:	1cc00017 	ldw	r19,0(r3)
1000d550:	002d883a 	mov	r22,zero
1000d554:	20003716 	blt	r4,zero,1000d634 <___vfprintf_internal_r+0x14e8>
1000d558:	00ffdfc4 	movi	r3,-129
1000d55c:	d8802e15 	stw	r2,184(sp)
1000d560:	90e4703a 	and	r18,r18,r3
1000d564:	0039883a 	mov	fp,zero
1000d568:	983dd426 	beq	r19,zero,1000ccbc <__alt_data_end+0xf800ccbc>
1000d56c:	00800244 	movi	r2,9
1000d570:	14fc5336 	bltu	r2,r19,1000c6c0 <__alt_data_end+0xf800c6c0>
1000d574:	d8c02817 	ldw	r3,160(sp)
1000d578:	dc001dc4 	addi	r16,sp,119
1000d57c:	9cc00c04 	addi	r19,r19,48
1000d580:	1c07c83a 	sub	r3,r3,r16
1000d584:	dcc01dc5 	stb	r19,119(sp)
1000d588:	d8c02b15 	stw	r3,172(sp)
1000d58c:	003cc606 	br	1000c8a8 <__alt_data_end+0xf800c8a8>
1000d590:	d8803317 	ldw	r2,204(sp)
1000d594:	143fffc4 	addi	r16,r2,-1
1000d598:	043f4d0e 	bge	zero,r16,1000d2d0 <__alt_data_end+0xf800d2d0>
1000d59c:	07000404 	movi	fp,16
1000d5a0:	e400810e 	bge	fp,r16,1000d7a8 <___vfprintf_internal_r+0x165c>
1000d5a4:	014400b4 	movhi	r5,4098
1000d5a8:	29648784 	addi	r5,r5,-28130
1000d5ac:	d9402c15 	stw	r5,176(sp)
1000d5b0:	01c001c4 	movi	r7,7
1000d5b4:	dcc02d17 	ldw	r19,180(sp)
1000d5b8:	00000306 	br	1000d5c8 <___vfprintf_internal_r+0x147c>
1000d5bc:	b5800204 	addi	r22,r22,8
1000d5c0:	843ffc04 	addi	r16,r16,-16
1000d5c4:	e4007b0e 	bge	fp,r16,1000d7b4 <___vfprintf_internal_r+0x1668>
1000d5c8:	18c00404 	addi	r3,r3,16
1000d5cc:	8c400044 	addi	r17,r17,1
1000d5d0:	b5000015 	stw	r20,0(r22)
1000d5d4:	b7000115 	stw	fp,4(r22)
1000d5d8:	d8c02015 	stw	r3,128(sp)
1000d5dc:	dc401f15 	stw	r17,124(sp)
1000d5e0:	3c7ff60e 	bge	r7,r17,1000d5bc <__alt_data_end+0xf800d5bc>
1000d5e4:	d9801e04 	addi	r6,sp,120
1000d5e8:	b80b883a 	mov	r5,r23
1000d5ec:	9809883a 	mov	r4,r19
1000d5f0:	d9c03c15 	stw	r7,240(sp)
1000d5f4:	00137e40 	call	100137e4 <__sprint_r>
1000d5f8:	d9c03c17 	ldw	r7,240(sp)
1000d5fc:	103bd71e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d600:	d8c02017 	ldw	r3,128(sp)
1000d604:	dc401f17 	ldw	r17,124(sp)
1000d608:	dd800404 	addi	r22,sp,16
1000d60c:	003fec06 	br	1000d5c0 <__alt_data_end+0xf800d5c0>
1000d610:	9080100c 	andi	r2,r18,64
1000d614:	d8002785 	stb	zero,158(sp)
1000d618:	10010e26 	beq	r2,zero,1000da54 <___vfprintf_internal_r+0x1908>
1000d61c:	d9402e17 	ldw	r5,184(sp)
1000d620:	d8c02a17 	ldw	r3,168(sp)
1000d624:	002d883a 	mov	r22,zero
1000d628:	28800104 	addi	r2,r5,4
1000d62c:	2cc0000b 	ldhu	r19,0(r5)
1000d630:	183fc90e 	bge	r3,zero,1000d558 <__alt_data_end+0xf800d558>
1000d634:	d8802e15 	stw	r2,184(sp)
1000d638:	0039883a 	mov	fp,zero
1000d63c:	9d84b03a 	or	r2,r19,r22
1000d640:	103c1e1e 	bne	r2,zero,1000c6bc <__alt_data_end+0xf800c6bc>
1000d644:	00800044 	movi	r2,1
1000d648:	003e6c06 	br	1000cffc <__alt_data_end+0xf800cffc>
1000d64c:	d9002d17 	ldw	r4,180(sp)
1000d650:	d9801e04 	addi	r6,sp,120
1000d654:	b80b883a 	mov	r5,r23
1000d658:	00137e40 	call	100137e4 <__sprint_r>
1000d65c:	103bbf1e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d660:	d8c02017 	ldw	r3,128(sp)
1000d664:	da000404 	addi	r8,sp,16
1000d668:	d9003217 	ldw	r4,200(sp)
1000d66c:	d8802617 	ldw	r2,152(sp)
1000d670:	d9403317 	ldw	r5,204(sp)
1000d674:	8123883a 	add	r17,r16,r4
1000d678:	11400216 	blt	r2,r5,1000d684 <___vfprintf_internal_r+0x1538>
1000d67c:	9100004c 	andi	r4,r18,1
1000d680:	20000d26 	beq	r4,zero,1000d6b8 <___vfprintf_internal_r+0x156c>
1000d684:	d9003717 	ldw	r4,220(sp)
1000d688:	d9403417 	ldw	r5,208(sp)
1000d68c:	1907883a 	add	r3,r3,r4
1000d690:	d9001f17 	ldw	r4,124(sp)
1000d694:	41400015 	stw	r5,0(r8)
1000d698:	d9403717 	ldw	r5,220(sp)
1000d69c:	21000044 	addi	r4,r4,1
1000d6a0:	d8c02015 	stw	r3,128(sp)
1000d6a4:	41400115 	stw	r5,4(r8)
1000d6a8:	d9001f15 	stw	r4,124(sp)
1000d6ac:	014001c4 	movi	r5,7
1000d6b0:	2901e816 	blt	r5,r4,1000de54 <___vfprintf_internal_r+0x1d08>
1000d6b4:	42000204 	addi	r8,r8,8
1000d6b8:	d9003317 	ldw	r4,204(sp)
1000d6bc:	8121883a 	add	r16,r16,r4
1000d6c0:	2085c83a 	sub	r2,r4,r2
1000d6c4:	8461c83a 	sub	r16,r16,r17
1000d6c8:	1400010e 	bge	r2,r16,1000d6d0 <___vfprintf_internal_r+0x1584>
1000d6cc:	1021883a 	mov	r16,r2
1000d6d0:	04000a0e 	bge	zero,r16,1000d6fc <___vfprintf_internal_r+0x15b0>
1000d6d4:	d9001f17 	ldw	r4,124(sp)
1000d6d8:	1c07883a 	add	r3,r3,r16
1000d6dc:	44400015 	stw	r17,0(r8)
1000d6e0:	21000044 	addi	r4,r4,1
1000d6e4:	44000115 	stw	r16,4(r8)
1000d6e8:	d8c02015 	stw	r3,128(sp)
1000d6ec:	d9001f15 	stw	r4,124(sp)
1000d6f0:	014001c4 	movi	r5,7
1000d6f4:	2901fb16 	blt	r5,r4,1000dee4 <___vfprintf_internal_r+0x1d98>
1000d6f8:	42000204 	addi	r8,r8,8
1000d6fc:	8001f716 	blt	r16,zero,1000dedc <___vfprintf_internal_r+0x1d90>
1000d700:	1421c83a 	sub	r16,r2,r16
1000d704:	043d160e 	bge	zero,r16,1000cb60 <__alt_data_end+0xf800cb60>
1000d708:	04400404 	movi	r17,16
1000d70c:	d8801f17 	ldw	r2,124(sp)
1000d710:	8c3efb0e 	bge	r17,r16,1000d300 <__alt_data_end+0xf800d300>
1000d714:	014400b4 	movhi	r5,4098
1000d718:	29648784 	addi	r5,r5,-28130
1000d71c:	d9402c15 	stw	r5,176(sp)
1000d720:	058001c4 	movi	r22,7
1000d724:	dcc02d17 	ldw	r19,180(sp)
1000d728:	00000306 	br	1000d738 <___vfprintf_internal_r+0x15ec>
1000d72c:	42000204 	addi	r8,r8,8
1000d730:	843ffc04 	addi	r16,r16,-16
1000d734:	8c3ef50e 	bge	r17,r16,1000d30c <__alt_data_end+0xf800d30c>
1000d738:	18c00404 	addi	r3,r3,16
1000d73c:	10800044 	addi	r2,r2,1
1000d740:	45000015 	stw	r20,0(r8)
1000d744:	44400115 	stw	r17,4(r8)
1000d748:	d8c02015 	stw	r3,128(sp)
1000d74c:	d8801f15 	stw	r2,124(sp)
1000d750:	b0bff60e 	bge	r22,r2,1000d72c <__alt_data_end+0xf800d72c>
1000d754:	d9801e04 	addi	r6,sp,120
1000d758:	b80b883a 	mov	r5,r23
1000d75c:	9809883a 	mov	r4,r19
1000d760:	00137e40 	call	100137e4 <__sprint_r>
1000d764:	103b7d1e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d768:	d8c02017 	ldw	r3,128(sp)
1000d76c:	d8801f17 	ldw	r2,124(sp)
1000d770:	da000404 	addi	r8,sp,16
1000d774:	003fee06 	br	1000d730 <__alt_data_end+0xf800d730>
1000d778:	9088703a 	and	r4,r18,r2
1000d77c:	203eab1e 	bne	r4,zero,1000d22c <__alt_data_end+0xf800d22c>
1000d780:	dc401f17 	ldw	r17,124(sp)
1000d784:	40800115 	stw	r2,4(r8)
1000d788:	44000015 	stw	r16,0(r8)
1000d78c:	8c400044 	addi	r17,r17,1
1000d790:	d8c02015 	stw	r3,128(sp)
1000d794:	dc401f15 	stw	r17,124(sp)
1000d798:	008001c4 	movi	r2,7
1000d79c:	14400e16 	blt	r2,r17,1000d7d8 <___vfprintf_internal_r+0x168c>
1000d7a0:	45800204 	addi	r22,r8,8
1000d7a4:	003eca06 	br	1000d2d0 <__alt_data_end+0xf800d2d0>
1000d7a8:	010400b4 	movhi	r4,4098
1000d7ac:	21248784 	addi	r4,r4,-28130
1000d7b0:	d9002c15 	stw	r4,176(sp)
1000d7b4:	d8802c17 	ldw	r2,176(sp)
1000d7b8:	1c07883a 	add	r3,r3,r16
1000d7bc:	8c400044 	addi	r17,r17,1
1000d7c0:	b0800015 	stw	r2,0(r22)
1000d7c4:	b4000115 	stw	r16,4(r22)
1000d7c8:	d8c02015 	stw	r3,128(sp)
1000d7cc:	dc401f15 	stw	r17,124(sp)
1000d7d0:	008001c4 	movi	r2,7
1000d7d4:	147ebd0e 	bge	r2,r17,1000d2cc <__alt_data_end+0xf800d2cc>
1000d7d8:	d9002d17 	ldw	r4,180(sp)
1000d7dc:	d9801e04 	addi	r6,sp,120
1000d7e0:	b80b883a 	mov	r5,r23
1000d7e4:	00137e40 	call	100137e4 <__sprint_r>
1000d7e8:	103b5c1e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d7ec:	d8c02017 	ldw	r3,128(sp)
1000d7f0:	dc401f17 	ldw	r17,124(sp)
1000d7f4:	dd800404 	addi	r22,sp,16
1000d7f8:	003eb506 	br	1000d2d0 <__alt_data_end+0xf800d2d0>
1000d7fc:	d9002d17 	ldw	r4,180(sp)
1000d800:	d9801e04 	addi	r6,sp,120
1000d804:	b80b883a 	mov	r5,r23
1000d808:	00137e40 	call	100137e4 <__sprint_r>
1000d80c:	103b531e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d810:	d8c02017 	ldw	r3,128(sp)
1000d814:	dc401f17 	ldw	r17,124(sp)
1000d818:	da000404 	addi	r8,sp,16
1000d81c:	003e8d06 	br	1000d254 <__alt_data_end+0xf800d254>
1000d820:	d9002d17 	ldw	r4,180(sp)
1000d824:	d9801e04 	addi	r6,sp,120
1000d828:	b80b883a 	mov	r5,r23
1000d82c:	00137e40 	call	100137e4 <__sprint_r>
1000d830:	103b4a1e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d834:	d8c02017 	ldw	r3,128(sp)
1000d838:	dc401f17 	ldw	r17,124(sp)
1000d83c:	dd800404 	addi	r22,sp,16
1000d840:	003e8f06 	br	1000d280 <__alt_data_end+0xf800d280>
1000d844:	0027883a 	mov	r19,zero
1000d848:	003f4a06 	br	1000d574 <__alt_data_end+0xf800d574>
1000d84c:	d9002d17 	ldw	r4,180(sp)
1000d850:	d9801e04 	addi	r6,sp,120
1000d854:	b80b883a 	mov	r5,r23
1000d858:	00137e40 	call	100137e4 <__sprint_r>
1000d85c:	103b3f1e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000d860:	d8c02017 	ldw	r3,128(sp)
1000d864:	da000404 	addi	r8,sp,16
1000d868:	003c7b06 	br	1000ca58 <__alt_data_end+0xf800ca58>
1000d86c:	d9402a17 	ldw	r5,168(sp)
1000d870:	04e7c83a 	sub	r19,zero,r19
1000d874:	07000b44 	movi	fp,45
1000d878:	9804c03a 	cmpne	r2,r19,zero
1000d87c:	05adc83a 	sub	r22,zero,r22
1000d880:	df002785 	stb	fp,158(sp)
1000d884:	b0adc83a 	sub	r22,r22,r2
1000d888:	28017b16 	blt	r5,zero,1000de78 <___vfprintf_internal_r+0x1d2c>
1000d88c:	00bfdfc4 	movi	r2,-129
1000d890:	90a4703a 	and	r18,r18,r2
1000d894:	003b8906 	br	1000c6bc <__alt_data_end+0xf800c6bc>
1000d898:	d9003617 	ldw	r4,216(sp)
1000d89c:	d9403817 	ldw	r5,224(sp)
1000d8a0:	da003d15 	stw	r8,244(sp)
1000d8a4:	00134080 	call	10013408 <__fpclassifyd>
1000d8a8:	da003d17 	ldw	r8,244(sp)
1000d8ac:	1000f026 	beq	r2,zero,1000dc70 <___vfprintf_internal_r+0x1b24>
1000d8b0:	d9002a17 	ldw	r4,168(sp)
1000d8b4:	05bff7c4 	movi	r22,-33
1000d8b8:	00bfffc4 	movi	r2,-1
1000d8bc:	8dac703a 	and	r22,r17,r22
1000d8c0:	20820026 	beq	r4,r2,1000e0c4 <___vfprintf_internal_r+0x1f78>
1000d8c4:	008011c4 	movi	r2,71
1000d8c8:	b081f726 	beq	r22,r2,1000e0a8 <___vfprintf_internal_r+0x1f5c>
1000d8cc:	d9003817 	ldw	r4,224(sp)
1000d8d0:	90c04014 	ori	r3,r18,256
1000d8d4:	d8c02c15 	stw	r3,176(sp)
1000d8d8:	20021516 	blt	r4,zero,1000e130 <___vfprintf_internal_r+0x1fe4>
1000d8dc:	dcc03817 	ldw	r19,224(sp)
1000d8e0:	d8002905 	stb	zero,164(sp)
1000d8e4:	00801984 	movi	r2,102
1000d8e8:	8881f926 	beq	r17,r2,1000e0d0 <___vfprintf_internal_r+0x1f84>
1000d8ec:	00801184 	movi	r2,70
1000d8f0:	88821c26 	beq	r17,r2,1000e164 <___vfprintf_internal_r+0x2018>
1000d8f4:	00801144 	movi	r2,69
1000d8f8:	b081ef26 	beq	r22,r2,1000e0b8 <___vfprintf_internal_r+0x1f6c>
1000d8fc:	d8c02a17 	ldw	r3,168(sp)
1000d900:	d8802104 	addi	r2,sp,132
1000d904:	d8800315 	stw	r2,12(sp)
1000d908:	d9403617 	ldw	r5,216(sp)
1000d90c:	d8802504 	addi	r2,sp,148
1000d910:	d9002d17 	ldw	r4,180(sp)
1000d914:	d8800215 	stw	r2,8(sp)
1000d918:	d8802604 	addi	r2,sp,152
1000d91c:	d8c00015 	stw	r3,0(sp)
1000d920:	d8800115 	stw	r2,4(sp)
1000d924:	01c00084 	movi	r7,2
1000d928:	980d883a 	mov	r6,r19
1000d92c:	d8c03c15 	stw	r3,240(sp)
1000d930:	da003d15 	stw	r8,244(sp)
1000d934:	000e87c0 	call	1000e87c <_dtoa_r>
1000d938:	1021883a 	mov	r16,r2
1000d93c:	008019c4 	movi	r2,103
1000d940:	d8c03c17 	ldw	r3,240(sp)
1000d944:	da003d17 	ldw	r8,244(sp)
1000d948:	88817126 	beq	r17,r2,1000df10 <___vfprintf_internal_r+0x1dc4>
1000d94c:	008011c4 	movi	r2,71
1000d950:	88829126 	beq	r17,r2,1000e398 <___vfprintf_internal_r+0x224c>
1000d954:	80f9883a 	add	fp,r16,r3
1000d958:	d9003617 	ldw	r4,216(sp)
1000d95c:	000d883a 	mov	r6,zero
1000d960:	000f883a 	mov	r7,zero
1000d964:	980b883a 	mov	r5,r19
1000d968:	da003d15 	stw	r8,244(sp)
1000d96c:	000a9a00 	call	1000a9a0 <__eqdf2>
1000d970:	da003d17 	ldw	r8,244(sp)
1000d974:	10018d26 	beq	r2,zero,1000dfac <___vfprintf_internal_r+0x1e60>
1000d978:	d8802117 	ldw	r2,132(sp)
1000d97c:	1700062e 	bgeu	r2,fp,1000d998 <___vfprintf_internal_r+0x184c>
1000d980:	01000c04 	movi	r4,48
1000d984:	10c00044 	addi	r3,r2,1
1000d988:	d8c02115 	stw	r3,132(sp)
1000d98c:	11000005 	stb	r4,0(r2)
1000d990:	d8802117 	ldw	r2,132(sp)
1000d994:	173ffb36 	bltu	r2,fp,1000d984 <__alt_data_end+0xf800d984>
1000d998:	1405c83a 	sub	r2,r2,r16
1000d99c:	d8803315 	stw	r2,204(sp)
1000d9a0:	008011c4 	movi	r2,71
1000d9a4:	b0817626 	beq	r22,r2,1000df80 <___vfprintf_internal_r+0x1e34>
1000d9a8:	00801944 	movi	r2,101
1000d9ac:	1442800e 	bge	r2,r17,1000e3b0 <___vfprintf_internal_r+0x2264>
1000d9b0:	d8c02617 	ldw	r3,152(sp)
1000d9b4:	00801984 	movi	r2,102
1000d9b8:	d8c03215 	stw	r3,200(sp)
1000d9bc:	8881fe26 	beq	r17,r2,1000e1b8 <___vfprintf_internal_r+0x206c>
1000d9c0:	d8c03217 	ldw	r3,200(sp)
1000d9c4:	d9003317 	ldw	r4,204(sp)
1000d9c8:	1901dd16 	blt	r3,r4,1000e140 <___vfprintf_internal_r+0x1ff4>
1000d9cc:	9480004c 	andi	r18,r18,1
1000d9d0:	90022b1e 	bne	r18,zero,1000e280 <___vfprintf_internal_r+0x2134>
1000d9d4:	1805883a 	mov	r2,r3
1000d9d8:	18028316 	blt	r3,zero,1000e3e8 <___vfprintf_internal_r+0x229c>
1000d9dc:	d8c03217 	ldw	r3,200(sp)
1000d9e0:	044019c4 	movi	r17,103
1000d9e4:	d8c02b15 	stw	r3,172(sp)
1000d9e8:	df002907 	ldb	fp,164(sp)
1000d9ec:	e001531e 	bne	fp,zero,1000df3c <___vfprintf_internal_r+0x1df0>
1000d9f0:	df002783 	ldbu	fp,158(sp)
1000d9f4:	d8802915 	stw	r2,164(sp)
1000d9f8:	dc802c17 	ldw	r18,176(sp)
1000d9fc:	d8002a15 	stw	zero,168(sp)
1000da00:	003baf06 	br	1000c8c0 <__alt_data_end+0xf800c8c0>
1000da04:	d8c02e17 	ldw	r3,184(sp)
1000da08:	d9002e17 	ldw	r4,184(sp)
1000da0c:	d9402e17 	ldw	r5,184(sp)
1000da10:	18c00017 	ldw	r3,0(r3)
1000da14:	21000117 	ldw	r4,4(r4)
1000da18:	29400204 	addi	r5,r5,8
1000da1c:	d8c03615 	stw	r3,216(sp)
1000da20:	d9003815 	stw	r4,224(sp)
1000da24:	d9402e15 	stw	r5,184(sp)
1000da28:	003b5006 	br	1000c76c <__alt_data_end+0xf800c76c>
1000da2c:	ac400007 	ldb	r17,0(r21)
1000da30:	003a2806 	br	1000c2d4 <__alt_data_end+0xf800c2d4>
1000da34:	9080100c 	andi	r2,r18,64
1000da38:	1000a826 	beq	r2,zero,1000dcdc <___vfprintf_internal_r+0x1b90>
1000da3c:	d8c02e17 	ldw	r3,184(sp)
1000da40:	002d883a 	mov	r22,zero
1000da44:	1cc0000b 	ldhu	r19,0(r3)
1000da48:	18c00104 	addi	r3,r3,4
1000da4c:	d8c02e15 	stw	r3,184(sp)
1000da50:	003caf06 	br	1000cd10 <__alt_data_end+0xf800cd10>
1000da54:	d9002e17 	ldw	r4,184(sp)
1000da58:	d9402a17 	ldw	r5,168(sp)
1000da5c:	002d883a 	mov	r22,zero
1000da60:	20800104 	addi	r2,r4,4
1000da64:	24c00017 	ldw	r19,0(r4)
1000da68:	283ebb0e 	bge	r5,zero,1000d558 <__alt_data_end+0xf800d558>
1000da6c:	003ef106 	br	1000d634 <__alt_data_end+0xf800d634>
1000da70:	9080040c 	andi	r2,r18,16
1000da74:	1000921e 	bne	r2,zero,1000dcc0 <___vfprintf_internal_r+0x1b74>
1000da78:	9480100c 	andi	r18,r18,64
1000da7c:	90013926 	beq	r18,zero,1000df64 <___vfprintf_internal_r+0x1e18>
1000da80:	d9402e17 	ldw	r5,184(sp)
1000da84:	d8c02f17 	ldw	r3,188(sp)
1000da88:	28800017 	ldw	r2,0(r5)
1000da8c:	29400104 	addi	r5,r5,4
1000da90:	d9402e15 	stw	r5,184(sp)
1000da94:	10c0000d 	sth	r3,0(r2)
1000da98:	0039e406 	br	1000c22c <__alt_data_end+0xf800c22c>
1000da9c:	9080100c 	andi	r2,r18,64
1000daa0:	10008026 	beq	r2,zero,1000dca4 <___vfprintf_internal_r+0x1b58>
1000daa4:	d8802e17 	ldw	r2,184(sp)
1000daa8:	14c0000f 	ldh	r19,0(r2)
1000daac:	10800104 	addi	r2,r2,4
1000dab0:	d8802e15 	stw	r2,184(sp)
1000dab4:	982dd7fa 	srai	r22,r19,31
1000dab8:	b005883a 	mov	r2,r22
1000dabc:	003af706 	br	1000c69c <__alt_data_end+0xf800c69c>
1000dac0:	9080100c 	andi	r2,r18,64
1000dac4:	d8002785 	stb	zero,158(sp)
1000dac8:	10008a1e 	bne	r2,zero,1000dcf4 <___vfprintf_internal_r+0x1ba8>
1000dacc:	d9002e17 	ldw	r4,184(sp)
1000dad0:	d9402a17 	ldw	r5,168(sp)
1000dad4:	002d883a 	mov	r22,zero
1000dad8:	20800104 	addi	r2,r4,4
1000dadc:	24c00017 	ldw	r19,0(r4)
1000dae0:	283e4b0e 	bge	r5,zero,1000d410 <__alt_data_end+0xf800d410>
1000dae4:	9d86b03a 	or	r3,r19,r22
1000dae8:	d8802e15 	stw	r2,184(sp)
1000daec:	183e4c1e 	bne	r3,zero,1000d420 <__alt_data_end+0xf800d420>
1000daf0:	0039883a 	mov	fp,zero
1000daf4:	0005883a 	mov	r2,zero
1000daf8:	003d4006 	br	1000cffc <__alt_data_end+0xf800cffc>
1000dafc:	014400b4 	movhi	r5,4098
1000db00:	29648784 	addi	r5,r5,-28130
1000db04:	d9402c15 	stw	r5,176(sp)
1000db08:	d9402c17 	ldw	r5,176(sp)
1000db0c:	1c47883a 	add	r3,r3,r17
1000db10:	10800044 	addi	r2,r2,1
1000db14:	41400015 	stw	r5,0(r8)
1000db18:	44400115 	stw	r17,4(r8)
1000db1c:	d8c02015 	stw	r3,128(sp)
1000db20:	d8801f15 	stw	r2,124(sp)
1000db24:	010001c4 	movi	r4,7
1000db28:	20bec816 	blt	r4,r2,1000d64c <__alt_data_end+0xf800d64c>
1000db2c:	42000204 	addi	r8,r8,8
1000db30:	003ecd06 	br	1000d668 <__alt_data_end+0xf800d668>
1000db34:	d9002a17 	ldw	r4,168(sp)
1000db38:	d8002785 	stb	zero,158(sp)
1000db3c:	203d2d16 	blt	r4,zero,1000cff4 <__alt_data_end+0xf800cff4>
1000db40:	00bfdfc4 	movi	r2,-129
1000db44:	90a4703a 	and	r18,r18,r2
1000db48:	003a6106 	br	1000c4d0 <__alt_data_end+0xf800c4d0>
1000db4c:	010400b4 	movhi	r4,4098
1000db50:	21248784 	addi	r4,r4,-28130
1000db54:	d9002c15 	stw	r4,176(sp)
1000db58:	003bea06 	br	1000cb04 <__alt_data_end+0xf800cb04>
1000db5c:	d9002d17 	ldw	r4,180(sp)
1000db60:	d9801e04 	addi	r6,sp,120
1000db64:	b80b883a 	mov	r5,r23
1000db68:	00137e40 	call	100137e4 <__sprint_r>
1000db6c:	103a7b1e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000db70:	d8c02017 	ldw	r3,128(sp)
1000db74:	da000404 	addi	r8,sp,16
1000db78:	003d4106 	br	1000d080 <__alt_data_end+0xf800d080>
1000db7c:	d8801f17 	ldw	r2,124(sp)
1000db80:	014400b4 	movhi	r5,4098
1000db84:	01000044 	movi	r4,1
1000db88:	18c00044 	addi	r3,r3,1
1000db8c:	10800044 	addi	r2,r2,1
1000db90:	29648704 	addi	r5,r5,-28132
1000db94:	41000115 	stw	r4,4(r8)
1000db98:	41400015 	stw	r5,0(r8)
1000db9c:	d8c02015 	stw	r3,128(sp)
1000dba0:	d8801f15 	stw	r2,124(sp)
1000dba4:	010001c4 	movi	r4,7
1000dba8:	20805c16 	blt	r4,r2,1000dd1c <___vfprintf_internal_r+0x1bd0>
1000dbac:	42000204 	addi	r8,r8,8
1000dbb0:	8800041e 	bne	r17,zero,1000dbc4 <___vfprintf_internal_r+0x1a78>
1000dbb4:	d8803317 	ldw	r2,204(sp)
1000dbb8:	1000021e 	bne	r2,zero,1000dbc4 <___vfprintf_internal_r+0x1a78>
1000dbbc:	9080004c 	andi	r2,r18,1
1000dbc0:	103be726 	beq	r2,zero,1000cb60 <__alt_data_end+0xf800cb60>
1000dbc4:	d9003717 	ldw	r4,220(sp)
1000dbc8:	d8801f17 	ldw	r2,124(sp)
1000dbcc:	d9403417 	ldw	r5,208(sp)
1000dbd0:	20c7883a 	add	r3,r4,r3
1000dbd4:	10800044 	addi	r2,r2,1
1000dbd8:	41000115 	stw	r4,4(r8)
1000dbdc:	41400015 	stw	r5,0(r8)
1000dbe0:	d8c02015 	stw	r3,128(sp)
1000dbe4:	d8801f15 	stw	r2,124(sp)
1000dbe8:	010001c4 	movi	r4,7
1000dbec:	20812116 	blt	r4,r2,1000e074 <___vfprintf_internal_r+0x1f28>
1000dbf0:	42000204 	addi	r8,r8,8
1000dbf4:	0463c83a 	sub	r17,zero,r17
1000dbf8:	0440730e 	bge	zero,r17,1000ddc8 <___vfprintf_internal_r+0x1c7c>
1000dbfc:	05800404 	movi	r22,16
1000dc00:	b440860e 	bge	r22,r17,1000de1c <___vfprintf_internal_r+0x1cd0>
1000dc04:	014400b4 	movhi	r5,4098
1000dc08:	29648784 	addi	r5,r5,-28130
1000dc0c:	d9402c15 	stw	r5,176(sp)
1000dc10:	070001c4 	movi	fp,7
1000dc14:	dcc02d17 	ldw	r19,180(sp)
1000dc18:	00000306 	br	1000dc28 <___vfprintf_internal_r+0x1adc>
1000dc1c:	42000204 	addi	r8,r8,8
1000dc20:	8c7ffc04 	addi	r17,r17,-16
1000dc24:	b440800e 	bge	r22,r17,1000de28 <___vfprintf_internal_r+0x1cdc>
1000dc28:	18c00404 	addi	r3,r3,16
1000dc2c:	10800044 	addi	r2,r2,1
1000dc30:	45000015 	stw	r20,0(r8)
1000dc34:	45800115 	stw	r22,4(r8)
1000dc38:	d8c02015 	stw	r3,128(sp)
1000dc3c:	d8801f15 	stw	r2,124(sp)
1000dc40:	e0bff60e 	bge	fp,r2,1000dc1c <__alt_data_end+0xf800dc1c>
1000dc44:	d9801e04 	addi	r6,sp,120
1000dc48:	b80b883a 	mov	r5,r23
1000dc4c:	9809883a 	mov	r4,r19
1000dc50:	00137e40 	call	100137e4 <__sprint_r>
1000dc54:	103a411e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000dc58:	d8c02017 	ldw	r3,128(sp)
1000dc5c:	d8801f17 	ldw	r2,124(sp)
1000dc60:	da000404 	addi	r8,sp,16
1000dc64:	003fee06 	br	1000dc20 <__alt_data_end+0xf800dc20>
1000dc68:	00bfffc4 	movi	r2,-1
1000dc6c:	003a3f06 	br	1000c56c <__alt_data_end+0xf800c56c>
1000dc70:	008011c4 	movi	r2,71
1000dc74:	1440b816 	blt	r2,r17,1000df58 <___vfprintf_internal_r+0x1e0c>
1000dc78:	040400b4 	movhi	r16,4098
1000dc7c:	84247904 	addi	r16,r16,-28188
1000dc80:	00c000c4 	movi	r3,3
1000dc84:	00bfdfc4 	movi	r2,-129
1000dc88:	d8c02915 	stw	r3,164(sp)
1000dc8c:	90a4703a 	and	r18,r18,r2
1000dc90:	df002783 	ldbu	fp,158(sp)
1000dc94:	d8c02b15 	stw	r3,172(sp)
1000dc98:	d8002a15 	stw	zero,168(sp)
1000dc9c:	d8003215 	stw	zero,200(sp)
1000dca0:	003b0706 	br	1000c8c0 <__alt_data_end+0xf800c8c0>
1000dca4:	d8c02e17 	ldw	r3,184(sp)
1000dca8:	1cc00017 	ldw	r19,0(r3)
1000dcac:	18c00104 	addi	r3,r3,4
1000dcb0:	d8c02e15 	stw	r3,184(sp)
1000dcb4:	982dd7fa 	srai	r22,r19,31
1000dcb8:	b005883a 	mov	r2,r22
1000dcbc:	003a7706 	br	1000c69c <__alt_data_end+0xf800c69c>
1000dcc0:	d8c02e17 	ldw	r3,184(sp)
1000dcc4:	d9002f17 	ldw	r4,188(sp)
1000dcc8:	18800017 	ldw	r2,0(r3)
1000dccc:	18c00104 	addi	r3,r3,4
1000dcd0:	d8c02e15 	stw	r3,184(sp)
1000dcd4:	11000015 	stw	r4,0(r2)
1000dcd8:	00395406 	br	1000c22c <__alt_data_end+0xf800c22c>
1000dcdc:	d9002e17 	ldw	r4,184(sp)
1000dce0:	002d883a 	mov	r22,zero
1000dce4:	24c00017 	ldw	r19,0(r4)
1000dce8:	21000104 	addi	r4,r4,4
1000dcec:	d9002e15 	stw	r4,184(sp)
1000dcf0:	003c0706 	br	1000cd10 <__alt_data_end+0xf800cd10>
1000dcf4:	d9402e17 	ldw	r5,184(sp)
1000dcf8:	d8c02a17 	ldw	r3,168(sp)
1000dcfc:	002d883a 	mov	r22,zero
1000dd00:	28800104 	addi	r2,r5,4
1000dd04:	2cc0000b 	ldhu	r19,0(r5)
1000dd08:	183dc10e 	bge	r3,zero,1000d410 <__alt_data_end+0xf800d410>
1000dd0c:	003f7506 	br	1000dae4 <__alt_data_end+0xf800dae4>
1000dd10:	040400b4 	movhi	r16,4098
1000dd14:	84247704 	addi	r16,r16,-28196
1000dd18:	003aa706 	br	1000c7b8 <__alt_data_end+0xf800c7b8>
1000dd1c:	d9002d17 	ldw	r4,180(sp)
1000dd20:	d9801e04 	addi	r6,sp,120
1000dd24:	b80b883a 	mov	r5,r23
1000dd28:	00137e40 	call	100137e4 <__sprint_r>
1000dd2c:	103a0b1e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000dd30:	dc402617 	ldw	r17,152(sp)
1000dd34:	d8c02017 	ldw	r3,128(sp)
1000dd38:	da000404 	addi	r8,sp,16
1000dd3c:	003f9c06 	br	1000dbb0 <__alt_data_end+0xf800dbb0>
1000dd40:	ac400043 	ldbu	r17,1(r21)
1000dd44:	84000814 	ori	r16,r16,32
1000dd48:	ad400044 	addi	r21,r21,1
1000dd4c:	8c403fcc 	andi	r17,r17,255
1000dd50:	8c40201c 	xori	r17,r17,128
1000dd54:	8c7fe004 	addi	r17,r17,-128
1000dd58:	00395e06 	br	1000c2d4 <__alt_data_end+0xf800c2d4>
1000dd5c:	d8c02e15 	stw	r3,184(sp)
1000dd60:	0039883a 	mov	fp,zero
1000dd64:	003e3506 	br	1000d63c <__alt_data_end+0xf800d63c>
1000dd68:	d9002d17 	ldw	r4,180(sp)
1000dd6c:	d9801e04 	addi	r6,sp,120
1000dd70:	b80b883a 	mov	r5,r23
1000dd74:	00137e40 	call	100137e4 <__sprint_r>
1000dd78:	1039f81e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000dd7c:	d8c02017 	ldw	r3,128(sp)
1000dd80:	da000404 	addi	r8,sp,16
1000dd84:	003cd006 	br	1000d0c8 <__alt_data_end+0xf800d0c8>
1000dd88:	8009883a 	mov	r4,r16
1000dd8c:	df003d15 	stw	fp,244(sp)
1000dd90:	000c0b40 	call	1000c0b4 <strlen>
1000dd94:	d8802b15 	stw	r2,172(sp)
1000dd98:	da003d17 	ldw	r8,244(sp)
1000dd9c:	103c200e 	bge	r2,zero,1000ce20 <__alt_data_end+0xf800ce20>
1000dda0:	0005883a 	mov	r2,zero
1000dda4:	003c1e06 	br	1000ce20 <__alt_data_end+0xf800ce20>
1000dda8:	d9002d17 	ldw	r4,180(sp)
1000ddac:	d9801e04 	addi	r6,sp,120
1000ddb0:	b80b883a 	mov	r5,r23
1000ddb4:	00137e40 	call	100137e4 <__sprint_r>
1000ddb8:	1039e81e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000ddbc:	d8c02017 	ldw	r3,128(sp)
1000ddc0:	d8801f17 	ldw	r2,124(sp)
1000ddc4:	da000404 	addi	r8,sp,16
1000ddc8:	d9403317 	ldw	r5,204(sp)
1000ddcc:	10800044 	addi	r2,r2,1
1000ddd0:	44000015 	stw	r16,0(r8)
1000ddd4:	28c7883a 	add	r3,r5,r3
1000ddd8:	003b5b06 	br	1000cb48 <__alt_data_end+0xf800cb48>
1000dddc:	010400b4 	movhi	r4,4098
1000dde0:	21248b84 	addi	r4,r4,-28114
1000dde4:	d9003515 	stw	r4,212(sp)
1000dde8:	003af206 	br	1000c9b4 <__alt_data_end+0xf800c9b4>
1000ddec:	013fffc4 	movi	r4,-1
1000ddf0:	003a0806 	br	1000c614 <__alt_data_end+0xf800c614>
1000ddf4:	0023883a 	mov	r17,zero
1000ddf8:	003d9d06 	br	1000d470 <__alt_data_end+0xf800d470>
1000ddfc:	d9002d17 	ldw	r4,180(sp)
1000de00:	d9801e04 	addi	r6,sp,120
1000de04:	b80b883a 	mov	r5,r23
1000de08:	00137e40 	call	100137e4 <__sprint_r>
1000de0c:	1039d31e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000de10:	d8c02017 	ldw	r3,128(sp)
1000de14:	da000404 	addi	r8,sp,16
1000de18:	003d9406 	br	1000d46c <__alt_data_end+0xf800d46c>
1000de1c:	010400b4 	movhi	r4,4098
1000de20:	21248784 	addi	r4,r4,-28130
1000de24:	d9002c15 	stw	r4,176(sp)
1000de28:	d9002c17 	ldw	r4,176(sp)
1000de2c:	1c47883a 	add	r3,r3,r17
1000de30:	10800044 	addi	r2,r2,1
1000de34:	41000015 	stw	r4,0(r8)
1000de38:	44400115 	stw	r17,4(r8)
1000de3c:	d8c02015 	stw	r3,128(sp)
1000de40:	d8801f15 	stw	r2,124(sp)
1000de44:	010001c4 	movi	r4,7
1000de48:	20bfd716 	blt	r4,r2,1000dda8 <__alt_data_end+0xf800dda8>
1000de4c:	42000204 	addi	r8,r8,8
1000de50:	003fdd06 	br	1000ddc8 <__alt_data_end+0xf800ddc8>
1000de54:	d9002d17 	ldw	r4,180(sp)
1000de58:	d9801e04 	addi	r6,sp,120
1000de5c:	b80b883a 	mov	r5,r23
1000de60:	00137e40 	call	100137e4 <__sprint_r>
1000de64:	1039bd1e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000de68:	d8802617 	ldw	r2,152(sp)
1000de6c:	d8c02017 	ldw	r3,128(sp)
1000de70:	da000404 	addi	r8,sp,16
1000de74:	003e1006 	br	1000d6b8 <__alt_data_end+0xf800d6b8>
1000de78:	00800044 	movi	r2,1
1000de7c:	10803fcc 	andi	r2,r2,255
1000de80:	00c00044 	movi	r3,1
1000de84:	10fa0d26 	beq	r2,r3,1000c6bc <__alt_data_end+0xf800c6bc>
1000de88:	00c00084 	movi	r3,2
1000de8c:	10fbaf26 	beq	r2,r3,1000cd4c <__alt_data_end+0xf800cd4c>
1000de90:	003a6d06 	br	1000c848 <__alt_data_end+0xf800c848>
1000de94:	010400b4 	movhi	r4,4098
1000de98:	21248b84 	addi	r4,r4,-28114
1000de9c:	d9003515 	stw	r4,212(sp)
1000dea0:	003b5406 	br	1000cbf4 <__alt_data_end+0xf800cbf4>
1000dea4:	d8802a17 	ldw	r2,168(sp)
1000dea8:	00c00184 	movi	r3,6
1000deac:	1880012e 	bgeu	r3,r2,1000deb4 <___vfprintf_internal_r+0x1d68>
1000deb0:	1805883a 	mov	r2,r3
1000deb4:	d8802b15 	stw	r2,172(sp)
1000deb8:	1000ef16 	blt	r2,zero,1000e278 <___vfprintf_internal_r+0x212c>
1000debc:	040400b4 	movhi	r16,4098
1000dec0:	d8802915 	stw	r2,164(sp)
1000dec4:	dcc02e15 	stw	r19,184(sp)
1000dec8:	d8002a15 	stw	zero,168(sp)
1000decc:	d8003215 	stw	zero,200(sp)
1000ded0:	84248504 	addi	r16,r16,-28140
1000ded4:	0039883a 	mov	fp,zero
1000ded8:	003a8006 	br	1000c8dc <__alt_data_end+0xf800c8dc>
1000dedc:	0021883a 	mov	r16,zero
1000dee0:	003e0706 	br	1000d700 <__alt_data_end+0xf800d700>
1000dee4:	d9002d17 	ldw	r4,180(sp)
1000dee8:	d9801e04 	addi	r6,sp,120
1000deec:	b80b883a 	mov	r5,r23
1000def0:	00137e40 	call	100137e4 <__sprint_r>
1000def4:	1039991e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000def8:	d8802617 	ldw	r2,152(sp)
1000defc:	d9403317 	ldw	r5,204(sp)
1000df00:	d8c02017 	ldw	r3,128(sp)
1000df04:	da000404 	addi	r8,sp,16
1000df08:	2885c83a 	sub	r2,r5,r2
1000df0c:	003dfb06 	br	1000d6fc <__alt_data_end+0xf800d6fc>
1000df10:	9080004c 	andi	r2,r18,1
1000df14:	103e8f1e 	bne	r2,zero,1000d954 <__alt_data_end+0xf800d954>
1000df18:	d8802117 	ldw	r2,132(sp)
1000df1c:	003e9e06 	br	1000d998 <__alt_data_end+0xf800d998>
1000df20:	1025883a 	mov	r18,r2
1000df24:	0039883a 	mov	fp,zero
1000df28:	00800084 	movi	r2,2
1000df2c:	003fd306 	br	1000de7c <__alt_data_end+0xf800de7c>
1000df30:	07000b44 	movi	fp,45
1000df34:	df002785 	stb	fp,158(sp)
1000df38:	003a1b06 	br	1000c7a8 <__alt_data_end+0xf800c7a8>
1000df3c:	00c00b44 	movi	r3,45
1000df40:	d8c02785 	stb	r3,158(sp)
1000df44:	d8802915 	stw	r2,164(sp)
1000df48:	dc802c17 	ldw	r18,176(sp)
1000df4c:	d8002a15 	stw	zero,168(sp)
1000df50:	07000b44 	movi	fp,45
1000df54:	003a5e06 	br	1000c8d0 <__alt_data_end+0xf800c8d0>
1000df58:	040400b4 	movhi	r16,4098
1000df5c:	84247a04 	addi	r16,r16,-28184
1000df60:	003f4706 	br	1000dc80 <__alt_data_end+0xf800dc80>
1000df64:	d9002e17 	ldw	r4,184(sp)
1000df68:	d9402f17 	ldw	r5,188(sp)
1000df6c:	20800017 	ldw	r2,0(r4)
1000df70:	21000104 	addi	r4,r4,4
1000df74:	d9002e15 	stw	r4,184(sp)
1000df78:	11400015 	stw	r5,0(r2)
1000df7c:	0038ab06 	br	1000c22c <__alt_data_end+0xf800c22c>
1000df80:	dd802617 	ldw	r22,152(sp)
1000df84:	00bfff44 	movi	r2,-3
1000df88:	b0801c16 	blt	r22,r2,1000dffc <___vfprintf_internal_r+0x1eb0>
1000df8c:	d9402a17 	ldw	r5,168(sp)
1000df90:	2d801a16 	blt	r5,r22,1000dffc <___vfprintf_internal_r+0x1eb0>
1000df94:	dd803215 	stw	r22,200(sp)
1000df98:	003e8906 	br	1000d9c0 <__alt_data_end+0xf800d9c0>
1000df9c:	010400b4 	movhi	r4,4098
1000dfa0:	21248784 	addi	r4,r4,-28130
1000dfa4:	d9002c15 	stw	r4,176(sp)
1000dfa8:	003c9106 	br	1000d1f0 <__alt_data_end+0xf800d1f0>
1000dfac:	e005883a 	mov	r2,fp
1000dfb0:	003e7906 	br	1000d998 <__alt_data_end+0xf800d998>
1000dfb4:	d9002a17 	ldw	r4,168(sp)
1000dfb8:	df002783 	ldbu	fp,158(sp)
1000dfbc:	dcc02e15 	stw	r19,184(sp)
1000dfc0:	d9002915 	stw	r4,164(sp)
1000dfc4:	d9002b15 	stw	r4,172(sp)
1000dfc8:	d8002a15 	stw	zero,168(sp)
1000dfcc:	d8003215 	stw	zero,200(sp)
1000dfd0:	003a3b06 	br	1000c8c0 <__alt_data_end+0xf800c8c0>
1000dfd4:	9080004c 	andi	r2,r18,1
1000dfd8:	0039883a 	mov	fp,zero
1000dfdc:	10000426 	beq	r2,zero,1000dff0 <___vfprintf_internal_r+0x1ea4>
1000dfe0:	00800c04 	movi	r2,48
1000dfe4:	dc001dc4 	addi	r16,sp,119
1000dfe8:	d8801dc5 	stb	r2,119(sp)
1000dfec:	003b6406 	br	1000cd80 <__alt_data_end+0xf800cd80>
1000dff0:	d8002b15 	stw	zero,172(sp)
1000dff4:	dc001e04 	addi	r16,sp,120
1000dff8:	003a2b06 	br	1000c8a8 <__alt_data_end+0xf800c8a8>
1000dffc:	8c7fff84 	addi	r17,r17,-2
1000e000:	b5bfffc4 	addi	r22,r22,-1
1000e004:	dd802615 	stw	r22,152(sp)
1000e008:	dc4022c5 	stb	r17,139(sp)
1000e00c:	b000bf16 	blt	r22,zero,1000e30c <___vfprintf_internal_r+0x21c0>
1000e010:	00800ac4 	movi	r2,43
1000e014:	d8802305 	stb	r2,140(sp)
1000e018:	00800244 	movi	r2,9
1000e01c:	15807016 	blt	r2,r22,1000e1e0 <___vfprintf_internal_r+0x2094>
1000e020:	00800c04 	movi	r2,48
1000e024:	b5800c04 	addi	r22,r22,48
1000e028:	d8802345 	stb	r2,141(sp)
1000e02c:	dd802385 	stb	r22,142(sp)
1000e030:	d88023c4 	addi	r2,sp,143
1000e034:	df0022c4 	addi	fp,sp,139
1000e038:	d8c03317 	ldw	r3,204(sp)
1000e03c:	1739c83a 	sub	fp,r2,fp
1000e040:	d9003317 	ldw	r4,204(sp)
1000e044:	e0c7883a 	add	r3,fp,r3
1000e048:	df003a15 	stw	fp,232(sp)
1000e04c:	d8c02b15 	stw	r3,172(sp)
1000e050:	00800044 	movi	r2,1
1000e054:	1100b30e 	bge	r2,r4,1000e324 <___vfprintf_internal_r+0x21d8>
1000e058:	d8c02b17 	ldw	r3,172(sp)
1000e05c:	18c00044 	addi	r3,r3,1
1000e060:	d8c02b15 	stw	r3,172(sp)
1000e064:	1805883a 	mov	r2,r3
1000e068:	1800ac16 	blt	r3,zero,1000e31c <___vfprintf_internal_r+0x21d0>
1000e06c:	d8003215 	stw	zero,200(sp)
1000e070:	003e5d06 	br	1000d9e8 <__alt_data_end+0xf800d9e8>
1000e074:	d9002d17 	ldw	r4,180(sp)
1000e078:	d9801e04 	addi	r6,sp,120
1000e07c:	b80b883a 	mov	r5,r23
1000e080:	00137e40 	call	100137e4 <__sprint_r>
1000e084:	1039351e 	bne	r2,zero,1000c55c <__alt_data_end+0xf800c55c>
1000e088:	dc402617 	ldw	r17,152(sp)
1000e08c:	d8c02017 	ldw	r3,128(sp)
1000e090:	d8801f17 	ldw	r2,124(sp)
1000e094:	da000404 	addi	r8,sp,16
1000e098:	003ed606 	br	1000dbf4 <__alt_data_end+0xf800dbf4>
1000e09c:	182b883a 	mov	r21,r3
1000e0a0:	d8002a15 	stw	zero,168(sp)
1000e0a4:	00388c06 	br	1000c2d8 <__alt_data_end+0xf800c2d8>
1000e0a8:	d8802a17 	ldw	r2,168(sp)
1000e0ac:	103e071e 	bne	r2,zero,1000d8cc <__alt_data_end+0xf800d8cc>
1000e0b0:	dc002a15 	stw	r16,168(sp)
1000e0b4:	003e0506 	br	1000d8cc <__alt_data_end+0xf800d8cc>
1000e0b8:	d9002a17 	ldw	r4,168(sp)
1000e0bc:	20c00044 	addi	r3,r4,1
1000e0c0:	003e0f06 	br	1000d900 <__alt_data_end+0xf800d900>
1000e0c4:	01400184 	movi	r5,6
1000e0c8:	d9402a15 	stw	r5,168(sp)
1000e0cc:	003dff06 	br	1000d8cc <__alt_data_end+0xf800d8cc>
1000e0d0:	d8802104 	addi	r2,sp,132
1000e0d4:	d8800315 	stw	r2,12(sp)
1000e0d8:	d8802504 	addi	r2,sp,148
1000e0dc:	d8800215 	stw	r2,8(sp)
1000e0e0:	d8802604 	addi	r2,sp,152
1000e0e4:	d8800115 	stw	r2,4(sp)
1000e0e8:	d8802a17 	ldw	r2,168(sp)
1000e0ec:	d9403617 	ldw	r5,216(sp)
1000e0f0:	d9002d17 	ldw	r4,180(sp)
1000e0f4:	d8800015 	stw	r2,0(sp)
1000e0f8:	01c000c4 	movi	r7,3
1000e0fc:	980d883a 	mov	r6,r19
1000e100:	da003d15 	stw	r8,244(sp)
1000e104:	000e87c0 	call	1000e87c <_dtoa_r>
1000e108:	d8c02a17 	ldw	r3,168(sp)
1000e10c:	da003d17 	ldw	r8,244(sp)
1000e110:	1021883a 	mov	r16,r2
1000e114:	10f9883a 	add	fp,r2,r3
1000e118:	81000007 	ldb	r4,0(r16)
1000e11c:	00800c04 	movi	r2,48
1000e120:	20805e26 	beq	r4,r2,1000e29c <___vfprintf_internal_r+0x2150>
1000e124:	d8c02617 	ldw	r3,152(sp)
1000e128:	e0f9883a 	add	fp,fp,r3
1000e12c:	003e0a06 	br	1000d958 <__alt_data_end+0xf800d958>
1000e130:	00c00b44 	movi	r3,45
1000e134:	24e0003c 	xorhi	r19,r4,32768
1000e138:	d8c02905 	stb	r3,164(sp)
1000e13c:	003de906 	br	1000d8e4 <__alt_data_end+0xf800d8e4>
1000e140:	d8c03217 	ldw	r3,200(sp)
1000e144:	00c07a0e 	bge	zero,r3,1000e330 <___vfprintf_internal_r+0x21e4>
1000e148:	00800044 	movi	r2,1
1000e14c:	d9003317 	ldw	r4,204(sp)
1000e150:	1105883a 	add	r2,r2,r4
1000e154:	d8802b15 	stw	r2,172(sp)
1000e158:	10004e16 	blt	r2,zero,1000e294 <___vfprintf_internal_r+0x2148>
1000e15c:	044019c4 	movi	r17,103
1000e160:	003e2106 	br	1000d9e8 <__alt_data_end+0xf800d9e8>
1000e164:	d9002a17 	ldw	r4,168(sp)
1000e168:	d8802104 	addi	r2,sp,132
1000e16c:	d8800315 	stw	r2,12(sp)
1000e170:	d9000015 	stw	r4,0(sp)
1000e174:	d8802504 	addi	r2,sp,148
1000e178:	d9403617 	ldw	r5,216(sp)
1000e17c:	d9002d17 	ldw	r4,180(sp)
1000e180:	d8800215 	stw	r2,8(sp)
1000e184:	d8802604 	addi	r2,sp,152
1000e188:	d8800115 	stw	r2,4(sp)
1000e18c:	01c000c4 	movi	r7,3
1000e190:	980d883a 	mov	r6,r19
1000e194:	da003d15 	stw	r8,244(sp)
1000e198:	000e87c0 	call	1000e87c <_dtoa_r>
1000e19c:	d8c02a17 	ldw	r3,168(sp)
1000e1a0:	da003d17 	ldw	r8,244(sp)
1000e1a4:	1021883a 	mov	r16,r2
1000e1a8:	00801184 	movi	r2,70
1000e1ac:	80f9883a 	add	fp,r16,r3
1000e1b0:	88bfd926 	beq	r17,r2,1000e118 <__alt_data_end+0xf800e118>
1000e1b4:	003de806 	br	1000d958 <__alt_data_end+0xf800d958>
1000e1b8:	d9002a17 	ldw	r4,168(sp)
1000e1bc:	00c04d0e 	bge	zero,r3,1000e2f4 <___vfprintf_internal_r+0x21a8>
1000e1c0:	2000441e 	bne	r4,zero,1000e2d4 <___vfprintf_internal_r+0x2188>
1000e1c4:	9480004c 	andi	r18,r18,1
1000e1c8:	9000421e 	bne	r18,zero,1000e2d4 <___vfprintf_internal_r+0x2188>
1000e1cc:	1805883a 	mov	r2,r3
1000e1d0:	18006f16 	blt	r3,zero,1000e390 <___vfprintf_internal_r+0x2244>
1000e1d4:	d8c03217 	ldw	r3,200(sp)
1000e1d8:	d8c02b15 	stw	r3,172(sp)
1000e1dc:	003e0206 	br	1000d9e8 <__alt_data_end+0xf800d9e8>
1000e1e0:	df0022c4 	addi	fp,sp,139
1000e1e4:	dc002a15 	stw	r16,168(sp)
1000e1e8:	4027883a 	mov	r19,r8
1000e1ec:	e021883a 	mov	r16,fp
1000e1f0:	b009883a 	mov	r4,r22
1000e1f4:	01400284 	movi	r5,10
1000e1f8:	00095cc0 	call	100095cc <__modsi3>
1000e1fc:	10800c04 	addi	r2,r2,48
1000e200:	843fffc4 	addi	r16,r16,-1
1000e204:	b009883a 	mov	r4,r22
1000e208:	01400284 	movi	r5,10
1000e20c:	80800005 	stb	r2,0(r16)
1000e210:	00095480 	call	10009548 <__divsi3>
1000e214:	102d883a 	mov	r22,r2
1000e218:	00800244 	movi	r2,9
1000e21c:	15bff416 	blt	r2,r22,1000e1f0 <__alt_data_end+0xf800e1f0>
1000e220:	9811883a 	mov	r8,r19
1000e224:	b0800c04 	addi	r2,r22,48
1000e228:	8027883a 	mov	r19,r16
1000e22c:	997fffc4 	addi	r5,r19,-1
1000e230:	98bfffc5 	stb	r2,-1(r19)
1000e234:	dc002a17 	ldw	r16,168(sp)
1000e238:	2f006d2e 	bgeu	r5,fp,1000e3f0 <___vfprintf_internal_r+0x22a4>
1000e23c:	d9c02384 	addi	r7,sp,142
1000e240:	3ccfc83a 	sub	r7,r7,r19
1000e244:	d9002344 	addi	r4,sp,141
1000e248:	e1cf883a 	add	r7,fp,r7
1000e24c:	00000106 	br	1000e254 <___vfprintf_internal_r+0x2108>
1000e250:	28800003 	ldbu	r2,0(r5)
1000e254:	20800005 	stb	r2,0(r4)
1000e258:	21000044 	addi	r4,r4,1
1000e25c:	29400044 	addi	r5,r5,1
1000e260:	393ffb1e 	bne	r7,r4,1000e250 <__alt_data_end+0xf800e250>
1000e264:	d8802304 	addi	r2,sp,140
1000e268:	14c5c83a 	sub	r2,r2,r19
1000e26c:	d8c02344 	addi	r3,sp,141
1000e270:	1885883a 	add	r2,r3,r2
1000e274:	003f7006 	br	1000e038 <__alt_data_end+0xf800e038>
1000e278:	0005883a 	mov	r2,zero
1000e27c:	003f0f06 	br	1000debc <__alt_data_end+0xf800debc>
1000e280:	d8c03217 	ldw	r3,200(sp)
1000e284:	18c00044 	addi	r3,r3,1
1000e288:	d8c02b15 	stw	r3,172(sp)
1000e28c:	1805883a 	mov	r2,r3
1000e290:	183fb20e 	bge	r3,zero,1000e15c <__alt_data_end+0xf800e15c>
1000e294:	0005883a 	mov	r2,zero
1000e298:	003fb006 	br	1000e15c <__alt_data_end+0xf800e15c>
1000e29c:	d9003617 	ldw	r4,216(sp)
1000e2a0:	000d883a 	mov	r6,zero
1000e2a4:	000f883a 	mov	r7,zero
1000e2a8:	980b883a 	mov	r5,r19
1000e2ac:	d8c03c15 	stw	r3,240(sp)
1000e2b0:	da003d15 	stw	r8,244(sp)
1000e2b4:	000a9a00 	call	1000a9a0 <__eqdf2>
1000e2b8:	d8c03c17 	ldw	r3,240(sp)
1000e2bc:	da003d17 	ldw	r8,244(sp)
1000e2c0:	103f9826 	beq	r2,zero,1000e124 <__alt_data_end+0xf800e124>
1000e2c4:	00800044 	movi	r2,1
1000e2c8:	10c7c83a 	sub	r3,r2,r3
1000e2cc:	d8c02615 	stw	r3,152(sp)
1000e2d0:	003f9506 	br	1000e128 <__alt_data_end+0xf800e128>
1000e2d4:	d9002a17 	ldw	r4,168(sp)
1000e2d8:	d8c03217 	ldw	r3,200(sp)
1000e2dc:	20800044 	addi	r2,r4,1
1000e2e0:	1885883a 	add	r2,r3,r2
1000e2e4:	d8802b15 	stw	r2,172(sp)
1000e2e8:	103dbf0e 	bge	r2,zero,1000d9e8 <__alt_data_end+0xf800d9e8>
1000e2ec:	0005883a 	mov	r2,zero
1000e2f0:	003dbd06 	br	1000d9e8 <__alt_data_end+0xf800d9e8>
1000e2f4:	2000201e 	bne	r4,zero,1000e378 <___vfprintf_internal_r+0x222c>
1000e2f8:	9480004c 	andi	r18,r18,1
1000e2fc:	90001e1e 	bne	r18,zero,1000e378 <___vfprintf_internal_r+0x222c>
1000e300:	00800044 	movi	r2,1
1000e304:	d8802b15 	stw	r2,172(sp)
1000e308:	003db706 	br	1000d9e8 <__alt_data_end+0xf800d9e8>
1000e30c:	00800b44 	movi	r2,45
1000e310:	05adc83a 	sub	r22,zero,r22
1000e314:	d8802305 	stb	r2,140(sp)
1000e318:	003f3f06 	br	1000e018 <__alt_data_end+0xf800e018>
1000e31c:	0005883a 	mov	r2,zero
1000e320:	003f5206 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e324:	90a4703a 	and	r18,r18,r2
1000e328:	903f4e26 	beq	r18,zero,1000e064 <__alt_data_end+0xf800e064>
1000e32c:	003f4a06 	br	1000e058 <__alt_data_end+0xf800e058>
1000e330:	00800084 	movi	r2,2
1000e334:	10c5c83a 	sub	r2,r2,r3
1000e338:	003f8406 	br	1000e14c <__alt_data_end+0xf800e14c>
1000e33c:	d9402e17 	ldw	r5,184(sp)
1000e340:	d9002e17 	ldw	r4,184(sp)
1000e344:	ac400043 	ldbu	r17,1(r21)
1000e348:	29400017 	ldw	r5,0(r5)
1000e34c:	20800104 	addi	r2,r4,4
1000e350:	d8802e15 	stw	r2,184(sp)
1000e354:	d9402a15 	stw	r5,168(sp)
1000e358:	182b883a 	mov	r21,r3
1000e35c:	283e7b0e 	bge	r5,zero,1000dd4c <__alt_data_end+0xf800dd4c>
1000e360:	8c403fcc 	andi	r17,r17,255
1000e364:	017fffc4 	movi	r5,-1
1000e368:	8c40201c 	xori	r17,r17,128
1000e36c:	d9402a15 	stw	r5,168(sp)
1000e370:	8c7fe004 	addi	r17,r17,-128
1000e374:	0037d706 	br	1000c2d4 <__alt_data_end+0xf800c2d4>
1000e378:	d8c02a17 	ldw	r3,168(sp)
1000e37c:	18c00084 	addi	r3,r3,2
1000e380:	d8c02b15 	stw	r3,172(sp)
1000e384:	1805883a 	mov	r2,r3
1000e388:	183d970e 	bge	r3,zero,1000d9e8 <__alt_data_end+0xf800d9e8>
1000e38c:	003fd706 	br	1000e2ec <__alt_data_end+0xf800e2ec>
1000e390:	0005883a 	mov	r2,zero
1000e394:	003f8f06 	br	1000e1d4 <__alt_data_end+0xf800e1d4>
1000e398:	9080004c 	andi	r2,r18,1
1000e39c:	103f821e 	bne	r2,zero,1000e1a8 <__alt_data_end+0xf800e1a8>
1000e3a0:	d8802117 	ldw	r2,132(sp)
1000e3a4:	1405c83a 	sub	r2,r2,r16
1000e3a8:	d8803315 	stw	r2,204(sp)
1000e3ac:	b47ef426 	beq	r22,r17,1000df80 <__alt_data_end+0xf800df80>
1000e3b0:	dd802617 	ldw	r22,152(sp)
1000e3b4:	003f1206 	br	1000e000 <__alt_data_end+0xf800e000>
1000e3b8:	d8c02b03 	ldbu	r3,172(sp)
1000e3bc:	d8c02785 	stb	r3,158(sp)
1000e3c0:	0038df06 	br	1000c740 <__alt_data_end+0xf800c740>
1000e3c4:	d8c02b03 	ldbu	r3,172(sp)
1000e3c8:	d8c02785 	stb	r3,158(sp)
1000e3cc:	0038aa06 	br	1000c678 <__alt_data_end+0xf800c678>
1000e3d0:	d8c02b03 	ldbu	r3,172(sp)
1000e3d4:	d8c02785 	stb	r3,158(sp)
1000e3d8:	003a4306 	br	1000cce8 <__alt_data_end+0xf800cce8>
1000e3dc:	d8c02b03 	ldbu	r3,172(sp)
1000e3e0:	d8c02785 	stb	r3,158(sp)
1000e3e4:	003af506 	br	1000cfbc <__alt_data_end+0xf800cfbc>
1000e3e8:	0005883a 	mov	r2,zero
1000e3ec:	003d7b06 	br	1000d9dc <__alt_data_end+0xf800d9dc>
1000e3f0:	d8802344 	addi	r2,sp,141
1000e3f4:	003f1006 	br	1000e038 <__alt_data_end+0xf800e038>
1000e3f8:	d8c02b03 	ldbu	r3,172(sp)
1000e3fc:	d8c02785 	stb	r3,158(sp)
1000e400:	0038fd06 	br	1000c7f8 <__alt_data_end+0xf800c7f8>
1000e404:	d8c02b03 	ldbu	r3,172(sp)
1000e408:	d8c02785 	stb	r3,158(sp)
1000e40c:	003a9706 	br	1000ce6c <__alt_data_end+0xf800ce6c>
1000e410:	d8c02b03 	ldbu	r3,172(sp)
1000e414:	d8c02785 	stb	r3,158(sp)
1000e418:	003a1806 	br	1000cc7c <__alt_data_end+0xf800cc7c>
1000e41c:	d8c02b03 	ldbu	r3,172(sp)
1000e420:	d8c02785 	stb	r3,158(sp)
1000e424:	003abe06 	br	1000cf20 <__alt_data_end+0xf800cf20>

1000e428 <__vfprintf_internal>:
1000e428:	008400b4 	movhi	r2,4098
1000e42c:	10acbd04 	addi	r2,r2,-19724
1000e430:	300f883a 	mov	r7,r6
1000e434:	280d883a 	mov	r6,r5
1000e438:	200b883a 	mov	r5,r4
1000e43c:	11000017 	ldw	r4,0(r2)
1000e440:	000c14c1 	jmpi	1000c14c <___vfprintf_internal_r>

1000e444 <__sbprintf>:
1000e444:	2880030b 	ldhu	r2,12(r5)
1000e448:	2ac01917 	ldw	r11,100(r5)
1000e44c:	2a80038b 	ldhu	r10,14(r5)
1000e450:	2a400717 	ldw	r9,28(r5)
1000e454:	2a000917 	ldw	r8,36(r5)
1000e458:	defee204 	addi	sp,sp,-1144
1000e45c:	00c10004 	movi	r3,1024
1000e460:	dc011a15 	stw	r16,1128(sp)
1000e464:	10bfff4c 	andi	r2,r2,65533
1000e468:	2821883a 	mov	r16,r5
1000e46c:	d8cb883a 	add	r5,sp,r3
1000e470:	dc811c15 	stw	r18,1136(sp)
1000e474:	dc411b15 	stw	r17,1132(sp)
1000e478:	dfc11d15 	stw	ra,1140(sp)
1000e47c:	2025883a 	mov	r18,r4
1000e480:	d881030d 	sth	r2,1036(sp)
1000e484:	dac11915 	stw	r11,1124(sp)
1000e488:	da81038d 	sth	r10,1038(sp)
1000e48c:	da410715 	stw	r9,1052(sp)
1000e490:	da010915 	stw	r8,1060(sp)
1000e494:	dec10015 	stw	sp,1024(sp)
1000e498:	dec10415 	stw	sp,1040(sp)
1000e49c:	d8c10215 	stw	r3,1032(sp)
1000e4a0:	d8c10515 	stw	r3,1044(sp)
1000e4a4:	d8010615 	stw	zero,1048(sp)
1000e4a8:	000c14c0 	call	1000c14c <___vfprintf_internal_r>
1000e4ac:	1023883a 	mov	r17,r2
1000e4b0:	10000416 	blt	r2,zero,1000e4c4 <__sbprintf+0x80>
1000e4b4:	d9410004 	addi	r5,sp,1024
1000e4b8:	9009883a 	mov	r4,r18
1000e4bc:	00101200 	call	10010120 <_fflush_r>
1000e4c0:	10000d1e 	bne	r2,zero,1000e4f8 <__sbprintf+0xb4>
1000e4c4:	d881030b 	ldhu	r2,1036(sp)
1000e4c8:	1080100c 	andi	r2,r2,64
1000e4cc:	10000326 	beq	r2,zero,1000e4dc <__sbprintf+0x98>
1000e4d0:	8080030b 	ldhu	r2,12(r16)
1000e4d4:	10801014 	ori	r2,r2,64
1000e4d8:	8080030d 	sth	r2,12(r16)
1000e4dc:	8805883a 	mov	r2,r17
1000e4e0:	dfc11d17 	ldw	ra,1140(sp)
1000e4e4:	dc811c17 	ldw	r18,1136(sp)
1000e4e8:	dc411b17 	ldw	r17,1132(sp)
1000e4ec:	dc011a17 	ldw	r16,1128(sp)
1000e4f0:	dec11e04 	addi	sp,sp,1144
1000e4f4:	f800283a 	ret
1000e4f8:	047fffc4 	movi	r17,-1
1000e4fc:	003ff106 	br	1000e4c4 <__alt_data_end+0xf800e4c4>

1000e500 <__swsetup_r>:
1000e500:	008400b4 	movhi	r2,4098
1000e504:	defffd04 	addi	sp,sp,-12
1000e508:	10acbd04 	addi	r2,r2,-19724
1000e50c:	dc400115 	stw	r17,4(sp)
1000e510:	2023883a 	mov	r17,r4
1000e514:	11000017 	ldw	r4,0(r2)
1000e518:	dc000015 	stw	r16,0(sp)
1000e51c:	dfc00215 	stw	ra,8(sp)
1000e520:	2821883a 	mov	r16,r5
1000e524:	20000226 	beq	r4,zero,1000e530 <__swsetup_r+0x30>
1000e528:	20800e17 	ldw	r2,56(r4)
1000e52c:	10003126 	beq	r2,zero,1000e5f4 <__swsetup_r+0xf4>
1000e530:	8080030b 	ldhu	r2,12(r16)
1000e534:	10c0020c 	andi	r3,r2,8
1000e538:	1009883a 	mov	r4,r2
1000e53c:	18000f26 	beq	r3,zero,1000e57c <__swsetup_r+0x7c>
1000e540:	80c00417 	ldw	r3,16(r16)
1000e544:	18001526 	beq	r3,zero,1000e59c <__swsetup_r+0x9c>
1000e548:	1100004c 	andi	r4,r2,1
1000e54c:	20001c1e 	bne	r4,zero,1000e5c0 <__swsetup_r+0xc0>
1000e550:	1080008c 	andi	r2,r2,2
1000e554:	1000291e 	bne	r2,zero,1000e5fc <__swsetup_r+0xfc>
1000e558:	80800517 	ldw	r2,20(r16)
1000e55c:	80800215 	stw	r2,8(r16)
1000e560:	18001c26 	beq	r3,zero,1000e5d4 <__swsetup_r+0xd4>
1000e564:	0005883a 	mov	r2,zero
1000e568:	dfc00217 	ldw	ra,8(sp)
1000e56c:	dc400117 	ldw	r17,4(sp)
1000e570:	dc000017 	ldw	r16,0(sp)
1000e574:	dec00304 	addi	sp,sp,12
1000e578:	f800283a 	ret
1000e57c:	2080040c 	andi	r2,r4,16
1000e580:	10002e26 	beq	r2,zero,1000e63c <__swsetup_r+0x13c>
1000e584:	2080010c 	andi	r2,r4,4
1000e588:	10001e1e 	bne	r2,zero,1000e604 <__swsetup_r+0x104>
1000e58c:	80c00417 	ldw	r3,16(r16)
1000e590:	20800214 	ori	r2,r4,8
1000e594:	8080030d 	sth	r2,12(r16)
1000e598:	183feb1e 	bne	r3,zero,1000e548 <__alt_data_end+0xf800e548>
1000e59c:	1100a00c 	andi	r4,r2,640
1000e5a0:	01408004 	movi	r5,512
1000e5a4:	217fe826 	beq	r4,r5,1000e548 <__alt_data_end+0xf800e548>
1000e5a8:	800b883a 	mov	r5,r16
1000e5ac:	8809883a 	mov	r4,r17
1000e5b0:	00110bc0 	call	100110bc <__smakebuf_r>
1000e5b4:	8080030b 	ldhu	r2,12(r16)
1000e5b8:	80c00417 	ldw	r3,16(r16)
1000e5bc:	003fe206 	br	1000e548 <__alt_data_end+0xf800e548>
1000e5c0:	80800517 	ldw	r2,20(r16)
1000e5c4:	80000215 	stw	zero,8(r16)
1000e5c8:	0085c83a 	sub	r2,zero,r2
1000e5cc:	80800615 	stw	r2,24(r16)
1000e5d0:	183fe41e 	bne	r3,zero,1000e564 <__alt_data_end+0xf800e564>
1000e5d4:	80c0030b 	ldhu	r3,12(r16)
1000e5d8:	0005883a 	mov	r2,zero
1000e5dc:	1900200c 	andi	r4,r3,128
1000e5e0:	203fe126 	beq	r4,zero,1000e568 <__alt_data_end+0xf800e568>
1000e5e4:	18c01014 	ori	r3,r3,64
1000e5e8:	80c0030d 	sth	r3,12(r16)
1000e5ec:	00bfffc4 	movi	r2,-1
1000e5f0:	003fdd06 	br	1000e568 <__alt_data_end+0xf800e568>
1000e5f4:	001050c0 	call	1001050c <__sinit>
1000e5f8:	003fcd06 	br	1000e530 <__alt_data_end+0xf800e530>
1000e5fc:	0005883a 	mov	r2,zero
1000e600:	003fd606 	br	1000e55c <__alt_data_end+0xf800e55c>
1000e604:	81400c17 	ldw	r5,48(r16)
1000e608:	28000626 	beq	r5,zero,1000e624 <__swsetup_r+0x124>
1000e60c:	80801004 	addi	r2,r16,64
1000e610:	28800326 	beq	r5,r2,1000e620 <__swsetup_r+0x120>
1000e614:	8809883a 	mov	r4,r17
1000e618:	00106800 	call	10010680 <_free_r>
1000e61c:	8100030b 	ldhu	r4,12(r16)
1000e620:	80000c15 	stw	zero,48(r16)
1000e624:	80c00417 	ldw	r3,16(r16)
1000e628:	00bff6c4 	movi	r2,-37
1000e62c:	1108703a 	and	r4,r2,r4
1000e630:	80000115 	stw	zero,4(r16)
1000e634:	80c00015 	stw	r3,0(r16)
1000e638:	003fd506 	br	1000e590 <__alt_data_end+0xf800e590>
1000e63c:	00800244 	movi	r2,9
1000e640:	88800015 	stw	r2,0(r17)
1000e644:	20801014 	ori	r2,r4,64
1000e648:	8080030d 	sth	r2,12(r16)
1000e64c:	00bfffc4 	movi	r2,-1
1000e650:	003fc506 	br	1000e568 <__alt_data_end+0xf800e568>

1000e654 <quorem>:
1000e654:	defff204 	addi	sp,sp,-56
1000e658:	ddc00b15 	stw	r23,44(sp)
1000e65c:	20800417 	ldw	r2,16(r4)
1000e660:	2dc00417 	ldw	r23,16(r5)
1000e664:	dfc00d15 	stw	ra,52(sp)
1000e668:	df000c15 	stw	fp,48(sp)
1000e66c:	dd800a15 	stw	r22,40(sp)
1000e670:	dd400915 	stw	r21,36(sp)
1000e674:	dd000815 	stw	r20,32(sp)
1000e678:	dcc00715 	stw	r19,28(sp)
1000e67c:	dc800615 	stw	r18,24(sp)
1000e680:	dc400515 	stw	r17,20(sp)
1000e684:	dc000415 	stw	r16,16(sp)
1000e688:	15c07a16 	blt	r2,r23,1000e874 <quorem+0x220>
1000e68c:	bdffffc4 	addi	r23,r23,-1
1000e690:	bde9883a 	add	r20,r23,r23
1000e694:	28c00504 	addi	r3,r5,20
1000e698:	a529883a 	add	r20,r20,r20
1000e69c:	1d39883a 	add	fp,r3,r20
1000e6a0:	24c00504 	addi	r19,r4,20
1000e6a4:	d9400215 	stw	r5,8(sp)
1000e6a8:	9d29883a 	add	r20,r19,r20
1000e6ac:	e1400017 	ldw	r5,0(fp)
1000e6b0:	d9000015 	stw	r4,0(sp)
1000e6b4:	a1000017 	ldw	r4,0(r20)
1000e6b8:	29400044 	addi	r5,r5,1
1000e6bc:	d8c00115 	stw	r3,4(sp)
1000e6c0:	dd000315 	stw	r20,12(sp)
1000e6c4:	00096400 	call	10009640 <__udivsi3>
1000e6c8:	1025883a 	mov	r18,r2
1000e6cc:	10003026 	beq	r2,zero,1000e790 <quorem+0x13c>
1000e6d0:	dc400117 	ldw	r17,4(sp)
1000e6d4:	9829883a 	mov	r20,r19
1000e6d8:	002d883a 	mov	r22,zero
1000e6dc:	0021883a 	mov	r16,zero
1000e6e0:	8d400017 	ldw	r21,0(r17)
1000e6e4:	900b883a 	mov	r5,r18
1000e6e8:	8c400104 	addi	r17,r17,4
1000e6ec:	a93fffcc 	andi	r4,r21,65535
1000e6f0:	00096fc0 	call	100096fc <__mulsi3>
1000e6f4:	a808d43a 	srli	r4,r21,16
1000e6f8:	900b883a 	mov	r5,r18
1000e6fc:	15ad883a 	add	r22,r2,r22
1000e700:	00096fc0 	call	100096fc <__mulsi3>
1000e704:	a1000017 	ldw	r4,0(r20)
1000e708:	b00cd43a 	srli	r6,r22,16
1000e70c:	b0ffffcc 	andi	r3,r22,65535
1000e710:	217fffcc 	andi	r5,r4,65535
1000e714:	2c21883a 	add	r16,r5,r16
1000e718:	80c7c83a 	sub	r3,r16,r3
1000e71c:	2008d43a 	srli	r4,r4,16
1000e720:	1185883a 	add	r2,r2,r6
1000e724:	1821d43a 	srai	r16,r3,16
1000e728:	117fffcc 	andi	r5,r2,65535
1000e72c:	2149c83a 	sub	r4,r4,r5
1000e730:	2421883a 	add	r16,r4,r16
1000e734:	8008943a 	slli	r4,r16,16
1000e738:	18ffffcc 	andi	r3,r3,65535
1000e73c:	102cd43a 	srli	r22,r2,16
1000e740:	20c8b03a 	or	r4,r4,r3
1000e744:	a1000015 	stw	r4,0(r20)
1000e748:	8021d43a 	srai	r16,r16,16
1000e74c:	a5000104 	addi	r20,r20,4
1000e750:	e47fe32e 	bgeu	fp,r17,1000e6e0 <__alt_data_end+0xf800e6e0>
1000e754:	d8c00317 	ldw	r3,12(sp)
1000e758:	18800017 	ldw	r2,0(r3)
1000e75c:	10000c1e 	bne	r2,zero,1000e790 <quorem+0x13c>
1000e760:	18bfff04 	addi	r2,r3,-4
1000e764:	9880082e 	bgeu	r19,r2,1000e788 <quorem+0x134>
1000e768:	18ffff17 	ldw	r3,-4(r3)
1000e76c:	18000326 	beq	r3,zero,1000e77c <quorem+0x128>
1000e770:	00000506 	br	1000e788 <quorem+0x134>
1000e774:	10c00017 	ldw	r3,0(r2)
1000e778:	1800031e 	bne	r3,zero,1000e788 <quorem+0x134>
1000e77c:	10bfff04 	addi	r2,r2,-4
1000e780:	bdffffc4 	addi	r23,r23,-1
1000e784:	98bffb36 	bltu	r19,r2,1000e774 <__alt_data_end+0xf800e774>
1000e788:	d8c00017 	ldw	r3,0(sp)
1000e78c:	1dc00415 	stw	r23,16(r3)
1000e790:	d9400217 	ldw	r5,8(sp)
1000e794:	d9000017 	ldw	r4,0(sp)
1000e798:	00127700 	call	10012770 <__mcmp>
1000e79c:	10002816 	blt	r2,zero,1000e840 <quorem+0x1ec>
1000e7a0:	dc400117 	ldw	r17,4(sp)
1000e7a4:	94800044 	addi	r18,r18,1
1000e7a8:	980d883a 	mov	r6,r19
1000e7ac:	0007883a 	mov	r3,zero
1000e7b0:	31000017 	ldw	r4,0(r6)
1000e7b4:	89400017 	ldw	r5,0(r17)
1000e7b8:	31800104 	addi	r6,r6,4
1000e7bc:	20bfffcc 	andi	r2,r4,65535
1000e7c0:	10c7883a 	add	r3,r2,r3
1000e7c4:	28bfffcc 	andi	r2,r5,65535
1000e7c8:	1885c83a 	sub	r2,r3,r2
1000e7cc:	280ad43a 	srli	r5,r5,16
1000e7d0:	2008d43a 	srli	r4,r4,16
1000e7d4:	1007d43a 	srai	r3,r2,16
1000e7d8:	10bfffcc 	andi	r2,r2,65535
1000e7dc:	2149c83a 	sub	r4,r4,r5
1000e7e0:	20c9883a 	add	r4,r4,r3
1000e7e4:	200a943a 	slli	r5,r4,16
1000e7e8:	8c400104 	addi	r17,r17,4
1000e7ec:	2007d43a 	srai	r3,r4,16
1000e7f0:	2884b03a 	or	r2,r5,r2
1000e7f4:	30bfff15 	stw	r2,-4(r6)
1000e7f8:	e47fed2e 	bgeu	fp,r17,1000e7b0 <__alt_data_end+0xf800e7b0>
1000e7fc:	bdc5883a 	add	r2,r23,r23
1000e800:	1085883a 	add	r2,r2,r2
1000e804:	9887883a 	add	r3,r19,r2
1000e808:	18800017 	ldw	r2,0(r3)
1000e80c:	10000c1e 	bne	r2,zero,1000e840 <quorem+0x1ec>
1000e810:	18bfff04 	addi	r2,r3,-4
1000e814:	9880082e 	bgeu	r19,r2,1000e838 <quorem+0x1e4>
1000e818:	18ffff17 	ldw	r3,-4(r3)
1000e81c:	18000326 	beq	r3,zero,1000e82c <quorem+0x1d8>
1000e820:	00000506 	br	1000e838 <quorem+0x1e4>
1000e824:	10c00017 	ldw	r3,0(r2)
1000e828:	1800031e 	bne	r3,zero,1000e838 <quorem+0x1e4>
1000e82c:	10bfff04 	addi	r2,r2,-4
1000e830:	bdffffc4 	addi	r23,r23,-1
1000e834:	98bffb36 	bltu	r19,r2,1000e824 <__alt_data_end+0xf800e824>
1000e838:	d8c00017 	ldw	r3,0(sp)
1000e83c:	1dc00415 	stw	r23,16(r3)
1000e840:	9005883a 	mov	r2,r18
1000e844:	dfc00d17 	ldw	ra,52(sp)
1000e848:	df000c17 	ldw	fp,48(sp)
1000e84c:	ddc00b17 	ldw	r23,44(sp)
1000e850:	dd800a17 	ldw	r22,40(sp)
1000e854:	dd400917 	ldw	r21,36(sp)
1000e858:	dd000817 	ldw	r20,32(sp)
1000e85c:	dcc00717 	ldw	r19,28(sp)
1000e860:	dc800617 	ldw	r18,24(sp)
1000e864:	dc400517 	ldw	r17,20(sp)
1000e868:	dc000417 	ldw	r16,16(sp)
1000e86c:	dec00e04 	addi	sp,sp,56
1000e870:	f800283a 	ret
1000e874:	0005883a 	mov	r2,zero
1000e878:	003ff206 	br	1000e844 <__alt_data_end+0xf800e844>

1000e87c <_dtoa_r>:
1000e87c:	20801017 	ldw	r2,64(r4)
1000e880:	deffde04 	addi	sp,sp,-136
1000e884:	df002015 	stw	fp,128(sp)
1000e888:	dcc01b15 	stw	r19,108(sp)
1000e88c:	dc801a15 	stw	r18,104(sp)
1000e890:	dc401915 	stw	r17,100(sp)
1000e894:	dc001815 	stw	r16,96(sp)
1000e898:	dfc02115 	stw	ra,132(sp)
1000e89c:	ddc01f15 	stw	r23,124(sp)
1000e8a0:	dd801e15 	stw	r22,120(sp)
1000e8a4:	dd401d15 	stw	r21,116(sp)
1000e8a8:	dd001c15 	stw	r20,112(sp)
1000e8ac:	d9c00315 	stw	r7,12(sp)
1000e8b0:	2039883a 	mov	fp,r4
1000e8b4:	3023883a 	mov	r17,r6
1000e8b8:	2825883a 	mov	r18,r5
1000e8bc:	dc002417 	ldw	r16,144(sp)
1000e8c0:	3027883a 	mov	r19,r6
1000e8c4:	10000826 	beq	r2,zero,1000e8e8 <_dtoa_r+0x6c>
1000e8c8:	21801117 	ldw	r6,68(r4)
1000e8cc:	00c00044 	movi	r3,1
1000e8d0:	100b883a 	mov	r5,r2
1000e8d4:	1986983a 	sll	r3,r3,r6
1000e8d8:	11800115 	stw	r6,4(r2)
1000e8dc:	10c00215 	stw	r3,8(r2)
1000e8e0:	0011e940 	call	10011e94 <_Bfree>
1000e8e4:	e0001015 	stw	zero,64(fp)
1000e8e8:	88002e16 	blt	r17,zero,1000e9a4 <_dtoa_r+0x128>
1000e8ec:	80000015 	stw	zero,0(r16)
1000e8f0:	889ffc2c 	andhi	r2,r17,32752
1000e8f4:	00dffc34 	movhi	r3,32752
1000e8f8:	10c01c26 	beq	r2,r3,1000e96c <_dtoa_r+0xf0>
1000e8fc:	000d883a 	mov	r6,zero
1000e900:	000f883a 	mov	r7,zero
1000e904:	9009883a 	mov	r4,r18
1000e908:	980b883a 	mov	r5,r19
1000e90c:	000a9a00 	call	1000a9a0 <__eqdf2>
1000e910:	10002b1e 	bne	r2,zero,1000e9c0 <_dtoa_r+0x144>
1000e914:	d9c02317 	ldw	r7,140(sp)
1000e918:	00800044 	movi	r2,1
1000e91c:	38800015 	stw	r2,0(r7)
1000e920:	d8802517 	ldw	r2,148(sp)
1000e924:	10019e26 	beq	r2,zero,1000efa0 <_dtoa_r+0x724>
1000e928:	d8c02517 	ldw	r3,148(sp)
1000e92c:	008400b4 	movhi	r2,4098
1000e930:	10a48744 	addi	r2,r2,-28131
1000e934:	18800015 	stw	r2,0(r3)
1000e938:	10bfffc4 	addi	r2,r2,-1
1000e93c:	dfc02117 	ldw	ra,132(sp)
1000e940:	df002017 	ldw	fp,128(sp)
1000e944:	ddc01f17 	ldw	r23,124(sp)
1000e948:	dd801e17 	ldw	r22,120(sp)
1000e94c:	dd401d17 	ldw	r21,116(sp)
1000e950:	dd001c17 	ldw	r20,112(sp)
1000e954:	dcc01b17 	ldw	r19,108(sp)
1000e958:	dc801a17 	ldw	r18,104(sp)
1000e95c:	dc401917 	ldw	r17,100(sp)
1000e960:	dc001817 	ldw	r16,96(sp)
1000e964:	dec02204 	addi	sp,sp,136
1000e968:	f800283a 	ret
1000e96c:	d8c02317 	ldw	r3,140(sp)
1000e970:	0089c3c4 	movi	r2,9999
1000e974:	18800015 	stw	r2,0(r3)
1000e978:	90017726 	beq	r18,zero,1000ef58 <_dtoa_r+0x6dc>
1000e97c:	008400b4 	movhi	r2,4098
1000e980:	10a49304 	addi	r2,r2,-28084
1000e984:	d9002517 	ldw	r4,148(sp)
1000e988:	203fec26 	beq	r4,zero,1000e93c <__alt_data_end+0xf800e93c>
1000e98c:	10c000c7 	ldb	r3,3(r2)
1000e990:	1801781e 	bne	r3,zero,1000ef74 <_dtoa_r+0x6f8>
1000e994:	10c000c4 	addi	r3,r2,3
1000e998:	d9802517 	ldw	r6,148(sp)
1000e99c:	30c00015 	stw	r3,0(r6)
1000e9a0:	003fe606 	br	1000e93c <__alt_data_end+0xf800e93c>
1000e9a4:	04e00034 	movhi	r19,32768
1000e9a8:	9cffffc4 	addi	r19,r19,-1
1000e9ac:	00800044 	movi	r2,1
1000e9b0:	8ce6703a 	and	r19,r17,r19
1000e9b4:	80800015 	stw	r2,0(r16)
1000e9b8:	9823883a 	mov	r17,r19
1000e9bc:	003fcc06 	br	1000e8f0 <__alt_data_end+0xf800e8f0>
1000e9c0:	d8800204 	addi	r2,sp,8
1000e9c4:	d8800015 	stw	r2,0(sp)
1000e9c8:	d9c00104 	addi	r7,sp,4
1000e9cc:	900b883a 	mov	r5,r18
1000e9d0:	980d883a 	mov	r6,r19
1000e9d4:	e009883a 	mov	r4,fp
1000e9d8:	8820d53a 	srli	r16,r17,20
1000e9dc:	0012b3c0 	call	10012b3c <__d2b>
1000e9e0:	d8800915 	stw	r2,36(sp)
1000e9e4:	8001651e 	bne	r16,zero,1000ef7c <_dtoa_r+0x700>
1000e9e8:	dd800217 	ldw	r22,8(sp)
1000e9ec:	dc000117 	ldw	r16,4(sp)
1000e9f0:	00800804 	movi	r2,32
1000e9f4:	b421883a 	add	r16,r22,r16
1000e9f8:	80c10c84 	addi	r3,r16,1074
1000e9fc:	10c2d10e 	bge	r2,r3,1000f544 <_dtoa_r+0xcc8>
1000ea00:	00801004 	movi	r2,64
1000ea04:	81010484 	addi	r4,r16,1042
1000ea08:	10c7c83a 	sub	r3,r2,r3
1000ea0c:	9108d83a 	srl	r4,r18,r4
1000ea10:	88e2983a 	sll	r17,r17,r3
1000ea14:	2448b03a 	or	r4,r4,r17
1000ea18:	00163e00 	call	100163e0 <__floatunsidf>
1000ea1c:	017f8434 	movhi	r5,65040
1000ea20:	01800044 	movi	r6,1
1000ea24:	1009883a 	mov	r4,r2
1000ea28:	194b883a 	add	r5,r3,r5
1000ea2c:	843fffc4 	addi	r16,r16,-1
1000ea30:	d9801115 	stw	r6,68(sp)
1000ea34:	000d883a 	mov	r6,zero
1000ea38:	01cffe34 	movhi	r7,16376
1000ea3c:	000b3700 	call	1000b370 <__subdf3>
1000ea40:	0198dbf4 	movhi	r6,25455
1000ea44:	01cff4f4 	movhi	r7,16339
1000ea48:	3190d844 	addi	r6,r6,17249
1000ea4c:	39e1e9c4 	addi	r7,r7,-30809
1000ea50:	1009883a 	mov	r4,r2
1000ea54:	180b883a 	mov	r5,r3
1000ea58:	000ab040 	call	1000ab04 <__muldf3>
1000ea5c:	01a2d874 	movhi	r6,35681
1000ea60:	01cff1f4 	movhi	r7,16327
1000ea64:	31b22cc4 	addi	r6,r6,-14157
1000ea68:	39e28a04 	addi	r7,r7,-30168
1000ea6c:	180b883a 	mov	r5,r3
1000ea70:	1009883a 	mov	r4,r2
1000ea74:	00097240 	call	10009724 <__adddf3>
1000ea78:	8009883a 	mov	r4,r16
1000ea7c:	1029883a 	mov	r20,r2
1000ea80:	1823883a 	mov	r17,r3
1000ea84:	000bcec0 	call	1000bcec <__floatsidf>
1000ea88:	019427f4 	movhi	r6,20639
1000ea8c:	01cff4f4 	movhi	r7,16339
1000ea90:	319e7ec4 	addi	r6,r6,31227
1000ea94:	39d104c4 	addi	r7,r7,17427
1000ea98:	1009883a 	mov	r4,r2
1000ea9c:	180b883a 	mov	r5,r3
1000eaa0:	000ab040 	call	1000ab04 <__muldf3>
1000eaa4:	100d883a 	mov	r6,r2
1000eaa8:	180f883a 	mov	r7,r3
1000eaac:	a009883a 	mov	r4,r20
1000eab0:	880b883a 	mov	r5,r17
1000eab4:	00097240 	call	10009724 <__adddf3>
1000eab8:	1009883a 	mov	r4,r2
1000eabc:	180b883a 	mov	r5,r3
1000eac0:	1029883a 	mov	r20,r2
1000eac4:	1823883a 	mov	r17,r3
1000eac8:	000bc6c0 	call	1000bc6c <__fixdfsi>
1000eacc:	000d883a 	mov	r6,zero
1000ead0:	000f883a 	mov	r7,zero
1000ead4:	a009883a 	mov	r4,r20
1000ead8:	880b883a 	mov	r5,r17
1000eadc:	d8800515 	stw	r2,20(sp)
1000eae0:	00162ec0 	call	100162ec <__ledf2>
1000eae4:	10028716 	blt	r2,zero,1000f504 <_dtoa_r+0xc88>
1000eae8:	d8c00517 	ldw	r3,20(sp)
1000eaec:	00800584 	movi	r2,22
1000eaf0:	10c27536 	bltu	r2,r3,1000f4c8 <_dtoa_r+0xc4c>
1000eaf4:	180490fa 	slli	r2,r3,3
1000eaf8:	00c400b4 	movhi	r3,4098
1000eafc:	18e4af04 	addi	r3,r3,-27972
1000eb00:	1885883a 	add	r2,r3,r2
1000eb04:	11000017 	ldw	r4,0(r2)
1000eb08:	11400117 	ldw	r5,4(r2)
1000eb0c:	900d883a 	mov	r6,r18
1000eb10:	980f883a 	mov	r7,r19
1000eb14:	000aa280 	call	1000aa28 <__gedf2>
1000eb18:	00828d0e 	bge	zero,r2,1000f550 <_dtoa_r+0xcd4>
1000eb1c:	d9000517 	ldw	r4,20(sp)
1000eb20:	d8000e15 	stw	zero,56(sp)
1000eb24:	213fffc4 	addi	r4,r4,-1
1000eb28:	d9000515 	stw	r4,20(sp)
1000eb2c:	b42dc83a 	sub	r22,r22,r16
1000eb30:	b5bfffc4 	addi	r22,r22,-1
1000eb34:	b0026f16 	blt	r22,zero,1000f4f4 <_dtoa_r+0xc78>
1000eb38:	d8000815 	stw	zero,32(sp)
1000eb3c:	d9c00517 	ldw	r7,20(sp)
1000eb40:	38026416 	blt	r7,zero,1000f4d4 <_dtoa_r+0xc58>
1000eb44:	b1ed883a 	add	r22,r22,r7
1000eb48:	d9c00d15 	stw	r7,52(sp)
1000eb4c:	d8000a15 	stw	zero,40(sp)
1000eb50:	d9800317 	ldw	r6,12(sp)
1000eb54:	00800244 	movi	r2,9
1000eb58:	11811436 	bltu	r2,r6,1000efac <_dtoa_r+0x730>
1000eb5c:	00800144 	movi	r2,5
1000eb60:	1184e10e 	bge	r2,r6,1000fee8 <_dtoa_r+0x166c>
1000eb64:	31bfff04 	addi	r6,r6,-4
1000eb68:	d9800315 	stw	r6,12(sp)
1000eb6c:	0023883a 	mov	r17,zero
1000eb70:	d9800317 	ldw	r6,12(sp)
1000eb74:	008000c4 	movi	r2,3
1000eb78:	30836726 	beq	r6,r2,1000f918 <_dtoa_r+0x109c>
1000eb7c:	1183410e 	bge	r2,r6,1000f884 <_dtoa_r+0x1008>
1000eb80:	d9c00317 	ldw	r7,12(sp)
1000eb84:	00800104 	movi	r2,4
1000eb88:	38827c26 	beq	r7,r2,1000f57c <_dtoa_r+0xd00>
1000eb8c:	00800144 	movi	r2,5
1000eb90:	3884c41e 	bne	r7,r2,1000fea4 <_dtoa_r+0x1628>
1000eb94:	00800044 	movi	r2,1
1000eb98:	d8800b15 	stw	r2,44(sp)
1000eb9c:	d8c00517 	ldw	r3,20(sp)
1000eba0:	d9002217 	ldw	r4,136(sp)
1000eba4:	1907883a 	add	r3,r3,r4
1000eba8:	19800044 	addi	r6,r3,1
1000ebac:	d8c00c15 	stw	r3,48(sp)
1000ebb0:	d9800615 	stw	r6,24(sp)
1000ebb4:	0183a40e 	bge	zero,r6,1000fa48 <_dtoa_r+0x11cc>
1000ebb8:	d9800617 	ldw	r6,24(sp)
1000ebbc:	3021883a 	mov	r16,r6
1000ebc0:	e0001115 	stw	zero,68(fp)
1000ebc4:	008005c4 	movi	r2,23
1000ebc8:	1184c92e 	bgeu	r2,r6,1000fef0 <_dtoa_r+0x1674>
1000ebcc:	00c00044 	movi	r3,1
1000ebd0:	00800104 	movi	r2,4
1000ebd4:	1085883a 	add	r2,r2,r2
1000ebd8:	11000504 	addi	r4,r2,20
1000ebdc:	180b883a 	mov	r5,r3
1000ebe0:	18c00044 	addi	r3,r3,1
1000ebe4:	313ffb2e 	bgeu	r6,r4,1000ebd4 <__alt_data_end+0xf800ebd4>
1000ebe8:	e1401115 	stw	r5,68(fp)
1000ebec:	e009883a 	mov	r4,fp
1000ebf0:	0011dec0 	call	10011dec <_Balloc>
1000ebf4:	d8800715 	stw	r2,28(sp)
1000ebf8:	e0801015 	stw	r2,64(fp)
1000ebfc:	00800384 	movi	r2,14
1000ec00:	1400f736 	bltu	r2,r16,1000efe0 <_dtoa_r+0x764>
1000ec04:	8800f626 	beq	r17,zero,1000efe0 <_dtoa_r+0x764>
1000ec08:	d9c00517 	ldw	r7,20(sp)
1000ec0c:	01c39a0e 	bge	zero,r7,1000fa78 <_dtoa_r+0x11fc>
1000ec10:	388003cc 	andi	r2,r7,15
1000ec14:	100490fa 	slli	r2,r2,3
1000ec18:	382bd13a 	srai	r21,r7,4
1000ec1c:	00c400b4 	movhi	r3,4098
1000ec20:	18e4af04 	addi	r3,r3,-27972
1000ec24:	1885883a 	add	r2,r3,r2
1000ec28:	a8c0040c 	andi	r3,r21,16
1000ec2c:	12400017 	ldw	r9,0(r2)
1000ec30:	12000117 	ldw	r8,4(r2)
1000ec34:	18037926 	beq	r3,zero,1000fa1c <_dtoa_r+0x11a0>
1000ec38:	008400b4 	movhi	r2,4098
1000ec3c:	10a4a504 	addi	r2,r2,-28012
1000ec40:	11800817 	ldw	r6,32(r2)
1000ec44:	11c00917 	ldw	r7,36(r2)
1000ec48:	9009883a 	mov	r4,r18
1000ec4c:	980b883a 	mov	r5,r19
1000ec50:	da001715 	stw	r8,92(sp)
1000ec54:	da401615 	stw	r9,88(sp)
1000ec58:	0009fd00 	call	10009fd0 <__divdf3>
1000ec5c:	da001717 	ldw	r8,92(sp)
1000ec60:	da401617 	ldw	r9,88(sp)
1000ec64:	ad4003cc 	andi	r21,r21,15
1000ec68:	040000c4 	movi	r16,3
1000ec6c:	1023883a 	mov	r17,r2
1000ec70:	1829883a 	mov	r20,r3
1000ec74:	a8001126 	beq	r21,zero,1000ecbc <_dtoa_r+0x440>
1000ec78:	05c400b4 	movhi	r23,4098
1000ec7c:	bde4a504 	addi	r23,r23,-28012
1000ec80:	4805883a 	mov	r2,r9
1000ec84:	4007883a 	mov	r3,r8
1000ec88:	a980004c 	andi	r6,r21,1
1000ec8c:	1009883a 	mov	r4,r2
1000ec90:	a82bd07a 	srai	r21,r21,1
1000ec94:	180b883a 	mov	r5,r3
1000ec98:	30000426 	beq	r6,zero,1000ecac <_dtoa_r+0x430>
1000ec9c:	b9800017 	ldw	r6,0(r23)
1000eca0:	b9c00117 	ldw	r7,4(r23)
1000eca4:	84000044 	addi	r16,r16,1
1000eca8:	000ab040 	call	1000ab04 <__muldf3>
1000ecac:	bdc00204 	addi	r23,r23,8
1000ecb0:	a83ff51e 	bne	r21,zero,1000ec88 <__alt_data_end+0xf800ec88>
1000ecb4:	1013883a 	mov	r9,r2
1000ecb8:	1811883a 	mov	r8,r3
1000ecbc:	480d883a 	mov	r6,r9
1000ecc0:	400f883a 	mov	r7,r8
1000ecc4:	8809883a 	mov	r4,r17
1000ecc8:	a00b883a 	mov	r5,r20
1000eccc:	0009fd00 	call	10009fd0 <__divdf3>
1000ecd0:	d8800f15 	stw	r2,60(sp)
1000ecd4:	d8c01015 	stw	r3,64(sp)
1000ecd8:	d8c00e17 	ldw	r3,56(sp)
1000ecdc:	18000626 	beq	r3,zero,1000ecf8 <_dtoa_r+0x47c>
1000ece0:	d9000f17 	ldw	r4,60(sp)
1000ece4:	d9401017 	ldw	r5,64(sp)
1000ece8:	000d883a 	mov	r6,zero
1000ecec:	01cffc34 	movhi	r7,16368
1000ecf0:	00162ec0 	call	100162ec <__ledf2>
1000ecf4:	10040b16 	blt	r2,zero,1000fd24 <_dtoa_r+0x14a8>
1000ecf8:	8009883a 	mov	r4,r16
1000ecfc:	000bcec0 	call	1000bcec <__floatsidf>
1000ed00:	d9800f17 	ldw	r6,60(sp)
1000ed04:	d9c01017 	ldw	r7,64(sp)
1000ed08:	1009883a 	mov	r4,r2
1000ed0c:	180b883a 	mov	r5,r3
1000ed10:	000ab040 	call	1000ab04 <__muldf3>
1000ed14:	000d883a 	mov	r6,zero
1000ed18:	01d00734 	movhi	r7,16412
1000ed1c:	1009883a 	mov	r4,r2
1000ed20:	180b883a 	mov	r5,r3
1000ed24:	00097240 	call	10009724 <__adddf3>
1000ed28:	1021883a 	mov	r16,r2
1000ed2c:	d8800617 	ldw	r2,24(sp)
1000ed30:	047f3034 	movhi	r17,64704
1000ed34:	1c63883a 	add	r17,r3,r17
1000ed38:	10031826 	beq	r2,zero,1000f99c <_dtoa_r+0x1120>
1000ed3c:	d8c00517 	ldw	r3,20(sp)
1000ed40:	db000617 	ldw	r12,24(sp)
1000ed44:	d8c01315 	stw	r3,76(sp)
1000ed48:	d9000b17 	ldw	r4,44(sp)
1000ed4c:	20038f26 	beq	r4,zero,1000fb8c <_dtoa_r+0x1310>
1000ed50:	60bfffc4 	addi	r2,r12,-1
1000ed54:	100490fa 	slli	r2,r2,3
1000ed58:	00c400b4 	movhi	r3,4098
1000ed5c:	18e4af04 	addi	r3,r3,-27972
1000ed60:	1885883a 	add	r2,r3,r2
1000ed64:	11800017 	ldw	r6,0(r2)
1000ed68:	11c00117 	ldw	r7,4(r2)
1000ed6c:	d8800717 	ldw	r2,28(sp)
1000ed70:	0009883a 	mov	r4,zero
1000ed74:	014ff834 	movhi	r5,16352
1000ed78:	db001615 	stw	r12,88(sp)
1000ed7c:	15c00044 	addi	r23,r2,1
1000ed80:	0009fd00 	call	10009fd0 <__divdf3>
1000ed84:	800d883a 	mov	r6,r16
1000ed88:	880f883a 	mov	r7,r17
1000ed8c:	1009883a 	mov	r4,r2
1000ed90:	180b883a 	mov	r5,r3
1000ed94:	000b3700 	call	1000b370 <__subdf3>
1000ed98:	d9401017 	ldw	r5,64(sp)
1000ed9c:	d9000f17 	ldw	r4,60(sp)
1000eda0:	102b883a 	mov	r21,r2
1000eda4:	d8c01215 	stw	r3,72(sp)
1000eda8:	000bc6c0 	call	1000bc6c <__fixdfsi>
1000edac:	1009883a 	mov	r4,r2
1000edb0:	1029883a 	mov	r20,r2
1000edb4:	000bcec0 	call	1000bcec <__floatsidf>
1000edb8:	d9000f17 	ldw	r4,60(sp)
1000edbc:	d9401017 	ldw	r5,64(sp)
1000edc0:	100d883a 	mov	r6,r2
1000edc4:	180f883a 	mov	r7,r3
1000edc8:	000b3700 	call	1000b370 <__subdf3>
1000edcc:	1823883a 	mov	r17,r3
1000edd0:	d8c00717 	ldw	r3,28(sp)
1000edd4:	d9401217 	ldw	r5,72(sp)
1000edd8:	a2000c04 	addi	r8,r20,48
1000eddc:	1021883a 	mov	r16,r2
1000ede0:	1a000005 	stb	r8,0(r3)
1000ede4:	800d883a 	mov	r6,r16
1000ede8:	880f883a 	mov	r7,r17
1000edec:	a809883a 	mov	r4,r21
1000edf0:	4029883a 	mov	r20,r8
1000edf4:	000aa280 	call	1000aa28 <__gedf2>
1000edf8:	00841d16 	blt	zero,r2,1000fe70 <_dtoa_r+0x15f4>
1000edfc:	800d883a 	mov	r6,r16
1000ee00:	880f883a 	mov	r7,r17
1000ee04:	0009883a 	mov	r4,zero
1000ee08:	014ffc34 	movhi	r5,16368
1000ee0c:	000b3700 	call	1000b370 <__subdf3>
1000ee10:	d9401217 	ldw	r5,72(sp)
1000ee14:	100d883a 	mov	r6,r2
1000ee18:	180f883a 	mov	r7,r3
1000ee1c:	a809883a 	mov	r4,r21
1000ee20:	000aa280 	call	1000aa28 <__gedf2>
1000ee24:	db001617 	ldw	r12,88(sp)
1000ee28:	00840e16 	blt	zero,r2,1000fe64 <_dtoa_r+0x15e8>
1000ee2c:	00800044 	movi	r2,1
1000ee30:	13006b0e 	bge	r2,r12,1000efe0 <_dtoa_r+0x764>
1000ee34:	d9000717 	ldw	r4,28(sp)
1000ee38:	dd800f15 	stw	r22,60(sp)
1000ee3c:	dcc01015 	stw	r19,64(sp)
1000ee40:	2319883a 	add	r12,r4,r12
1000ee44:	dcc01217 	ldw	r19,72(sp)
1000ee48:	602d883a 	mov	r22,r12
1000ee4c:	dc801215 	stw	r18,72(sp)
1000ee50:	b825883a 	mov	r18,r23
1000ee54:	00000906 	br	1000ee7c <_dtoa_r+0x600>
1000ee58:	000b3700 	call	1000b370 <__subdf3>
1000ee5c:	a80d883a 	mov	r6,r21
1000ee60:	980f883a 	mov	r7,r19
1000ee64:	1009883a 	mov	r4,r2
1000ee68:	180b883a 	mov	r5,r3
1000ee6c:	00162ec0 	call	100162ec <__ledf2>
1000ee70:	1003e816 	blt	r2,zero,1000fe14 <_dtoa_r+0x1598>
1000ee74:	b825883a 	mov	r18,r23
1000ee78:	bd83e926 	beq	r23,r22,1000fe20 <_dtoa_r+0x15a4>
1000ee7c:	a809883a 	mov	r4,r21
1000ee80:	980b883a 	mov	r5,r19
1000ee84:	000d883a 	mov	r6,zero
1000ee88:	01d00934 	movhi	r7,16420
1000ee8c:	000ab040 	call	1000ab04 <__muldf3>
1000ee90:	000d883a 	mov	r6,zero
1000ee94:	01d00934 	movhi	r7,16420
1000ee98:	8009883a 	mov	r4,r16
1000ee9c:	880b883a 	mov	r5,r17
1000eea0:	102b883a 	mov	r21,r2
1000eea4:	1827883a 	mov	r19,r3
1000eea8:	000ab040 	call	1000ab04 <__muldf3>
1000eeac:	180b883a 	mov	r5,r3
1000eeb0:	1009883a 	mov	r4,r2
1000eeb4:	1821883a 	mov	r16,r3
1000eeb8:	1023883a 	mov	r17,r2
1000eebc:	000bc6c0 	call	1000bc6c <__fixdfsi>
1000eec0:	1009883a 	mov	r4,r2
1000eec4:	1029883a 	mov	r20,r2
1000eec8:	000bcec0 	call	1000bcec <__floatsidf>
1000eecc:	8809883a 	mov	r4,r17
1000eed0:	800b883a 	mov	r5,r16
1000eed4:	100d883a 	mov	r6,r2
1000eed8:	180f883a 	mov	r7,r3
1000eedc:	000b3700 	call	1000b370 <__subdf3>
1000eee0:	a5000c04 	addi	r20,r20,48
1000eee4:	a80d883a 	mov	r6,r21
1000eee8:	980f883a 	mov	r7,r19
1000eeec:	1009883a 	mov	r4,r2
1000eef0:	180b883a 	mov	r5,r3
1000eef4:	95000005 	stb	r20,0(r18)
1000eef8:	1021883a 	mov	r16,r2
1000eefc:	1823883a 	mov	r17,r3
1000ef00:	00162ec0 	call	100162ec <__ledf2>
1000ef04:	bdc00044 	addi	r23,r23,1
1000ef08:	800d883a 	mov	r6,r16
1000ef0c:	880f883a 	mov	r7,r17
1000ef10:	0009883a 	mov	r4,zero
1000ef14:	014ffc34 	movhi	r5,16368
1000ef18:	103fcf0e 	bge	r2,zero,1000ee58 <__alt_data_end+0xf800ee58>
1000ef1c:	d8c01317 	ldw	r3,76(sp)
1000ef20:	d8c00515 	stw	r3,20(sp)
1000ef24:	d9400917 	ldw	r5,36(sp)
1000ef28:	e009883a 	mov	r4,fp
1000ef2c:	0011e940 	call	10011e94 <_Bfree>
1000ef30:	d9000517 	ldw	r4,20(sp)
1000ef34:	d9802317 	ldw	r6,140(sp)
1000ef38:	d9c02517 	ldw	r7,148(sp)
1000ef3c:	b8000005 	stb	zero,0(r23)
1000ef40:	20800044 	addi	r2,r4,1
1000ef44:	30800015 	stw	r2,0(r6)
1000ef48:	3802aa26 	beq	r7,zero,1000f9f4 <_dtoa_r+0x1178>
1000ef4c:	3dc00015 	stw	r23,0(r7)
1000ef50:	d8800717 	ldw	r2,28(sp)
1000ef54:	003e7906 	br	1000e93c <__alt_data_end+0xf800e93c>
1000ef58:	00800434 	movhi	r2,16
1000ef5c:	10bfffc4 	addi	r2,r2,-1
1000ef60:	88a2703a 	and	r17,r17,r2
1000ef64:	883e851e 	bne	r17,zero,1000e97c <__alt_data_end+0xf800e97c>
1000ef68:	008400b4 	movhi	r2,4098
1000ef6c:	10a49004 	addi	r2,r2,-28096
1000ef70:	003e8406 	br	1000e984 <__alt_data_end+0xf800e984>
1000ef74:	10c00204 	addi	r3,r2,8
1000ef78:	003e8706 	br	1000e998 <__alt_data_end+0xf800e998>
1000ef7c:	01400434 	movhi	r5,16
1000ef80:	297fffc4 	addi	r5,r5,-1
1000ef84:	994a703a 	and	r5,r19,r5
1000ef88:	9009883a 	mov	r4,r18
1000ef8c:	843f0044 	addi	r16,r16,-1023
1000ef90:	294ffc34 	orhi	r5,r5,16368
1000ef94:	dd800217 	ldw	r22,8(sp)
1000ef98:	d8001115 	stw	zero,68(sp)
1000ef9c:	003ea506 	br	1000ea34 <__alt_data_end+0xf800ea34>
1000efa0:	008400b4 	movhi	r2,4098
1000efa4:	10a48704 	addi	r2,r2,-28132
1000efa8:	003e6406 	br	1000e93c <__alt_data_end+0xf800e93c>
1000efac:	e0001115 	stw	zero,68(fp)
1000efb0:	000b883a 	mov	r5,zero
1000efb4:	e009883a 	mov	r4,fp
1000efb8:	0011dec0 	call	10011dec <_Balloc>
1000efbc:	01bfffc4 	movi	r6,-1
1000efc0:	01c00044 	movi	r7,1
1000efc4:	d8800715 	stw	r2,28(sp)
1000efc8:	d9800c15 	stw	r6,48(sp)
1000efcc:	e0801015 	stw	r2,64(fp)
1000efd0:	d8000315 	stw	zero,12(sp)
1000efd4:	d9c00b15 	stw	r7,44(sp)
1000efd8:	d9800615 	stw	r6,24(sp)
1000efdc:	d8002215 	stw	zero,136(sp)
1000efe0:	d8800117 	ldw	r2,4(sp)
1000efe4:	10008916 	blt	r2,zero,1000f20c <_dtoa_r+0x990>
1000efe8:	d9000517 	ldw	r4,20(sp)
1000efec:	00c00384 	movi	r3,14
1000eff0:	19008616 	blt	r3,r4,1000f20c <_dtoa_r+0x990>
1000eff4:	200490fa 	slli	r2,r4,3
1000eff8:	00c400b4 	movhi	r3,4098
1000effc:	d9802217 	ldw	r6,136(sp)
1000f000:	18e4af04 	addi	r3,r3,-27972
1000f004:	1885883a 	add	r2,r3,r2
1000f008:	14000017 	ldw	r16,0(r2)
1000f00c:	14400117 	ldw	r17,4(r2)
1000f010:	30016316 	blt	r6,zero,1000f5a0 <_dtoa_r+0xd24>
1000f014:	800d883a 	mov	r6,r16
1000f018:	880f883a 	mov	r7,r17
1000f01c:	9009883a 	mov	r4,r18
1000f020:	980b883a 	mov	r5,r19
1000f024:	0009fd00 	call	10009fd0 <__divdf3>
1000f028:	180b883a 	mov	r5,r3
1000f02c:	1009883a 	mov	r4,r2
1000f030:	000bc6c0 	call	1000bc6c <__fixdfsi>
1000f034:	1009883a 	mov	r4,r2
1000f038:	102b883a 	mov	r21,r2
1000f03c:	000bcec0 	call	1000bcec <__floatsidf>
1000f040:	800d883a 	mov	r6,r16
1000f044:	880f883a 	mov	r7,r17
1000f048:	1009883a 	mov	r4,r2
1000f04c:	180b883a 	mov	r5,r3
1000f050:	000ab040 	call	1000ab04 <__muldf3>
1000f054:	100d883a 	mov	r6,r2
1000f058:	180f883a 	mov	r7,r3
1000f05c:	9009883a 	mov	r4,r18
1000f060:	980b883a 	mov	r5,r19
1000f064:	000b3700 	call	1000b370 <__subdf3>
1000f068:	d9c00717 	ldw	r7,28(sp)
1000f06c:	1009883a 	mov	r4,r2
1000f070:	a8800c04 	addi	r2,r21,48
1000f074:	38800005 	stb	r2,0(r7)
1000f078:	3dc00044 	addi	r23,r7,1
1000f07c:	d9c00617 	ldw	r7,24(sp)
1000f080:	01800044 	movi	r6,1
1000f084:	180b883a 	mov	r5,r3
1000f088:	2005883a 	mov	r2,r4
1000f08c:	39803826 	beq	r7,r6,1000f170 <_dtoa_r+0x8f4>
1000f090:	000d883a 	mov	r6,zero
1000f094:	01d00934 	movhi	r7,16420
1000f098:	000ab040 	call	1000ab04 <__muldf3>
1000f09c:	000d883a 	mov	r6,zero
1000f0a0:	000f883a 	mov	r7,zero
1000f0a4:	1009883a 	mov	r4,r2
1000f0a8:	180b883a 	mov	r5,r3
1000f0ac:	1025883a 	mov	r18,r2
1000f0b0:	1827883a 	mov	r19,r3
1000f0b4:	000a9a00 	call	1000a9a0 <__eqdf2>
1000f0b8:	103f9a26 	beq	r2,zero,1000ef24 <__alt_data_end+0xf800ef24>
1000f0bc:	d9c00617 	ldw	r7,24(sp)
1000f0c0:	d8c00717 	ldw	r3,28(sp)
1000f0c4:	b829883a 	mov	r20,r23
1000f0c8:	38bfffc4 	addi	r2,r7,-1
1000f0cc:	18ad883a 	add	r22,r3,r2
1000f0d0:	00000a06 	br	1000f0fc <_dtoa_r+0x880>
1000f0d4:	000ab040 	call	1000ab04 <__muldf3>
1000f0d8:	000d883a 	mov	r6,zero
1000f0dc:	000f883a 	mov	r7,zero
1000f0e0:	1009883a 	mov	r4,r2
1000f0e4:	180b883a 	mov	r5,r3
1000f0e8:	1025883a 	mov	r18,r2
1000f0ec:	1827883a 	mov	r19,r3
1000f0f0:	b829883a 	mov	r20,r23
1000f0f4:	000a9a00 	call	1000a9a0 <__eqdf2>
1000f0f8:	103f8a26 	beq	r2,zero,1000ef24 <__alt_data_end+0xf800ef24>
1000f0fc:	800d883a 	mov	r6,r16
1000f100:	880f883a 	mov	r7,r17
1000f104:	9009883a 	mov	r4,r18
1000f108:	980b883a 	mov	r5,r19
1000f10c:	0009fd00 	call	10009fd0 <__divdf3>
1000f110:	180b883a 	mov	r5,r3
1000f114:	1009883a 	mov	r4,r2
1000f118:	000bc6c0 	call	1000bc6c <__fixdfsi>
1000f11c:	1009883a 	mov	r4,r2
1000f120:	102b883a 	mov	r21,r2
1000f124:	000bcec0 	call	1000bcec <__floatsidf>
1000f128:	800d883a 	mov	r6,r16
1000f12c:	880f883a 	mov	r7,r17
1000f130:	1009883a 	mov	r4,r2
1000f134:	180b883a 	mov	r5,r3
1000f138:	000ab040 	call	1000ab04 <__muldf3>
1000f13c:	100d883a 	mov	r6,r2
1000f140:	180f883a 	mov	r7,r3
1000f144:	9009883a 	mov	r4,r18
1000f148:	980b883a 	mov	r5,r19
1000f14c:	000b3700 	call	1000b370 <__subdf3>
1000f150:	aa000c04 	addi	r8,r21,48
1000f154:	a2000005 	stb	r8,0(r20)
1000f158:	000d883a 	mov	r6,zero
1000f15c:	01d00934 	movhi	r7,16420
1000f160:	1009883a 	mov	r4,r2
1000f164:	180b883a 	mov	r5,r3
1000f168:	a5c00044 	addi	r23,r20,1
1000f16c:	b53fd91e 	bne	r22,r20,1000f0d4 <__alt_data_end+0xf800f0d4>
1000f170:	100d883a 	mov	r6,r2
1000f174:	180f883a 	mov	r7,r3
1000f178:	1009883a 	mov	r4,r2
1000f17c:	180b883a 	mov	r5,r3
1000f180:	00097240 	call	10009724 <__adddf3>
1000f184:	100d883a 	mov	r6,r2
1000f188:	180f883a 	mov	r7,r3
1000f18c:	8009883a 	mov	r4,r16
1000f190:	880b883a 	mov	r5,r17
1000f194:	1027883a 	mov	r19,r2
1000f198:	1825883a 	mov	r18,r3
1000f19c:	00162ec0 	call	100162ec <__ledf2>
1000f1a0:	10000816 	blt	r2,zero,1000f1c4 <_dtoa_r+0x948>
1000f1a4:	980d883a 	mov	r6,r19
1000f1a8:	900f883a 	mov	r7,r18
1000f1ac:	8009883a 	mov	r4,r16
1000f1b0:	880b883a 	mov	r5,r17
1000f1b4:	000a9a00 	call	1000a9a0 <__eqdf2>
1000f1b8:	103f5a1e 	bne	r2,zero,1000ef24 <__alt_data_end+0xf800ef24>
1000f1bc:	ad40004c 	andi	r21,r21,1
1000f1c0:	a83f5826 	beq	r21,zero,1000ef24 <__alt_data_end+0xf800ef24>
1000f1c4:	bd3fffc3 	ldbu	r20,-1(r23)
1000f1c8:	b8bfffc4 	addi	r2,r23,-1
1000f1cc:	1007883a 	mov	r3,r2
1000f1d0:	01400e44 	movi	r5,57
1000f1d4:	d9800717 	ldw	r6,28(sp)
1000f1d8:	00000506 	br	1000f1f0 <_dtoa_r+0x974>
1000f1dc:	18ffffc4 	addi	r3,r3,-1
1000f1e0:	11824726 	beq	r2,r6,1000fb00 <_dtoa_r+0x1284>
1000f1e4:	1d000003 	ldbu	r20,0(r3)
1000f1e8:	102f883a 	mov	r23,r2
1000f1ec:	10bfffc4 	addi	r2,r2,-1
1000f1f0:	a1003fcc 	andi	r4,r20,255
1000f1f4:	2100201c 	xori	r4,r4,128
1000f1f8:	213fe004 	addi	r4,r4,-128
1000f1fc:	217ff726 	beq	r4,r5,1000f1dc <__alt_data_end+0xf800f1dc>
1000f200:	a2000044 	addi	r8,r20,1
1000f204:	12000005 	stb	r8,0(r2)
1000f208:	003f4606 	br	1000ef24 <__alt_data_end+0xf800ef24>
1000f20c:	d9000b17 	ldw	r4,44(sp)
1000f210:	2000c826 	beq	r4,zero,1000f534 <_dtoa_r+0xcb8>
1000f214:	d9800317 	ldw	r6,12(sp)
1000f218:	00c00044 	movi	r3,1
1000f21c:	1980f90e 	bge	r3,r6,1000f604 <_dtoa_r+0xd88>
1000f220:	d8800617 	ldw	r2,24(sp)
1000f224:	d8c00a17 	ldw	r3,40(sp)
1000f228:	157fffc4 	addi	r21,r2,-1
1000f22c:	1d41f316 	blt	r3,r21,1000f9fc <_dtoa_r+0x1180>
1000f230:	1d6bc83a 	sub	r21,r3,r21
1000f234:	d9c00617 	ldw	r7,24(sp)
1000f238:	3802aa16 	blt	r7,zero,1000fce4 <_dtoa_r+0x1468>
1000f23c:	dd000817 	ldw	r20,32(sp)
1000f240:	d8800617 	ldw	r2,24(sp)
1000f244:	d8c00817 	ldw	r3,32(sp)
1000f248:	01400044 	movi	r5,1
1000f24c:	e009883a 	mov	r4,fp
1000f250:	1887883a 	add	r3,r3,r2
1000f254:	d8c00815 	stw	r3,32(sp)
1000f258:	b0ad883a 	add	r22,r22,r2
1000f25c:	00122200 	call	10012220 <__i2b>
1000f260:	1023883a 	mov	r17,r2
1000f264:	a0000826 	beq	r20,zero,1000f288 <_dtoa_r+0xa0c>
1000f268:	0580070e 	bge	zero,r22,1000f288 <_dtoa_r+0xa0c>
1000f26c:	a005883a 	mov	r2,r20
1000f270:	b500b916 	blt	r22,r20,1000f558 <_dtoa_r+0xcdc>
1000f274:	d9000817 	ldw	r4,32(sp)
1000f278:	a0a9c83a 	sub	r20,r20,r2
1000f27c:	b0adc83a 	sub	r22,r22,r2
1000f280:	2089c83a 	sub	r4,r4,r2
1000f284:	d9000815 	stw	r4,32(sp)
1000f288:	d9800a17 	ldw	r6,40(sp)
1000f28c:	0181810e 	bge	zero,r6,1000f894 <_dtoa_r+0x1018>
1000f290:	d9c00b17 	ldw	r7,44(sp)
1000f294:	3800b326 	beq	r7,zero,1000f564 <_dtoa_r+0xce8>
1000f298:	a800b226 	beq	r21,zero,1000f564 <_dtoa_r+0xce8>
1000f29c:	880b883a 	mov	r5,r17
1000f2a0:	a80d883a 	mov	r6,r21
1000f2a4:	e009883a 	mov	r4,fp
1000f2a8:	00124e80 	call	100124e8 <__pow5mult>
1000f2ac:	d9800917 	ldw	r6,36(sp)
1000f2b0:	100b883a 	mov	r5,r2
1000f2b4:	e009883a 	mov	r4,fp
1000f2b8:	1023883a 	mov	r17,r2
1000f2bc:	001225c0 	call	1001225c <__multiply>
1000f2c0:	1021883a 	mov	r16,r2
1000f2c4:	d8800a17 	ldw	r2,40(sp)
1000f2c8:	d9400917 	ldw	r5,36(sp)
1000f2cc:	e009883a 	mov	r4,fp
1000f2d0:	1545c83a 	sub	r2,r2,r21
1000f2d4:	d8800a15 	stw	r2,40(sp)
1000f2d8:	0011e940 	call	10011e94 <_Bfree>
1000f2dc:	d8c00a17 	ldw	r3,40(sp)
1000f2e0:	18009f1e 	bne	r3,zero,1000f560 <_dtoa_r+0xce4>
1000f2e4:	05c00044 	movi	r23,1
1000f2e8:	e009883a 	mov	r4,fp
1000f2ec:	b80b883a 	mov	r5,r23
1000f2f0:	00122200 	call	10012220 <__i2b>
1000f2f4:	d9000d17 	ldw	r4,52(sp)
1000f2f8:	102b883a 	mov	r21,r2
1000f2fc:	2000ce26 	beq	r4,zero,1000f638 <_dtoa_r+0xdbc>
1000f300:	200d883a 	mov	r6,r4
1000f304:	100b883a 	mov	r5,r2
1000f308:	e009883a 	mov	r4,fp
1000f30c:	00124e80 	call	100124e8 <__pow5mult>
1000f310:	d9800317 	ldw	r6,12(sp)
1000f314:	102b883a 	mov	r21,r2
1000f318:	b981810e 	bge	r23,r6,1000f920 <_dtoa_r+0x10a4>
1000f31c:	0027883a 	mov	r19,zero
1000f320:	a8800417 	ldw	r2,16(r21)
1000f324:	05c00804 	movi	r23,32
1000f328:	10800104 	addi	r2,r2,4
1000f32c:	1085883a 	add	r2,r2,r2
1000f330:	1085883a 	add	r2,r2,r2
1000f334:	a885883a 	add	r2,r21,r2
1000f338:	11000017 	ldw	r4,0(r2)
1000f33c:	00121080 	call	10012108 <__hi0bits>
1000f340:	b885c83a 	sub	r2,r23,r2
1000f344:	1585883a 	add	r2,r2,r22
1000f348:	108007cc 	andi	r2,r2,31
1000f34c:	1000b326 	beq	r2,zero,1000f61c <_dtoa_r+0xda0>
1000f350:	00c00804 	movi	r3,32
1000f354:	1887c83a 	sub	r3,r3,r2
1000f358:	01000104 	movi	r4,4
1000f35c:	20c2cd0e 	bge	r4,r3,1000fe94 <_dtoa_r+0x1618>
1000f360:	00c00704 	movi	r3,28
1000f364:	1885c83a 	sub	r2,r3,r2
1000f368:	d8c00817 	ldw	r3,32(sp)
1000f36c:	a0a9883a 	add	r20,r20,r2
1000f370:	b0ad883a 	add	r22,r22,r2
1000f374:	1887883a 	add	r3,r3,r2
1000f378:	d8c00815 	stw	r3,32(sp)
1000f37c:	d9800817 	ldw	r6,32(sp)
1000f380:	0180040e 	bge	zero,r6,1000f394 <_dtoa_r+0xb18>
1000f384:	800b883a 	mov	r5,r16
1000f388:	e009883a 	mov	r4,fp
1000f38c:	00126280 	call	10012628 <__lshift>
1000f390:	1021883a 	mov	r16,r2
1000f394:	0580050e 	bge	zero,r22,1000f3ac <_dtoa_r+0xb30>
1000f398:	a80b883a 	mov	r5,r21
1000f39c:	b00d883a 	mov	r6,r22
1000f3a0:	e009883a 	mov	r4,fp
1000f3a4:	00126280 	call	10012628 <__lshift>
1000f3a8:	102b883a 	mov	r21,r2
1000f3ac:	d9c00e17 	ldw	r7,56(sp)
1000f3b0:	3801211e 	bne	r7,zero,1000f838 <_dtoa_r+0xfbc>
1000f3b4:	d9800617 	ldw	r6,24(sp)
1000f3b8:	0181380e 	bge	zero,r6,1000f89c <_dtoa_r+0x1020>
1000f3bc:	d8c00b17 	ldw	r3,44(sp)
1000f3c0:	1800ab1e 	bne	r3,zero,1000f670 <_dtoa_r+0xdf4>
1000f3c4:	dc800717 	ldw	r18,28(sp)
1000f3c8:	dcc00617 	ldw	r19,24(sp)
1000f3cc:	9029883a 	mov	r20,r18
1000f3d0:	00000206 	br	1000f3dc <_dtoa_r+0xb60>
1000f3d4:	0011ebc0 	call	10011ebc <__multadd>
1000f3d8:	1021883a 	mov	r16,r2
1000f3dc:	a80b883a 	mov	r5,r21
1000f3e0:	8009883a 	mov	r4,r16
1000f3e4:	000e6540 	call	1000e654 <quorem>
1000f3e8:	10800c04 	addi	r2,r2,48
1000f3ec:	90800005 	stb	r2,0(r18)
1000f3f0:	94800044 	addi	r18,r18,1
1000f3f4:	9507c83a 	sub	r3,r18,r20
1000f3f8:	000f883a 	mov	r7,zero
1000f3fc:	01800284 	movi	r6,10
1000f400:	800b883a 	mov	r5,r16
1000f404:	e009883a 	mov	r4,fp
1000f408:	1cfff216 	blt	r3,r19,1000f3d4 <__alt_data_end+0xf800f3d4>
1000f40c:	1011883a 	mov	r8,r2
1000f410:	d8800617 	ldw	r2,24(sp)
1000f414:	0082370e 	bge	zero,r2,1000fcf4 <_dtoa_r+0x1478>
1000f418:	d9000717 	ldw	r4,28(sp)
1000f41c:	0025883a 	mov	r18,zero
1000f420:	20af883a 	add	r23,r4,r2
1000f424:	01800044 	movi	r6,1
1000f428:	800b883a 	mov	r5,r16
1000f42c:	e009883a 	mov	r4,fp
1000f430:	da001715 	stw	r8,92(sp)
1000f434:	00126280 	call	10012628 <__lshift>
1000f438:	a80b883a 	mov	r5,r21
1000f43c:	1009883a 	mov	r4,r2
1000f440:	d8800915 	stw	r2,36(sp)
1000f444:	00127700 	call	10012770 <__mcmp>
1000f448:	da001717 	ldw	r8,92(sp)
1000f44c:	0081800e 	bge	zero,r2,1000fa50 <_dtoa_r+0x11d4>
1000f450:	b93fffc3 	ldbu	r4,-1(r23)
1000f454:	b8bfffc4 	addi	r2,r23,-1
1000f458:	1007883a 	mov	r3,r2
1000f45c:	01800e44 	movi	r6,57
1000f460:	d9c00717 	ldw	r7,28(sp)
1000f464:	00000506 	br	1000f47c <_dtoa_r+0xc00>
1000f468:	18ffffc4 	addi	r3,r3,-1
1000f46c:	11c12326 	beq	r2,r7,1000f8fc <_dtoa_r+0x1080>
1000f470:	19000003 	ldbu	r4,0(r3)
1000f474:	102f883a 	mov	r23,r2
1000f478:	10bfffc4 	addi	r2,r2,-1
1000f47c:	21403fcc 	andi	r5,r4,255
1000f480:	2940201c 	xori	r5,r5,128
1000f484:	297fe004 	addi	r5,r5,-128
1000f488:	29bff726 	beq	r5,r6,1000f468 <__alt_data_end+0xf800f468>
1000f48c:	21000044 	addi	r4,r4,1
1000f490:	11000005 	stb	r4,0(r2)
1000f494:	a80b883a 	mov	r5,r21
1000f498:	e009883a 	mov	r4,fp
1000f49c:	0011e940 	call	10011e94 <_Bfree>
1000f4a0:	883ea026 	beq	r17,zero,1000ef24 <__alt_data_end+0xf800ef24>
1000f4a4:	90000426 	beq	r18,zero,1000f4b8 <_dtoa_r+0xc3c>
1000f4a8:	94400326 	beq	r18,r17,1000f4b8 <_dtoa_r+0xc3c>
1000f4ac:	900b883a 	mov	r5,r18
1000f4b0:	e009883a 	mov	r4,fp
1000f4b4:	0011e940 	call	10011e94 <_Bfree>
1000f4b8:	880b883a 	mov	r5,r17
1000f4bc:	e009883a 	mov	r4,fp
1000f4c0:	0011e940 	call	10011e94 <_Bfree>
1000f4c4:	003e9706 	br	1000ef24 <__alt_data_end+0xf800ef24>
1000f4c8:	01800044 	movi	r6,1
1000f4cc:	d9800e15 	stw	r6,56(sp)
1000f4d0:	003d9606 	br	1000eb2c <__alt_data_end+0xf800eb2c>
1000f4d4:	d8800817 	ldw	r2,32(sp)
1000f4d8:	d8c00517 	ldw	r3,20(sp)
1000f4dc:	d8000d15 	stw	zero,52(sp)
1000f4e0:	10c5c83a 	sub	r2,r2,r3
1000f4e4:	00c9c83a 	sub	r4,zero,r3
1000f4e8:	d8800815 	stw	r2,32(sp)
1000f4ec:	d9000a15 	stw	r4,40(sp)
1000f4f0:	003d9706 	br	1000eb50 <__alt_data_end+0xf800eb50>
1000f4f4:	05adc83a 	sub	r22,zero,r22
1000f4f8:	dd800815 	stw	r22,32(sp)
1000f4fc:	002d883a 	mov	r22,zero
1000f500:	003d8e06 	br	1000eb3c <__alt_data_end+0xf800eb3c>
1000f504:	d9000517 	ldw	r4,20(sp)
1000f508:	000bcec0 	call	1000bcec <__floatsidf>
1000f50c:	100d883a 	mov	r6,r2
1000f510:	180f883a 	mov	r7,r3
1000f514:	a009883a 	mov	r4,r20
1000f518:	880b883a 	mov	r5,r17
1000f51c:	000a9a00 	call	1000a9a0 <__eqdf2>
1000f520:	103d7126 	beq	r2,zero,1000eae8 <__alt_data_end+0xf800eae8>
1000f524:	d9c00517 	ldw	r7,20(sp)
1000f528:	39ffffc4 	addi	r7,r7,-1
1000f52c:	d9c00515 	stw	r7,20(sp)
1000f530:	003d6d06 	br	1000eae8 <__alt_data_end+0xf800eae8>
1000f534:	dd400a17 	ldw	r21,40(sp)
1000f538:	dd000817 	ldw	r20,32(sp)
1000f53c:	0023883a 	mov	r17,zero
1000f540:	003f4806 	br	1000f264 <__alt_data_end+0xf800f264>
1000f544:	10e3c83a 	sub	r17,r2,r3
1000f548:	9448983a 	sll	r4,r18,r17
1000f54c:	003d3206 	br	1000ea18 <__alt_data_end+0xf800ea18>
1000f550:	d8000e15 	stw	zero,56(sp)
1000f554:	003d7506 	br	1000eb2c <__alt_data_end+0xf800eb2c>
1000f558:	b005883a 	mov	r2,r22
1000f55c:	003f4506 	br	1000f274 <__alt_data_end+0xf800f274>
1000f560:	dc000915 	stw	r16,36(sp)
1000f564:	d9800a17 	ldw	r6,40(sp)
1000f568:	d9400917 	ldw	r5,36(sp)
1000f56c:	e009883a 	mov	r4,fp
1000f570:	00124e80 	call	100124e8 <__pow5mult>
1000f574:	1021883a 	mov	r16,r2
1000f578:	003f5a06 	br	1000f2e4 <__alt_data_end+0xf800f2e4>
1000f57c:	01c00044 	movi	r7,1
1000f580:	d9c00b15 	stw	r7,44(sp)
1000f584:	d8802217 	ldw	r2,136(sp)
1000f588:	0081280e 	bge	zero,r2,1000fa2c <_dtoa_r+0x11b0>
1000f58c:	100d883a 	mov	r6,r2
1000f590:	1021883a 	mov	r16,r2
1000f594:	d8800c15 	stw	r2,48(sp)
1000f598:	d8800615 	stw	r2,24(sp)
1000f59c:	003d8806 	br	1000ebc0 <__alt_data_end+0xf800ebc0>
1000f5a0:	d8800617 	ldw	r2,24(sp)
1000f5a4:	00be9b16 	blt	zero,r2,1000f014 <__alt_data_end+0xf800f014>
1000f5a8:	10010f1e 	bne	r2,zero,1000f9e8 <_dtoa_r+0x116c>
1000f5ac:	880b883a 	mov	r5,r17
1000f5b0:	000d883a 	mov	r6,zero
1000f5b4:	01d00534 	movhi	r7,16404
1000f5b8:	8009883a 	mov	r4,r16
1000f5bc:	000ab040 	call	1000ab04 <__muldf3>
1000f5c0:	900d883a 	mov	r6,r18
1000f5c4:	980f883a 	mov	r7,r19
1000f5c8:	1009883a 	mov	r4,r2
1000f5cc:	180b883a 	mov	r5,r3
1000f5d0:	000aa280 	call	1000aa28 <__gedf2>
1000f5d4:	002b883a 	mov	r21,zero
1000f5d8:	0023883a 	mov	r17,zero
1000f5dc:	1000bf16 	blt	r2,zero,1000f8dc <_dtoa_r+0x1060>
1000f5e0:	d9802217 	ldw	r6,136(sp)
1000f5e4:	ddc00717 	ldw	r23,28(sp)
1000f5e8:	018c303a 	nor	r6,zero,r6
1000f5ec:	d9800515 	stw	r6,20(sp)
1000f5f0:	a80b883a 	mov	r5,r21
1000f5f4:	e009883a 	mov	r4,fp
1000f5f8:	0011e940 	call	10011e94 <_Bfree>
1000f5fc:	883e4926 	beq	r17,zero,1000ef24 <__alt_data_end+0xf800ef24>
1000f600:	003fad06 	br	1000f4b8 <__alt_data_end+0xf800f4b8>
1000f604:	d9c01117 	ldw	r7,68(sp)
1000f608:	3801bc26 	beq	r7,zero,1000fcfc <_dtoa_r+0x1480>
1000f60c:	10810cc4 	addi	r2,r2,1075
1000f610:	dd400a17 	ldw	r21,40(sp)
1000f614:	dd000817 	ldw	r20,32(sp)
1000f618:	003f0a06 	br	1000f244 <__alt_data_end+0xf800f244>
1000f61c:	00800704 	movi	r2,28
1000f620:	d9000817 	ldw	r4,32(sp)
1000f624:	a0a9883a 	add	r20,r20,r2
1000f628:	b0ad883a 	add	r22,r22,r2
1000f62c:	2089883a 	add	r4,r4,r2
1000f630:	d9000815 	stw	r4,32(sp)
1000f634:	003f5106 	br	1000f37c <__alt_data_end+0xf800f37c>
1000f638:	d8c00317 	ldw	r3,12(sp)
1000f63c:	b8c1fc0e 	bge	r23,r3,1000fe30 <_dtoa_r+0x15b4>
1000f640:	0027883a 	mov	r19,zero
1000f644:	b805883a 	mov	r2,r23
1000f648:	003f3e06 	br	1000f344 <__alt_data_end+0xf800f344>
1000f64c:	880b883a 	mov	r5,r17
1000f650:	e009883a 	mov	r4,fp
1000f654:	000f883a 	mov	r7,zero
1000f658:	01800284 	movi	r6,10
1000f65c:	0011ebc0 	call	10011ebc <__multadd>
1000f660:	d9000c17 	ldw	r4,48(sp)
1000f664:	1023883a 	mov	r17,r2
1000f668:	0102040e 	bge	zero,r4,1000fe7c <_dtoa_r+0x1600>
1000f66c:	d9000615 	stw	r4,24(sp)
1000f670:	0500050e 	bge	zero,r20,1000f688 <_dtoa_r+0xe0c>
1000f674:	880b883a 	mov	r5,r17
1000f678:	a00d883a 	mov	r6,r20
1000f67c:	e009883a 	mov	r4,fp
1000f680:	00126280 	call	10012628 <__lshift>
1000f684:	1023883a 	mov	r17,r2
1000f688:	9801241e 	bne	r19,zero,1000fb1c <_dtoa_r+0x12a0>
1000f68c:	8829883a 	mov	r20,r17
1000f690:	d9000617 	ldw	r4,24(sp)
1000f694:	dcc00717 	ldw	r19,28(sp)
1000f698:	9480004c 	andi	r18,r18,1
1000f69c:	20bfffc4 	addi	r2,r4,-1
1000f6a0:	9885883a 	add	r2,r19,r2
1000f6a4:	d8800415 	stw	r2,16(sp)
1000f6a8:	dc800615 	stw	r18,24(sp)
1000f6ac:	a80b883a 	mov	r5,r21
1000f6b0:	8009883a 	mov	r4,r16
1000f6b4:	000e6540 	call	1000e654 <quorem>
1000f6b8:	880b883a 	mov	r5,r17
1000f6bc:	8009883a 	mov	r4,r16
1000f6c0:	102f883a 	mov	r23,r2
1000f6c4:	00127700 	call	10012770 <__mcmp>
1000f6c8:	a80b883a 	mov	r5,r21
1000f6cc:	a00d883a 	mov	r6,r20
1000f6d0:	e009883a 	mov	r4,fp
1000f6d4:	102d883a 	mov	r22,r2
1000f6d8:	00127d00 	call	100127d0 <__mdiff>
1000f6dc:	1007883a 	mov	r3,r2
1000f6e0:	10800317 	ldw	r2,12(r2)
1000f6e4:	bc800c04 	addi	r18,r23,48
1000f6e8:	180b883a 	mov	r5,r3
1000f6ec:	10004e1e 	bne	r2,zero,1000f828 <_dtoa_r+0xfac>
1000f6f0:	8009883a 	mov	r4,r16
1000f6f4:	d8c01615 	stw	r3,88(sp)
1000f6f8:	00127700 	call	10012770 <__mcmp>
1000f6fc:	d8c01617 	ldw	r3,88(sp)
1000f700:	e009883a 	mov	r4,fp
1000f704:	d8801615 	stw	r2,88(sp)
1000f708:	180b883a 	mov	r5,r3
1000f70c:	0011e940 	call	10011e94 <_Bfree>
1000f710:	d8801617 	ldw	r2,88(sp)
1000f714:	1000041e 	bne	r2,zero,1000f728 <_dtoa_r+0xeac>
1000f718:	d9800317 	ldw	r6,12(sp)
1000f71c:	3000021e 	bne	r6,zero,1000f728 <_dtoa_r+0xeac>
1000f720:	d8c00617 	ldw	r3,24(sp)
1000f724:	18003726 	beq	r3,zero,1000f804 <_dtoa_r+0xf88>
1000f728:	b0002016 	blt	r22,zero,1000f7ac <_dtoa_r+0xf30>
1000f72c:	b000041e 	bne	r22,zero,1000f740 <_dtoa_r+0xec4>
1000f730:	d9000317 	ldw	r4,12(sp)
1000f734:	2000021e 	bne	r4,zero,1000f740 <_dtoa_r+0xec4>
1000f738:	d8c00617 	ldw	r3,24(sp)
1000f73c:	18001b26 	beq	r3,zero,1000f7ac <_dtoa_r+0xf30>
1000f740:	00810716 	blt	zero,r2,1000fb60 <_dtoa_r+0x12e4>
1000f744:	d8c00417 	ldw	r3,16(sp)
1000f748:	9d800044 	addi	r22,r19,1
1000f74c:	9c800005 	stb	r18,0(r19)
1000f750:	b02f883a 	mov	r23,r22
1000f754:	98c10626 	beq	r19,r3,1000fb70 <_dtoa_r+0x12f4>
1000f758:	800b883a 	mov	r5,r16
1000f75c:	000f883a 	mov	r7,zero
1000f760:	01800284 	movi	r6,10
1000f764:	e009883a 	mov	r4,fp
1000f768:	0011ebc0 	call	10011ebc <__multadd>
1000f76c:	1021883a 	mov	r16,r2
1000f770:	000f883a 	mov	r7,zero
1000f774:	01800284 	movi	r6,10
1000f778:	880b883a 	mov	r5,r17
1000f77c:	e009883a 	mov	r4,fp
1000f780:	8d002526 	beq	r17,r20,1000f818 <_dtoa_r+0xf9c>
1000f784:	0011ebc0 	call	10011ebc <__multadd>
1000f788:	a00b883a 	mov	r5,r20
1000f78c:	000f883a 	mov	r7,zero
1000f790:	01800284 	movi	r6,10
1000f794:	e009883a 	mov	r4,fp
1000f798:	1023883a 	mov	r17,r2
1000f79c:	0011ebc0 	call	10011ebc <__multadd>
1000f7a0:	1029883a 	mov	r20,r2
1000f7a4:	b027883a 	mov	r19,r22
1000f7a8:	003fc006 	br	1000f6ac <__alt_data_end+0xf800f6ac>
1000f7ac:	9011883a 	mov	r8,r18
1000f7b0:	00800e0e 	bge	zero,r2,1000f7ec <_dtoa_r+0xf70>
1000f7b4:	800b883a 	mov	r5,r16
1000f7b8:	01800044 	movi	r6,1
1000f7bc:	e009883a 	mov	r4,fp
1000f7c0:	da001715 	stw	r8,92(sp)
1000f7c4:	00126280 	call	10012628 <__lshift>
1000f7c8:	a80b883a 	mov	r5,r21
1000f7cc:	1009883a 	mov	r4,r2
1000f7d0:	1021883a 	mov	r16,r2
1000f7d4:	00127700 	call	10012770 <__mcmp>
1000f7d8:	da001717 	ldw	r8,92(sp)
1000f7dc:	0081960e 	bge	zero,r2,1000fe38 <_dtoa_r+0x15bc>
1000f7e0:	00800e44 	movi	r2,57
1000f7e4:	40817026 	beq	r8,r2,1000fda8 <_dtoa_r+0x152c>
1000f7e8:	ba000c44 	addi	r8,r23,49
1000f7ec:	8825883a 	mov	r18,r17
1000f7f0:	9dc00044 	addi	r23,r19,1
1000f7f4:	9a000005 	stb	r8,0(r19)
1000f7f8:	a023883a 	mov	r17,r20
1000f7fc:	dc000915 	stw	r16,36(sp)
1000f800:	003f2406 	br	1000f494 <__alt_data_end+0xf800f494>
1000f804:	00800e44 	movi	r2,57
1000f808:	9011883a 	mov	r8,r18
1000f80c:	90816626 	beq	r18,r2,1000fda8 <_dtoa_r+0x152c>
1000f810:	05bff516 	blt	zero,r22,1000f7e8 <__alt_data_end+0xf800f7e8>
1000f814:	003ff506 	br	1000f7ec <__alt_data_end+0xf800f7ec>
1000f818:	0011ebc0 	call	10011ebc <__multadd>
1000f81c:	1023883a 	mov	r17,r2
1000f820:	1029883a 	mov	r20,r2
1000f824:	003fdf06 	br	1000f7a4 <__alt_data_end+0xf800f7a4>
1000f828:	e009883a 	mov	r4,fp
1000f82c:	0011e940 	call	10011e94 <_Bfree>
1000f830:	00800044 	movi	r2,1
1000f834:	003fbc06 	br	1000f728 <__alt_data_end+0xf800f728>
1000f838:	a80b883a 	mov	r5,r21
1000f83c:	8009883a 	mov	r4,r16
1000f840:	00127700 	call	10012770 <__mcmp>
1000f844:	103edb0e 	bge	r2,zero,1000f3b4 <__alt_data_end+0xf800f3b4>
1000f848:	800b883a 	mov	r5,r16
1000f84c:	000f883a 	mov	r7,zero
1000f850:	01800284 	movi	r6,10
1000f854:	e009883a 	mov	r4,fp
1000f858:	0011ebc0 	call	10011ebc <__multadd>
1000f85c:	1021883a 	mov	r16,r2
1000f860:	d8800517 	ldw	r2,20(sp)
1000f864:	d8c00b17 	ldw	r3,44(sp)
1000f868:	10bfffc4 	addi	r2,r2,-1
1000f86c:	d8800515 	stw	r2,20(sp)
1000f870:	183f761e 	bne	r3,zero,1000f64c <__alt_data_end+0xf800f64c>
1000f874:	d9000c17 	ldw	r4,48(sp)
1000f878:	0101730e 	bge	zero,r4,1000fe48 <_dtoa_r+0x15cc>
1000f87c:	d9000615 	stw	r4,24(sp)
1000f880:	003ed006 	br	1000f3c4 <__alt_data_end+0xf800f3c4>
1000f884:	00800084 	movi	r2,2
1000f888:	3081861e 	bne	r6,r2,1000fea4 <_dtoa_r+0x1628>
1000f88c:	d8000b15 	stw	zero,44(sp)
1000f890:	003f3c06 	br	1000f584 <__alt_data_end+0xf800f584>
1000f894:	dc000917 	ldw	r16,36(sp)
1000f898:	003e9206 	br	1000f2e4 <__alt_data_end+0xf800f2e4>
1000f89c:	d9c00317 	ldw	r7,12(sp)
1000f8a0:	00800084 	movi	r2,2
1000f8a4:	11fec50e 	bge	r2,r7,1000f3bc <__alt_data_end+0xf800f3bc>
1000f8a8:	d9000617 	ldw	r4,24(sp)
1000f8ac:	20013c1e 	bne	r4,zero,1000fda0 <_dtoa_r+0x1524>
1000f8b0:	a80b883a 	mov	r5,r21
1000f8b4:	000f883a 	mov	r7,zero
1000f8b8:	01800144 	movi	r6,5
1000f8bc:	e009883a 	mov	r4,fp
1000f8c0:	0011ebc0 	call	10011ebc <__multadd>
1000f8c4:	100b883a 	mov	r5,r2
1000f8c8:	8009883a 	mov	r4,r16
1000f8cc:	102b883a 	mov	r21,r2
1000f8d0:	00127700 	call	10012770 <__mcmp>
1000f8d4:	dc000915 	stw	r16,36(sp)
1000f8d8:	00bf410e 	bge	zero,r2,1000f5e0 <__alt_data_end+0xf800f5e0>
1000f8dc:	d9c00717 	ldw	r7,28(sp)
1000f8e0:	00800c44 	movi	r2,49
1000f8e4:	38800005 	stb	r2,0(r7)
1000f8e8:	d8800517 	ldw	r2,20(sp)
1000f8ec:	3dc00044 	addi	r23,r7,1
1000f8f0:	10800044 	addi	r2,r2,1
1000f8f4:	d8800515 	stw	r2,20(sp)
1000f8f8:	003f3d06 	br	1000f5f0 <__alt_data_end+0xf800f5f0>
1000f8fc:	d9800517 	ldw	r6,20(sp)
1000f900:	d9c00717 	ldw	r7,28(sp)
1000f904:	00800c44 	movi	r2,49
1000f908:	31800044 	addi	r6,r6,1
1000f90c:	d9800515 	stw	r6,20(sp)
1000f910:	38800005 	stb	r2,0(r7)
1000f914:	003edf06 	br	1000f494 <__alt_data_end+0xf800f494>
1000f918:	d8000b15 	stw	zero,44(sp)
1000f91c:	003c9f06 	br	1000eb9c <__alt_data_end+0xf800eb9c>
1000f920:	903e7e1e 	bne	r18,zero,1000f31c <__alt_data_end+0xf800f31c>
1000f924:	00800434 	movhi	r2,16
1000f928:	10bfffc4 	addi	r2,r2,-1
1000f92c:	9884703a 	and	r2,r19,r2
1000f930:	1000ea1e 	bne	r2,zero,1000fcdc <_dtoa_r+0x1460>
1000f934:	9cdffc2c 	andhi	r19,r19,32752
1000f938:	9800e826 	beq	r19,zero,1000fcdc <_dtoa_r+0x1460>
1000f93c:	d9c00817 	ldw	r7,32(sp)
1000f940:	b5800044 	addi	r22,r22,1
1000f944:	04c00044 	movi	r19,1
1000f948:	39c00044 	addi	r7,r7,1
1000f94c:	d9c00815 	stw	r7,32(sp)
1000f950:	d8800d17 	ldw	r2,52(sp)
1000f954:	103e721e 	bne	r2,zero,1000f320 <__alt_data_end+0xf800f320>
1000f958:	00800044 	movi	r2,1
1000f95c:	003e7906 	br	1000f344 <__alt_data_end+0xf800f344>
1000f960:	8009883a 	mov	r4,r16
1000f964:	000bcec0 	call	1000bcec <__floatsidf>
1000f968:	d9800f17 	ldw	r6,60(sp)
1000f96c:	d9c01017 	ldw	r7,64(sp)
1000f970:	1009883a 	mov	r4,r2
1000f974:	180b883a 	mov	r5,r3
1000f978:	000ab040 	call	1000ab04 <__muldf3>
1000f97c:	000d883a 	mov	r6,zero
1000f980:	01d00734 	movhi	r7,16412
1000f984:	1009883a 	mov	r4,r2
1000f988:	180b883a 	mov	r5,r3
1000f98c:	00097240 	call	10009724 <__adddf3>
1000f990:	047f3034 	movhi	r17,64704
1000f994:	1021883a 	mov	r16,r2
1000f998:	1c63883a 	add	r17,r3,r17
1000f99c:	d9000f17 	ldw	r4,60(sp)
1000f9a0:	d9401017 	ldw	r5,64(sp)
1000f9a4:	000d883a 	mov	r6,zero
1000f9a8:	01d00534 	movhi	r7,16404
1000f9ac:	000b3700 	call	1000b370 <__subdf3>
1000f9b0:	800d883a 	mov	r6,r16
1000f9b4:	880f883a 	mov	r7,r17
1000f9b8:	1009883a 	mov	r4,r2
1000f9bc:	180b883a 	mov	r5,r3
1000f9c0:	102b883a 	mov	r21,r2
1000f9c4:	1829883a 	mov	r20,r3
1000f9c8:	000aa280 	call	1000aa28 <__gedf2>
1000f9cc:	00806c16 	blt	zero,r2,1000fb80 <_dtoa_r+0x1304>
1000f9d0:	89e0003c 	xorhi	r7,r17,32768
1000f9d4:	800d883a 	mov	r6,r16
1000f9d8:	a809883a 	mov	r4,r21
1000f9dc:	a00b883a 	mov	r5,r20
1000f9e0:	00162ec0 	call	100162ec <__ledf2>
1000f9e4:	103d7e0e 	bge	r2,zero,1000efe0 <__alt_data_end+0xf800efe0>
1000f9e8:	002b883a 	mov	r21,zero
1000f9ec:	0023883a 	mov	r17,zero
1000f9f0:	003efb06 	br	1000f5e0 <__alt_data_end+0xf800f5e0>
1000f9f4:	d8800717 	ldw	r2,28(sp)
1000f9f8:	003bd006 	br	1000e93c <__alt_data_end+0xf800e93c>
1000f9fc:	d9000a17 	ldw	r4,40(sp)
1000fa00:	d9800d17 	ldw	r6,52(sp)
1000fa04:	dd400a15 	stw	r21,40(sp)
1000fa08:	a905c83a 	sub	r2,r21,r4
1000fa0c:	308d883a 	add	r6,r6,r2
1000fa10:	d9800d15 	stw	r6,52(sp)
1000fa14:	002b883a 	mov	r21,zero
1000fa18:	003e0606 	br	1000f234 <__alt_data_end+0xf800f234>
1000fa1c:	9023883a 	mov	r17,r18
1000fa20:	9829883a 	mov	r20,r19
1000fa24:	04000084 	movi	r16,2
1000fa28:	003c9206 	br	1000ec74 <__alt_data_end+0xf800ec74>
1000fa2c:	04000044 	movi	r16,1
1000fa30:	dc000c15 	stw	r16,48(sp)
1000fa34:	dc000615 	stw	r16,24(sp)
1000fa38:	dc002215 	stw	r16,136(sp)
1000fa3c:	e0001115 	stw	zero,68(fp)
1000fa40:	000b883a 	mov	r5,zero
1000fa44:	003c6906 	br	1000ebec <__alt_data_end+0xf800ebec>
1000fa48:	3021883a 	mov	r16,r6
1000fa4c:	003ffb06 	br	1000fa3c <__alt_data_end+0xf800fa3c>
1000fa50:	1000021e 	bne	r2,zero,1000fa5c <_dtoa_r+0x11e0>
1000fa54:	4200004c 	andi	r8,r8,1
1000fa58:	403e7d1e 	bne	r8,zero,1000f450 <__alt_data_end+0xf800f450>
1000fa5c:	01000c04 	movi	r4,48
1000fa60:	00000106 	br	1000fa68 <_dtoa_r+0x11ec>
1000fa64:	102f883a 	mov	r23,r2
1000fa68:	b8bfffc4 	addi	r2,r23,-1
1000fa6c:	10c00007 	ldb	r3,0(r2)
1000fa70:	193ffc26 	beq	r3,r4,1000fa64 <__alt_data_end+0xf800fa64>
1000fa74:	003e8706 	br	1000f494 <__alt_data_end+0xf800f494>
1000fa78:	d8800517 	ldw	r2,20(sp)
1000fa7c:	00a3c83a 	sub	r17,zero,r2
1000fa80:	8800a426 	beq	r17,zero,1000fd14 <_dtoa_r+0x1498>
1000fa84:	888003cc 	andi	r2,r17,15
1000fa88:	100490fa 	slli	r2,r2,3
1000fa8c:	00c400b4 	movhi	r3,4098
1000fa90:	18e4af04 	addi	r3,r3,-27972
1000fa94:	1885883a 	add	r2,r3,r2
1000fa98:	11800017 	ldw	r6,0(r2)
1000fa9c:	11c00117 	ldw	r7,4(r2)
1000faa0:	9009883a 	mov	r4,r18
1000faa4:	980b883a 	mov	r5,r19
1000faa8:	8823d13a 	srai	r17,r17,4
1000faac:	000ab040 	call	1000ab04 <__muldf3>
1000fab0:	d8800f15 	stw	r2,60(sp)
1000fab4:	d8c01015 	stw	r3,64(sp)
1000fab8:	8800e826 	beq	r17,zero,1000fe5c <_dtoa_r+0x15e0>
1000fabc:	050400b4 	movhi	r20,4098
1000fac0:	a524a504 	addi	r20,r20,-28012
1000fac4:	04000084 	movi	r16,2
1000fac8:	8980004c 	andi	r6,r17,1
1000facc:	1009883a 	mov	r4,r2
1000fad0:	8823d07a 	srai	r17,r17,1
1000fad4:	180b883a 	mov	r5,r3
1000fad8:	30000426 	beq	r6,zero,1000faec <_dtoa_r+0x1270>
1000fadc:	a1800017 	ldw	r6,0(r20)
1000fae0:	a1c00117 	ldw	r7,4(r20)
1000fae4:	84000044 	addi	r16,r16,1
1000fae8:	000ab040 	call	1000ab04 <__muldf3>
1000faec:	a5000204 	addi	r20,r20,8
1000faf0:	883ff51e 	bne	r17,zero,1000fac8 <__alt_data_end+0xf800fac8>
1000faf4:	d8800f15 	stw	r2,60(sp)
1000faf8:	d8c01015 	stw	r3,64(sp)
1000fafc:	003c7606 	br	1000ecd8 <__alt_data_end+0xf800ecd8>
1000fb00:	00c00c04 	movi	r3,48
1000fb04:	10c00005 	stb	r3,0(r2)
1000fb08:	d8c00517 	ldw	r3,20(sp)
1000fb0c:	bd3fffc3 	ldbu	r20,-1(r23)
1000fb10:	18c00044 	addi	r3,r3,1
1000fb14:	d8c00515 	stw	r3,20(sp)
1000fb18:	003db906 	br	1000f200 <__alt_data_end+0xf800f200>
1000fb1c:	89400117 	ldw	r5,4(r17)
1000fb20:	e009883a 	mov	r4,fp
1000fb24:	0011dec0 	call	10011dec <_Balloc>
1000fb28:	89800417 	ldw	r6,16(r17)
1000fb2c:	89400304 	addi	r5,r17,12
1000fb30:	11000304 	addi	r4,r2,12
1000fb34:	31800084 	addi	r6,r6,2
1000fb38:	318d883a 	add	r6,r6,r6
1000fb3c:	318d883a 	add	r6,r6,r6
1000fb40:	1027883a 	mov	r19,r2
1000fb44:	000be2c0 	call	1000be2c <memcpy>
1000fb48:	01800044 	movi	r6,1
1000fb4c:	980b883a 	mov	r5,r19
1000fb50:	e009883a 	mov	r4,fp
1000fb54:	00126280 	call	10012628 <__lshift>
1000fb58:	1029883a 	mov	r20,r2
1000fb5c:	003ecc06 	br	1000f690 <__alt_data_end+0xf800f690>
1000fb60:	00800e44 	movi	r2,57
1000fb64:	90809026 	beq	r18,r2,1000fda8 <_dtoa_r+0x152c>
1000fb68:	92000044 	addi	r8,r18,1
1000fb6c:	003f1f06 	br	1000f7ec <__alt_data_end+0xf800f7ec>
1000fb70:	9011883a 	mov	r8,r18
1000fb74:	8825883a 	mov	r18,r17
1000fb78:	a023883a 	mov	r17,r20
1000fb7c:	003e2906 	br	1000f424 <__alt_data_end+0xf800f424>
1000fb80:	002b883a 	mov	r21,zero
1000fb84:	0023883a 	mov	r17,zero
1000fb88:	003f5406 	br	1000f8dc <__alt_data_end+0xf800f8dc>
1000fb8c:	61bfffc4 	addi	r6,r12,-1
1000fb90:	300490fa 	slli	r2,r6,3
1000fb94:	00c400b4 	movhi	r3,4098
1000fb98:	18e4af04 	addi	r3,r3,-27972
1000fb9c:	1885883a 	add	r2,r3,r2
1000fba0:	11000017 	ldw	r4,0(r2)
1000fba4:	11400117 	ldw	r5,4(r2)
1000fba8:	d8800717 	ldw	r2,28(sp)
1000fbac:	880f883a 	mov	r7,r17
1000fbb0:	d9801215 	stw	r6,72(sp)
1000fbb4:	800d883a 	mov	r6,r16
1000fbb8:	db001615 	stw	r12,88(sp)
1000fbbc:	15c00044 	addi	r23,r2,1
1000fbc0:	000ab040 	call	1000ab04 <__muldf3>
1000fbc4:	d9401017 	ldw	r5,64(sp)
1000fbc8:	d9000f17 	ldw	r4,60(sp)
1000fbcc:	d8c01515 	stw	r3,84(sp)
1000fbd0:	d8801415 	stw	r2,80(sp)
1000fbd4:	000bc6c0 	call	1000bc6c <__fixdfsi>
1000fbd8:	1009883a 	mov	r4,r2
1000fbdc:	1021883a 	mov	r16,r2
1000fbe0:	000bcec0 	call	1000bcec <__floatsidf>
1000fbe4:	d9000f17 	ldw	r4,60(sp)
1000fbe8:	d9401017 	ldw	r5,64(sp)
1000fbec:	100d883a 	mov	r6,r2
1000fbf0:	180f883a 	mov	r7,r3
1000fbf4:	000b3700 	call	1000b370 <__subdf3>
1000fbf8:	1829883a 	mov	r20,r3
1000fbfc:	d8c00717 	ldw	r3,28(sp)
1000fc00:	84000c04 	addi	r16,r16,48
1000fc04:	1023883a 	mov	r17,r2
1000fc08:	1c000005 	stb	r16,0(r3)
1000fc0c:	db001617 	ldw	r12,88(sp)
1000fc10:	00800044 	movi	r2,1
1000fc14:	60802226 	beq	r12,r2,1000fca0 <_dtoa_r+0x1424>
1000fc18:	d9c00717 	ldw	r7,28(sp)
1000fc1c:	8805883a 	mov	r2,r17
1000fc20:	b82b883a 	mov	r21,r23
1000fc24:	3b19883a 	add	r12,r7,r12
1000fc28:	6023883a 	mov	r17,r12
1000fc2c:	a007883a 	mov	r3,r20
1000fc30:	dc800f15 	stw	r18,60(sp)
1000fc34:	000d883a 	mov	r6,zero
1000fc38:	01d00934 	movhi	r7,16420
1000fc3c:	1009883a 	mov	r4,r2
1000fc40:	180b883a 	mov	r5,r3
1000fc44:	000ab040 	call	1000ab04 <__muldf3>
1000fc48:	180b883a 	mov	r5,r3
1000fc4c:	1009883a 	mov	r4,r2
1000fc50:	1829883a 	mov	r20,r3
1000fc54:	1025883a 	mov	r18,r2
1000fc58:	000bc6c0 	call	1000bc6c <__fixdfsi>
1000fc5c:	1009883a 	mov	r4,r2
1000fc60:	1021883a 	mov	r16,r2
1000fc64:	000bcec0 	call	1000bcec <__floatsidf>
1000fc68:	100d883a 	mov	r6,r2
1000fc6c:	180f883a 	mov	r7,r3
1000fc70:	9009883a 	mov	r4,r18
1000fc74:	a00b883a 	mov	r5,r20
1000fc78:	84000c04 	addi	r16,r16,48
1000fc7c:	000b3700 	call	1000b370 <__subdf3>
1000fc80:	ad400044 	addi	r21,r21,1
1000fc84:	ac3fffc5 	stb	r16,-1(r21)
1000fc88:	ac7fea1e 	bne	r21,r17,1000fc34 <__alt_data_end+0xf800fc34>
1000fc8c:	1023883a 	mov	r17,r2
1000fc90:	d8801217 	ldw	r2,72(sp)
1000fc94:	dc800f17 	ldw	r18,60(sp)
1000fc98:	1829883a 	mov	r20,r3
1000fc9c:	b8af883a 	add	r23,r23,r2
1000fca0:	d9001417 	ldw	r4,80(sp)
1000fca4:	d9401517 	ldw	r5,84(sp)
1000fca8:	000d883a 	mov	r6,zero
1000fcac:	01cff834 	movhi	r7,16352
1000fcb0:	00097240 	call	10009724 <__adddf3>
1000fcb4:	880d883a 	mov	r6,r17
1000fcb8:	a00f883a 	mov	r7,r20
1000fcbc:	1009883a 	mov	r4,r2
1000fcc0:	180b883a 	mov	r5,r3
1000fcc4:	00162ec0 	call	100162ec <__ledf2>
1000fcc8:	10003e0e 	bge	r2,zero,1000fdc4 <_dtoa_r+0x1548>
1000fccc:	d9001317 	ldw	r4,76(sp)
1000fcd0:	bd3fffc3 	ldbu	r20,-1(r23)
1000fcd4:	d9000515 	stw	r4,20(sp)
1000fcd8:	003d3b06 	br	1000f1c8 <__alt_data_end+0xf800f1c8>
1000fcdc:	0027883a 	mov	r19,zero
1000fce0:	003f1b06 	br	1000f950 <__alt_data_end+0xf800f950>
1000fce4:	d8800817 	ldw	r2,32(sp)
1000fce8:	11e9c83a 	sub	r20,r2,r7
1000fcec:	0005883a 	mov	r2,zero
1000fcf0:	003d5406 	br	1000f244 <__alt_data_end+0xf800f244>
1000fcf4:	00800044 	movi	r2,1
1000fcf8:	003dc706 	br	1000f418 <__alt_data_end+0xf800f418>
1000fcfc:	d8c00217 	ldw	r3,8(sp)
1000fd00:	00800d84 	movi	r2,54
1000fd04:	dd400a17 	ldw	r21,40(sp)
1000fd08:	10c5c83a 	sub	r2,r2,r3
1000fd0c:	dd000817 	ldw	r20,32(sp)
1000fd10:	003d4c06 	br	1000f244 <__alt_data_end+0xf800f244>
1000fd14:	dc800f15 	stw	r18,60(sp)
1000fd18:	dcc01015 	stw	r19,64(sp)
1000fd1c:	04000084 	movi	r16,2
1000fd20:	003bed06 	br	1000ecd8 <__alt_data_end+0xf800ecd8>
1000fd24:	d9000617 	ldw	r4,24(sp)
1000fd28:	203f0d26 	beq	r4,zero,1000f960 <__alt_data_end+0xf800f960>
1000fd2c:	d9800c17 	ldw	r6,48(sp)
1000fd30:	01bcab0e 	bge	zero,r6,1000efe0 <__alt_data_end+0xf800efe0>
1000fd34:	d9401017 	ldw	r5,64(sp)
1000fd38:	d9000f17 	ldw	r4,60(sp)
1000fd3c:	000d883a 	mov	r6,zero
1000fd40:	01d00934 	movhi	r7,16420
1000fd44:	000ab040 	call	1000ab04 <__muldf3>
1000fd48:	81000044 	addi	r4,r16,1
1000fd4c:	d8800f15 	stw	r2,60(sp)
1000fd50:	d8c01015 	stw	r3,64(sp)
1000fd54:	000bcec0 	call	1000bcec <__floatsidf>
1000fd58:	d9800f17 	ldw	r6,60(sp)
1000fd5c:	d9c01017 	ldw	r7,64(sp)
1000fd60:	1009883a 	mov	r4,r2
1000fd64:	180b883a 	mov	r5,r3
1000fd68:	000ab040 	call	1000ab04 <__muldf3>
1000fd6c:	01d00734 	movhi	r7,16412
1000fd70:	000d883a 	mov	r6,zero
1000fd74:	1009883a 	mov	r4,r2
1000fd78:	180b883a 	mov	r5,r3
1000fd7c:	00097240 	call	10009724 <__adddf3>
1000fd80:	d9c00517 	ldw	r7,20(sp)
1000fd84:	047f3034 	movhi	r17,64704
1000fd88:	1021883a 	mov	r16,r2
1000fd8c:	39ffffc4 	addi	r7,r7,-1
1000fd90:	d9c01315 	stw	r7,76(sp)
1000fd94:	1c63883a 	add	r17,r3,r17
1000fd98:	db000c17 	ldw	r12,48(sp)
1000fd9c:	003bea06 	br	1000ed48 <__alt_data_end+0xf800ed48>
1000fda0:	dc000915 	stw	r16,36(sp)
1000fda4:	003e0e06 	br	1000f5e0 <__alt_data_end+0xf800f5e0>
1000fda8:	01000e44 	movi	r4,57
1000fdac:	8825883a 	mov	r18,r17
1000fdb0:	9dc00044 	addi	r23,r19,1
1000fdb4:	99000005 	stb	r4,0(r19)
1000fdb8:	a023883a 	mov	r17,r20
1000fdbc:	dc000915 	stw	r16,36(sp)
1000fdc0:	003da406 	br	1000f454 <__alt_data_end+0xf800f454>
1000fdc4:	d9801417 	ldw	r6,80(sp)
1000fdc8:	d9c01517 	ldw	r7,84(sp)
1000fdcc:	0009883a 	mov	r4,zero
1000fdd0:	014ff834 	movhi	r5,16352
1000fdd4:	000b3700 	call	1000b370 <__subdf3>
1000fdd8:	880d883a 	mov	r6,r17
1000fddc:	a00f883a 	mov	r7,r20
1000fde0:	1009883a 	mov	r4,r2
1000fde4:	180b883a 	mov	r5,r3
1000fde8:	000aa280 	call	1000aa28 <__gedf2>
1000fdec:	00bc7c0e 	bge	zero,r2,1000efe0 <__alt_data_end+0xf800efe0>
1000fdf0:	01000c04 	movi	r4,48
1000fdf4:	00000106 	br	1000fdfc <_dtoa_r+0x1580>
1000fdf8:	102f883a 	mov	r23,r2
1000fdfc:	b8bfffc4 	addi	r2,r23,-1
1000fe00:	10c00007 	ldb	r3,0(r2)
1000fe04:	193ffc26 	beq	r3,r4,1000fdf8 <__alt_data_end+0xf800fdf8>
1000fe08:	d9801317 	ldw	r6,76(sp)
1000fe0c:	d9800515 	stw	r6,20(sp)
1000fe10:	003c4406 	br	1000ef24 <__alt_data_end+0xf800ef24>
1000fe14:	d9801317 	ldw	r6,76(sp)
1000fe18:	d9800515 	stw	r6,20(sp)
1000fe1c:	003cea06 	br	1000f1c8 <__alt_data_end+0xf800f1c8>
1000fe20:	dd800f17 	ldw	r22,60(sp)
1000fe24:	dcc01017 	ldw	r19,64(sp)
1000fe28:	dc801217 	ldw	r18,72(sp)
1000fe2c:	003c6c06 	br	1000efe0 <__alt_data_end+0xf800efe0>
1000fe30:	903e031e 	bne	r18,zero,1000f640 <__alt_data_end+0xf800f640>
1000fe34:	003ebb06 	br	1000f924 <__alt_data_end+0xf800f924>
1000fe38:	103e6c1e 	bne	r2,zero,1000f7ec <__alt_data_end+0xf800f7ec>
1000fe3c:	4080004c 	andi	r2,r8,1
1000fe40:	103e6a26 	beq	r2,zero,1000f7ec <__alt_data_end+0xf800f7ec>
1000fe44:	003e6606 	br	1000f7e0 <__alt_data_end+0xf800f7e0>
1000fe48:	d8c00317 	ldw	r3,12(sp)
1000fe4c:	00800084 	movi	r2,2
1000fe50:	10c02916 	blt	r2,r3,1000fef8 <_dtoa_r+0x167c>
1000fe54:	d9000c17 	ldw	r4,48(sp)
1000fe58:	003e8806 	br	1000f87c <__alt_data_end+0xf800f87c>
1000fe5c:	04000084 	movi	r16,2
1000fe60:	003b9d06 	br	1000ecd8 <__alt_data_end+0xf800ecd8>
1000fe64:	d9001317 	ldw	r4,76(sp)
1000fe68:	d9000515 	stw	r4,20(sp)
1000fe6c:	003cd606 	br	1000f1c8 <__alt_data_end+0xf800f1c8>
1000fe70:	d8801317 	ldw	r2,76(sp)
1000fe74:	d8800515 	stw	r2,20(sp)
1000fe78:	003c2a06 	br	1000ef24 <__alt_data_end+0xf800ef24>
1000fe7c:	d9800317 	ldw	r6,12(sp)
1000fe80:	00800084 	movi	r2,2
1000fe84:	11801516 	blt	r2,r6,1000fedc <_dtoa_r+0x1660>
1000fe88:	d9c00c17 	ldw	r7,48(sp)
1000fe8c:	d9c00615 	stw	r7,24(sp)
1000fe90:	003df706 	br	1000f670 <__alt_data_end+0xf800f670>
1000fe94:	193d3926 	beq	r3,r4,1000f37c <__alt_data_end+0xf800f37c>
1000fe98:	00c00f04 	movi	r3,60
1000fe9c:	1885c83a 	sub	r2,r3,r2
1000fea0:	003ddf06 	br	1000f620 <__alt_data_end+0xf800f620>
1000fea4:	e009883a 	mov	r4,fp
1000fea8:	e0001115 	stw	zero,68(fp)
1000feac:	000b883a 	mov	r5,zero
1000feb0:	0011dec0 	call	10011dec <_Balloc>
1000feb4:	d8800715 	stw	r2,28(sp)
1000feb8:	d8c00717 	ldw	r3,28(sp)
1000febc:	00bfffc4 	movi	r2,-1
1000fec0:	01000044 	movi	r4,1
1000fec4:	d8800c15 	stw	r2,48(sp)
1000fec8:	e0c01015 	stw	r3,64(fp)
1000fecc:	d9000b15 	stw	r4,44(sp)
1000fed0:	d8800615 	stw	r2,24(sp)
1000fed4:	d8002215 	stw	zero,136(sp)
1000fed8:	003c4106 	br	1000efe0 <__alt_data_end+0xf800efe0>
1000fedc:	d8c00c17 	ldw	r3,48(sp)
1000fee0:	d8c00615 	stw	r3,24(sp)
1000fee4:	003e7006 	br	1000f8a8 <__alt_data_end+0xf800f8a8>
1000fee8:	04400044 	movi	r17,1
1000feec:	003b2006 	br	1000eb70 <__alt_data_end+0xf800eb70>
1000fef0:	000b883a 	mov	r5,zero
1000fef4:	003b3d06 	br	1000ebec <__alt_data_end+0xf800ebec>
1000fef8:	d8800c17 	ldw	r2,48(sp)
1000fefc:	d8800615 	stw	r2,24(sp)
1000ff00:	003e6906 	br	1000f8a8 <__alt_data_end+0xf800f8a8>

1000ff04 <__sflush_r>:
1000ff04:	2880030b 	ldhu	r2,12(r5)
1000ff08:	defffb04 	addi	sp,sp,-20
1000ff0c:	dcc00315 	stw	r19,12(sp)
1000ff10:	dc400115 	stw	r17,4(sp)
1000ff14:	dfc00415 	stw	ra,16(sp)
1000ff18:	dc800215 	stw	r18,8(sp)
1000ff1c:	dc000015 	stw	r16,0(sp)
1000ff20:	10c0020c 	andi	r3,r2,8
1000ff24:	2823883a 	mov	r17,r5
1000ff28:	2027883a 	mov	r19,r4
1000ff2c:	1800311e 	bne	r3,zero,1000fff4 <__sflush_r+0xf0>
1000ff30:	28c00117 	ldw	r3,4(r5)
1000ff34:	10820014 	ori	r2,r2,2048
1000ff38:	2880030d 	sth	r2,12(r5)
1000ff3c:	00c04b0e 	bge	zero,r3,1001006c <__sflush_r+0x168>
1000ff40:	8a000a17 	ldw	r8,40(r17)
1000ff44:	40002326 	beq	r8,zero,1000ffd4 <__sflush_r+0xd0>
1000ff48:	9c000017 	ldw	r16,0(r19)
1000ff4c:	10c4000c 	andi	r3,r2,4096
1000ff50:	98000015 	stw	zero,0(r19)
1000ff54:	18004826 	beq	r3,zero,10010078 <__sflush_r+0x174>
1000ff58:	89801417 	ldw	r6,80(r17)
1000ff5c:	10c0010c 	andi	r3,r2,4
1000ff60:	18000626 	beq	r3,zero,1000ff7c <__sflush_r+0x78>
1000ff64:	88c00117 	ldw	r3,4(r17)
1000ff68:	88800c17 	ldw	r2,48(r17)
1000ff6c:	30cdc83a 	sub	r6,r6,r3
1000ff70:	10000226 	beq	r2,zero,1000ff7c <__sflush_r+0x78>
1000ff74:	88800f17 	ldw	r2,60(r17)
1000ff78:	308dc83a 	sub	r6,r6,r2
1000ff7c:	89400717 	ldw	r5,28(r17)
1000ff80:	000f883a 	mov	r7,zero
1000ff84:	9809883a 	mov	r4,r19
1000ff88:	403ee83a 	callr	r8
1000ff8c:	00ffffc4 	movi	r3,-1
1000ff90:	10c04426 	beq	r2,r3,100100a4 <__sflush_r+0x1a0>
1000ff94:	88c0030b 	ldhu	r3,12(r17)
1000ff98:	89000417 	ldw	r4,16(r17)
1000ff9c:	88000115 	stw	zero,4(r17)
1000ffa0:	197dffcc 	andi	r5,r3,63487
1000ffa4:	8940030d 	sth	r5,12(r17)
1000ffa8:	89000015 	stw	r4,0(r17)
1000ffac:	18c4000c 	andi	r3,r3,4096
1000ffb0:	18002c1e 	bne	r3,zero,10010064 <__sflush_r+0x160>
1000ffb4:	89400c17 	ldw	r5,48(r17)
1000ffb8:	9c000015 	stw	r16,0(r19)
1000ffbc:	28000526 	beq	r5,zero,1000ffd4 <__sflush_r+0xd0>
1000ffc0:	88801004 	addi	r2,r17,64
1000ffc4:	28800226 	beq	r5,r2,1000ffd0 <__sflush_r+0xcc>
1000ffc8:	9809883a 	mov	r4,r19
1000ffcc:	00106800 	call	10010680 <_free_r>
1000ffd0:	88000c15 	stw	zero,48(r17)
1000ffd4:	0005883a 	mov	r2,zero
1000ffd8:	dfc00417 	ldw	ra,16(sp)
1000ffdc:	dcc00317 	ldw	r19,12(sp)
1000ffe0:	dc800217 	ldw	r18,8(sp)
1000ffe4:	dc400117 	ldw	r17,4(sp)
1000ffe8:	dc000017 	ldw	r16,0(sp)
1000ffec:	dec00504 	addi	sp,sp,20
1000fff0:	f800283a 	ret
1000fff4:	2c800417 	ldw	r18,16(r5)
1000fff8:	903ff626 	beq	r18,zero,1000ffd4 <__alt_data_end+0xf800ffd4>
1000fffc:	2c000017 	ldw	r16,0(r5)
10010000:	108000cc 	andi	r2,r2,3
10010004:	2c800015 	stw	r18,0(r5)
10010008:	84a1c83a 	sub	r16,r16,r18
1001000c:	1000131e 	bne	r2,zero,1001005c <__sflush_r+0x158>
10010010:	28800517 	ldw	r2,20(r5)
10010014:	88800215 	stw	r2,8(r17)
10010018:	04000316 	blt	zero,r16,10010028 <__sflush_r+0x124>
1001001c:	003fed06 	br	1000ffd4 <__alt_data_end+0xf800ffd4>
10010020:	90a5883a 	add	r18,r18,r2
10010024:	043feb0e 	bge	zero,r16,1000ffd4 <__alt_data_end+0xf800ffd4>
10010028:	88800917 	ldw	r2,36(r17)
1001002c:	89400717 	ldw	r5,28(r17)
10010030:	800f883a 	mov	r7,r16
10010034:	900d883a 	mov	r6,r18
10010038:	9809883a 	mov	r4,r19
1001003c:	103ee83a 	callr	r2
10010040:	80a1c83a 	sub	r16,r16,r2
10010044:	00bff616 	blt	zero,r2,10010020 <__alt_data_end+0xf8010020>
10010048:	88c0030b 	ldhu	r3,12(r17)
1001004c:	00bfffc4 	movi	r2,-1
10010050:	18c01014 	ori	r3,r3,64
10010054:	88c0030d 	sth	r3,12(r17)
10010058:	003fdf06 	br	1000ffd8 <__alt_data_end+0xf800ffd8>
1001005c:	0005883a 	mov	r2,zero
10010060:	003fec06 	br	10010014 <__alt_data_end+0xf8010014>
10010064:	88801415 	stw	r2,80(r17)
10010068:	003fd206 	br	1000ffb4 <__alt_data_end+0xf800ffb4>
1001006c:	28c00f17 	ldw	r3,60(r5)
10010070:	00ffb316 	blt	zero,r3,1000ff40 <__alt_data_end+0xf800ff40>
10010074:	003fd706 	br	1000ffd4 <__alt_data_end+0xf800ffd4>
10010078:	89400717 	ldw	r5,28(r17)
1001007c:	000d883a 	mov	r6,zero
10010080:	01c00044 	movi	r7,1
10010084:	9809883a 	mov	r4,r19
10010088:	403ee83a 	callr	r8
1001008c:	100d883a 	mov	r6,r2
10010090:	00bfffc4 	movi	r2,-1
10010094:	30801426 	beq	r6,r2,100100e8 <__sflush_r+0x1e4>
10010098:	8880030b 	ldhu	r2,12(r17)
1001009c:	8a000a17 	ldw	r8,40(r17)
100100a0:	003fae06 	br	1000ff5c <__alt_data_end+0xf800ff5c>
100100a4:	98c00017 	ldw	r3,0(r19)
100100a8:	183fba26 	beq	r3,zero,1000ff94 <__alt_data_end+0xf800ff94>
100100ac:	01000744 	movi	r4,29
100100b0:	19000626 	beq	r3,r4,100100cc <__sflush_r+0x1c8>
100100b4:	01000584 	movi	r4,22
100100b8:	19000426 	beq	r3,r4,100100cc <__sflush_r+0x1c8>
100100bc:	88c0030b 	ldhu	r3,12(r17)
100100c0:	18c01014 	ori	r3,r3,64
100100c4:	88c0030d 	sth	r3,12(r17)
100100c8:	003fc306 	br	1000ffd8 <__alt_data_end+0xf800ffd8>
100100cc:	8880030b 	ldhu	r2,12(r17)
100100d0:	88c00417 	ldw	r3,16(r17)
100100d4:	88000115 	stw	zero,4(r17)
100100d8:	10bdffcc 	andi	r2,r2,63487
100100dc:	8880030d 	sth	r2,12(r17)
100100e0:	88c00015 	stw	r3,0(r17)
100100e4:	003fb306 	br	1000ffb4 <__alt_data_end+0xf800ffb4>
100100e8:	98800017 	ldw	r2,0(r19)
100100ec:	103fea26 	beq	r2,zero,10010098 <__alt_data_end+0xf8010098>
100100f0:	00c00744 	movi	r3,29
100100f4:	10c00226 	beq	r2,r3,10010100 <__sflush_r+0x1fc>
100100f8:	00c00584 	movi	r3,22
100100fc:	10c0031e 	bne	r2,r3,1001010c <__sflush_r+0x208>
10010100:	9c000015 	stw	r16,0(r19)
10010104:	0005883a 	mov	r2,zero
10010108:	003fb306 	br	1000ffd8 <__alt_data_end+0xf800ffd8>
1001010c:	88c0030b 	ldhu	r3,12(r17)
10010110:	3005883a 	mov	r2,r6
10010114:	18c01014 	ori	r3,r3,64
10010118:	88c0030d 	sth	r3,12(r17)
1001011c:	003fae06 	br	1000ffd8 <__alt_data_end+0xf800ffd8>

10010120 <_fflush_r>:
10010120:	defffd04 	addi	sp,sp,-12
10010124:	dc000115 	stw	r16,4(sp)
10010128:	dfc00215 	stw	ra,8(sp)
1001012c:	2021883a 	mov	r16,r4
10010130:	20000226 	beq	r4,zero,1001013c <_fflush_r+0x1c>
10010134:	20800e17 	ldw	r2,56(r4)
10010138:	10000c26 	beq	r2,zero,1001016c <_fflush_r+0x4c>
1001013c:	2880030f 	ldh	r2,12(r5)
10010140:	1000051e 	bne	r2,zero,10010158 <_fflush_r+0x38>
10010144:	0005883a 	mov	r2,zero
10010148:	dfc00217 	ldw	ra,8(sp)
1001014c:	dc000117 	ldw	r16,4(sp)
10010150:	dec00304 	addi	sp,sp,12
10010154:	f800283a 	ret
10010158:	8009883a 	mov	r4,r16
1001015c:	dfc00217 	ldw	ra,8(sp)
10010160:	dc000117 	ldw	r16,4(sp)
10010164:	dec00304 	addi	sp,sp,12
10010168:	000ff041 	jmpi	1000ff04 <__sflush_r>
1001016c:	d9400015 	stw	r5,0(sp)
10010170:	001050c0 	call	1001050c <__sinit>
10010174:	d9400017 	ldw	r5,0(sp)
10010178:	003ff006 	br	1001013c <__alt_data_end+0xf801013c>

1001017c <fflush>:
1001017c:	20000526 	beq	r4,zero,10010194 <fflush+0x18>
10010180:	008400b4 	movhi	r2,4098
10010184:	10acbd04 	addi	r2,r2,-19724
10010188:	200b883a 	mov	r5,r4
1001018c:	11000017 	ldw	r4,0(r2)
10010190:	00101201 	jmpi	10010120 <_fflush_r>
10010194:	008400b4 	movhi	r2,4098
10010198:	10acbc04 	addi	r2,r2,-19728
1001019c:	11000017 	ldw	r4,0(r2)
100101a0:	01440074 	movhi	r5,4097
100101a4:	29404804 	addi	r5,r5,288
100101a8:	0010f1c1 	jmpi	10010f1c <_fwalk_reent>

100101ac <__fp_unlock>:
100101ac:	0005883a 	mov	r2,zero
100101b0:	f800283a 	ret

100101b4 <_cleanup_r>:
100101b4:	01440074 	movhi	r5,4097
100101b8:	2953dc04 	addi	r5,r5,20336
100101bc:	0010f1c1 	jmpi	10010f1c <_fwalk_reent>

100101c0 <__sinit.part.1>:
100101c0:	defff704 	addi	sp,sp,-36
100101c4:	00c40074 	movhi	r3,4097
100101c8:	dfc00815 	stw	ra,32(sp)
100101cc:	ddc00715 	stw	r23,28(sp)
100101d0:	dd800615 	stw	r22,24(sp)
100101d4:	dd400515 	stw	r21,20(sp)
100101d8:	dd000415 	stw	r20,16(sp)
100101dc:	dcc00315 	stw	r19,12(sp)
100101e0:	dc800215 	stw	r18,8(sp)
100101e4:	dc400115 	stw	r17,4(sp)
100101e8:	dc000015 	stw	r16,0(sp)
100101ec:	18c06d04 	addi	r3,r3,436
100101f0:	24000117 	ldw	r16,4(r4)
100101f4:	20c00f15 	stw	r3,60(r4)
100101f8:	2080bb04 	addi	r2,r4,748
100101fc:	00c000c4 	movi	r3,3
10010200:	20c0b915 	stw	r3,740(r4)
10010204:	2080ba15 	stw	r2,744(r4)
10010208:	2000b815 	stw	zero,736(r4)
1001020c:	05c00204 	movi	r23,8
10010210:	00800104 	movi	r2,4
10010214:	2025883a 	mov	r18,r4
10010218:	b80d883a 	mov	r6,r23
1001021c:	81001704 	addi	r4,r16,92
10010220:	000b883a 	mov	r5,zero
10010224:	80000015 	stw	zero,0(r16)
10010228:	80000115 	stw	zero,4(r16)
1001022c:	80000215 	stw	zero,8(r16)
10010230:	8080030d 	sth	r2,12(r16)
10010234:	80001915 	stw	zero,100(r16)
10010238:	8000038d 	sth	zero,14(r16)
1001023c:	80000415 	stw	zero,16(r16)
10010240:	80000515 	stw	zero,20(r16)
10010244:	80000615 	stw	zero,24(r16)
10010248:	0011cc40 	call	10011cc4 <memset>
1001024c:	05840074 	movhi	r22,4097
10010250:	94400217 	ldw	r17,8(r18)
10010254:	05440074 	movhi	r21,4097
10010258:	05040074 	movhi	r20,4097
1001025c:	04c40074 	movhi	r19,4097
10010260:	b58d3404 	addi	r22,r22,13520
10010264:	ad4d4b04 	addi	r21,r21,13612
10010268:	a50d6a04 	addi	r20,r20,13736
1001026c:	9ccd8104 	addi	r19,r19,13828
10010270:	85800815 	stw	r22,32(r16)
10010274:	85400915 	stw	r21,36(r16)
10010278:	85000a15 	stw	r20,40(r16)
1001027c:	84c00b15 	stw	r19,44(r16)
10010280:	84000715 	stw	r16,28(r16)
10010284:	00800284 	movi	r2,10
10010288:	8880030d 	sth	r2,12(r17)
1001028c:	00800044 	movi	r2,1
10010290:	b80d883a 	mov	r6,r23
10010294:	89001704 	addi	r4,r17,92
10010298:	000b883a 	mov	r5,zero
1001029c:	88000015 	stw	zero,0(r17)
100102a0:	88000115 	stw	zero,4(r17)
100102a4:	88000215 	stw	zero,8(r17)
100102a8:	88001915 	stw	zero,100(r17)
100102ac:	8880038d 	sth	r2,14(r17)
100102b0:	88000415 	stw	zero,16(r17)
100102b4:	88000515 	stw	zero,20(r17)
100102b8:	88000615 	stw	zero,24(r17)
100102bc:	0011cc40 	call	10011cc4 <memset>
100102c0:	94000317 	ldw	r16,12(r18)
100102c4:	00800484 	movi	r2,18
100102c8:	8c400715 	stw	r17,28(r17)
100102cc:	8d800815 	stw	r22,32(r17)
100102d0:	8d400915 	stw	r21,36(r17)
100102d4:	8d000a15 	stw	r20,40(r17)
100102d8:	8cc00b15 	stw	r19,44(r17)
100102dc:	8080030d 	sth	r2,12(r16)
100102e0:	00800084 	movi	r2,2
100102e4:	80000015 	stw	zero,0(r16)
100102e8:	80000115 	stw	zero,4(r16)
100102ec:	80000215 	stw	zero,8(r16)
100102f0:	80001915 	stw	zero,100(r16)
100102f4:	8080038d 	sth	r2,14(r16)
100102f8:	80000415 	stw	zero,16(r16)
100102fc:	80000515 	stw	zero,20(r16)
10010300:	80000615 	stw	zero,24(r16)
10010304:	b80d883a 	mov	r6,r23
10010308:	000b883a 	mov	r5,zero
1001030c:	81001704 	addi	r4,r16,92
10010310:	0011cc40 	call	10011cc4 <memset>
10010314:	00800044 	movi	r2,1
10010318:	84000715 	stw	r16,28(r16)
1001031c:	85800815 	stw	r22,32(r16)
10010320:	85400915 	stw	r21,36(r16)
10010324:	85000a15 	stw	r20,40(r16)
10010328:	84c00b15 	stw	r19,44(r16)
1001032c:	90800e15 	stw	r2,56(r18)
10010330:	dfc00817 	ldw	ra,32(sp)
10010334:	ddc00717 	ldw	r23,28(sp)
10010338:	dd800617 	ldw	r22,24(sp)
1001033c:	dd400517 	ldw	r21,20(sp)
10010340:	dd000417 	ldw	r20,16(sp)
10010344:	dcc00317 	ldw	r19,12(sp)
10010348:	dc800217 	ldw	r18,8(sp)
1001034c:	dc400117 	ldw	r17,4(sp)
10010350:	dc000017 	ldw	r16,0(sp)
10010354:	dec00904 	addi	sp,sp,36
10010358:	f800283a 	ret

1001035c <__fp_lock>:
1001035c:	0005883a 	mov	r2,zero
10010360:	f800283a 	ret

10010364 <__sfmoreglue>:
10010364:	defffc04 	addi	sp,sp,-16
10010368:	dc800215 	stw	r18,8(sp)
1001036c:	2825883a 	mov	r18,r5
10010370:	dc000015 	stw	r16,0(sp)
10010374:	01401a04 	movi	r5,104
10010378:	2021883a 	mov	r16,r4
1001037c:	913fffc4 	addi	r4,r18,-1
10010380:	dfc00315 	stw	ra,12(sp)
10010384:	dc400115 	stw	r17,4(sp)
10010388:	00096fc0 	call	100096fc <__mulsi3>
1001038c:	8009883a 	mov	r4,r16
10010390:	11401d04 	addi	r5,r2,116
10010394:	1023883a 	mov	r17,r2
10010398:	00112780 	call	10011278 <_malloc_r>
1001039c:	1021883a 	mov	r16,r2
100103a0:	10000726 	beq	r2,zero,100103c0 <__sfmoreglue+0x5c>
100103a4:	11000304 	addi	r4,r2,12
100103a8:	10000015 	stw	zero,0(r2)
100103ac:	14800115 	stw	r18,4(r2)
100103b0:	11000215 	stw	r4,8(r2)
100103b4:	89801a04 	addi	r6,r17,104
100103b8:	000b883a 	mov	r5,zero
100103bc:	0011cc40 	call	10011cc4 <memset>
100103c0:	8005883a 	mov	r2,r16
100103c4:	dfc00317 	ldw	ra,12(sp)
100103c8:	dc800217 	ldw	r18,8(sp)
100103cc:	dc400117 	ldw	r17,4(sp)
100103d0:	dc000017 	ldw	r16,0(sp)
100103d4:	dec00404 	addi	sp,sp,16
100103d8:	f800283a 	ret

100103dc <__sfp>:
100103dc:	defffb04 	addi	sp,sp,-20
100103e0:	dc000015 	stw	r16,0(sp)
100103e4:	040400b4 	movhi	r16,4098
100103e8:	842cbc04 	addi	r16,r16,-19728
100103ec:	dcc00315 	stw	r19,12(sp)
100103f0:	2027883a 	mov	r19,r4
100103f4:	81000017 	ldw	r4,0(r16)
100103f8:	dfc00415 	stw	ra,16(sp)
100103fc:	dc800215 	stw	r18,8(sp)
10010400:	20800e17 	ldw	r2,56(r4)
10010404:	dc400115 	stw	r17,4(sp)
10010408:	1000021e 	bne	r2,zero,10010414 <__sfp+0x38>
1001040c:	00101c00 	call	100101c0 <__sinit.part.1>
10010410:	81000017 	ldw	r4,0(r16)
10010414:	2480b804 	addi	r18,r4,736
10010418:	047fffc4 	movi	r17,-1
1001041c:	91000117 	ldw	r4,4(r18)
10010420:	94000217 	ldw	r16,8(r18)
10010424:	213fffc4 	addi	r4,r4,-1
10010428:	20000a16 	blt	r4,zero,10010454 <__sfp+0x78>
1001042c:	8080030f 	ldh	r2,12(r16)
10010430:	10000c26 	beq	r2,zero,10010464 <__sfp+0x88>
10010434:	80c01d04 	addi	r3,r16,116
10010438:	00000206 	br	10010444 <__sfp+0x68>
1001043c:	18bfe60f 	ldh	r2,-104(r3)
10010440:	10000826 	beq	r2,zero,10010464 <__sfp+0x88>
10010444:	213fffc4 	addi	r4,r4,-1
10010448:	1c3ffd04 	addi	r16,r3,-12
1001044c:	18c01a04 	addi	r3,r3,104
10010450:	247ffa1e 	bne	r4,r17,1001043c <__alt_data_end+0xf801043c>
10010454:	90800017 	ldw	r2,0(r18)
10010458:	10001d26 	beq	r2,zero,100104d0 <__sfp+0xf4>
1001045c:	1025883a 	mov	r18,r2
10010460:	003fee06 	br	1001041c <__alt_data_end+0xf801041c>
10010464:	00bfffc4 	movi	r2,-1
10010468:	8080038d 	sth	r2,14(r16)
1001046c:	00800044 	movi	r2,1
10010470:	8080030d 	sth	r2,12(r16)
10010474:	80001915 	stw	zero,100(r16)
10010478:	80000015 	stw	zero,0(r16)
1001047c:	80000215 	stw	zero,8(r16)
10010480:	80000115 	stw	zero,4(r16)
10010484:	80000415 	stw	zero,16(r16)
10010488:	80000515 	stw	zero,20(r16)
1001048c:	80000615 	stw	zero,24(r16)
10010490:	01800204 	movi	r6,8
10010494:	000b883a 	mov	r5,zero
10010498:	81001704 	addi	r4,r16,92
1001049c:	0011cc40 	call	10011cc4 <memset>
100104a0:	8005883a 	mov	r2,r16
100104a4:	80000c15 	stw	zero,48(r16)
100104a8:	80000d15 	stw	zero,52(r16)
100104ac:	80001115 	stw	zero,68(r16)
100104b0:	80001215 	stw	zero,72(r16)
100104b4:	dfc00417 	ldw	ra,16(sp)
100104b8:	dcc00317 	ldw	r19,12(sp)
100104bc:	dc800217 	ldw	r18,8(sp)
100104c0:	dc400117 	ldw	r17,4(sp)
100104c4:	dc000017 	ldw	r16,0(sp)
100104c8:	dec00504 	addi	sp,sp,20
100104cc:	f800283a 	ret
100104d0:	01400104 	movi	r5,4
100104d4:	9809883a 	mov	r4,r19
100104d8:	00103640 	call	10010364 <__sfmoreglue>
100104dc:	90800015 	stw	r2,0(r18)
100104e0:	103fde1e 	bne	r2,zero,1001045c <__alt_data_end+0xf801045c>
100104e4:	00800304 	movi	r2,12
100104e8:	98800015 	stw	r2,0(r19)
100104ec:	0005883a 	mov	r2,zero
100104f0:	003ff006 	br	100104b4 <__alt_data_end+0xf80104b4>

100104f4 <_cleanup>:
100104f4:	008400b4 	movhi	r2,4098
100104f8:	10acbc04 	addi	r2,r2,-19728
100104fc:	11000017 	ldw	r4,0(r2)
10010500:	01440074 	movhi	r5,4097
10010504:	2953dc04 	addi	r5,r5,20336
10010508:	0010f1c1 	jmpi	10010f1c <_fwalk_reent>

1001050c <__sinit>:
1001050c:	20800e17 	ldw	r2,56(r4)
10010510:	10000126 	beq	r2,zero,10010518 <__sinit+0xc>
10010514:	f800283a 	ret
10010518:	00101c01 	jmpi	100101c0 <__sinit.part.1>

1001051c <__sfp_lock_acquire>:
1001051c:	f800283a 	ret

10010520 <__sfp_lock_release>:
10010520:	f800283a 	ret

10010524 <__sinit_lock_acquire>:
10010524:	f800283a 	ret

10010528 <__sinit_lock_release>:
10010528:	f800283a 	ret

1001052c <__fp_lock_all>:
1001052c:	008400b4 	movhi	r2,4098
10010530:	10acbd04 	addi	r2,r2,-19724
10010534:	11000017 	ldw	r4,0(r2)
10010538:	01440074 	movhi	r5,4097
1001053c:	2940d704 	addi	r5,r5,860
10010540:	0010e581 	jmpi	10010e58 <_fwalk>

10010544 <__fp_unlock_all>:
10010544:	008400b4 	movhi	r2,4098
10010548:	10acbd04 	addi	r2,r2,-19724
1001054c:	11000017 	ldw	r4,0(r2)
10010550:	01440074 	movhi	r5,4097
10010554:	29406b04 	addi	r5,r5,428
10010558:	0010e581 	jmpi	10010e58 <_fwalk>

1001055c <_malloc_trim_r>:
1001055c:	defffb04 	addi	sp,sp,-20
10010560:	dcc00315 	stw	r19,12(sp)
10010564:	04c400b4 	movhi	r19,4098
10010568:	dc800215 	stw	r18,8(sp)
1001056c:	dc400115 	stw	r17,4(sp)
10010570:	dc000015 	stw	r16,0(sp)
10010574:	dfc00415 	stw	ra,16(sp)
10010578:	2821883a 	mov	r16,r5
1001057c:	9ce73104 	addi	r19,r19,-25404
10010580:	2025883a 	mov	r18,r4
10010584:	0016a240 	call	10016a24 <__malloc_lock>
10010588:	98800217 	ldw	r2,8(r19)
1001058c:	14400117 	ldw	r17,4(r2)
10010590:	00bfff04 	movi	r2,-4
10010594:	88a2703a 	and	r17,r17,r2
10010598:	8c21c83a 	sub	r16,r17,r16
1001059c:	8403fbc4 	addi	r16,r16,4079
100105a0:	8020d33a 	srli	r16,r16,12
100105a4:	0083ffc4 	movi	r2,4095
100105a8:	843fffc4 	addi	r16,r16,-1
100105ac:	8020933a 	slli	r16,r16,12
100105b0:	1400060e 	bge	r2,r16,100105cc <_malloc_trim_r+0x70>
100105b4:	000b883a 	mov	r5,zero
100105b8:	9009883a 	mov	r4,r18
100105bc:	001347c0 	call	1001347c <_sbrk_r>
100105c0:	98c00217 	ldw	r3,8(r19)
100105c4:	1c47883a 	add	r3,r3,r17
100105c8:	10c00a26 	beq	r2,r3,100105f4 <_malloc_trim_r+0x98>
100105cc:	9009883a 	mov	r4,r18
100105d0:	0016a480 	call	10016a48 <__malloc_unlock>
100105d4:	0005883a 	mov	r2,zero
100105d8:	dfc00417 	ldw	ra,16(sp)
100105dc:	dcc00317 	ldw	r19,12(sp)
100105e0:	dc800217 	ldw	r18,8(sp)
100105e4:	dc400117 	ldw	r17,4(sp)
100105e8:	dc000017 	ldw	r16,0(sp)
100105ec:	dec00504 	addi	sp,sp,20
100105f0:	f800283a 	ret
100105f4:	040bc83a 	sub	r5,zero,r16
100105f8:	9009883a 	mov	r4,r18
100105fc:	001347c0 	call	1001347c <_sbrk_r>
10010600:	00ffffc4 	movi	r3,-1
10010604:	10c00d26 	beq	r2,r3,1001063c <_malloc_trim_r+0xe0>
10010608:	00c400b4 	movhi	r3,4098
1001060c:	18f4ba04 	addi	r3,r3,-11544
10010610:	18800017 	ldw	r2,0(r3)
10010614:	99000217 	ldw	r4,8(r19)
10010618:	8c23c83a 	sub	r17,r17,r16
1001061c:	8c400054 	ori	r17,r17,1
10010620:	1421c83a 	sub	r16,r2,r16
10010624:	24400115 	stw	r17,4(r4)
10010628:	9009883a 	mov	r4,r18
1001062c:	1c000015 	stw	r16,0(r3)
10010630:	0016a480 	call	10016a48 <__malloc_unlock>
10010634:	00800044 	movi	r2,1
10010638:	003fe706 	br	100105d8 <__alt_data_end+0xf80105d8>
1001063c:	000b883a 	mov	r5,zero
10010640:	9009883a 	mov	r4,r18
10010644:	001347c0 	call	1001347c <_sbrk_r>
10010648:	99000217 	ldw	r4,8(r19)
1001064c:	014003c4 	movi	r5,15
10010650:	1107c83a 	sub	r3,r2,r4
10010654:	28ffdd0e 	bge	r5,r3,100105cc <__alt_data_end+0xf80105cc>
10010658:	014400b4 	movhi	r5,4098
1001065c:	296cbf04 	addi	r5,r5,-19716
10010660:	29400017 	ldw	r5,0(r5)
10010664:	18c00054 	ori	r3,r3,1
10010668:	20c00115 	stw	r3,4(r4)
1001066c:	00c400b4 	movhi	r3,4098
10010670:	1145c83a 	sub	r2,r2,r5
10010674:	18f4ba04 	addi	r3,r3,-11544
10010678:	18800015 	stw	r2,0(r3)
1001067c:	003fd306 	br	100105cc <__alt_data_end+0xf80105cc>

10010680 <_free_r>:
10010680:	28004126 	beq	r5,zero,10010788 <_free_r+0x108>
10010684:	defffd04 	addi	sp,sp,-12
10010688:	dc400115 	stw	r17,4(sp)
1001068c:	dc000015 	stw	r16,0(sp)
10010690:	2023883a 	mov	r17,r4
10010694:	2821883a 	mov	r16,r5
10010698:	dfc00215 	stw	ra,8(sp)
1001069c:	0016a240 	call	10016a24 <__malloc_lock>
100106a0:	81ffff17 	ldw	r7,-4(r16)
100106a4:	00bfff84 	movi	r2,-2
100106a8:	010400b4 	movhi	r4,4098
100106ac:	81bffe04 	addi	r6,r16,-8
100106b0:	3884703a 	and	r2,r7,r2
100106b4:	21273104 	addi	r4,r4,-25404
100106b8:	308b883a 	add	r5,r6,r2
100106bc:	2a400117 	ldw	r9,4(r5)
100106c0:	22000217 	ldw	r8,8(r4)
100106c4:	00ffff04 	movi	r3,-4
100106c8:	48c6703a 	and	r3,r9,r3
100106cc:	2a005726 	beq	r5,r8,1001082c <_free_r+0x1ac>
100106d0:	28c00115 	stw	r3,4(r5)
100106d4:	39c0004c 	andi	r7,r7,1
100106d8:	3800091e 	bne	r7,zero,10010700 <_free_r+0x80>
100106dc:	823ffe17 	ldw	r8,-8(r16)
100106e0:	22400204 	addi	r9,r4,8
100106e4:	320dc83a 	sub	r6,r6,r8
100106e8:	31c00217 	ldw	r7,8(r6)
100106ec:	1205883a 	add	r2,r2,r8
100106f0:	3a406526 	beq	r7,r9,10010888 <_free_r+0x208>
100106f4:	32000317 	ldw	r8,12(r6)
100106f8:	3a000315 	stw	r8,12(r7)
100106fc:	41c00215 	stw	r7,8(r8)
10010700:	28cf883a 	add	r7,r5,r3
10010704:	39c00117 	ldw	r7,4(r7)
10010708:	39c0004c 	andi	r7,r7,1
1001070c:	38003a26 	beq	r7,zero,100107f8 <_free_r+0x178>
10010710:	10c00054 	ori	r3,r2,1
10010714:	30c00115 	stw	r3,4(r6)
10010718:	3087883a 	add	r3,r6,r2
1001071c:	18800015 	stw	r2,0(r3)
10010720:	00c07fc4 	movi	r3,511
10010724:	18801936 	bltu	r3,r2,1001078c <_free_r+0x10c>
10010728:	1004d0fa 	srli	r2,r2,3
1001072c:	01c00044 	movi	r7,1
10010730:	21400117 	ldw	r5,4(r4)
10010734:	10c00044 	addi	r3,r2,1
10010738:	18c7883a 	add	r3,r3,r3
1001073c:	1005d0ba 	srai	r2,r2,2
10010740:	18c7883a 	add	r3,r3,r3
10010744:	18c7883a 	add	r3,r3,r3
10010748:	1907883a 	add	r3,r3,r4
1001074c:	3884983a 	sll	r2,r7,r2
10010750:	19c00017 	ldw	r7,0(r3)
10010754:	1a3ffe04 	addi	r8,r3,-8
10010758:	1144b03a 	or	r2,r2,r5
1001075c:	32000315 	stw	r8,12(r6)
10010760:	31c00215 	stw	r7,8(r6)
10010764:	20800115 	stw	r2,4(r4)
10010768:	19800015 	stw	r6,0(r3)
1001076c:	39800315 	stw	r6,12(r7)
10010770:	8809883a 	mov	r4,r17
10010774:	dfc00217 	ldw	ra,8(sp)
10010778:	dc400117 	ldw	r17,4(sp)
1001077c:	dc000017 	ldw	r16,0(sp)
10010780:	dec00304 	addi	sp,sp,12
10010784:	0016a481 	jmpi	10016a48 <__malloc_unlock>
10010788:	f800283a 	ret
1001078c:	100ad27a 	srli	r5,r2,9
10010790:	00c00104 	movi	r3,4
10010794:	19404a36 	bltu	r3,r5,100108c0 <_free_r+0x240>
10010798:	100ad1ba 	srli	r5,r2,6
1001079c:	28c00e44 	addi	r3,r5,57
100107a0:	18c7883a 	add	r3,r3,r3
100107a4:	29400e04 	addi	r5,r5,56
100107a8:	18c7883a 	add	r3,r3,r3
100107ac:	18c7883a 	add	r3,r3,r3
100107b0:	1909883a 	add	r4,r3,r4
100107b4:	20c00017 	ldw	r3,0(r4)
100107b8:	01c400b4 	movhi	r7,4098
100107bc:	213ffe04 	addi	r4,r4,-8
100107c0:	39e73104 	addi	r7,r7,-25404
100107c4:	20c04426 	beq	r4,r3,100108d8 <_free_r+0x258>
100107c8:	01ffff04 	movi	r7,-4
100107cc:	19400117 	ldw	r5,4(r3)
100107d0:	29ca703a 	and	r5,r5,r7
100107d4:	1140022e 	bgeu	r2,r5,100107e0 <_free_r+0x160>
100107d8:	18c00217 	ldw	r3,8(r3)
100107dc:	20fffb1e 	bne	r4,r3,100107cc <__alt_data_end+0xf80107cc>
100107e0:	19000317 	ldw	r4,12(r3)
100107e4:	31000315 	stw	r4,12(r6)
100107e8:	30c00215 	stw	r3,8(r6)
100107ec:	21800215 	stw	r6,8(r4)
100107f0:	19800315 	stw	r6,12(r3)
100107f4:	003fde06 	br	10010770 <__alt_data_end+0xf8010770>
100107f8:	29c00217 	ldw	r7,8(r5)
100107fc:	10c5883a 	add	r2,r2,r3
10010800:	00c400b4 	movhi	r3,4098
10010804:	18e73304 	addi	r3,r3,-25396
10010808:	38c03b26 	beq	r7,r3,100108f8 <_free_r+0x278>
1001080c:	2a000317 	ldw	r8,12(r5)
10010810:	11400054 	ori	r5,r2,1
10010814:	3087883a 	add	r3,r6,r2
10010818:	3a000315 	stw	r8,12(r7)
1001081c:	41c00215 	stw	r7,8(r8)
10010820:	31400115 	stw	r5,4(r6)
10010824:	18800015 	stw	r2,0(r3)
10010828:	003fbd06 	br	10010720 <__alt_data_end+0xf8010720>
1001082c:	39c0004c 	andi	r7,r7,1
10010830:	10c5883a 	add	r2,r2,r3
10010834:	3800071e 	bne	r7,zero,10010854 <_free_r+0x1d4>
10010838:	81fffe17 	ldw	r7,-8(r16)
1001083c:	31cdc83a 	sub	r6,r6,r7
10010840:	30c00317 	ldw	r3,12(r6)
10010844:	31400217 	ldw	r5,8(r6)
10010848:	11c5883a 	add	r2,r2,r7
1001084c:	28c00315 	stw	r3,12(r5)
10010850:	19400215 	stw	r5,8(r3)
10010854:	10c00054 	ori	r3,r2,1
10010858:	30c00115 	stw	r3,4(r6)
1001085c:	00c400b4 	movhi	r3,4098
10010860:	18ecc004 	addi	r3,r3,-19712
10010864:	18c00017 	ldw	r3,0(r3)
10010868:	21800215 	stw	r6,8(r4)
1001086c:	10ffc036 	bltu	r2,r3,10010770 <__alt_data_end+0xf8010770>
10010870:	008400b4 	movhi	r2,4098
10010874:	10b4b104 	addi	r2,r2,-11580
10010878:	11400017 	ldw	r5,0(r2)
1001087c:	8809883a 	mov	r4,r17
10010880:	001055c0 	call	1001055c <_malloc_trim_r>
10010884:	003fba06 	br	10010770 <__alt_data_end+0xf8010770>
10010888:	28c9883a 	add	r4,r5,r3
1001088c:	21000117 	ldw	r4,4(r4)
10010890:	2100004c 	andi	r4,r4,1
10010894:	2000391e 	bne	r4,zero,1001097c <_free_r+0x2fc>
10010898:	29c00217 	ldw	r7,8(r5)
1001089c:	29000317 	ldw	r4,12(r5)
100108a0:	1885883a 	add	r2,r3,r2
100108a4:	10c00054 	ori	r3,r2,1
100108a8:	39000315 	stw	r4,12(r7)
100108ac:	21c00215 	stw	r7,8(r4)
100108b0:	30c00115 	stw	r3,4(r6)
100108b4:	308d883a 	add	r6,r6,r2
100108b8:	30800015 	stw	r2,0(r6)
100108bc:	003fac06 	br	10010770 <__alt_data_end+0xf8010770>
100108c0:	00c00504 	movi	r3,20
100108c4:	19401536 	bltu	r3,r5,1001091c <_free_r+0x29c>
100108c8:	28c01704 	addi	r3,r5,92
100108cc:	18c7883a 	add	r3,r3,r3
100108d0:	294016c4 	addi	r5,r5,91
100108d4:	003fb406 	br	100107a8 <__alt_data_end+0xf80107a8>
100108d8:	280bd0ba 	srai	r5,r5,2
100108dc:	00c00044 	movi	r3,1
100108e0:	38800117 	ldw	r2,4(r7)
100108e4:	194a983a 	sll	r5,r3,r5
100108e8:	2007883a 	mov	r3,r4
100108ec:	2884b03a 	or	r2,r5,r2
100108f0:	38800115 	stw	r2,4(r7)
100108f4:	003fbb06 	br	100107e4 <__alt_data_end+0xf80107e4>
100108f8:	21800515 	stw	r6,20(r4)
100108fc:	21800415 	stw	r6,16(r4)
10010900:	10c00054 	ori	r3,r2,1
10010904:	31c00315 	stw	r7,12(r6)
10010908:	31c00215 	stw	r7,8(r6)
1001090c:	30c00115 	stw	r3,4(r6)
10010910:	308d883a 	add	r6,r6,r2
10010914:	30800015 	stw	r2,0(r6)
10010918:	003f9506 	br	10010770 <__alt_data_end+0xf8010770>
1001091c:	00c01504 	movi	r3,84
10010920:	19400536 	bltu	r3,r5,10010938 <_free_r+0x2b8>
10010924:	100ad33a 	srli	r5,r2,12
10010928:	28c01bc4 	addi	r3,r5,111
1001092c:	18c7883a 	add	r3,r3,r3
10010930:	29401b84 	addi	r5,r5,110
10010934:	003f9c06 	br	100107a8 <__alt_data_end+0xf80107a8>
10010938:	00c05504 	movi	r3,340
1001093c:	19400536 	bltu	r3,r5,10010954 <_free_r+0x2d4>
10010940:	100ad3fa 	srli	r5,r2,15
10010944:	28c01e04 	addi	r3,r5,120
10010948:	18c7883a 	add	r3,r3,r3
1001094c:	29401dc4 	addi	r5,r5,119
10010950:	003f9506 	br	100107a8 <__alt_data_end+0xf80107a8>
10010954:	00c15504 	movi	r3,1364
10010958:	19400536 	bltu	r3,r5,10010970 <_free_r+0x2f0>
1001095c:	100ad4ba 	srli	r5,r2,18
10010960:	28c01f44 	addi	r3,r5,125
10010964:	18c7883a 	add	r3,r3,r3
10010968:	29401f04 	addi	r5,r5,124
1001096c:	003f8e06 	br	100107a8 <__alt_data_end+0xf80107a8>
10010970:	00c03f84 	movi	r3,254
10010974:	01401f84 	movi	r5,126
10010978:	003f8b06 	br	100107a8 <__alt_data_end+0xf80107a8>
1001097c:	10c00054 	ori	r3,r2,1
10010980:	30c00115 	stw	r3,4(r6)
10010984:	308d883a 	add	r6,r6,r2
10010988:	30800015 	stw	r2,0(r6)
1001098c:	003f7806 	br	10010770 <__alt_data_end+0xf8010770>

10010990 <__sfvwrite_r>:
10010990:	30800217 	ldw	r2,8(r6)
10010994:	10006726 	beq	r2,zero,10010b34 <__sfvwrite_r+0x1a4>
10010998:	28c0030b 	ldhu	r3,12(r5)
1001099c:	defff404 	addi	sp,sp,-48
100109a0:	dd400715 	stw	r21,28(sp)
100109a4:	dd000615 	stw	r20,24(sp)
100109a8:	dc000215 	stw	r16,8(sp)
100109ac:	dfc00b15 	stw	ra,44(sp)
100109b0:	df000a15 	stw	fp,40(sp)
100109b4:	ddc00915 	stw	r23,36(sp)
100109b8:	dd800815 	stw	r22,32(sp)
100109bc:	dcc00515 	stw	r19,20(sp)
100109c0:	dc800415 	stw	r18,16(sp)
100109c4:	dc400315 	stw	r17,12(sp)
100109c8:	1880020c 	andi	r2,r3,8
100109cc:	2821883a 	mov	r16,r5
100109d0:	202b883a 	mov	r21,r4
100109d4:	3029883a 	mov	r20,r6
100109d8:	10002726 	beq	r2,zero,10010a78 <__sfvwrite_r+0xe8>
100109dc:	28800417 	ldw	r2,16(r5)
100109e0:	10002526 	beq	r2,zero,10010a78 <__sfvwrite_r+0xe8>
100109e4:	1880008c 	andi	r2,r3,2
100109e8:	a4400017 	ldw	r17,0(r20)
100109ec:	10002a26 	beq	r2,zero,10010a98 <__sfvwrite_r+0x108>
100109f0:	05a00034 	movhi	r22,32768
100109f4:	0027883a 	mov	r19,zero
100109f8:	0025883a 	mov	r18,zero
100109fc:	b5bf0004 	addi	r22,r22,-1024
10010a00:	980d883a 	mov	r6,r19
10010a04:	a809883a 	mov	r4,r21
10010a08:	90004626 	beq	r18,zero,10010b24 <__sfvwrite_r+0x194>
10010a0c:	900f883a 	mov	r7,r18
10010a10:	b480022e 	bgeu	r22,r18,10010a1c <__sfvwrite_r+0x8c>
10010a14:	01e00034 	movhi	r7,32768
10010a18:	39ff0004 	addi	r7,r7,-1024
10010a1c:	80800917 	ldw	r2,36(r16)
10010a20:	81400717 	ldw	r5,28(r16)
10010a24:	103ee83a 	callr	r2
10010a28:	00805a0e 	bge	zero,r2,10010b94 <__sfvwrite_r+0x204>
10010a2c:	a0c00217 	ldw	r3,8(r20)
10010a30:	98a7883a 	add	r19,r19,r2
10010a34:	90a5c83a 	sub	r18,r18,r2
10010a38:	1885c83a 	sub	r2,r3,r2
10010a3c:	a0800215 	stw	r2,8(r20)
10010a40:	103fef1e 	bne	r2,zero,10010a00 <__alt_data_end+0xf8010a00>
10010a44:	0005883a 	mov	r2,zero
10010a48:	dfc00b17 	ldw	ra,44(sp)
10010a4c:	df000a17 	ldw	fp,40(sp)
10010a50:	ddc00917 	ldw	r23,36(sp)
10010a54:	dd800817 	ldw	r22,32(sp)
10010a58:	dd400717 	ldw	r21,28(sp)
10010a5c:	dd000617 	ldw	r20,24(sp)
10010a60:	dcc00517 	ldw	r19,20(sp)
10010a64:	dc800417 	ldw	r18,16(sp)
10010a68:	dc400317 	ldw	r17,12(sp)
10010a6c:	dc000217 	ldw	r16,8(sp)
10010a70:	dec00c04 	addi	sp,sp,48
10010a74:	f800283a 	ret
10010a78:	800b883a 	mov	r5,r16
10010a7c:	a809883a 	mov	r4,r21
10010a80:	000e5000 	call	1000e500 <__swsetup_r>
10010a84:	1000ee1e 	bne	r2,zero,10010e40 <__sfvwrite_r+0x4b0>
10010a88:	80c0030b 	ldhu	r3,12(r16)
10010a8c:	a4400017 	ldw	r17,0(r20)
10010a90:	1880008c 	andi	r2,r3,2
10010a94:	103fd61e 	bne	r2,zero,100109f0 <__alt_data_end+0xf80109f0>
10010a98:	1880004c 	andi	r2,r3,1
10010a9c:	1000421e 	bne	r2,zero,10010ba8 <__sfvwrite_r+0x218>
10010aa0:	0039883a 	mov	fp,zero
10010aa4:	0025883a 	mov	r18,zero
10010aa8:	90001a26 	beq	r18,zero,10010b14 <__sfvwrite_r+0x184>
10010aac:	1880800c 	andi	r2,r3,512
10010ab0:	84c00217 	ldw	r19,8(r16)
10010ab4:	10002126 	beq	r2,zero,10010b3c <__sfvwrite_r+0x1ac>
10010ab8:	982f883a 	mov	r23,r19
10010abc:	94c09636 	bltu	r18,r19,10010d18 <__sfvwrite_r+0x388>
10010ac0:	1881200c 	andi	r2,r3,1152
10010ac4:	1000a11e 	bne	r2,zero,10010d4c <__sfvwrite_r+0x3bc>
10010ac8:	81000017 	ldw	r4,0(r16)
10010acc:	b80d883a 	mov	r6,r23
10010ad0:	e00b883a 	mov	r5,fp
10010ad4:	0011b680 	call	10011b68 <memmove>
10010ad8:	80c00217 	ldw	r3,8(r16)
10010adc:	81000017 	ldw	r4,0(r16)
10010ae0:	9005883a 	mov	r2,r18
10010ae4:	1ce7c83a 	sub	r19,r3,r19
10010ae8:	25cf883a 	add	r7,r4,r23
10010aec:	84c00215 	stw	r19,8(r16)
10010af0:	81c00015 	stw	r7,0(r16)
10010af4:	a0c00217 	ldw	r3,8(r20)
10010af8:	e0b9883a 	add	fp,fp,r2
10010afc:	90a5c83a 	sub	r18,r18,r2
10010b00:	18a7c83a 	sub	r19,r3,r2
10010b04:	a4c00215 	stw	r19,8(r20)
10010b08:	983fce26 	beq	r19,zero,10010a44 <__alt_data_end+0xf8010a44>
10010b0c:	80c0030b 	ldhu	r3,12(r16)
10010b10:	903fe61e 	bne	r18,zero,10010aac <__alt_data_end+0xf8010aac>
10010b14:	8f000017 	ldw	fp,0(r17)
10010b18:	8c800117 	ldw	r18,4(r17)
10010b1c:	8c400204 	addi	r17,r17,8
10010b20:	003fe106 	br	10010aa8 <__alt_data_end+0xf8010aa8>
10010b24:	8cc00017 	ldw	r19,0(r17)
10010b28:	8c800117 	ldw	r18,4(r17)
10010b2c:	8c400204 	addi	r17,r17,8
10010b30:	003fb306 	br	10010a00 <__alt_data_end+0xf8010a00>
10010b34:	0005883a 	mov	r2,zero
10010b38:	f800283a 	ret
10010b3c:	81000017 	ldw	r4,0(r16)
10010b40:	80800417 	ldw	r2,16(r16)
10010b44:	11005a36 	bltu	r2,r4,10010cb0 <__sfvwrite_r+0x320>
10010b48:	85c00517 	ldw	r23,20(r16)
10010b4c:	95c05836 	bltu	r18,r23,10010cb0 <__sfvwrite_r+0x320>
10010b50:	00a00034 	movhi	r2,32768
10010b54:	10bfffc4 	addi	r2,r2,-1
10010b58:	9009883a 	mov	r4,r18
10010b5c:	1480012e 	bgeu	r2,r18,10010b64 <__sfvwrite_r+0x1d4>
10010b60:	1009883a 	mov	r4,r2
10010b64:	b80b883a 	mov	r5,r23
10010b68:	00095480 	call	10009548 <__divsi3>
10010b6c:	b80b883a 	mov	r5,r23
10010b70:	1009883a 	mov	r4,r2
10010b74:	00096fc0 	call	100096fc <__mulsi3>
10010b78:	81400717 	ldw	r5,28(r16)
10010b7c:	80c00917 	ldw	r3,36(r16)
10010b80:	100f883a 	mov	r7,r2
10010b84:	e00d883a 	mov	r6,fp
10010b88:	a809883a 	mov	r4,r21
10010b8c:	183ee83a 	callr	r3
10010b90:	00bfd816 	blt	zero,r2,10010af4 <__alt_data_end+0xf8010af4>
10010b94:	8080030b 	ldhu	r2,12(r16)
10010b98:	10801014 	ori	r2,r2,64
10010b9c:	8080030d 	sth	r2,12(r16)
10010ba0:	00bfffc4 	movi	r2,-1
10010ba4:	003fa806 	br	10010a48 <__alt_data_end+0xf8010a48>
10010ba8:	0027883a 	mov	r19,zero
10010bac:	0011883a 	mov	r8,zero
10010bb0:	0039883a 	mov	fp,zero
10010bb4:	0025883a 	mov	r18,zero
10010bb8:	90001f26 	beq	r18,zero,10010c38 <__sfvwrite_r+0x2a8>
10010bbc:	40005a26 	beq	r8,zero,10010d28 <__sfvwrite_r+0x398>
10010bc0:	982d883a 	mov	r22,r19
10010bc4:	94c0012e 	bgeu	r18,r19,10010bcc <__sfvwrite_r+0x23c>
10010bc8:	902d883a 	mov	r22,r18
10010bcc:	81000017 	ldw	r4,0(r16)
10010bd0:	80800417 	ldw	r2,16(r16)
10010bd4:	b02f883a 	mov	r23,r22
10010bd8:	81c00517 	ldw	r7,20(r16)
10010bdc:	1100032e 	bgeu	r2,r4,10010bec <__sfvwrite_r+0x25c>
10010be0:	80c00217 	ldw	r3,8(r16)
10010be4:	38c7883a 	add	r3,r7,r3
10010be8:	1d801816 	blt	r3,r22,10010c4c <__sfvwrite_r+0x2bc>
10010bec:	b1c03e16 	blt	r22,r7,10010ce8 <__sfvwrite_r+0x358>
10010bf0:	80800917 	ldw	r2,36(r16)
10010bf4:	81400717 	ldw	r5,28(r16)
10010bf8:	e00d883a 	mov	r6,fp
10010bfc:	da000115 	stw	r8,4(sp)
10010c00:	a809883a 	mov	r4,r21
10010c04:	103ee83a 	callr	r2
10010c08:	102f883a 	mov	r23,r2
10010c0c:	da000117 	ldw	r8,4(sp)
10010c10:	00bfe00e 	bge	zero,r2,10010b94 <__alt_data_end+0xf8010b94>
10010c14:	9de7c83a 	sub	r19,r19,r23
10010c18:	98001f26 	beq	r19,zero,10010c98 <__sfvwrite_r+0x308>
10010c1c:	a0800217 	ldw	r2,8(r20)
10010c20:	e5f9883a 	add	fp,fp,r23
10010c24:	95e5c83a 	sub	r18,r18,r23
10010c28:	15efc83a 	sub	r23,r2,r23
10010c2c:	a5c00215 	stw	r23,8(r20)
10010c30:	b83f8426 	beq	r23,zero,10010a44 <__alt_data_end+0xf8010a44>
10010c34:	903fe11e 	bne	r18,zero,10010bbc <__alt_data_end+0xf8010bbc>
10010c38:	8f000017 	ldw	fp,0(r17)
10010c3c:	8c800117 	ldw	r18,4(r17)
10010c40:	0011883a 	mov	r8,zero
10010c44:	8c400204 	addi	r17,r17,8
10010c48:	003fdb06 	br	10010bb8 <__alt_data_end+0xf8010bb8>
10010c4c:	180d883a 	mov	r6,r3
10010c50:	e00b883a 	mov	r5,fp
10010c54:	da000115 	stw	r8,4(sp)
10010c58:	d8c00015 	stw	r3,0(sp)
10010c5c:	0011b680 	call	10011b68 <memmove>
10010c60:	d8c00017 	ldw	r3,0(sp)
10010c64:	80800017 	ldw	r2,0(r16)
10010c68:	800b883a 	mov	r5,r16
10010c6c:	a809883a 	mov	r4,r21
10010c70:	10c5883a 	add	r2,r2,r3
10010c74:	80800015 	stw	r2,0(r16)
10010c78:	d8c00015 	stw	r3,0(sp)
10010c7c:	00101200 	call	10010120 <_fflush_r>
10010c80:	d8c00017 	ldw	r3,0(sp)
10010c84:	da000117 	ldw	r8,4(sp)
10010c88:	103fc21e 	bne	r2,zero,10010b94 <__alt_data_end+0xf8010b94>
10010c8c:	182f883a 	mov	r23,r3
10010c90:	9de7c83a 	sub	r19,r19,r23
10010c94:	983fe11e 	bne	r19,zero,10010c1c <__alt_data_end+0xf8010c1c>
10010c98:	800b883a 	mov	r5,r16
10010c9c:	a809883a 	mov	r4,r21
10010ca0:	00101200 	call	10010120 <_fflush_r>
10010ca4:	103fbb1e 	bne	r2,zero,10010b94 <__alt_data_end+0xf8010b94>
10010ca8:	0011883a 	mov	r8,zero
10010cac:	003fdb06 	br	10010c1c <__alt_data_end+0xf8010c1c>
10010cb0:	94c0012e 	bgeu	r18,r19,10010cb8 <__sfvwrite_r+0x328>
10010cb4:	9027883a 	mov	r19,r18
10010cb8:	980d883a 	mov	r6,r19
10010cbc:	e00b883a 	mov	r5,fp
10010cc0:	0011b680 	call	10011b68 <memmove>
10010cc4:	80800217 	ldw	r2,8(r16)
10010cc8:	80c00017 	ldw	r3,0(r16)
10010ccc:	14c5c83a 	sub	r2,r2,r19
10010cd0:	1cc7883a 	add	r3,r3,r19
10010cd4:	80800215 	stw	r2,8(r16)
10010cd8:	80c00015 	stw	r3,0(r16)
10010cdc:	10004326 	beq	r2,zero,10010dec <__sfvwrite_r+0x45c>
10010ce0:	9805883a 	mov	r2,r19
10010ce4:	003f8306 	br	10010af4 <__alt_data_end+0xf8010af4>
10010ce8:	b00d883a 	mov	r6,r22
10010cec:	e00b883a 	mov	r5,fp
10010cf0:	da000115 	stw	r8,4(sp)
10010cf4:	0011b680 	call	10011b68 <memmove>
10010cf8:	80800217 	ldw	r2,8(r16)
10010cfc:	80c00017 	ldw	r3,0(r16)
10010d00:	da000117 	ldw	r8,4(sp)
10010d04:	1585c83a 	sub	r2,r2,r22
10010d08:	1dad883a 	add	r22,r3,r22
10010d0c:	80800215 	stw	r2,8(r16)
10010d10:	85800015 	stw	r22,0(r16)
10010d14:	003fbf06 	br	10010c14 <__alt_data_end+0xf8010c14>
10010d18:	81000017 	ldw	r4,0(r16)
10010d1c:	9027883a 	mov	r19,r18
10010d20:	902f883a 	mov	r23,r18
10010d24:	003f6906 	br	10010acc <__alt_data_end+0xf8010acc>
10010d28:	900d883a 	mov	r6,r18
10010d2c:	01400284 	movi	r5,10
10010d30:	e009883a 	mov	r4,fp
10010d34:	0011a840 	call	10011a84 <memchr>
10010d38:	10003e26 	beq	r2,zero,10010e34 <__sfvwrite_r+0x4a4>
10010d3c:	10800044 	addi	r2,r2,1
10010d40:	1727c83a 	sub	r19,r2,fp
10010d44:	02000044 	movi	r8,1
10010d48:	003f9d06 	br	10010bc0 <__alt_data_end+0xf8010bc0>
10010d4c:	80800517 	ldw	r2,20(r16)
10010d50:	81400417 	ldw	r5,16(r16)
10010d54:	81c00017 	ldw	r7,0(r16)
10010d58:	10a7883a 	add	r19,r2,r2
10010d5c:	9885883a 	add	r2,r19,r2
10010d60:	1026d7fa 	srli	r19,r2,31
10010d64:	396dc83a 	sub	r22,r7,r5
10010d68:	b1000044 	addi	r4,r22,1
10010d6c:	9885883a 	add	r2,r19,r2
10010d70:	1027d07a 	srai	r19,r2,1
10010d74:	2485883a 	add	r2,r4,r18
10010d78:	980d883a 	mov	r6,r19
10010d7c:	9880022e 	bgeu	r19,r2,10010d88 <__sfvwrite_r+0x3f8>
10010d80:	1027883a 	mov	r19,r2
10010d84:	100d883a 	mov	r6,r2
10010d88:	18c1000c 	andi	r3,r3,1024
10010d8c:	18001c26 	beq	r3,zero,10010e00 <__sfvwrite_r+0x470>
10010d90:	300b883a 	mov	r5,r6
10010d94:	a809883a 	mov	r4,r21
10010d98:	00112780 	call	10011278 <_malloc_r>
10010d9c:	102f883a 	mov	r23,r2
10010da0:	10002926 	beq	r2,zero,10010e48 <__sfvwrite_r+0x4b8>
10010da4:	81400417 	ldw	r5,16(r16)
10010da8:	b00d883a 	mov	r6,r22
10010dac:	1009883a 	mov	r4,r2
10010db0:	000be2c0 	call	1000be2c <memcpy>
10010db4:	8080030b 	ldhu	r2,12(r16)
10010db8:	00fedfc4 	movi	r3,-1153
10010dbc:	10c4703a 	and	r2,r2,r3
10010dc0:	10802014 	ori	r2,r2,128
10010dc4:	8080030d 	sth	r2,12(r16)
10010dc8:	bd89883a 	add	r4,r23,r22
10010dcc:	9d8fc83a 	sub	r7,r19,r22
10010dd0:	85c00415 	stw	r23,16(r16)
10010dd4:	84c00515 	stw	r19,20(r16)
10010dd8:	81000015 	stw	r4,0(r16)
10010ddc:	9027883a 	mov	r19,r18
10010de0:	81c00215 	stw	r7,8(r16)
10010de4:	902f883a 	mov	r23,r18
10010de8:	003f3806 	br	10010acc <__alt_data_end+0xf8010acc>
10010dec:	800b883a 	mov	r5,r16
10010df0:	a809883a 	mov	r4,r21
10010df4:	00101200 	call	10010120 <_fflush_r>
10010df8:	103fb926 	beq	r2,zero,10010ce0 <__alt_data_end+0xf8010ce0>
10010dfc:	003f6506 	br	10010b94 <__alt_data_end+0xf8010b94>
10010e00:	a809883a 	mov	r4,r21
10010e04:	0012ea40 	call	10012ea4 <_realloc_r>
10010e08:	102f883a 	mov	r23,r2
10010e0c:	103fee1e 	bne	r2,zero,10010dc8 <__alt_data_end+0xf8010dc8>
10010e10:	81400417 	ldw	r5,16(r16)
10010e14:	a809883a 	mov	r4,r21
10010e18:	00106800 	call	10010680 <_free_r>
10010e1c:	8080030b 	ldhu	r2,12(r16)
10010e20:	00ffdfc4 	movi	r3,-129
10010e24:	1884703a 	and	r2,r3,r2
10010e28:	00c00304 	movi	r3,12
10010e2c:	a8c00015 	stw	r3,0(r21)
10010e30:	003f5906 	br	10010b98 <__alt_data_end+0xf8010b98>
10010e34:	94c00044 	addi	r19,r18,1
10010e38:	02000044 	movi	r8,1
10010e3c:	003f6006 	br	10010bc0 <__alt_data_end+0xf8010bc0>
10010e40:	00bfffc4 	movi	r2,-1
10010e44:	003f0006 	br	10010a48 <__alt_data_end+0xf8010a48>
10010e48:	00800304 	movi	r2,12
10010e4c:	a8800015 	stw	r2,0(r21)
10010e50:	8080030b 	ldhu	r2,12(r16)
10010e54:	003f5006 	br	10010b98 <__alt_data_end+0xf8010b98>

10010e58 <_fwalk>:
10010e58:	defff704 	addi	sp,sp,-36
10010e5c:	dd000415 	stw	r20,16(sp)
10010e60:	dfc00815 	stw	ra,32(sp)
10010e64:	ddc00715 	stw	r23,28(sp)
10010e68:	dd800615 	stw	r22,24(sp)
10010e6c:	dd400515 	stw	r21,20(sp)
10010e70:	dcc00315 	stw	r19,12(sp)
10010e74:	dc800215 	stw	r18,8(sp)
10010e78:	dc400115 	stw	r17,4(sp)
10010e7c:	dc000015 	stw	r16,0(sp)
10010e80:	2500b804 	addi	r20,r4,736
10010e84:	a0002326 	beq	r20,zero,10010f14 <_fwalk+0xbc>
10010e88:	282b883a 	mov	r21,r5
10010e8c:	002f883a 	mov	r23,zero
10010e90:	05800044 	movi	r22,1
10010e94:	04ffffc4 	movi	r19,-1
10010e98:	a4400117 	ldw	r17,4(r20)
10010e9c:	a4800217 	ldw	r18,8(r20)
10010ea0:	8c7fffc4 	addi	r17,r17,-1
10010ea4:	88000d16 	blt	r17,zero,10010edc <_fwalk+0x84>
10010ea8:	94000304 	addi	r16,r18,12
10010eac:	94800384 	addi	r18,r18,14
10010eb0:	8080000b 	ldhu	r2,0(r16)
10010eb4:	8c7fffc4 	addi	r17,r17,-1
10010eb8:	813ffd04 	addi	r4,r16,-12
10010ebc:	b080042e 	bgeu	r22,r2,10010ed0 <_fwalk+0x78>
10010ec0:	9080000f 	ldh	r2,0(r18)
10010ec4:	14c00226 	beq	r2,r19,10010ed0 <_fwalk+0x78>
10010ec8:	a83ee83a 	callr	r21
10010ecc:	b8aeb03a 	or	r23,r23,r2
10010ed0:	84001a04 	addi	r16,r16,104
10010ed4:	94801a04 	addi	r18,r18,104
10010ed8:	8cfff51e 	bne	r17,r19,10010eb0 <__alt_data_end+0xf8010eb0>
10010edc:	a5000017 	ldw	r20,0(r20)
10010ee0:	a03fed1e 	bne	r20,zero,10010e98 <__alt_data_end+0xf8010e98>
10010ee4:	b805883a 	mov	r2,r23
10010ee8:	dfc00817 	ldw	ra,32(sp)
10010eec:	ddc00717 	ldw	r23,28(sp)
10010ef0:	dd800617 	ldw	r22,24(sp)
10010ef4:	dd400517 	ldw	r21,20(sp)
10010ef8:	dd000417 	ldw	r20,16(sp)
10010efc:	dcc00317 	ldw	r19,12(sp)
10010f00:	dc800217 	ldw	r18,8(sp)
10010f04:	dc400117 	ldw	r17,4(sp)
10010f08:	dc000017 	ldw	r16,0(sp)
10010f0c:	dec00904 	addi	sp,sp,36
10010f10:	f800283a 	ret
10010f14:	002f883a 	mov	r23,zero
10010f18:	003ff206 	br	10010ee4 <__alt_data_end+0xf8010ee4>

10010f1c <_fwalk_reent>:
10010f1c:	defff704 	addi	sp,sp,-36
10010f20:	dd000415 	stw	r20,16(sp)
10010f24:	dfc00815 	stw	ra,32(sp)
10010f28:	ddc00715 	stw	r23,28(sp)
10010f2c:	dd800615 	stw	r22,24(sp)
10010f30:	dd400515 	stw	r21,20(sp)
10010f34:	dcc00315 	stw	r19,12(sp)
10010f38:	dc800215 	stw	r18,8(sp)
10010f3c:	dc400115 	stw	r17,4(sp)
10010f40:	dc000015 	stw	r16,0(sp)
10010f44:	2500b804 	addi	r20,r4,736
10010f48:	a0002326 	beq	r20,zero,10010fd8 <_fwalk_reent+0xbc>
10010f4c:	282b883a 	mov	r21,r5
10010f50:	2027883a 	mov	r19,r4
10010f54:	002f883a 	mov	r23,zero
10010f58:	05800044 	movi	r22,1
10010f5c:	04bfffc4 	movi	r18,-1
10010f60:	a4400117 	ldw	r17,4(r20)
10010f64:	a4000217 	ldw	r16,8(r20)
10010f68:	8c7fffc4 	addi	r17,r17,-1
10010f6c:	88000c16 	blt	r17,zero,10010fa0 <_fwalk_reent+0x84>
10010f70:	84000304 	addi	r16,r16,12
10010f74:	8080000b 	ldhu	r2,0(r16)
10010f78:	8c7fffc4 	addi	r17,r17,-1
10010f7c:	817ffd04 	addi	r5,r16,-12
10010f80:	b080052e 	bgeu	r22,r2,10010f98 <_fwalk_reent+0x7c>
10010f84:	8080008f 	ldh	r2,2(r16)
10010f88:	9809883a 	mov	r4,r19
10010f8c:	14800226 	beq	r2,r18,10010f98 <_fwalk_reent+0x7c>
10010f90:	a83ee83a 	callr	r21
10010f94:	b8aeb03a 	or	r23,r23,r2
10010f98:	84001a04 	addi	r16,r16,104
10010f9c:	8cbff51e 	bne	r17,r18,10010f74 <__alt_data_end+0xf8010f74>
10010fa0:	a5000017 	ldw	r20,0(r20)
10010fa4:	a03fee1e 	bne	r20,zero,10010f60 <__alt_data_end+0xf8010f60>
10010fa8:	b805883a 	mov	r2,r23
10010fac:	dfc00817 	ldw	ra,32(sp)
10010fb0:	ddc00717 	ldw	r23,28(sp)
10010fb4:	dd800617 	ldw	r22,24(sp)
10010fb8:	dd400517 	ldw	r21,20(sp)
10010fbc:	dd000417 	ldw	r20,16(sp)
10010fc0:	dcc00317 	ldw	r19,12(sp)
10010fc4:	dc800217 	ldw	r18,8(sp)
10010fc8:	dc400117 	ldw	r17,4(sp)
10010fcc:	dc000017 	ldw	r16,0(sp)
10010fd0:	dec00904 	addi	sp,sp,36
10010fd4:	f800283a 	ret
10010fd8:	002f883a 	mov	r23,zero
10010fdc:	003ff206 	br	10010fa8 <__alt_data_end+0xf8010fa8>

10010fe0 <_setlocale_r>:
10010fe0:	30001b26 	beq	r6,zero,10011050 <_setlocale_r+0x70>
10010fe4:	014400b4 	movhi	r5,4098
10010fe8:	defffe04 	addi	sp,sp,-8
10010fec:	29649504 	addi	r5,r5,-28076
10010ff0:	3009883a 	mov	r4,r6
10010ff4:	dc000015 	stw	r16,0(sp)
10010ff8:	dfc00115 	stw	ra,4(sp)
10010ffc:	3021883a 	mov	r16,r6
10011000:	001360c0 	call	1001360c <strcmp>
10011004:	1000061e 	bne	r2,zero,10011020 <_setlocale_r+0x40>
10011008:	008400b4 	movhi	r2,4098
1001100c:	10a49404 	addi	r2,r2,-28080
10011010:	dfc00117 	ldw	ra,4(sp)
10011014:	dc000017 	ldw	r16,0(sp)
10011018:	dec00204 	addi	sp,sp,8
1001101c:	f800283a 	ret
10011020:	014400b4 	movhi	r5,4098
10011024:	29649404 	addi	r5,r5,-28080
10011028:	8009883a 	mov	r4,r16
1001102c:	001360c0 	call	1001360c <strcmp>
10011030:	103ff526 	beq	r2,zero,10011008 <__alt_data_end+0xf8011008>
10011034:	014400b4 	movhi	r5,4098
10011038:	29647f04 	addi	r5,r5,-28164
1001103c:	8009883a 	mov	r4,r16
10011040:	001360c0 	call	1001360c <strcmp>
10011044:	103ff026 	beq	r2,zero,10011008 <__alt_data_end+0xf8011008>
10011048:	0005883a 	mov	r2,zero
1001104c:	003ff006 	br	10011010 <__alt_data_end+0xf8011010>
10011050:	008400b4 	movhi	r2,4098
10011054:	10a49404 	addi	r2,r2,-28080
10011058:	f800283a 	ret

1001105c <__locale_charset>:
1001105c:	008400b4 	movhi	r2,4098
10011060:	10a71b04 	addi	r2,r2,-25492
10011064:	f800283a 	ret

10011068 <__locale_mb_cur_max>:
10011068:	008400b4 	movhi	r2,4098
1001106c:	10acbe04 	addi	r2,r2,-19720
10011070:	10800017 	ldw	r2,0(r2)
10011074:	f800283a 	ret

10011078 <__locale_msgcharset>:
10011078:	008400b4 	movhi	r2,4098
1001107c:	10a71304 	addi	r2,r2,-25524
10011080:	f800283a 	ret

10011084 <__locale_cjk_lang>:
10011084:	0005883a 	mov	r2,zero
10011088:	f800283a 	ret

1001108c <_localeconv_r>:
1001108c:	008400b4 	movhi	r2,4098
10011090:	10a72304 	addi	r2,r2,-25460
10011094:	f800283a 	ret

10011098 <setlocale>:
10011098:	008400b4 	movhi	r2,4098
1001109c:	10acbd04 	addi	r2,r2,-19724
100110a0:	280d883a 	mov	r6,r5
100110a4:	200b883a 	mov	r5,r4
100110a8:	11000017 	ldw	r4,0(r2)
100110ac:	0010fe01 	jmpi	10010fe0 <_setlocale_r>

100110b0 <localeconv>:
100110b0:	008400b4 	movhi	r2,4098
100110b4:	10a72304 	addi	r2,r2,-25460
100110b8:	f800283a 	ret

100110bc <__smakebuf_r>:
100110bc:	2880030b 	ldhu	r2,12(r5)
100110c0:	10c0008c 	andi	r3,r2,2
100110c4:	1800411e 	bne	r3,zero,100111cc <__smakebuf_r+0x110>
100110c8:	deffec04 	addi	sp,sp,-80
100110cc:	dc000f15 	stw	r16,60(sp)
100110d0:	2821883a 	mov	r16,r5
100110d4:	2940038f 	ldh	r5,14(r5)
100110d8:	dc401015 	stw	r17,64(sp)
100110dc:	dfc01315 	stw	ra,76(sp)
100110e0:	dcc01215 	stw	r19,72(sp)
100110e4:	dc801115 	stw	r18,68(sp)
100110e8:	2023883a 	mov	r17,r4
100110ec:	28001c16 	blt	r5,zero,10011160 <__smakebuf_r+0xa4>
100110f0:	d80d883a 	mov	r6,sp
100110f4:	001527c0 	call	1001527c <_fstat_r>
100110f8:	10001816 	blt	r2,zero,1001115c <__smakebuf_r+0xa0>
100110fc:	d8800117 	ldw	r2,4(sp)
10011100:	00e00014 	movui	r3,32768
10011104:	10bc000c 	andi	r2,r2,61440
10011108:	14c80020 	cmpeqi	r19,r2,8192
1001110c:	10c03726 	beq	r2,r3,100111ec <__smakebuf_r+0x130>
10011110:	80c0030b 	ldhu	r3,12(r16)
10011114:	18c20014 	ori	r3,r3,2048
10011118:	80c0030d 	sth	r3,12(r16)
1001111c:	00c80004 	movi	r3,8192
10011120:	10c0521e 	bne	r2,r3,1001126c <__smakebuf_r+0x1b0>
10011124:	8140038f 	ldh	r5,14(r16)
10011128:	8809883a 	mov	r4,r17
1001112c:	00152d80 	call	100152d8 <_isatty_r>
10011130:	10004c26 	beq	r2,zero,10011264 <__smakebuf_r+0x1a8>
10011134:	8080030b 	ldhu	r2,12(r16)
10011138:	80c010c4 	addi	r3,r16,67
1001113c:	80c00015 	stw	r3,0(r16)
10011140:	10800054 	ori	r2,r2,1
10011144:	8080030d 	sth	r2,12(r16)
10011148:	00800044 	movi	r2,1
1001114c:	80c00415 	stw	r3,16(r16)
10011150:	80800515 	stw	r2,20(r16)
10011154:	04810004 	movi	r18,1024
10011158:	00000706 	br	10011178 <__smakebuf_r+0xbc>
1001115c:	8080030b 	ldhu	r2,12(r16)
10011160:	10c0200c 	andi	r3,r2,128
10011164:	18001f1e 	bne	r3,zero,100111e4 <__smakebuf_r+0x128>
10011168:	04810004 	movi	r18,1024
1001116c:	10820014 	ori	r2,r2,2048
10011170:	8080030d 	sth	r2,12(r16)
10011174:	0027883a 	mov	r19,zero
10011178:	900b883a 	mov	r5,r18
1001117c:	8809883a 	mov	r4,r17
10011180:	00112780 	call	10011278 <_malloc_r>
10011184:	10002c26 	beq	r2,zero,10011238 <__smakebuf_r+0x17c>
10011188:	80c0030b 	ldhu	r3,12(r16)
1001118c:	01040074 	movhi	r4,4097
10011190:	21006d04 	addi	r4,r4,436
10011194:	89000f15 	stw	r4,60(r17)
10011198:	18c02014 	ori	r3,r3,128
1001119c:	80c0030d 	sth	r3,12(r16)
100111a0:	80800015 	stw	r2,0(r16)
100111a4:	80800415 	stw	r2,16(r16)
100111a8:	84800515 	stw	r18,20(r16)
100111ac:	98001a1e 	bne	r19,zero,10011218 <__smakebuf_r+0x15c>
100111b0:	dfc01317 	ldw	ra,76(sp)
100111b4:	dcc01217 	ldw	r19,72(sp)
100111b8:	dc801117 	ldw	r18,68(sp)
100111bc:	dc401017 	ldw	r17,64(sp)
100111c0:	dc000f17 	ldw	r16,60(sp)
100111c4:	dec01404 	addi	sp,sp,80
100111c8:	f800283a 	ret
100111cc:	288010c4 	addi	r2,r5,67
100111d0:	28800015 	stw	r2,0(r5)
100111d4:	28800415 	stw	r2,16(r5)
100111d8:	00800044 	movi	r2,1
100111dc:	28800515 	stw	r2,20(r5)
100111e0:	f800283a 	ret
100111e4:	04801004 	movi	r18,64
100111e8:	003fe006 	br	1001116c <__alt_data_end+0xf801116c>
100111ec:	81000a17 	ldw	r4,40(r16)
100111f0:	00c40074 	movhi	r3,4097
100111f4:	18cd6a04 	addi	r3,r3,13736
100111f8:	20ffc51e 	bne	r4,r3,10011110 <__alt_data_end+0xf8011110>
100111fc:	8080030b 	ldhu	r2,12(r16)
10011200:	04810004 	movi	r18,1024
10011204:	84801315 	stw	r18,76(r16)
10011208:	1484b03a 	or	r2,r2,r18
1001120c:	8080030d 	sth	r2,12(r16)
10011210:	0027883a 	mov	r19,zero
10011214:	003fd806 	br	10011178 <__alt_data_end+0xf8011178>
10011218:	8140038f 	ldh	r5,14(r16)
1001121c:	8809883a 	mov	r4,r17
10011220:	00152d80 	call	100152d8 <_isatty_r>
10011224:	103fe226 	beq	r2,zero,100111b0 <__alt_data_end+0xf80111b0>
10011228:	8080030b 	ldhu	r2,12(r16)
1001122c:	10800054 	ori	r2,r2,1
10011230:	8080030d 	sth	r2,12(r16)
10011234:	003fde06 	br	100111b0 <__alt_data_end+0xf80111b0>
10011238:	8080030b 	ldhu	r2,12(r16)
1001123c:	10c0800c 	andi	r3,r2,512
10011240:	183fdb1e 	bne	r3,zero,100111b0 <__alt_data_end+0xf80111b0>
10011244:	10800094 	ori	r2,r2,2
10011248:	80c010c4 	addi	r3,r16,67
1001124c:	8080030d 	sth	r2,12(r16)
10011250:	00800044 	movi	r2,1
10011254:	80c00015 	stw	r3,0(r16)
10011258:	80c00415 	stw	r3,16(r16)
1001125c:	80800515 	stw	r2,20(r16)
10011260:	003fd306 	br	100111b0 <__alt_data_end+0xf80111b0>
10011264:	04810004 	movi	r18,1024
10011268:	003fc306 	br	10011178 <__alt_data_end+0xf8011178>
1001126c:	0027883a 	mov	r19,zero
10011270:	04810004 	movi	r18,1024
10011274:	003fc006 	br	10011178 <__alt_data_end+0xf8011178>

10011278 <_malloc_r>:
10011278:	defff504 	addi	sp,sp,-44
1001127c:	dc800315 	stw	r18,12(sp)
10011280:	dfc00a15 	stw	ra,40(sp)
10011284:	df000915 	stw	fp,36(sp)
10011288:	ddc00815 	stw	r23,32(sp)
1001128c:	dd800715 	stw	r22,28(sp)
10011290:	dd400615 	stw	r21,24(sp)
10011294:	dd000515 	stw	r20,20(sp)
10011298:	dcc00415 	stw	r19,16(sp)
1001129c:	dc400215 	stw	r17,8(sp)
100112a0:	dc000115 	stw	r16,4(sp)
100112a4:	288002c4 	addi	r2,r5,11
100112a8:	00c00584 	movi	r3,22
100112ac:	2025883a 	mov	r18,r4
100112b0:	18807f2e 	bgeu	r3,r2,100114b0 <_malloc_r+0x238>
100112b4:	047ffe04 	movi	r17,-8
100112b8:	1462703a 	and	r17,r2,r17
100112bc:	8800a316 	blt	r17,zero,1001154c <_malloc_r+0x2d4>
100112c0:	8940a236 	bltu	r17,r5,1001154c <_malloc_r+0x2d4>
100112c4:	0016a240 	call	10016a24 <__malloc_lock>
100112c8:	00807dc4 	movi	r2,503
100112cc:	1441e92e 	bgeu	r2,r17,10011a74 <_malloc_r+0x7fc>
100112d0:	8804d27a 	srli	r2,r17,9
100112d4:	1000a126 	beq	r2,zero,1001155c <_malloc_r+0x2e4>
100112d8:	00c00104 	movi	r3,4
100112dc:	18811e36 	bltu	r3,r2,10011758 <_malloc_r+0x4e0>
100112e0:	8804d1ba 	srli	r2,r17,6
100112e4:	12000e44 	addi	r8,r2,57
100112e8:	11c00e04 	addi	r7,r2,56
100112ec:	4209883a 	add	r4,r8,r8
100112f0:	04c400b4 	movhi	r19,4098
100112f4:	2109883a 	add	r4,r4,r4
100112f8:	9ce73104 	addi	r19,r19,-25404
100112fc:	2109883a 	add	r4,r4,r4
10011300:	9909883a 	add	r4,r19,r4
10011304:	24000117 	ldw	r16,4(r4)
10011308:	213ffe04 	addi	r4,r4,-8
1001130c:	24009726 	beq	r4,r16,1001156c <_malloc_r+0x2f4>
10011310:	80800117 	ldw	r2,4(r16)
10011314:	01bfff04 	movi	r6,-4
10011318:	014003c4 	movi	r5,15
1001131c:	1184703a 	and	r2,r2,r6
10011320:	1447c83a 	sub	r3,r2,r17
10011324:	28c00716 	blt	r5,r3,10011344 <_malloc_r+0xcc>
10011328:	1800920e 	bge	r3,zero,10011574 <_malloc_r+0x2fc>
1001132c:	84000317 	ldw	r16,12(r16)
10011330:	24008e26 	beq	r4,r16,1001156c <_malloc_r+0x2f4>
10011334:	80800117 	ldw	r2,4(r16)
10011338:	1184703a 	and	r2,r2,r6
1001133c:	1447c83a 	sub	r3,r2,r17
10011340:	28fff90e 	bge	r5,r3,10011328 <__alt_data_end+0xf8011328>
10011344:	3809883a 	mov	r4,r7
10011348:	018400b4 	movhi	r6,4098
1001134c:	9c000417 	ldw	r16,16(r19)
10011350:	31a73104 	addi	r6,r6,-25404
10011354:	32000204 	addi	r8,r6,8
10011358:	82013426 	beq	r16,r8,1001182c <_malloc_r+0x5b4>
1001135c:	80c00117 	ldw	r3,4(r16)
10011360:	00bfff04 	movi	r2,-4
10011364:	188e703a 	and	r7,r3,r2
10011368:	3c45c83a 	sub	r2,r7,r17
1001136c:	00c003c4 	movi	r3,15
10011370:	18811f16 	blt	r3,r2,100117f0 <_malloc_r+0x578>
10011374:	32000515 	stw	r8,20(r6)
10011378:	32000415 	stw	r8,16(r6)
1001137c:	10007f0e 	bge	r2,zero,1001157c <_malloc_r+0x304>
10011380:	00807fc4 	movi	r2,511
10011384:	11c0fd36 	bltu	r2,r7,1001177c <_malloc_r+0x504>
10011388:	3806d0fa 	srli	r3,r7,3
1001138c:	01c00044 	movi	r7,1
10011390:	30800117 	ldw	r2,4(r6)
10011394:	19400044 	addi	r5,r3,1
10011398:	294b883a 	add	r5,r5,r5
1001139c:	1807d0ba 	srai	r3,r3,2
100113a0:	294b883a 	add	r5,r5,r5
100113a4:	294b883a 	add	r5,r5,r5
100113a8:	298b883a 	add	r5,r5,r6
100113ac:	38c6983a 	sll	r3,r7,r3
100113b0:	29c00017 	ldw	r7,0(r5)
100113b4:	2a7ffe04 	addi	r9,r5,-8
100113b8:	1886b03a 	or	r3,r3,r2
100113bc:	82400315 	stw	r9,12(r16)
100113c0:	81c00215 	stw	r7,8(r16)
100113c4:	30c00115 	stw	r3,4(r6)
100113c8:	2c000015 	stw	r16,0(r5)
100113cc:	3c000315 	stw	r16,12(r7)
100113d0:	2005d0ba 	srai	r2,r4,2
100113d4:	01400044 	movi	r5,1
100113d8:	288a983a 	sll	r5,r5,r2
100113dc:	19406f36 	bltu	r3,r5,1001159c <_malloc_r+0x324>
100113e0:	28c4703a 	and	r2,r5,r3
100113e4:	10000a1e 	bne	r2,zero,10011410 <_malloc_r+0x198>
100113e8:	00bfff04 	movi	r2,-4
100113ec:	294b883a 	add	r5,r5,r5
100113f0:	2088703a 	and	r4,r4,r2
100113f4:	28c4703a 	and	r2,r5,r3
100113f8:	21000104 	addi	r4,r4,4
100113fc:	1000041e 	bne	r2,zero,10011410 <_malloc_r+0x198>
10011400:	294b883a 	add	r5,r5,r5
10011404:	28c4703a 	and	r2,r5,r3
10011408:	21000104 	addi	r4,r4,4
1001140c:	103ffc26 	beq	r2,zero,10011400 <__alt_data_end+0xf8011400>
10011410:	02bfff04 	movi	r10,-4
10011414:	024003c4 	movi	r9,15
10011418:	21800044 	addi	r6,r4,1
1001141c:	318d883a 	add	r6,r6,r6
10011420:	318d883a 	add	r6,r6,r6
10011424:	318d883a 	add	r6,r6,r6
10011428:	998d883a 	add	r6,r19,r6
1001142c:	333ffe04 	addi	r12,r6,-8
10011430:	2017883a 	mov	r11,r4
10011434:	31800104 	addi	r6,r6,4
10011438:	34000017 	ldw	r16,0(r6)
1001143c:	31fffd04 	addi	r7,r6,-12
10011440:	81c0041e 	bne	r16,r7,10011454 <_malloc_r+0x1dc>
10011444:	0000fb06 	br	10011834 <_malloc_r+0x5bc>
10011448:	1801030e 	bge	r3,zero,10011858 <_malloc_r+0x5e0>
1001144c:	84000317 	ldw	r16,12(r16)
10011450:	81c0f826 	beq	r16,r7,10011834 <_malloc_r+0x5bc>
10011454:	80800117 	ldw	r2,4(r16)
10011458:	1284703a 	and	r2,r2,r10
1001145c:	1447c83a 	sub	r3,r2,r17
10011460:	48fff90e 	bge	r9,r3,10011448 <__alt_data_end+0xf8011448>
10011464:	80800317 	ldw	r2,12(r16)
10011468:	81000217 	ldw	r4,8(r16)
1001146c:	89400054 	ori	r5,r17,1
10011470:	81400115 	stw	r5,4(r16)
10011474:	20800315 	stw	r2,12(r4)
10011478:	11000215 	stw	r4,8(r2)
1001147c:	8463883a 	add	r17,r16,r17
10011480:	9c400515 	stw	r17,20(r19)
10011484:	9c400415 	stw	r17,16(r19)
10011488:	18800054 	ori	r2,r3,1
1001148c:	88800115 	stw	r2,4(r17)
10011490:	8a000315 	stw	r8,12(r17)
10011494:	8a000215 	stw	r8,8(r17)
10011498:	88e3883a 	add	r17,r17,r3
1001149c:	88c00015 	stw	r3,0(r17)
100114a0:	9009883a 	mov	r4,r18
100114a4:	0016a480 	call	10016a48 <__malloc_unlock>
100114a8:	80800204 	addi	r2,r16,8
100114ac:	00001b06 	br	1001151c <_malloc_r+0x2a4>
100114b0:	04400404 	movi	r17,16
100114b4:	89402536 	bltu	r17,r5,1001154c <_malloc_r+0x2d4>
100114b8:	0016a240 	call	10016a24 <__malloc_lock>
100114bc:	00800184 	movi	r2,6
100114c0:	01000084 	movi	r4,2
100114c4:	04c400b4 	movhi	r19,4098
100114c8:	1085883a 	add	r2,r2,r2
100114cc:	9ce73104 	addi	r19,r19,-25404
100114d0:	1085883a 	add	r2,r2,r2
100114d4:	9885883a 	add	r2,r19,r2
100114d8:	14000117 	ldw	r16,4(r2)
100114dc:	10fffe04 	addi	r3,r2,-8
100114e0:	80c0d926 	beq	r16,r3,10011848 <_malloc_r+0x5d0>
100114e4:	80c00117 	ldw	r3,4(r16)
100114e8:	81000317 	ldw	r4,12(r16)
100114ec:	00bfff04 	movi	r2,-4
100114f0:	1884703a 	and	r2,r3,r2
100114f4:	81400217 	ldw	r5,8(r16)
100114f8:	8085883a 	add	r2,r16,r2
100114fc:	10c00117 	ldw	r3,4(r2)
10011500:	29000315 	stw	r4,12(r5)
10011504:	21400215 	stw	r5,8(r4)
10011508:	18c00054 	ori	r3,r3,1
1001150c:	10c00115 	stw	r3,4(r2)
10011510:	9009883a 	mov	r4,r18
10011514:	0016a480 	call	10016a48 <__malloc_unlock>
10011518:	80800204 	addi	r2,r16,8
1001151c:	dfc00a17 	ldw	ra,40(sp)
10011520:	df000917 	ldw	fp,36(sp)
10011524:	ddc00817 	ldw	r23,32(sp)
10011528:	dd800717 	ldw	r22,28(sp)
1001152c:	dd400617 	ldw	r21,24(sp)
10011530:	dd000517 	ldw	r20,20(sp)
10011534:	dcc00417 	ldw	r19,16(sp)
10011538:	dc800317 	ldw	r18,12(sp)
1001153c:	dc400217 	ldw	r17,8(sp)
10011540:	dc000117 	ldw	r16,4(sp)
10011544:	dec00b04 	addi	sp,sp,44
10011548:	f800283a 	ret
1001154c:	00800304 	movi	r2,12
10011550:	90800015 	stw	r2,0(r18)
10011554:	0005883a 	mov	r2,zero
10011558:	003ff006 	br	1001151c <__alt_data_end+0xf801151c>
1001155c:	01002004 	movi	r4,128
10011560:	02001004 	movi	r8,64
10011564:	01c00fc4 	movi	r7,63
10011568:	003f6106 	br	100112f0 <__alt_data_end+0xf80112f0>
1001156c:	4009883a 	mov	r4,r8
10011570:	003f7506 	br	10011348 <__alt_data_end+0xf8011348>
10011574:	81000317 	ldw	r4,12(r16)
10011578:	003fde06 	br	100114f4 <__alt_data_end+0xf80114f4>
1001157c:	81c5883a 	add	r2,r16,r7
10011580:	11400117 	ldw	r5,4(r2)
10011584:	9009883a 	mov	r4,r18
10011588:	29400054 	ori	r5,r5,1
1001158c:	11400115 	stw	r5,4(r2)
10011590:	0016a480 	call	10016a48 <__malloc_unlock>
10011594:	80800204 	addi	r2,r16,8
10011598:	003fe006 	br	1001151c <__alt_data_end+0xf801151c>
1001159c:	9c000217 	ldw	r16,8(r19)
100115a0:	00bfff04 	movi	r2,-4
100115a4:	85800117 	ldw	r22,4(r16)
100115a8:	b0ac703a 	and	r22,r22,r2
100115ac:	b4400336 	bltu	r22,r17,100115bc <_malloc_r+0x344>
100115b0:	b445c83a 	sub	r2,r22,r17
100115b4:	00c003c4 	movi	r3,15
100115b8:	18805d16 	blt	r3,r2,10011730 <_malloc_r+0x4b8>
100115bc:	05c400b4 	movhi	r23,4098
100115c0:	008400b4 	movhi	r2,4098
100115c4:	10b4b104 	addi	r2,r2,-11580
100115c8:	bdecbf04 	addi	r23,r23,-19716
100115cc:	15400017 	ldw	r21,0(r2)
100115d0:	b8c00017 	ldw	r3,0(r23)
100115d4:	00bfffc4 	movi	r2,-1
100115d8:	858d883a 	add	r6,r16,r22
100115dc:	8d6b883a 	add	r21,r17,r21
100115e0:	1880ea26 	beq	r3,r2,1001198c <_malloc_r+0x714>
100115e4:	ad4403c4 	addi	r21,r21,4111
100115e8:	00bc0004 	movi	r2,-4096
100115ec:	a8aa703a 	and	r21,r21,r2
100115f0:	a80b883a 	mov	r5,r21
100115f4:	9009883a 	mov	r4,r18
100115f8:	d9800015 	stw	r6,0(sp)
100115fc:	001347c0 	call	1001347c <_sbrk_r>
10011600:	1029883a 	mov	r20,r2
10011604:	00bfffc4 	movi	r2,-1
10011608:	d9800017 	ldw	r6,0(sp)
1001160c:	a080e826 	beq	r20,r2,100119b0 <_malloc_r+0x738>
10011610:	a180a636 	bltu	r20,r6,100118ac <_malloc_r+0x634>
10011614:	070400b4 	movhi	fp,4098
10011618:	e734ba04 	addi	fp,fp,-11544
1001161c:	e0800017 	ldw	r2,0(fp)
10011620:	a887883a 	add	r3,r21,r2
10011624:	e0c00015 	stw	r3,0(fp)
10011628:	3500e626 	beq	r6,r20,100119c4 <_malloc_r+0x74c>
1001162c:	b9000017 	ldw	r4,0(r23)
10011630:	00bfffc4 	movi	r2,-1
10011634:	2080ee26 	beq	r4,r2,100119f0 <_malloc_r+0x778>
10011638:	a185c83a 	sub	r2,r20,r6
1001163c:	10c5883a 	add	r2,r2,r3
10011640:	e0800015 	stw	r2,0(fp)
10011644:	a0c001cc 	andi	r3,r20,7
10011648:	1800bc26 	beq	r3,zero,1001193c <_malloc_r+0x6c4>
1001164c:	a0e9c83a 	sub	r20,r20,r3
10011650:	00840204 	movi	r2,4104
10011654:	a5000204 	addi	r20,r20,8
10011658:	10c7c83a 	sub	r3,r2,r3
1001165c:	a545883a 	add	r2,r20,r21
10011660:	1083ffcc 	andi	r2,r2,4095
10011664:	18abc83a 	sub	r21,r3,r2
10011668:	a80b883a 	mov	r5,r21
1001166c:	9009883a 	mov	r4,r18
10011670:	001347c0 	call	1001347c <_sbrk_r>
10011674:	00ffffc4 	movi	r3,-1
10011678:	10c0e126 	beq	r2,r3,10011a00 <_malloc_r+0x788>
1001167c:	1505c83a 	sub	r2,r2,r20
10011680:	1545883a 	add	r2,r2,r21
10011684:	10800054 	ori	r2,r2,1
10011688:	e0c00017 	ldw	r3,0(fp)
1001168c:	9d000215 	stw	r20,8(r19)
10011690:	a0800115 	stw	r2,4(r20)
10011694:	a8c7883a 	add	r3,r21,r3
10011698:	e0c00015 	stw	r3,0(fp)
1001169c:	84c00e26 	beq	r16,r19,100116d8 <_malloc_r+0x460>
100116a0:	018003c4 	movi	r6,15
100116a4:	3580a72e 	bgeu	r6,r22,10011944 <_malloc_r+0x6cc>
100116a8:	81400117 	ldw	r5,4(r16)
100116ac:	013ffe04 	movi	r4,-8
100116b0:	b0bffd04 	addi	r2,r22,-12
100116b4:	1104703a 	and	r2,r2,r4
100116b8:	2900004c 	andi	r4,r5,1
100116bc:	2088b03a 	or	r4,r4,r2
100116c0:	81000115 	stw	r4,4(r16)
100116c4:	01400144 	movi	r5,5
100116c8:	8089883a 	add	r4,r16,r2
100116cc:	21400115 	stw	r5,4(r4)
100116d0:	21400215 	stw	r5,8(r4)
100116d4:	3080cd36 	bltu	r6,r2,10011a0c <_malloc_r+0x794>
100116d8:	008400b4 	movhi	r2,4098
100116dc:	10b4b004 	addi	r2,r2,-11584
100116e0:	11000017 	ldw	r4,0(r2)
100116e4:	20c0012e 	bgeu	r4,r3,100116ec <_malloc_r+0x474>
100116e8:	10c00015 	stw	r3,0(r2)
100116ec:	008400b4 	movhi	r2,4098
100116f0:	10b4af04 	addi	r2,r2,-11588
100116f4:	11000017 	ldw	r4,0(r2)
100116f8:	9c000217 	ldw	r16,8(r19)
100116fc:	20c0012e 	bgeu	r4,r3,10011704 <_malloc_r+0x48c>
10011700:	10c00015 	stw	r3,0(r2)
10011704:	80c00117 	ldw	r3,4(r16)
10011708:	00bfff04 	movi	r2,-4
1001170c:	1886703a 	and	r3,r3,r2
10011710:	1c45c83a 	sub	r2,r3,r17
10011714:	1c400236 	bltu	r3,r17,10011720 <_malloc_r+0x4a8>
10011718:	00c003c4 	movi	r3,15
1001171c:	18800416 	blt	r3,r2,10011730 <_malloc_r+0x4b8>
10011720:	9009883a 	mov	r4,r18
10011724:	0016a480 	call	10016a48 <__malloc_unlock>
10011728:	0005883a 	mov	r2,zero
1001172c:	003f7b06 	br	1001151c <__alt_data_end+0xf801151c>
10011730:	88c00054 	ori	r3,r17,1
10011734:	80c00115 	stw	r3,4(r16)
10011738:	8463883a 	add	r17,r16,r17
1001173c:	10800054 	ori	r2,r2,1
10011740:	9c400215 	stw	r17,8(r19)
10011744:	88800115 	stw	r2,4(r17)
10011748:	9009883a 	mov	r4,r18
1001174c:	0016a480 	call	10016a48 <__malloc_unlock>
10011750:	80800204 	addi	r2,r16,8
10011754:	003f7106 	br	1001151c <__alt_data_end+0xf801151c>
10011758:	00c00504 	movi	r3,20
1001175c:	18804a2e 	bgeu	r3,r2,10011888 <_malloc_r+0x610>
10011760:	00c01504 	movi	r3,84
10011764:	18806e36 	bltu	r3,r2,10011920 <_malloc_r+0x6a8>
10011768:	8804d33a 	srli	r2,r17,12
1001176c:	12001bc4 	addi	r8,r2,111
10011770:	11c01b84 	addi	r7,r2,110
10011774:	4209883a 	add	r4,r8,r8
10011778:	003edd06 	br	100112f0 <__alt_data_end+0xf80112f0>
1001177c:	3804d27a 	srli	r2,r7,9
10011780:	00c00104 	movi	r3,4
10011784:	1880442e 	bgeu	r3,r2,10011898 <_malloc_r+0x620>
10011788:	00c00504 	movi	r3,20
1001178c:	18808136 	bltu	r3,r2,10011994 <_malloc_r+0x71c>
10011790:	11401704 	addi	r5,r2,92
10011794:	10c016c4 	addi	r3,r2,91
10011798:	294b883a 	add	r5,r5,r5
1001179c:	294b883a 	add	r5,r5,r5
100117a0:	294b883a 	add	r5,r5,r5
100117a4:	994b883a 	add	r5,r19,r5
100117a8:	28800017 	ldw	r2,0(r5)
100117ac:	018400b4 	movhi	r6,4098
100117b0:	297ffe04 	addi	r5,r5,-8
100117b4:	31a73104 	addi	r6,r6,-25404
100117b8:	28806526 	beq	r5,r2,10011950 <_malloc_r+0x6d8>
100117bc:	01bfff04 	movi	r6,-4
100117c0:	10c00117 	ldw	r3,4(r2)
100117c4:	1986703a 	and	r3,r3,r6
100117c8:	38c0022e 	bgeu	r7,r3,100117d4 <_malloc_r+0x55c>
100117cc:	10800217 	ldw	r2,8(r2)
100117d0:	28bffb1e 	bne	r5,r2,100117c0 <__alt_data_end+0xf80117c0>
100117d4:	11400317 	ldw	r5,12(r2)
100117d8:	98c00117 	ldw	r3,4(r19)
100117dc:	81400315 	stw	r5,12(r16)
100117e0:	80800215 	stw	r2,8(r16)
100117e4:	2c000215 	stw	r16,8(r5)
100117e8:	14000315 	stw	r16,12(r2)
100117ec:	003ef806 	br	100113d0 <__alt_data_end+0xf80113d0>
100117f0:	88c00054 	ori	r3,r17,1
100117f4:	80c00115 	stw	r3,4(r16)
100117f8:	8463883a 	add	r17,r16,r17
100117fc:	34400515 	stw	r17,20(r6)
10011800:	34400415 	stw	r17,16(r6)
10011804:	10c00054 	ori	r3,r2,1
10011808:	8a000315 	stw	r8,12(r17)
1001180c:	8a000215 	stw	r8,8(r17)
10011810:	88c00115 	stw	r3,4(r17)
10011814:	88a3883a 	add	r17,r17,r2
10011818:	88800015 	stw	r2,0(r17)
1001181c:	9009883a 	mov	r4,r18
10011820:	0016a480 	call	10016a48 <__malloc_unlock>
10011824:	80800204 	addi	r2,r16,8
10011828:	003f3c06 	br	1001151c <__alt_data_end+0xf801151c>
1001182c:	30c00117 	ldw	r3,4(r6)
10011830:	003ee706 	br	100113d0 <__alt_data_end+0xf80113d0>
10011834:	5ac00044 	addi	r11,r11,1
10011838:	588000cc 	andi	r2,r11,3
1001183c:	31800204 	addi	r6,r6,8
10011840:	103efd1e 	bne	r2,zero,10011438 <__alt_data_end+0xf8011438>
10011844:	00002406 	br	100118d8 <_malloc_r+0x660>
10011848:	14000317 	ldw	r16,12(r2)
1001184c:	143f251e 	bne	r2,r16,100114e4 <__alt_data_end+0xf80114e4>
10011850:	21000084 	addi	r4,r4,2
10011854:	003ebc06 	br	10011348 <__alt_data_end+0xf8011348>
10011858:	8085883a 	add	r2,r16,r2
1001185c:	10c00117 	ldw	r3,4(r2)
10011860:	81000317 	ldw	r4,12(r16)
10011864:	81400217 	ldw	r5,8(r16)
10011868:	18c00054 	ori	r3,r3,1
1001186c:	10c00115 	stw	r3,4(r2)
10011870:	29000315 	stw	r4,12(r5)
10011874:	21400215 	stw	r5,8(r4)
10011878:	9009883a 	mov	r4,r18
1001187c:	0016a480 	call	10016a48 <__malloc_unlock>
10011880:	80800204 	addi	r2,r16,8
10011884:	003f2506 	br	1001151c <__alt_data_end+0xf801151c>
10011888:	12001704 	addi	r8,r2,92
1001188c:	11c016c4 	addi	r7,r2,91
10011890:	4209883a 	add	r4,r8,r8
10011894:	003e9606 	br	100112f0 <__alt_data_end+0xf80112f0>
10011898:	3804d1ba 	srli	r2,r7,6
1001189c:	11400e44 	addi	r5,r2,57
100118a0:	10c00e04 	addi	r3,r2,56
100118a4:	294b883a 	add	r5,r5,r5
100118a8:	003fbc06 	br	1001179c <__alt_data_end+0xf801179c>
100118ac:	84ff5926 	beq	r16,r19,10011614 <__alt_data_end+0xf8011614>
100118b0:	008400b4 	movhi	r2,4098
100118b4:	10a73104 	addi	r2,r2,-25404
100118b8:	14000217 	ldw	r16,8(r2)
100118bc:	00bfff04 	movi	r2,-4
100118c0:	80c00117 	ldw	r3,4(r16)
100118c4:	1886703a 	and	r3,r3,r2
100118c8:	003f9106 	br	10011710 <__alt_data_end+0xf8011710>
100118cc:	60800217 	ldw	r2,8(r12)
100118d0:	213fffc4 	addi	r4,r4,-1
100118d4:	1300651e 	bne	r2,r12,10011a6c <_malloc_r+0x7f4>
100118d8:	208000cc 	andi	r2,r4,3
100118dc:	633ffe04 	addi	r12,r12,-8
100118e0:	103ffa1e 	bne	r2,zero,100118cc <__alt_data_end+0xf80118cc>
100118e4:	98800117 	ldw	r2,4(r19)
100118e8:	0146303a 	nor	r3,zero,r5
100118ec:	1884703a 	and	r2,r3,r2
100118f0:	98800115 	stw	r2,4(r19)
100118f4:	294b883a 	add	r5,r5,r5
100118f8:	117f2836 	bltu	r2,r5,1001159c <__alt_data_end+0xf801159c>
100118fc:	283f2726 	beq	r5,zero,1001159c <__alt_data_end+0xf801159c>
10011900:	2886703a 	and	r3,r5,r2
10011904:	5809883a 	mov	r4,r11
10011908:	183ec31e 	bne	r3,zero,10011418 <__alt_data_end+0xf8011418>
1001190c:	294b883a 	add	r5,r5,r5
10011910:	2886703a 	and	r3,r5,r2
10011914:	21000104 	addi	r4,r4,4
10011918:	183ffc26 	beq	r3,zero,1001190c <__alt_data_end+0xf801190c>
1001191c:	003ebe06 	br	10011418 <__alt_data_end+0xf8011418>
10011920:	00c05504 	movi	r3,340
10011924:	18801236 	bltu	r3,r2,10011970 <_malloc_r+0x6f8>
10011928:	8804d3fa 	srli	r2,r17,15
1001192c:	12001e04 	addi	r8,r2,120
10011930:	11c01dc4 	addi	r7,r2,119
10011934:	4209883a 	add	r4,r8,r8
10011938:	003e6d06 	br	100112f0 <__alt_data_end+0xf80112f0>
1001193c:	00c40004 	movi	r3,4096
10011940:	003f4606 	br	1001165c <__alt_data_end+0xf801165c>
10011944:	00800044 	movi	r2,1
10011948:	a0800115 	stw	r2,4(r20)
1001194c:	003f7406 	br	10011720 <__alt_data_end+0xf8011720>
10011950:	1805d0ba 	srai	r2,r3,2
10011954:	01c00044 	movi	r7,1
10011958:	30c00117 	ldw	r3,4(r6)
1001195c:	388e983a 	sll	r7,r7,r2
10011960:	2805883a 	mov	r2,r5
10011964:	38c6b03a 	or	r3,r7,r3
10011968:	30c00115 	stw	r3,4(r6)
1001196c:	003f9b06 	br	100117dc <__alt_data_end+0xf80117dc>
10011970:	00c15504 	movi	r3,1364
10011974:	18801a36 	bltu	r3,r2,100119e0 <_malloc_r+0x768>
10011978:	8804d4ba 	srli	r2,r17,18
1001197c:	12001f44 	addi	r8,r2,125
10011980:	11c01f04 	addi	r7,r2,124
10011984:	4209883a 	add	r4,r8,r8
10011988:	003e5906 	br	100112f0 <__alt_data_end+0xf80112f0>
1001198c:	ad400404 	addi	r21,r21,16
10011990:	003f1706 	br	100115f0 <__alt_data_end+0xf80115f0>
10011994:	00c01504 	movi	r3,84
10011998:	18802336 	bltu	r3,r2,10011a28 <_malloc_r+0x7b0>
1001199c:	3804d33a 	srli	r2,r7,12
100119a0:	11401bc4 	addi	r5,r2,111
100119a4:	10c01b84 	addi	r3,r2,110
100119a8:	294b883a 	add	r5,r5,r5
100119ac:	003f7b06 	br	1001179c <__alt_data_end+0xf801179c>
100119b0:	9c000217 	ldw	r16,8(r19)
100119b4:	00bfff04 	movi	r2,-4
100119b8:	80c00117 	ldw	r3,4(r16)
100119bc:	1886703a 	and	r3,r3,r2
100119c0:	003f5306 	br	10011710 <__alt_data_end+0xf8011710>
100119c4:	3083ffcc 	andi	r2,r6,4095
100119c8:	103f181e 	bne	r2,zero,1001162c <__alt_data_end+0xf801162c>
100119cc:	99000217 	ldw	r4,8(r19)
100119d0:	b545883a 	add	r2,r22,r21
100119d4:	10800054 	ori	r2,r2,1
100119d8:	20800115 	stw	r2,4(r4)
100119dc:	003f3e06 	br	100116d8 <__alt_data_end+0xf80116d8>
100119e0:	01003f84 	movi	r4,254
100119e4:	02001fc4 	movi	r8,127
100119e8:	01c01f84 	movi	r7,126
100119ec:	003e4006 	br	100112f0 <__alt_data_end+0xf80112f0>
100119f0:	008400b4 	movhi	r2,4098
100119f4:	10acbf04 	addi	r2,r2,-19716
100119f8:	15000015 	stw	r20,0(r2)
100119fc:	003f1106 	br	10011644 <__alt_data_end+0xf8011644>
10011a00:	00800044 	movi	r2,1
10011a04:	002b883a 	mov	r21,zero
10011a08:	003f1f06 	br	10011688 <__alt_data_end+0xf8011688>
10011a0c:	81400204 	addi	r5,r16,8
10011a10:	9009883a 	mov	r4,r18
10011a14:	00106800 	call	10010680 <_free_r>
10011a18:	008400b4 	movhi	r2,4098
10011a1c:	10b4ba04 	addi	r2,r2,-11544
10011a20:	10c00017 	ldw	r3,0(r2)
10011a24:	003f2c06 	br	100116d8 <__alt_data_end+0xf80116d8>
10011a28:	00c05504 	movi	r3,340
10011a2c:	18800536 	bltu	r3,r2,10011a44 <_malloc_r+0x7cc>
10011a30:	3804d3fa 	srli	r2,r7,15
10011a34:	11401e04 	addi	r5,r2,120
10011a38:	10c01dc4 	addi	r3,r2,119
10011a3c:	294b883a 	add	r5,r5,r5
10011a40:	003f5606 	br	1001179c <__alt_data_end+0xf801179c>
10011a44:	00c15504 	movi	r3,1364
10011a48:	18800536 	bltu	r3,r2,10011a60 <_malloc_r+0x7e8>
10011a4c:	3804d4ba 	srli	r2,r7,18
10011a50:	11401f44 	addi	r5,r2,125
10011a54:	10c01f04 	addi	r3,r2,124
10011a58:	294b883a 	add	r5,r5,r5
10011a5c:	003f4f06 	br	1001179c <__alt_data_end+0xf801179c>
10011a60:	01403f84 	movi	r5,254
10011a64:	00c01f84 	movi	r3,126
10011a68:	003f4c06 	br	1001179c <__alt_data_end+0xf801179c>
10011a6c:	98800117 	ldw	r2,4(r19)
10011a70:	003fa006 	br	100118f4 <__alt_data_end+0xf80118f4>
10011a74:	8808d0fa 	srli	r4,r17,3
10011a78:	20800044 	addi	r2,r4,1
10011a7c:	1085883a 	add	r2,r2,r2
10011a80:	003e9006 	br	100114c4 <__alt_data_end+0xf80114c4>

10011a84 <memchr>:
10011a84:	208000cc 	andi	r2,r4,3
10011a88:	280f883a 	mov	r7,r5
10011a8c:	10003426 	beq	r2,zero,10011b60 <memchr+0xdc>
10011a90:	30bfffc4 	addi	r2,r6,-1
10011a94:	30001a26 	beq	r6,zero,10011b00 <memchr+0x7c>
10011a98:	20c00003 	ldbu	r3,0(r4)
10011a9c:	29803fcc 	andi	r6,r5,255
10011aa0:	30c0051e 	bne	r6,r3,10011ab8 <memchr+0x34>
10011aa4:	00001806 	br	10011b08 <memchr+0x84>
10011aa8:	10001526 	beq	r2,zero,10011b00 <memchr+0x7c>
10011aac:	20c00003 	ldbu	r3,0(r4)
10011ab0:	10bfffc4 	addi	r2,r2,-1
10011ab4:	30c01426 	beq	r6,r3,10011b08 <memchr+0x84>
10011ab8:	21000044 	addi	r4,r4,1
10011abc:	20c000cc 	andi	r3,r4,3
10011ac0:	183ff91e 	bne	r3,zero,10011aa8 <__alt_data_end+0xf8011aa8>
10011ac4:	020000c4 	movi	r8,3
10011ac8:	40801136 	bltu	r8,r2,10011b10 <memchr+0x8c>
10011acc:	10000c26 	beq	r2,zero,10011b00 <memchr+0x7c>
10011ad0:	20c00003 	ldbu	r3,0(r4)
10011ad4:	29403fcc 	andi	r5,r5,255
10011ad8:	28c00b26 	beq	r5,r3,10011b08 <memchr+0x84>
10011adc:	20c00044 	addi	r3,r4,1
10011ae0:	39803fcc 	andi	r6,r7,255
10011ae4:	2089883a 	add	r4,r4,r2
10011ae8:	00000306 	br	10011af8 <memchr+0x74>
10011aec:	18c00044 	addi	r3,r3,1
10011af0:	197fffc3 	ldbu	r5,-1(r3)
10011af4:	31400526 	beq	r6,r5,10011b0c <memchr+0x88>
10011af8:	1805883a 	mov	r2,r3
10011afc:	20fffb1e 	bne	r4,r3,10011aec <__alt_data_end+0xf8011aec>
10011b00:	0005883a 	mov	r2,zero
10011b04:	f800283a 	ret
10011b08:	2005883a 	mov	r2,r4
10011b0c:	f800283a 	ret
10011b10:	28c03fcc 	andi	r3,r5,255
10011b14:	1812923a 	slli	r9,r3,8
10011b18:	02ffbff4 	movhi	r11,65279
10011b1c:	02a02074 	movhi	r10,32897
10011b20:	48d2b03a 	or	r9,r9,r3
10011b24:	4806943a 	slli	r3,r9,16
10011b28:	5affbfc4 	addi	r11,r11,-257
10011b2c:	52a02004 	addi	r10,r10,-32640
10011b30:	48d2b03a 	or	r9,r9,r3
10011b34:	20c00017 	ldw	r3,0(r4)
10011b38:	48c6f03a 	xor	r3,r9,r3
10011b3c:	1acd883a 	add	r6,r3,r11
10011b40:	00c6303a 	nor	r3,zero,r3
10011b44:	30c6703a 	and	r3,r6,r3
10011b48:	1a86703a 	and	r3,r3,r10
10011b4c:	183fe01e 	bne	r3,zero,10011ad0 <__alt_data_end+0xf8011ad0>
10011b50:	10bfff04 	addi	r2,r2,-4
10011b54:	21000104 	addi	r4,r4,4
10011b58:	40bff636 	bltu	r8,r2,10011b34 <__alt_data_end+0xf8011b34>
10011b5c:	003fdb06 	br	10011acc <__alt_data_end+0xf8011acc>
10011b60:	3005883a 	mov	r2,r6
10011b64:	003fd706 	br	10011ac4 <__alt_data_end+0xf8011ac4>

10011b68 <memmove>:
10011b68:	2005883a 	mov	r2,r4
10011b6c:	29000b2e 	bgeu	r5,r4,10011b9c <memmove+0x34>
10011b70:	298f883a 	add	r7,r5,r6
10011b74:	21c0092e 	bgeu	r4,r7,10011b9c <memmove+0x34>
10011b78:	2187883a 	add	r3,r4,r6
10011b7c:	198bc83a 	sub	r5,r3,r6
10011b80:	30004826 	beq	r6,zero,10011ca4 <memmove+0x13c>
10011b84:	39ffffc4 	addi	r7,r7,-1
10011b88:	39000003 	ldbu	r4,0(r7)
10011b8c:	18ffffc4 	addi	r3,r3,-1
10011b90:	19000005 	stb	r4,0(r3)
10011b94:	28fffb1e 	bne	r5,r3,10011b84 <__alt_data_end+0xf8011b84>
10011b98:	f800283a 	ret
10011b9c:	00c003c4 	movi	r3,15
10011ba0:	1980412e 	bgeu	r3,r6,10011ca8 <memmove+0x140>
10011ba4:	2886b03a 	or	r3,r5,r2
10011ba8:	18c000cc 	andi	r3,r3,3
10011bac:	1800401e 	bne	r3,zero,10011cb0 <memmove+0x148>
10011bb0:	33fffc04 	addi	r15,r6,-16
10011bb4:	781ed13a 	srli	r15,r15,4
10011bb8:	28c00104 	addi	r3,r5,4
10011bbc:	13400104 	addi	r13,r2,4
10011bc0:	781c913a 	slli	r14,r15,4
10011bc4:	2b000204 	addi	r12,r5,8
10011bc8:	12c00204 	addi	r11,r2,8
10011bcc:	73800504 	addi	r14,r14,20
10011bd0:	2a800304 	addi	r10,r5,12
10011bd4:	12400304 	addi	r9,r2,12
10011bd8:	2b9d883a 	add	r14,r5,r14
10011bdc:	2811883a 	mov	r8,r5
10011be0:	100f883a 	mov	r7,r2
10011be4:	41000017 	ldw	r4,0(r8)
10011be8:	39c00404 	addi	r7,r7,16
10011bec:	18c00404 	addi	r3,r3,16
10011bf0:	393ffc15 	stw	r4,-16(r7)
10011bf4:	193ffc17 	ldw	r4,-16(r3)
10011bf8:	6b400404 	addi	r13,r13,16
10011bfc:	5ac00404 	addi	r11,r11,16
10011c00:	693ffc15 	stw	r4,-16(r13)
10011c04:	61000017 	ldw	r4,0(r12)
10011c08:	4a400404 	addi	r9,r9,16
10011c0c:	42000404 	addi	r8,r8,16
10011c10:	593ffc15 	stw	r4,-16(r11)
10011c14:	51000017 	ldw	r4,0(r10)
10011c18:	63000404 	addi	r12,r12,16
10011c1c:	52800404 	addi	r10,r10,16
10011c20:	493ffc15 	stw	r4,-16(r9)
10011c24:	1bbfef1e 	bne	r3,r14,10011be4 <__alt_data_end+0xf8011be4>
10011c28:	79000044 	addi	r4,r15,1
10011c2c:	2008913a 	slli	r4,r4,4
10011c30:	328003cc 	andi	r10,r6,15
10011c34:	02c000c4 	movi	r11,3
10011c38:	1107883a 	add	r3,r2,r4
10011c3c:	290b883a 	add	r5,r5,r4
10011c40:	5a801e2e 	bgeu	r11,r10,10011cbc <memmove+0x154>
10011c44:	1813883a 	mov	r9,r3
10011c48:	2811883a 	mov	r8,r5
10011c4c:	500f883a 	mov	r7,r10
10011c50:	41000017 	ldw	r4,0(r8)
10011c54:	4a400104 	addi	r9,r9,4
10011c58:	39ffff04 	addi	r7,r7,-4
10011c5c:	493fff15 	stw	r4,-4(r9)
10011c60:	42000104 	addi	r8,r8,4
10011c64:	59fffa36 	bltu	r11,r7,10011c50 <__alt_data_end+0xf8011c50>
10011c68:	513fff04 	addi	r4,r10,-4
10011c6c:	2008d0ba 	srli	r4,r4,2
10011c70:	318000cc 	andi	r6,r6,3
10011c74:	21000044 	addi	r4,r4,1
10011c78:	2109883a 	add	r4,r4,r4
10011c7c:	2109883a 	add	r4,r4,r4
10011c80:	1907883a 	add	r3,r3,r4
10011c84:	290b883a 	add	r5,r5,r4
10011c88:	30000b26 	beq	r6,zero,10011cb8 <memmove+0x150>
10011c8c:	198d883a 	add	r6,r3,r6
10011c90:	29c00003 	ldbu	r7,0(r5)
10011c94:	18c00044 	addi	r3,r3,1
10011c98:	29400044 	addi	r5,r5,1
10011c9c:	19ffffc5 	stb	r7,-1(r3)
10011ca0:	19bffb1e 	bne	r3,r6,10011c90 <__alt_data_end+0xf8011c90>
10011ca4:	f800283a 	ret
10011ca8:	1007883a 	mov	r3,r2
10011cac:	003ff606 	br	10011c88 <__alt_data_end+0xf8011c88>
10011cb0:	1007883a 	mov	r3,r2
10011cb4:	003ff506 	br	10011c8c <__alt_data_end+0xf8011c8c>
10011cb8:	f800283a 	ret
10011cbc:	500d883a 	mov	r6,r10
10011cc0:	003ff106 	br	10011c88 <__alt_data_end+0xf8011c88>

10011cc4 <memset>:
10011cc4:	20c000cc 	andi	r3,r4,3
10011cc8:	2005883a 	mov	r2,r4
10011ccc:	18004426 	beq	r3,zero,10011de0 <memset+0x11c>
10011cd0:	31ffffc4 	addi	r7,r6,-1
10011cd4:	30004026 	beq	r6,zero,10011dd8 <memset+0x114>
10011cd8:	2813883a 	mov	r9,r5
10011cdc:	200d883a 	mov	r6,r4
10011ce0:	2007883a 	mov	r3,r4
10011ce4:	00000406 	br	10011cf8 <memset+0x34>
10011ce8:	3a3fffc4 	addi	r8,r7,-1
10011cec:	31800044 	addi	r6,r6,1
10011cf0:	38003926 	beq	r7,zero,10011dd8 <memset+0x114>
10011cf4:	400f883a 	mov	r7,r8
10011cf8:	18c00044 	addi	r3,r3,1
10011cfc:	32400005 	stb	r9,0(r6)
10011d00:	1a0000cc 	andi	r8,r3,3
10011d04:	403ff81e 	bne	r8,zero,10011ce8 <__alt_data_end+0xf8011ce8>
10011d08:	010000c4 	movi	r4,3
10011d0c:	21c02d2e 	bgeu	r4,r7,10011dc4 <memset+0x100>
10011d10:	29003fcc 	andi	r4,r5,255
10011d14:	200c923a 	slli	r6,r4,8
10011d18:	3108b03a 	or	r4,r6,r4
10011d1c:	200c943a 	slli	r6,r4,16
10011d20:	218cb03a 	or	r6,r4,r6
10011d24:	010003c4 	movi	r4,15
10011d28:	21c0182e 	bgeu	r4,r7,10011d8c <memset+0xc8>
10011d2c:	3b3ffc04 	addi	r12,r7,-16
10011d30:	6018d13a 	srli	r12,r12,4
10011d34:	1a000104 	addi	r8,r3,4
10011d38:	1ac00204 	addi	r11,r3,8
10011d3c:	6008913a 	slli	r4,r12,4
10011d40:	1a800304 	addi	r10,r3,12
10011d44:	1813883a 	mov	r9,r3
10011d48:	21000504 	addi	r4,r4,20
10011d4c:	1909883a 	add	r4,r3,r4
10011d50:	49800015 	stw	r6,0(r9)
10011d54:	41800015 	stw	r6,0(r8)
10011d58:	59800015 	stw	r6,0(r11)
10011d5c:	51800015 	stw	r6,0(r10)
10011d60:	42000404 	addi	r8,r8,16
10011d64:	4a400404 	addi	r9,r9,16
10011d68:	5ac00404 	addi	r11,r11,16
10011d6c:	52800404 	addi	r10,r10,16
10011d70:	413ff71e 	bne	r8,r4,10011d50 <__alt_data_end+0xf8011d50>
10011d74:	63000044 	addi	r12,r12,1
10011d78:	6018913a 	slli	r12,r12,4
10011d7c:	39c003cc 	andi	r7,r7,15
10011d80:	010000c4 	movi	r4,3
10011d84:	1b07883a 	add	r3,r3,r12
10011d88:	21c00e2e 	bgeu	r4,r7,10011dc4 <memset+0x100>
10011d8c:	1813883a 	mov	r9,r3
10011d90:	3811883a 	mov	r8,r7
10011d94:	010000c4 	movi	r4,3
10011d98:	49800015 	stw	r6,0(r9)
10011d9c:	423fff04 	addi	r8,r8,-4
10011da0:	4a400104 	addi	r9,r9,4
10011da4:	223ffc36 	bltu	r4,r8,10011d98 <__alt_data_end+0xf8011d98>
10011da8:	393fff04 	addi	r4,r7,-4
10011dac:	2008d0ba 	srli	r4,r4,2
10011db0:	39c000cc 	andi	r7,r7,3
10011db4:	21000044 	addi	r4,r4,1
10011db8:	2109883a 	add	r4,r4,r4
10011dbc:	2109883a 	add	r4,r4,r4
10011dc0:	1907883a 	add	r3,r3,r4
10011dc4:	38000526 	beq	r7,zero,10011ddc <memset+0x118>
10011dc8:	19cf883a 	add	r7,r3,r7
10011dcc:	19400005 	stb	r5,0(r3)
10011dd0:	18c00044 	addi	r3,r3,1
10011dd4:	38fffd1e 	bne	r7,r3,10011dcc <__alt_data_end+0xf8011dcc>
10011dd8:	f800283a 	ret
10011ddc:	f800283a 	ret
10011de0:	2007883a 	mov	r3,r4
10011de4:	300f883a 	mov	r7,r6
10011de8:	003fc706 	br	10011d08 <__alt_data_end+0xf8011d08>

10011dec <_Balloc>:
10011dec:	20801317 	ldw	r2,76(r4)
10011df0:	defffc04 	addi	sp,sp,-16
10011df4:	dc400115 	stw	r17,4(sp)
10011df8:	dc000015 	stw	r16,0(sp)
10011dfc:	dfc00315 	stw	ra,12(sp)
10011e00:	dc800215 	stw	r18,8(sp)
10011e04:	2023883a 	mov	r17,r4
10011e08:	2821883a 	mov	r16,r5
10011e0c:	10000f26 	beq	r2,zero,10011e4c <_Balloc+0x60>
10011e10:	8407883a 	add	r3,r16,r16
10011e14:	18c7883a 	add	r3,r3,r3
10011e18:	10c7883a 	add	r3,r2,r3
10011e1c:	18800017 	ldw	r2,0(r3)
10011e20:	10001126 	beq	r2,zero,10011e68 <_Balloc+0x7c>
10011e24:	11000017 	ldw	r4,0(r2)
10011e28:	19000015 	stw	r4,0(r3)
10011e2c:	10000415 	stw	zero,16(r2)
10011e30:	10000315 	stw	zero,12(r2)
10011e34:	dfc00317 	ldw	ra,12(sp)
10011e38:	dc800217 	ldw	r18,8(sp)
10011e3c:	dc400117 	ldw	r17,4(sp)
10011e40:	dc000017 	ldw	r16,0(sp)
10011e44:	dec00404 	addi	sp,sp,16
10011e48:	f800283a 	ret
10011e4c:	01800844 	movi	r6,33
10011e50:	01400104 	movi	r5,4
10011e54:	0014e940 	call	10014e94 <_calloc_r>
10011e58:	88801315 	stw	r2,76(r17)
10011e5c:	103fec1e 	bne	r2,zero,10011e10 <__alt_data_end+0xf8011e10>
10011e60:	0005883a 	mov	r2,zero
10011e64:	003ff306 	br	10011e34 <__alt_data_end+0xf8011e34>
10011e68:	01400044 	movi	r5,1
10011e6c:	2c24983a 	sll	r18,r5,r16
10011e70:	8809883a 	mov	r4,r17
10011e74:	91800144 	addi	r6,r18,5
10011e78:	318d883a 	add	r6,r6,r6
10011e7c:	318d883a 	add	r6,r6,r6
10011e80:	0014e940 	call	10014e94 <_calloc_r>
10011e84:	103ff626 	beq	r2,zero,10011e60 <__alt_data_end+0xf8011e60>
10011e88:	14000115 	stw	r16,4(r2)
10011e8c:	14800215 	stw	r18,8(r2)
10011e90:	003fe606 	br	10011e2c <__alt_data_end+0xf8011e2c>

10011e94 <_Bfree>:
10011e94:	28000826 	beq	r5,zero,10011eb8 <_Bfree+0x24>
10011e98:	28c00117 	ldw	r3,4(r5)
10011e9c:	20801317 	ldw	r2,76(r4)
10011ea0:	18c7883a 	add	r3,r3,r3
10011ea4:	18c7883a 	add	r3,r3,r3
10011ea8:	10c5883a 	add	r2,r2,r3
10011eac:	10c00017 	ldw	r3,0(r2)
10011eb0:	28c00015 	stw	r3,0(r5)
10011eb4:	11400015 	stw	r5,0(r2)
10011eb8:	f800283a 	ret

10011ebc <__multadd>:
10011ebc:	defff704 	addi	sp,sp,-36
10011ec0:	dc800215 	stw	r18,8(sp)
10011ec4:	2c800417 	ldw	r18,16(r5)
10011ec8:	dd800615 	stw	r22,24(sp)
10011ecc:	dd400515 	stw	r21,20(sp)
10011ed0:	dd000415 	stw	r20,16(sp)
10011ed4:	dcc00315 	stw	r19,12(sp)
10011ed8:	dc400115 	stw	r17,4(sp)
10011edc:	dc000015 	stw	r16,0(sp)
10011ee0:	dfc00815 	stw	ra,32(sp)
10011ee4:	ddc00715 	stw	r23,28(sp)
10011ee8:	2827883a 	mov	r19,r5
10011eec:	2029883a 	mov	r20,r4
10011ef0:	3023883a 	mov	r17,r6
10011ef4:	3821883a 	mov	r16,r7
10011ef8:	2d400504 	addi	r21,r5,20
10011efc:	002d883a 	mov	r22,zero
10011f00:	adc00017 	ldw	r23,0(r21)
10011f04:	880b883a 	mov	r5,r17
10011f08:	ad400104 	addi	r21,r21,4
10011f0c:	b93fffcc 	andi	r4,r23,65535
10011f10:	00096fc0 	call	100096fc <__mulsi3>
10011f14:	b808d43a 	srli	r4,r23,16
10011f18:	880b883a 	mov	r5,r17
10011f1c:	1421883a 	add	r16,r2,r16
10011f20:	00096fc0 	call	100096fc <__mulsi3>
10011f24:	800ed43a 	srli	r7,r16,16
10011f28:	80ffffcc 	andi	r3,r16,65535
10011f2c:	b5800044 	addi	r22,r22,1
10011f30:	11c5883a 	add	r2,r2,r7
10011f34:	100e943a 	slli	r7,r2,16
10011f38:	1020d43a 	srli	r16,r2,16
10011f3c:	38c7883a 	add	r3,r7,r3
10011f40:	a8ffff15 	stw	r3,-4(r21)
10011f44:	b4bfee16 	blt	r22,r18,10011f00 <__alt_data_end+0xf8011f00>
10011f48:	80000926 	beq	r16,zero,10011f70 <__multadd+0xb4>
10011f4c:	98800217 	ldw	r2,8(r19)
10011f50:	9080130e 	bge	r18,r2,10011fa0 <__multadd+0xe4>
10011f54:	90800144 	addi	r2,r18,5
10011f58:	1085883a 	add	r2,r2,r2
10011f5c:	1085883a 	add	r2,r2,r2
10011f60:	9885883a 	add	r2,r19,r2
10011f64:	14000015 	stw	r16,0(r2)
10011f68:	94800044 	addi	r18,r18,1
10011f6c:	9c800415 	stw	r18,16(r19)
10011f70:	9805883a 	mov	r2,r19
10011f74:	dfc00817 	ldw	ra,32(sp)
10011f78:	ddc00717 	ldw	r23,28(sp)
10011f7c:	dd800617 	ldw	r22,24(sp)
10011f80:	dd400517 	ldw	r21,20(sp)
10011f84:	dd000417 	ldw	r20,16(sp)
10011f88:	dcc00317 	ldw	r19,12(sp)
10011f8c:	dc800217 	ldw	r18,8(sp)
10011f90:	dc400117 	ldw	r17,4(sp)
10011f94:	dc000017 	ldw	r16,0(sp)
10011f98:	dec00904 	addi	sp,sp,36
10011f9c:	f800283a 	ret
10011fa0:	99400117 	ldw	r5,4(r19)
10011fa4:	a009883a 	mov	r4,r20
10011fa8:	29400044 	addi	r5,r5,1
10011fac:	0011dec0 	call	10011dec <_Balloc>
10011fb0:	99800417 	ldw	r6,16(r19)
10011fb4:	99400304 	addi	r5,r19,12
10011fb8:	11000304 	addi	r4,r2,12
10011fbc:	31800084 	addi	r6,r6,2
10011fc0:	318d883a 	add	r6,r6,r6
10011fc4:	318d883a 	add	r6,r6,r6
10011fc8:	1023883a 	mov	r17,r2
10011fcc:	000be2c0 	call	1000be2c <memcpy>
10011fd0:	98000a26 	beq	r19,zero,10011ffc <__multadd+0x140>
10011fd4:	98c00117 	ldw	r3,4(r19)
10011fd8:	a0801317 	ldw	r2,76(r20)
10011fdc:	18c7883a 	add	r3,r3,r3
10011fe0:	18c7883a 	add	r3,r3,r3
10011fe4:	10c5883a 	add	r2,r2,r3
10011fe8:	10c00017 	ldw	r3,0(r2)
10011fec:	98c00015 	stw	r3,0(r19)
10011ff0:	14c00015 	stw	r19,0(r2)
10011ff4:	8827883a 	mov	r19,r17
10011ff8:	003fd606 	br	10011f54 <__alt_data_end+0xf8011f54>
10011ffc:	8827883a 	mov	r19,r17
10012000:	003fd406 	br	10011f54 <__alt_data_end+0xf8011f54>

10012004 <__s2b>:
10012004:	defff904 	addi	sp,sp,-28
10012008:	dc400115 	stw	r17,4(sp)
1001200c:	dc000015 	stw	r16,0(sp)
10012010:	2023883a 	mov	r17,r4
10012014:	2821883a 	mov	r16,r5
10012018:	39000204 	addi	r4,r7,8
1001201c:	01400244 	movi	r5,9
10012020:	dcc00315 	stw	r19,12(sp)
10012024:	dc800215 	stw	r18,8(sp)
10012028:	dfc00615 	stw	ra,24(sp)
1001202c:	dd400515 	stw	r21,20(sp)
10012030:	dd000415 	stw	r20,16(sp)
10012034:	3825883a 	mov	r18,r7
10012038:	3027883a 	mov	r19,r6
1001203c:	00095480 	call	10009548 <__divsi3>
10012040:	00c00044 	movi	r3,1
10012044:	000b883a 	mov	r5,zero
10012048:	1880030e 	bge	r3,r2,10012058 <__s2b+0x54>
1001204c:	18c7883a 	add	r3,r3,r3
10012050:	29400044 	addi	r5,r5,1
10012054:	18bffd16 	blt	r3,r2,1001204c <__alt_data_end+0xf801204c>
10012058:	8809883a 	mov	r4,r17
1001205c:	0011dec0 	call	10011dec <_Balloc>
10012060:	d8c00717 	ldw	r3,28(sp)
10012064:	10c00515 	stw	r3,20(r2)
10012068:	00c00044 	movi	r3,1
1001206c:	10c00415 	stw	r3,16(r2)
10012070:	00c00244 	movi	r3,9
10012074:	1cc0210e 	bge	r3,r19,100120fc <__s2b+0xf8>
10012078:	80eb883a 	add	r21,r16,r3
1001207c:	a829883a 	mov	r20,r21
10012080:	84e1883a 	add	r16,r16,r19
10012084:	a1c00007 	ldb	r7,0(r20)
10012088:	01800284 	movi	r6,10
1001208c:	a5000044 	addi	r20,r20,1
10012090:	100b883a 	mov	r5,r2
10012094:	39fff404 	addi	r7,r7,-48
10012098:	8809883a 	mov	r4,r17
1001209c:	0011ebc0 	call	10011ebc <__multadd>
100120a0:	a43ff81e 	bne	r20,r16,10012084 <__alt_data_end+0xf8012084>
100120a4:	ace1883a 	add	r16,r21,r19
100120a8:	843ffe04 	addi	r16,r16,-8
100120ac:	9c800a0e 	bge	r19,r18,100120d8 <__s2b+0xd4>
100120b0:	94e5c83a 	sub	r18,r18,r19
100120b4:	84a5883a 	add	r18,r16,r18
100120b8:	81c00007 	ldb	r7,0(r16)
100120bc:	01800284 	movi	r6,10
100120c0:	84000044 	addi	r16,r16,1
100120c4:	100b883a 	mov	r5,r2
100120c8:	39fff404 	addi	r7,r7,-48
100120cc:	8809883a 	mov	r4,r17
100120d0:	0011ebc0 	call	10011ebc <__multadd>
100120d4:	84bff81e 	bne	r16,r18,100120b8 <__alt_data_end+0xf80120b8>
100120d8:	dfc00617 	ldw	ra,24(sp)
100120dc:	dd400517 	ldw	r21,20(sp)
100120e0:	dd000417 	ldw	r20,16(sp)
100120e4:	dcc00317 	ldw	r19,12(sp)
100120e8:	dc800217 	ldw	r18,8(sp)
100120ec:	dc400117 	ldw	r17,4(sp)
100120f0:	dc000017 	ldw	r16,0(sp)
100120f4:	dec00704 	addi	sp,sp,28
100120f8:	f800283a 	ret
100120fc:	84000284 	addi	r16,r16,10
10012100:	1827883a 	mov	r19,r3
10012104:	003fe906 	br	100120ac <__alt_data_end+0xf80120ac>

10012108 <__hi0bits>:
10012108:	20bfffec 	andhi	r2,r4,65535
1001210c:	1000141e 	bne	r2,zero,10012160 <__hi0bits+0x58>
10012110:	2008943a 	slli	r4,r4,16
10012114:	00800404 	movi	r2,16
10012118:	20ffc02c 	andhi	r3,r4,65280
1001211c:	1800021e 	bne	r3,zero,10012128 <__hi0bits+0x20>
10012120:	2008923a 	slli	r4,r4,8
10012124:	10800204 	addi	r2,r2,8
10012128:	20fc002c 	andhi	r3,r4,61440
1001212c:	1800021e 	bne	r3,zero,10012138 <__hi0bits+0x30>
10012130:	2008913a 	slli	r4,r4,4
10012134:	10800104 	addi	r2,r2,4
10012138:	20f0002c 	andhi	r3,r4,49152
1001213c:	1800031e 	bne	r3,zero,1001214c <__hi0bits+0x44>
10012140:	2109883a 	add	r4,r4,r4
10012144:	10800084 	addi	r2,r2,2
10012148:	2109883a 	add	r4,r4,r4
1001214c:	20000316 	blt	r4,zero,1001215c <__hi0bits+0x54>
10012150:	2110002c 	andhi	r4,r4,16384
10012154:	2000041e 	bne	r4,zero,10012168 <__hi0bits+0x60>
10012158:	00800804 	movi	r2,32
1001215c:	f800283a 	ret
10012160:	0005883a 	mov	r2,zero
10012164:	003fec06 	br	10012118 <__alt_data_end+0xf8012118>
10012168:	10800044 	addi	r2,r2,1
1001216c:	f800283a 	ret

10012170 <__lo0bits>:
10012170:	20c00017 	ldw	r3,0(r4)
10012174:	188001cc 	andi	r2,r3,7
10012178:	10000826 	beq	r2,zero,1001219c <__lo0bits+0x2c>
1001217c:	1880004c 	andi	r2,r3,1
10012180:	1000211e 	bne	r2,zero,10012208 <__lo0bits+0x98>
10012184:	1880008c 	andi	r2,r3,2
10012188:	1000211e 	bne	r2,zero,10012210 <__lo0bits+0xa0>
1001218c:	1806d0ba 	srli	r3,r3,2
10012190:	00800084 	movi	r2,2
10012194:	20c00015 	stw	r3,0(r4)
10012198:	f800283a 	ret
1001219c:	18bfffcc 	andi	r2,r3,65535
100121a0:	10001326 	beq	r2,zero,100121f0 <__lo0bits+0x80>
100121a4:	0005883a 	mov	r2,zero
100121a8:	19403fcc 	andi	r5,r3,255
100121ac:	2800021e 	bne	r5,zero,100121b8 <__lo0bits+0x48>
100121b0:	1806d23a 	srli	r3,r3,8
100121b4:	10800204 	addi	r2,r2,8
100121b8:	194003cc 	andi	r5,r3,15
100121bc:	2800021e 	bne	r5,zero,100121c8 <__lo0bits+0x58>
100121c0:	1806d13a 	srli	r3,r3,4
100121c4:	10800104 	addi	r2,r2,4
100121c8:	194000cc 	andi	r5,r3,3
100121cc:	2800021e 	bne	r5,zero,100121d8 <__lo0bits+0x68>
100121d0:	1806d0ba 	srli	r3,r3,2
100121d4:	10800084 	addi	r2,r2,2
100121d8:	1940004c 	andi	r5,r3,1
100121dc:	2800081e 	bne	r5,zero,10012200 <__lo0bits+0x90>
100121e0:	1806d07a 	srli	r3,r3,1
100121e4:	1800051e 	bne	r3,zero,100121fc <__lo0bits+0x8c>
100121e8:	00800804 	movi	r2,32
100121ec:	f800283a 	ret
100121f0:	1806d43a 	srli	r3,r3,16
100121f4:	00800404 	movi	r2,16
100121f8:	003feb06 	br	100121a8 <__alt_data_end+0xf80121a8>
100121fc:	10800044 	addi	r2,r2,1
10012200:	20c00015 	stw	r3,0(r4)
10012204:	f800283a 	ret
10012208:	0005883a 	mov	r2,zero
1001220c:	f800283a 	ret
10012210:	1806d07a 	srli	r3,r3,1
10012214:	00800044 	movi	r2,1
10012218:	20c00015 	stw	r3,0(r4)
1001221c:	f800283a 	ret

10012220 <__i2b>:
10012220:	defffd04 	addi	sp,sp,-12
10012224:	dc000015 	stw	r16,0(sp)
10012228:	04000044 	movi	r16,1
1001222c:	dc400115 	stw	r17,4(sp)
10012230:	2823883a 	mov	r17,r5
10012234:	800b883a 	mov	r5,r16
10012238:	dfc00215 	stw	ra,8(sp)
1001223c:	0011dec0 	call	10011dec <_Balloc>
10012240:	14400515 	stw	r17,20(r2)
10012244:	14000415 	stw	r16,16(r2)
10012248:	dfc00217 	ldw	ra,8(sp)
1001224c:	dc400117 	ldw	r17,4(sp)
10012250:	dc000017 	ldw	r16,0(sp)
10012254:	dec00304 	addi	sp,sp,12
10012258:	f800283a 	ret

1001225c <__multiply>:
1001225c:	deffef04 	addi	sp,sp,-68
10012260:	dc400815 	stw	r17,32(sp)
10012264:	dc000715 	stw	r16,28(sp)
10012268:	34400417 	ldw	r17,16(r6)
1001226c:	2c000417 	ldw	r16,16(r5)
10012270:	dd800d15 	stw	r22,52(sp)
10012274:	dc800915 	stw	r18,36(sp)
10012278:	dfc01015 	stw	ra,64(sp)
1001227c:	df000f15 	stw	fp,60(sp)
10012280:	ddc00e15 	stw	r23,56(sp)
10012284:	dd400c15 	stw	r21,48(sp)
10012288:	dd000b15 	stw	r20,44(sp)
1001228c:	dcc00a15 	stw	r19,40(sp)
10012290:	2825883a 	mov	r18,r5
10012294:	302d883a 	mov	r22,r6
10012298:	8440050e 	bge	r16,r17,100122b0 <__multiply+0x54>
1001229c:	8007883a 	mov	r3,r16
100122a0:	3025883a 	mov	r18,r6
100122a4:	8821883a 	mov	r16,r17
100122a8:	282d883a 	mov	r22,r5
100122ac:	1823883a 	mov	r17,r3
100122b0:	90800217 	ldw	r2,8(r18)
100122b4:	8447883a 	add	r3,r16,r17
100122b8:	d8c00215 	stw	r3,8(sp)
100122bc:	91400117 	ldw	r5,4(r18)
100122c0:	10c0010e 	bge	r2,r3,100122c8 <__multiply+0x6c>
100122c4:	29400044 	addi	r5,r5,1
100122c8:	0011dec0 	call	10011dec <_Balloc>
100122cc:	d8c00217 	ldw	r3,8(sp)
100122d0:	d8800615 	stw	r2,24(sp)
100122d4:	18eb883a 	add	r21,r3,r3
100122d8:	ad6b883a 	add	r21,r21,r21
100122dc:	10c00504 	addi	r3,r2,20
100122e0:	1d6b883a 	add	r21,r3,r21
100122e4:	d8c00115 	stw	r3,4(sp)
100122e8:	dd400315 	stw	r21,12(sp)
100122ec:	1805883a 	mov	r2,r3
100122f0:	1d40042e 	bgeu	r3,r21,10012304 <__multiply+0xa8>
100122f4:	d8c00317 	ldw	r3,12(sp)
100122f8:	10000015 	stw	zero,0(r2)
100122fc:	10800104 	addi	r2,r2,4
10012300:	10fffc36 	bltu	r2,r3,100122f4 <__alt_data_end+0xf80122f4>
10012304:	8c63883a 	add	r17,r17,r17
10012308:	b5800504 	addi	r22,r22,20
1001230c:	8c63883a 	add	r17,r17,r17
10012310:	94800504 	addi	r18,r18,20
10012314:	8421883a 	add	r16,r16,r16
10012318:	b463883a 	add	r17,r22,r17
1001231c:	8421883a 	add	r16,r16,r16
10012320:	dd800015 	stw	r22,0(sp)
10012324:	dc800415 	stw	r18,16(sp)
10012328:	dc400515 	stw	r17,20(sp)
1001232c:	9429883a 	add	r20,r18,r16
10012330:	b4404f2e 	bgeu	r22,r17,10012470 <__multiply+0x214>
10012334:	d8c00017 	ldw	r3,0(sp)
10012338:	1c800017 	ldw	r18,0(r3)
1001233c:	947fffcc 	andi	r17,r18,65535
10012340:	88001e26 	beq	r17,zero,100123bc <__multiply+0x160>
10012344:	dd800117 	ldw	r22,4(sp)
10012348:	dd400417 	ldw	r21,16(sp)
1001234c:	0027883a 	mov	r19,zero
10012350:	ac800017 	ldw	r18,0(r21)
10012354:	b4000017 	ldw	r16,0(r22)
10012358:	880b883a 	mov	r5,r17
1001235c:	913fffcc 	andi	r4,r18,65535
10012360:	00096fc0 	call	100096fc <__mulsi3>
10012364:	9008d43a 	srli	r4,r18,16
10012368:	84bfffcc 	andi	r18,r16,65535
1001236c:	1485883a 	add	r2,r2,r18
10012370:	14e5883a 	add	r18,r2,r19
10012374:	8020d43a 	srli	r16,r16,16
10012378:	9026d43a 	srli	r19,r18,16
1001237c:	880b883a 	mov	r5,r17
10012380:	00096fc0 	call	100096fc <__mulsi3>
10012384:	1405883a 	add	r2,r2,r16
10012388:	14e1883a 	add	r16,r2,r19
1001238c:	90ffffcc 	andi	r3,r18,65535
10012390:	8024943a 	slli	r18,r16,16
10012394:	ad400104 	addi	r21,r21,4
10012398:	b005883a 	mov	r2,r22
1001239c:	90c6b03a 	or	r3,r18,r3
100123a0:	b0c00015 	stw	r3,0(r22)
100123a4:	8026d43a 	srli	r19,r16,16
100123a8:	b5800104 	addi	r22,r22,4
100123ac:	ad3fe836 	bltu	r21,r20,10012350 <__alt_data_end+0xf8012350>
100123b0:	d8c00017 	ldw	r3,0(sp)
100123b4:	14c00115 	stw	r19,4(r2)
100123b8:	1c800017 	ldw	r18,0(r3)
100123bc:	9024d43a 	srli	r18,r18,16
100123c0:	90002226 	beq	r18,zero,1001244c <__multiply+0x1f0>
100123c4:	d8c00117 	ldw	r3,4(sp)
100123c8:	dd800417 	ldw	r22,16(sp)
100123cc:	002f883a 	mov	r23,zero
100123d0:	1f000017 	ldw	fp,0(r3)
100123d4:	1823883a 	mov	r17,r3
100123d8:	182b883a 	mov	r21,r3
100123dc:	e021883a 	mov	r16,fp
100123e0:	00000106 	br	100123e8 <__multiply+0x18c>
100123e4:	982b883a 	mov	r21,r19
100123e8:	b100000b 	ldhu	r4,0(r22)
100123ec:	8020d43a 	srli	r16,r16,16
100123f0:	900b883a 	mov	r5,r18
100123f4:	00096fc0 	call	100096fc <__mulsi3>
100123f8:	1405883a 	add	r2,r2,r16
100123fc:	15ef883a 	add	r23,r2,r23
10012400:	b804943a 	slli	r2,r23,16
10012404:	e0ffffcc 	andi	r3,fp,65535
10012408:	8c400104 	addi	r17,r17,4
1001240c:	10c6b03a 	or	r3,r2,r3
10012410:	88ffff15 	stw	r3,-4(r17)
10012414:	b5800104 	addi	r22,r22,4
10012418:	b13fff17 	ldw	r4,-4(r22)
1001241c:	acc00104 	addi	r19,r21,4
10012420:	900b883a 	mov	r5,r18
10012424:	2008d43a 	srli	r4,r4,16
10012428:	9c000017 	ldw	r16,0(r19)
1001242c:	00096fc0 	call	100096fc <__mulsi3>
10012430:	b806d43a 	srli	r3,r23,16
10012434:	813fffcc 	andi	r4,r16,65535
10012438:	1105883a 	add	r2,r2,r4
1001243c:	10f9883a 	add	fp,r2,r3
10012440:	e02ed43a 	srli	r23,fp,16
10012444:	b53fe736 	bltu	r22,r20,100123e4 <__alt_data_end+0xf80123e4>
10012448:	af000115 	stw	fp,4(r21)
1001244c:	d8c00017 	ldw	r3,0(sp)
10012450:	d9000517 	ldw	r4,20(sp)
10012454:	18c00104 	addi	r3,r3,4
10012458:	d8c00015 	stw	r3,0(sp)
1001245c:	d8c00117 	ldw	r3,4(sp)
10012460:	18c00104 	addi	r3,r3,4
10012464:	d8c00115 	stw	r3,4(sp)
10012468:	d8c00017 	ldw	r3,0(sp)
1001246c:	193fb136 	bltu	r3,r4,10012334 <__alt_data_end+0xf8012334>
10012470:	d8c00217 	ldw	r3,8(sp)
10012474:	00c00c0e 	bge	zero,r3,100124a8 <__multiply+0x24c>
10012478:	d8c00317 	ldw	r3,12(sp)
1001247c:	18bfff17 	ldw	r2,-4(r3)
10012480:	1d7fff04 	addi	r21,r3,-4
10012484:	10000326 	beq	r2,zero,10012494 <__multiply+0x238>
10012488:	00000706 	br	100124a8 <__multiply+0x24c>
1001248c:	a8800017 	ldw	r2,0(r21)
10012490:	1000051e 	bne	r2,zero,100124a8 <__multiply+0x24c>
10012494:	d8c00217 	ldw	r3,8(sp)
10012498:	ad7fff04 	addi	r21,r21,-4
1001249c:	18ffffc4 	addi	r3,r3,-1
100124a0:	d8c00215 	stw	r3,8(sp)
100124a4:	183ff91e 	bne	r3,zero,1001248c <__alt_data_end+0xf801248c>
100124a8:	d8c00617 	ldw	r3,24(sp)
100124ac:	d9000217 	ldw	r4,8(sp)
100124b0:	1805883a 	mov	r2,r3
100124b4:	19000415 	stw	r4,16(r3)
100124b8:	dfc01017 	ldw	ra,64(sp)
100124bc:	df000f17 	ldw	fp,60(sp)
100124c0:	ddc00e17 	ldw	r23,56(sp)
100124c4:	dd800d17 	ldw	r22,52(sp)
100124c8:	dd400c17 	ldw	r21,48(sp)
100124cc:	dd000b17 	ldw	r20,44(sp)
100124d0:	dcc00a17 	ldw	r19,40(sp)
100124d4:	dc800917 	ldw	r18,36(sp)
100124d8:	dc400817 	ldw	r17,32(sp)
100124dc:	dc000717 	ldw	r16,28(sp)
100124e0:	dec01104 	addi	sp,sp,68
100124e4:	f800283a 	ret

100124e8 <__pow5mult>:
100124e8:	defffa04 	addi	sp,sp,-24
100124ec:	dcc00315 	stw	r19,12(sp)
100124f0:	dc000015 	stw	r16,0(sp)
100124f4:	dfc00515 	stw	ra,20(sp)
100124f8:	dd000415 	stw	r20,16(sp)
100124fc:	dc800215 	stw	r18,8(sp)
10012500:	dc400115 	stw	r17,4(sp)
10012504:	308000cc 	andi	r2,r6,3
10012508:	3021883a 	mov	r16,r6
1001250c:	2027883a 	mov	r19,r4
10012510:	10002f1e 	bne	r2,zero,100125d0 <__pow5mult+0xe8>
10012514:	2825883a 	mov	r18,r5
10012518:	8021d0ba 	srai	r16,r16,2
1001251c:	80001a26 	beq	r16,zero,10012588 <__pow5mult+0xa0>
10012520:	9c401217 	ldw	r17,72(r19)
10012524:	8800061e 	bne	r17,zero,10012540 <__pow5mult+0x58>
10012528:	00003406 	br	100125fc <__pow5mult+0x114>
1001252c:	8021d07a 	srai	r16,r16,1
10012530:	80001526 	beq	r16,zero,10012588 <__pow5mult+0xa0>
10012534:	88800017 	ldw	r2,0(r17)
10012538:	10001c26 	beq	r2,zero,100125ac <__pow5mult+0xc4>
1001253c:	1023883a 	mov	r17,r2
10012540:	8080004c 	andi	r2,r16,1
10012544:	103ff926 	beq	r2,zero,1001252c <__alt_data_end+0xf801252c>
10012548:	880d883a 	mov	r6,r17
1001254c:	900b883a 	mov	r5,r18
10012550:	9809883a 	mov	r4,r19
10012554:	001225c0 	call	1001225c <__multiply>
10012558:	90001b26 	beq	r18,zero,100125c8 <__pow5mult+0xe0>
1001255c:	91000117 	ldw	r4,4(r18)
10012560:	98c01317 	ldw	r3,76(r19)
10012564:	8021d07a 	srai	r16,r16,1
10012568:	2109883a 	add	r4,r4,r4
1001256c:	2109883a 	add	r4,r4,r4
10012570:	1907883a 	add	r3,r3,r4
10012574:	19000017 	ldw	r4,0(r3)
10012578:	91000015 	stw	r4,0(r18)
1001257c:	1c800015 	stw	r18,0(r3)
10012580:	1025883a 	mov	r18,r2
10012584:	803feb1e 	bne	r16,zero,10012534 <__alt_data_end+0xf8012534>
10012588:	9005883a 	mov	r2,r18
1001258c:	dfc00517 	ldw	ra,20(sp)
10012590:	dd000417 	ldw	r20,16(sp)
10012594:	dcc00317 	ldw	r19,12(sp)
10012598:	dc800217 	ldw	r18,8(sp)
1001259c:	dc400117 	ldw	r17,4(sp)
100125a0:	dc000017 	ldw	r16,0(sp)
100125a4:	dec00604 	addi	sp,sp,24
100125a8:	f800283a 	ret
100125ac:	880d883a 	mov	r6,r17
100125b0:	880b883a 	mov	r5,r17
100125b4:	9809883a 	mov	r4,r19
100125b8:	001225c0 	call	1001225c <__multiply>
100125bc:	88800015 	stw	r2,0(r17)
100125c0:	10000015 	stw	zero,0(r2)
100125c4:	003fdd06 	br	1001253c <__alt_data_end+0xf801253c>
100125c8:	1025883a 	mov	r18,r2
100125cc:	003fd706 	br	1001252c <__alt_data_end+0xf801252c>
100125d0:	10bfffc4 	addi	r2,r2,-1
100125d4:	1085883a 	add	r2,r2,r2
100125d8:	00c400b4 	movhi	r3,4098
100125dc:	18e49804 	addi	r3,r3,-28064
100125e0:	1085883a 	add	r2,r2,r2
100125e4:	1885883a 	add	r2,r3,r2
100125e8:	11800017 	ldw	r6,0(r2)
100125ec:	000f883a 	mov	r7,zero
100125f0:	0011ebc0 	call	10011ebc <__multadd>
100125f4:	1025883a 	mov	r18,r2
100125f8:	003fc706 	br	10012518 <__alt_data_end+0xf8012518>
100125fc:	05000044 	movi	r20,1
10012600:	a00b883a 	mov	r5,r20
10012604:	9809883a 	mov	r4,r19
10012608:	0011dec0 	call	10011dec <_Balloc>
1001260c:	1023883a 	mov	r17,r2
10012610:	00809c44 	movi	r2,625
10012614:	88800515 	stw	r2,20(r17)
10012618:	8d000415 	stw	r20,16(r17)
1001261c:	9c401215 	stw	r17,72(r19)
10012620:	88000015 	stw	zero,0(r17)
10012624:	003fc606 	br	10012540 <__alt_data_end+0xf8012540>

10012628 <__lshift>:
10012628:	defff904 	addi	sp,sp,-28
1001262c:	dd400515 	stw	r21,20(sp)
10012630:	dcc00315 	stw	r19,12(sp)
10012634:	302bd17a 	srai	r21,r6,5
10012638:	2cc00417 	ldw	r19,16(r5)
1001263c:	28800217 	ldw	r2,8(r5)
10012640:	dd000415 	stw	r20,16(sp)
10012644:	ace7883a 	add	r19,r21,r19
10012648:	dc800215 	stw	r18,8(sp)
1001264c:	dc400115 	stw	r17,4(sp)
10012650:	dc000015 	stw	r16,0(sp)
10012654:	dfc00615 	stw	ra,24(sp)
10012658:	9c000044 	addi	r16,r19,1
1001265c:	2823883a 	mov	r17,r5
10012660:	3029883a 	mov	r20,r6
10012664:	2025883a 	mov	r18,r4
10012668:	29400117 	ldw	r5,4(r5)
1001266c:	1400030e 	bge	r2,r16,1001267c <__lshift+0x54>
10012670:	1085883a 	add	r2,r2,r2
10012674:	29400044 	addi	r5,r5,1
10012678:	143ffd16 	blt	r2,r16,10012670 <__alt_data_end+0xf8012670>
1001267c:	9009883a 	mov	r4,r18
10012680:	0011dec0 	call	10011dec <_Balloc>
10012684:	10c00504 	addi	r3,r2,20
10012688:	0540070e 	bge	zero,r21,100126a8 <__lshift+0x80>
1001268c:	ad6b883a 	add	r21,r21,r21
10012690:	ad6b883a 	add	r21,r21,r21
10012694:	1809883a 	mov	r4,r3
10012698:	1d47883a 	add	r3,r3,r21
1001269c:	20000015 	stw	zero,0(r4)
100126a0:	21000104 	addi	r4,r4,4
100126a4:	193ffd1e 	bne	r3,r4,1001269c <__alt_data_end+0xf801269c>
100126a8:	8a000417 	ldw	r8,16(r17)
100126ac:	89000504 	addi	r4,r17,20
100126b0:	a18007cc 	andi	r6,r20,31
100126b4:	4211883a 	add	r8,r8,r8
100126b8:	4211883a 	add	r8,r8,r8
100126bc:	2211883a 	add	r8,r4,r8
100126c0:	30002326 	beq	r6,zero,10012750 <__lshift+0x128>
100126c4:	02400804 	movi	r9,32
100126c8:	4993c83a 	sub	r9,r9,r6
100126cc:	000b883a 	mov	r5,zero
100126d0:	21c00017 	ldw	r7,0(r4)
100126d4:	1815883a 	mov	r10,r3
100126d8:	18c00104 	addi	r3,r3,4
100126dc:	398e983a 	sll	r7,r7,r6
100126e0:	21000104 	addi	r4,r4,4
100126e4:	394ab03a 	or	r5,r7,r5
100126e8:	197fff15 	stw	r5,-4(r3)
100126ec:	217fff17 	ldw	r5,-4(r4)
100126f0:	2a4ad83a 	srl	r5,r5,r9
100126f4:	223ff636 	bltu	r4,r8,100126d0 <__alt_data_end+0xf80126d0>
100126f8:	51400115 	stw	r5,4(r10)
100126fc:	28001a1e 	bne	r5,zero,10012768 <__lshift+0x140>
10012700:	843fffc4 	addi	r16,r16,-1
10012704:	14000415 	stw	r16,16(r2)
10012708:	88000826 	beq	r17,zero,1001272c <__lshift+0x104>
1001270c:	89000117 	ldw	r4,4(r17)
10012710:	90c01317 	ldw	r3,76(r18)
10012714:	2109883a 	add	r4,r4,r4
10012718:	2109883a 	add	r4,r4,r4
1001271c:	1907883a 	add	r3,r3,r4
10012720:	19000017 	ldw	r4,0(r3)
10012724:	89000015 	stw	r4,0(r17)
10012728:	1c400015 	stw	r17,0(r3)
1001272c:	dfc00617 	ldw	ra,24(sp)
10012730:	dd400517 	ldw	r21,20(sp)
10012734:	dd000417 	ldw	r20,16(sp)
10012738:	dcc00317 	ldw	r19,12(sp)
1001273c:	dc800217 	ldw	r18,8(sp)
10012740:	dc400117 	ldw	r17,4(sp)
10012744:	dc000017 	ldw	r16,0(sp)
10012748:	dec00704 	addi	sp,sp,28
1001274c:	f800283a 	ret
10012750:	21400017 	ldw	r5,0(r4)
10012754:	18c00104 	addi	r3,r3,4
10012758:	21000104 	addi	r4,r4,4
1001275c:	197fff15 	stw	r5,-4(r3)
10012760:	223ffb36 	bltu	r4,r8,10012750 <__alt_data_end+0xf8012750>
10012764:	003fe606 	br	10012700 <__alt_data_end+0xf8012700>
10012768:	9c000084 	addi	r16,r19,2
1001276c:	003fe406 	br	10012700 <__alt_data_end+0xf8012700>

10012770 <__mcmp>:
10012770:	20800417 	ldw	r2,16(r4)
10012774:	28c00417 	ldw	r3,16(r5)
10012778:	10c5c83a 	sub	r2,r2,r3
1001277c:	1000111e 	bne	r2,zero,100127c4 <__mcmp+0x54>
10012780:	18c7883a 	add	r3,r3,r3
10012784:	18c7883a 	add	r3,r3,r3
10012788:	21000504 	addi	r4,r4,20
1001278c:	29400504 	addi	r5,r5,20
10012790:	20c5883a 	add	r2,r4,r3
10012794:	28cb883a 	add	r5,r5,r3
10012798:	00000106 	br	100127a0 <__mcmp+0x30>
1001279c:	20800a2e 	bgeu	r4,r2,100127c8 <__mcmp+0x58>
100127a0:	10bfff04 	addi	r2,r2,-4
100127a4:	297fff04 	addi	r5,r5,-4
100127a8:	11800017 	ldw	r6,0(r2)
100127ac:	28c00017 	ldw	r3,0(r5)
100127b0:	30fffa26 	beq	r6,r3,1001279c <__alt_data_end+0xf801279c>
100127b4:	30c00236 	bltu	r6,r3,100127c0 <__mcmp+0x50>
100127b8:	00800044 	movi	r2,1
100127bc:	f800283a 	ret
100127c0:	00bfffc4 	movi	r2,-1
100127c4:	f800283a 	ret
100127c8:	0005883a 	mov	r2,zero
100127cc:	f800283a 	ret

100127d0 <__mdiff>:
100127d0:	28c00417 	ldw	r3,16(r5)
100127d4:	30800417 	ldw	r2,16(r6)
100127d8:	defffa04 	addi	sp,sp,-24
100127dc:	dcc00315 	stw	r19,12(sp)
100127e0:	dc800215 	stw	r18,8(sp)
100127e4:	dfc00515 	stw	ra,20(sp)
100127e8:	dd000415 	stw	r20,16(sp)
100127ec:	dc400115 	stw	r17,4(sp)
100127f0:	dc000015 	stw	r16,0(sp)
100127f4:	1887c83a 	sub	r3,r3,r2
100127f8:	2825883a 	mov	r18,r5
100127fc:	3027883a 	mov	r19,r6
10012800:	1800141e 	bne	r3,zero,10012854 <__mdiff+0x84>
10012804:	1085883a 	add	r2,r2,r2
10012808:	1085883a 	add	r2,r2,r2
1001280c:	2a000504 	addi	r8,r5,20
10012810:	34000504 	addi	r16,r6,20
10012814:	4087883a 	add	r3,r8,r2
10012818:	8085883a 	add	r2,r16,r2
1001281c:	00000106 	br	10012824 <__mdiff+0x54>
10012820:	40c0592e 	bgeu	r8,r3,10012988 <__mdiff+0x1b8>
10012824:	18ffff04 	addi	r3,r3,-4
10012828:	10bfff04 	addi	r2,r2,-4
1001282c:	19c00017 	ldw	r7,0(r3)
10012830:	11400017 	ldw	r5,0(r2)
10012834:	397ffa26 	beq	r7,r5,10012820 <__alt_data_end+0xf8012820>
10012838:	3940592e 	bgeu	r7,r5,100129a0 <__mdiff+0x1d0>
1001283c:	9005883a 	mov	r2,r18
10012840:	4023883a 	mov	r17,r8
10012844:	9825883a 	mov	r18,r19
10012848:	05000044 	movi	r20,1
1001284c:	1027883a 	mov	r19,r2
10012850:	00000406 	br	10012864 <__mdiff+0x94>
10012854:	18005616 	blt	r3,zero,100129b0 <__mdiff+0x1e0>
10012858:	34400504 	addi	r17,r6,20
1001285c:	2c000504 	addi	r16,r5,20
10012860:	0029883a 	mov	r20,zero
10012864:	91400117 	ldw	r5,4(r18)
10012868:	0011dec0 	call	10011dec <_Balloc>
1001286c:	92400417 	ldw	r9,16(r18)
10012870:	9b000417 	ldw	r12,16(r19)
10012874:	12c00504 	addi	r11,r2,20
10012878:	4a51883a 	add	r8,r9,r9
1001287c:	6319883a 	add	r12,r12,r12
10012880:	4211883a 	add	r8,r8,r8
10012884:	6319883a 	add	r12,r12,r12
10012888:	15000315 	stw	r20,12(r2)
1001288c:	8211883a 	add	r8,r16,r8
10012890:	8b19883a 	add	r12,r17,r12
10012894:	0007883a 	mov	r3,zero
10012898:	81400017 	ldw	r5,0(r16)
1001289c:	89c00017 	ldw	r7,0(r17)
100128a0:	59800104 	addi	r6,r11,4
100128a4:	293fffcc 	andi	r4,r5,65535
100128a8:	20c7883a 	add	r3,r4,r3
100128ac:	393fffcc 	andi	r4,r7,65535
100128b0:	1909c83a 	sub	r4,r3,r4
100128b4:	280ad43a 	srli	r5,r5,16
100128b8:	380ed43a 	srli	r7,r7,16
100128bc:	2007d43a 	srai	r3,r4,16
100128c0:	213fffcc 	andi	r4,r4,65535
100128c4:	29cbc83a 	sub	r5,r5,r7
100128c8:	28c7883a 	add	r3,r5,r3
100128cc:	180a943a 	slli	r5,r3,16
100128d0:	8c400104 	addi	r17,r17,4
100128d4:	84000104 	addi	r16,r16,4
100128d8:	2908b03a 	or	r4,r5,r4
100128dc:	59000015 	stw	r4,0(r11)
100128e0:	1807d43a 	srai	r3,r3,16
100128e4:	3015883a 	mov	r10,r6
100128e8:	3017883a 	mov	r11,r6
100128ec:	8b3fea36 	bltu	r17,r12,10012898 <__alt_data_end+0xf8012898>
100128f0:	8200162e 	bgeu	r16,r8,1001294c <__mdiff+0x17c>
100128f4:	8017883a 	mov	r11,r16
100128f8:	59400017 	ldw	r5,0(r11)
100128fc:	31800104 	addi	r6,r6,4
10012900:	5ac00104 	addi	r11,r11,4
10012904:	293fffcc 	andi	r4,r5,65535
10012908:	20c7883a 	add	r3,r4,r3
1001290c:	280ed43a 	srli	r7,r5,16
10012910:	180bd43a 	srai	r5,r3,16
10012914:	193fffcc 	andi	r4,r3,65535
10012918:	3947883a 	add	r3,r7,r5
1001291c:	180a943a 	slli	r5,r3,16
10012920:	1807d43a 	srai	r3,r3,16
10012924:	2908b03a 	or	r4,r5,r4
10012928:	313fff15 	stw	r4,-4(r6)
1001292c:	5a3ff236 	bltu	r11,r8,100128f8 <__alt_data_end+0xf80128f8>
10012930:	0406303a 	nor	r3,zero,r16
10012934:	1a07883a 	add	r3,r3,r8
10012938:	1806d0ba 	srli	r3,r3,2
1001293c:	18c00044 	addi	r3,r3,1
10012940:	18c7883a 	add	r3,r3,r3
10012944:	18c7883a 	add	r3,r3,r3
10012948:	50d5883a 	add	r10,r10,r3
1001294c:	50ffff04 	addi	r3,r10,-4
10012950:	2000041e 	bne	r4,zero,10012964 <__mdiff+0x194>
10012954:	18ffff04 	addi	r3,r3,-4
10012958:	19000017 	ldw	r4,0(r3)
1001295c:	4a7fffc4 	addi	r9,r9,-1
10012960:	203ffc26 	beq	r4,zero,10012954 <__alt_data_end+0xf8012954>
10012964:	12400415 	stw	r9,16(r2)
10012968:	dfc00517 	ldw	ra,20(sp)
1001296c:	dd000417 	ldw	r20,16(sp)
10012970:	dcc00317 	ldw	r19,12(sp)
10012974:	dc800217 	ldw	r18,8(sp)
10012978:	dc400117 	ldw	r17,4(sp)
1001297c:	dc000017 	ldw	r16,0(sp)
10012980:	dec00604 	addi	sp,sp,24
10012984:	f800283a 	ret
10012988:	000b883a 	mov	r5,zero
1001298c:	0011dec0 	call	10011dec <_Balloc>
10012990:	00c00044 	movi	r3,1
10012994:	10c00415 	stw	r3,16(r2)
10012998:	10000515 	stw	zero,20(r2)
1001299c:	003ff206 	br	10012968 <__alt_data_end+0xf8012968>
100129a0:	8023883a 	mov	r17,r16
100129a4:	0029883a 	mov	r20,zero
100129a8:	4021883a 	mov	r16,r8
100129ac:	003fad06 	br	10012864 <__alt_data_end+0xf8012864>
100129b0:	9005883a 	mov	r2,r18
100129b4:	94400504 	addi	r17,r18,20
100129b8:	9c000504 	addi	r16,r19,20
100129bc:	9825883a 	mov	r18,r19
100129c0:	05000044 	movi	r20,1
100129c4:	1027883a 	mov	r19,r2
100129c8:	003fa606 	br	10012864 <__alt_data_end+0xf8012864>

100129cc <__ulp>:
100129cc:	295ffc2c 	andhi	r5,r5,32752
100129d0:	00bf3034 	movhi	r2,64704
100129d4:	2887883a 	add	r3,r5,r2
100129d8:	00c0020e 	bge	zero,r3,100129e4 <__ulp+0x18>
100129dc:	0005883a 	mov	r2,zero
100129e0:	f800283a 	ret
100129e4:	00c7c83a 	sub	r3,zero,r3
100129e8:	1807d53a 	srai	r3,r3,20
100129ec:	008004c4 	movi	r2,19
100129f0:	10c00b0e 	bge	r2,r3,10012a20 <__ulp+0x54>
100129f4:	18bffb04 	addi	r2,r3,-20
100129f8:	01000784 	movi	r4,30
100129fc:	0007883a 	mov	r3,zero
10012a00:	20800516 	blt	r4,r2,10012a18 <__ulp+0x4c>
10012a04:	010007c4 	movi	r4,31
10012a08:	2089c83a 	sub	r4,r4,r2
10012a0c:	00800044 	movi	r2,1
10012a10:	1104983a 	sll	r2,r2,r4
10012a14:	f800283a 	ret
10012a18:	00800044 	movi	r2,1
10012a1c:	f800283a 	ret
10012a20:	01400234 	movhi	r5,8
10012a24:	28c7d83a 	sra	r3,r5,r3
10012a28:	0005883a 	mov	r2,zero
10012a2c:	f800283a 	ret

10012a30 <__b2d>:
10012a30:	defffa04 	addi	sp,sp,-24
10012a34:	dc000015 	stw	r16,0(sp)
10012a38:	24000417 	ldw	r16,16(r4)
10012a3c:	dc400115 	stw	r17,4(sp)
10012a40:	24400504 	addi	r17,r4,20
10012a44:	8421883a 	add	r16,r16,r16
10012a48:	8421883a 	add	r16,r16,r16
10012a4c:	8c21883a 	add	r16,r17,r16
10012a50:	dc800215 	stw	r18,8(sp)
10012a54:	84bfff17 	ldw	r18,-4(r16)
10012a58:	dd000415 	stw	r20,16(sp)
10012a5c:	dcc00315 	stw	r19,12(sp)
10012a60:	9009883a 	mov	r4,r18
10012a64:	2829883a 	mov	r20,r5
10012a68:	dfc00515 	stw	ra,20(sp)
10012a6c:	00121080 	call	10012108 <__hi0bits>
10012a70:	00c00804 	movi	r3,32
10012a74:	1889c83a 	sub	r4,r3,r2
10012a78:	a1000015 	stw	r4,0(r20)
10012a7c:	01000284 	movi	r4,10
10012a80:	84ffff04 	addi	r19,r16,-4
10012a84:	20801216 	blt	r4,r2,10012ad0 <__b2d+0xa0>
10012a88:	018002c4 	movi	r6,11
10012a8c:	308dc83a 	sub	r6,r6,r2
10012a90:	9186d83a 	srl	r3,r18,r6
10012a94:	18cffc34 	orhi	r3,r3,16368
10012a98:	8cc0212e 	bgeu	r17,r19,10012b20 <__b2d+0xf0>
10012a9c:	813ffe17 	ldw	r4,-8(r16)
10012aa0:	218cd83a 	srl	r6,r4,r6
10012aa4:	10800544 	addi	r2,r2,21
10012aa8:	9084983a 	sll	r2,r18,r2
10012aac:	1184b03a 	or	r2,r2,r6
10012ab0:	dfc00517 	ldw	ra,20(sp)
10012ab4:	dd000417 	ldw	r20,16(sp)
10012ab8:	dcc00317 	ldw	r19,12(sp)
10012abc:	dc800217 	ldw	r18,8(sp)
10012ac0:	dc400117 	ldw	r17,4(sp)
10012ac4:	dc000017 	ldw	r16,0(sp)
10012ac8:	dec00604 	addi	sp,sp,24
10012acc:	f800283a 	ret
10012ad0:	8cc00f2e 	bgeu	r17,r19,10012b10 <__b2d+0xe0>
10012ad4:	117ffd44 	addi	r5,r2,-11
10012ad8:	80bffe17 	ldw	r2,-8(r16)
10012adc:	28000e26 	beq	r5,zero,10012b18 <__b2d+0xe8>
10012ae0:	1949c83a 	sub	r4,r3,r5
10012ae4:	9164983a 	sll	r18,r18,r5
10012ae8:	1106d83a 	srl	r3,r2,r4
10012aec:	81bffe04 	addi	r6,r16,-8
10012af0:	948ffc34 	orhi	r18,r18,16368
10012af4:	90c6b03a 	or	r3,r18,r3
10012af8:	89800e2e 	bgeu	r17,r6,10012b34 <__b2d+0x104>
10012afc:	81bffd17 	ldw	r6,-12(r16)
10012b00:	1144983a 	sll	r2,r2,r5
10012b04:	310ad83a 	srl	r5,r6,r4
10012b08:	2884b03a 	or	r2,r5,r2
10012b0c:	003fe806 	br	10012ab0 <__alt_data_end+0xf8012ab0>
10012b10:	10bffd44 	addi	r2,r2,-11
10012b14:	1000041e 	bne	r2,zero,10012b28 <__b2d+0xf8>
10012b18:	90cffc34 	orhi	r3,r18,16368
10012b1c:	003fe406 	br	10012ab0 <__alt_data_end+0xf8012ab0>
10012b20:	000d883a 	mov	r6,zero
10012b24:	003fdf06 	br	10012aa4 <__alt_data_end+0xf8012aa4>
10012b28:	90a4983a 	sll	r18,r18,r2
10012b2c:	0005883a 	mov	r2,zero
10012b30:	003ff906 	br	10012b18 <__alt_data_end+0xf8012b18>
10012b34:	1144983a 	sll	r2,r2,r5
10012b38:	003fdd06 	br	10012ab0 <__alt_data_end+0xf8012ab0>

10012b3c <__d2b>:
10012b3c:	defff804 	addi	sp,sp,-32
10012b40:	dc000215 	stw	r16,8(sp)
10012b44:	3021883a 	mov	r16,r6
10012b48:	dc400315 	stw	r17,12(sp)
10012b4c:	8022907a 	slli	r17,r16,1
10012b50:	dd000615 	stw	r20,24(sp)
10012b54:	2829883a 	mov	r20,r5
10012b58:	01400044 	movi	r5,1
10012b5c:	dcc00515 	stw	r19,20(sp)
10012b60:	dc800415 	stw	r18,16(sp)
10012b64:	dfc00715 	stw	ra,28(sp)
10012b68:	3825883a 	mov	r18,r7
10012b6c:	8822d57a 	srli	r17,r17,21
10012b70:	0011dec0 	call	10011dec <_Balloc>
10012b74:	1027883a 	mov	r19,r2
10012b78:	00800434 	movhi	r2,16
10012b7c:	10bfffc4 	addi	r2,r2,-1
10012b80:	808c703a 	and	r6,r16,r2
10012b84:	88000126 	beq	r17,zero,10012b8c <__d2b+0x50>
10012b88:	31800434 	orhi	r6,r6,16
10012b8c:	d9800015 	stw	r6,0(sp)
10012b90:	a0002426 	beq	r20,zero,10012c24 <__d2b+0xe8>
10012b94:	d9000104 	addi	r4,sp,4
10012b98:	dd000115 	stw	r20,4(sp)
10012b9c:	00121700 	call	10012170 <__lo0bits>
10012ba0:	d8c00017 	ldw	r3,0(sp)
10012ba4:	10002f1e 	bne	r2,zero,10012c64 <__d2b+0x128>
10012ba8:	d9000117 	ldw	r4,4(sp)
10012bac:	99000515 	stw	r4,20(r19)
10012bb0:	1821003a 	cmpeq	r16,r3,zero
10012bb4:	01000084 	movi	r4,2
10012bb8:	2421c83a 	sub	r16,r4,r16
10012bbc:	98c00615 	stw	r3,24(r19)
10012bc0:	9c000415 	stw	r16,16(r19)
10012bc4:	88001f1e 	bne	r17,zero,10012c44 <__d2b+0x108>
10012bc8:	10bef384 	addi	r2,r2,-1074
10012bcc:	90800015 	stw	r2,0(r18)
10012bd0:	00900034 	movhi	r2,16384
10012bd4:	10bfffc4 	addi	r2,r2,-1
10012bd8:	8085883a 	add	r2,r16,r2
10012bdc:	1085883a 	add	r2,r2,r2
10012be0:	1085883a 	add	r2,r2,r2
10012be4:	9885883a 	add	r2,r19,r2
10012be8:	11000517 	ldw	r4,20(r2)
10012bec:	8020917a 	slli	r16,r16,5
10012bf0:	00121080 	call	10012108 <__hi0bits>
10012bf4:	d8c00817 	ldw	r3,32(sp)
10012bf8:	8085c83a 	sub	r2,r16,r2
10012bfc:	18800015 	stw	r2,0(r3)
10012c00:	9805883a 	mov	r2,r19
10012c04:	dfc00717 	ldw	ra,28(sp)
10012c08:	dd000617 	ldw	r20,24(sp)
10012c0c:	dcc00517 	ldw	r19,20(sp)
10012c10:	dc800417 	ldw	r18,16(sp)
10012c14:	dc400317 	ldw	r17,12(sp)
10012c18:	dc000217 	ldw	r16,8(sp)
10012c1c:	dec00804 	addi	sp,sp,32
10012c20:	f800283a 	ret
10012c24:	d809883a 	mov	r4,sp
10012c28:	00121700 	call	10012170 <__lo0bits>
10012c2c:	d8c00017 	ldw	r3,0(sp)
10012c30:	04000044 	movi	r16,1
10012c34:	9c000415 	stw	r16,16(r19)
10012c38:	98c00515 	stw	r3,20(r19)
10012c3c:	10800804 	addi	r2,r2,32
10012c40:	883fe126 	beq	r17,zero,10012bc8 <__alt_data_end+0xf8012bc8>
10012c44:	00c00d44 	movi	r3,53
10012c48:	8c7ef344 	addi	r17,r17,-1075
10012c4c:	88a3883a 	add	r17,r17,r2
10012c50:	1885c83a 	sub	r2,r3,r2
10012c54:	d8c00817 	ldw	r3,32(sp)
10012c58:	94400015 	stw	r17,0(r18)
10012c5c:	18800015 	stw	r2,0(r3)
10012c60:	003fe706 	br	10012c00 <__alt_data_end+0xf8012c00>
10012c64:	01000804 	movi	r4,32
10012c68:	2089c83a 	sub	r4,r4,r2
10012c6c:	1908983a 	sll	r4,r3,r4
10012c70:	d9400117 	ldw	r5,4(sp)
10012c74:	1886d83a 	srl	r3,r3,r2
10012c78:	2148b03a 	or	r4,r4,r5
10012c7c:	99000515 	stw	r4,20(r19)
10012c80:	d8c00015 	stw	r3,0(sp)
10012c84:	003fca06 	br	10012bb0 <__alt_data_end+0xf8012bb0>

10012c88 <__ratio>:
10012c88:	defff904 	addi	sp,sp,-28
10012c8c:	dc400315 	stw	r17,12(sp)
10012c90:	2823883a 	mov	r17,r5
10012c94:	d9400104 	addi	r5,sp,4
10012c98:	dfc00615 	stw	ra,24(sp)
10012c9c:	dcc00515 	stw	r19,20(sp)
10012ca0:	dc800415 	stw	r18,16(sp)
10012ca4:	2027883a 	mov	r19,r4
10012ca8:	dc000215 	stw	r16,8(sp)
10012cac:	0012a300 	call	10012a30 <__b2d>
10012cb0:	d80b883a 	mov	r5,sp
10012cb4:	8809883a 	mov	r4,r17
10012cb8:	1025883a 	mov	r18,r2
10012cbc:	1821883a 	mov	r16,r3
10012cc0:	0012a300 	call	10012a30 <__b2d>
10012cc4:	8a000417 	ldw	r8,16(r17)
10012cc8:	99000417 	ldw	r4,16(r19)
10012ccc:	d9400117 	ldw	r5,4(sp)
10012cd0:	2209c83a 	sub	r4,r4,r8
10012cd4:	2010917a 	slli	r8,r4,5
10012cd8:	d9000017 	ldw	r4,0(sp)
10012cdc:	2909c83a 	sub	r4,r5,r4
10012ce0:	4109883a 	add	r4,r8,r4
10012ce4:	01000e0e 	bge	zero,r4,10012d20 <__ratio+0x98>
10012ce8:	2008953a 	slli	r4,r4,20
10012cec:	2421883a 	add	r16,r4,r16
10012cf0:	100d883a 	mov	r6,r2
10012cf4:	180f883a 	mov	r7,r3
10012cf8:	9009883a 	mov	r4,r18
10012cfc:	800b883a 	mov	r5,r16
10012d00:	0009fd00 	call	10009fd0 <__divdf3>
10012d04:	dfc00617 	ldw	ra,24(sp)
10012d08:	dcc00517 	ldw	r19,20(sp)
10012d0c:	dc800417 	ldw	r18,16(sp)
10012d10:	dc400317 	ldw	r17,12(sp)
10012d14:	dc000217 	ldw	r16,8(sp)
10012d18:	dec00704 	addi	sp,sp,28
10012d1c:	f800283a 	ret
10012d20:	2008953a 	slli	r4,r4,20
10012d24:	1907c83a 	sub	r3,r3,r4
10012d28:	003ff106 	br	10012cf0 <__alt_data_end+0xf8012cf0>

10012d2c <_mprec_log10>:
10012d2c:	defffe04 	addi	sp,sp,-8
10012d30:	dc000015 	stw	r16,0(sp)
10012d34:	dfc00115 	stw	ra,4(sp)
10012d38:	008005c4 	movi	r2,23
10012d3c:	2021883a 	mov	r16,r4
10012d40:	11000d0e 	bge	r2,r4,10012d78 <_mprec_log10+0x4c>
10012d44:	0005883a 	mov	r2,zero
10012d48:	00cffc34 	movhi	r3,16368
10012d4c:	843fffc4 	addi	r16,r16,-1
10012d50:	000d883a 	mov	r6,zero
10012d54:	01d00934 	movhi	r7,16420
10012d58:	1009883a 	mov	r4,r2
10012d5c:	180b883a 	mov	r5,r3
10012d60:	000ab040 	call	1000ab04 <__muldf3>
10012d64:	803ff91e 	bne	r16,zero,10012d4c <__alt_data_end+0xf8012d4c>
10012d68:	dfc00117 	ldw	ra,4(sp)
10012d6c:	dc000017 	ldw	r16,0(sp)
10012d70:	dec00204 	addi	sp,sp,8
10012d74:	f800283a 	ret
10012d78:	202090fa 	slli	r16,r4,3
10012d7c:	008400b4 	movhi	r2,4098
10012d80:	10a4af04 	addi	r2,r2,-27972
10012d84:	1421883a 	add	r16,r2,r16
10012d88:	80800017 	ldw	r2,0(r16)
10012d8c:	80c00117 	ldw	r3,4(r16)
10012d90:	dfc00117 	ldw	ra,4(sp)
10012d94:	dc000017 	ldw	r16,0(sp)
10012d98:	dec00204 	addi	sp,sp,8
10012d9c:	f800283a 	ret

10012da0 <__copybits>:
10012da0:	297fffc4 	addi	r5,r5,-1
10012da4:	280fd17a 	srai	r7,r5,5
10012da8:	30c00417 	ldw	r3,16(r6)
10012dac:	30800504 	addi	r2,r6,20
10012db0:	39c00044 	addi	r7,r7,1
10012db4:	18c7883a 	add	r3,r3,r3
10012db8:	39cf883a 	add	r7,r7,r7
10012dbc:	18c7883a 	add	r3,r3,r3
10012dc0:	39cf883a 	add	r7,r7,r7
10012dc4:	10c7883a 	add	r3,r2,r3
10012dc8:	21cf883a 	add	r7,r4,r7
10012dcc:	10c00d2e 	bgeu	r2,r3,10012e04 <__copybits+0x64>
10012dd0:	200b883a 	mov	r5,r4
10012dd4:	12000017 	ldw	r8,0(r2)
10012dd8:	29400104 	addi	r5,r5,4
10012ddc:	10800104 	addi	r2,r2,4
10012de0:	2a3fff15 	stw	r8,-4(r5)
10012de4:	10fffb36 	bltu	r2,r3,10012dd4 <__alt_data_end+0xf8012dd4>
10012de8:	1985c83a 	sub	r2,r3,r6
10012dec:	10bffac4 	addi	r2,r2,-21
10012df0:	1004d0ba 	srli	r2,r2,2
10012df4:	10800044 	addi	r2,r2,1
10012df8:	1085883a 	add	r2,r2,r2
10012dfc:	1085883a 	add	r2,r2,r2
10012e00:	2089883a 	add	r4,r4,r2
10012e04:	21c0032e 	bgeu	r4,r7,10012e14 <__copybits+0x74>
10012e08:	20000015 	stw	zero,0(r4)
10012e0c:	21000104 	addi	r4,r4,4
10012e10:	21fffd36 	bltu	r4,r7,10012e08 <__alt_data_end+0xf8012e08>
10012e14:	f800283a 	ret

10012e18 <__any_on>:
10012e18:	20c00417 	ldw	r3,16(r4)
10012e1c:	2805d17a 	srai	r2,r5,5
10012e20:	21000504 	addi	r4,r4,20
10012e24:	18800d0e 	bge	r3,r2,10012e5c <__any_on+0x44>
10012e28:	18c7883a 	add	r3,r3,r3
10012e2c:	18c7883a 	add	r3,r3,r3
10012e30:	20c7883a 	add	r3,r4,r3
10012e34:	20c0192e 	bgeu	r4,r3,10012e9c <__any_on+0x84>
10012e38:	18bfff17 	ldw	r2,-4(r3)
10012e3c:	18ffff04 	addi	r3,r3,-4
10012e40:	1000041e 	bne	r2,zero,10012e54 <__any_on+0x3c>
10012e44:	20c0142e 	bgeu	r4,r3,10012e98 <__any_on+0x80>
10012e48:	18ffff04 	addi	r3,r3,-4
10012e4c:	19400017 	ldw	r5,0(r3)
10012e50:	283ffc26 	beq	r5,zero,10012e44 <__alt_data_end+0xf8012e44>
10012e54:	00800044 	movi	r2,1
10012e58:	f800283a 	ret
10012e5c:	10c00a0e 	bge	r2,r3,10012e88 <__any_on+0x70>
10012e60:	1085883a 	add	r2,r2,r2
10012e64:	1085883a 	add	r2,r2,r2
10012e68:	294007cc 	andi	r5,r5,31
10012e6c:	2087883a 	add	r3,r4,r2
10012e70:	283ff026 	beq	r5,zero,10012e34 <__alt_data_end+0xf8012e34>
10012e74:	19800017 	ldw	r6,0(r3)
10012e78:	3144d83a 	srl	r2,r6,r5
10012e7c:	114a983a 	sll	r5,r2,r5
10012e80:	317ff41e 	bne	r6,r5,10012e54 <__alt_data_end+0xf8012e54>
10012e84:	003feb06 	br	10012e34 <__alt_data_end+0xf8012e34>
10012e88:	1085883a 	add	r2,r2,r2
10012e8c:	1085883a 	add	r2,r2,r2
10012e90:	2087883a 	add	r3,r4,r2
10012e94:	003fe706 	br	10012e34 <__alt_data_end+0xf8012e34>
10012e98:	f800283a 	ret
10012e9c:	0005883a 	mov	r2,zero
10012ea0:	f800283a 	ret

10012ea4 <_realloc_r>:
10012ea4:	defff604 	addi	sp,sp,-40
10012ea8:	dc800215 	stw	r18,8(sp)
10012eac:	dfc00915 	stw	ra,36(sp)
10012eb0:	df000815 	stw	fp,32(sp)
10012eb4:	ddc00715 	stw	r23,28(sp)
10012eb8:	dd800615 	stw	r22,24(sp)
10012ebc:	dd400515 	stw	r21,20(sp)
10012ec0:	dd000415 	stw	r20,16(sp)
10012ec4:	dcc00315 	stw	r19,12(sp)
10012ec8:	dc400115 	stw	r17,4(sp)
10012ecc:	dc000015 	stw	r16,0(sp)
10012ed0:	3025883a 	mov	r18,r6
10012ed4:	2800b726 	beq	r5,zero,100131b4 <_realloc_r+0x310>
10012ed8:	282b883a 	mov	r21,r5
10012edc:	2029883a 	mov	r20,r4
10012ee0:	0016a240 	call	10016a24 <__malloc_lock>
10012ee4:	a8bfff17 	ldw	r2,-4(r21)
10012ee8:	043fff04 	movi	r16,-4
10012eec:	90c002c4 	addi	r3,r18,11
10012ef0:	01000584 	movi	r4,22
10012ef4:	acfffe04 	addi	r19,r21,-8
10012ef8:	1420703a 	and	r16,r2,r16
10012efc:	20c0332e 	bgeu	r4,r3,10012fcc <_realloc_r+0x128>
10012f00:	047ffe04 	movi	r17,-8
10012f04:	1c62703a 	and	r17,r3,r17
10012f08:	8807883a 	mov	r3,r17
10012f0c:	88005816 	blt	r17,zero,10013070 <_realloc_r+0x1cc>
10012f10:	8c805736 	bltu	r17,r18,10013070 <_realloc_r+0x1cc>
10012f14:	80c0300e 	bge	r16,r3,10012fd8 <_realloc_r+0x134>
10012f18:	070400b4 	movhi	fp,4098
10012f1c:	e7273104 	addi	fp,fp,-25404
10012f20:	e1c00217 	ldw	r7,8(fp)
10012f24:	9c09883a 	add	r4,r19,r16
10012f28:	22000117 	ldw	r8,4(r4)
10012f2c:	21c06326 	beq	r4,r7,100130bc <_realloc_r+0x218>
10012f30:	017fff84 	movi	r5,-2
10012f34:	414a703a 	and	r5,r8,r5
10012f38:	214b883a 	add	r5,r4,r5
10012f3c:	29800117 	ldw	r6,4(r5)
10012f40:	3180004c 	andi	r6,r6,1
10012f44:	30003f26 	beq	r6,zero,10013044 <_realloc_r+0x1a0>
10012f48:	1080004c 	andi	r2,r2,1
10012f4c:	10008326 	beq	r2,zero,1001315c <_realloc_r+0x2b8>
10012f50:	900b883a 	mov	r5,r18
10012f54:	a009883a 	mov	r4,r20
10012f58:	00112780 	call	10011278 <_malloc_r>
10012f5c:	1025883a 	mov	r18,r2
10012f60:	10011e26 	beq	r2,zero,100133dc <_realloc_r+0x538>
10012f64:	a93fff17 	ldw	r4,-4(r21)
10012f68:	10fffe04 	addi	r3,r2,-8
10012f6c:	00bfff84 	movi	r2,-2
10012f70:	2084703a 	and	r2,r4,r2
10012f74:	9885883a 	add	r2,r19,r2
10012f78:	1880ee26 	beq	r3,r2,10013334 <_realloc_r+0x490>
10012f7c:	81bfff04 	addi	r6,r16,-4
10012f80:	00800904 	movi	r2,36
10012f84:	1180b836 	bltu	r2,r6,10013268 <_realloc_r+0x3c4>
10012f88:	00c004c4 	movi	r3,19
10012f8c:	19809636 	bltu	r3,r6,100131e8 <_realloc_r+0x344>
10012f90:	9005883a 	mov	r2,r18
10012f94:	a807883a 	mov	r3,r21
10012f98:	19000017 	ldw	r4,0(r3)
10012f9c:	11000015 	stw	r4,0(r2)
10012fa0:	19000117 	ldw	r4,4(r3)
10012fa4:	11000115 	stw	r4,4(r2)
10012fa8:	18c00217 	ldw	r3,8(r3)
10012fac:	10c00215 	stw	r3,8(r2)
10012fb0:	a80b883a 	mov	r5,r21
10012fb4:	a009883a 	mov	r4,r20
10012fb8:	00106800 	call	10010680 <_free_r>
10012fbc:	a009883a 	mov	r4,r20
10012fc0:	0016a480 	call	10016a48 <__malloc_unlock>
10012fc4:	9005883a 	mov	r2,r18
10012fc8:	00001206 	br	10013014 <_realloc_r+0x170>
10012fcc:	00c00404 	movi	r3,16
10012fd0:	1823883a 	mov	r17,r3
10012fd4:	003fce06 	br	10012f10 <__alt_data_end+0xf8012f10>
10012fd8:	a825883a 	mov	r18,r21
10012fdc:	8445c83a 	sub	r2,r16,r17
10012fe0:	00c003c4 	movi	r3,15
10012fe4:	18802636 	bltu	r3,r2,10013080 <_realloc_r+0x1dc>
10012fe8:	99800117 	ldw	r6,4(r19)
10012fec:	9c07883a 	add	r3,r19,r16
10012ff0:	3180004c 	andi	r6,r6,1
10012ff4:	3420b03a 	or	r16,r6,r16
10012ff8:	9c000115 	stw	r16,4(r19)
10012ffc:	18800117 	ldw	r2,4(r3)
10013000:	10800054 	ori	r2,r2,1
10013004:	18800115 	stw	r2,4(r3)
10013008:	a009883a 	mov	r4,r20
1001300c:	0016a480 	call	10016a48 <__malloc_unlock>
10013010:	9005883a 	mov	r2,r18
10013014:	dfc00917 	ldw	ra,36(sp)
10013018:	df000817 	ldw	fp,32(sp)
1001301c:	ddc00717 	ldw	r23,28(sp)
10013020:	dd800617 	ldw	r22,24(sp)
10013024:	dd400517 	ldw	r21,20(sp)
10013028:	dd000417 	ldw	r20,16(sp)
1001302c:	dcc00317 	ldw	r19,12(sp)
10013030:	dc800217 	ldw	r18,8(sp)
10013034:	dc400117 	ldw	r17,4(sp)
10013038:	dc000017 	ldw	r16,0(sp)
1001303c:	dec00a04 	addi	sp,sp,40
10013040:	f800283a 	ret
10013044:	017fff04 	movi	r5,-4
10013048:	414a703a 	and	r5,r8,r5
1001304c:	814d883a 	add	r6,r16,r5
10013050:	30c01f16 	blt	r6,r3,100130d0 <_realloc_r+0x22c>
10013054:	20800317 	ldw	r2,12(r4)
10013058:	20c00217 	ldw	r3,8(r4)
1001305c:	a825883a 	mov	r18,r21
10013060:	3021883a 	mov	r16,r6
10013064:	18800315 	stw	r2,12(r3)
10013068:	10c00215 	stw	r3,8(r2)
1001306c:	003fdb06 	br	10012fdc <__alt_data_end+0xf8012fdc>
10013070:	00800304 	movi	r2,12
10013074:	a0800015 	stw	r2,0(r20)
10013078:	0005883a 	mov	r2,zero
1001307c:	003fe506 	br	10013014 <__alt_data_end+0xf8013014>
10013080:	98c00117 	ldw	r3,4(r19)
10013084:	9c4b883a 	add	r5,r19,r17
10013088:	11000054 	ori	r4,r2,1
1001308c:	18c0004c 	andi	r3,r3,1
10013090:	1c62b03a 	or	r17,r3,r17
10013094:	9c400115 	stw	r17,4(r19)
10013098:	29000115 	stw	r4,4(r5)
1001309c:	2885883a 	add	r2,r5,r2
100130a0:	10c00117 	ldw	r3,4(r2)
100130a4:	29400204 	addi	r5,r5,8
100130a8:	a009883a 	mov	r4,r20
100130ac:	18c00054 	ori	r3,r3,1
100130b0:	10c00115 	stw	r3,4(r2)
100130b4:	00106800 	call	10010680 <_free_r>
100130b8:	003fd306 	br	10013008 <__alt_data_end+0xf8013008>
100130bc:	017fff04 	movi	r5,-4
100130c0:	414a703a 	and	r5,r8,r5
100130c4:	89800404 	addi	r6,r17,16
100130c8:	8151883a 	add	r8,r16,r5
100130cc:	4180590e 	bge	r8,r6,10013234 <_realloc_r+0x390>
100130d0:	1080004c 	andi	r2,r2,1
100130d4:	103f9e1e 	bne	r2,zero,10012f50 <__alt_data_end+0xf8012f50>
100130d8:	adbffe17 	ldw	r22,-8(r21)
100130dc:	00bfff04 	movi	r2,-4
100130e0:	9dadc83a 	sub	r22,r19,r22
100130e4:	b1800117 	ldw	r6,4(r22)
100130e8:	3084703a 	and	r2,r6,r2
100130ec:	20002026 	beq	r4,zero,10013170 <_realloc_r+0x2cc>
100130f0:	80af883a 	add	r23,r16,r2
100130f4:	b96f883a 	add	r23,r23,r5
100130f8:	21c05f26 	beq	r4,r7,10013278 <_realloc_r+0x3d4>
100130fc:	b8c01c16 	blt	r23,r3,10013170 <_realloc_r+0x2cc>
10013100:	20800317 	ldw	r2,12(r4)
10013104:	20c00217 	ldw	r3,8(r4)
10013108:	81bfff04 	addi	r6,r16,-4
1001310c:	01000904 	movi	r4,36
10013110:	18800315 	stw	r2,12(r3)
10013114:	10c00215 	stw	r3,8(r2)
10013118:	b0c00217 	ldw	r3,8(r22)
1001311c:	b0800317 	ldw	r2,12(r22)
10013120:	b4800204 	addi	r18,r22,8
10013124:	18800315 	stw	r2,12(r3)
10013128:	10c00215 	stw	r3,8(r2)
1001312c:	21801b36 	bltu	r4,r6,1001319c <_realloc_r+0x2f8>
10013130:	008004c4 	movi	r2,19
10013134:	1180352e 	bgeu	r2,r6,1001320c <_realloc_r+0x368>
10013138:	a8800017 	ldw	r2,0(r21)
1001313c:	b0800215 	stw	r2,8(r22)
10013140:	a8800117 	ldw	r2,4(r21)
10013144:	b0800315 	stw	r2,12(r22)
10013148:	008006c4 	movi	r2,27
1001314c:	11807f36 	bltu	r2,r6,1001334c <_realloc_r+0x4a8>
10013150:	b0800404 	addi	r2,r22,16
10013154:	ad400204 	addi	r21,r21,8
10013158:	00002d06 	br	10013210 <_realloc_r+0x36c>
1001315c:	adbffe17 	ldw	r22,-8(r21)
10013160:	00bfff04 	movi	r2,-4
10013164:	9dadc83a 	sub	r22,r19,r22
10013168:	b1000117 	ldw	r4,4(r22)
1001316c:	2084703a 	and	r2,r4,r2
10013170:	b03f7726 	beq	r22,zero,10012f50 <__alt_data_end+0xf8012f50>
10013174:	80af883a 	add	r23,r16,r2
10013178:	b8ff7516 	blt	r23,r3,10012f50 <__alt_data_end+0xf8012f50>
1001317c:	b0800317 	ldw	r2,12(r22)
10013180:	b0c00217 	ldw	r3,8(r22)
10013184:	81bfff04 	addi	r6,r16,-4
10013188:	01000904 	movi	r4,36
1001318c:	18800315 	stw	r2,12(r3)
10013190:	10c00215 	stw	r3,8(r2)
10013194:	b4800204 	addi	r18,r22,8
10013198:	21bfe52e 	bgeu	r4,r6,10013130 <__alt_data_end+0xf8013130>
1001319c:	a80b883a 	mov	r5,r21
100131a0:	9009883a 	mov	r4,r18
100131a4:	0011b680 	call	10011b68 <memmove>
100131a8:	b821883a 	mov	r16,r23
100131ac:	b027883a 	mov	r19,r22
100131b0:	003f8a06 	br	10012fdc <__alt_data_end+0xf8012fdc>
100131b4:	300b883a 	mov	r5,r6
100131b8:	dfc00917 	ldw	ra,36(sp)
100131bc:	df000817 	ldw	fp,32(sp)
100131c0:	ddc00717 	ldw	r23,28(sp)
100131c4:	dd800617 	ldw	r22,24(sp)
100131c8:	dd400517 	ldw	r21,20(sp)
100131cc:	dd000417 	ldw	r20,16(sp)
100131d0:	dcc00317 	ldw	r19,12(sp)
100131d4:	dc800217 	ldw	r18,8(sp)
100131d8:	dc400117 	ldw	r17,4(sp)
100131dc:	dc000017 	ldw	r16,0(sp)
100131e0:	dec00a04 	addi	sp,sp,40
100131e4:	00112781 	jmpi	10011278 <_malloc_r>
100131e8:	a8c00017 	ldw	r3,0(r21)
100131ec:	90c00015 	stw	r3,0(r18)
100131f0:	a8c00117 	ldw	r3,4(r21)
100131f4:	90c00115 	stw	r3,4(r18)
100131f8:	00c006c4 	movi	r3,27
100131fc:	19804536 	bltu	r3,r6,10013314 <_realloc_r+0x470>
10013200:	90800204 	addi	r2,r18,8
10013204:	a8c00204 	addi	r3,r21,8
10013208:	003f6306 	br	10012f98 <__alt_data_end+0xf8012f98>
1001320c:	9005883a 	mov	r2,r18
10013210:	a8c00017 	ldw	r3,0(r21)
10013214:	b821883a 	mov	r16,r23
10013218:	b027883a 	mov	r19,r22
1001321c:	10c00015 	stw	r3,0(r2)
10013220:	a8c00117 	ldw	r3,4(r21)
10013224:	10c00115 	stw	r3,4(r2)
10013228:	a8c00217 	ldw	r3,8(r21)
1001322c:	10c00215 	stw	r3,8(r2)
10013230:	003f6a06 	br	10012fdc <__alt_data_end+0xf8012fdc>
10013234:	9c67883a 	add	r19,r19,r17
10013238:	4445c83a 	sub	r2,r8,r17
1001323c:	e4c00215 	stw	r19,8(fp)
10013240:	10800054 	ori	r2,r2,1
10013244:	98800115 	stw	r2,4(r19)
10013248:	a8bfff17 	ldw	r2,-4(r21)
1001324c:	a009883a 	mov	r4,r20
10013250:	1080004c 	andi	r2,r2,1
10013254:	1462b03a 	or	r17,r2,r17
10013258:	ac7fff15 	stw	r17,-4(r21)
1001325c:	0016a480 	call	10016a48 <__malloc_unlock>
10013260:	a805883a 	mov	r2,r21
10013264:	003f6b06 	br	10013014 <__alt_data_end+0xf8013014>
10013268:	a80b883a 	mov	r5,r21
1001326c:	9009883a 	mov	r4,r18
10013270:	0011b680 	call	10011b68 <memmove>
10013274:	003f4e06 	br	10012fb0 <__alt_data_end+0xf8012fb0>
10013278:	89000404 	addi	r4,r17,16
1001327c:	b93fbc16 	blt	r23,r4,10013170 <__alt_data_end+0xf8013170>
10013280:	b0800317 	ldw	r2,12(r22)
10013284:	b0c00217 	ldw	r3,8(r22)
10013288:	81bfff04 	addi	r6,r16,-4
1001328c:	01000904 	movi	r4,36
10013290:	18800315 	stw	r2,12(r3)
10013294:	10c00215 	stw	r3,8(r2)
10013298:	b4800204 	addi	r18,r22,8
1001329c:	21804336 	bltu	r4,r6,100133ac <_realloc_r+0x508>
100132a0:	008004c4 	movi	r2,19
100132a4:	11803f2e 	bgeu	r2,r6,100133a4 <_realloc_r+0x500>
100132a8:	a8800017 	ldw	r2,0(r21)
100132ac:	b0800215 	stw	r2,8(r22)
100132b0:	a8800117 	ldw	r2,4(r21)
100132b4:	b0800315 	stw	r2,12(r22)
100132b8:	008006c4 	movi	r2,27
100132bc:	11803f36 	bltu	r2,r6,100133bc <_realloc_r+0x518>
100132c0:	b0800404 	addi	r2,r22,16
100132c4:	ad400204 	addi	r21,r21,8
100132c8:	a8c00017 	ldw	r3,0(r21)
100132cc:	10c00015 	stw	r3,0(r2)
100132d0:	a8c00117 	ldw	r3,4(r21)
100132d4:	10c00115 	stw	r3,4(r2)
100132d8:	a8c00217 	ldw	r3,8(r21)
100132dc:	10c00215 	stw	r3,8(r2)
100132e0:	b447883a 	add	r3,r22,r17
100132e4:	bc45c83a 	sub	r2,r23,r17
100132e8:	e0c00215 	stw	r3,8(fp)
100132ec:	10800054 	ori	r2,r2,1
100132f0:	18800115 	stw	r2,4(r3)
100132f4:	b0800117 	ldw	r2,4(r22)
100132f8:	a009883a 	mov	r4,r20
100132fc:	1080004c 	andi	r2,r2,1
10013300:	1462b03a 	or	r17,r2,r17
10013304:	b4400115 	stw	r17,4(r22)
10013308:	0016a480 	call	10016a48 <__malloc_unlock>
1001330c:	9005883a 	mov	r2,r18
10013310:	003f4006 	br	10013014 <__alt_data_end+0xf8013014>
10013314:	a8c00217 	ldw	r3,8(r21)
10013318:	90c00215 	stw	r3,8(r18)
1001331c:	a8c00317 	ldw	r3,12(r21)
10013320:	90c00315 	stw	r3,12(r18)
10013324:	30801126 	beq	r6,r2,1001336c <_realloc_r+0x4c8>
10013328:	90800404 	addi	r2,r18,16
1001332c:	a8c00404 	addi	r3,r21,16
10013330:	003f1906 	br	10012f98 <__alt_data_end+0xf8012f98>
10013334:	90ffff17 	ldw	r3,-4(r18)
10013338:	00bfff04 	movi	r2,-4
1001333c:	a825883a 	mov	r18,r21
10013340:	1884703a 	and	r2,r3,r2
10013344:	80a1883a 	add	r16,r16,r2
10013348:	003f2406 	br	10012fdc <__alt_data_end+0xf8012fdc>
1001334c:	a8800217 	ldw	r2,8(r21)
10013350:	b0800415 	stw	r2,16(r22)
10013354:	a8800317 	ldw	r2,12(r21)
10013358:	b0800515 	stw	r2,20(r22)
1001335c:	31000a26 	beq	r6,r4,10013388 <_realloc_r+0x4e4>
10013360:	b0800604 	addi	r2,r22,24
10013364:	ad400404 	addi	r21,r21,16
10013368:	003fa906 	br	10013210 <__alt_data_end+0xf8013210>
1001336c:	a9000417 	ldw	r4,16(r21)
10013370:	90800604 	addi	r2,r18,24
10013374:	a8c00604 	addi	r3,r21,24
10013378:	91000415 	stw	r4,16(r18)
1001337c:	a9000517 	ldw	r4,20(r21)
10013380:	91000515 	stw	r4,20(r18)
10013384:	003f0406 	br	10012f98 <__alt_data_end+0xf8012f98>
10013388:	a8c00417 	ldw	r3,16(r21)
1001338c:	ad400604 	addi	r21,r21,24
10013390:	b0800804 	addi	r2,r22,32
10013394:	b0c00615 	stw	r3,24(r22)
10013398:	a8ffff17 	ldw	r3,-4(r21)
1001339c:	b0c00715 	stw	r3,28(r22)
100133a0:	003f9b06 	br	10013210 <__alt_data_end+0xf8013210>
100133a4:	9005883a 	mov	r2,r18
100133a8:	003fc706 	br	100132c8 <__alt_data_end+0xf80132c8>
100133ac:	a80b883a 	mov	r5,r21
100133b0:	9009883a 	mov	r4,r18
100133b4:	0011b680 	call	10011b68 <memmove>
100133b8:	003fc906 	br	100132e0 <__alt_data_end+0xf80132e0>
100133bc:	a8800217 	ldw	r2,8(r21)
100133c0:	b0800415 	stw	r2,16(r22)
100133c4:	a8800317 	ldw	r2,12(r21)
100133c8:	b0800515 	stw	r2,20(r22)
100133cc:	31000726 	beq	r6,r4,100133ec <_realloc_r+0x548>
100133d0:	b0800604 	addi	r2,r22,24
100133d4:	ad400404 	addi	r21,r21,16
100133d8:	003fbb06 	br	100132c8 <__alt_data_end+0xf80132c8>
100133dc:	a009883a 	mov	r4,r20
100133e0:	0016a480 	call	10016a48 <__malloc_unlock>
100133e4:	0005883a 	mov	r2,zero
100133e8:	003f0a06 	br	10013014 <__alt_data_end+0xf8013014>
100133ec:	a8c00417 	ldw	r3,16(r21)
100133f0:	ad400604 	addi	r21,r21,24
100133f4:	b0800804 	addi	r2,r22,32
100133f8:	b0c00615 	stw	r3,24(r22)
100133fc:	a8ffff17 	ldw	r3,-4(r21)
10013400:	b0c00715 	stw	r3,28(r22)
10013404:	003fb006 	br	100132c8 <__alt_data_end+0xf80132c8>

10013408 <__fpclassifyd>:
10013408:	00a00034 	movhi	r2,32768
1001340c:	10bfffc4 	addi	r2,r2,-1
10013410:	2884703a 	and	r2,r5,r2
10013414:	10000726 	beq	r2,zero,10013434 <__fpclassifyd+0x2c>
10013418:	00fffc34 	movhi	r3,65520
1001341c:	019ff834 	movhi	r6,32736
10013420:	28c7883a 	add	r3,r5,r3
10013424:	31bfffc4 	addi	r6,r6,-1
10013428:	30c00536 	bltu	r6,r3,10013440 <__fpclassifyd+0x38>
1001342c:	00800104 	movi	r2,4
10013430:	f800283a 	ret
10013434:	2000021e 	bne	r4,zero,10013440 <__fpclassifyd+0x38>
10013438:	00800084 	movi	r2,2
1001343c:	f800283a 	ret
10013440:	00dffc34 	movhi	r3,32752
10013444:	019ff834 	movhi	r6,32736
10013448:	28cb883a 	add	r5,r5,r3
1001344c:	31bfffc4 	addi	r6,r6,-1
10013450:	317ff62e 	bgeu	r6,r5,1001342c <__alt_data_end+0xf801342c>
10013454:	01400434 	movhi	r5,16
10013458:	297fffc4 	addi	r5,r5,-1
1001345c:	28800236 	bltu	r5,r2,10013468 <__fpclassifyd+0x60>
10013460:	008000c4 	movi	r2,3
10013464:	f800283a 	ret
10013468:	10c00226 	beq	r2,r3,10013474 <__fpclassifyd+0x6c>
1001346c:	0005883a 	mov	r2,zero
10013470:	f800283a 	ret
10013474:	2005003a 	cmpeq	r2,r4,zero
10013478:	f800283a 	ret

1001347c <_sbrk_r>:
1001347c:	defffd04 	addi	sp,sp,-12
10013480:	dc000015 	stw	r16,0(sp)
10013484:	040400b4 	movhi	r16,4098
10013488:	dc400115 	stw	r17,4(sp)
1001348c:	8434b204 	addi	r16,r16,-11576
10013490:	2023883a 	mov	r17,r4
10013494:	2809883a 	mov	r4,r5
10013498:	dfc00215 	stw	ra,8(sp)
1001349c:	80000015 	stw	zero,0(r16)
100134a0:	0016c300 	call	10016c30 <sbrk>
100134a4:	00ffffc4 	movi	r3,-1
100134a8:	10c00526 	beq	r2,r3,100134c0 <_sbrk_r+0x44>
100134ac:	dfc00217 	ldw	ra,8(sp)
100134b0:	dc400117 	ldw	r17,4(sp)
100134b4:	dc000017 	ldw	r16,0(sp)
100134b8:	dec00304 	addi	sp,sp,12
100134bc:	f800283a 	ret
100134c0:	80c00017 	ldw	r3,0(r16)
100134c4:	183ff926 	beq	r3,zero,100134ac <__alt_data_end+0xf80134ac>
100134c8:	88c00015 	stw	r3,0(r17)
100134cc:	003ff706 	br	100134ac <__alt_data_end+0xf80134ac>

100134d0 <__sread>:
100134d0:	defffe04 	addi	sp,sp,-8
100134d4:	dc000015 	stw	r16,0(sp)
100134d8:	2821883a 	mov	r16,r5
100134dc:	2940038f 	ldh	r5,14(r5)
100134e0:	dfc00115 	stw	ra,4(sp)
100134e4:	001538c0 	call	1001538c <_read_r>
100134e8:	10000716 	blt	r2,zero,10013508 <__sread+0x38>
100134ec:	80c01417 	ldw	r3,80(r16)
100134f0:	1887883a 	add	r3,r3,r2
100134f4:	80c01415 	stw	r3,80(r16)
100134f8:	dfc00117 	ldw	ra,4(sp)
100134fc:	dc000017 	ldw	r16,0(sp)
10013500:	dec00204 	addi	sp,sp,8
10013504:	f800283a 	ret
10013508:	80c0030b 	ldhu	r3,12(r16)
1001350c:	18fbffcc 	andi	r3,r3,61439
10013510:	80c0030d 	sth	r3,12(r16)
10013514:	dfc00117 	ldw	ra,4(sp)
10013518:	dc000017 	ldw	r16,0(sp)
1001351c:	dec00204 	addi	sp,sp,8
10013520:	f800283a 	ret

10013524 <__seofread>:
10013524:	0005883a 	mov	r2,zero
10013528:	f800283a 	ret

1001352c <__swrite>:
1001352c:	2880030b 	ldhu	r2,12(r5)
10013530:	defffb04 	addi	sp,sp,-20
10013534:	dcc00315 	stw	r19,12(sp)
10013538:	dc800215 	stw	r18,8(sp)
1001353c:	dc400115 	stw	r17,4(sp)
10013540:	dc000015 	stw	r16,0(sp)
10013544:	dfc00415 	stw	ra,16(sp)
10013548:	10c0400c 	andi	r3,r2,256
1001354c:	2821883a 	mov	r16,r5
10013550:	2023883a 	mov	r17,r4
10013554:	3025883a 	mov	r18,r6
10013558:	3827883a 	mov	r19,r7
1001355c:	18000526 	beq	r3,zero,10013574 <__swrite+0x48>
10013560:	2940038f 	ldh	r5,14(r5)
10013564:	01c00084 	movi	r7,2
10013568:	000d883a 	mov	r6,zero
1001356c:	001532c0 	call	1001532c <_lseek_r>
10013570:	8080030b 	ldhu	r2,12(r16)
10013574:	8140038f 	ldh	r5,14(r16)
10013578:	10bbffcc 	andi	r2,r2,61439
1001357c:	980f883a 	mov	r7,r19
10013580:	900d883a 	mov	r6,r18
10013584:	8809883a 	mov	r4,r17
10013588:	8080030d 	sth	r2,12(r16)
1001358c:	dfc00417 	ldw	ra,16(sp)
10013590:	dcc00317 	ldw	r19,12(sp)
10013594:	dc800217 	ldw	r18,8(sp)
10013598:	dc400117 	ldw	r17,4(sp)
1001359c:	dc000017 	ldw	r16,0(sp)
100135a0:	dec00504 	addi	sp,sp,20
100135a4:	0014de01 	jmpi	10014de0 <_write_r>

100135a8 <__sseek>:
100135a8:	defffe04 	addi	sp,sp,-8
100135ac:	dc000015 	stw	r16,0(sp)
100135b0:	2821883a 	mov	r16,r5
100135b4:	2940038f 	ldh	r5,14(r5)
100135b8:	dfc00115 	stw	ra,4(sp)
100135bc:	001532c0 	call	1001532c <_lseek_r>
100135c0:	00ffffc4 	movi	r3,-1
100135c4:	10c00826 	beq	r2,r3,100135e8 <__sseek+0x40>
100135c8:	80c0030b 	ldhu	r3,12(r16)
100135cc:	80801415 	stw	r2,80(r16)
100135d0:	18c40014 	ori	r3,r3,4096
100135d4:	80c0030d 	sth	r3,12(r16)
100135d8:	dfc00117 	ldw	ra,4(sp)
100135dc:	dc000017 	ldw	r16,0(sp)
100135e0:	dec00204 	addi	sp,sp,8
100135e4:	f800283a 	ret
100135e8:	80c0030b 	ldhu	r3,12(r16)
100135ec:	18fbffcc 	andi	r3,r3,61439
100135f0:	80c0030d 	sth	r3,12(r16)
100135f4:	dfc00117 	ldw	ra,4(sp)
100135f8:	dc000017 	ldw	r16,0(sp)
100135fc:	dec00204 	addi	sp,sp,8
10013600:	f800283a 	ret

10013604 <__sclose>:
10013604:	2940038f 	ldh	r5,14(r5)
10013608:	0014e401 	jmpi	10014e40 <_close_r>

1001360c <strcmp>:
1001360c:	2144b03a 	or	r2,r4,r5
10013610:	108000cc 	andi	r2,r2,3
10013614:	1000171e 	bne	r2,zero,10013674 <strcmp+0x68>
10013618:	20800017 	ldw	r2,0(r4)
1001361c:	28c00017 	ldw	r3,0(r5)
10013620:	10c0141e 	bne	r2,r3,10013674 <strcmp+0x68>
10013624:	027fbff4 	movhi	r9,65279
10013628:	4a7fbfc4 	addi	r9,r9,-257
1001362c:	0086303a 	nor	r3,zero,r2
10013630:	02202074 	movhi	r8,32897
10013634:	1245883a 	add	r2,r2,r9
10013638:	42202004 	addi	r8,r8,-32640
1001363c:	10c4703a 	and	r2,r2,r3
10013640:	1204703a 	and	r2,r2,r8
10013644:	10000226 	beq	r2,zero,10013650 <strcmp+0x44>
10013648:	00002306 	br	100136d8 <strcmp+0xcc>
1001364c:	1000221e 	bne	r2,zero,100136d8 <strcmp+0xcc>
10013650:	21000104 	addi	r4,r4,4
10013654:	20c00017 	ldw	r3,0(r4)
10013658:	29400104 	addi	r5,r5,4
1001365c:	29800017 	ldw	r6,0(r5)
10013660:	1a4f883a 	add	r7,r3,r9
10013664:	00c4303a 	nor	r2,zero,r3
10013668:	3884703a 	and	r2,r7,r2
1001366c:	1204703a 	and	r2,r2,r8
10013670:	19bff626 	beq	r3,r6,1001364c <__alt_data_end+0xf801364c>
10013674:	20800003 	ldbu	r2,0(r4)
10013678:	10c03fcc 	andi	r3,r2,255
1001367c:	18c0201c 	xori	r3,r3,128
10013680:	18ffe004 	addi	r3,r3,-128
10013684:	18000c26 	beq	r3,zero,100136b8 <strcmp+0xac>
10013688:	29800007 	ldb	r6,0(r5)
1001368c:	19800326 	beq	r3,r6,1001369c <strcmp+0x90>
10013690:	00001306 	br	100136e0 <strcmp+0xd4>
10013694:	29800007 	ldb	r6,0(r5)
10013698:	11800b1e 	bne	r2,r6,100136c8 <strcmp+0xbc>
1001369c:	21000044 	addi	r4,r4,1
100136a0:	20c00003 	ldbu	r3,0(r4)
100136a4:	29400044 	addi	r5,r5,1
100136a8:	18803fcc 	andi	r2,r3,255
100136ac:	1080201c 	xori	r2,r2,128
100136b0:	10bfe004 	addi	r2,r2,-128
100136b4:	103ff71e 	bne	r2,zero,10013694 <__alt_data_end+0xf8013694>
100136b8:	0007883a 	mov	r3,zero
100136bc:	28800003 	ldbu	r2,0(r5)
100136c0:	1885c83a 	sub	r2,r3,r2
100136c4:	f800283a 	ret
100136c8:	28800003 	ldbu	r2,0(r5)
100136cc:	18c03fcc 	andi	r3,r3,255
100136d0:	1885c83a 	sub	r2,r3,r2
100136d4:	f800283a 	ret
100136d8:	0005883a 	mov	r2,zero
100136dc:	f800283a 	ret
100136e0:	10c03fcc 	andi	r3,r2,255
100136e4:	003ff506 	br	100136bc <__alt_data_end+0xf80136bc>

100136e8 <__sprint_r.part.0>:
100136e8:	28801917 	ldw	r2,100(r5)
100136ec:	defff604 	addi	sp,sp,-40
100136f0:	dd400515 	stw	r21,20(sp)
100136f4:	dfc00915 	stw	ra,36(sp)
100136f8:	df000815 	stw	fp,32(sp)
100136fc:	ddc00715 	stw	r23,28(sp)
10013700:	dd800615 	stw	r22,24(sp)
10013704:	dd000415 	stw	r20,16(sp)
10013708:	dcc00315 	stw	r19,12(sp)
1001370c:	dc800215 	stw	r18,8(sp)
10013710:	dc400115 	stw	r17,4(sp)
10013714:	dc000015 	stw	r16,0(sp)
10013718:	1088000c 	andi	r2,r2,8192
1001371c:	302b883a 	mov	r21,r6
10013720:	10002e26 	beq	r2,zero,100137dc <__sprint_r.part.0+0xf4>
10013724:	30800217 	ldw	r2,8(r6)
10013728:	35800017 	ldw	r22,0(r6)
1001372c:	10002926 	beq	r2,zero,100137d4 <__sprint_r.part.0+0xec>
10013730:	2827883a 	mov	r19,r5
10013734:	2029883a 	mov	r20,r4
10013738:	b5c00104 	addi	r23,r22,4
1001373c:	04bfffc4 	movi	r18,-1
10013740:	bc400017 	ldw	r17,0(r23)
10013744:	b4000017 	ldw	r16,0(r22)
10013748:	0039883a 	mov	fp,zero
1001374c:	8822d0ba 	srli	r17,r17,2
10013750:	8800031e 	bne	r17,zero,10013760 <__sprint_r.part.0+0x78>
10013754:	00001806 	br	100137b8 <__sprint_r.part.0+0xd0>
10013758:	84000104 	addi	r16,r16,4
1001375c:	8f001526 	beq	r17,fp,100137b4 <__sprint_r.part.0+0xcc>
10013760:	81400017 	ldw	r5,0(r16)
10013764:	980d883a 	mov	r6,r19
10013768:	a009883a 	mov	r4,r20
1001376c:	00151d80 	call	100151d8 <_fputwc_r>
10013770:	e7000044 	addi	fp,fp,1
10013774:	14bff81e 	bne	r2,r18,10013758 <__alt_data_end+0xf8013758>
10013778:	9005883a 	mov	r2,r18
1001377c:	a8000215 	stw	zero,8(r21)
10013780:	a8000115 	stw	zero,4(r21)
10013784:	dfc00917 	ldw	ra,36(sp)
10013788:	df000817 	ldw	fp,32(sp)
1001378c:	ddc00717 	ldw	r23,28(sp)
10013790:	dd800617 	ldw	r22,24(sp)
10013794:	dd400517 	ldw	r21,20(sp)
10013798:	dd000417 	ldw	r20,16(sp)
1001379c:	dcc00317 	ldw	r19,12(sp)
100137a0:	dc800217 	ldw	r18,8(sp)
100137a4:	dc400117 	ldw	r17,4(sp)
100137a8:	dc000017 	ldw	r16,0(sp)
100137ac:	dec00a04 	addi	sp,sp,40
100137b0:	f800283a 	ret
100137b4:	a8800217 	ldw	r2,8(r21)
100137b8:	8c63883a 	add	r17,r17,r17
100137bc:	8c63883a 	add	r17,r17,r17
100137c0:	1445c83a 	sub	r2,r2,r17
100137c4:	a8800215 	stw	r2,8(r21)
100137c8:	b5800204 	addi	r22,r22,8
100137cc:	bdc00204 	addi	r23,r23,8
100137d0:	103fdb1e 	bne	r2,zero,10013740 <__alt_data_end+0xf8013740>
100137d4:	0005883a 	mov	r2,zero
100137d8:	003fe806 	br	1001377c <__alt_data_end+0xf801377c>
100137dc:	00109900 	call	10010990 <__sfvwrite_r>
100137e0:	003fe606 	br	1001377c <__alt_data_end+0xf801377c>

100137e4 <__sprint_r>:
100137e4:	30c00217 	ldw	r3,8(r6)
100137e8:	18000126 	beq	r3,zero,100137f0 <__sprint_r+0xc>
100137ec:	00136e81 	jmpi	100136e8 <__sprint_r.part.0>
100137f0:	30000115 	stw	zero,4(r6)
100137f4:	0005883a 	mov	r2,zero
100137f8:	f800283a 	ret

100137fc <___vfiprintf_internal_r>:
100137fc:	deffca04 	addi	sp,sp,-216
10013800:	dd403115 	stw	r21,196(sp)
10013804:	dfc03515 	stw	ra,212(sp)
10013808:	df003415 	stw	fp,208(sp)
1001380c:	ddc03315 	stw	r23,204(sp)
10013810:	dd803215 	stw	r22,200(sp)
10013814:	dd003015 	stw	r20,192(sp)
10013818:	dcc02f15 	stw	r19,188(sp)
1001381c:	dc802e15 	stw	r18,184(sp)
10013820:	dc402d15 	stw	r17,180(sp)
10013824:	dc002c15 	stw	r16,176(sp)
10013828:	d9002115 	stw	r4,132(sp)
1001382c:	d9402015 	stw	r5,128(sp)
10013830:	d9c02215 	stw	r7,136(sp)
10013834:	302b883a 	mov	r21,r6
10013838:	20000226 	beq	r4,zero,10013844 <___vfiprintf_internal_r+0x48>
1001383c:	20800e17 	ldw	r2,56(r4)
10013840:	1000cf26 	beq	r2,zero,10013b80 <___vfiprintf_internal_r+0x384>
10013844:	d8c02017 	ldw	r3,128(sp)
10013848:	1880030b 	ldhu	r2,12(r3)
1001384c:	10c8000c 	andi	r3,r2,8192
10013850:	1800071e 	bne	r3,zero,10013870 <___vfiprintf_internal_r+0x74>
10013854:	d9402017 	ldw	r5,128(sp)
10013858:	00f7ffc4 	movi	r3,-8193
1001385c:	10880014 	ori	r2,r2,8192
10013860:	29001917 	ldw	r4,100(r5)
10013864:	2880030d 	sth	r2,12(r5)
10013868:	20c6703a 	and	r3,r4,r3
1001386c:	28c01915 	stw	r3,100(r5)
10013870:	10c0020c 	andi	r3,r2,8
10013874:	1800a526 	beq	r3,zero,10013b0c <___vfiprintf_internal_r+0x310>
10013878:	d9002017 	ldw	r4,128(sp)
1001387c:	20c00417 	ldw	r3,16(r4)
10013880:	1800a226 	beq	r3,zero,10013b0c <___vfiprintf_internal_r+0x310>
10013884:	1080068c 	andi	r2,r2,26
10013888:	00c00284 	movi	r3,10
1001388c:	10c0a826 	beq	r2,r3,10013b30 <___vfiprintf_internal_r+0x334>
10013890:	d9001a04 	addi	r4,sp,104
10013894:	d94019c4 	addi	r5,sp,103
10013898:	048400b4 	movhi	r18,4098
1001389c:	2145c83a 	sub	r2,r4,r5
100138a0:	94a4e104 	addi	r18,r18,-27772
100138a4:	d9001e15 	stw	r4,120(sp)
100138a8:	d9401f15 	stw	r5,124(sp)
100138ac:	dec01a15 	stw	sp,104(sp)
100138b0:	d8001c15 	stw	zero,112(sp)
100138b4:	d8001b15 	stw	zero,108(sp)
100138b8:	d811883a 	mov	r8,sp
100138bc:	d8002615 	stw	zero,152(sp)
100138c0:	d8002415 	stw	zero,144(sp)
100138c4:	d8802815 	stw	r2,160(sp)
100138c8:	a82d883a 	mov	r22,r21
100138cc:	b0800007 	ldb	r2,0(r22)
100138d0:	10040d26 	beq	r2,zero,10014908 <___vfiprintf_internal_r+0x110c>
100138d4:	00c00944 	movi	r3,37
100138d8:	b029883a 	mov	r20,r22
100138dc:	10c0021e 	bne	r2,r3,100138e8 <___vfiprintf_internal_r+0xec>
100138e0:	00001606 	br	1001393c <___vfiprintf_internal_r+0x140>
100138e4:	10c00326 	beq	r2,r3,100138f4 <___vfiprintf_internal_r+0xf8>
100138e8:	a5000044 	addi	r20,r20,1
100138ec:	a0800007 	ldb	r2,0(r20)
100138f0:	103ffc1e 	bne	r2,zero,100138e4 <__alt_data_end+0xf80138e4>
100138f4:	a5a1c83a 	sub	r16,r20,r22
100138f8:	80001026 	beq	r16,zero,1001393c <___vfiprintf_internal_r+0x140>
100138fc:	d8c01c17 	ldw	r3,112(sp)
10013900:	d8801b17 	ldw	r2,108(sp)
10013904:	45800015 	stw	r22,0(r8)
10013908:	80c7883a 	add	r3,r16,r3
1001390c:	10800044 	addi	r2,r2,1
10013910:	44000115 	stw	r16,4(r8)
10013914:	d8c01c15 	stw	r3,112(sp)
10013918:	d8801b15 	stw	r2,108(sp)
1001391c:	010001c4 	movi	r4,7
10013920:	2080750e 	bge	r4,r2,10013af8 <___vfiprintf_internal_r+0x2fc>
10013924:	1803951e 	bne	r3,zero,1001477c <___vfiprintf_internal_r+0xf80>
10013928:	d8c02417 	ldw	r3,144(sp)
1001392c:	d8001b15 	stw	zero,108(sp)
10013930:	d811883a 	mov	r8,sp
10013934:	1c07883a 	add	r3,r3,r16
10013938:	d8c02415 	stw	r3,144(sp)
1001393c:	a0800007 	ldb	r2,0(r20)
10013940:	1002e026 	beq	r2,zero,100144c4 <___vfiprintf_internal_r+0xcc8>
10013944:	a5800044 	addi	r22,r20,1
10013948:	a0c00047 	ldb	r3,1(r20)
1001394c:	d8001d85 	stb	zero,118(sp)
10013950:	0027883a 	mov	r19,zero
10013954:	d8002305 	stb	zero,140(sp)
10013958:	043fffc4 	movi	r16,-1
1001395c:	d8002515 	stw	zero,148(sp)
10013960:	0023883a 	mov	r17,zero
10013964:	05001604 	movi	r20,88
10013968:	05400244 	movi	r21,9
1001396c:	402f883a 	mov	r23,r8
10013970:	b5800044 	addi	r22,r22,1
10013974:	18bff804 	addi	r2,r3,-32
10013978:	a0827736 	bltu	r20,r2,10014358 <___vfiprintf_internal_r+0xb5c>
1001397c:	100490ba 	slli	r2,r2,2
10013980:	01040074 	movhi	r4,4097
10013984:	210e6504 	addi	r4,r4,14740
10013988:	1105883a 	add	r2,r2,r4
1001398c:	10800017 	ldw	r2,0(r2)
10013990:	1000683a 	jmp	r2
10013994:	10014058 	cmpnei	zero,r2,1281
10013998:	10014358 	cmpnei	zero,r2,1293
1001399c:	10014358 	cmpnei	zero,r2,1293
100139a0:	10014074 	orhi	zero,r2,1281
100139a4:	10014358 	cmpnei	zero,r2,1293
100139a8:	10014358 	cmpnei	zero,r2,1293
100139ac:	10014358 	cmpnei	zero,r2,1293
100139b0:	10014358 	cmpnei	zero,r2,1293
100139b4:	10014358 	cmpnei	zero,r2,1293
100139b8:	10014358 	cmpnei	zero,r2,1293
100139bc:	1001427c 	xorhi	zero,r2,1289
100139c0:	100142a0 	cmpeqi	zero,r2,1290
100139c4:	10014358 	cmpnei	zero,r2,1293
100139c8:	10013b98 	cmpnei	zero,r2,1262
100139cc:	100142b4 	orhi	zero,r2,1290
100139d0:	10014358 	cmpnei	zero,r2,1293
100139d4:	10014080 	call	11001408 <__alt_heap_start+0xe6c760>
100139d8:	1001408c 	andi	zero,r2,1282
100139dc:	1001408c 	andi	zero,r2,1282
100139e0:	1001408c 	andi	zero,r2,1282
100139e4:	1001408c 	andi	zero,r2,1282
100139e8:	1001408c 	andi	zero,r2,1282
100139ec:	1001408c 	andi	zero,r2,1282
100139f0:	1001408c 	andi	zero,r2,1282
100139f4:	1001408c 	andi	zero,r2,1282
100139f8:	1001408c 	andi	zero,r2,1282
100139fc:	10014358 	cmpnei	zero,r2,1293
10013a00:	10014358 	cmpnei	zero,r2,1293
10013a04:	10014358 	cmpnei	zero,r2,1293
10013a08:	10014358 	cmpnei	zero,r2,1293
10013a0c:	10014358 	cmpnei	zero,r2,1293
10013a10:	10014358 	cmpnei	zero,r2,1293
10013a14:	10014358 	cmpnei	zero,r2,1293
10013a18:	10014358 	cmpnei	zero,r2,1293
10013a1c:	10014358 	cmpnei	zero,r2,1293
10013a20:	10014358 	cmpnei	zero,r2,1293
10013a24:	100140cc 	andi	zero,r2,1283
10013a28:	10014358 	cmpnei	zero,r2,1293
10013a2c:	10014358 	cmpnei	zero,r2,1293
10013a30:	10014358 	cmpnei	zero,r2,1293
10013a34:	10014358 	cmpnei	zero,r2,1293
10013a38:	10014358 	cmpnei	zero,r2,1293
10013a3c:	10014358 	cmpnei	zero,r2,1293
10013a40:	10014358 	cmpnei	zero,r2,1293
10013a44:	10014358 	cmpnei	zero,r2,1293
10013a48:	10014358 	cmpnei	zero,r2,1293
10013a4c:	10014358 	cmpnei	zero,r2,1293
10013a50:	10014108 	cmpgei	zero,r2,1284
10013a54:	10014358 	cmpnei	zero,r2,1293
10013a58:	10014358 	cmpnei	zero,r2,1293
10013a5c:	10014358 	cmpnei	zero,r2,1293
10013a60:	10014358 	cmpnei	zero,r2,1293
10013a64:	10014358 	cmpnei	zero,r2,1293
10013a68:	10014164 	muli	zero,r2,1285
10013a6c:	10014358 	cmpnei	zero,r2,1293
10013a70:	10014358 	cmpnei	zero,r2,1293
10013a74:	100141d8 	cmpnei	zero,r2,1287
10013a78:	10014358 	cmpnei	zero,r2,1293
10013a7c:	10014358 	cmpnei	zero,r2,1293
10013a80:	10014358 	cmpnei	zero,r2,1293
10013a84:	10014358 	cmpnei	zero,r2,1293
10013a88:	10014358 	cmpnei	zero,r2,1293
10013a8c:	10014358 	cmpnei	zero,r2,1293
10013a90:	10014358 	cmpnei	zero,r2,1293
10013a94:	10014358 	cmpnei	zero,r2,1293
10013a98:	10014358 	cmpnei	zero,r2,1293
10013a9c:	10014358 	cmpnei	zero,r2,1293
10013aa0:	10013f80 	call	110013f8 <__alt_heap_start+0xe6c750>
10013aa4:	10013fb0 	cmpltui	zero,r2,1278
10013aa8:	10014358 	cmpnei	zero,r2,1293
10013aac:	10014358 	cmpnei	zero,r2,1293
10013ab0:	10014358 	cmpnei	zero,r2,1293
10013ab4:	10014300 	call	11001430 <__alt_heap_start+0xe6c788>
10013ab8:	10013fb0 	cmpltui	zero,r2,1278
10013abc:	10014358 	cmpnei	zero,r2,1293
10013ac0:	10014358 	cmpnei	zero,r2,1293
10013ac4:	10013e58 	cmpnei	zero,r2,1273
10013ac8:	10014358 	cmpnei	zero,r2,1293
10013acc:	10013e6c 	andhi	zero,r2,1273
10013ad0:	10013ea4 	muli	zero,r2,1274
10013ad4:	10013ba4 	muli	zero,r2,1262
10013ad8:	10013e4c 	andi	zero,r2,1273
10013adc:	10014358 	cmpnei	zero,r2,1293
10013ae0:	10014218 	cmpnei	zero,r2,1288
10013ae4:	10014358 	cmpnei	zero,r2,1293
10013ae8:	10014264 	muli	zero,r2,1289
10013aec:	10014358 	cmpnei	zero,r2,1293
10013af0:	10014358 	cmpnei	zero,r2,1293
10013af4:	10013f28 	cmpgeui	zero,r2,1276
10013af8:	42000204 	addi	r8,r8,8
10013afc:	d8c02417 	ldw	r3,144(sp)
10013b00:	1c07883a 	add	r3,r3,r16
10013b04:	d8c02415 	stw	r3,144(sp)
10013b08:	003f8c06 	br	1001393c <__alt_data_end+0xf801393c>
10013b0c:	d9402017 	ldw	r5,128(sp)
10013b10:	d9002117 	ldw	r4,132(sp)
10013b14:	000e5000 	call	1000e500 <__swsetup_r>
10013b18:	1003c11e 	bne	r2,zero,10014a20 <___vfiprintf_internal_r+0x1224>
10013b1c:	d9402017 	ldw	r5,128(sp)
10013b20:	00c00284 	movi	r3,10
10013b24:	2880030b 	ldhu	r2,12(r5)
10013b28:	1080068c 	andi	r2,r2,26
10013b2c:	10ff581e 	bne	r2,r3,10013890 <__alt_data_end+0xf8013890>
10013b30:	d8c02017 	ldw	r3,128(sp)
10013b34:	1880038f 	ldh	r2,14(r3)
10013b38:	103f5516 	blt	r2,zero,10013890 <__alt_data_end+0xf8013890>
10013b3c:	d9c02217 	ldw	r7,136(sp)
10013b40:	d9002117 	ldw	r4,132(sp)
10013b44:	a80d883a 	mov	r6,r21
10013b48:	180b883a 	mov	r5,r3
10013b4c:	0014d240 	call	10014d24 <__sbprintf>
10013b50:	dfc03517 	ldw	ra,212(sp)
10013b54:	df003417 	ldw	fp,208(sp)
10013b58:	ddc03317 	ldw	r23,204(sp)
10013b5c:	dd803217 	ldw	r22,200(sp)
10013b60:	dd403117 	ldw	r21,196(sp)
10013b64:	dd003017 	ldw	r20,192(sp)
10013b68:	dcc02f17 	ldw	r19,188(sp)
10013b6c:	dc802e17 	ldw	r18,184(sp)
10013b70:	dc402d17 	ldw	r17,180(sp)
10013b74:	dc002c17 	ldw	r16,176(sp)
10013b78:	dec03604 	addi	sp,sp,216
10013b7c:	f800283a 	ret
10013b80:	001050c0 	call	1001050c <__sinit>
10013b84:	003f2f06 	br	10013844 <__alt_data_end+0xf8013844>
10013b88:	d8c02517 	ldw	r3,148(sp)
10013b8c:	d8802215 	stw	r2,136(sp)
10013b90:	00c7c83a 	sub	r3,zero,r3
10013b94:	d8c02515 	stw	r3,148(sp)
10013b98:	8c400114 	ori	r17,r17,4
10013b9c:	b0c00007 	ldb	r3,0(r22)
10013ba0:	003f7306 	br	10013970 <__alt_data_end+0xf8013970>
10013ba4:	00800c04 	movi	r2,48
10013ba8:	d9402217 	ldw	r5,136(sp)
10013bac:	d8801d05 	stb	r2,116(sp)
10013bb0:	00801e04 	movi	r2,120
10013bb4:	d8801d45 	stb	r2,117(sp)
10013bb8:	d8001d85 	stb	zero,118(sp)
10013bbc:	b811883a 	mov	r8,r23
10013bc0:	28c00104 	addi	r3,r5,4
10013bc4:	2cc00017 	ldw	r19,0(r5)
10013bc8:	0029883a 	mov	r20,zero
10013bcc:	88800094 	ori	r2,r17,2
10013bd0:	80032516 	blt	r16,zero,10014868 <___vfiprintf_internal_r+0x106c>
10013bd4:	00bfdfc4 	movi	r2,-129
10013bd8:	88a2703a 	and	r17,r17,r2
10013bdc:	d8c02215 	stw	r3,136(sp)
10013be0:	8c400094 	ori	r17,r17,2
10013be4:	98032a1e 	bne	r19,zero,10014890 <___vfiprintf_internal_r+0x1094>
10013be8:	008400b4 	movhi	r2,4098
10013bec:	10a48004 	addi	r2,r2,-28160
10013bf0:	d8802615 	stw	r2,152(sp)
10013bf4:	002b883a 	mov	r21,zero
10013bf8:	8001741e 	bne	r16,zero,100141cc <___vfiprintf_internal_r+0x9d0>
10013bfc:	0021883a 	mov	r16,zero
10013c00:	0029883a 	mov	r20,zero
10013c04:	ddc01a04 	addi	r23,sp,104
10013c08:	8027883a 	mov	r19,r16
10013c0c:	8500010e 	bge	r16,r20,10013c14 <___vfiprintf_internal_r+0x418>
10013c10:	a027883a 	mov	r19,r20
10013c14:	ad403fcc 	andi	r21,r21,255
10013c18:	ad40201c 	xori	r21,r21,128
10013c1c:	ad7fe004 	addi	r21,r21,-128
10013c20:	a8000126 	beq	r21,zero,10013c28 <___vfiprintf_internal_r+0x42c>
10013c24:	9cc00044 	addi	r19,r19,1
10013c28:	89c0008c 	andi	r7,r17,2
10013c2c:	38000126 	beq	r7,zero,10013c34 <___vfiprintf_internal_r+0x438>
10013c30:	9cc00084 	addi	r19,r19,2
10013c34:	88c0210c 	andi	r3,r17,132
10013c38:	1801dd1e 	bne	r3,zero,100143b0 <___vfiprintf_internal_r+0xbb4>
10013c3c:	d9402517 	ldw	r5,148(sp)
10013c40:	2cebc83a 	sub	r21,r5,r19
10013c44:	0541da0e 	bge	zero,r21,100143b0 <___vfiprintf_internal_r+0xbb4>
10013c48:	07000404 	movi	fp,16
10013c4c:	d8801c17 	ldw	r2,112(sp)
10013c50:	e543be0e 	bge	fp,r21,10014b4c <___vfiprintf_internal_r+0x1350>
10013c54:	014400b4 	movhi	r5,4098
10013c58:	2964e504 	addi	r5,r5,-27756
10013c5c:	dc002715 	stw	r16,156(sp)
10013c60:	d9801b17 	ldw	r6,108(sp)
10013c64:	a821883a 	mov	r16,r21
10013c68:	d9402315 	stw	r5,140(sp)
10013c6c:	028001c4 	movi	r10,7
10013c70:	d9c02915 	stw	r7,164(sp)
10013c74:	182b883a 	mov	r21,r3
10013c78:	00000506 	br	10013c90 <___vfiprintf_internal_r+0x494>
10013c7c:	31000084 	addi	r4,r6,2
10013c80:	42000204 	addi	r8,r8,8
10013c84:	180d883a 	mov	r6,r3
10013c88:	843ffc04 	addi	r16,r16,-16
10013c8c:	e4000f0e 	bge	fp,r16,10013ccc <___vfiprintf_internal_r+0x4d0>
10013c90:	010400b4 	movhi	r4,4098
10013c94:	10800404 	addi	r2,r2,16
10013c98:	30c00044 	addi	r3,r6,1
10013c9c:	2124e504 	addi	r4,r4,-27756
10013ca0:	41000015 	stw	r4,0(r8)
10013ca4:	47000115 	stw	fp,4(r8)
10013ca8:	d8801c15 	stw	r2,112(sp)
10013cac:	d8c01b15 	stw	r3,108(sp)
10013cb0:	50fff20e 	bge	r10,r3,10013c7c <__alt_data_end+0xf8013c7c>
10013cb4:	1001b21e 	bne	r2,zero,10014380 <___vfiprintf_internal_r+0xb84>
10013cb8:	843ffc04 	addi	r16,r16,-16
10013cbc:	000d883a 	mov	r6,zero
10013cc0:	01000044 	movi	r4,1
10013cc4:	d811883a 	mov	r8,sp
10013cc8:	e43ff116 	blt	fp,r16,10013c90 <__alt_data_end+0xf8013c90>
10013ccc:	a807883a 	mov	r3,r21
10013cd0:	d9c02917 	ldw	r7,164(sp)
10013cd4:	802b883a 	mov	r21,r16
10013cd8:	dc002717 	ldw	r16,156(sp)
10013cdc:	d9402317 	ldw	r5,140(sp)
10013ce0:	a885883a 	add	r2,r21,r2
10013ce4:	45400115 	stw	r21,4(r8)
10013ce8:	41400015 	stw	r5,0(r8)
10013cec:	d8801c15 	stw	r2,112(sp)
10013cf0:	d9001b15 	stw	r4,108(sp)
10013cf4:	014001c4 	movi	r5,7
10013cf8:	29026216 	blt	r5,r4,10014684 <___vfiprintf_internal_r+0xe88>
10013cfc:	d9801d87 	ldb	r6,118(sp)
10013d00:	42000204 	addi	r8,r8,8
10013d04:	21400044 	addi	r5,r4,1
10013d08:	3001ae1e 	bne	r6,zero,100143c4 <___vfiprintf_internal_r+0xbc8>
10013d0c:	3801bb26 	beq	r7,zero,100143fc <___vfiprintf_internal_r+0xc00>
10013d10:	d9001d04 	addi	r4,sp,116
10013d14:	10800084 	addi	r2,r2,2
10013d18:	41000015 	stw	r4,0(r8)
10013d1c:	01000084 	movi	r4,2
10013d20:	41000115 	stw	r4,4(r8)
10013d24:	d8801c15 	stw	r2,112(sp)
10013d28:	d9401b15 	stw	r5,108(sp)
10013d2c:	010001c4 	movi	r4,7
10013d30:	2142680e 	bge	r4,r5,100146d4 <___vfiprintf_internal_r+0xed8>
10013d34:	1002b11e 	bne	r2,zero,100147fc <___vfiprintf_internal_r+0x1000>
10013d38:	01802004 	movi	r6,128
10013d3c:	01400044 	movi	r5,1
10013d40:	0009883a 	mov	r4,zero
10013d44:	d811883a 	mov	r8,sp
10013d48:	1981ae1e 	bne	r3,r6,10014404 <___vfiprintf_internal_r+0xc08>
10013d4c:	d8c02517 	ldw	r3,148(sp)
10013d50:	1cf9c83a 	sub	fp,r3,r19
10013d54:	0701ab0e 	bge	zero,fp,10014404 <___vfiprintf_internal_r+0xc08>
10013d58:	05400404 	movi	r21,16
10013d5c:	af03a90e 	bge	r21,fp,10014c04 <___vfiprintf_internal_r+0x1408>
10013d60:	014400b4 	movhi	r5,4098
10013d64:	2964e104 	addi	r5,r5,-27772
10013d68:	d9402315 	stw	r5,140(sp)
10013d6c:	01c001c4 	movi	r7,7
10013d70:	00000506 	br	10013d88 <___vfiprintf_internal_r+0x58c>
10013d74:	21800084 	addi	r6,r4,2
10013d78:	42000204 	addi	r8,r8,8
10013d7c:	1809883a 	mov	r4,r3
10013d80:	e73ffc04 	addi	fp,fp,-16
10013d84:	af000d0e 	bge	r21,fp,10013dbc <___vfiprintf_internal_r+0x5c0>
10013d88:	10800404 	addi	r2,r2,16
10013d8c:	20c00044 	addi	r3,r4,1
10013d90:	44800015 	stw	r18,0(r8)
10013d94:	45400115 	stw	r21,4(r8)
10013d98:	d8801c15 	stw	r2,112(sp)
10013d9c:	d8c01b15 	stw	r3,108(sp)
10013da0:	38fff40e 	bge	r7,r3,10013d74 <__alt_data_end+0xf8013d74>
10013da4:	10022b1e 	bne	r2,zero,10014654 <___vfiprintf_internal_r+0xe58>
10013da8:	e73ffc04 	addi	fp,fp,-16
10013dac:	01800044 	movi	r6,1
10013db0:	0009883a 	mov	r4,zero
10013db4:	d811883a 	mov	r8,sp
10013db8:	af3ff316 	blt	r21,fp,10013d88 <__alt_data_end+0xf8013d88>
10013dbc:	d8c02317 	ldw	r3,140(sp)
10013dc0:	1705883a 	add	r2,r2,fp
10013dc4:	47000115 	stw	fp,4(r8)
10013dc8:	40c00015 	stw	r3,0(r8)
10013dcc:	d8801c15 	stw	r2,112(sp)
10013dd0:	d9801b15 	stw	r6,108(sp)
10013dd4:	00c001c4 	movi	r3,7
10013dd8:	19829416 	blt	r3,r6,1001482c <___vfiprintf_internal_r+0x1030>
10013ddc:	8521c83a 	sub	r16,r16,r20
10013de0:	42000204 	addi	r8,r8,8
10013de4:	31400044 	addi	r5,r6,1
10013de8:	3009883a 	mov	r4,r6
10013dec:	04018716 	blt	zero,r16,1001440c <___vfiprintf_internal_r+0xc10>
10013df0:	a085883a 	add	r2,r20,r2
10013df4:	45c00015 	stw	r23,0(r8)
10013df8:	45000115 	stw	r20,4(r8)
10013dfc:	d8801c15 	stw	r2,112(sp)
10013e00:	d9401b15 	stw	r5,108(sp)
10013e04:	00c001c4 	movi	r3,7
10013e08:	1941c20e 	bge	r3,r5,10014514 <___vfiprintf_internal_r+0xd18>
10013e0c:	1002531e 	bne	r2,zero,1001475c <___vfiprintf_internal_r+0xf60>
10013e10:	d8001b15 	stw	zero,108(sp)
10013e14:	8c40010c 	andi	r17,r17,4
10013e18:	88023226 	beq	r17,zero,100146e4 <___vfiprintf_internal_r+0xee8>
10013e1c:	d9002517 	ldw	r4,148(sp)
10013e20:	24e3c83a 	sub	r17,r4,r19
10013e24:	04432916 	blt	zero,r17,10014acc <___vfiprintf_internal_r+0x12d0>
10013e28:	d8802517 	ldw	r2,148(sp)
10013e2c:	14c0010e 	bge	r2,r19,10013e34 <___vfiprintf_internal_r+0x638>
10013e30:	9805883a 	mov	r2,r19
10013e34:	d8c02417 	ldw	r3,144(sp)
10013e38:	1887883a 	add	r3,r3,r2
10013e3c:	d8c02415 	stw	r3,144(sp)
10013e40:	d8001b15 	stw	zero,108(sp)
10013e44:	d811883a 	mov	r8,sp
10013e48:	003ea006 	br	100138cc <__alt_data_end+0xf80138cc>
10013e4c:	8c400814 	ori	r17,r17,32
10013e50:	b0c00007 	ldb	r3,0(r22)
10013e54:	003ec606 	br	10013970 <__alt_data_end+0xf8013970>
10013e58:	b0c00007 	ldb	r3,0(r22)
10013e5c:	00801b04 	movi	r2,108
10013e60:	18832026 	beq	r3,r2,10014ae4 <___vfiprintf_internal_r+0x12e8>
10013e64:	8c400414 	ori	r17,r17,16
10013e68:	003ec106 	br	10013970 <__alt_data_end+0xf8013970>
10013e6c:	9cc03fcc 	andi	r19,r19,255
10013e70:	b811883a 	mov	r8,r23
10013e74:	9803981e 	bne	r19,zero,10014cd8 <___vfiprintf_internal_r+0x14dc>
10013e78:	8880080c 	andi	r2,r17,32
10013e7c:	1002be26 	beq	r2,zero,10014978 <___vfiprintf_internal_r+0x117c>
10013e80:	d9002217 	ldw	r4,136(sp)
10013e84:	d9402417 	ldw	r5,144(sp)
10013e88:	20800017 	ldw	r2,0(r4)
10013e8c:	2807d7fa 	srai	r3,r5,31
10013e90:	21000104 	addi	r4,r4,4
10013e94:	d9002215 	stw	r4,136(sp)
10013e98:	11400015 	stw	r5,0(r2)
10013e9c:	10c00115 	stw	r3,4(r2)
10013ea0:	003e8a06 	br	100138cc <__alt_data_end+0xf80138cc>
10013ea4:	9cc03fcc 	andi	r19,r19,255
10013ea8:	b811883a 	mov	r8,r23
10013eac:	9803871e 	bne	r19,zero,10014ccc <___vfiprintf_internal_r+0x14d0>
10013eb0:	8880080c 	andi	r2,r17,32
10013eb4:	10009a26 	beq	r2,zero,10014120 <___vfiprintf_internal_r+0x924>
10013eb8:	d9002217 	ldw	r4,136(sp)
10013ebc:	d8001d85 	stb	zero,118(sp)
10013ec0:	20800204 	addi	r2,r4,8
10013ec4:	24c00017 	ldw	r19,0(r4)
10013ec8:	25000117 	ldw	r20,4(r4)
10013ecc:	8002a416 	blt	r16,zero,10014960 <___vfiprintf_internal_r+0x1164>
10013ed0:	013fdfc4 	movi	r4,-129
10013ed4:	9d06b03a 	or	r3,r19,r20
10013ed8:	d8802215 	stw	r2,136(sp)
10013edc:	8922703a 	and	r17,r17,r4
10013ee0:	18009b26 	beq	r3,zero,10014150 <___vfiprintf_internal_r+0x954>
10013ee4:	002b883a 	mov	r21,zero
10013ee8:	ddc01a04 	addi	r23,sp,104
10013eec:	9806d0fa 	srli	r3,r19,3
10013ef0:	a008977a 	slli	r4,r20,29
10013ef4:	a028d0fa 	srli	r20,r20,3
10013ef8:	9cc001cc 	andi	r19,r19,7
10013efc:	98800c04 	addi	r2,r19,48
10013f00:	bdffffc4 	addi	r23,r23,-1
10013f04:	20e6b03a 	or	r19,r4,r3
10013f08:	b8800005 	stb	r2,0(r23)
10013f0c:	9d06b03a 	or	r3,r19,r20
10013f10:	183ff61e 	bne	r3,zero,10013eec <__alt_data_end+0xf8013eec>
10013f14:	88c0004c 	andi	r3,r17,1
10013f18:	18021f1e 	bne	r3,zero,10014798 <___vfiprintf_internal_r+0xf9c>
10013f1c:	d9401e17 	ldw	r5,120(sp)
10013f20:	2de9c83a 	sub	r20,r5,r23
10013f24:	003f3806 	br	10013c08 <__alt_data_end+0xf8013c08>
10013f28:	9cc03fcc 	andi	r19,r19,255
10013f2c:	b811883a 	mov	r8,r23
10013f30:	98034f1e 	bne	r19,zero,10014c70 <___vfiprintf_internal_r+0x1474>
10013f34:	008400b4 	movhi	r2,4098
10013f38:	10a48004 	addi	r2,r2,-28160
10013f3c:	d8802615 	stw	r2,152(sp)
10013f40:	8880080c 	andi	r2,r17,32
10013f44:	1000ac26 	beq	r2,zero,100141f8 <___vfiprintf_internal_r+0x9fc>
10013f48:	d9002217 	ldw	r4,136(sp)
10013f4c:	24c00017 	ldw	r19,0(r4)
10013f50:	25000117 	ldw	r20,4(r4)
10013f54:	21000204 	addi	r4,r4,8
10013f58:	d9002215 	stw	r4,136(sp)
10013f5c:	8880004c 	andi	r2,r17,1
10013f60:	1001e726 	beq	r2,zero,10014700 <___vfiprintf_internal_r+0xf04>
10013f64:	9d04b03a 	or	r2,r19,r20
10013f68:	10025c1e 	bne	r2,zero,100148dc <___vfiprintf_internal_r+0x10e0>
10013f6c:	d8001d85 	stb	zero,118(sp)
10013f70:	80024416 	blt	r16,zero,10014884 <___vfiprintf_internal_r+0x1088>
10013f74:	00bfdfc4 	movi	r2,-129
10013f78:	88a2703a 	and	r17,r17,r2
10013f7c:	003f1d06 	br	10013bf4 <__alt_data_end+0xf8013bf4>
10013f80:	d8c02217 	ldw	r3,136(sp)
10013f84:	04c00044 	movi	r19,1
10013f88:	b811883a 	mov	r8,r23
10013f8c:	18800017 	ldw	r2,0(r3)
10013f90:	18c00104 	addi	r3,r3,4
10013f94:	d8001d85 	stb	zero,118(sp)
10013f98:	d8801005 	stb	r2,64(sp)
10013f9c:	d8c02215 	stw	r3,136(sp)
10013fa0:	9829883a 	mov	r20,r19
10013fa4:	ddc01004 	addi	r23,sp,64
10013fa8:	0021883a 	mov	r16,zero
10013fac:	003f1e06 	br	10013c28 <__alt_data_end+0xf8013c28>
10013fb0:	9cc03fcc 	andi	r19,r19,255
10013fb4:	b811883a 	mov	r8,r23
10013fb8:	9803331e 	bne	r19,zero,10014c88 <___vfiprintf_internal_r+0x148c>
10013fbc:	8880080c 	andi	r2,r17,32
10013fc0:	10004826 	beq	r2,zero,100140e4 <___vfiprintf_internal_r+0x8e8>
10013fc4:	d9002217 	ldw	r4,136(sp)
10013fc8:	20800117 	ldw	r2,4(r4)
10013fcc:	24c00017 	ldw	r19,0(r4)
10013fd0:	21000204 	addi	r4,r4,8
10013fd4:	d9002215 	stw	r4,136(sp)
10013fd8:	1029883a 	mov	r20,r2
10013fdc:	10024c16 	blt	r2,zero,10014910 <___vfiprintf_internal_r+0x1114>
10013fe0:	dd401d83 	ldbu	r21,118(sp)
10013fe4:	80007116 	blt	r16,zero,100141ac <___vfiprintf_internal_r+0x9b0>
10013fe8:	00ffdfc4 	movi	r3,-129
10013fec:	9d04b03a 	or	r2,r19,r20
10013ff0:	88e2703a 	and	r17,r17,r3
10013ff4:	1000d126 	beq	r2,zero,1001433c <___vfiprintf_internal_r+0xb40>
10013ff8:	a0023526 	beq	r20,zero,100148d0 <___vfiprintf_internal_r+0x10d4>
10013ffc:	ddc01a04 	addi	r23,sp,104
10014000:	4039883a 	mov	fp,r8
10014004:	9809883a 	mov	r4,r19
10014008:	a00b883a 	mov	r5,r20
1001400c:	01800284 	movi	r6,10
10014010:	000f883a 	mov	r7,zero
10014014:	0015d280 	call	10015d28 <__umoddi3>
10014018:	10800c04 	addi	r2,r2,48
1001401c:	bdffffc4 	addi	r23,r23,-1
10014020:	9809883a 	mov	r4,r19
10014024:	a00b883a 	mov	r5,r20
10014028:	b8800005 	stb	r2,0(r23)
1001402c:	01800284 	movi	r6,10
10014030:	000f883a 	mov	r7,zero
10014034:	001572c0 	call	1001572c <__udivdi3>
10014038:	1027883a 	mov	r19,r2
1001403c:	10c4b03a 	or	r2,r2,r3
10014040:	1829883a 	mov	r20,r3
10014044:	103fef1e 	bne	r2,zero,10014004 <__alt_data_end+0xf8014004>
10014048:	d9001e17 	ldw	r4,120(sp)
1001404c:	e011883a 	mov	r8,fp
10014050:	25e9c83a 	sub	r20,r4,r23
10014054:	003eec06 	br	10013c08 <__alt_data_end+0xf8013c08>
10014058:	d8802307 	ldb	r2,140(sp)
1001405c:	1002361e 	bne	r2,zero,10014938 <___vfiprintf_internal_r+0x113c>
10014060:	00c00804 	movi	r3,32
10014064:	d8c02305 	stb	r3,140(sp)
10014068:	04c00044 	movi	r19,1
1001406c:	b0c00007 	ldb	r3,0(r22)
10014070:	003e3f06 	br	10013970 <__alt_data_end+0xf8013970>
10014074:	8c400054 	ori	r17,r17,1
10014078:	b0c00007 	ldb	r3,0(r22)
1001407c:	003e3c06 	br	10013970 <__alt_data_end+0xf8013970>
10014080:	8c402014 	ori	r17,r17,128
10014084:	b0c00007 	ldb	r3,0(r22)
10014088:	003e3906 	br	10013970 <__alt_data_end+0xf8013970>
1001408c:	dc002715 	stw	r16,156(sp)
10014090:	d8002515 	stw	zero,148(sp)
10014094:	1f3ff404 	addi	fp,r3,-48
10014098:	0009883a 	mov	r4,zero
1001409c:	b021883a 	mov	r16,r22
100140a0:	01400284 	movi	r5,10
100140a4:	00096fc0 	call	100096fc <__mulsi3>
100140a8:	80c00007 	ldb	r3,0(r16)
100140ac:	e089883a 	add	r4,fp,r2
100140b0:	b5800044 	addi	r22,r22,1
100140b4:	1f3ff404 	addi	fp,r3,-48
100140b8:	b021883a 	mov	r16,r22
100140bc:	af3ff82e 	bgeu	r21,fp,100140a0 <__alt_data_end+0xf80140a0>
100140c0:	d9002515 	stw	r4,148(sp)
100140c4:	dc002717 	ldw	r16,156(sp)
100140c8:	003e2a06 	br	10013974 <__alt_data_end+0xf8013974>
100140cc:	9cc03fcc 	andi	r19,r19,255
100140d0:	b811883a 	mov	r8,r23
100140d4:	9802e91e 	bne	r19,zero,10014c7c <___vfiprintf_internal_r+0x1480>
100140d8:	8c400414 	ori	r17,r17,16
100140dc:	8880080c 	andi	r2,r17,32
100140e0:	103fb81e 	bne	r2,zero,10013fc4 <__alt_data_end+0xf8013fc4>
100140e4:	8880040c 	andi	r2,r17,16
100140e8:	10022e26 	beq	r2,zero,100149a4 <___vfiprintf_internal_r+0x11a8>
100140ec:	d9402217 	ldw	r5,136(sp)
100140f0:	2cc00017 	ldw	r19,0(r5)
100140f4:	29400104 	addi	r5,r5,4
100140f8:	d9402215 	stw	r5,136(sp)
100140fc:	9829d7fa 	srai	r20,r19,31
10014100:	a005883a 	mov	r2,r20
10014104:	003fb506 	br	10013fdc <__alt_data_end+0xf8013fdc>
10014108:	9cc03fcc 	andi	r19,r19,255
1001410c:	b811883a 	mov	r8,r23
10014110:	9802fa1e 	bne	r19,zero,10014cfc <___vfiprintf_internal_r+0x1500>
10014114:	8c400414 	ori	r17,r17,16
10014118:	8880080c 	andi	r2,r17,32
1001411c:	103f661e 	bne	r2,zero,10013eb8 <__alt_data_end+0xf8013eb8>
10014120:	8880040c 	andi	r2,r17,16
10014124:	10020626 	beq	r2,zero,10014940 <___vfiprintf_internal_r+0x1144>
10014128:	d9402217 	ldw	r5,136(sp)
1001412c:	d8001d85 	stb	zero,118(sp)
10014130:	0029883a 	mov	r20,zero
10014134:	28800104 	addi	r2,r5,4
10014138:	2cc00017 	ldw	r19,0(r5)
1001413c:	80020816 	blt	r16,zero,10014960 <___vfiprintf_internal_r+0x1164>
10014140:	00ffdfc4 	movi	r3,-129
10014144:	d8802215 	stw	r2,136(sp)
10014148:	88e2703a 	and	r17,r17,r3
1001414c:	983f651e 	bne	r19,zero,10013ee4 <__alt_data_end+0xf8013ee4>
10014150:	002b883a 	mov	r21,zero
10014154:	8002cf26 	beq	r16,zero,10014c94 <___vfiprintf_internal_r+0x1498>
10014158:	0027883a 	mov	r19,zero
1001415c:	0029883a 	mov	r20,zero
10014160:	003f6106 	br	10013ee8 <__alt_data_end+0xf8013ee8>
10014164:	9cc03fcc 	andi	r19,r19,255
10014168:	b811883a 	mov	r8,r23
1001416c:	9802e01e 	bne	r19,zero,10014cf0 <___vfiprintf_internal_r+0x14f4>
10014170:	8c400414 	ori	r17,r17,16
10014174:	8880080c 	andi	r2,r17,32
10014178:	1000641e 	bne	r2,zero,1001430c <___vfiprintf_internal_r+0xb10>
1001417c:	8880040c 	andi	r2,r17,16
10014180:	1001c81e 	bne	r2,zero,100148a4 <___vfiprintf_internal_r+0x10a8>
10014184:	8880100c 	andi	r2,r17,64
10014188:	d8001d85 	stb	zero,118(sp)
1001418c:	1002281e 	bne	r2,zero,10014a30 <___vfiprintf_internal_r+0x1234>
10014190:	d9002217 	ldw	r4,136(sp)
10014194:	0029883a 	mov	r20,zero
10014198:	20800104 	addi	r2,r4,4
1001419c:	24c00017 	ldw	r19,0(r4)
100141a0:	8001c60e 	bge	r16,zero,100148bc <___vfiprintf_internal_r+0x10c0>
100141a4:	d8802215 	stw	r2,136(sp)
100141a8:	002b883a 	mov	r21,zero
100141ac:	9d04b03a 	or	r2,r19,r20
100141b0:	103f911e 	bne	r2,zero,10013ff8 <__alt_data_end+0xf8013ff8>
100141b4:	00800044 	movi	r2,1
100141b8:	10803fcc 	andi	r2,r2,255
100141bc:	00c00044 	movi	r3,1
100141c0:	10c05f26 	beq	r2,r3,10014340 <___vfiprintf_internal_r+0xb44>
100141c4:	00c00084 	movi	r3,2
100141c8:	10ffe31e 	bne	r2,r3,10014158 <__alt_data_end+0xf8014158>
100141cc:	0027883a 	mov	r19,zero
100141d0:	0029883a 	mov	r20,zero
100141d4:	00015106 	br	1001471c <___vfiprintf_internal_r+0xf20>
100141d8:	9cc03fcc 	andi	r19,r19,255
100141dc:	b811883a 	mov	r8,r23
100141e0:	9802c01e 	bne	r19,zero,10014ce4 <___vfiprintf_internal_r+0x14e8>
100141e4:	014400b4 	movhi	r5,4098
100141e8:	29647b04 	addi	r5,r5,-28180
100141ec:	d9402615 	stw	r5,152(sp)
100141f0:	8880080c 	andi	r2,r17,32
100141f4:	103f541e 	bne	r2,zero,10013f48 <__alt_data_end+0xf8013f48>
100141f8:	8880040c 	andi	r2,r17,16
100141fc:	1001f226 	beq	r2,zero,100149c8 <___vfiprintf_internal_r+0x11cc>
10014200:	d9402217 	ldw	r5,136(sp)
10014204:	0029883a 	mov	r20,zero
10014208:	2cc00017 	ldw	r19,0(r5)
1001420c:	29400104 	addi	r5,r5,4
10014210:	d9402215 	stw	r5,136(sp)
10014214:	003f5106 	br	10013f5c <__alt_data_end+0xf8013f5c>
10014218:	d8c02217 	ldw	r3,136(sp)
1001421c:	b811883a 	mov	r8,r23
10014220:	d8001d85 	stb	zero,118(sp)
10014224:	1dc00017 	ldw	r23,0(r3)
10014228:	1f000104 	addi	fp,r3,4
1001422c:	b8025926 	beq	r23,zero,10014b94 <___vfiprintf_internal_r+0x1398>
10014230:	80023316 	blt	r16,zero,10014b00 <___vfiprintf_internal_r+0x1304>
10014234:	800d883a 	mov	r6,r16
10014238:	000b883a 	mov	r5,zero
1001423c:	b809883a 	mov	r4,r23
10014240:	da002a15 	stw	r8,168(sp)
10014244:	0011a840 	call	10011a84 <memchr>
10014248:	da002a17 	ldw	r8,168(sp)
1001424c:	10026826 	beq	r2,zero,10014bf0 <___vfiprintf_internal_r+0x13f4>
10014250:	15e9c83a 	sub	r20,r2,r23
10014254:	dd401d83 	ldbu	r21,118(sp)
10014258:	df002215 	stw	fp,136(sp)
1001425c:	0021883a 	mov	r16,zero
10014260:	003e6906 	br	10013c08 <__alt_data_end+0xf8013c08>
10014264:	9cc03fcc 	andi	r19,r19,255
10014268:	b811883a 	mov	r8,r23
1001426c:	983fc126 	beq	r19,zero,10014174 <__alt_data_end+0xf8014174>
10014270:	d8c02303 	ldbu	r3,140(sp)
10014274:	d8c01d85 	stb	r3,118(sp)
10014278:	003fbe06 	br	10014174 <__alt_data_end+0xf8014174>
1001427c:	d9002217 	ldw	r4,136(sp)
10014280:	d9402217 	ldw	r5,136(sp)
10014284:	21000017 	ldw	r4,0(r4)
10014288:	28800104 	addi	r2,r5,4
1001428c:	d9002515 	stw	r4,148(sp)
10014290:	203e3d16 	blt	r4,zero,10013b88 <__alt_data_end+0xf8013b88>
10014294:	d8802215 	stw	r2,136(sp)
10014298:	b0c00007 	ldb	r3,0(r22)
1001429c:	003db406 	br	10013970 <__alt_data_end+0xf8013970>
100142a0:	00c00ac4 	movi	r3,43
100142a4:	d8c02305 	stb	r3,140(sp)
100142a8:	04c00044 	movi	r19,1
100142ac:	b0c00007 	ldb	r3,0(r22)
100142b0:	003daf06 	br	10013970 <__alt_data_end+0xf8013970>
100142b4:	b0c00007 	ldb	r3,0(r22)
100142b8:	01000a84 	movi	r4,42
100142bc:	b4000044 	addi	r16,r22,1
100142c0:	19025e26 	beq	r3,r4,10014c3c <___vfiprintf_internal_r+0x1440>
100142c4:	1f3ff404 	addi	fp,r3,-48
100142c8:	0009883a 	mov	r4,zero
100142cc:	af025236 	bltu	r21,fp,10014c18 <___vfiprintf_internal_r+0x141c>
100142d0:	01400284 	movi	r5,10
100142d4:	00096fc0 	call	100096fc <__mulsi3>
100142d8:	80c00007 	ldb	r3,0(r16)
100142dc:	1709883a 	add	r4,r2,fp
100142e0:	85800044 	addi	r22,r16,1
100142e4:	1f3ff404 	addi	fp,r3,-48
100142e8:	b021883a 	mov	r16,r22
100142ec:	af3ff82e 	bgeu	r21,fp,100142d0 <__alt_data_end+0xf80142d0>
100142f0:	2021883a 	mov	r16,r4
100142f4:	203d9f0e 	bge	r4,zero,10013974 <__alt_data_end+0xf8013974>
100142f8:	043fffc4 	movi	r16,-1
100142fc:	003d9d06 	br	10013974 <__alt_data_end+0xf8013974>
10014300:	8c401014 	ori	r17,r17,64
10014304:	b0c00007 	ldb	r3,0(r22)
10014308:	003d9906 	br	10013970 <__alt_data_end+0xf8013970>
1001430c:	d9002217 	ldw	r4,136(sp)
10014310:	d8001d85 	stb	zero,118(sp)
10014314:	20c00204 	addi	r3,r4,8
10014318:	24c00017 	ldw	r19,0(r4)
1001431c:	25000117 	ldw	r20,4(r4)
10014320:	8001e716 	blt	r16,zero,10014ac0 <___vfiprintf_internal_r+0x12c4>
10014324:	013fdfc4 	movi	r4,-129
10014328:	9d04b03a 	or	r2,r19,r20
1001432c:	d8c02215 	stw	r3,136(sp)
10014330:	8922703a 	and	r17,r17,r4
10014334:	002b883a 	mov	r21,zero
10014338:	103f2f1e 	bne	r2,zero,10013ff8 <__alt_data_end+0xf8013ff8>
1001433c:	803e2f26 	beq	r16,zero,10013bfc <__alt_data_end+0xf8013bfc>
10014340:	0027883a 	mov	r19,zero
10014344:	9cc00c04 	addi	r19,r19,48
10014348:	dcc019c5 	stb	r19,103(sp)
1001434c:	dd002817 	ldw	r20,160(sp)
10014350:	ddc019c4 	addi	r23,sp,103
10014354:	003e2c06 	br	10013c08 <__alt_data_end+0xf8013c08>
10014358:	9cc03fcc 	andi	r19,r19,255
1001435c:	b811883a 	mov	r8,r23
10014360:	9802571e 	bne	r19,zero,10014cc0 <___vfiprintf_internal_r+0x14c4>
10014364:	18005726 	beq	r3,zero,100144c4 <___vfiprintf_internal_r+0xcc8>
10014368:	04c00044 	movi	r19,1
1001436c:	d8c01005 	stb	r3,64(sp)
10014370:	d8001d85 	stb	zero,118(sp)
10014374:	9829883a 	mov	r20,r19
10014378:	ddc01004 	addi	r23,sp,64
1001437c:	003f0a06 	br	10013fa8 <__alt_data_end+0xf8013fa8>
10014380:	d9402017 	ldw	r5,128(sp)
10014384:	d9002117 	ldw	r4,132(sp)
10014388:	d9801a04 	addi	r6,sp,104
1001438c:	da802a15 	stw	r10,168(sp)
10014390:	00136e80 	call	100136e8 <__sprint_r.part.0>
10014394:	da802a17 	ldw	r10,168(sp)
10014398:	1000501e 	bne	r2,zero,100144dc <___vfiprintf_internal_r+0xce0>
1001439c:	d9801b17 	ldw	r6,108(sp)
100143a0:	d8801c17 	ldw	r2,112(sp)
100143a4:	d811883a 	mov	r8,sp
100143a8:	31000044 	addi	r4,r6,1
100143ac:	003e3606 	br	10013c88 <__alt_data_end+0xf8013c88>
100143b0:	d9001b17 	ldw	r4,108(sp)
100143b4:	d8801c17 	ldw	r2,112(sp)
100143b8:	21400044 	addi	r5,r4,1
100143bc:	d9801d87 	ldb	r6,118(sp)
100143c0:	303e5226 	beq	r6,zero,10013d0c <__alt_data_end+0xf8013d0c>
100143c4:	01800044 	movi	r6,1
100143c8:	d9001d84 	addi	r4,sp,118
100143cc:	1185883a 	add	r2,r2,r6
100143d0:	41000015 	stw	r4,0(r8)
100143d4:	41800115 	stw	r6,4(r8)
100143d8:	d8801c15 	stw	r2,112(sp)
100143dc:	d9401b15 	stw	r5,108(sp)
100143e0:	010001c4 	movi	r4,7
100143e4:	2140b00e 	bge	r4,r5,100146a8 <___vfiprintf_internal_r+0xeac>
100143e8:	1000f61e 	bne	r2,zero,100147c4 <___vfiprintf_internal_r+0xfc8>
100143ec:	3800b31e 	bne	r7,zero,100146bc <___vfiprintf_internal_r+0xec0>
100143f0:	0009883a 	mov	r4,zero
100143f4:	300b883a 	mov	r5,r6
100143f8:	d811883a 	mov	r8,sp
100143fc:	01802004 	movi	r6,128
10014400:	19be5226 	beq	r3,r6,10013d4c <__alt_data_end+0xf8013d4c>
10014404:	8521c83a 	sub	r16,r16,r20
10014408:	043e790e 	bge	zero,r16,10013df0 <__alt_data_end+0xf8013df0>
1001440c:	05400404 	movi	r21,16
10014410:	ac01b00e 	bge	r21,r16,10014ad4 <___vfiprintf_internal_r+0x12d8>
10014414:	014400b4 	movhi	r5,4098
10014418:	2964e104 	addi	r5,r5,-27772
1001441c:	d9402315 	stw	r5,140(sp)
10014420:	070001c4 	movi	fp,7
10014424:	00000506 	br	1001443c <___vfiprintf_internal_r+0xc40>
10014428:	21400084 	addi	r5,r4,2
1001442c:	42000204 	addi	r8,r8,8
10014430:	1809883a 	mov	r4,r3
10014434:	843ffc04 	addi	r16,r16,-16
10014438:	ac000d0e 	bge	r21,r16,10014470 <___vfiprintf_internal_r+0xc74>
1001443c:	10800404 	addi	r2,r2,16
10014440:	20c00044 	addi	r3,r4,1
10014444:	44800015 	stw	r18,0(r8)
10014448:	45400115 	stw	r21,4(r8)
1001444c:	d8801c15 	stw	r2,112(sp)
10014450:	d8c01b15 	stw	r3,108(sp)
10014454:	e0fff40e 	bge	fp,r3,10014428 <__alt_data_end+0xf8014428>
10014458:	1000101e 	bne	r2,zero,1001449c <___vfiprintf_internal_r+0xca0>
1001445c:	843ffc04 	addi	r16,r16,-16
10014460:	01400044 	movi	r5,1
10014464:	0009883a 	mov	r4,zero
10014468:	d811883a 	mov	r8,sp
1001446c:	ac3ff316 	blt	r21,r16,1001443c <__alt_data_end+0xf801443c>
10014470:	d8c02317 	ldw	r3,140(sp)
10014474:	1405883a 	add	r2,r2,r16
10014478:	44000115 	stw	r16,4(r8)
1001447c:	40c00015 	stw	r3,0(r8)
10014480:	d8801c15 	stw	r2,112(sp)
10014484:	d9401b15 	stw	r5,108(sp)
10014488:	00c001c4 	movi	r3,7
1001448c:	19401916 	blt	r3,r5,100144f4 <___vfiprintf_internal_r+0xcf8>
10014490:	42000204 	addi	r8,r8,8
10014494:	29400044 	addi	r5,r5,1
10014498:	003e5506 	br	10013df0 <__alt_data_end+0xf8013df0>
1001449c:	d9402017 	ldw	r5,128(sp)
100144a0:	d9002117 	ldw	r4,132(sp)
100144a4:	d9801a04 	addi	r6,sp,104
100144a8:	00136e80 	call	100136e8 <__sprint_r.part.0>
100144ac:	10000b1e 	bne	r2,zero,100144dc <___vfiprintf_internal_r+0xce0>
100144b0:	d9001b17 	ldw	r4,108(sp)
100144b4:	d8801c17 	ldw	r2,112(sp)
100144b8:	d811883a 	mov	r8,sp
100144bc:	21400044 	addi	r5,r4,1
100144c0:	003fdc06 	br	10014434 <__alt_data_end+0xf8014434>
100144c4:	d8801c17 	ldw	r2,112(sp)
100144c8:	10000426 	beq	r2,zero,100144dc <___vfiprintf_internal_r+0xce0>
100144cc:	d9402017 	ldw	r5,128(sp)
100144d0:	d9002117 	ldw	r4,132(sp)
100144d4:	d9801a04 	addi	r6,sp,104
100144d8:	00136e80 	call	100136e8 <__sprint_r.part.0>
100144dc:	d9402017 	ldw	r5,128(sp)
100144e0:	2880030b 	ldhu	r2,12(r5)
100144e4:	1080100c 	andi	r2,r2,64
100144e8:	10014d1e 	bne	r2,zero,10014a20 <___vfiprintf_internal_r+0x1224>
100144ec:	d8802417 	ldw	r2,144(sp)
100144f0:	003d9706 	br	10013b50 <__alt_data_end+0xf8013b50>
100144f4:	1000d21e 	bne	r2,zero,10014840 <___vfiprintf_internal_r+0x1044>
100144f8:	00c00044 	movi	r3,1
100144fc:	a005883a 	mov	r2,r20
10014500:	ddc00015 	stw	r23,0(sp)
10014504:	dd000115 	stw	r20,4(sp)
10014508:	dd001c15 	stw	r20,112(sp)
1001450c:	d8c01b15 	stw	r3,108(sp)
10014510:	d811883a 	mov	r8,sp
10014514:	42000204 	addi	r8,r8,8
10014518:	8c40010c 	andi	r17,r17,4
1001451c:	88004026 	beq	r17,zero,10014620 <___vfiprintf_internal_r+0xe24>
10014520:	d9002517 	ldw	r4,148(sp)
10014524:	24e3c83a 	sub	r17,r4,r19
10014528:	04403d0e 	bge	zero,r17,10014620 <___vfiprintf_internal_r+0xe24>
1001452c:	04000404 	movi	r16,16
10014530:	8441a90e 	bge	r16,r17,10014bd8 <___vfiprintf_internal_r+0x13dc>
10014534:	00c400b4 	movhi	r3,4098
10014538:	18e4e504 	addi	r3,r3,-27756
1001453c:	d9001b17 	ldw	r4,108(sp)
10014540:	d8c02315 	stw	r3,140(sp)
10014544:	050001c4 	movi	r20,7
10014548:	dd402117 	ldw	r21,132(sp)
1001454c:	ddc02017 	ldw	r23,128(sp)
10014550:	00000506 	br	10014568 <___vfiprintf_internal_r+0xd6c>
10014554:	21400084 	addi	r5,r4,2
10014558:	42000204 	addi	r8,r8,8
1001455c:	1809883a 	mov	r4,r3
10014560:	8c7ffc04 	addi	r17,r17,-16
10014564:	84400f0e 	bge	r16,r17,100145a4 <___vfiprintf_internal_r+0xda8>
10014568:	014400b4 	movhi	r5,4098
1001456c:	10800404 	addi	r2,r2,16
10014570:	20c00044 	addi	r3,r4,1
10014574:	2964e504 	addi	r5,r5,-27756
10014578:	41400015 	stw	r5,0(r8)
1001457c:	44000115 	stw	r16,4(r8)
10014580:	d8801c15 	stw	r2,112(sp)
10014584:	d8c01b15 	stw	r3,108(sp)
10014588:	a0fff20e 	bge	r20,r3,10014554 <__alt_data_end+0xf8014554>
1001458c:	1000141e 	bne	r2,zero,100145e0 <___vfiprintf_internal_r+0xde4>
10014590:	8c7ffc04 	addi	r17,r17,-16
10014594:	01400044 	movi	r5,1
10014598:	0009883a 	mov	r4,zero
1001459c:	d811883a 	mov	r8,sp
100145a0:	847ff116 	blt	r16,r17,10014568 <__alt_data_end+0xf8014568>
100145a4:	d8c02317 	ldw	r3,140(sp)
100145a8:	1445883a 	add	r2,r2,r17
100145ac:	44400115 	stw	r17,4(r8)
100145b0:	40c00015 	stw	r3,0(r8)
100145b4:	d8801c15 	stw	r2,112(sp)
100145b8:	d9401b15 	stw	r5,108(sp)
100145bc:	00c001c4 	movi	r3,7
100145c0:	1940170e 	bge	r3,r5,10014620 <___vfiprintf_internal_r+0xe24>
100145c4:	1000101e 	bne	r2,zero,10014608 <___vfiprintf_internal_r+0xe0c>
100145c8:	d8802517 	ldw	r2,148(sp)
100145cc:	14c11616 	blt	r2,r19,10014a28 <___vfiprintf_internal_r+0x122c>
100145d0:	d9002417 	ldw	r4,144(sp)
100145d4:	2089883a 	add	r4,r4,r2
100145d8:	d9002415 	stw	r4,144(sp)
100145dc:	003e1806 	br	10013e40 <__alt_data_end+0xf8013e40>
100145e0:	d9801a04 	addi	r6,sp,104
100145e4:	b80b883a 	mov	r5,r23
100145e8:	a809883a 	mov	r4,r21
100145ec:	00136e80 	call	100136e8 <__sprint_r.part.0>
100145f0:	103fba1e 	bne	r2,zero,100144dc <__alt_data_end+0xf80144dc>
100145f4:	d9001b17 	ldw	r4,108(sp)
100145f8:	d8801c17 	ldw	r2,112(sp)
100145fc:	d811883a 	mov	r8,sp
10014600:	21400044 	addi	r5,r4,1
10014604:	003fd606 	br	10014560 <__alt_data_end+0xf8014560>
10014608:	d9402017 	ldw	r5,128(sp)
1001460c:	d9002117 	ldw	r4,132(sp)
10014610:	d9801a04 	addi	r6,sp,104
10014614:	00136e80 	call	100136e8 <__sprint_r.part.0>
10014618:	103fb01e 	bne	r2,zero,100144dc <__alt_data_end+0xf80144dc>
1001461c:	d8801c17 	ldw	r2,112(sp)
10014620:	d8c02517 	ldw	r3,148(sp)
10014624:	1cc0010e 	bge	r3,r19,1001462c <___vfiprintf_internal_r+0xe30>
10014628:	9807883a 	mov	r3,r19
1001462c:	d9002417 	ldw	r4,144(sp)
10014630:	20c9883a 	add	r4,r4,r3
10014634:	d9002415 	stw	r4,144(sp)
10014638:	103e0126 	beq	r2,zero,10013e40 <__alt_data_end+0xf8013e40>
1001463c:	d9402017 	ldw	r5,128(sp)
10014640:	d9002117 	ldw	r4,132(sp)
10014644:	d9801a04 	addi	r6,sp,104
10014648:	00136e80 	call	100136e8 <__sprint_r.part.0>
1001464c:	103dfc26 	beq	r2,zero,10013e40 <__alt_data_end+0xf8013e40>
10014650:	003fa206 	br	100144dc <__alt_data_end+0xf80144dc>
10014654:	d9402017 	ldw	r5,128(sp)
10014658:	d9002117 	ldw	r4,132(sp)
1001465c:	d9801a04 	addi	r6,sp,104
10014660:	d9c02b15 	stw	r7,172(sp)
10014664:	00136e80 	call	100136e8 <__sprint_r.part.0>
10014668:	d9c02b17 	ldw	r7,172(sp)
1001466c:	103f9b1e 	bne	r2,zero,100144dc <__alt_data_end+0xf80144dc>
10014670:	d9001b17 	ldw	r4,108(sp)
10014674:	d8801c17 	ldw	r2,112(sp)
10014678:	d811883a 	mov	r8,sp
1001467c:	21800044 	addi	r6,r4,1
10014680:	003dbf06 	br	10013d80 <__alt_data_end+0xf8013d80>
10014684:	1000d81e 	bne	r2,zero,100149e8 <___vfiprintf_internal_r+0x11ec>
10014688:	d9001d87 	ldb	r4,118(sp)
1001468c:	20000a26 	beq	r4,zero,100146b8 <___vfiprintf_internal_r+0xebc>
10014690:	00800044 	movi	r2,1
10014694:	d9001d84 	addi	r4,sp,118
10014698:	100b883a 	mov	r5,r2
1001469c:	d9000015 	stw	r4,0(sp)
100146a0:	d8800115 	stw	r2,4(sp)
100146a4:	d811883a 	mov	r8,sp
100146a8:	2809883a 	mov	r4,r5
100146ac:	42000204 	addi	r8,r8,8
100146b0:	29400044 	addi	r5,r5,1
100146b4:	003d9506 	br	10013d0c <__alt_data_end+0xf8013d0c>
100146b8:	3800fd26 	beq	r7,zero,10014ab0 <___vfiprintf_internal_r+0x12b4>
100146bc:	00800084 	movi	r2,2
100146c0:	d9001d04 	addi	r4,sp,116
100146c4:	d9000015 	stw	r4,0(sp)
100146c8:	d8800115 	stw	r2,4(sp)
100146cc:	01400044 	movi	r5,1
100146d0:	d811883a 	mov	r8,sp
100146d4:	2809883a 	mov	r4,r5
100146d8:	42000204 	addi	r8,r8,8
100146dc:	29400044 	addi	r5,r5,1
100146e0:	003f4606 	br	100143fc <__alt_data_end+0xf80143fc>
100146e4:	d8802517 	ldw	r2,148(sp)
100146e8:	14c0010e 	bge	r2,r19,100146f0 <___vfiprintf_internal_r+0xef4>
100146ec:	9805883a 	mov	r2,r19
100146f0:	d9402417 	ldw	r5,144(sp)
100146f4:	288b883a 	add	r5,r5,r2
100146f8:	d9402415 	stw	r5,144(sp)
100146fc:	003dd006 	br	10013e40 <__alt_data_end+0xf8013e40>
10014700:	d8001d85 	stb	zero,118(sp)
10014704:	80005d16 	blt	r16,zero,1001487c <___vfiprintf_internal_r+0x1080>
10014708:	00ffdfc4 	movi	r3,-129
1001470c:	9d04b03a 	or	r2,r19,r20
10014710:	88e2703a 	and	r17,r17,r3
10014714:	103d3726 	beq	r2,zero,10013bf4 <__alt_data_end+0xf8013bf4>
10014718:	002b883a 	mov	r21,zero
1001471c:	d9002617 	ldw	r4,152(sp)
10014720:	ddc01a04 	addi	r23,sp,104
10014724:	988003cc 	andi	r2,r19,15
10014728:	a006973a 	slli	r3,r20,28
1001472c:	2085883a 	add	r2,r4,r2
10014730:	9826d13a 	srli	r19,r19,4
10014734:	10800003 	ldbu	r2,0(r2)
10014738:	a028d13a 	srli	r20,r20,4
1001473c:	bdffffc4 	addi	r23,r23,-1
10014740:	1ce6b03a 	or	r19,r3,r19
10014744:	b8800005 	stb	r2,0(r23)
10014748:	9d04b03a 	or	r2,r19,r20
1001474c:	103ff51e 	bne	r2,zero,10014724 <__alt_data_end+0xf8014724>
10014750:	d8801e17 	ldw	r2,120(sp)
10014754:	15e9c83a 	sub	r20,r2,r23
10014758:	003d2b06 	br	10013c08 <__alt_data_end+0xf8013c08>
1001475c:	d9402017 	ldw	r5,128(sp)
10014760:	d9002117 	ldw	r4,132(sp)
10014764:	d9801a04 	addi	r6,sp,104
10014768:	00136e80 	call	100136e8 <__sprint_r.part.0>
1001476c:	103f5b1e 	bne	r2,zero,100144dc <__alt_data_end+0xf80144dc>
10014770:	d8801c17 	ldw	r2,112(sp)
10014774:	d811883a 	mov	r8,sp
10014778:	003f6706 	br	10014518 <__alt_data_end+0xf8014518>
1001477c:	d9402017 	ldw	r5,128(sp)
10014780:	d9002117 	ldw	r4,132(sp)
10014784:	d9801a04 	addi	r6,sp,104
10014788:	00136e80 	call	100136e8 <__sprint_r.part.0>
1001478c:	103f531e 	bne	r2,zero,100144dc <__alt_data_end+0xf80144dc>
10014790:	d811883a 	mov	r8,sp
10014794:	003cd906 	br	10013afc <__alt_data_end+0xf8013afc>
10014798:	10803fcc 	andi	r2,r2,255
1001479c:	1080201c 	xori	r2,r2,128
100147a0:	10bfe004 	addi	r2,r2,-128
100147a4:	00c00c04 	movi	r3,48
100147a8:	10ffe926 	beq	r2,r3,10014750 <__alt_data_end+0xf8014750>
100147ac:	b8ffffc5 	stb	r3,-1(r23)
100147b0:	d8c01e17 	ldw	r3,120(sp)
100147b4:	b8bfffc4 	addi	r2,r23,-1
100147b8:	102f883a 	mov	r23,r2
100147bc:	18a9c83a 	sub	r20,r3,r2
100147c0:	003d1106 	br	10013c08 <__alt_data_end+0xf8013c08>
100147c4:	d9402017 	ldw	r5,128(sp)
100147c8:	d9002117 	ldw	r4,132(sp)
100147cc:	d9801a04 	addi	r6,sp,104
100147d0:	d8c02a15 	stw	r3,168(sp)
100147d4:	d9c02b15 	stw	r7,172(sp)
100147d8:	00136e80 	call	100136e8 <__sprint_r.part.0>
100147dc:	d8c02a17 	ldw	r3,168(sp)
100147e0:	d9c02b17 	ldw	r7,172(sp)
100147e4:	103f3d1e 	bne	r2,zero,100144dc <__alt_data_end+0xf80144dc>
100147e8:	d9001b17 	ldw	r4,108(sp)
100147ec:	d8801c17 	ldw	r2,112(sp)
100147f0:	d811883a 	mov	r8,sp
100147f4:	21400044 	addi	r5,r4,1
100147f8:	003d4406 	br	10013d0c <__alt_data_end+0xf8013d0c>
100147fc:	d9402017 	ldw	r5,128(sp)
10014800:	d9002117 	ldw	r4,132(sp)
10014804:	d9801a04 	addi	r6,sp,104
10014808:	d8c02a15 	stw	r3,168(sp)
1001480c:	00136e80 	call	100136e8 <__sprint_r.part.0>
10014810:	d8c02a17 	ldw	r3,168(sp)
10014814:	103f311e 	bne	r2,zero,100144dc <__alt_data_end+0xf80144dc>
10014818:	d9001b17 	ldw	r4,108(sp)
1001481c:	d8801c17 	ldw	r2,112(sp)
10014820:	d811883a 	mov	r8,sp
10014824:	21400044 	addi	r5,r4,1
10014828:	003ef406 	br	100143fc <__alt_data_end+0xf80143fc>
1001482c:	1000bd1e 	bne	r2,zero,10014b24 <___vfiprintf_internal_r+0x1328>
10014830:	01400044 	movi	r5,1
10014834:	0009883a 	mov	r4,zero
10014838:	d811883a 	mov	r8,sp
1001483c:	003ef106 	br	10014404 <__alt_data_end+0xf8014404>
10014840:	d9402017 	ldw	r5,128(sp)
10014844:	d9002117 	ldw	r4,132(sp)
10014848:	d9801a04 	addi	r6,sp,104
1001484c:	00136e80 	call	100136e8 <__sprint_r.part.0>
10014850:	103f221e 	bne	r2,zero,100144dc <__alt_data_end+0xf80144dc>
10014854:	d9401b17 	ldw	r5,108(sp)
10014858:	d8801c17 	ldw	r2,112(sp)
1001485c:	d811883a 	mov	r8,sp
10014860:	29400044 	addi	r5,r5,1
10014864:	003d6206 	br	10013df0 <__alt_data_end+0xf8013df0>
10014868:	014400b4 	movhi	r5,4098
1001486c:	29648004 	addi	r5,r5,-28160
10014870:	d9402615 	stw	r5,152(sp)
10014874:	d8c02215 	stw	r3,136(sp)
10014878:	1023883a 	mov	r17,r2
1001487c:	9d04b03a 	or	r2,r19,r20
10014880:	103fa51e 	bne	r2,zero,10014718 <__alt_data_end+0xf8014718>
10014884:	002b883a 	mov	r21,zero
10014888:	00800084 	movi	r2,2
1001488c:	003e4a06 	br	100141b8 <__alt_data_end+0xf80141b8>
10014890:	014400b4 	movhi	r5,4098
10014894:	29648004 	addi	r5,r5,-28160
10014898:	002b883a 	mov	r21,zero
1001489c:	d9402615 	stw	r5,152(sp)
100148a0:	003f9e06 	br	1001471c <__alt_data_end+0xf801471c>
100148a4:	d9402217 	ldw	r5,136(sp)
100148a8:	d8001d85 	stb	zero,118(sp)
100148ac:	0029883a 	mov	r20,zero
100148b0:	28800104 	addi	r2,r5,4
100148b4:	2cc00017 	ldw	r19,0(r5)
100148b8:	803e3a16 	blt	r16,zero,100141a4 <__alt_data_end+0xf80141a4>
100148bc:	00ffdfc4 	movi	r3,-129
100148c0:	d8802215 	stw	r2,136(sp)
100148c4:	88e2703a 	and	r17,r17,r3
100148c8:	002b883a 	mov	r21,zero
100148cc:	983e9b26 	beq	r19,zero,1001433c <__alt_data_end+0xf801433c>
100148d0:	00800244 	movi	r2,9
100148d4:	14fdc936 	bltu	r2,r19,10013ffc <__alt_data_end+0xf8013ffc>
100148d8:	003e9a06 	br	10014344 <__alt_data_end+0xf8014344>
100148dc:	00800c04 	movi	r2,48
100148e0:	d8c01d45 	stb	r3,117(sp)
100148e4:	d8801d05 	stb	r2,116(sp)
100148e8:	d8001d85 	stb	zero,118(sp)
100148ec:	88c00094 	ori	r3,r17,2
100148f0:	80009c16 	blt	r16,zero,10014b64 <___vfiprintf_internal_r+0x1368>
100148f4:	00bfdfc4 	movi	r2,-129
100148f8:	88a2703a 	and	r17,r17,r2
100148fc:	8c400094 	ori	r17,r17,2
10014900:	002b883a 	mov	r21,zero
10014904:	003f8506 	br	1001471c <__alt_data_end+0xf801471c>
10014908:	b029883a 	mov	r20,r22
1001490c:	003c0b06 	br	1001393c <__alt_data_end+0xf801393c>
10014910:	04e7c83a 	sub	r19,zero,r19
10014914:	05400b44 	movi	r21,45
10014918:	9804c03a 	cmpne	r2,r19,zero
1001491c:	0529c83a 	sub	r20,zero,r20
10014920:	dd401d85 	stb	r21,118(sp)
10014924:	a0a9c83a 	sub	r20,r20,r2
10014928:	80009716 	blt	r16,zero,10014b88 <___vfiprintf_internal_r+0x138c>
1001492c:	00bfdfc4 	movi	r2,-129
10014930:	88a2703a 	and	r17,r17,r2
10014934:	003db006 	br	10013ff8 <__alt_data_end+0xf8013ff8>
10014938:	b0c00007 	ldb	r3,0(r22)
1001493c:	003c0c06 	br	10013970 <__alt_data_end+0xf8013970>
10014940:	8880100c 	andi	r2,r17,64
10014944:	d8001d85 	stb	zero,118(sp)
10014948:	1000461e 	bne	r2,zero,10014a64 <___vfiprintf_internal_r+0x1268>
1001494c:	d9002217 	ldw	r4,136(sp)
10014950:	0029883a 	mov	r20,zero
10014954:	20800104 	addi	r2,r4,4
10014958:	24c00017 	ldw	r19,0(r4)
1001495c:	803df80e 	bge	r16,zero,10014140 <__alt_data_end+0xf8014140>
10014960:	9d06b03a 	or	r3,r19,r20
10014964:	d8802215 	stw	r2,136(sp)
10014968:	183d5e1e 	bne	r3,zero,10013ee4 <__alt_data_end+0xf8013ee4>
1001496c:	002b883a 	mov	r21,zero
10014970:	0005883a 	mov	r2,zero
10014974:	003e1006 	br	100141b8 <__alt_data_end+0xf80141b8>
10014978:	8880040c 	andi	r2,r17,16
1001497c:	1000321e 	bne	r2,zero,10014a48 <___vfiprintf_internal_r+0x124c>
10014980:	8c40100c 	andi	r17,r17,64
10014984:	88008d26 	beq	r17,zero,10014bbc <___vfiprintf_internal_r+0x13c0>
10014988:	d9402217 	ldw	r5,136(sp)
1001498c:	d8c02417 	ldw	r3,144(sp)
10014990:	28800017 	ldw	r2,0(r5)
10014994:	29400104 	addi	r5,r5,4
10014998:	d9402215 	stw	r5,136(sp)
1001499c:	10c0000d 	sth	r3,0(r2)
100149a0:	003bca06 	br	100138cc <__alt_data_end+0xf80138cc>
100149a4:	8880100c 	andi	r2,r17,64
100149a8:	10003a26 	beq	r2,zero,10014a94 <___vfiprintf_internal_r+0x1298>
100149ac:	d8802217 	ldw	r2,136(sp)
100149b0:	14c0000f 	ldh	r19,0(r2)
100149b4:	10800104 	addi	r2,r2,4
100149b8:	d8802215 	stw	r2,136(sp)
100149bc:	9829d7fa 	srai	r20,r19,31
100149c0:	a005883a 	mov	r2,r20
100149c4:	003d8506 	br	10013fdc <__alt_data_end+0xf8013fdc>
100149c8:	8880100c 	andi	r2,r17,64
100149cc:	10002b26 	beq	r2,zero,10014a7c <___vfiprintf_internal_r+0x1280>
100149d0:	d8802217 	ldw	r2,136(sp)
100149d4:	0029883a 	mov	r20,zero
100149d8:	14c0000b 	ldhu	r19,0(r2)
100149dc:	10800104 	addi	r2,r2,4
100149e0:	d8802215 	stw	r2,136(sp)
100149e4:	003d5d06 	br	10013f5c <__alt_data_end+0xf8013f5c>
100149e8:	d9402017 	ldw	r5,128(sp)
100149ec:	d9002117 	ldw	r4,132(sp)
100149f0:	d9801a04 	addi	r6,sp,104
100149f4:	d8c02a15 	stw	r3,168(sp)
100149f8:	d9c02b15 	stw	r7,172(sp)
100149fc:	00136e80 	call	100136e8 <__sprint_r.part.0>
10014a00:	d8c02a17 	ldw	r3,168(sp)
10014a04:	d9c02b17 	ldw	r7,172(sp)
10014a08:	103eb41e 	bne	r2,zero,100144dc <__alt_data_end+0xf80144dc>
10014a0c:	d9001b17 	ldw	r4,108(sp)
10014a10:	d8801c17 	ldw	r2,112(sp)
10014a14:	d811883a 	mov	r8,sp
10014a18:	21400044 	addi	r5,r4,1
10014a1c:	003e6706 	br	100143bc <__alt_data_end+0xf80143bc>
10014a20:	00bfffc4 	movi	r2,-1
10014a24:	003c4a06 	br	10013b50 <__alt_data_end+0xf8013b50>
10014a28:	9805883a 	mov	r2,r19
10014a2c:	003ee806 	br	100145d0 <__alt_data_end+0xf80145d0>
10014a30:	d8c02217 	ldw	r3,136(sp)
10014a34:	0029883a 	mov	r20,zero
10014a38:	18800104 	addi	r2,r3,4
10014a3c:	1cc0000b 	ldhu	r19,0(r3)
10014a40:	803f9e0e 	bge	r16,zero,100148bc <__alt_data_end+0xf80148bc>
10014a44:	003dd706 	br	100141a4 <__alt_data_end+0xf80141a4>
10014a48:	d8c02217 	ldw	r3,136(sp)
10014a4c:	d9002417 	ldw	r4,144(sp)
10014a50:	18800017 	ldw	r2,0(r3)
10014a54:	18c00104 	addi	r3,r3,4
10014a58:	d8c02215 	stw	r3,136(sp)
10014a5c:	11000015 	stw	r4,0(r2)
10014a60:	003b9a06 	br	100138cc <__alt_data_end+0xf80138cc>
10014a64:	d8c02217 	ldw	r3,136(sp)
10014a68:	0029883a 	mov	r20,zero
10014a6c:	18800104 	addi	r2,r3,4
10014a70:	1cc0000b 	ldhu	r19,0(r3)
10014a74:	803db20e 	bge	r16,zero,10014140 <__alt_data_end+0xf8014140>
10014a78:	003fb906 	br	10014960 <__alt_data_end+0xf8014960>
10014a7c:	d9002217 	ldw	r4,136(sp)
10014a80:	0029883a 	mov	r20,zero
10014a84:	24c00017 	ldw	r19,0(r4)
10014a88:	21000104 	addi	r4,r4,4
10014a8c:	d9002215 	stw	r4,136(sp)
10014a90:	003d3206 	br	10013f5c <__alt_data_end+0xf8013f5c>
10014a94:	d8c02217 	ldw	r3,136(sp)
10014a98:	1cc00017 	ldw	r19,0(r3)
10014a9c:	18c00104 	addi	r3,r3,4
10014aa0:	d8c02215 	stw	r3,136(sp)
10014aa4:	9829d7fa 	srai	r20,r19,31
10014aa8:	a005883a 	mov	r2,r20
10014aac:	003d4b06 	br	10013fdc <__alt_data_end+0xf8013fdc>
10014ab0:	0009883a 	mov	r4,zero
10014ab4:	01400044 	movi	r5,1
10014ab8:	d811883a 	mov	r8,sp
10014abc:	003e4f06 	br	100143fc <__alt_data_end+0xf80143fc>
10014ac0:	d8c02215 	stw	r3,136(sp)
10014ac4:	002b883a 	mov	r21,zero
10014ac8:	003db806 	br	100141ac <__alt_data_end+0xf80141ac>
10014acc:	d811883a 	mov	r8,sp
10014ad0:	003e9606 	br	1001452c <__alt_data_end+0xf801452c>
10014ad4:	010400b4 	movhi	r4,4098
10014ad8:	2124e104 	addi	r4,r4,-27772
10014adc:	d9002315 	stw	r4,140(sp)
10014ae0:	003e6306 	br	10014470 <__alt_data_end+0xf8014470>
10014ae4:	b0c00043 	ldbu	r3,1(r22)
10014ae8:	8c400814 	ori	r17,r17,32
10014aec:	b5800044 	addi	r22,r22,1
10014af0:	18c03fcc 	andi	r3,r3,255
10014af4:	18c0201c 	xori	r3,r3,128
10014af8:	18ffe004 	addi	r3,r3,-128
10014afc:	003b9c06 	br	10013970 <__alt_data_end+0xf8013970>
10014b00:	b809883a 	mov	r4,r23
10014b04:	da002a15 	stw	r8,168(sp)
10014b08:	000c0b40 	call	1000c0b4 <strlen>
10014b0c:	1029883a 	mov	r20,r2
10014b10:	dd401d83 	ldbu	r21,118(sp)
10014b14:	df002215 	stw	fp,136(sp)
10014b18:	0021883a 	mov	r16,zero
10014b1c:	da002a17 	ldw	r8,168(sp)
10014b20:	003c3906 	br	10013c08 <__alt_data_end+0xf8013c08>
10014b24:	d9402017 	ldw	r5,128(sp)
10014b28:	d9002117 	ldw	r4,132(sp)
10014b2c:	d9801a04 	addi	r6,sp,104
10014b30:	00136e80 	call	100136e8 <__sprint_r.part.0>
10014b34:	103e691e 	bne	r2,zero,100144dc <__alt_data_end+0xf80144dc>
10014b38:	d9001b17 	ldw	r4,108(sp)
10014b3c:	d8801c17 	ldw	r2,112(sp)
10014b40:	d811883a 	mov	r8,sp
10014b44:	21400044 	addi	r5,r4,1
10014b48:	003e2e06 	br	10014404 <__alt_data_end+0xf8014404>
10014b4c:	010400b4 	movhi	r4,4098
10014b50:	2124e504 	addi	r4,r4,-27756
10014b54:	d9002315 	stw	r4,140(sp)
10014b58:	d9001b17 	ldw	r4,108(sp)
10014b5c:	21000044 	addi	r4,r4,1
10014b60:	003c5e06 	br	10013cdc <__alt_data_end+0xf8013cdc>
10014b64:	002b883a 	mov	r21,zero
10014b68:	00800084 	movi	r2,2
10014b6c:	10803fcc 	andi	r2,r2,255
10014b70:	01000044 	movi	r4,1
10014b74:	11002b26 	beq	r2,r4,10014c24 <___vfiprintf_internal_r+0x1428>
10014b78:	01000084 	movi	r4,2
10014b7c:	11002b1e 	bne	r2,r4,10014c2c <___vfiprintf_internal_r+0x1430>
10014b80:	1823883a 	mov	r17,r3
10014b84:	003ee506 	br	1001471c <__alt_data_end+0xf801471c>
10014b88:	8807883a 	mov	r3,r17
10014b8c:	00800044 	movi	r2,1
10014b90:	003ff606 	br	10014b6c <__alt_data_end+0xf8014b6c>
10014b94:	00800184 	movi	r2,6
10014b98:	1400012e 	bgeu	r2,r16,10014ba0 <___vfiprintf_internal_r+0x13a4>
10014b9c:	1021883a 	mov	r16,r2
10014ba0:	8029883a 	mov	r20,r16
10014ba4:	8027883a 	mov	r19,r16
10014ba8:	80002216 	blt	r16,zero,10014c34 <___vfiprintf_internal_r+0x1438>
10014bac:	05c400b4 	movhi	r23,4098
10014bb0:	df002215 	stw	fp,136(sp)
10014bb4:	bde48504 	addi	r23,r23,-28140
10014bb8:	003cfb06 	br	10013fa8 <__alt_data_end+0xf8013fa8>
10014bbc:	d9002217 	ldw	r4,136(sp)
10014bc0:	d9402417 	ldw	r5,144(sp)
10014bc4:	20800017 	ldw	r2,0(r4)
10014bc8:	21000104 	addi	r4,r4,4
10014bcc:	d9002215 	stw	r4,136(sp)
10014bd0:	11400015 	stw	r5,0(r2)
10014bd4:	003b3d06 	br	100138cc <__alt_data_end+0xf80138cc>
10014bd8:	014400b4 	movhi	r5,4098
10014bdc:	2964e504 	addi	r5,r5,-27756
10014be0:	d9402315 	stw	r5,140(sp)
10014be4:	d9401b17 	ldw	r5,108(sp)
10014be8:	29400044 	addi	r5,r5,1
10014bec:	003e6d06 	br	100145a4 <__alt_data_end+0xf80145a4>
10014bf0:	8029883a 	mov	r20,r16
10014bf4:	dd401d83 	ldbu	r21,118(sp)
10014bf8:	df002215 	stw	fp,136(sp)
10014bfc:	0021883a 	mov	r16,zero
10014c00:	003c0106 	br	10013c08 <__alt_data_end+0xf8013c08>
10014c04:	00c400b4 	movhi	r3,4098
10014c08:	18e4e104 	addi	r3,r3,-27772
10014c0c:	d8c02315 	stw	r3,140(sp)
10014c10:	280d883a 	mov	r6,r5
10014c14:	003c6906 	br	10013dbc <__alt_data_end+0xf8013dbc>
10014c18:	802d883a 	mov	r22,r16
10014c1c:	0021883a 	mov	r16,zero
10014c20:	003b5406 	br	10013974 <__alt_data_end+0xf8013974>
10014c24:	1823883a 	mov	r17,r3
10014c28:	003cf306 	br	10013ff8 <__alt_data_end+0xf8013ff8>
10014c2c:	1823883a 	mov	r17,r3
10014c30:	003cad06 	br	10013ee8 <__alt_data_end+0xf8013ee8>
10014c34:	0027883a 	mov	r19,zero
10014c38:	003fdc06 	br	10014bac <__alt_data_end+0xf8014bac>
10014c3c:	d9402217 	ldw	r5,136(sp)
10014c40:	8005883a 	mov	r2,r16
10014c44:	b0c00043 	ldbu	r3,1(r22)
10014c48:	2c000017 	ldw	r16,0(r5)
10014c4c:	29000104 	addi	r4,r5,4
10014c50:	d9002215 	stw	r4,136(sp)
10014c54:	102d883a 	mov	r22,r2
10014c58:	803fa50e 	bge	r16,zero,10014af0 <__alt_data_end+0xf8014af0>
10014c5c:	18c03fcc 	andi	r3,r3,255
10014c60:	18c0201c 	xori	r3,r3,128
10014c64:	043fffc4 	movi	r16,-1
10014c68:	18ffe004 	addi	r3,r3,-128
10014c6c:	003b4006 	br	10013970 <__alt_data_end+0xf8013970>
10014c70:	d9402303 	ldbu	r5,140(sp)
10014c74:	d9401d85 	stb	r5,118(sp)
10014c78:	003cae06 	br	10013f34 <__alt_data_end+0xf8013f34>
10014c7c:	d8c02303 	ldbu	r3,140(sp)
10014c80:	d8c01d85 	stb	r3,118(sp)
10014c84:	003d1406 	br	100140d8 <__alt_data_end+0xf80140d8>
10014c88:	d8c02303 	ldbu	r3,140(sp)
10014c8c:	d8c01d85 	stb	r3,118(sp)
10014c90:	003cca06 	br	10013fbc <__alt_data_end+0xf8013fbc>
10014c94:	8880004c 	andi	r2,r17,1
10014c98:	002b883a 	mov	r21,zero
10014c9c:	10000526 	beq	r2,zero,10014cb4 <___vfiprintf_internal_r+0x14b8>
10014ca0:	00800c04 	movi	r2,48
10014ca4:	d88019c5 	stb	r2,103(sp)
10014ca8:	dd002817 	ldw	r20,160(sp)
10014cac:	ddc019c4 	addi	r23,sp,103
10014cb0:	003bd506 	br	10013c08 <__alt_data_end+0xf8013c08>
10014cb4:	0029883a 	mov	r20,zero
10014cb8:	ddc01a04 	addi	r23,sp,104
10014cbc:	003bd206 	br	10013c08 <__alt_data_end+0xf8013c08>
10014cc0:	d9002303 	ldbu	r4,140(sp)
10014cc4:	d9001d85 	stb	r4,118(sp)
10014cc8:	003da606 	br	10014364 <__alt_data_end+0xf8014364>
10014ccc:	d8c02303 	ldbu	r3,140(sp)
10014cd0:	d8c01d85 	stb	r3,118(sp)
10014cd4:	003c7606 	br	10013eb0 <__alt_data_end+0xf8013eb0>
10014cd8:	d8c02303 	ldbu	r3,140(sp)
10014cdc:	d8c01d85 	stb	r3,118(sp)
10014ce0:	003c6506 	br	10013e78 <__alt_data_end+0xf8013e78>
10014ce4:	d9002303 	ldbu	r4,140(sp)
10014ce8:	d9001d85 	stb	r4,118(sp)
10014cec:	003d3d06 	br	100141e4 <__alt_data_end+0xf80141e4>
10014cf0:	d8c02303 	ldbu	r3,140(sp)
10014cf4:	d8c01d85 	stb	r3,118(sp)
10014cf8:	003d1d06 	br	10014170 <__alt_data_end+0xf8014170>
10014cfc:	d8c02303 	ldbu	r3,140(sp)
10014d00:	d8c01d85 	stb	r3,118(sp)
10014d04:	003d0306 	br	10014114 <__alt_data_end+0xf8014114>

10014d08 <__vfiprintf_internal>:
10014d08:	008400b4 	movhi	r2,4098
10014d0c:	10acbd04 	addi	r2,r2,-19724
10014d10:	300f883a 	mov	r7,r6
10014d14:	280d883a 	mov	r6,r5
10014d18:	200b883a 	mov	r5,r4
10014d1c:	11000017 	ldw	r4,0(r2)
10014d20:	00137fc1 	jmpi	100137fc <___vfiprintf_internal_r>

10014d24 <__sbprintf>:
10014d24:	2880030b 	ldhu	r2,12(r5)
10014d28:	2ac01917 	ldw	r11,100(r5)
10014d2c:	2a80038b 	ldhu	r10,14(r5)
10014d30:	2a400717 	ldw	r9,28(r5)
10014d34:	2a000917 	ldw	r8,36(r5)
10014d38:	defee204 	addi	sp,sp,-1144
10014d3c:	00c10004 	movi	r3,1024
10014d40:	dc011a15 	stw	r16,1128(sp)
10014d44:	10bfff4c 	andi	r2,r2,65533
10014d48:	2821883a 	mov	r16,r5
10014d4c:	d8cb883a 	add	r5,sp,r3
10014d50:	dc811c15 	stw	r18,1136(sp)
10014d54:	dc411b15 	stw	r17,1132(sp)
10014d58:	dfc11d15 	stw	ra,1140(sp)
10014d5c:	2025883a 	mov	r18,r4
10014d60:	d881030d 	sth	r2,1036(sp)
10014d64:	dac11915 	stw	r11,1124(sp)
10014d68:	da81038d 	sth	r10,1038(sp)
10014d6c:	da410715 	stw	r9,1052(sp)
10014d70:	da010915 	stw	r8,1060(sp)
10014d74:	dec10015 	stw	sp,1024(sp)
10014d78:	dec10415 	stw	sp,1040(sp)
10014d7c:	d8c10215 	stw	r3,1032(sp)
10014d80:	d8c10515 	stw	r3,1044(sp)
10014d84:	d8010615 	stw	zero,1048(sp)
10014d88:	00137fc0 	call	100137fc <___vfiprintf_internal_r>
10014d8c:	1023883a 	mov	r17,r2
10014d90:	10000416 	blt	r2,zero,10014da4 <__sbprintf+0x80>
10014d94:	d9410004 	addi	r5,sp,1024
10014d98:	9009883a 	mov	r4,r18
10014d9c:	00101200 	call	10010120 <_fflush_r>
10014da0:	10000d1e 	bne	r2,zero,10014dd8 <__sbprintf+0xb4>
10014da4:	d881030b 	ldhu	r2,1036(sp)
10014da8:	1080100c 	andi	r2,r2,64
10014dac:	10000326 	beq	r2,zero,10014dbc <__sbprintf+0x98>
10014db0:	8080030b 	ldhu	r2,12(r16)
10014db4:	10801014 	ori	r2,r2,64
10014db8:	8080030d 	sth	r2,12(r16)
10014dbc:	8805883a 	mov	r2,r17
10014dc0:	dfc11d17 	ldw	ra,1140(sp)
10014dc4:	dc811c17 	ldw	r18,1136(sp)
10014dc8:	dc411b17 	ldw	r17,1132(sp)
10014dcc:	dc011a17 	ldw	r16,1128(sp)
10014dd0:	dec11e04 	addi	sp,sp,1144
10014dd4:	f800283a 	ret
10014dd8:	047fffc4 	movi	r17,-1
10014ddc:	003ff106 	br	10014da4 <__alt_data_end+0xf8014da4>

10014de0 <_write_r>:
10014de0:	defffd04 	addi	sp,sp,-12
10014de4:	2805883a 	mov	r2,r5
10014de8:	dc000015 	stw	r16,0(sp)
10014dec:	040400b4 	movhi	r16,4098
10014df0:	dc400115 	stw	r17,4(sp)
10014df4:	300b883a 	mov	r5,r6
10014df8:	8434b204 	addi	r16,r16,-11576
10014dfc:	2023883a 	mov	r17,r4
10014e00:	380d883a 	mov	r6,r7
10014e04:	1009883a 	mov	r4,r2
10014e08:	dfc00215 	stw	ra,8(sp)
10014e0c:	80000015 	stw	zero,0(r16)
10014e10:	0016d4c0 	call	10016d4c <write>
10014e14:	00ffffc4 	movi	r3,-1
10014e18:	10c00526 	beq	r2,r3,10014e30 <_write_r+0x50>
10014e1c:	dfc00217 	ldw	ra,8(sp)
10014e20:	dc400117 	ldw	r17,4(sp)
10014e24:	dc000017 	ldw	r16,0(sp)
10014e28:	dec00304 	addi	sp,sp,12
10014e2c:	f800283a 	ret
10014e30:	80c00017 	ldw	r3,0(r16)
10014e34:	183ff926 	beq	r3,zero,10014e1c <__alt_data_end+0xf8014e1c>
10014e38:	88c00015 	stw	r3,0(r17)
10014e3c:	003ff706 	br	10014e1c <__alt_data_end+0xf8014e1c>

10014e40 <_close_r>:
10014e40:	defffd04 	addi	sp,sp,-12
10014e44:	dc000015 	stw	r16,0(sp)
10014e48:	040400b4 	movhi	r16,4098
10014e4c:	dc400115 	stw	r17,4(sp)
10014e50:	8434b204 	addi	r16,r16,-11576
10014e54:	2023883a 	mov	r17,r4
10014e58:	2809883a 	mov	r4,r5
10014e5c:	dfc00215 	stw	ra,8(sp)
10014e60:	80000015 	stw	zero,0(r16)
10014e64:	00164c40 	call	100164c4 <close>
10014e68:	00ffffc4 	movi	r3,-1
10014e6c:	10c00526 	beq	r2,r3,10014e84 <_close_r+0x44>
10014e70:	dfc00217 	ldw	ra,8(sp)
10014e74:	dc400117 	ldw	r17,4(sp)
10014e78:	dc000017 	ldw	r16,0(sp)
10014e7c:	dec00304 	addi	sp,sp,12
10014e80:	f800283a 	ret
10014e84:	80c00017 	ldw	r3,0(r16)
10014e88:	183ff926 	beq	r3,zero,10014e70 <__alt_data_end+0xf8014e70>
10014e8c:	88c00015 	stw	r3,0(r17)
10014e90:	003ff706 	br	10014e70 <__alt_data_end+0xf8014e70>

10014e94 <_calloc_r>:
10014e94:	defffe04 	addi	sp,sp,-8
10014e98:	2805883a 	mov	r2,r5
10014e9c:	dc000015 	stw	r16,0(sp)
10014ea0:	300b883a 	mov	r5,r6
10014ea4:	2021883a 	mov	r16,r4
10014ea8:	1009883a 	mov	r4,r2
10014eac:	dfc00115 	stw	ra,4(sp)
10014eb0:	00096fc0 	call	100096fc <__mulsi3>
10014eb4:	100b883a 	mov	r5,r2
10014eb8:	8009883a 	mov	r4,r16
10014ebc:	00112780 	call	10011278 <_malloc_r>
10014ec0:	10002926 	beq	r2,zero,10014f68 <_calloc_r+0xd4>
10014ec4:	11bfff17 	ldw	r6,-4(r2)
10014ec8:	1021883a 	mov	r16,r2
10014ecc:	00bfff04 	movi	r2,-4
10014ed0:	308c703a 	and	r6,r6,r2
10014ed4:	00c00904 	movi	r3,36
10014ed8:	308d883a 	add	r6,r6,r2
10014edc:	19801636 	bltu	r3,r6,10014f38 <_calloc_r+0xa4>
10014ee0:	008004c4 	movi	r2,19
10014ee4:	11800b2e 	bgeu	r2,r6,10014f14 <_calloc_r+0x80>
10014ee8:	80000015 	stw	zero,0(r16)
10014eec:	80000115 	stw	zero,4(r16)
10014ef0:	008006c4 	movi	r2,27
10014ef4:	11801a2e 	bgeu	r2,r6,10014f60 <_calloc_r+0xcc>
10014ef8:	80000215 	stw	zero,8(r16)
10014efc:	80000315 	stw	zero,12(r16)
10014f00:	30c0151e 	bne	r6,r3,10014f58 <_calloc_r+0xc4>
10014f04:	80000415 	stw	zero,16(r16)
10014f08:	80800604 	addi	r2,r16,24
10014f0c:	80000515 	stw	zero,20(r16)
10014f10:	00000106 	br	10014f18 <_calloc_r+0x84>
10014f14:	8005883a 	mov	r2,r16
10014f18:	10000015 	stw	zero,0(r2)
10014f1c:	10000115 	stw	zero,4(r2)
10014f20:	10000215 	stw	zero,8(r2)
10014f24:	8005883a 	mov	r2,r16
10014f28:	dfc00117 	ldw	ra,4(sp)
10014f2c:	dc000017 	ldw	r16,0(sp)
10014f30:	dec00204 	addi	sp,sp,8
10014f34:	f800283a 	ret
10014f38:	000b883a 	mov	r5,zero
10014f3c:	8009883a 	mov	r4,r16
10014f40:	0011cc40 	call	10011cc4 <memset>
10014f44:	8005883a 	mov	r2,r16
10014f48:	dfc00117 	ldw	ra,4(sp)
10014f4c:	dc000017 	ldw	r16,0(sp)
10014f50:	dec00204 	addi	sp,sp,8
10014f54:	f800283a 	ret
10014f58:	80800404 	addi	r2,r16,16
10014f5c:	003fee06 	br	10014f18 <__alt_data_end+0xf8014f18>
10014f60:	80800204 	addi	r2,r16,8
10014f64:	003fec06 	br	10014f18 <__alt_data_end+0xf8014f18>
10014f68:	0005883a 	mov	r2,zero
10014f6c:	003fee06 	br	10014f28 <__alt_data_end+0xf8014f28>

10014f70 <_fclose_r>:
10014f70:	28003926 	beq	r5,zero,10015058 <_fclose_r+0xe8>
10014f74:	defffc04 	addi	sp,sp,-16
10014f78:	dc400115 	stw	r17,4(sp)
10014f7c:	dc000015 	stw	r16,0(sp)
10014f80:	dfc00315 	stw	ra,12(sp)
10014f84:	dc800215 	stw	r18,8(sp)
10014f88:	2023883a 	mov	r17,r4
10014f8c:	2821883a 	mov	r16,r5
10014f90:	20000226 	beq	r4,zero,10014f9c <_fclose_r+0x2c>
10014f94:	20800e17 	ldw	r2,56(r4)
10014f98:	10002726 	beq	r2,zero,10015038 <_fclose_r+0xc8>
10014f9c:	8080030f 	ldh	r2,12(r16)
10014fa0:	1000071e 	bne	r2,zero,10014fc0 <_fclose_r+0x50>
10014fa4:	0005883a 	mov	r2,zero
10014fa8:	dfc00317 	ldw	ra,12(sp)
10014fac:	dc800217 	ldw	r18,8(sp)
10014fb0:	dc400117 	ldw	r17,4(sp)
10014fb4:	dc000017 	ldw	r16,0(sp)
10014fb8:	dec00404 	addi	sp,sp,16
10014fbc:	f800283a 	ret
10014fc0:	800b883a 	mov	r5,r16
10014fc4:	8809883a 	mov	r4,r17
10014fc8:	000ff040 	call	1000ff04 <__sflush_r>
10014fcc:	1025883a 	mov	r18,r2
10014fd0:	80800b17 	ldw	r2,44(r16)
10014fd4:	10000426 	beq	r2,zero,10014fe8 <_fclose_r+0x78>
10014fd8:	81400717 	ldw	r5,28(r16)
10014fdc:	8809883a 	mov	r4,r17
10014fe0:	103ee83a 	callr	r2
10014fe4:	10001616 	blt	r2,zero,10015040 <_fclose_r+0xd0>
10014fe8:	8080030b 	ldhu	r2,12(r16)
10014fec:	1080200c 	andi	r2,r2,128
10014ff0:	1000151e 	bne	r2,zero,10015048 <_fclose_r+0xd8>
10014ff4:	81400c17 	ldw	r5,48(r16)
10014ff8:	28000526 	beq	r5,zero,10015010 <_fclose_r+0xa0>
10014ffc:	80801004 	addi	r2,r16,64
10015000:	28800226 	beq	r5,r2,1001500c <_fclose_r+0x9c>
10015004:	8809883a 	mov	r4,r17
10015008:	00106800 	call	10010680 <_free_r>
1001500c:	80000c15 	stw	zero,48(r16)
10015010:	81401117 	ldw	r5,68(r16)
10015014:	28000326 	beq	r5,zero,10015024 <_fclose_r+0xb4>
10015018:	8809883a 	mov	r4,r17
1001501c:	00106800 	call	10010680 <_free_r>
10015020:	80001115 	stw	zero,68(r16)
10015024:	001051c0 	call	1001051c <__sfp_lock_acquire>
10015028:	8000030d 	sth	zero,12(r16)
1001502c:	00105200 	call	10010520 <__sfp_lock_release>
10015030:	9005883a 	mov	r2,r18
10015034:	003fdc06 	br	10014fa8 <__alt_data_end+0xf8014fa8>
10015038:	001050c0 	call	1001050c <__sinit>
1001503c:	003fd706 	br	10014f9c <__alt_data_end+0xf8014f9c>
10015040:	04bfffc4 	movi	r18,-1
10015044:	003fe806 	br	10014fe8 <__alt_data_end+0xf8014fe8>
10015048:	81400417 	ldw	r5,16(r16)
1001504c:	8809883a 	mov	r4,r17
10015050:	00106800 	call	10010680 <_free_r>
10015054:	003fe706 	br	10014ff4 <__alt_data_end+0xf8014ff4>
10015058:	0005883a 	mov	r2,zero
1001505c:	f800283a 	ret

10015060 <fclose>:
10015060:	008400b4 	movhi	r2,4098
10015064:	10acbd04 	addi	r2,r2,-19724
10015068:	200b883a 	mov	r5,r4
1001506c:	11000017 	ldw	r4,0(r2)
10015070:	0014f701 	jmpi	10014f70 <_fclose_r>

10015074 <__fputwc>:
10015074:	defff804 	addi	sp,sp,-32
10015078:	dcc00415 	stw	r19,16(sp)
1001507c:	dc800315 	stw	r18,12(sp)
10015080:	dc000115 	stw	r16,4(sp)
10015084:	dfc00715 	stw	ra,28(sp)
10015088:	dd400615 	stw	r21,24(sp)
1001508c:	dd000515 	stw	r20,20(sp)
10015090:	dc400215 	stw	r17,8(sp)
10015094:	2027883a 	mov	r19,r4
10015098:	2825883a 	mov	r18,r5
1001509c:	3021883a 	mov	r16,r6
100150a0:	00110680 	call	10011068 <__locale_mb_cur_max>
100150a4:	00c00044 	movi	r3,1
100150a8:	10c03e26 	beq	r2,r3,100151a4 <__fputwc+0x130>
100150ac:	81c01704 	addi	r7,r16,92
100150b0:	900d883a 	mov	r6,r18
100150b4:	d80b883a 	mov	r5,sp
100150b8:	9809883a 	mov	r4,r19
100150bc:	00155440 	call	10015544 <_wcrtomb_r>
100150c0:	1029883a 	mov	r20,r2
100150c4:	00bfffc4 	movi	r2,-1
100150c8:	a0802026 	beq	r20,r2,1001514c <__fputwc+0xd8>
100150cc:	d9400003 	ldbu	r5,0(sp)
100150d0:	a0001c26 	beq	r20,zero,10015144 <__fputwc+0xd0>
100150d4:	0023883a 	mov	r17,zero
100150d8:	05400284 	movi	r21,10
100150dc:	00000906 	br	10015104 <__fputwc+0x90>
100150e0:	80800017 	ldw	r2,0(r16)
100150e4:	11400005 	stb	r5,0(r2)
100150e8:	80c00017 	ldw	r3,0(r16)
100150ec:	18c00044 	addi	r3,r3,1
100150f0:	80c00015 	stw	r3,0(r16)
100150f4:	8c400044 	addi	r17,r17,1
100150f8:	dc45883a 	add	r2,sp,r17
100150fc:	8d00112e 	bgeu	r17,r20,10015144 <__fputwc+0xd0>
10015100:	11400003 	ldbu	r5,0(r2)
10015104:	80c00217 	ldw	r3,8(r16)
10015108:	18ffffc4 	addi	r3,r3,-1
1001510c:	80c00215 	stw	r3,8(r16)
10015110:	183ff30e 	bge	r3,zero,100150e0 <__alt_data_end+0xf80150e0>
10015114:	80800617 	ldw	r2,24(r16)
10015118:	18801916 	blt	r3,r2,10015180 <__fputwc+0x10c>
1001511c:	80800017 	ldw	r2,0(r16)
10015120:	11400005 	stb	r5,0(r2)
10015124:	80800017 	ldw	r2,0(r16)
10015128:	10c00003 	ldbu	r3,0(r2)
1001512c:	10800044 	addi	r2,r2,1
10015130:	1d402326 	beq	r3,r21,100151c0 <__fputwc+0x14c>
10015134:	80800015 	stw	r2,0(r16)
10015138:	8c400044 	addi	r17,r17,1
1001513c:	dc45883a 	add	r2,sp,r17
10015140:	8d3fef36 	bltu	r17,r20,10015100 <__alt_data_end+0xf8015100>
10015144:	9005883a 	mov	r2,r18
10015148:	00000406 	br	1001515c <__fputwc+0xe8>
1001514c:	80c0030b 	ldhu	r3,12(r16)
10015150:	a005883a 	mov	r2,r20
10015154:	18c01014 	ori	r3,r3,64
10015158:	80c0030d 	sth	r3,12(r16)
1001515c:	dfc00717 	ldw	ra,28(sp)
10015160:	dd400617 	ldw	r21,24(sp)
10015164:	dd000517 	ldw	r20,20(sp)
10015168:	dcc00417 	ldw	r19,16(sp)
1001516c:	dc800317 	ldw	r18,12(sp)
10015170:	dc400217 	ldw	r17,8(sp)
10015174:	dc000117 	ldw	r16,4(sp)
10015178:	dec00804 	addi	sp,sp,32
1001517c:	f800283a 	ret
10015180:	800d883a 	mov	r6,r16
10015184:	29403fcc 	andi	r5,r5,255
10015188:	9809883a 	mov	r4,r19
1001518c:	00153ec0 	call	100153ec <__swbuf_r>
10015190:	10bfffe0 	cmpeqi	r2,r2,-1
10015194:	10803fcc 	andi	r2,r2,255
10015198:	103fd626 	beq	r2,zero,100150f4 <__alt_data_end+0xf80150f4>
1001519c:	00bfffc4 	movi	r2,-1
100151a0:	003fee06 	br	1001515c <__alt_data_end+0xf801515c>
100151a4:	90ffffc4 	addi	r3,r18,-1
100151a8:	01003f84 	movi	r4,254
100151ac:	20ffbf36 	bltu	r4,r3,100150ac <__alt_data_end+0xf80150ac>
100151b0:	900b883a 	mov	r5,r18
100151b4:	dc800005 	stb	r18,0(sp)
100151b8:	1029883a 	mov	r20,r2
100151bc:	003fc506 	br	100150d4 <__alt_data_end+0xf80150d4>
100151c0:	800d883a 	mov	r6,r16
100151c4:	a80b883a 	mov	r5,r21
100151c8:	9809883a 	mov	r4,r19
100151cc:	00153ec0 	call	100153ec <__swbuf_r>
100151d0:	10bfffe0 	cmpeqi	r2,r2,-1
100151d4:	003fef06 	br	10015194 <__alt_data_end+0xf8015194>

100151d8 <_fputwc_r>:
100151d8:	3080030b 	ldhu	r2,12(r6)
100151dc:	10c8000c 	andi	r3,r2,8192
100151e0:	1800051e 	bne	r3,zero,100151f8 <_fputwc_r+0x20>
100151e4:	30c01917 	ldw	r3,100(r6)
100151e8:	10880014 	ori	r2,r2,8192
100151ec:	3080030d 	sth	r2,12(r6)
100151f0:	18880014 	ori	r2,r3,8192
100151f4:	30801915 	stw	r2,100(r6)
100151f8:	00150741 	jmpi	10015074 <__fputwc>

100151fc <fputwc>:
100151fc:	008400b4 	movhi	r2,4098
10015200:	defffc04 	addi	sp,sp,-16
10015204:	10acbd04 	addi	r2,r2,-19724
10015208:	dc000115 	stw	r16,4(sp)
1001520c:	14000017 	ldw	r16,0(r2)
10015210:	dc400215 	stw	r17,8(sp)
10015214:	dfc00315 	stw	ra,12(sp)
10015218:	2023883a 	mov	r17,r4
1001521c:	80000226 	beq	r16,zero,10015228 <fputwc+0x2c>
10015220:	80800e17 	ldw	r2,56(r16)
10015224:	10001026 	beq	r2,zero,10015268 <fputwc+0x6c>
10015228:	2880030b 	ldhu	r2,12(r5)
1001522c:	10c8000c 	andi	r3,r2,8192
10015230:	1800051e 	bne	r3,zero,10015248 <fputwc+0x4c>
10015234:	28c01917 	ldw	r3,100(r5)
10015238:	10880014 	ori	r2,r2,8192
1001523c:	2880030d 	sth	r2,12(r5)
10015240:	18880014 	ori	r2,r3,8192
10015244:	28801915 	stw	r2,100(r5)
10015248:	280d883a 	mov	r6,r5
1001524c:	8009883a 	mov	r4,r16
10015250:	880b883a 	mov	r5,r17
10015254:	dfc00317 	ldw	ra,12(sp)
10015258:	dc400217 	ldw	r17,8(sp)
1001525c:	dc000117 	ldw	r16,4(sp)
10015260:	dec00404 	addi	sp,sp,16
10015264:	00150741 	jmpi	10015074 <__fputwc>
10015268:	8009883a 	mov	r4,r16
1001526c:	d9400015 	stw	r5,0(sp)
10015270:	001050c0 	call	1001050c <__sinit>
10015274:	d9400017 	ldw	r5,0(sp)
10015278:	003feb06 	br	10015228 <__alt_data_end+0xf8015228>

1001527c <_fstat_r>:
1001527c:	defffd04 	addi	sp,sp,-12
10015280:	2805883a 	mov	r2,r5
10015284:	dc000015 	stw	r16,0(sp)
10015288:	040400b4 	movhi	r16,4098
1001528c:	dc400115 	stw	r17,4(sp)
10015290:	8434b204 	addi	r16,r16,-11576
10015294:	2023883a 	mov	r17,r4
10015298:	300b883a 	mov	r5,r6
1001529c:	1009883a 	mov	r4,r2
100152a0:	dfc00215 	stw	ra,8(sp)
100152a4:	80000015 	stw	zero,0(r16)
100152a8:	00166040 	call	10016604 <fstat>
100152ac:	00ffffc4 	movi	r3,-1
100152b0:	10c00526 	beq	r2,r3,100152c8 <_fstat_r+0x4c>
100152b4:	dfc00217 	ldw	ra,8(sp)
100152b8:	dc400117 	ldw	r17,4(sp)
100152bc:	dc000017 	ldw	r16,0(sp)
100152c0:	dec00304 	addi	sp,sp,12
100152c4:	f800283a 	ret
100152c8:	80c00017 	ldw	r3,0(r16)
100152cc:	183ff926 	beq	r3,zero,100152b4 <__alt_data_end+0xf80152b4>
100152d0:	88c00015 	stw	r3,0(r17)
100152d4:	003ff706 	br	100152b4 <__alt_data_end+0xf80152b4>

100152d8 <_isatty_r>:
100152d8:	defffd04 	addi	sp,sp,-12
100152dc:	dc000015 	stw	r16,0(sp)
100152e0:	040400b4 	movhi	r16,4098
100152e4:	dc400115 	stw	r17,4(sp)
100152e8:	8434b204 	addi	r16,r16,-11576
100152ec:	2023883a 	mov	r17,r4
100152f0:	2809883a 	mov	r4,r5
100152f4:	dfc00215 	stw	ra,8(sp)
100152f8:	80000015 	stw	zero,0(r16)
100152fc:	00166f80 	call	100166f8 <isatty>
10015300:	00ffffc4 	movi	r3,-1
10015304:	10c00526 	beq	r2,r3,1001531c <_isatty_r+0x44>
10015308:	dfc00217 	ldw	ra,8(sp)
1001530c:	dc400117 	ldw	r17,4(sp)
10015310:	dc000017 	ldw	r16,0(sp)
10015314:	dec00304 	addi	sp,sp,12
10015318:	f800283a 	ret
1001531c:	80c00017 	ldw	r3,0(r16)
10015320:	183ff926 	beq	r3,zero,10015308 <__alt_data_end+0xf8015308>
10015324:	88c00015 	stw	r3,0(r17)
10015328:	003ff706 	br	10015308 <__alt_data_end+0xf8015308>

1001532c <_lseek_r>:
1001532c:	defffd04 	addi	sp,sp,-12
10015330:	2805883a 	mov	r2,r5
10015334:	dc000015 	stw	r16,0(sp)
10015338:	040400b4 	movhi	r16,4098
1001533c:	dc400115 	stw	r17,4(sp)
10015340:	300b883a 	mov	r5,r6
10015344:	8434b204 	addi	r16,r16,-11576
10015348:	2023883a 	mov	r17,r4
1001534c:	380d883a 	mov	r6,r7
10015350:	1009883a 	mov	r4,r2
10015354:	dfc00215 	stw	ra,8(sp)
10015358:	80000015 	stw	zero,0(r16)
1001535c:	00168cc0 	call	100168cc <lseek>
10015360:	00ffffc4 	movi	r3,-1
10015364:	10c00526 	beq	r2,r3,1001537c <_lseek_r+0x50>
10015368:	dfc00217 	ldw	ra,8(sp)
1001536c:	dc400117 	ldw	r17,4(sp)
10015370:	dc000017 	ldw	r16,0(sp)
10015374:	dec00304 	addi	sp,sp,12
10015378:	f800283a 	ret
1001537c:	80c00017 	ldw	r3,0(r16)
10015380:	183ff926 	beq	r3,zero,10015368 <__alt_data_end+0xf8015368>
10015384:	88c00015 	stw	r3,0(r17)
10015388:	003ff706 	br	10015368 <__alt_data_end+0xf8015368>

1001538c <_read_r>:
1001538c:	defffd04 	addi	sp,sp,-12
10015390:	2805883a 	mov	r2,r5
10015394:	dc000015 	stw	r16,0(sp)
10015398:	040400b4 	movhi	r16,4098
1001539c:	dc400115 	stw	r17,4(sp)
100153a0:	300b883a 	mov	r5,r6
100153a4:	8434b204 	addi	r16,r16,-11576
100153a8:	2023883a 	mov	r17,r4
100153ac:	380d883a 	mov	r6,r7
100153b0:	1009883a 	mov	r4,r2
100153b4:	dfc00215 	stw	ra,8(sp)
100153b8:	80000015 	stw	zero,0(r16)
100153bc:	0016aa80 	call	10016aa8 <read>
100153c0:	00ffffc4 	movi	r3,-1
100153c4:	10c00526 	beq	r2,r3,100153dc <_read_r+0x50>
100153c8:	dfc00217 	ldw	ra,8(sp)
100153cc:	dc400117 	ldw	r17,4(sp)
100153d0:	dc000017 	ldw	r16,0(sp)
100153d4:	dec00304 	addi	sp,sp,12
100153d8:	f800283a 	ret
100153dc:	80c00017 	ldw	r3,0(r16)
100153e0:	183ff926 	beq	r3,zero,100153c8 <__alt_data_end+0xf80153c8>
100153e4:	88c00015 	stw	r3,0(r17)
100153e8:	003ff706 	br	100153c8 <__alt_data_end+0xf80153c8>

100153ec <__swbuf_r>:
100153ec:	defffb04 	addi	sp,sp,-20
100153f0:	dcc00315 	stw	r19,12(sp)
100153f4:	dc800215 	stw	r18,8(sp)
100153f8:	dc000015 	stw	r16,0(sp)
100153fc:	dfc00415 	stw	ra,16(sp)
10015400:	dc400115 	stw	r17,4(sp)
10015404:	2025883a 	mov	r18,r4
10015408:	2827883a 	mov	r19,r5
1001540c:	3021883a 	mov	r16,r6
10015410:	20000226 	beq	r4,zero,1001541c <__swbuf_r+0x30>
10015414:	20800e17 	ldw	r2,56(r4)
10015418:	10004226 	beq	r2,zero,10015524 <__swbuf_r+0x138>
1001541c:	80800617 	ldw	r2,24(r16)
10015420:	8100030b 	ldhu	r4,12(r16)
10015424:	80800215 	stw	r2,8(r16)
10015428:	2080020c 	andi	r2,r4,8
1001542c:	10003626 	beq	r2,zero,10015508 <__swbuf_r+0x11c>
10015430:	80c00417 	ldw	r3,16(r16)
10015434:	18003426 	beq	r3,zero,10015508 <__swbuf_r+0x11c>
10015438:	2088000c 	andi	r2,r4,8192
1001543c:	9c403fcc 	andi	r17,r19,255
10015440:	10001a26 	beq	r2,zero,100154ac <__swbuf_r+0xc0>
10015444:	80800017 	ldw	r2,0(r16)
10015448:	81000517 	ldw	r4,20(r16)
1001544c:	10c7c83a 	sub	r3,r2,r3
10015450:	1900200e 	bge	r3,r4,100154d4 <__swbuf_r+0xe8>
10015454:	18c00044 	addi	r3,r3,1
10015458:	81000217 	ldw	r4,8(r16)
1001545c:	11400044 	addi	r5,r2,1
10015460:	81400015 	stw	r5,0(r16)
10015464:	213fffc4 	addi	r4,r4,-1
10015468:	81000215 	stw	r4,8(r16)
1001546c:	14c00005 	stb	r19,0(r2)
10015470:	80800517 	ldw	r2,20(r16)
10015474:	10c01e26 	beq	r2,r3,100154f0 <__swbuf_r+0x104>
10015478:	8080030b 	ldhu	r2,12(r16)
1001547c:	1080004c 	andi	r2,r2,1
10015480:	10000226 	beq	r2,zero,1001548c <__swbuf_r+0xa0>
10015484:	00800284 	movi	r2,10
10015488:	88801926 	beq	r17,r2,100154f0 <__swbuf_r+0x104>
1001548c:	8805883a 	mov	r2,r17
10015490:	dfc00417 	ldw	ra,16(sp)
10015494:	dcc00317 	ldw	r19,12(sp)
10015498:	dc800217 	ldw	r18,8(sp)
1001549c:	dc400117 	ldw	r17,4(sp)
100154a0:	dc000017 	ldw	r16,0(sp)
100154a4:	dec00504 	addi	sp,sp,20
100154a8:	f800283a 	ret
100154ac:	81401917 	ldw	r5,100(r16)
100154b0:	00b7ffc4 	movi	r2,-8193
100154b4:	21080014 	ori	r4,r4,8192
100154b8:	2884703a 	and	r2,r5,r2
100154bc:	80801915 	stw	r2,100(r16)
100154c0:	80800017 	ldw	r2,0(r16)
100154c4:	8100030d 	sth	r4,12(r16)
100154c8:	81000517 	ldw	r4,20(r16)
100154cc:	10c7c83a 	sub	r3,r2,r3
100154d0:	193fe016 	blt	r3,r4,10015454 <__alt_data_end+0xf8015454>
100154d4:	800b883a 	mov	r5,r16
100154d8:	9009883a 	mov	r4,r18
100154dc:	00101200 	call	10010120 <_fflush_r>
100154e0:	1000071e 	bne	r2,zero,10015500 <__swbuf_r+0x114>
100154e4:	80800017 	ldw	r2,0(r16)
100154e8:	00c00044 	movi	r3,1
100154ec:	003fda06 	br	10015458 <__alt_data_end+0xf8015458>
100154f0:	800b883a 	mov	r5,r16
100154f4:	9009883a 	mov	r4,r18
100154f8:	00101200 	call	10010120 <_fflush_r>
100154fc:	103fe326 	beq	r2,zero,1001548c <__alt_data_end+0xf801548c>
10015500:	00bfffc4 	movi	r2,-1
10015504:	003fe206 	br	10015490 <__alt_data_end+0xf8015490>
10015508:	800b883a 	mov	r5,r16
1001550c:	9009883a 	mov	r4,r18
10015510:	000e5000 	call	1000e500 <__swsetup_r>
10015514:	103ffa1e 	bne	r2,zero,10015500 <__alt_data_end+0xf8015500>
10015518:	8100030b 	ldhu	r4,12(r16)
1001551c:	80c00417 	ldw	r3,16(r16)
10015520:	003fc506 	br	10015438 <__alt_data_end+0xf8015438>
10015524:	001050c0 	call	1001050c <__sinit>
10015528:	003fbc06 	br	1001541c <__alt_data_end+0xf801541c>

1001552c <__swbuf>:
1001552c:	008400b4 	movhi	r2,4098
10015530:	10acbd04 	addi	r2,r2,-19724
10015534:	280d883a 	mov	r6,r5
10015538:	200b883a 	mov	r5,r4
1001553c:	11000017 	ldw	r4,0(r2)
10015540:	00153ec1 	jmpi	100153ec <__swbuf_r>

10015544 <_wcrtomb_r>:
10015544:	defff604 	addi	sp,sp,-40
10015548:	008400b4 	movhi	r2,4098
1001554c:	dc800815 	stw	r18,32(sp)
10015550:	dc400715 	stw	r17,28(sp)
10015554:	dc000615 	stw	r16,24(sp)
10015558:	10acc104 	addi	r2,r2,-19708
1001555c:	dfc00915 	stw	ra,36(sp)
10015560:	2021883a 	mov	r16,r4
10015564:	3823883a 	mov	r17,r7
10015568:	14800017 	ldw	r18,0(r2)
1001556c:	28001426 	beq	r5,zero,100155c0 <_wcrtomb_r+0x7c>
10015570:	d9400415 	stw	r5,16(sp)
10015574:	d9800515 	stw	r6,20(sp)
10015578:	001105c0 	call	1001105c <__locale_charset>
1001557c:	d9800517 	ldw	r6,20(sp)
10015580:	d9400417 	ldw	r5,16(sp)
10015584:	100f883a 	mov	r7,r2
10015588:	dc400015 	stw	r17,0(sp)
1001558c:	8009883a 	mov	r4,r16
10015590:	903ee83a 	callr	r18
10015594:	00ffffc4 	movi	r3,-1
10015598:	10c0031e 	bne	r2,r3,100155a8 <_wcrtomb_r+0x64>
1001559c:	88000015 	stw	zero,0(r17)
100155a0:	00c02284 	movi	r3,138
100155a4:	80c00015 	stw	r3,0(r16)
100155a8:	dfc00917 	ldw	ra,36(sp)
100155ac:	dc800817 	ldw	r18,32(sp)
100155b0:	dc400717 	ldw	r17,28(sp)
100155b4:	dc000617 	ldw	r16,24(sp)
100155b8:	dec00a04 	addi	sp,sp,40
100155bc:	f800283a 	ret
100155c0:	001105c0 	call	1001105c <__locale_charset>
100155c4:	100f883a 	mov	r7,r2
100155c8:	dc400015 	stw	r17,0(sp)
100155cc:	000d883a 	mov	r6,zero
100155d0:	d9400104 	addi	r5,sp,4
100155d4:	8009883a 	mov	r4,r16
100155d8:	903ee83a 	callr	r18
100155dc:	003fed06 	br	10015594 <__alt_data_end+0xf8015594>

100155e0 <wcrtomb>:
100155e0:	defff604 	addi	sp,sp,-40
100155e4:	008400b4 	movhi	r2,4098
100155e8:	dc800615 	stw	r18,24(sp)
100155ec:	dc400515 	stw	r17,20(sp)
100155f0:	10acbd04 	addi	r2,r2,-19724
100155f4:	dfc00915 	stw	ra,36(sp)
100155f8:	dd000815 	stw	r20,32(sp)
100155fc:	dcc00715 	stw	r19,28(sp)
10015600:	dc000415 	stw	r16,16(sp)
10015604:	3025883a 	mov	r18,r6
10015608:	14400017 	ldw	r17,0(r2)
1001560c:	20001926 	beq	r4,zero,10015674 <wcrtomb+0x94>
10015610:	008400b4 	movhi	r2,4098
10015614:	10acc104 	addi	r2,r2,-19708
10015618:	15000017 	ldw	r20,0(r2)
1001561c:	2021883a 	mov	r16,r4
10015620:	2827883a 	mov	r19,r5
10015624:	001105c0 	call	1001105c <__locale_charset>
10015628:	100f883a 	mov	r7,r2
1001562c:	dc800015 	stw	r18,0(sp)
10015630:	980d883a 	mov	r6,r19
10015634:	800b883a 	mov	r5,r16
10015638:	8809883a 	mov	r4,r17
1001563c:	a03ee83a 	callr	r20
10015640:	00ffffc4 	movi	r3,-1
10015644:	10c0031e 	bne	r2,r3,10015654 <wcrtomb+0x74>
10015648:	90000015 	stw	zero,0(r18)
1001564c:	00c02284 	movi	r3,138
10015650:	88c00015 	stw	r3,0(r17)
10015654:	dfc00917 	ldw	ra,36(sp)
10015658:	dd000817 	ldw	r20,32(sp)
1001565c:	dcc00717 	ldw	r19,28(sp)
10015660:	dc800617 	ldw	r18,24(sp)
10015664:	dc400517 	ldw	r17,20(sp)
10015668:	dc000417 	ldw	r16,16(sp)
1001566c:	dec00a04 	addi	sp,sp,40
10015670:	f800283a 	ret
10015674:	008400b4 	movhi	r2,4098
10015678:	10acc104 	addi	r2,r2,-19708
1001567c:	14000017 	ldw	r16,0(r2)
10015680:	001105c0 	call	1001105c <__locale_charset>
10015684:	100f883a 	mov	r7,r2
10015688:	dc800015 	stw	r18,0(sp)
1001568c:	000d883a 	mov	r6,zero
10015690:	d9400104 	addi	r5,sp,4
10015694:	8809883a 	mov	r4,r17
10015698:	803ee83a 	callr	r16
1001569c:	003fe806 	br	10015640 <__alt_data_end+0xf8015640>

100156a0 <__ascii_wctomb>:
100156a0:	28000526 	beq	r5,zero,100156b8 <__ascii_wctomb+0x18>
100156a4:	00803fc4 	movi	r2,255
100156a8:	11800536 	bltu	r2,r6,100156c0 <__ascii_wctomb+0x20>
100156ac:	29800005 	stb	r6,0(r5)
100156b0:	00800044 	movi	r2,1
100156b4:	f800283a 	ret
100156b8:	0005883a 	mov	r2,zero
100156bc:	f800283a 	ret
100156c0:	00802284 	movi	r2,138
100156c4:	20800015 	stw	r2,0(r4)
100156c8:	00bfffc4 	movi	r2,-1
100156cc:	f800283a 	ret

100156d0 <_wctomb_r>:
100156d0:	008400b4 	movhi	r2,4098
100156d4:	defff904 	addi	sp,sp,-28
100156d8:	10acc104 	addi	r2,r2,-19708
100156dc:	dfc00615 	stw	ra,24(sp)
100156e0:	dc400515 	stw	r17,20(sp)
100156e4:	dc000415 	stw	r16,16(sp)
100156e8:	3823883a 	mov	r17,r7
100156ec:	14000017 	ldw	r16,0(r2)
100156f0:	d9000115 	stw	r4,4(sp)
100156f4:	d9400215 	stw	r5,8(sp)
100156f8:	d9800315 	stw	r6,12(sp)
100156fc:	001105c0 	call	1001105c <__locale_charset>
10015700:	d9800317 	ldw	r6,12(sp)
10015704:	d9400217 	ldw	r5,8(sp)
10015708:	d9000117 	ldw	r4,4(sp)
1001570c:	100f883a 	mov	r7,r2
10015710:	dc400015 	stw	r17,0(sp)
10015714:	803ee83a 	callr	r16
10015718:	dfc00617 	ldw	ra,24(sp)
1001571c:	dc400517 	ldw	r17,20(sp)
10015720:	dc000417 	ldw	r16,16(sp)
10015724:	dec00704 	addi	sp,sp,28
10015728:	f800283a 	ret

1001572c <__udivdi3>:
1001572c:	defff404 	addi	sp,sp,-48
10015730:	dcc00515 	stw	r19,20(sp)
10015734:	dc000215 	stw	r16,8(sp)
10015738:	dfc00b15 	stw	ra,44(sp)
1001573c:	df000a15 	stw	fp,40(sp)
10015740:	ddc00915 	stw	r23,36(sp)
10015744:	dd800815 	stw	r22,32(sp)
10015748:	dd400715 	stw	r21,28(sp)
1001574c:	dd000615 	stw	r20,24(sp)
10015750:	dc800415 	stw	r18,16(sp)
10015754:	dc400315 	stw	r17,12(sp)
10015758:	2027883a 	mov	r19,r4
1001575c:	2821883a 	mov	r16,r5
10015760:	3800461e 	bne	r7,zero,1001587c <__udivdi3+0x150>
10015764:	3023883a 	mov	r17,r6
10015768:	2025883a 	mov	r18,r4
1001576c:	2980572e 	bgeu	r5,r6,100158cc <__udivdi3+0x1a0>
10015770:	00bfffd4 	movui	r2,65535
10015774:	282d883a 	mov	r22,r5
10015778:	1180b236 	bltu	r2,r6,10015a44 <__udivdi3+0x318>
1001577c:	00803fc4 	movi	r2,255
10015780:	1185803a 	cmpltu	r2,r2,r6
10015784:	100490fa 	slli	r2,r2,3
10015788:	3086d83a 	srl	r3,r6,r2
1001578c:	010400b4 	movhi	r4,4098
10015790:	21243604 	addi	r4,r4,-28456
10015794:	20c7883a 	add	r3,r4,r3
10015798:	18c00003 	ldbu	r3,0(r3)
1001579c:	1885883a 	add	r2,r3,r2
100157a0:	00c00804 	movi	r3,32
100157a4:	1887c83a 	sub	r3,r3,r2
100157a8:	18000526 	beq	r3,zero,100157c0 <__udivdi3+0x94>
100157ac:	80e0983a 	sll	r16,r16,r3
100157b0:	9884d83a 	srl	r2,r19,r2
100157b4:	30e2983a 	sll	r17,r6,r3
100157b8:	98e4983a 	sll	r18,r19,r3
100157bc:	142cb03a 	or	r22,r2,r16
100157c0:	882ad43a 	srli	r21,r17,16
100157c4:	b009883a 	mov	r4,r22
100157c8:	8d3fffcc 	andi	r20,r17,65535
100157cc:	a80b883a 	mov	r5,r21
100157d0:	00096a40 	call	100096a4 <__umodsi3>
100157d4:	b009883a 	mov	r4,r22
100157d8:	a80b883a 	mov	r5,r21
100157dc:	1027883a 	mov	r19,r2
100157e0:	00096400 	call	10009640 <__udivsi3>
100157e4:	100b883a 	mov	r5,r2
100157e8:	a009883a 	mov	r4,r20
100157ec:	102d883a 	mov	r22,r2
100157f0:	00096fc0 	call	100096fc <__mulsi3>
100157f4:	9826943a 	slli	r19,r19,16
100157f8:	9006d43a 	srli	r3,r18,16
100157fc:	1cc6b03a 	or	r3,r3,r19
10015800:	1880052e 	bgeu	r3,r2,10015818 <__udivdi3+0xec>
10015804:	1c47883a 	add	r3,r3,r17
10015808:	b13fffc4 	addi	r4,r22,-1
1001580c:	1c400136 	bltu	r3,r17,10015814 <__udivdi3+0xe8>
10015810:	18814236 	bltu	r3,r2,10015d1c <__udivdi3+0x5f0>
10015814:	202d883a 	mov	r22,r4
10015818:	18a1c83a 	sub	r16,r3,r2
1001581c:	8009883a 	mov	r4,r16
10015820:	a80b883a 	mov	r5,r21
10015824:	00096a40 	call	100096a4 <__umodsi3>
10015828:	1027883a 	mov	r19,r2
1001582c:	8009883a 	mov	r4,r16
10015830:	a80b883a 	mov	r5,r21
10015834:	9826943a 	slli	r19,r19,16
10015838:	00096400 	call	10009640 <__udivsi3>
1001583c:	100b883a 	mov	r5,r2
10015840:	a009883a 	mov	r4,r20
10015844:	94bfffcc 	andi	r18,r18,65535
10015848:	1021883a 	mov	r16,r2
1001584c:	94e4b03a 	or	r18,r18,r19
10015850:	00096fc0 	call	100096fc <__mulsi3>
10015854:	9080052e 	bgeu	r18,r2,1001586c <__udivdi3+0x140>
10015858:	8ca5883a 	add	r18,r17,r18
1001585c:	80ffffc4 	addi	r3,r16,-1
10015860:	94410c36 	bltu	r18,r17,10015c94 <__udivdi3+0x568>
10015864:	90810b2e 	bgeu	r18,r2,10015c94 <__udivdi3+0x568>
10015868:	843fff84 	addi	r16,r16,-2
1001586c:	b004943a 	slli	r2,r22,16
10015870:	0007883a 	mov	r3,zero
10015874:	1404b03a 	or	r2,r2,r16
10015878:	00005e06 	br	100159f4 <__udivdi3+0x2c8>
1001587c:	29c05b36 	bltu	r5,r7,100159ec <__udivdi3+0x2c0>
10015880:	00bfffd4 	movui	r2,65535
10015884:	11c0672e 	bgeu	r2,r7,10015a24 <__udivdi3+0x2f8>
10015888:	00804034 	movhi	r2,256
1001588c:	10bfffc4 	addi	r2,r2,-1
10015890:	11c10a36 	bltu	r2,r7,10015cbc <__udivdi3+0x590>
10015894:	00800404 	movi	r2,16
10015898:	3886d83a 	srl	r3,r7,r2
1001589c:	010400b4 	movhi	r4,4098
100158a0:	21243604 	addi	r4,r4,-28456
100158a4:	20c7883a 	add	r3,r4,r3
100158a8:	18c00003 	ldbu	r3,0(r3)
100158ac:	05c00804 	movi	r23,32
100158b0:	1885883a 	add	r2,r3,r2
100158b4:	b8afc83a 	sub	r23,r23,r2
100158b8:	b800671e 	bne	r23,zero,10015a58 <__udivdi3+0x32c>
100158bc:	3c010536 	bltu	r7,r16,10015cd4 <__udivdi3+0x5a8>
100158c0:	9985403a 	cmpgeu	r2,r19,r6
100158c4:	0007883a 	mov	r3,zero
100158c8:	00004a06 	br	100159f4 <__udivdi3+0x2c8>
100158cc:	3000041e 	bne	r6,zero,100158e0 <__udivdi3+0x1b4>
100158d0:	000b883a 	mov	r5,zero
100158d4:	01000044 	movi	r4,1
100158d8:	00096400 	call	10009640 <__udivsi3>
100158dc:	1023883a 	mov	r17,r2
100158e0:	00bfffd4 	movui	r2,65535
100158e4:	1440532e 	bgeu	r2,r17,10015a34 <__udivdi3+0x308>
100158e8:	00804034 	movhi	r2,256
100158ec:	10bfffc4 	addi	r2,r2,-1
100158f0:	1440f436 	bltu	r2,r17,10015cc4 <__udivdi3+0x598>
100158f4:	00800404 	movi	r2,16
100158f8:	8886d83a 	srl	r3,r17,r2
100158fc:	010400b4 	movhi	r4,4098
10015900:	21243604 	addi	r4,r4,-28456
10015904:	20c7883a 	add	r3,r4,r3
10015908:	18c00003 	ldbu	r3,0(r3)
1001590c:	1885883a 	add	r2,r3,r2
10015910:	00c00804 	movi	r3,32
10015914:	1887c83a 	sub	r3,r3,r2
10015918:	1800a51e 	bne	r3,zero,10015bb0 <__udivdi3+0x484>
1001591c:	882ad43a 	srli	r21,r17,16
10015920:	8461c83a 	sub	r16,r16,r17
10015924:	8d3fffcc 	andi	r20,r17,65535
10015928:	00c00044 	movi	r3,1
1001592c:	a80b883a 	mov	r5,r21
10015930:	8009883a 	mov	r4,r16
10015934:	d8c00115 	stw	r3,4(sp)
10015938:	00096a40 	call	100096a4 <__umodsi3>
1001593c:	a80b883a 	mov	r5,r21
10015940:	8009883a 	mov	r4,r16
10015944:	1027883a 	mov	r19,r2
10015948:	00096400 	call	10009640 <__udivsi3>
1001594c:	a00b883a 	mov	r5,r20
10015950:	1009883a 	mov	r4,r2
10015954:	102d883a 	mov	r22,r2
10015958:	00096fc0 	call	100096fc <__mulsi3>
1001595c:	9826943a 	slli	r19,r19,16
10015960:	900ed43a 	srli	r7,r18,16
10015964:	d8c00117 	ldw	r3,4(sp)
10015968:	3cceb03a 	or	r7,r7,r19
1001596c:	3880052e 	bgeu	r7,r2,10015984 <__udivdi3+0x258>
10015970:	3c4f883a 	add	r7,r7,r17
10015974:	b13fffc4 	addi	r4,r22,-1
10015978:	3c400136 	bltu	r7,r17,10015980 <__udivdi3+0x254>
1001597c:	3880e436 	bltu	r7,r2,10015d10 <__udivdi3+0x5e4>
10015980:	202d883a 	mov	r22,r4
10015984:	38a1c83a 	sub	r16,r7,r2
10015988:	8009883a 	mov	r4,r16
1001598c:	a80b883a 	mov	r5,r21
10015990:	d8c00115 	stw	r3,4(sp)
10015994:	00096a40 	call	100096a4 <__umodsi3>
10015998:	1027883a 	mov	r19,r2
1001599c:	8009883a 	mov	r4,r16
100159a0:	a80b883a 	mov	r5,r21
100159a4:	9826943a 	slli	r19,r19,16
100159a8:	00096400 	call	10009640 <__udivsi3>
100159ac:	a00b883a 	mov	r5,r20
100159b0:	1009883a 	mov	r4,r2
100159b4:	94bfffcc 	andi	r18,r18,65535
100159b8:	1021883a 	mov	r16,r2
100159bc:	94e4b03a 	or	r18,r18,r19
100159c0:	00096fc0 	call	100096fc <__mulsi3>
100159c4:	d8c00117 	ldw	r3,4(sp)
100159c8:	9080052e 	bgeu	r18,r2,100159e0 <__udivdi3+0x2b4>
100159cc:	8ca5883a 	add	r18,r17,r18
100159d0:	813fffc4 	addi	r4,r16,-1
100159d4:	9440ad36 	bltu	r18,r17,10015c8c <__udivdi3+0x560>
100159d8:	9080ac2e 	bgeu	r18,r2,10015c8c <__udivdi3+0x560>
100159dc:	843fff84 	addi	r16,r16,-2
100159e0:	b004943a 	slli	r2,r22,16
100159e4:	1404b03a 	or	r2,r2,r16
100159e8:	00000206 	br	100159f4 <__udivdi3+0x2c8>
100159ec:	0007883a 	mov	r3,zero
100159f0:	0005883a 	mov	r2,zero
100159f4:	dfc00b17 	ldw	ra,44(sp)
100159f8:	df000a17 	ldw	fp,40(sp)
100159fc:	ddc00917 	ldw	r23,36(sp)
10015a00:	dd800817 	ldw	r22,32(sp)
10015a04:	dd400717 	ldw	r21,28(sp)
10015a08:	dd000617 	ldw	r20,24(sp)
10015a0c:	dcc00517 	ldw	r19,20(sp)
10015a10:	dc800417 	ldw	r18,16(sp)
10015a14:	dc400317 	ldw	r17,12(sp)
10015a18:	dc000217 	ldw	r16,8(sp)
10015a1c:	dec00c04 	addi	sp,sp,48
10015a20:	f800283a 	ret
10015a24:	00803fc4 	movi	r2,255
10015a28:	11c5803a 	cmpltu	r2,r2,r7
10015a2c:	100490fa 	slli	r2,r2,3
10015a30:	003f9906 	br	10015898 <__alt_data_end+0xf8015898>
10015a34:	00803fc4 	movi	r2,255
10015a38:	1445803a 	cmpltu	r2,r2,r17
10015a3c:	100490fa 	slli	r2,r2,3
10015a40:	003fad06 	br	100158f8 <__alt_data_end+0xf80158f8>
10015a44:	00804034 	movhi	r2,256
10015a48:	10bfffc4 	addi	r2,r2,-1
10015a4c:	11809f36 	bltu	r2,r6,10015ccc <__udivdi3+0x5a0>
10015a50:	00800404 	movi	r2,16
10015a54:	003f4c06 	br	10015788 <__alt_data_end+0xf8015788>
10015a58:	3dce983a 	sll	r7,r7,r23
10015a5c:	30b8d83a 	srl	fp,r6,r2
10015a60:	80a2d83a 	srl	r17,r16,r2
10015a64:	35cc983a 	sll	r6,r6,r23
10015a68:	3f38b03a 	or	fp,r7,fp
10015a6c:	e024d43a 	srli	r18,fp,16
10015a70:	9884d83a 	srl	r2,r19,r2
10015a74:	85e0983a 	sll	r16,r16,r23
10015a78:	8809883a 	mov	r4,r17
10015a7c:	900b883a 	mov	r5,r18
10015a80:	d9800015 	stw	r6,0(sp)
10015a84:	1420b03a 	or	r16,r2,r16
10015a88:	00096a40 	call	100096a4 <__umodsi3>
10015a8c:	900b883a 	mov	r5,r18
10015a90:	8809883a 	mov	r4,r17
10015a94:	1029883a 	mov	r20,r2
10015a98:	e5bfffcc 	andi	r22,fp,65535
10015a9c:	00096400 	call	10009640 <__udivsi3>
10015aa0:	100b883a 	mov	r5,r2
10015aa4:	b009883a 	mov	r4,r22
10015aa8:	102b883a 	mov	r21,r2
10015aac:	00096fc0 	call	100096fc <__mulsi3>
10015ab0:	a028943a 	slli	r20,r20,16
10015ab4:	8006d43a 	srli	r3,r16,16
10015ab8:	1d06b03a 	or	r3,r3,r20
10015abc:	1880042e 	bgeu	r3,r2,10015ad0 <__udivdi3+0x3a4>
10015ac0:	1f07883a 	add	r3,r3,fp
10015ac4:	a93fffc4 	addi	r4,r21,-1
10015ac8:	1f00892e 	bgeu	r3,fp,10015cf0 <__udivdi3+0x5c4>
10015acc:	202b883a 	mov	r21,r4
10015ad0:	18a3c83a 	sub	r17,r3,r2
10015ad4:	8809883a 	mov	r4,r17
10015ad8:	900b883a 	mov	r5,r18
10015adc:	00096a40 	call	100096a4 <__umodsi3>
10015ae0:	1029883a 	mov	r20,r2
10015ae4:	8809883a 	mov	r4,r17
10015ae8:	900b883a 	mov	r5,r18
10015aec:	a028943a 	slli	r20,r20,16
10015af0:	00096400 	call	10009640 <__udivsi3>
10015af4:	100b883a 	mov	r5,r2
10015af8:	b009883a 	mov	r4,r22
10015afc:	843fffcc 	andi	r16,r16,65535
10015b00:	1023883a 	mov	r17,r2
10015b04:	8520b03a 	or	r16,r16,r20
10015b08:	00096fc0 	call	100096fc <__mulsi3>
10015b0c:	8080042e 	bgeu	r16,r2,10015b20 <__udivdi3+0x3f4>
10015b10:	8721883a 	add	r16,r16,fp
10015b14:	88ffffc4 	addi	r3,r17,-1
10015b18:	8700712e 	bgeu	r16,fp,10015ce0 <__udivdi3+0x5b4>
10015b1c:	1823883a 	mov	r17,r3
10015b20:	a80e943a 	slli	r7,r21,16
10015b24:	d8c00017 	ldw	r3,0(sp)
10015b28:	80a1c83a 	sub	r16,r16,r2
10015b2c:	3c64b03a 	or	r18,r7,r17
10015b30:	1d3fffcc 	andi	r20,r3,65535
10015b34:	9022d43a 	srli	r17,r18,16
10015b38:	95bfffcc 	andi	r22,r18,65535
10015b3c:	a00b883a 	mov	r5,r20
10015b40:	b009883a 	mov	r4,r22
10015b44:	182ad43a 	srli	r21,r3,16
10015b48:	00096fc0 	call	100096fc <__mulsi3>
10015b4c:	a00b883a 	mov	r5,r20
10015b50:	8809883a 	mov	r4,r17
10015b54:	1039883a 	mov	fp,r2
10015b58:	00096fc0 	call	100096fc <__mulsi3>
10015b5c:	8809883a 	mov	r4,r17
10015b60:	a80b883a 	mov	r5,r21
10015b64:	1029883a 	mov	r20,r2
10015b68:	00096fc0 	call	100096fc <__mulsi3>
10015b6c:	a80b883a 	mov	r5,r21
10015b70:	b009883a 	mov	r4,r22
10015b74:	1023883a 	mov	r17,r2
10015b78:	00096fc0 	call	100096fc <__mulsi3>
10015b7c:	e006d43a 	srli	r3,fp,16
10015b80:	1505883a 	add	r2,r2,r20
10015b84:	1887883a 	add	r3,r3,r2
10015b88:	1d00022e 	bgeu	r3,r20,10015b94 <__udivdi3+0x468>
10015b8c:	00800074 	movhi	r2,1
10015b90:	88a3883a 	add	r17,r17,r2
10015b94:	1804d43a 	srli	r2,r3,16
10015b98:	1463883a 	add	r17,r2,r17
10015b9c:	84404436 	bltu	r16,r17,10015cb0 <__udivdi3+0x584>
10015ba0:	84403e26 	beq	r16,r17,10015c9c <__udivdi3+0x570>
10015ba4:	9005883a 	mov	r2,r18
10015ba8:	0007883a 	mov	r3,zero
10015bac:	003f9106 	br	100159f4 <__alt_data_end+0xf80159f4>
10015bb0:	88e2983a 	sll	r17,r17,r3
10015bb4:	80aed83a 	srl	r23,r16,r2
10015bb8:	80e0983a 	sll	r16,r16,r3
10015bbc:	882ad43a 	srli	r21,r17,16
10015bc0:	9884d83a 	srl	r2,r19,r2
10015bc4:	b809883a 	mov	r4,r23
10015bc8:	a80b883a 	mov	r5,r21
10015bcc:	98e4983a 	sll	r18,r19,r3
10015bd0:	142cb03a 	or	r22,r2,r16
10015bd4:	00096a40 	call	100096a4 <__umodsi3>
10015bd8:	b809883a 	mov	r4,r23
10015bdc:	a80b883a 	mov	r5,r21
10015be0:	1027883a 	mov	r19,r2
10015be4:	8d3fffcc 	andi	r20,r17,65535
10015be8:	00096400 	call	10009640 <__udivsi3>
10015bec:	a009883a 	mov	r4,r20
10015bf0:	100b883a 	mov	r5,r2
10015bf4:	102f883a 	mov	r23,r2
10015bf8:	00096fc0 	call	100096fc <__mulsi3>
10015bfc:	9826943a 	slli	r19,r19,16
10015c00:	b008d43a 	srli	r4,r22,16
10015c04:	24c8b03a 	or	r4,r4,r19
10015c08:	2080062e 	bgeu	r4,r2,10015c24 <__udivdi3+0x4f8>
10015c0c:	2449883a 	add	r4,r4,r17
10015c10:	b8ffffc4 	addi	r3,r23,-1
10015c14:	24403c36 	bltu	r4,r17,10015d08 <__udivdi3+0x5dc>
10015c18:	20803b2e 	bgeu	r4,r2,10015d08 <__udivdi3+0x5dc>
10015c1c:	bdffff84 	addi	r23,r23,-2
10015c20:	2449883a 	add	r4,r4,r17
10015c24:	20a1c83a 	sub	r16,r4,r2
10015c28:	a80b883a 	mov	r5,r21
10015c2c:	8009883a 	mov	r4,r16
10015c30:	00096a40 	call	100096a4 <__umodsi3>
10015c34:	a80b883a 	mov	r5,r21
10015c38:	8009883a 	mov	r4,r16
10015c3c:	1027883a 	mov	r19,r2
10015c40:	00096400 	call	10009640 <__udivsi3>
10015c44:	a009883a 	mov	r4,r20
10015c48:	100b883a 	mov	r5,r2
10015c4c:	9826943a 	slli	r19,r19,16
10015c50:	1039883a 	mov	fp,r2
10015c54:	00096fc0 	call	100096fc <__mulsi3>
10015c58:	b13fffcc 	andi	r4,r22,65535
10015c5c:	24c8b03a 	or	r4,r4,r19
10015c60:	2080062e 	bgeu	r4,r2,10015c7c <__udivdi3+0x550>
10015c64:	2449883a 	add	r4,r4,r17
10015c68:	e0ffffc4 	addi	r3,fp,-1
10015c6c:	24402436 	bltu	r4,r17,10015d00 <__udivdi3+0x5d4>
10015c70:	2080232e 	bgeu	r4,r2,10015d00 <__udivdi3+0x5d4>
10015c74:	e73fff84 	addi	fp,fp,-2
10015c78:	2449883a 	add	r4,r4,r17
10015c7c:	b82e943a 	slli	r23,r23,16
10015c80:	20a1c83a 	sub	r16,r4,r2
10015c84:	bf06b03a 	or	r3,r23,fp
10015c88:	003f2806 	br	1001592c <__alt_data_end+0xf801592c>
10015c8c:	2021883a 	mov	r16,r4
10015c90:	003f5306 	br	100159e0 <__alt_data_end+0xf80159e0>
10015c94:	1821883a 	mov	r16,r3
10015c98:	003ef406 	br	1001586c <__alt_data_end+0xf801586c>
10015c9c:	1806943a 	slli	r3,r3,16
10015ca0:	9de6983a 	sll	r19,r19,r23
10015ca4:	e73fffcc 	andi	fp,fp,65535
10015ca8:	1f07883a 	add	r3,r3,fp
10015cac:	98ffbd2e 	bgeu	r19,r3,10015ba4 <__alt_data_end+0xf8015ba4>
10015cb0:	90bfffc4 	addi	r2,r18,-1
10015cb4:	0007883a 	mov	r3,zero
10015cb8:	003f4e06 	br	100159f4 <__alt_data_end+0xf80159f4>
10015cbc:	00800604 	movi	r2,24
10015cc0:	003ef506 	br	10015898 <__alt_data_end+0xf8015898>
10015cc4:	00800604 	movi	r2,24
10015cc8:	003f0b06 	br	100158f8 <__alt_data_end+0xf80158f8>
10015ccc:	00800604 	movi	r2,24
10015cd0:	003ead06 	br	10015788 <__alt_data_end+0xf8015788>
10015cd4:	0007883a 	mov	r3,zero
10015cd8:	00800044 	movi	r2,1
10015cdc:	003f4506 	br	100159f4 <__alt_data_end+0xf80159f4>
10015ce0:	80bf8e2e 	bgeu	r16,r2,10015b1c <__alt_data_end+0xf8015b1c>
10015ce4:	8c7fff84 	addi	r17,r17,-2
10015ce8:	8721883a 	add	r16,r16,fp
10015cec:	003f8c06 	br	10015b20 <__alt_data_end+0xf8015b20>
10015cf0:	18bf762e 	bgeu	r3,r2,10015acc <__alt_data_end+0xf8015acc>
10015cf4:	ad7fff84 	addi	r21,r21,-2
10015cf8:	1f07883a 	add	r3,r3,fp
10015cfc:	003f7406 	br	10015ad0 <__alt_data_end+0xf8015ad0>
10015d00:	1839883a 	mov	fp,r3
10015d04:	003fdd06 	br	10015c7c <__alt_data_end+0xf8015c7c>
10015d08:	182f883a 	mov	r23,r3
10015d0c:	003fc506 	br	10015c24 <__alt_data_end+0xf8015c24>
10015d10:	b5bfff84 	addi	r22,r22,-2
10015d14:	3c4f883a 	add	r7,r7,r17
10015d18:	003f1a06 	br	10015984 <__alt_data_end+0xf8015984>
10015d1c:	b5bfff84 	addi	r22,r22,-2
10015d20:	1c47883a 	add	r3,r3,r17
10015d24:	003ebc06 	br	10015818 <__alt_data_end+0xf8015818>

10015d28 <__umoddi3>:
10015d28:	defff304 	addi	sp,sp,-52
10015d2c:	df000b15 	stw	fp,44(sp)
10015d30:	dc400415 	stw	r17,16(sp)
10015d34:	dc000315 	stw	r16,12(sp)
10015d38:	dfc00c15 	stw	ra,48(sp)
10015d3c:	ddc00a15 	stw	r23,40(sp)
10015d40:	dd800915 	stw	r22,36(sp)
10015d44:	dd400815 	stw	r21,32(sp)
10015d48:	dd000715 	stw	r20,28(sp)
10015d4c:	dcc00615 	stw	r19,24(sp)
10015d50:	dc800515 	stw	r18,20(sp)
10015d54:	2021883a 	mov	r16,r4
10015d58:	2823883a 	mov	r17,r5
10015d5c:	2839883a 	mov	fp,r5
10015d60:	3800401e 	bne	r7,zero,10015e64 <__umoddi3+0x13c>
10015d64:	3027883a 	mov	r19,r6
10015d68:	2029883a 	mov	r20,r4
10015d6c:	2980552e 	bgeu	r5,r6,10015ec4 <__umoddi3+0x19c>
10015d70:	00bfffd4 	movui	r2,65535
10015d74:	1180a236 	bltu	r2,r6,10016000 <__umoddi3+0x2d8>
10015d78:	01003fc4 	movi	r4,255
10015d7c:	2189803a 	cmpltu	r4,r4,r6
10015d80:	200890fa 	slli	r4,r4,3
10015d84:	3104d83a 	srl	r2,r6,r4
10015d88:	00c400b4 	movhi	r3,4098
10015d8c:	18e43604 	addi	r3,r3,-28456
10015d90:	1885883a 	add	r2,r3,r2
10015d94:	10c00003 	ldbu	r3,0(r2)
10015d98:	00800804 	movi	r2,32
10015d9c:	1909883a 	add	r4,r3,r4
10015da0:	1125c83a 	sub	r18,r2,r4
10015da4:	90000526 	beq	r18,zero,10015dbc <__umoddi3+0x94>
10015da8:	8ca2983a 	sll	r17,r17,r18
10015dac:	8108d83a 	srl	r4,r16,r4
10015db0:	34a6983a 	sll	r19,r6,r18
10015db4:	84a8983a 	sll	r20,r16,r18
10015db8:	2478b03a 	or	fp,r4,r17
10015dbc:	982cd43a 	srli	r22,r19,16
10015dc0:	e009883a 	mov	r4,fp
10015dc4:	9dffffcc 	andi	r23,r19,65535
10015dc8:	b00b883a 	mov	r5,r22
10015dcc:	00096a40 	call	100096a4 <__umodsi3>
10015dd0:	b00b883a 	mov	r5,r22
10015dd4:	e009883a 	mov	r4,fp
10015dd8:	102b883a 	mov	r21,r2
10015ddc:	00096400 	call	10009640 <__udivsi3>
10015de0:	100b883a 	mov	r5,r2
10015de4:	b809883a 	mov	r4,r23
10015de8:	00096fc0 	call	100096fc <__mulsi3>
10015dec:	a82a943a 	slli	r21,r21,16
10015df0:	a006d43a 	srli	r3,r20,16
10015df4:	1d46b03a 	or	r3,r3,r21
10015df8:	1880032e 	bgeu	r3,r2,10015e08 <__umoddi3+0xe0>
10015dfc:	1cc7883a 	add	r3,r3,r19
10015e00:	1cc00136 	bltu	r3,r19,10015e08 <__umoddi3+0xe0>
10015e04:	18813136 	bltu	r3,r2,100162cc <__umoddi3+0x5a4>
10015e08:	18a1c83a 	sub	r16,r3,r2
10015e0c:	b00b883a 	mov	r5,r22
10015e10:	8009883a 	mov	r4,r16
10015e14:	00096a40 	call	100096a4 <__umodsi3>
10015e18:	b00b883a 	mov	r5,r22
10015e1c:	8009883a 	mov	r4,r16
10015e20:	1023883a 	mov	r17,r2
10015e24:	00096400 	call	10009640 <__udivsi3>
10015e28:	100b883a 	mov	r5,r2
10015e2c:	b809883a 	mov	r4,r23
10015e30:	8822943a 	slli	r17,r17,16
10015e34:	00096fc0 	call	100096fc <__mulsi3>
10015e38:	a0ffffcc 	andi	r3,r20,65535
10015e3c:	1c46b03a 	or	r3,r3,r17
10015e40:	1880042e 	bgeu	r3,r2,10015e54 <__umoddi3+0x12c>
10015e44:	1cc7883a 	add	r3,r3,r19
10015e48:	1cc00236 	bltu	r3,r19,10015e54 <__umoddi3+0x12c>
10015e4c:	1880012e 	bgeu	r3,r2,10015e54 <__umoddi3+0x12c>
10015e50:	1cc7883a 	add	r3,r3,r19
10015e54:	1885c83a 	sub	r2,r3,r2
10015e58:	1484d83a 	srl	r2,r2,r18
10015e5c:	0007883a 	mov	r3,zero
10015e60:	00005306 	br	10015fb0 <__umoddi3+0x288>
10015e64:	29c05036 	bltu	r5,r7,10015fa8 <__umoddi3+0x280>
10015e68:	00bfffd4 	movui	r2,65535
10015e6c:	11c05c2e 	bgeu	r2,r7,10015fe0 <__umoddi3+0x2b8>
10015e70:	00804034 	movhi	r2,256
10015e74:	10bfffc4 	addi	r2,r2,-1
10015e78:	11c10636 	bltu	r2,r7,10016294 <__umoddi3+0x56c>
10015e7c:	01000404 	movi	r4,16
10015e80:	3904d83a 	srl	r2,r7,r4
10015e84:	00c400b4 	movhi	r3,4098
10015e88:	18e43604 	addi	r3,r3,-28456
10015e8c:	1885883a 	add	r2,r3,r2
10015e90:	14c00003 	ldbu	r19,0(r2)
10015e94:	00c00804 	movi	r3,32
10015e98:	9927883a 	add	r19,r19,r4
10015e9c:	1ce9c83a 	sub	r20,r3,r19
10015ea0:	a0005c1e 	bne	r20,zero,10016014 <__umoddi3+0x2ec>
10015ea4:	3c400136 	bltu	r7,r17,10015eac <__umoddi3+0x184>
10015ea8:	81810a36 	bltu	r16,r6,100162d4 <__umoddi3+0x5ac>
10015eac:	8185c83a 	sub	r2,r16,r6
10015eb0:	89e3c83a 	sub	r17,r17,r7
10015eb4:	8089803a 	cmpltu	r4,r16,r2
10015eb8:	8939c83a 	sub	fp,r17,r4
10015ebc:	e007883a 	mov	r3,fp
10015ec0:	00003b06 	br	10015fb0 <__umoddi3+0x288>
10015ec4:	3000041e 	bne	r6,zero,10015ed8 <__umoddi3+0x1b0>
10015ec8:	000b883a 	mov	r5,zero
10015ecc:	01000044 	movi	r4,1
10015ed0:	00096400 	call	10009640 <__udivsi3>
10015ed4:	1027883a 	mov	r19,r2
10015ed8:	00bfffd4 	movui	r2,65535
10015edc:	14c0442e 	bgeu	r2,r19,10015ff0 <__umoddi3+0x2c8>
10015ee0:	00804034 	movhi	r2,256
10015ee4:	10bfffc4 	addi	r2,r2,-1
10015ee8:	14c0ec36 	bltu	r2,r19,1001629c <__umoddi3+0x574>
10015eec:	00800404 	movi	r2,16
10015ef0:	9886d83a 	srl	r3,r19,r2
10015ef4:	010400b4 	movhi	r4,4098
10015ef8:	21243604 	addi	r4,r4,-28456
10015efc:	20c7883a 	add	r3,r4,r3
10015f00:	18c00003 	ldbu	r3,0(r3)
10015f04:	1887883a 	add	r3,r3,r2
10015f08:	00800804 	movi	r2,32
10015f0c:	10e5c83a 	sub	r18,r2,r3
10015f10:	9000ab1e 	bne	r18,zero,100161c0 <__umoddi3+0x498>
10015f14:	982cd43a 	srli	r22,r19,16
10015f18:	8ce3c83a 	sub	r17,r17,r19
10015f1c:	9dffffcc 	andi	r23,r19,65535
10015f20:	b00b883a 	mov	r5,r22
10015f24:	8809883a 	mov	r4,r17
10015f28:	00096a40 	call	100096a4 <__umodsi3>
10015f2c:	b00b883a 	mov	r5,r22
10015f30:	8809883a 	mov	r4,r17
10015f34:	102b883a 	mov	r21,r2
10015f38:	00096400 	call	10009640 <__udivsi3>
10015f3c:	b80b883a 	mov	r5,r23
10015f40:	1009883a 	mov	r4,r2
10015f44:	00096fc0 	call	100096fc <__mulsi3>
10015f48:	a82a943a 	slli	r21,r21,16
10015f4c:	a006d43a 	srli	r3,r20,16
10015f50:	1d46b03a 	or	r3,r3,r21
10015f54:	1880042e 	bgeu	r3,r2,10015f68 <__umoddi3+0x240>
10015f58:	1cc7883a 	add	r3,r3,r19
10015f5c:	1cc00236 	bltu	r3,r19,10015f68 <__umoddi3+0x240>
10015f60:	1880012e 	bgeu	r3,r2,10015f68 <__umoddi3+0x240>
10015f64:	1cc7883a 	add	r3,r3,r19
10015f68:	18a1c83a 	sub	r16,r3,r2
10015f6c:	b00b883a 	mov	r5,r22
10015f70:	8009883a 	mov	r4,r16
10015f74:	00096a40 	call	100096a4 <__umodsi3>
10015f78:	1023883a 	mov	r17,r2
10015f7c:	b00b883a 	mov	r5,r22
10015f80:	8009883a 	mov	r4,r16
10015f84:	00096400 	call	10009640 <__udivsi3>
10015f88:	8822943a 	slli	r17,r17,16
10015f8c:	b80b883a 	mov	r5,r23
10015f90:	1009883a 	mov	r4,r2
10015f94:	00096fc0 	call	100096fc <__mulsi3>
10015f98:	a53fffcc 	andi	r20,r20,65535
10015f9c:	a446b03a 	or	r3,r20,r17
10015fa0:	18bfac2e 	bgeu	r3,r2,10015e54 <__alt_data_end+0xf8015e54>
10015fa4:	003fa706 	br	10015e44 <__alt_data_end+0xf8015e44>
10015fa8:	2005883a 	mov	r2,r4
10015fac:	2807883a 	mov	r3,r5
10015fb0:	dfc00c17 	ldw	ra,48(sp)
10015fb4:	df000b17 	ldw	fp,44(sp)
10015fb8:	ddc00a17 	ldw	r23,40(sp)
10015fbc:	dd800917 	ldw	r22,36(sp)
10015fc0:	dd400817 	ldw	r21,32(sp)
10015fc4:	dd000717 	ldw	r20,28(sp)
10015fc8:	dcc00617 	ldw	r19,24(sp)
10015fcc:	dc800517 	ldw	r18,20(sp)
10015fd0:	dc400417 	ldw	r17,16(sp)
10015fd4:	dc000317 	ldw	r16,12(sp)
10015fd8:	dec00d04 	addi	sp,sp,52
10015fdc:	f800283a 	ret
10015fe0:	04c03fc4 	movi	r19,255
10015fe4:	99c9803a 	cmpltu	r4,r19,r7
10015fe8:	200890fa 	slli	r4,r4,3
10015fec:	003fa406 	br	10015e80 <__alt_data_end+0xf8015e80>
10015ff0:	00803fc4 	movi	r2,255
10015ff4:	14c5803a 	cmpltu	r2,r2,r19
10015ff8:	100490fa 	slli	r2,r2,3
10015ffc:	003fbc06 	br	10015ef0 <__alt_data_end+0xf8015ef0>
10016000:	00804034 	movhi	r2,256
10016004:	10bfffc4 	addi	r2,r2,-1
10016008:	1180a636 	bltu	r2,r6,100162a4 <__umoddi3+0x57c>
1001600c:	01000404 	movi	r4,16
10016010:	003f5c06 	br	10015d84 <__alt_data_end+0xf8015d84>
10016014:	3d0e983a 	sll	r7,r7,r20
10016018:	34ead83a 	srl	r21,r6,r19
1001601c:	8cc6d83a 	srl	r3,r17,r19
10016020:	8d10983a 	sll	r8,r17,r20
10016024:	3d6ab03a 	or	r21,r7,r21
10016028:	a82cd43a 	srli	r22,r21,16
1001602c:	84e2d83a 	srl	r17,r16,r19
10016030:	1809883a 	mov	r4,r3
10016034:	b00b883a 	mov	r5,r22
10016038:	8a22b03a 	or	r17,r17,r8
1001603c:	3524983a 	sll	r18,r6,r20
10016040:	dc400015 	stw	r17,0(sp)
10016044:	d8c00115 	stw	r3,4(sp)
10016048:	00096a40 	call	100096a4 <__umodsi3>
1001604c:	d8c00117 	ldw	r3,4(sp)
10016050:	b00b883a 	mov	r5,r22
10016054:	1039883a 	mov	fp,r2
10016058:	1809883a 	mov	r4,r3
1001605c:	00096400 	call	10009640 <__udivsi3>
10016060:	adffffcc 	andi	r23,r21,65535
10016064:	100b883a 	mov	r5,r2
10016068:	b809883a 	mov	r4,r23
1001606c:	1023883a 	mov	r17,r2
10016070:	00096fc0 	call	100096fc <__mulsi3>
10016074:	d9400017 	ldw	r5,0(sp)
10016078:	e008943a 	slli	r4,fp,16
1001607c:	8520983a 	sll	r16,r16,r20
10016080:	2806d43a 	srli	r3,r5,16
10016084:	1906b03a 	or	r3,r3,r4
10016088:	1880042e 	bgeu	r3,r2,1001609c <__umoddi3+0x374>
1001608c:	1d47883a 	add	r3,r3,r21
10016090:	893fffc4 	addi	r4,r17,-1
10016094:	1d40892e 	bgeu	r3,r21,100162bc <__umoddi3+0x594>
10016098:	2023883a 	mov	r17,r4
1001609c:	18b9c83a 	sub	fp,r3,r2
100160a0:	b00b883a 	mov	r5,r22
100160a4:	e009883a 	mov	r4,fp
100160a8:	00096a40 	call	100096a4 <__umodsi3>
100160ac:	b00b883a 	mov	r5,r22
100160b0:	e009883a 	mov	r4,fp
100160b4:	d8800215 	stw	r2,8(sp)
100160b8:	00096400 	call	10009640 <__udivsi3>
100160bc:	100b883a 	mov	r5,r2
100160c0:	b809883a 	mov	r4,r23
100160c4:	102d883a 	mov	r22,r2
100160c8:	00096fc0 	call	100096fc <__mulsi3>
100160cc:	d9800217 	ldw	r6,8(sp)
100160d0:	d8c00017 	ldw	r3,0(sp)
100160d4:	300c943a 	slli	r6,r6,16
100160d8:	1a3fffcc 	andi	r8,r3,65535
100160dc:	4190b03a 	or	r8,r8,r6
100160e0:	4080042e 	bgeu	r8,r2,100160f4 <__umoddi3+0x3cc>
100160e4:	4551883a 	add	r8,r8,r21
100160e8:	b0ffffc4 	addi	r3,r22,-1
100160ec:	45406f2e 	bgeu	r8,r21,100162ac <__umoddi3+0x584>
100160f0:	182d883a 	mov	r22,r3
100160f4:	880e943a 	slli	r7,r17,16
100160f8:	9006d43a 	srli	r3,r18,16
100160fc:	91bfffcc 	andi	r6,r18,65535
10016100:	3dacb03a 	or	r22,r7,r22
10016104:	b02ed43a 	srli	r23,r22,16
10016108:	b5bfffcc 	andi	r22,r22,65535
1001610c:	300b883a 	mov	r5,r6
10016110:	b009883a 	mov	r4,r22
10016114:	40a3c83a 	sub	r17,r8,r2
10016118:	d8c00115 	stw	r3,4(sp)
1001611c:	d9800215 	stw	r6,8(sp)
10016120:	00096fc0 	call	100096fc <__mulsi3>
10016124:	d9800217 	ldw	r6,8(sp)
10016128:	b809883a 	mov	r4,r23
1001612c:	1039883a 	mov	fp,r2
10016130:	300b883a 	mov	r5,r6
10016134:	00096fc0 	call	100096fc <__mulsi3>
10016138:	d8c00117 	ldw	r3,4(sp)
1001613c:	b809883a 	mov	r4,r23
10016140:	d8800215 	stw	r2,8(sp)
10016144:	180b883a 	mov	r5,r3
10016148:	00096fc0 	call	100096fc <__mulsi3>
1001614c:	d8c00117 	ldw	r3,4(sp)
10016150:	b009883a 	mov	r4,r22
10016154:	102f883a 	mov	r23,r2
10016158:	180b883a 	mov	r5,r3
1001615c:	00096fc0 	call	100096fc <__mulsi3>
10016160:	d9800217 	ldw	r6,8(sp)
10016164:	e006d43a 	srli	r3,fp,16
10016168:	1185883a 	add	r2,r2,r6
1001616c:	1885883a 	add	r2,r3,r2
10016170:	1180022e 	bgeu	r2,r6,1001617c <__umoddi3+0x454>
10016174:	00c00074 	movhi	r3,1
10016178:	b8ef883a 	add	r23,r23,r3
1001617c:	1006d43a 	srli	r3,r2,16
10016180:	1004943a 	slli	r2,r2,16
10016184:	e73fffcc 	andi	fp,fp,65535
10016188:	1dc7883a 	add	r3,r3,r23
1001618c:	1739883a 	add	fp,r2,fp
10016190:	88c03a36 	bltu	r17,r3,1001627c <__umoddi3+0x554>
10016194:	88c05126 	beq	r17,r3,100162dc <__umoddi3+0x5b4>
10016198:	88c9c83a 	sub	r4,r17,r3
1001619c:	e00f883a 	mov	r7,fp
100161a0:	81cfc83a 	sub	r7,r16,r7
100161a4:	81c7803a 	cmpltu	r3,r16,r7
100161a8:	20c7c83a 	sub	r3,r4,r3
100161ac:	1cc4983a 	sll	r2,r3,r19
100161b0:	3d0ed83a 	srl	r7,r7,r20
100161b4:	1d06d83a 	srl	r3,r3,r20
100161b8:	11c4b03a 	or	r2,r2,r7
100161bc:	003f7c06 	br	10015fb0 <__alt_data_end+0xf8015fb0>
100161c0:	9ca6983a 	sll	r19,r19,r18
100161c4:	88f8d83a 	srl	fp,r17,r3
100161c8:	80c4d83a 	srl	r2,r16,r3
100161cc:	982cd43a 	srli	r22,r19,16
100161d0:	8ca2983a 	sll	r17,r17,r18
100161d4:	e009883a 	mov	r4,fp
100161d8:	b00b883a 	mov	r5,r22
100161dc:	146ab03a 	or	r21,r2,r17
100161e0:	00096a40 	call	100096a4 <__umodsi3>
100161e4:	b00b883a 	mov	r5,r22
100161e8:	e009883a 	mov	r4,fp
100161ec:	1029883a 	mov	r20,r2
100161f0:	9dffffcc 	andi	r23,r19,65535
100161f4:	00096400 	call	10009640 <__udivsi3>
100161f8:	b809883a 	mov	r4,r23
100161fc:	100b883a 	mov	r5,r2
10016200:	00096fc0 	call	100096fc <__mulsi3>
10016204:	a008943a 	slli	r4,r20,16
10016208:	a806d43a 	srli	r3,r21,16
1001620c:	84a8983a 	sll	r20,r16,r18
10016210:	1906b03a 	or	r3,r3,r4
10016214:	1880042e 	bgeu	r3,r2,10016228 <__umoddi3+0x500>
10016218:	1cc7883a 	add	r3,r3,r19
1001621c:	1cc00236 	bltu	r3,r19,10016228 <__umoddi3+0x500>
10016220:	1880012e 	bgeu	r3,r2,10016228 <__umoddi3+0x500>
10016224:	1cc7883a 	add	r3,r3,r19
10016228:	18a3c83a 	sub	r17,r3,r2
1001622c:	b00b883a 	mov	r5,r22
10016230:	8809883a 	mov	r4,r17
10016234:	00096a40 	call	100096a4 <__umodsi3>
10016238:	b00b883a 	mov	r5,r22
1001623c:	8809883a 	mov	r4,r17
10016240:	1021883a 	mov	r16,r2
10016244:	00096400 	call	10009640 <__udivsi3>
10016248:	100b883a 	mov	r5,r2
1001624c:	b809883a 	mov	r4,r23
10016250:	8020943a 	slli	r16,r16,16
10016254:	00096fc0 	call	100096fc <__mulsi3>
10016258:	a8ffffcc 	andi	r3,r21,65535
1001625c:	1c06b03a 	or	r3,r3,r16
10016260:	1880042e 	bgeu	r3,r2,10016274 <__umoddi3+0x54c>
10016264:	1cc7883a 	add	r3,r3,r19
10016268:	1cc00236 	bltu	r3,r19,10016274 <__umoddi3+0x54c>
1001626c:	1880012e 	bgeu	r3,r2,10016274 <__umoddi3+0x54c>
10016270:	1cc7883a 	add	r3,r3,r19
10016274:	18a3c83a 	sub	r17,r3,r2
10016278:	003f2906 	br	10015f20 <__alt_data_end+0xf8015f20>
1001627c:	e48fc83a 	sub	r7,fp,r18
10016280:	1d49c83a 	sub	r4,r3,r21
10016284:	e1f9803a 	cmpltu	fp,fp,r7
10016288:	2739c83a 	sub	fp,r4,fp
1001628c:	8f09c83a 	sub	r4,r17,fp
10016290:	003fc306 	br	100161a0 <__alt_data_end+0xf80161a0>
10016294:	01000604 	movi	r4,24
10016298:	003ef906 	br	10015e80 <__alt_data_end+0xf8015e80>
1001629c:	00800604 	movi	r2,24
100162a0:	003f1306 	br	10015ef0 <__alt_data_end+0xf8015ef0>
100162a4:	01000604 	movi	r4,24
100162a8:	003eb606 	br	10015d84 <__alt_data_end+0xf8015d84>
100162ac:	40bf902e 	bgeu	r8,r2,100160f0 <__alt_data_end+0xf80160f0>
100162b0:	b5bfff84 	addi	r22,r22,-2
100162b4:	4551883a 	add	r8,r8,r21
100162b8:	003f8e06 	br	100160f4 <__alt_data_end+0xf80160f4>
100162bc:	18bf762e 	bgeu	r3,r2,10016098 <__alt_data_end+0xf8016098>
100162c0:	8c7fff84 	addi	r17,r17,-2
100162c4:	1d47883a 	add	r3,r3,r21
100162c8:	003f7406 	br	1001609c <__alt_data_end+0xf801609c>
100162cc:	1cc7883a 	add	r3,r3,r19
100162d0:	003ecd06 	br	10015e08 <__alt_data_end+0xf8015e08>
100162d4:	8005883a 	mov	r2,r16
100162d8:	003ef806 	br	10015ebc <__alt_data_end+0xf8015ebc>
100162dc:	873fe736 	bltu	r16,fp,1001627c <__alt_data_end+0xf801627c>
100162e0:	e00f883a 	mov	r7,fp
100162e4:	0009883a 	mov	r4,zero
100162e8:	003fad06 	br	100161a0 <__alt_data_end+0xf80161a0>

100162ec <__ledf2>:
100162ec:	2804d53a 	srli	r2,r5,20
100162f0:	3810d53a 	srli	r8,r7,20
100162f4:	00c00434 	movhi	r3,16
100162f8:	18ffffc4 	addi	r3,r3,-1
100162fc:	1081ffcc 	andi	r2,r2,2047
10016300:	0241ffc4 	movi	r9,2047
10016304:	28d4703a 	and	r10,r5,r3
10016308:	4201ffcc 	andi	r8,r8,2047
1001630c:	38c6703a 	and	r3,r7,r3
10016310:	280ad7fa 	srli	r5,r5,31
10016314:	380ed7fa 	srli	r7,r7,31
10016318:	12401f26 	beq	r2,r9,10016398 <__ledf2+0xac>
1001631c:	0241ffc4 	movi	r9,2047
10016320:	42401426 	beq	r8,r9,10016374 <__ledf2+0x88>
10016324:	1000091e 	bne	r2,zero,1001634c <__ledf2+0x60>
10016328:	2296b03a 	or	r11,r4,r10
1001632c:	5813003a 	cmpeq	r9,r11,zero
10016330:	29403fcc 	andi	r5,r5,255
10016334:	40000a1e 	bne	r8,zero,10016360 <__ledf2+0x74>
10016338:	30d8b03a 	or	r12,r6,r3
1001633c:	6000081e 	bne	r12,zero,10016360 <__ledf2+0x74>
10016340:	0005883a 	mov	r2,zero
10016344:	5800111e 	bne	r11,zero,1001638c <__ledf2+0xa0>
10016348:	f800283a 	ret
1001634c:	29403fcc 	andi	r5,r5,255
10016350:	40000c1e 	bne	r8,zero,10016384 <__ledf2+0x98>
10016354:	30d2b03a 	or	r9,r6,r3
10016358:	48000c26 	beq	r9,zero,1001638c <__ledf2+0xa0>
1001635c:	0013883a 	mov	r9,zero
10016360:	39c03fcc 	andi	r7,r7,255
10016364:	48000826 	beq	r9,zero,10016388 <__ledf2+0x9c>
10016368:	38001126 	beq	r7,zero,100163b0 <__ledf2+0xc4>
1001636c:	00800044 	movi	r2,1
10016370:	f800283a 	ret
10016374:	30d2b03a 	or	r9,r6,r3
10016378:	483fea26 	beq	r9,zero,10016324 <__alt_data_end+0xf8016324>
1001637c:	00800084 	movi	r2,2
10016380:	f800283a 	ret
10016384:	39c03fcc 	andi	r7,r7,255
10016388:	39400726 	beq	r7,r5,100163a8 <__ledf2+0xbc>
1001638c:	2800081e 	bne	r5,zero,100163b0 <__ledf2+0xc4>
10016390:	00800044 	movi	r2,1
10016394:	f800283a 	ret
10016398:	2292b03a 	or	r9,r4,r10
1001639c:	483fdf26 	beq	r9,zero,1001631c <__alt_data_end+0xf801631c>
100163a0:	00800084 	movi	r2,2
100163a4:	f800283a 	ret
100163a8:	4080030e 	bge	r8,r2,100163b8 <__ledf2+0xcc>
100163ac:	383fef26 	beq	r7,zero,1001636c <__alt_data_end+0xf801636c>
100163b0:	00bfffc4 	movi	r2,-1
100163b4:	f800283a 	ret
100163b8:	123feb16 	blt	r2,r8,10016368 <__alt_data_end+0xf8016368>
100163bc:	1abff336 	bltu	r3,r10,1001638c <__alt_data_end+0xf801638c>
100163c0:	50c00326 	beq	r10,r3,100163d0 <__ledf2+0xe4>
100163c4:	50c0042e 	bgeu	r10,r3,100163d8 <__ledf2+0xec>
100163c8:	283fe81e 	bne	r5,zero,1001636c <__alt_data_end+0xf801636c>
100163cc:	003ff806 	br	100163b0 <__alt_data_end+0xf80163b0>
100163d0:	313fee36 	bltu	r6,r4,1001638c <__alt_data_end+0xf801638c>
100163d4:	21bffc36 	bltu	r4,r6,100163c8 <__alt_data_end+0xf80163c8>
100163d8:	0005883a 	mov	r2,zero
100163dc:	f800283a 	ret

100163e0 <__floatunsidf>:
100163e0:	defffe04 	addi	sp,sp,-8
100163e4:	dc000015 	stw	r16,0(sp)
100163e8:	dfc00115 	stw	ra,4(sp)
100163ec:	2021883a 	mov	r16,r4
100163f0:	20002226 	beq	r4,zero,1001647c <__floatunsidf+0x9c>
100163f4:	000bdc80 	call	1000bdc8 <__clzsi2>
100163f8:	01010784 	movi	r4,1054
100163fc:	2089c83a 	sub	r4,r4,r2
10016400:	01810cc4 	movi	r6,1075
10016404:	310dc83a 	sub	r6,r6,r4
10016408:	00c007c4 	movi	r3,31
1001640c:	1980120e 	bge	r3,r6,10016458 <__floatunsidf+0x78>
10016410:	00c104c4 	movi	r3,1043
10016414:	1907c83a 	sub	r3,r3,r4
10016418:	80ca983a 	sll	r5,r16,r3
1001641c:	00800434 	movhi	r2,16
10016420:	10bfffc4 	addi	r2,r2,-1
10016424:	2101ffcc 	andi	r4,r4,2047
10016428:	0021883a 	mov	r16,zero
1001642c:	288a703a 	and	r5,r5,r2
10016430:	2008953a 	slli	r4,r4,20
10016434:	00c00434 	movhi	r3,16
10016438:	18ffffc4 	addi	r3,r3,-1
1001643c:	28c6703a 	and	r3,r5,r3
10016440:	8005883a 	mov	r2,r16
10016444:	1906b03a 	or	r3,r3,r4
10016448:	dfc00117 	ldw	ra,4(sp)
1001644c:	dc000017 	ldw	r16,0(sp)
10016450:	dec00204 	addi	sp,sp,8
10016454:	f800283a 	ret
10016458:	00c002c4 	movi	r3,11
1001645c:	188bc83a 	sub	r5,r3,r2
10016460:	814ad83a 	srl	r5,r16,r5
10016464:	00c00434 	movhi	r3,16
10016468:	18ffffc4 	addi	r3,r3,-1
1001646c:	81a0983a 	sll	r16,r16,r6
10016470:	2101ffcc 	andi	r4,r4,2047
10016474:	28ca703a 	and	r5,r5,r3
10016478:	003fed06 	br	10016430 <__alt_data_end+0xf8016430>
1001647c:	0009883a 	mov	r4,zero
10016480:	000b883a 	mov	r5,zero
10016484:	003fea06 	br	10016430 <__alt_data_end+0xf8016430>

10016488 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10016488:	defffe04 	addi	sp,sp,-8
1001648c:	dfc00115 	stw	ra,4(sp)
10016490:	df000015 	stw	fp,0(sp)
10016494:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10016498:	d0a01217 	ldw	r2,-32696(gp)
1001649c:	10000326 	beq	r2,zero,100164ac <alt_get_errno+0x24>
100164a0:	d0a01217 	ldw	r2,-32696(gp)
100164a4:	103ee83a 	callr	r2
100164a8:	00000106 	br	100164b0 <alt_get_errno+0x28>
100164ac:	d0a7fd04 	addi	r2,gp,-24588
}
100164b0:	e037883a 	mov	sp,fp
100164b4:	dfc00117 	ldw	ra,4(sp)
100164b8:	df000017 	ldw	fp,0(sp)
100164bc:	dec00204 	addi	sp,sp,8
100164c0:	f800283a 	ret

100164c4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100164c4:	defffb04 	addi	sp,sp,-20
100164c8:	dfc00415 	stw	ra,16(sp)
100164cc:	df000315 	stw	fp,12(sp)
100164d0:	df000304 	addi	fp,sp,12
100164d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100164d8:	e0bfff17 	ldw	r2,-4(fp)
100164dc:	10000816 	blt	r2,zero,10016500 <close+0x3c>
100164e0:	01400304 	movi	r5,12
100164e4:	e13fff17 	ldw	r4,-4(fp)
100164e8:	00096fc0 	call	100096fc <__mulsi3>
100164ec:	1007883a 	mov	r3,r2
100164f0:	008400b4 	movhi	r2,4098
100164f4:	10a83d04 	addi	r2,r2,-24332
100164f8:	1885883a 	add	r2,r3,r2
100164fc:	00000106 	br	10016504 <close+0x40>
10016500:	0005883a 	mov	r2,zero
10016504:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10016508:	e0bffd17 	ldw	r2,-12(fp)
1001650c:	10001926 	beq	r2,zero,10016574 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10016510:	e0bffd17 	ldw	r2,-12(fp)
10016514:	10800017 	ldw	r2,0(r2)
10016518:	10800417 	ldw	r2,16(r2)
1001651c:	10000626 	beq	r2,zero,10016538 <close+0x74>
10016520:	e0bffd17 	ldw	r2,-12(fp)
10016524:	10800017 	ldw	r2,0(r2)
10016528:	10800417 	ldw	r2,16(r2)
1001652c:	e13ffd17 	ldw	r4,-12(fp)
10016530:	103ee83a 	callr	r2
10016534:	00000106 	br	1001653c <close+0x78>
10016538:	0005883a 	mov	r2,zero
1001653c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10016540:	e13fff17 	ldw	r4,-4(fp)
10016544:	0016bac0 	call	10016bac <alt_release_fd>
    if (rval < 0)
10016548:	e0bffe17 	ldw	r2,-8(fp)
1001654c:	1000070e 	bge	r2,zero,1001656c <close+0xa8>
    {
      ALT_ERRNO = -rval;
10016550:	00164880 	call	10016488 <alt_get_errno>
10016554:	1007883a 	mov	r3,r2
10016558:	e0bffe17 	ldw	r2,-8(fp)
1001655c:	0085c83a 	sub	r2,zero,r2
10016560:	18800015 	stw	r2,0(r3)
      return -1;
10016564:	00bfffc4 	movi	r2,-1
10016568:	00000706 	br	10016588 <close+0xc4>
    }
    return 0;
1001656c:	0005883a 	mov	r2,zero
10016570:	00000506 	br	10016588 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10016574:	00164880 	call	10016488 <alt_get_errno>
10016578:	1007883a 	mov	r3,r2
1001657c:	00801444 	movi	r2,81
10016580:	18800015 	stw	r2,0(r3)
    return -1;
10016584:	00bfffc4 	movi	r2,-1
  }
}
10016588:	e037883a 	mov	sp,fp
1001658c:	dfc00117 	ldw	ra,4(sp)
10016590:	df000017 	ldw	fp,0(sp)
10016594:	dec00204 	addi	sp,sp,8
10016598:	f800283a 	ret

1001659c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1001659c:	defffc04 	addi	sp,sp,-16
100165a0:	df000315 	stw	fp,12(sp)
100165a4:	df000304 	addi	fp,sp,12
100165a8:	e13ffd15 	stw	r4,-12(fp)
100165ac:	e17ffe15 	stw	r5,-8(fp)
100165b0:	e1bfff15 	stw	r6,-4(fp)
  return len;
100165b4:	e0bfff17 	ldw	r2,-4(fp)
}
100165b8:	e037883a 	mov	sp,fp
100165bc:	df000017 	ldw	fp,0(sp)
100165c0:	dec00104 	addi	sp,sp,4
100165c4:	f800283a 	ret

100165c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100165c8:	defffe04 	addi	sp,sp,-8
100165cc:	dfc00115 	stw	ra,4(sp)
100165d0:	df000015 	stw	fp,0(sp)
100165d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100165d8:	d0a01217 	ldw	r2,-32696(gp)
100165dc:	10000326 	beq	r2,zero,100165ec <alt_get_errno+0x24>
100165e0:	d0a01217 	ldw	r2,-32696(gp)
100165e4:	103ee83a 	callr	r2
100165e8:	00000106 	br	100165f0 <alt_get_errno+0x28>
100165ec:	d0a7fd04 	addi	r2,gp,-24588
}
100165f0:	e037883a 	mov	sp,fp
100165f4:	dfc00117 	ldw	ra,4(sp)
100165f8:	df000017 	ldw	fp,0(sp)
100165fc:	dec00204 	addi	sp,sp,8
10016600:	f800283a 	ret

10016604 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10016604:	defffb04 	addi	sp,sp,-20
10016608:	dfc00415 	stw	ra,16(sp)
1001660c:	df000315 	stw	fp,12(sp)
10016610:	df000304 	addi	fp,sp,12
10016614:	e13ffe15 	stw	r4,-8(fp)
10016618:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001661c:	e0bffe17 	ldw	r2,-8(fp)
10016620:	10000816 	blt	r2,zero,10016644 <fstat+0x40>
10016624:	01400304 	movi	r5,12
10016628:	e13ffe17 	ldw	r4,-8(fp)
1001662c:	00096fc0 	call	100096fc <__mulsi3>
10016630:	1007883a 	mov	r3,r2
10016634:	008400b4 	movhi	r2,4098
10016638:	10a83d04 	addi	r2,r2,-24332
1001663c:	1885883a 	add	r2,r3,r2
10016640:	00000106 	br	10016648 <fstat+0x44>
10016644:	0005883a 	mov	r2,zero
10016648:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1001664c:	e0bffd17 	ldw	r2,-12(fp)
10016650:	10001026 	beq	r2,zero,10016694 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10016654:	e0bffd17 	ldw	r2,-12(fp)
10016658:	10800017 	ldw	r2,0(r2)
1001665c:	10800817 	ldw	r2,32(r2)
10016660:	10000726 	beq	r2,zero,10016680 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10016664:	e0bffd17 	ldw	r2,-12(fp)
10016668:	10800017 	ldw	r2,0(r2)
1001666c:	10800817 	ldw	r2,32(r2)
10016670:	e17fff17 	ldw	r5,-4(fp)
10016674:	e13ffd17 	ldw	r4,-12(fp)
10016678:	103ee83a 	callr	r2
1001667c:	00000a06 	br	100166a8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10016680:	e0bfff17 	ldw	r2,-4(fp)
10016684:	00c80004 	movi	r3,8192
10016688:	10c00115 	stw	r3,4(r2)
      return 0;
1001668c:	0005883a 	mov	r2,zero
10016690:	00000506 	br	100166a8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10016694:	00165c80 	call	100165c8 <alt_get_errno>
10016698:	1007883a 	mov	r3,r2
1001669c:	00801444 	movi	r2,81
100166a0:	18800015 	stw	r2,0(r3)
    return -1;
100166a4:	00bfffc4 	movi	r2,-1
  }
}
100166a8:	e037883a 	mov	sp,fp
100166ac:	dfc00117 	ldw	ra,4(sp)
100166b0:	df000017 	ldw	fp,0(sp)
100166b4:	dec00204 	addi	sp,sp,8
100166b8:	f800283a 	ret

100166bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100166bc:	defffe04 	addi	sp,sp,-8
100166c0:	dfc00115 	stw	ra,4(sp)
100166c4:	df000015 	stw	fp,0(sp)
100166c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100166cc:	d0a01217 	ldw	r2,-32696(gp)
100166d0:	10000326 	beq	r2,zero,100166e0 <alt_get_errno+0x24>
100166d4:	d0a01217 	ldw	r2,-32696(gp)
100166d8:	103ee83a 	callr	r2
100166dc:	00000106 	br	100166e4 <alt_get_errno+0x28>
100166e0:	d0a7fd04 	addi	r2,gp,-24588
}
100166e4:	e037883a 	mov	sp,fp
100166e8:	dfc00117 	ldw	ra,4(sp)
100166ec:	df000017 	ldw	fp,0(sp)
100166f0:	dec00204 	addi	sp,sp,8
100166f4:	f800283a 	ret

100166f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
100166f8:	deffed04 	addi	sp,sp,-76
100166fc:	dfc01215 	stw	ra,72(sp)
10016700:	df001115 	stw	fp,68(sp)
10016704:	df001104 	addi	fp,sp,68
10016708:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001670c:	e0bfff17 	ldw	r2,-4(fp)
10016710:	10000816 	blt	r2,zero,10016734 <isatty+0x3c>
10016714:	01400304 	movi	r5,12
10016718:	e13fff17 	ldw	r4,-4(fp)
1001671c:	00096fc0 	call	100096fc <__mulsi3>
10016720:	1007883a 	mov	r3,r2
10016724:	008400b4 	movhi	r2,4098
10016728:	10a83d04 	addi	r2,r2,-24332
1001672c:	1885883a 	add	r2,r3,r2
10016730:	00000106 	br	10016738 <isatty+0x40>
10016734:	0005883a 	mov	r2,zero
10016738:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1001673c:	e0bfef17 	ldw	r2,-68(fp)
10016740:	10000e26 	beq	r2,zero,1001677c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10016744:	e0bfef17 	ldw	r2,-68(fp)
10016748:	10800017 	ldw	r2,0(r2)
1001674c:	10800817 	ldw	r2,32(r2)
10016750:	1000021e 	bne	r2,zero,1001675c <isatty+0x64>
    {
      return 1;
10016754:	00800044 	movi	r2,1
10016758:	00000d06 	br	10016790 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1001675c:	e0bff004 	addi	r2,fp,-64
10016760:	100b883a 	mov	r5,r2
10016764:	e13fff17 	ldw	r4,-4(fp)
10016768:	00166040 	call	10016604 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1001676c:	e0bff117 	ldw	r2,-60(fp)
10016770:	10880020 	cmpeqi	r2,r2,8192
10016774:	10803fcc 	andi	r2,r2,255
10016778:	00000506 	br	10016790 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001677c:	00166bc0 	call	100166bc <alt_get_errno>
10016780:	1007883a 	mov	r3,r2
10016784:	00801444 	movi	r2,81
10016788:	18800015 	stw	r2,0(r3)
    return 0;
1001678c:	0005883a 	mov	r2,zero
  }
}
10016790:	e037883a 	mov	sp,fp
10016794:	dfc00117 	ldw	ra,4(sp)
10016798:	df000017 	ldw	fp,0(sp)
1001679c:	dec00204 	addi	sp,sp,8
100167a0:	f800283a 	ret

100167a4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
100167a4:	defffc04 	addi	sp,sp,-16
100167a8:	df000315 	stw	fp,12(sp)
100167ac:	df000304 	addi	fp,sp,12
100167b0:	e13ffd15 	stw	r4,-12(fp)
100167b4:	e17ffe15 	stw	r5,-8(fp)
100167b8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
100167bc:	e0fffe17 	ldw	r3,-8(fp)
100167c0:	e0bffd17 	ldw	r2,-12(fp)
100167c4:	18800c26 	beq	r3,r2,100167f8 <alt_load_section+0x54>
  {
    while( to != end )
100167c8:	00000806 	br	100167ec <alt_load_section+0x48>
    {
      *to++ = *from++;
100167cc:	e0bffe17 	ldw	r2,-8(fp)
100167d0:	10c00104 	addi	r3,r2,4
100167d4:	e0fffe15 	stw	r3,-8(fp)
100167d8:	e0fffd17 	ldw	r3,-12(fp)
100167dc:	19000104 	addi	r4,r3,4
100167e0:	e13ffd15 	stw	r4,-12(fp)
100167e4:	18c00017 	ldw	r3,0(r3)
100167e8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
100167ec:	e0fffe17 	ldw	r3,-8(fp)
100167f0:	e0bfff17 	ldw	r2,-4(fp)
100167f4:	18bff51e 	bne	r3,r2,100167cc <__alt_data_end+0xf80167cc>
    {
      *to++ = *from++;
    }
  }
}
100167f8:	0001883a 	nop
100167fc:	e037883a 	mov	sp,fp
10016800:	df000017 	ldw	fp,0(sp)
10016804:	dec00104 	addi	sp,sp,4
10016808:	f800283a 	ret

1001680c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1001680c:	defffe04 	addi	sp,sp,-8
10016810:	dfc00115 	stw	ra,4(sp)
10016814:	df000015 	stw	fp,0(sp)
10016818:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1001681c:	018400b4 	movhi	r6,4098
10016820:	31accc04 	addi	r6,r6,-19664
10016824:	014400b4 	movhi	r5,4098
10016828:	2964f604 	addi	r5,r5,-27688
1001682c:	010400b4 	movhi	r4,4098
10016830:	212ccc04 	addi	r4,r4,-19664
10016834:	00167a40 	call	100167a4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10016838:	01840034 	movhi	r6,4096
1001683c:	31808c04 	addi	r6,r6,560
10016840:	01440034 	movhi	r5,4096
10016844:	29400804 	addi	r5,r5,32
10016848:	01040034 	movhi	r4,4096
1001684c:	21000804 	addi	r4,r4,32
10016850:	00167a40 	call	100167a4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10016854:	018400b4 	movhi	r6,4098
10016858:	31a4f604 	addi	r6,r6,-27688
1001685c:	014400b4 	movhi	r5,4098
10016860:	29632a04 	addi	r5,r5,-29528
10016864:	010400b4 	movhi	r4,4098
10016868:	21232a04 	addi	r4,r4,-29528
1001686c:	00167a40 	call	100167a4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10016870:	0017bf00 	call	10017bf0 <alt_dcache_flush_all>
  alt_icache_flush_all();
10016874:	0017db00 	call	10017db0 <alt_icache_flush_all>
}
10016878:	0001883a 	nop
1001687c:	e037883a 	mov	sp,fp
10016880:	dfc00117 	ldw	ra,4(sp)
10016884:	df000017 	ldw	fp,0(sp)
10016888:	dec00204 	addi	sp,sp,8
1001688c:	f800283a 	ret

10016890 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10016890:	defffe04 	addi	sp,sp,-8
10016894:	dfc00115 	stw	ra,4(sp)
10016898:	df000015 	stw	fp,0(sp)
1001689c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100168a0:	d0a01217 	ldw	r2,-32696(gp)
100168a4:	10000326 	beq	r2,zero,100168b4 <alt_get_errno+0x24>
100168a8:	d0a01217 	ldw	r2,-32696(gp)
100168ac:	103ee83a 	callr	r2
100168b0:	00000106 	br	100168b8 <alt_get_errno+0x28>
100168b4:	d0a7fd04 	addi	r2,gp,-24588
}
100168b8:	e037883a 	mov	sp,fp
100168bc:	dfc00117 	ldw	ra,4(sp)
100168c0:	df000017 	ldw	fp,0(sp)
100168c4:	dec00204 	addi	sp,sp,8
100168c8:	f800283a 	ret

100168cc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
100168cc:	defff904 	addi	sp,sp,-28
100168d0:	dfc00615 	stw	ra,24(sp)
100168d4:	df000515 	stw	fp,20(sp)
100168d8:	df000504 	addi	fp,sp,20
100168dc:	e13ffd15 	stw	r4,-12(fp)
100168e0:	e17ffe15 	stw	r5,-8(fp)
100168e4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
100168e8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100168ec:	e0bffd17 	ldw	r2,-12(fp)
100168f0:	10000816 	blt	r2,zero,10016914 <lseek+0x48>
100168f4:	01400304 	movi	r5,12
100168f8:	e13ffd17 	ldw	r4,-12(fp)
100168fc:	00096fc0 	call	100096fc <__mulsi3>
10016900:	1007883a 	mov	r3,r2
10016904:	008400b4 	movhi	r2,4098
10016908:	10a83d04 	addi	r2,r2,-24332
1001690c:	1885883a 	add	r2,r3,r2
10016910:	00000106 	br	10016918 <lseek+0x4c>
10016914:	0005883a 	mov	r2,zero
10016918:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1001691c:	e0bffc17 	ldw	r2,-16(fp)
10016920:	10001026 	beq	r2,zero,10016964 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10016924:	e0bffc17 	ldw	r2,-16(fp)
10016928:	10800017 	ldw	r2,0(r2)
1001692c:	10800717 	ldw	r2,28(r2)
10016930:	10000926 	beq	r2,zero,10016958 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10016934:	e0bffc17 	ldw	r2,-16(fp)
10016938:	10800017 	ldw	r2,0(r2)
1001693c:	10800717 	ldw	r2,28(r2)
10016940:	e1bfff17 	ldw	r6,-4(fp)
10016944:	e17ffe17 	ldw	r5,-8(fp)
10016948:	e13ffc17 	ldw	r4,-16(fp)
1001694c:	103ee83a 	callr	r2
10016950:	e0bffb15 	stw	r2,-20(fp)
10016954:	00000506 	br	1001696c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10016958:	00bfde84 	movi	r2,-134
1001695c:	e0bffb15 	stw	r2,-20(fp)
10016960:	00000206 	br	1001696c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10016964:	00bfebc4 	movi	r2,-81
10016968:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1001696c:	e0bffb17 	ldw	r2,-20(fp)
10016970:	1000070e 	bge	r2,zero,10016990 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10016974:	00168900 	call	10016890 <alt_get_errno>
10016978:	1007883a 	mov	r3,r2
1001697c:	e0bffb17 	ldw	r2,-20(fp)
10016980:	0085c83a 	sub	r2,zero,r2
10016984:	18800015 	stw	r2,0(r3)
    rc = -1;
10016988:	00bfffc4 	movi	r2,-1
1001698c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10016990:	e0bffb17 	ldw	r2,-20(fp)
}
10016994:	e037883a 	mov	sp,fp
10016998:	dfc00117 	ldw	ra,4(sp)
1001699c:	df000017 	ldw	fp,0(sp)
100169a0:	dec00204 	addi	sp,sp,8
100169a4:	f800283a 	ret

100169a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100169a8:	defffd04 	addi	sp,sp,-12
100169ac:	dfc00215 	stw	ra,8(sp)
100169b0:	df000115 	stw	fp,4(sp)
100169b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
100169b8:	0009883a 	mov	r4,zero
100169bc:	0016e800 	call	10016e80 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
100169c0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
100169c4:	0016eb80 	call	10016eb8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
100169c8:	018400b4 	movhi	r6,4098
100169cc:	31a4ec04 	addi	r6,r6,-27728
100169d0:	014400b4 	movhi	r5,4098
100169d4:	2964ec04 	addi	r5,r5,-27728
100169d8:	010400b4 	movhi	r4,4098
100169dc:	2124ec04 	addi	r4,r4,-27728
100169e0:	00181540 	call	10018154 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
100169e4:	0017cf00 	call	10017cf0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
100169e8:	01040074 	movhi	r4,4097
100169ec:	211f5404 	addi	r4,r4,32080
100169f0:	00189140 	call	10018914 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
100169f4:	d0a7fe17 	ldw	r2,-24584(gp)
100169f8:	d0e7ff17 	ldw	r3,-24580(gp)
100169fc:	d1280017 	ldw	r4,-24576(gp)
10016a00:	200d883a 	mov	r6,r4
10016a04:	180b883a 	mov	r5,r3
10016a08:	1009883a 	mov	r4,r2
10016a0c:	00056c40 	call	100056c4 <main>
10016a10:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10016a14:	01000044 	movi	r4,1
10016a18:	00164c40 	call	100164c4 <close>
  exit (result);
10016a1c:	e13fff17 	ldw	r4,-4(fp)
10016a20:	00189280 	call	10018928 <exit>

10016a24 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10016a24:	defffe04 	addi	sp,sp,-8
10016a28:	df000115 	stw	fp,4(sp)
10016a2c:	df000104 	addi	fp,sp,4
10016a30:	e13fff15 	stw	r4,-4(fp)
}
10016a34:	0001883a 	nop
10016a38:	e037883a 	mov	sp,fp
10016a3c:	df000017 	ldw	fp,0(sp)
10016a40:	dec00104 	addi	sp,sp,4
10016a44:	f800283a 	ret

10016a48 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10016a48:	defffe04 	addi	sp,sp,-8
10016a4c:	df000115 	stw	fp,4(sp)
10016a50:	df000104 	addi	fp,sp,4
10016a54:	e13fff15 	stw	r4,-4(fp)
}
10016a58:	0001883a 	nop
10016a5c:	e037883a 	mov	sp,fp
10016a60:	df000017 	ldw	fp,0(sp)
10016a64:	dec00104 	addi	sp,sp,4
10016a68:	f800283a 	ret

10016a6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10016a6c:	defffe04 	addi	sp,sp,-8
10016a70:	dfc00115 	stw	ra,4(sp)
10016a74:	df000015 	stw	fp,0(sp)
10016a78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10016a7c:	d0a01217 	ldw	r2,-32696(gp)
10016a80:	10000326 	beq	r2,zero,10016a90 <alt_get_errno+0x24>
10016a84:	d0a01217 	ldw	r2,-32696(gp)
10016a88:	103ee83a 	callr	r2
10016a8c:	00000106 	br	10016a94 <alt_get_errno+0x28>
10016a90:	d0a7fd04 	addi	r2,gp,-24588
}
10016a94:	e037883a 	mov	sp,fp
10016a98:	dfc00117 	ldw	ra,4(sp)
10016a9c:	df000017 	ldw	fp,0(sp)
10016aa0:	dec00204 	addi	sp,sp,8
10016aa4:	f800283a 	ret

10016aa8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10016aa8:	defff904 	addi	sp,sp,-28
10016aac:	dfc00615 	stw	ra,24(sp)
10016ab0:	df000515 	stw	fp,20(sp)
10016ab4:	df000504 	addi	fp,sp,20
10016ab8:	e13ffd15 	stw	r4,-12(fp)
10016abc:	e17ffe15 	stw	r5,-8(fp)
10016ac0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10016ac4:	e0bffd17 	ldw	r2,-12(fp)
10016ac8:	10000816 	blt	r2,zero,10016aec <read+0x44>
10016acc:	01400304 	movi	r5,12
10016ad0:	e13ffd17 	ldw	r4,-12(fp)
10016ad4:	00096fc0 	call	100096fc <__mulsi3>
10016ad8:	1007883a 	mov	r3,r2
10016adc:	008400b4 	movhi	r2,4098
10016ae0:	10a83d04 	addi	r2,r2,-24332
10016ae4:	1885883a 	add	r2,r3,r2
10016ae8:	00000106 	br	10016af0 <read+0x48>
10016aec:	0005883a 	mov	r2,zero
10016af0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10016af4:	e0bffb17 	ldw	r2,-20(fp)
10016af8:	10002226 	beq	r2,zero,10016b84 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10016afc:	e0bffb17 	ldw	r2,-20(fp)
10016b00:	10800217 	ldw	r2,8(r2)
10016b04:	108000cc 	andi	r2,r2,3
10016b08:	10800060 	cmpeqi	r2,r2,1
10016b0c:	1000181e 	bne	r2,zero,10016b70 <read+0xc8>
        (fd->dev->read))
10016b10:	e0bffb17 	ldw	r2,-20(fp)
10016b14:	10800017 	ldw	r2,0(r2)
10016b18:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10016b1c:	10001426 	beq	r2,zero,10016b70 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10016b20:	e0bffb17 	ldw	r2,-20(fp)
10016b24:	10800017 	ldw	r2,0(r2)
10016b28:	10800517 	ldw	r2,20(r2)
10016b2c:	e0ffff17 	ldw	r3,-4(fp)
10016b30:	180d883a 	mov	r6,r3
10016b34:	e17ffe17 	ldw	r5,-8(fp)
10016b38:	e13ffb17 	ldw	r4,-20(fp)
10016b3c:	103ee83a 	callr	r2
10016b40:	e0bffc15 	stw	r2,-16(fp)
10016b44:	e0bffc17 	ldw	r2,-16(fp)
10016b48:	1000070e 	bge	r2,zero,10016b68 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10016b4c:	0016a6c0 	call	10016a6c <alt_get_errno>
10016b50:	1007883a 	mov	r3,r2
10016b54:	e0bffc17 	ldw	r2,-16(fp)
10016b58:	0085c83a 	sub	r2,zero,r2
10016b5c:	18800015 	stw	r2,0(r3)
          return -1;
10016b60:	00bfffc4 	movi	r2,-1
10016b64:	00000c06 	br	10016b98 <read+0xf0>
        }
        return rval;
10016b68:	e0bffc17 	ldw	r2,-16(fp)
10016b6c:	00000a06 	br	10016b98 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10016b70:	0016a6c0 	call	10016a6c <alt_get_errno>
10016b74:	1007883a 	mov	r3,r2
10016b78:	00800344 	movi	r2,13
10016b7c:	18800015 	stw	r2,0(r3)
10016b80:	00000406 	br	10016b94 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10016b84:	0016a6c0 	call	10016a6c <alt_get_errno>
10016b88:	1007883a 	mov	r3,r2
10016b8c:	00801444 	movi	r2,81
10016b90:	18800015 	stw	r2,0(r3)
  }
  return -1;
10016b94:	00bfffc4 	movi	r2,-1
}
10016b98:	e037883a 	mov	sp,fp
10016b9c:	dfc00117 	ldw	ra,4(sp)
10016ba0:	df000017 	ldw	fp,0(sp)
10016ba4:	dec00204 	addi	sp,sp,8
10016ba8:	f800283a 	ret

10016bac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10016bac:	defffc04 	addi	sp,sp,-16
10016bb0:	dfc00315 	stw	ra,12(sp)
10016bb4:	df000215 	stw	fp,8(sp)
10016bb8:	dc000115 	stw	r16,4(sp)
10016bbc:	df000204 	addi	fp,sp,8
10016bc0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10016bc4:	e0bffe17 	ldw	r2,-8(fp)
10016bc8:	108000d0 	cmplti	r2,r2,3
10016bcc:	1000111e 	bne	r2,zero,10016c14 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10016bd0:	040400b4 	movhi	r16,4098
10016bd4:	84283d04 	addi	r16,r16,-24332
10016bd8:	e0bffe17 	ldw	r2,-8(fp)
10016bdc:	01400304 	movi	r5,12
10016be0:	1009883a 	mov	r4,r2
10016be4:	00096fc0 	call	100096fc <__mulsi3>
10016be8:	8085883a 	add	r2,r16,r2
10016bec:	10800204 	addi	r2,r2,8
10016bf0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10016bf4:	040400b4 	movhi	r16,4098
10016bf8:	84283d04 	addi	r16,r16,-24332
10016bfc:	e0bffe17 	ldw	r2,-8(fp)
10016c00:	01400304 	movi	r5,12
10016c04:	1009883a 	mov	r4,r2
10016c08:	00096fc0 	call	100096fc <__mulsi3>
10016c0c:	8085883a 	add	r2,r16,r2
10016c10:	10000015 	stw	zero,0(r2)
  }
}
10016c14:	0001883a 	nop
10016c18:	e6ffff04 	addi	sp,fp,-4
10016c1c:	dfc00217 	ldw	ra,8(sp)
10016c20:	df000117 	ldw	fp,4(sp)
10016c24:	dc000017 	ldw	r16,0(sp)
10016c28:	dec00304 	addi	sp,sp,12
10016c2c:	f800283a 	ret

10016c30 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10016c30:	defff904 	addi	sp,sp,-28
10016c34:	df000615 	stw	fp,24(sp)
10016c38:	df000604 	addi	fp,sp,24
10016c3c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016c40:	0005303a 	rdctl	r2,status
10016c44:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016c48:	e0fffe17 	ldw	r3,-8(fp)
10016c4c:	00bfff84 	movi	r2,-2
10016c50:	1884703a 	and	r2,r3,r2
10016c54:	1001703a 	wrctl	status,r2
  
  return context;
10016c58:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10016c5c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10016c60:	d0a01317 	ldw	r2,-32692(gp)
10016c64:	10c000c4 	addi	r3,r2,3
10016c68:	00bfff04 	movi	r2,-4
10016c6c:	1884703a 	and	r2,r3,r2
10016c70:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10016c74:	d0e01317 	ldw	r3,-32692(gp)
10016c78:	e0bfff17 	ldw	r2,-4(fp)
10016c7c:	1887883a 	add	r3,r3,r2
10016c80:	00860034 	movhi	r2,6144
10016c84:	10800004 	addi	r2,r2,0
10016c88:	10c0062e 	bgeu	r2,r3,10016ca4 <sbrk+0x74>
10016c8c:	e0bffb17 	ldw	r2,-20(fp)
10016c90:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016c94:	e0bffa17 	ldw	r2,-24(fp)
10016c98:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10016c9c:	00bfffc4 	movi	r2,-1
10016ca0:	00000b06 	br	10016cd0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10016ca4:	d0a01317 	ldw	r2,-32692(gp)
10016ca8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10016cac:	d0e01317 	ldw	r3,-32692(gp)
10016cb0:	e0bfff17 	ldw	r2,-4(fp)
10016cb4:	1885883a 	add	r2,r3,r2
10016cb8:	d0a01315 	stw	r2,-32692(gp)
10016cbc:	e0bffb17 	ldw	r2,-20(fp)
10016cc0:	e0bffc15 	stw	r2,-16(fp)
10016cc4:	e0bffc17 	ldw	r2,-16(fp)
10016cc8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10016ccc:	e0bffd17 	ldw	r2,-12(fp)
} 
10016cd0:	e037883a 	mov	sp,fp
10016cd4:	df000017 	ldw	fp,0(sp)
10016cd8:	dec00104 	addi	sp,sp,4
10016cdc:	f800283a 	ret

10016ce0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10016ce0:	defffd04 	addi	sp,sp,-12
10016ce4:	dfc00215 	stw	ra,8(sp)
10016ce8:	df000115 	stw	fp,4(sp)
10016cec:	df000104 	addi	fp,sp,4
10016cf0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10016cf4:	e13fff17 	ldw	r4,-4(fp)
10016cf8:	0017a980 	call	10017a98 <alt_busy_sleep>
}
10016cfc:	e037883a 	mov	sp,fp
10016d00:	dfc00117 	ldw	ra,4(sp)
10016d04:	df000017 	ldw	fp,0(sp)
10016d08:	dec00204 	addi	sp,sp,8
10016d0c:	f800283a 	ret

10016d10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10016d10:	defffe04 	addi	sp,sp,-8
10016d14:	dfc00115 	stw	ra,4(sp)
10016d18:	df000015 	stw	fp,0(sp)
10016d1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10016d20:	d0a01217 	ldw	r2,-32696(gp)
10016d24:	10000326 	beq	r2,zero,10016d34 <alt_get_errno+0x24>
10016d28:	d0a01217 	ldw	r2,-32696(gp)
10016d2c:	103ee83a 	callr	r2
10016d30:	00000106 	br	10016d38 <alt_get_errno+0x28>
10016d34:	d0a7fd04 	addi	r2,gp,-24588
}
10016d38:	e037883a 	mov	sp,fp
10016d3c:	dfc00117 	ldw	ra,4(sp)
10016d40:	df000017 	ldw	fp,0(sp)
10016d44:	dec00204 	addi	sp,sp,8
10016d48:	f800283a 	ret

10016d4c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10016d4c:	defff904 	addi	sp,sp,-28
10016d50:	dfc00615 	stw	ra,24(sp)
10016d54:	df000515 	stw	fp,20(sp)
10016d58:	df000504 	addi	fp,sp,20
10016d5c:	e13ffd15 	stw	r4,-12(fp)
10016d60:	e17ffe15 	stw	r5,-8(fp)
10016d64:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10016d68:	e0bffd17 	ldw	r2,-12(fp)
10016d6c:	10000816 	blt	r2,zero,10016d90 <write+0x44>
10016d70:	01400304 	movi	r5,12
10016d74:	e13ffd17 	ldw	r4,-12(fp)
10016d78:	00096fc0 	call	100096fc <__mulsi3>
10016d7c:	1007883a 	mov	r3,r2
10016d80:	008400b4 	movhi	r2,4098
10016d84:	10a83d04 	addi	r2,r2,-24332
10016d88:	1885883a 	add	r2,r3,r2
10016d8c:	00000106 	br	10016d94 <write+0x48>
10016d90:	0005883a 	mov	r2,zero
10016d94:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10016d98:	e0bffb17 	ldw	r2,-20(fp)
10016d9c:	10002126 	beq	r2,zero,10016e24 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10016da0:	e0bffb17 	ldw	r2,-20(fp)
10016da4:	10800217 	ldw	r2,8(r2)
10016da8:	108000cc 	andi	r2,r2,3
10016dac:	10001826 	beq	r2,zero,10016e10 <write+0xc4>
10016db0:	e0bffb17 	ldw	r2,-20(fp)
10016db4:	10800017 	ldw	r2,0(r2)
10016db8:	10800617 	ldw	r2,24(r2)
10016dbc:	10001426 	beq	r2,zero,10016e10 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10016dc0:	e0bffb17 	ldw	r2,-20(fp)
10016dc4:	10800017 	ldw	r2,0(r2)
10016dc8:	10800617 	ldw	r2,24(r2)
10016dcc:	e0ffff17 	ldw	r3,-4(fp)
10016dd0:	180d883a 	mov	r6,r3
10016dd4:	e17ffe17 	ldw	r5,-8(fp)
10016dd8:	e13ffb17 	ldw	r4,-20(fp)
10016ddc:	103ee83a 	callr	r2
10016de0:	e0bffc15 	stw	r2,-16(fp)
10016de4:	e0bffc17 	ldw	r2,-16(fp)
10016de8:	1000070e 	bge	r2,zero,10016e08 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10016dec:	0016d100 	call	10016d10 <alt_get_errno>
10016df0:	1007883a 	mov	r3,r2
10016df4:	e0bffc17 	ldw	r2,-16(fp)
10016df8:	0085c83a 	sub	r2,zero,r2
10016dfc:	18800015 	stw	r2,0(r3)
        return -1;
10016e00:	00bfffc4 	movi	r2,-1
10016e04:	00000c06 	br	10016e38 <write+0xec>
      }
      return rval;
10016e08:	e0bffc17 	ldw	r2,-16(fp)
10016e0c:	00000a06 	br	10016e38 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10016e10:	0016d100 	call	10016d10 <alt_get_errno>
10016e14:	1007883a 	mov	r3,r2
10016e18:	00800344 	movi	r2,13
10016e1c:	18800015 	stw	r2,0(r3)
10016e20:	00000406 	br	10016e34 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10016e24:	0016d100 	call	10016d10 <alt_get_errno>
10016e28:	1007883a 	mov	r3,r2
10016e2c:	00801444 	movi	r2,81
10016e30:	18800015 	stw	r2,0(r3)
  }
  return -1;
10016e34:	00bfffc4 	movi	r2,-1
}
10016e38:	e037883a 	mov	sp,fp
10016e3c:	dfc00117 	ldw	ra,4(sp)
10016e40:	df000017 	ldw	fp,0(sp)
10016e44:	dec00204 	addi	sp,sp,8
10016e48:	f800283a 	ret

10016e4c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10016e4c:	defffd04 	addi	sp,sp,-12
10016e50:	dfc00215 	stw	ra,8(sp)
10016e54:	df000115 	stw	fp,4(sp)
10016e58:	df000104 	addi	fp,sp,4
10016e5c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10016e60:	d1600f04 	addi	r5,gp,-32708
10016e64:	e13fff17 	ldw	r4,-4(fp)
10016e68:	0017c4c0 	call	10017c4c <alt_dev_llist_insert>
}
10016e6c:	e037883a 	mov	sp,fp
10016e70:	dfc00117 	ldw	ra,4(sp)
10016e74:	df000017 	ldw	fp,0(sp)
10016e78:	dec00204 	addi	sp,sp,8
10016e7c:	f800283a 	ret

10016e80 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10016e80:	defffd04 	addi	sp,sp,-12
10016e84:	dfc00215 	stw	ra,8(sp)
10016e88:	df000115 	stw	fp,4(sp)
10016e8c:	df000104 	addi	fp,sp,4
10016e90:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10016e94:	00185f80 	call	100185f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10016e98:	00800044 	movi	r2,1
10016e9c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10016ea0:	0001883a 	nop
10016ea4:	e037883a 	mov	sp,fp
10016ea8:	dfc00117 	ldw	ra,4(sp)
10016eac:	df000017 	ldw	fp,0(sp)
10016eb0:	dec00204 	addi	sp,sp,8
10016eb4:	f800283a 	ret

10016eb8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10016eb8:	defffe04 	addi	sp,sp,-8
10016ebc:	dfc00115 	stw	ra,4(sp)
10016ec0:	df000015 	stw	fp,0(sp)
10016ec4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10016ec8:	01800144 	movi	r6,5
10016ecc:	000b883a 	mov	r5,zero
10016ed0:	010400b4 	movhi	r4,4098
10016ed4:	2128a704 	addi	r4,r4,-23908
10016ed8:	00170680 	call	10017068 <altera_avalon_jtag_uart_init>
10016edc:	010400b4 	movhi	r4,4098
10016ee0:	21289d04 	addi	r4,r4,-23948
10016ee4:	0016e4c0 	call	10016e4c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10016ee8:	0001883a 	nop
}
10016eec:	0001883a 	nop
10016ef0:	e037883a 	mov	sp,fp
10016ef4:	dfc00117 	ldw	ra,4(sp)
10016ef8:	df000017 	ldw	fp,0(sp)
10016efc:	dec00204 	addi	sp,sp,8
10016f00:	f800283a 	ret

10016f04 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10016f04:	defffa04 	addi	sp,sp,-24
10016f08:	dfc00515 	stw	ra,20(sp)
10016f0c:	df000415 	stw	fp,16(sp)
10016f10:	df000404 	addi	fp,sp,16
10016f14:	e13ffd15 	stw	r4,-12(fp)
10016f18:	e17ffe15 	stw	r5,-8(fp)
10016f1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10016f20:	e0bffd17 	ldw	r2,-12(fp)
10016f24:	10800017 	ldw	r2,0(r2)
10016f28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10016f2c:	e0bffc17 	ldw	r2,-16(fp)
10016f30:	10c00a04 	addi	r3,r2,40
10016f34:	e0bffd17 	ldw	r2,-12(fp)
10016f38:	10800217 	ldw	r2,8(r2)
10016f3c:	100f883a 	mov	r7,r2
10016f40:	e1bfff17 	ldw	r6,-4(fp)
10016f44:	e17ffe17 	ldw	r5,-8(fp)
10016f48:	1809883a 	mov	r4,r3
10016f4c:	001752c0 	call	1001752c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10016f50:	e037883a 	mov	sp,fp
10016f54:	dfc00117 	ldw	ra,4(sp)
10016f58:	df000017 	ldw	fp,0(sp)
10016f5c:	dec00204 	addi	sp,sp,8
10016f60:	f800283a 	ret

10016f64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10016f64:	defffa04 	addi	sp,sp,-24
10016f68:	dfc00515 	stw	ra,20(sp)
10016f6c:	df000415 	stw	fp,16(sp)
10016f70:	df000404 	addi	fp,sp,16
10016f74:	e13ffd15 	stw	r4,-12(fp)
10016f78:	e17ffe15 	stw	r5,-8(fp)
10016f7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10016f80:	e0bffd17 	ldw	r2,-12(fp)
10016f84:	10800017 	ldw	r2,0(r2)
10016f88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10016f8c:	e0bffc17 	ldw	r2,-16(fp)
10016f90:	10c00a04 	addi	r3,r2,40
10016f94:	e0bffd17 	ldw	r2,-12(fp)
10016f98:	10800217 	ldw	r2,8(r2)
10016f9c:	100f883a 	mov	r7,r2
10016fa0:	e1bfff17 	ldw	r6,-4(fp)
10016fa4:	e17ffe17 	ldw	r5,-8(fp)
10016fa8:	1809883a 	mov	r4,r3
10016fac:	00177480 	call	10017748 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10016fb0:	e037883a 	mov	sp,fp
10016fb4:	dfc00117 	ldw	ra,4(sp)
10016fb8:	df000017 	ldw	fp,0(sp)
10016fbc:	dec00204 	addi	sp,sp,8
10016fc0:	f800283a 	ret

10016fc4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10016fc4:	defffc04 	addi	sp,sp,-16
10016fc8:	dfc00315 	stw	ra,12(sp)
10016fcc:	df000215 	stw	fp,8(sp)
10016fd0:	df000204 	addi	fp,sp,8
10016fd4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10016fd8:	e0bfff17 	ldw	r2,-4(fp)
10016fdc:	10800017 	ldw	r2,0(r2)
10016fe0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10016fe4:	e0bffe17 	ldw	r2,-8(fp)
10016fe8:	10c00a04 	addi	r3,r2,40
10016fec:	e0bfff17 	ldw	r2,-4(fp)
10016ff0:	10800217 	ldw	r2,8(r2)
10016ff4:	100b883a 	mov	r5,r2
10016ff8:	1809883a 	mov	r4,r3
10016ffc:	00173d40 	call	100173d4 <altera_avalon_jtag_uart_close>
}
10017000:	e037883a 	mov	sp,fp
10017004:	dfc00117 	ldw	ra,4(sp)
10017008:	df000017 	ldw	fp,0(sp)
1001700c:	dec00204 	addi	sp,sp,8
10017010:	f800283a 	ret

10017014 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10017014:	defffa04 	addi	sp,sp,-24
10017018:	dfc00515 	stw	ra,20(sp)
1001701c:	df000415 	stw	fp,16(sp)
10017020:	df000404 	addi	fp,sp,16
10017024:	e13ffd15 	stw	r4,-12(fp)
10017028:	e17ffe15 	stw	r5,-8(fp)
1001702c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10017030:	e0bffd17 	ldw	r2,-12(fp)
10017034:	10800017 	ldw	r2,0(r2)
10017038:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1001703c:	e0bffc17 	ldw	r2,-16(fp)
10017040:	10800a04 	addi	r2,r2,40
10017044:	e1bfff17 	ldw	r6,-4(fp)
10017048:	e17ffe17 	ldw	r5,-8(fp)
1001704c:	1009883a 	mov	r4,r2
10017050:	001743c0 	call	1001743c <altera_avalon_jtag_uart_ioctl>
}
10017054:	e037883a 	mov	sp,fp
10017058:	dfc00117 	ldw	ra,4(sp)
1001705c:	df000017 	ldw	fp,0(sp)
10017060:	dec00204 	addi	sp,sp,8
10017064:	f800283a 	ret

10017068 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10017068:	defffa04 	addi	sp,sp,-24
1001706c:	dfc00515 	stw	ra,20(sp)
10017070:	df000415 	stw	fp,16(sp)
10017074:	df000404 	addi	fp,sp,16
10017078:	e13ffd15 	stw	r4,-12(fp)
1001707c:	e17ffe15 	stw	r5,-8(fp)
10017080:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10017084:	e0bffd17 	ldw	r2,-12(fp)
10017088:	00c00044 	movi	r3,1
1001708c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10017090:	e0bffd17 	ldw	r2,-12(fp)
10017094:	10800017 	ldw	r2,0(r2)
10017098:	10800104 	addi	r2,r2,4
1001709c:	1007883a 	mov	r3,r2
100170a0:	e0bffd17 	ldw	r2,-12(fp)
100170a4:	10800817 	ldw	r2,32(r2)
100170a8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
100170ac:	e0bffe17 	ldw	r2,-8(fp)
100170b0:	e0ffff17 	ldw	r3,-4(fp)
100170b4:	d8000015 	stw	zero,0(sp)
100170b8:	e1fffd17 	ldw	r7,-12(fp)
100170bc:	01840074 	movhi	r6,4097
100170c0:	319c4a04 	addi	r6,r6,28968
100170c4:	180b883a 	mov	r5,r3
100170c8:	1009883a 	mov	r4,r2
100170cc:	0017dd00 	call	10017dd0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100170d0:	e0bffd17 	ldw	r2,-12(fp)
100170d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100170d8:	e0bffd17 	ldw	r2,-12(fp)
100170dc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100170e0:	d0e80217 	ldw	r3,-24568(gp)
100170e4:	e1fffd17 	ldw	r7,-12(fp)
100170e8:	01840074 	movhi	r6,4097
100170ec:	319ccd04 	addi	r6,r6,29492
100170f0:	180b883a 	mov	r5,r3
100170f4:	1009883a 	mov	r4,r2
100170f8:	001796c0 	call	1001796c <alt_alarm_start>
100170fc:	1000040e 	bge	r2,zero,10017110 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10017100:	e0fffd17 	ldw	r3,-12(fp)
10017104:	00a00034 	movhi	r2,32768
10017108:	10bfffc4 	addi	r2,r2,-1
1001710c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10017110:	0001883a 	nop
10017114:	e037883a 	mov	sp,fp
10017118:	dfc00117 	ldw	ra,4(sp)
1001711c:	df000017 	ldw	fp,0(sp)
10017120:	dec00204 	addi	sp,sp,8
10017124:	f800283a 	ret

10017128 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10017128:	defff804 	addi	sp,sp,-32
1001712c:	df000715 	stw	fp,28(sp)
10017130:	df000704 	addi	fp,sp,28
10017134:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10017138:	e0bfff17 	ldw	r2,-4(fp)
1001713c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10017140:	e0bffb17 	ldw	r2,-20(fp)
10017144:	10800017 	ldw	r2,0(r2)
10017148:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001714c:	e0bffc17 	ldw	r2,-16(fp)
10017150:	10800104 	addi	r2,r2,4
10017154:	10800037 	ldwio	r2,0(r2)
10017158:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1001715c:	e0bffd17 	ldw	r2,-12(fp)
10017160:	1080c00c 	andi	r2,r2,768
10017164:	10006d26 	beq	r2,zero,1001731c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10017168:	e0bffd17 	ldw	r2,-12(fp)
1001716c:	1080400c 	andi	r2,r2,256
10017170:	10003526 	beq	r2,zero,10017248 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10017174:	00800074 	movhi	r2,1
10017178:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001717c:	e0bffb17 	ldw	r2,-20(fp)
10017180:	10800a17 	ldw	r2,40(r2)
10017184:	10800044 	addi	r2,r2,1
10017188:	1081ffcc 	andi	r2,r2,2047
1001718c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10017190:	e0bffb17 	ldw	r2,-20(fp)
10017194:	10c00b17 	ldw	r3,44(r2)
10017198:	e0bffe17 	ldw	r2,-8(fp)
1001719c:	18801526 	beq	r3,r2,100171f4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
100171a0:	e0bffc17 	ldw	r2,-16(fp)
100171a4:	10800037 	ldwio	r2,0(r2)
100171a8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
100171ac:	e0bff917 	ldw	r2,-28(fp)
100171b0:	10a0000c 	andi	r2,r2,32768
100171b4:	10001126 	beq	r2,zero,100171fc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
100171b8:	e0bffb17 	ldw	r2,-20(fp)
100171bc:	10800a17 	ldw	r2,40(r2)
100171c0:	e0fff917 	ldw	r3,-28(fp)
100171c4:	1809883a 	mov	r4,r3
100171c8:	e0fffb17 	ldw	r3,-20(fp)
100171cc:	1885883a 	add	r2,r3,r2
100171d0:	10800e04 	addi	r2,r2,56
100171d4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100171d8:	e0bffb17 	ldw	r2,-20(fp)
100171dc:	10800a17 	ldw	r2,40(r2)
100171e0:	10800044 	addi	r2,r2,1
100171e4:	10c1ffcc 	andi	r3,r2,2047
100171e8:	e0bffb17 	ldw	r2,-20(fp)
100171ec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100171f0:	003fe206 	br	1001717c <__alt_data_end+0xf801717c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
100171f4:	0001883a 	nop
100171f8:	00000106 	br	10017200 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
100171fc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10017200:	e0bff917 	ldw	r2,-28(fp)
10017204:	10bfffec 	andhi	r2,r2,65535
10017208:	10000f26 	beq	r2,zero,10017248 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001720c:	e0bffb17 	ldw	r2,-20(fp)
10017210:	10c00817 	ldw	r3,32(r2)
10017214:	00bfff84 	movi	r2,-2
10017218:	1886703a 	and	r3,r3,r2
1001721c:	e0bffb17 	ldw	r2,-20(fp)
10017220:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10017224:	e0bffc17 	ldw	r2,-16(fp)
10017228:	10800104 	addi	r2,r2,4
1001722c:	1007883a 	mov	r3,r2
10017230:	e0bffb17 	ldw	r2,-20(fp)
10017234:	10800817 	ldw	r2,32(r2)
10017238:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001723c:	e0bffc17 	ldw	r2,-16(fp)
10017240:	10800104 	addi	r2,r2,4
10017244:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10017248:	e0bffd17 	ldw	r2,-12(fp)
1001724c:	1080800c 	andi	r2,r2,512
10017250:	103fbe26 	beq	r2,zero,1001714c <__alt_data_end+0xf801714c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10017254:	e0bffd17 	ldw	r2,-12(fp)
10017258:	1004d43a 	srli	r2,r2,16
1001725c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10017260:	00001406 	br	100172b4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10017264:	e0bffc17 	ldw	r2,-16(fp)
10017268:	e0fffb17 	ldw	r3,-20(fp)
1001726c:	18c00d17 	ldw	r3,52(r3)
10017270:	e13ffb17 	ldw	r4,-20(fp)
10017274:	20c7883a 	add	r3,r4,r3
10017278:	18c20e04 	addi	r3,r3,2104
1001727c:	18c00003 	ldbu	r3,0(r3)
10017280:	18c03fcc 	andi	r3,r3,255
10017284:	18c0201c 	xori	r3,r3,128
10017288:	18ffe004 	addi	r3,r3,-128
1001728c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10017290:	e0bffb17 	ldw	r2,-20(fp)
10017294:	10800d17 	ldw	r2,52(r2)
10017298:	10800044 	addi	r2,r2,1
1001729c:	10c1ffcc 	andi	r3,r2,2047
100172a0:	e0bffb17 	ldw	r2,-20(fp)
100172a4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
100172a8:	e0bffa17 	ldw	r2,-24(fp)
100172ac:	10bfffc4 	addi	r2,r2,-1
100172b0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100172b4:	e0bffa17 	ldw	r2,-24(fp)
100172b8:	10000526 	beq	r2,zero,100172d0 <altera_avalon_jtag_uart_irq+0x1a8>
100172bc:	e0bffb17 	ldw	r2,-20(fp)
100172c0:	10c00d17 	ldw	r3,52(r2)
100172c4:	e0bffb17 	ldw	r2,-20(fp)
100172c8:	10800c17 	ldw	r2,48(r2)
100172cc:	18bfe51e 	bne	r3,r2,10017264 <__alt_data_end+0xf8017264>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100172d0:	e0bffa17 	ldw	r2,-24(fp)
100172d4:	103f9d26 	beq	r2,zero,1001714c <__alt_data_end+0xf801714c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100172d8:	e0bffb17 	ldw	r2,-20(fp)
100172dc:	10c00817 	ldw	r3,32(r2)
100172e0:	00bfff44 	movi	r2,-3
100172e4:	1886703a 	and	r3,r3,r2
100172e8:	e0bffb17 	ldw	r2,-20(fp)
100172ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100172f0:	e0bffb17 	ldw	r2,-20(fp)
100172f4:	10800017 	ldw	r2,0(r2)
100172f8:	10800104 	addi	r2,r2,4
100172fc:	1007883a 	mov	r3,r2
10017300:	e0bffb17 	ldw	r2,-20(fp)
10017304:	10800817 	ldw	r2,32(r2)
10017308:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001730c:	e0bffc17 	ldw	r2,-16(fp)
10017310:	10800104 	addi	r2,r2,4
10017314:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10017318:	003f8c06 	br	1001714c <__alt_data_end+0xf801714c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1001731c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10017320:	0001883a 	nop
10017324:	e037883a 	mov	sp,fp
10017328:	df000017 	ldw	fp,0(sp)
1001732c:	dec00104 	addi	sp,sp,4
10017330:	f800283a 	ret

10017334 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10017334:	defff804 	addi	sp,sp,-32
10017338:	df000715 	stw	fp,28(sp)
1001733c:	df000704 	addi	fp,sp,28
10017340:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10017344:	e0bffb17 	ldw	r2,-20(fp)
10017348:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1001734c:	e0bff917 	ldw	r2,-28(fp)
10017350:	10800017 	ldw	r2,0(r2)
10017354:	10800104 	addi	r2,r2,4
10017358:	10800037 	ldwio	r2,0(r2)
1001735c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10017360:	e0bffa17 	ldw	r2,-24(fp)
10017364:	1081000c 	andi	r2,r2,1024
10017368:	10000b26 	beq	r2,zero,10017398 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1001736c:	e0bff917 	ldw	r2,-28(fp)
10017370:	10800017 	ldw	r2,0(r2)
10017374:	10800104 	addi	r2,r2,4
10017378:	1007883a 	mov	r3,r2
1001737c:	e0bff917 	ldw	r2,-28(fp)
10017380:	10800817 	ldw	r2,32(r2)
10017384:	10810014 	ori	r2,r2,1024
10017388:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1001738c:	e0bff917 	ldw	r2,-28(fp)
10017390:	10000915 	stw	zero,36(r2)
10017394:	00000a06 	br	100173c0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10017398:	e0bff917 	ldw	r2,-28(fp)
1001739c:	10c00917 	ldw	r3,36(r2)
100173a0:	00a00034 	movhi	r2,32768
100173a4:	10bfff04 	addi	r2,r2,-4
100173a8:	10c00536 	bltu	r2,r3,100173c0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100173ac:	e0bff917 	ldw	r2,-28(fp)
100173b0:	10800917 	ldw	r2,36(r2)
100173b4:	10c00044 	addi	r3,r2,1
100173b8:	e0bff917 	ldw	r2,-28(fp)
100173bc:	10c00915 	stw	r3,36(r2)
100173c0:	d0a80217 	ldw	r2,-24568(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100173c4:	e037883a 	mov	sp,fp
100173c8:	df000017 	ldw	fp,0(sp)
100173cc:	dec00104 	addi	sp,sp,4
100173d0:	f800283a 	ret

100173d4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100173d4:	defffd04 	addi	sp,sp,-12
100173d8:	df000215 	stw	fp,8(sp)
100173dc:	df000204 	addi	fp,sp,8
100173e0:	e13ffe15 	stw	r4,-8(fp)
100173e4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100173e8:	00000506 	br	10017400 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100173ec:	e0bfff17 	ldw	r2,-4(fp)
100173f0:	1090000c 	andi	r2,r2,16384
100173f4:	10000226 	beq	r2,zero,10017400 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100173f8:	00bffd44 	movi	r2,-11
100173fc:	00000b06 	br	1001742c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10017400:	e0bffe17 	ldw	r2,-8(fp)
10017404:	10c00d17 	ldw	r3,52(r2)
10017408:	e0bffe17 	ldw	r2,-8(fp)
1001740c:	10800c17 	ldw	r2,48(r2)
10017410:	18800526 	beq	r3,r2,10017428 <altera_avalon_jtag_uart_close+0x54>
10017414:	e0bffe17 	ldw	r2,-8(fp)
10017418:	10c00917 	ldw	r3,36(r2)
1001741c:	e0bffe17 	ldw	r2,-8(fp)
10017420:	10800117 	ldw	r2,4(r2)
10017424:	18bff136 	bltu	r3,r2,100173ec <__alt_data_end+0xf80173ec>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10017428:	0005883a 	mov	r2,zero
}
1001742c:	e037883a 	mov	sp,fp
10017430:	df000017 	ldw	fp,0(sp)
10017434:	dec00104 	addi	sp,sp,4
10017438:	f800283a 	ret

1001743c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1001743c:	defffa04 	addi	sp,sp,-24
10017440:	df000515 	stw	fp,20(sp)
10017444:	df000504 	addi	fp,sp,20
10017448:	e13ffd15 	stw	r4,-12(fp)
1001744c:	e17ffe15 	stw	r5,-8(fp)
10017450:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10017454:	00bff9c4 	movi	r2,-25
10017458:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1001745c:	e0bffe17 	ldw	r2,-8(fp)
10017460:	10da8060 	cmpeqi	r3,r2,27137
10017464:	1800031e 	bne	r3,zero,10017474 <altera_avalon_jtag_uart_ioctl+0x38>
10017468:	109a80a0 	cmpeqi	r2,r2,27138
1001746c:	1000181e 	bne	r2,zero,100174d0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10017470:	00002906 	br	10017518 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10017474:	e0bffd17 	ldw	r2,-12(fp)
10017478:	10c00117 	ldw	r3,4(r2)
1001747c:	00a00034 	movhi	r2,32768
10017480:	10bfffc4 	addi	r2,r2,-1
10017484:	18802126 	beq	r3,r2,1001750c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10017488:	e0bfff17 	ldw	r2,-4(fp)
1001748c:	10800017 	ldw	r2,0(r2)
10017490:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10017494:	e0bffc17 	ldw	r2,-16(fp)
10017498:	10800090 	cmplti	r2,r2,2
1001749c:	1000061e 	bne	r2,zero,100174b8 <altera_avalon_jtag_uart_ioctl+0x7c>
100174a0:	e0fffc17 	ldw	r3,-16(fp)
100174a4:	00a00034 	movhi	r2,32768
100174a8:	10bfffc4 	addi	r2,r2,-1
100174ac:	18800226 	beq	r3,r2,100174b8 <altera_avalon_jtag_uart_ioctl+0x7c>
100174b0:	e0bffc17 	ldw	r2,-16(fp)
100174b4:	00000206 	br	100174c0 <altera_avalon_jtag_uart_ioctl+0x84>
100174b8:	00a00034 	movhi	r2,32768
100174bc:	10bfff84 	addi	r2,r2,-2
100174c0:	e0fffd17 	ldw	r3,-12(fp)
100174c4:	18800115 	stw	r2,4(r3)
      rc = 0;
100174c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100174cc:	00000f06 	br	1001750c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100174d0:	e0bffd17 	ldw	r2,-12(fp)
100174d4:	10c00117 	ldw	r3,4(r2)
100174d8:	00a00034 	movhi	r2,32768
100174dc:	10bfffc4 	addi	r2,r2,-1
100174e0:	18800c26 	beq	r3,r2,10017514 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100174e4:	e0bffd17 	ldw	r2,-12(fp)
100174e8:	10c00917 	ldw	r3,36(r2)
100174ec:	e0bffd17 	ldw	r2,-12(fp)
100174f0:	10800117 	ldw	r2,4(r2)
100174f4:	1885803a 	cmpltu	r2,r3,r2
100174f8:	10c03fcc 	andi	r3,r2,255
100174fc:	e0bfff17 	ldw	r2,-4(fp)
10017500:	10c00015 	stw	r3,0(r2)
      rc = 0;
10017504:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10017508:	00000206 	br	10017514 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1001750c:	0001883a 	nop
10017510:	00000106 	br	10017518 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10017514:	0001883a 	nop

  default:
    break;
  }

  return rc;
10017518:	e0bffb17 	ldw	r2,-20(fp)
}
1001751c:	e037883a 	mov	sp,fp
10017520:	df000017 	ldw	fp,0(sp)
10017524:	dec00104 	addi	sp,sp,4
10017528:	f800283a 	ret

1001752c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1001752c:	defff304 	addi	sp,sp,-52
10017530:	dfc00c15 	stw	ra,48(sp)
10017534:	df000b15 	stw	fp,44(sp)
10017538:	df000b04 	addi	fp,sp,44
1001753c:	e13ffc15 	stw	r4,-16(fp)
10017540:	e17ffd15 	stw	r5,-12(fp)
10017544:	e1bffe15 	stw	r6,-8(fp)
10017548:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1001754c:	e0bffd17 	ldw	r2,-12(fp)
10017550:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10017554:	00004706 	br	10017674 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10017558:	e0bffc17 	ldw	r2,-16(fp)
1001755c:	10800a17 	ldw	r2,40(r2)
10017560:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10017564:	e0bffc17 	ldw	r2,-16(fp)
10017568:	10800b17 	ldw	r2,44(r2)
1001756c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10017570:	e0fff717 	ldw	r3,-36(fp)
10017574:	e0bff817 	ldw	r2,-32(fp)
10017578:	18800536 	bltu	r3,r2,10017590 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1001757c:	e0fff717 	ldw	r3,-36(fp)
10017580:	e0bff817 	ldw	r2,-32(fp)
10017584:	1885c83a 	sub	r2,r3,r2
10017588:	e0bff615 	stw	r2,-40(fp)
1001758c:	00000406 	br	100175a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10017590:	00c20004 	movi	r3,2048
10017594:	e0bff817 	ldw	r2,-32(fp)
10017598:	1885c83a 	sub	r2,r3,r2
1001759c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100175a0:	e0bff617 	ldw	r2,-40(fp)
100175a4:	10001e26 	beq	r2,zero,10017620 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
100175a8:	e0fffe17 	ldw	r3,-8(fp)
100175ac:	e0bff617 	ldw	r2,-40(fp)
100175b0:	1880022e 	bgeu	r3,r2,100175bc <altera_avalon_jtag_uart_read+0x90>
        n = space;
100175b4:	e0bffe17 	ldw	r2,-8(fp)
100175b8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100175bc:	e0bffc17 	ldw	r2,-16(fp)
100175c0:	10c00e04 	addi	r3,r2,56
100175c4:	e0bff817 	ldw	r2,-32(fp)
100175c8:	1885883a 	add	r2,r3,r2
100175cc:	e1bff617 	ldw	r6,-40(fp)
100175d0:	100b883a 	mov	r5,r2
100175d4:	e13ff517 	ldw	r4,-44(fp)
100175d8:	000be2c0 	call	1000be2c <memcpy>
      ptr   += n;
100175dc:	e0fff517 	ldw	r3,-44(fp)
100175e0:	e0bff617 	ldw	r2,-40(fp)
100175e4:	1885883a 	add	r2,r3,r2
100175e8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
100175ec:	e0fffe17 	ldw	r3,-8(fp)
100175f0:	e0bff617 	ldw	r2,-40(fp)
100175f4:	1885c83a 	sub	r2,r3,r2
100175f8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100175fc:	e0fff817 	ldw	r3,-32(fp)
10017600:	e0bff617 	ldw	r2,-40(fp)
10017604:	1885883a 	add	r2,r3,r2
10017608:	10c1ffcc 	andi	r3,r2,2047
1001760c:	e0bffc17 	ldw	r2,-16(fp)
10017610:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10017614:	e0bffe17 	ldw	r2,-8(fp)
10017618:	00bfcf16 	blt	zero,r2,10017558 <__alt_data_end+0xf8017558>
1001761c:	00000106 	br	10017624 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10017620:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10017624:	e0fff517 	ldw	r3,-44(fp)
10017628:	e0bffd17 	ldw	r2,-12(fp)
1001762c:	1880141e 	bne	r3,r2,10017680 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10017630:	e0bfff17 	ldw	r2,-4(fp)
10017634:	1090000c 	andi	r2,r2,16384
10017638:	1000131e 	bne	r2,zero,10017688 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1001763c:	0001883a 	nop
10017640:	e0bffc17 	ldw	r2,-16(fp)
10017644:	10c00a17 	ldw	r3,40(r2)
10017648:	e0bff717 	ldw	r2,-36(fp)
1001764c:	1880051e 	bne	r3,r2,10017664 <altera_avalon_jtag_uart_read+0x138>
10017650:	e0bffc17 	ldw	r2,-16(fp)
10017654:	10c00917 	ldw	r3,36(r2)
10017658:	e0bffc17 	ldw	r2,-16(fp)
1001765c:	10800117 	ldw	r2,4(r2)
10017660:	18bff736 	bltu	r3,r2,10017640 <__alt_data_end+0xf8017640>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10017664:	e0bffc17 	ldw	r2,-16(fp)
10017668:	10c00a17 	ldw	r3,40(r2)
1001766c:	e0bff717 	ldw	r2,-36(fp)
10017670:	18800726 	beq	r3,r2,10017690 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10017674:	e0bffe17 	ldw	r2,-8(fp)
10017678:	00bfb716 	blt	zero,r2,10017558 <__alt_data_end+0xf8017558>
1001767c:	00000506 	br	10017694 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10017680:	0001883a 	nop
10017684:	00000306 	br	10017694 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10017688:	0001883a 	nop
1001768c:	00000106 	br	10017694 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10017690:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10017694:	e0fff517 	ldw	r3,-44(fp)
10017698:	e0bffd17 	ldw	r2,-12(fp)
1001769c:	18801826 	beq	r3,r2,10017700 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100176a0:	0005303a 	rdctl	r2,status
100176a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100176a8:	e0fffb17 	ldw	r3,-20(fp)
100176ac:	00bfff84 	movi	r2,-2
100176b0:	1884703a 	and	r2,r3,r2
100176b4:	1001703a 	wrctl	status,r2
  
  return context;
100176b8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100176bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100176c0:	e0bffc17 	ldw	r2,-16(fp)
100176c4:	10800817 	ldw	r2,32(r2)
100176c8:	10c00054 	ori	r3,r2,1
100176cc:	e0bffc17 	ldw	r2,-16(fp)
100176d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100176d4:	e0bffc17 	ldw	r2,-16(fp)
100176d8:	10800017 	ldw	r2,0(r2)
100176dc:	10800104 	addi	r2,r2,4
100176e0:	1007883a 	mov	r3,r2
100176e4:	e0bffc17 	ldw	r2,-16(fp)
100176e8:	10800817 	ldw	r2,32(r2)
100176ec:	18800035 	stwio	r2,0(r3)
100176f0:	e0bffa17 	ldw	r2,-24(fp)
100176f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100176f8:	e0bff917 	ldw	r2,-28(fp)
100176fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10017700:	e0fff517 	ldw	r3,-44(fp)
10017704:	e0bffd17 	ldw	r2,-12(fp)
10017708:	18800426 	beq	r3,r2,1001771c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1001770c:	e0fff517 	ldw	r3,-44(fp)
10017710:	e0bffd17 	ldw	r2,-12(fp)
10017714:	1885c83a 	sub	r2,r3,r2
10017718:	00000606 	br	10017734 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1001771c:	e0bfff17 	ldw	r2,-4(fp)
10017720:	1090000c 	andi	r2,r2,16384
10017724:	10000226 	beq	r2,zero,10017730 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10017728:	00bffd44 	movi	r2,-11
1001772c:	00000106 	br	10017734 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10017730:	00bffec4 	movi	r2,-5
}
10017734:	e037883a 	mov	sp,fp
10017738:	dfc00117 	ldw	ra,4(sp)
1001773c:	df000017 	ldw	fp,0(sp)
10017740:	dec00204 	addi	sp,sp,8
10017744:	f800283a 	ret

10017748 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10017748:	defff304 	addi	sp,sp,-52
1001774c:	dfc00c15 	stw	ra,48(sp)
10017750:	df000b15 	stw	fp,44(sp)
10017754:	df000b04 	addi	fp,sp,44
10017758:	e13ffc15 	stw	r4,-16(fp)
1001775c:	e17ffd15 	stw	r5,-12(fp)
10017760:	e1bffe15 	stw	r6,-8(fp)
10017764:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10017768:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1001776c:	e0bffd17 	ldw	r2,-12(fp)
10017770:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10017774:	00003706 	br	10017854 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10017778:	e0bffc17 	ldw	r2,-16(fp)
1001777c:	10800c17 	ldw	r2,48(r2)
10017780:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10017784:	e0bffc17 	ldw	r2,-16(fp)
10017788:	10800d17 	ldw	r2,52(r2)
1001778c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10017790:	e0fff917 	ldw	r3,-28(fp)
10017794:	e0bff517 	ldw	r2,-44(fp)
10017798:	1880062e 	bgeu	r3,r2,100177b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1001779c:	e0fff517 	ldw	r3,-44(fp)
100177a0:	e0bff917 	ldw	r2,-28(fp)
100177a4:	1885c83a 	sub	r2,r3,r2
100177a8:	10bfffc4 	addi	r2,r2,-1
100177ac:	e0bff615 	stw	r2,-40(fp)
100177b0:	00000b06 	br	100177e0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100177b4:	e0bff517 	ldw	r2,-44(fp)
100177b8:	10000526 	beq	r2,zero,100177d0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
100177bc:	00c20004 	movi	r3,2048
100177c0:	e0bff917 	ldw	r2,-28(fp)
100177c4:	1885c83a 	sub	r2,r3,r2
100177c8:	e0bff615 	stw	r2,-40(fp)
100177cc:	00000406 	br	100177e0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100177d0:	00c1ffc4 	movi	r3,2047
100177d4:	e0bff917 	ldw	r2,-28(fp)
100177d8:	1885c83a 	sub	r2,r3,r2
100177dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100177e0:	e0bff617 	ldw	r2,-40(fp)
100177e4:	10001e26 	beq	r2,zero,10017860 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
100177e8:	e0fffe17 	ldw	r3,-8(fp)
100177ec:	e0bff617 	ldw	r2,-40(fp)
100177f0:	1880022e 	bgeu	r3,r2,100177fc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
100177f4:	e0bffe17 	ldw	r2,-8(fp)
100177f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100177fc:	e0bffc17 	ldw	r2,-16(fp)
10017800:	10c20e04 	addi	r3,r2,2104
10017804:	e0bff917 	ldw	r2,-28(fp)
10017808:	1885883a 	add	r2,r3,r2
1001780c:	e1bff617 	ldw	r6,-40(fp)
10017810:	e17ffd17 	ldw	r5,-12(fp)
10017814:	1009883a 	mov	r4,r2
10017818:	000be2c0 	call	1000be2c <memcpy>
      ptr   += n;
1001781c:	e0fffd17 	ldw	r3,-12(fp)
10017820:	e0bff617 	ldw	r2,-40(fp)
10017824:	1885883a 	add	r2,r3,r2
10017828:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1001782c:	e0fffe17 	ldw	r3,-8(fp)
10017830:	e0bff617 	ldw	r2,-40(fp)
10017834:	1885c83a 	sub	r2,r3,r2
10017838:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001783c:	e0fff917 	ldw	r3,-28(fp)
10017840:	e0bff617 	ldw	r2,-40(fp)
10017844:	1885883a 	add	r2,r3,r2
10017848:	10c1ffcc 	andi	r3,r2,2047
1001784c:	e0bffc17 	ldw	r2,-16(fp)
10017850:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10017854:	e0bffe17 	ldw	r2,-8(fp)
10017858:	00bfc716 	blt	zero,r2,10017778 <__alt_data_end+0xf8017778>
1001785c:	00000106 	br	10017864 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10017860:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10017864:	0005303a 	rdctl	r2,status
10017868:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001786c:	e0fffb17 	ldw	r3,-20(fp)
10017870:	00bfff84 	movi	r2,-2
10017874:	1884703a 	and	r2,r3,r2
10017878:	1001703a 	wrctl	status,r2
  
  return context;
1001787c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10017880:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10017884:	e0bffc17 	ldw	r2,-16(fp)
10017888:	10800817 	ldw	r2,32(r2)
1001788c:	10c00094 	ori	r3,r2,2
10017890:	e0bffc17 	ldw	r2,-16(fp)
10017894:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10017898:	e0bffc17 	ldw	r2,-16(fp)
1001789c:	10800017 	ldw	r2,0(r2)
100178a0:	10800104 	addi	r2,r2,4
100178a4:	1007883a 	mov	r3,r2
100178a8:	e0bffc17 	ldw	r2,-16(fp)
100178ac:	10800817 	ldw	r2,32(r2)
100178b0:	18800035 	stwio	r2,0(r3)
100178b4:	e0bffa17 	ldw	r2,-24(fp)
100178b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100178bc:	e0bff817 	ldw	r2,-32(fp)
100178c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
100178c4:	e0bffe17 	ldw	r2,-8(fp)
100178c8:	0080100e 	bge	zero,r2,1001790c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
100178cc:	e0bfff17 	ldw	r2,-4(fp)
100178d0:	1090000c 	andi	r2,r2,16384
100178d4:	1000101e 	bne	r2,zero,10017918 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
100178d8:	0001883a 	nop
100178dc:	e0bffc17 	ldw	r2,-16(fp)
100178e0:	10c00d17 	ldw	r3,52(r2)
100178e4:	e0bff517 	ldw	r2,-44(fp)
100178e8:	1880051e 	bne	r3,r2,10017900 <altera_avalon_jtag_uart_write+0x1b8>
100178ec:	e0bffc17 	ldw	r2,-16(fp)
100178f0:	10c00917 	ldw	r3,36(r2)
100178f4:	e0bffc17 	ldw	r2,-16(fp)
100178f8:	10800117 	ldw	r2,4(r2)
100178fc:	18bff736 	bltu	r3,r2,100178dc <__alt_data_end+0xf80178dc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10017900:	e0bffc17 	ldw	r2,-16(fp)
10017904:	10800917 	ldw	r2,36(r2)
10017908:	1000051e 	bne	r2,zero,10017920 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1001790c:	e0bffe17 	ldw	r2,-8(fp)
10017910:	00bfd016 	blt	zero,r2,10017854 <__alt_data_end+0xf8017854>
10017914:	00000306 	br	10017924 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10017918:	0001883a 	nop
1001791c:	00000106 	br	10017924 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10017920:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10017924:	e0fffd17 	ldw	r3,-12(fp)
10017928:	e0bff717 	ldw	r2,-36(fp)
1001792c:	18800426 	beq	r3,r2,10017940 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10017930:	e0fffd17 	ldw	r3,-12(fp)
10017934:	e0bff717 	ldw	r2,-36(fp)
10017938:	1885c83a 	sub	r2,r3,r2
1001793c:	00000606 	br	10017958 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10017940:	e0bfff17 	ldw	r2,-4(fp)
10017944:	1090000c 	andi	r2,r2,16384
10017948:	10000226 	beq	r2,zero,10017954 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1001794c:	00bffd44 	movi	r2,-11
10017950:	00000106 	br	10017958 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10017954:	00bffec4 	movi	r2,-5
}
10017958:	e037883a 	mov	sp,fp
1001795c:	dfc00117 	ldw	ra,4(sp)
10017960:	df000017 	ldw	fp,0(sp)
10017964:	dec00204 	addi	sp,sp,8
10017968:	f800283a 	ret

1001796c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1001796c:	defff504 	addi	sp,sp,-44
10017970:	df000a15 	stw	fp,40(sp)
10017974:	df000a04 	addi	fp,sp,40
10017978:	e13ffc15 	stw	r4,-16(fp)
1001797c:	e17ffd15 	stw	r5,-12(fp)
10017980:	e1bffe15 	stw	r6,-8(fp)
10017984:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10017988:	e03ff615 	stw	zero,-40(fp)
1001798c:	d0a80217 	ldw	r2,-24568(gp)
  
  if (alt_ticks_per_second ())
10017990:	10003c26 	beq	r2,zero,10017a84 <alt_alarm_start+0x118>
  {
    if (alarm)
10017994:	e0bffc17 	ldw	r2,-16(fp)
10017998:	10003826 	beq	r2,zero,10017a7c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1001799c:	e0bffc17 	ldw	r2,-16(fp)
100179a0:	e0fffe17 	ldw	r3,-8(fp)
100179a4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100179a8:	e0bffc17 	ldw	r2,-16(fp)
100179ac:	e0ffff17 	ldw	r3,-4(fp)
100179b0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100179b4:	0005303a 	rdctl	r2,status
100179b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100179bc:	e0fff917 	ldw	r3,-28(fp)
100179c0:	00bfff84 	movi	r2,-2
100179c4:	1884703a 	and	r2,r3,r2
100179c8:	1001703a 	wrctl	status,r2
  
  return context;
100179cc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
100179d0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100179d4:	d0a80317 	ldw	r2,-24564(gp)
      
      current_nticks = alt_nticks();
100179d8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100179dc:	e0fffd17 	ldw	r3,-12(fp)
100179e0:	e0bff617 	ldw	r2,-40(fp)
100179e4:	1885883a 	add	r2,r3,r2
100179e8:	10c00044 	addi	r3,r2,1
100179ec:	e0bffc17 	ldw	r2,-16(fp)
100179f0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100179f4:	e0bffc17 	ldw	r2,-16(fp)
100179f8:	10c00217 	ldw	r3,8(r2)
100179fc:	e0bff617 	ldw	r2,-40(fp)
10017a00:	1880042e 	bgeu	r3,r2,10017a14 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10017a04:	e0bffc17 	ldw	r2,-16(fp)
10017a08:	00c00044 	movi	r3,1
10017a0c:	10c00405 	stb	r3,16(r2)
10017a10:	00000206 	br	10017a1c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10017a14:	e0bffc17 	ldw	r2,-16(fp)
10017a18:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10017a1c:	e0bffc17 	ldw	r2,-16(fp)
10017a20:	d0e01504 	addi	r3,gp,-32684
10017a24:	e0fffa15 	stw	r3,-24(fp)
10017a28:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10017a2c:	e0bffb17 	ldw	r2,-20(fp)
10017a30:	e0fffa17 	ldw	r3,-24(fp)
10017a34:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10017a38:	e0bffa17 	ldw	r2,-24(fp)
10017a3c:	10c00017 	ldw	r3,0(r2)
10017a40:	e0bffb17 	ldw	r2,-20(fp)
10017a44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10017a48:	e0bffa17 	ldw	r2,-24(fp)
10017a4c:	10800017 	ldw	r2,0(r2)
10017a50:	e0fffb17 	ldw	r3,-20(fp)
10017a54:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10017a58:	e0bffa17 	ldw	r2,-24(fp)
10017a5c:	e0fffb17 	ldw	r3,-20(fp)
10017a60:	10c00015 	stw	r3,0(r2)
10017a64:	e0bff817 	ldw	r2,-32(fp)
10017a68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10017a6c:	e0bff717 	ldw	r2,-36(fp)
10017a70:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10017a74:	0005883a 	mov	r2,zero
10017a78:	00000306 	br	10017a88 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10017a7c:	00bffa84 	movi	r2,-22
10017a80:	00000106 	br	10017a88 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10017a84:	00bfde84 	movi	r2,-134
  }
}
10017a88:	e037883a 	mov	sp,fp
10017a8c:	df000017 	ldw	fp,0(sp)
10017a90:	dec00104 	addi	sp,sp,4
10017a94:	f800283a 	ret

10017a98 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10017a98:	defffa04 	addi	sp,sp,-24
10017a9c:	dfc00515 	stw	ra,20(sp)
10017aa0:	df000415 	stw	fp,16(sp)
10017aa4:	df000404 	addi	fp,sp,16
10017aa8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10017aac:	00800244 	movi	r2,9
10017ab0:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10017ab4:	014003f4 	movhi	r5,15
10017ab8:	29509004 	addi	r5,r5,16960
10017abc:	e13ffd17 	ldw	r4,-12(fp)
10017ac0:	00096fc0 	call	100096fc <__mulsi3>
10017ac4:	100b883a 	mov	r5,r2
10017ac8:	0100bef4 	movhi	r4,763
10017acc:	213c2004 	addi	r4,r4,-3968
10017ad0:	00096400 	call	10009640 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10017ad4:	100b883a 	mov	r5,r2
10017ad8:	01200034 	movhi	r4,32768
10017adc:	213fffc4 	addi	r4,r4,-1
10017ae0:	00096400 	call	10009640 <__udivsi3>
10017ae4:	100b883a 	mov	r5,r2
10017ae8:	e13fff17 	ldw	r4,-4(fp)
10017aec:	00096400 	call	10009640 <__udivsi3>
10017af0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10017af4:	e0bffe17 	ldw	r2,-8(fp)
10017af8:	10002a26 	beq	r2,zero,10017ba4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10017afc:	e03ffc15 	stw	zero,-16(fp)
10017b00:	00001706 	br	10017b60 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10017b04:	00a00034 	movhi	r2,32768
10017b08:	10bfffc4 	addi	r2,r2,-1
10017b0c:	10bfffc4 	addi	r2,r2,-1
10017b10:	103ffe1e 	bne	r2,zero,10017b0c <__alt_data_end+0xf8017b0c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10017b14:	014003f4 	movhi	r5,15
10017b18:	29509004 	addi	r5,r5,16960
10017b1c:	e13ffd17 	ldw	r4,-12(fp)
10017b20:	00096fc0 	call	100096fc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10017b24:	100b883a 	mov	r5,r2
10017b28:	0100bef4 	movhi	r4,763
10017b2c:	213c2004 	addi	r4,r4,-3968
10017b30:	00096400 	call	10009640 <__udivsi3>
10017b34:	100b883a 	mov	r5,r2
10017b38:	01200034 	movhi	r4,32768
10017b3c:	213fffc4 	addi	r4,r4,-1
10017b40:	00096400 	call	10009640 <__udivsi3>
10017b44:	1007883a 	mov	r3,r2
10017b48:	e0bfff17 	ldw	r2,-4(fp)
10017b4c:	10c5c83a 	sub	r2,r2,r3
10017b50:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10017b54:	e0bffc17 	ldw	r2,-16(fp)
10017b58:	10800044 	addi	r2,r2,1
10017b5c:	e0bffc15 	stw	r2,-16(fp)
10017b60:	e0fffc17 	ldw	r3,-16(fp)
10017b64:	e0bffe17 	ldw	r2,-8(fp)
10017b68:	18bfe616 	blt	r3,r2,10017b04 <__alt_data_end+0xf8017b04>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10017b6c:	014003f4 	movhi	r5,15
10017b70:	29509004 	addi	r5,r5,16960
10017b74:	e13ffd17 	ldw	r4,-12(fp)
10017b78:	00096fc0 	call	100096fc <__mulsi3>
10017b7c:	100b883a 	mov	r5,r2
10017b80:	0100bef4 	movhi	r4,763
10017b84:	213c2004 	addi	r4,r4,-3968
10017b88:	00096400 	call	10009640 <__udivsi3>
10017b8c:	e17fff17 	ldw	r5,-4(fp)
10017b90:	1009883a 	mov	r4,r2
10017b94:	00096fc0 	call	100096fc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10017b98:	10bfffc4 	addi	r2,r2,-1
10017b9c:	103ffe1e 	bne	r2,zero,10017b98 <__alt_data_end+0xf8017b98>
10017ba0:	00000d06 	br	10017bd8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10017ba4:	014003f4 	movhi	r5,15
10017ba8:	29509004 	addi	r5,r5,16960
10017bac:	e13ffd17 	ldw	r4,-12(fp)
10017bb0:	00096fc0 	call	100096fc <__mulsi3>
10017bb4:	100b883a 	mov	r5,r2
10017bb8:	0100bef4 	movhi	r4,763
10017bbc:	213c2004 	addi	r4,r4,-3968
10017bc0:	00096400 	call	10009640 <__udivsi3>
10017bc4:	e17fff17 	ldw	r5,-4(fp)
10017bc8:	1009883a 	mov	r4,r2
10017bcc:	00096fc0 	call	100096fc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10017bd0:	10bfffc4 	addi	r2,r2,-1
10017bd4:	00bffe16 	blt	zero,r2,10017bd0 <__alt_data_end+0xf8017bd0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10017bd8:	0005883a 	mov	r2,zero
}
10017bdc:	e037883a 	mov	sp,fp
10017be0:	dfc00117 	ldw	ra,4(sp)
10017be4:	df000017 	ldw	fp,0(sp)
10017be8:	dec00204 	addi	sp,sp,8
10017bec:	f800283a 	ret

10017bf0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10017bf0:	deffff04 	addi	sp,sp,-4
10017bf4:	df000015 	stw	fp,0(sp)
10017bf8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10017bfc:	0001883a 	nop
10017c00:	e037883a 	mov	sp,fp
10017c04:	df000017 	ldw	fp,0(sp)
10017c08:	dec00104 	addi	sp,sp,4
10017c0c:	f800283a 	ret

10017c10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10017c10:	defffe04 	addi	sp,sp,-8
10017c14:	dfc00115 	stw	ra,4(sp)
10017c18:	df000015 	stw	fp,0(sp)
10017c1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10017c20:	d0a01217 	ldw	r2,-32696(gp)
10017c24:	10000326 	beq	r2,zero,10017c34 <alt_get_errno+0x24>
10017c28:	d0a01217 	ldw	r2,-32696(gp)
10017c2c:	103ee83a 	callr	r2
10017c30:	00000106 	br	10017c38 <alt_get_errno+0x28>
10017c34:	d0a7fd04 	addi	r2,gp,-24588
}
10017c38:	e037883a 	mov	sp,fp
10017c3c:	dfc00117 	ldw	ra,4(sp)
10017c40:	df000017 	ldw	fp,0(sp)
10017c44:	dec00204 	addi	sp,sp,8
10017c48:	f800283a 	ret

10017c4c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10017c4c:	defffa04 	addi	sp,sp,-24
10017c50:	dfc00515 	stw	ra,20(sp)
10017c54:	df000415 	stw	fp,16(sp)
10017c58:	df000404 	addi	fp,sp,16
10017c5c:	e13ffe15 	stw	r4,-8(fp)
10017c60:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10017c64:	e0bffe17 	ldw	r2,-8(fp)
10017c68:	10000326 	beq	r2,zero,10017c78 <alt_dev_llist_insert+0x2c>
10017c6c:	e0bffe17 	ldw	r2,-8(fp)
10017c70:	10800217 	ldw	r2,8(r2)
10017c74:	1000061e 	bne	r2,zero,10017c90 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10017c78:	0017c100 	call	10017c10 <alt_get_errno>
10017c7c:	1007883a 	mov	r3,r2
10017c80:	00800584 	movi	r2,22
10017c84:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10017c88:	00bffa84 	movi	r2,-22
10017c8c:	00001306 	br	10017cdc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10017c90:	e0bffe17 	ldw	r2,-8(fp)
10017c94:	e0ffff17 	ldw	r3,-4(fp)
10017c98:	e0fffc15 	stw	r3,-16(fp)
10017c9c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10017ca0:	e0bffd17 	ldw	r2,-12(fp)
10017ca4:	e0fffc17 	ldw	r3,-16(fp)
10017ca8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10017cac:	e0bffc17 	ldw	r2,-16(fp)
10017cb0:	10c00017 	ldw	r3,0(r2)
10017cb4:	e0bffd17 	ldw	r2,-12(fp)
10017cb8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10017cbc:	e0bffc17 	ldw	r2,-16(fp)
10017cc0:	10800017 	ldw	r2,0(r2)
10017cc4:	e0fffd17 	ldw	r3,-12(fp)
10017cc8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10017ccc:	e0bffc17 	ldw	r2,-16(fp)
10017cd0:	e0fffd17 	ldw	r3,-12(fp)
10017cd4:	10c00015 	stw	r3,0(r2)

  return 0;  
10017cd8:	0005883a 	mov	r2,zero
}
10017cdc:	e037883a 	mov	sp,fp
10017ce0:	dfc00117 	ldw	ra,4(sp)
10017ce4:	df000017 	ldw	fp,0(sp)
10017ce8:	dec00204 	addi	sp,sp,8
10017cec:	f800283a 	ret

10017cf0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10017cf0:	defffd04 	addi	sp,sp,-12
10017cf4:	dfc00215 	stw	ra,8(sp)
10017cf8:	df000115 	stw	fp,4(sp)
10017cfc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10017d00:	008400b4 	movhi	r2,4098
10017d04:	10a32904 	addi	r2,r2,-29532
10017d08:	e0bfff15 	stw	r2,-4(fp)
10017d0c:	00000606 	br	10017d28 <_do_ctors+0x38>
        (*ctor) (); 
10017d10:	e0bfff17 	ldw	r2,-4(fp)
10017d14:	10800017 	ldw	r2,0(r2)
10017d18:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10017d1c:	e0bfff17 	ldw	r2,-4(fp)
10017d20:	10bfff04 	addi	r2,r2,-4
10017d24:	e0bfff15 	stw	r2,-4(fp)
10017d28:	e0ffff17 	ldw	r3,-4(fp)
10017d2c:	008400b4 	movhi	r2,4098
10017d30:	10a32a04 	addi	r2,r2,-29528
10017d34:	18bff62e 	bgeu	r3,r2,10017d10 <__alt_data_end+0xf8017d10>
        (*ctor) (); 
}
10017d38:	0001883a 	nop
10017d3c:	e037883a 	mov	sp,fp
10017d40:	dfc00117 	ldw	ra,4(sp)
10017d44:	df000017 	ldw	fp,0(sp)
10017d48:	dec00204 	addi	sp,sp,8
10017d4c:	f800283a 	ret

10017d50 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10017d50:	defffd04 	addi	sp,sp,-12
10017d54:	dfc00215 	stw	ra,8(sp)
10017d58:	df000115 	stw	fp,4(sp)
10017d5c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10017d60:	008400b4 	movhi	r2,4098
10017d64:	10a32904 	addi	r2,r2,-29532
10017d68:	e0bfff15 	stw	r2,-4(fp)
10017d6c:	00000606 	br	10017d88 <_do_dtors+0x38>
        (*dtor) (); 
10017d70:	e0bfff17 	ldw	r2,-4(fp)
10017d74:	10800017 	ldw	r2,0(r2)
10017d78:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10017d7c:	e0bfff17 	ldw	r2,-4(fp)
10017d80:	10bfff04 	addi	r2,r2,-4
10017d84:	e0bfff15 	stw	r2,-4(fp)
10017d88:	e0ffff17 	ldw	r3,-4(fp)
10017d8c:	008400b4 	movhi	r2,4098
10017d90:	10a32a04 	addi	r2,r2,-29528
10017d94:	18bff62e 	bgeu	r3,r2,10017d70 <__alt_data_end+0xf8017d70>
        (*dtor) (); 
}
10017d98:	0001883a 	nop
10017d9c:	e037883a 	mov	sp,fp
10017da0:	dfc00117 	ldw	ra,4(sp)
10017da4:	df000017 	ldw	fp,0(sp)
10017da8:	dec00204 	addi	sp,sp,8
10017dac:	f800283a 	ret

10017db0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10017db0:	deffff04 	addi	sp,sp,-4
10017db4:	df000015 	stw	fp,0(sp)
10017db8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10017dbc:	0001883a 	nop
10017dc0:	e037883a 	mov	sp,fp
10017dc4:	df000017 	ldw	fp,0(sp)
10017dc8:	dec00104 	addi	sp,sp,4
10017dcc:	f800283a 	ret

10017dd0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10017dd0:	defff904 	addi	sp,sp,-28
10017dd4:	dfc00615 	stw	ra,24(sp)
10017dd8:	df000515 	stw	fp,20(sp)
10017ddc:	df000504 	addi	fp,sp,20
10017de0:	e13ffc15 	stw	r4,-16(fp)
10017de4:	e17ffd15 	stw	r5,-12(fp)
10017de8:	e1bffe15 	stw	r6,-8(fp)
10017dec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10017df0:	e0800217 	ldw	r2,8(fp)
10017df4:	d8800015 	stw	r2,0(sp)
10017df8:	e1ffff17 	ldw	r7,-4(fp)
10017dfc:	e1bffe17 	ldw	r6,-8(fp)
10017e00:	e17ffd17 	ldw	r5,-12(fp)
10017e04:	e13ffc17 	ldw	r4,-16(fp)
10017e08:	0017f800 	call	10017f80 <alt_iic_isr_register>
}  
10017e0c:	e037883a 	mov	sp,fp
10017e10:	dfc00117 	ldw	ra,4(sp)
10017e14:	df000017 	ldw	fp,0(sp)
10017e18:	dec00204 	addi	sp,sp,8
10017e1c:	f800283a 	ret

10017e20 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10017e20:	defff904 	addi	sp,sp,-28
10017e24:	df000615 	stw	fp,24(sp)
10017e28:	df000604 	addi	fp,sp,24
10017e2c:	e13ffe15 	stw	r4,-8(fp)
10017e30:	e17fff15 	stw	r5,-4(fp)
10017e34:	e0bfff17 	ldw	r2,-4(fp)
10017e38:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10017e3c:	0005303a 	rdctl	r2,status
10017e40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10017e44:	e0fffb17 	ldw	r3,-20(fp)
10017e48:	00bfff84 	movi	r2,-2
10017e4c:	1884703a 	and	r2,r3,r2
10017e50:	1001703a 	wrctl	status,r2
  
  return context;
10017e54:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10017e58:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10017e5c:	00c00044 	movi	r3,1
10017e60:	e0bffa17 	ldw	r2,-24(fp)
10017e64:	1884983a 	sll	r2,r3,r2
10017e68:	1007883a 	mov	r3,r2
10017e6c:	d0a80117 	ldw	r2,-24572(gp)
10017e70:	1884b03a 	or	r2,r3,r2
10017e74:	d0a80115 	stw	r2,-24572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10017e78:	d0a80117 	ldw	r2,-24572(gp)
10017e7c:	100170fa 	wrctl	ienable,r2
10017e80:	e0bffc17 	ldw	r2,-16(fp)
10017e84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10017e88:	e0bffd17 	ldw	r2,-12(fp)
10017e8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10017e90:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10017e94:	0001883a 	nop
}
10017e98:	e037883a 	mov	sp,fp
10017e9c:	df000017 	ldw	fp,0(sp)
10017ea0:	dec00104 	addi	sp,sp,4
10017ea4:	f800283a 	ret

10017ea8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10017ea8:	defff904 	addi	sp,sp,-28
10017eac:	df000615 	stw	fp,24(sp)
10017eb0:	df000604 	addi	fp,sp,24
10017eb4:	e13ffe15 	stw	r4,-8(fp)
10017eb8:	e17fff15 	stw	r5,-4(fp)
10017ebc:	e0bfff17 	ldw	r2,-4(fp)
10017ec0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10017ec4:	0005303a 	rdctl	r2,status
10017ec8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10017ecc:	e0fffb17 	ldw	r3,-20(fp)
10017ed0:	00bfff84 	movi	r2,-2
10017ed4:	1884703a 	and	r2,r3,r2
10017ed8:	1001703a 	wrctl	status,r2
  
  return context;
10017edc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10017ee0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10017ee4:	00c00044 	movi	r3,1
10017ee8:	e0bffa17 	ldw	r2,-24(fp)
10017eec:	1884983a 	sll	r2,r3,r2
10017ef0:	0084303a 	nor	r2,zero,r2
10017ef4:	1007883a 	mov	r3,r2
10017ef8:	d0a80117 	ldw	r2,-24572(gp)
10017efc:	1884703a 	and	r2,r3,r2
10017f00:	d0a80115 	stw	r2,-24572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10017f04:	d0a80117 	ldw	r2,-24572(gp)
10017f08:	100170fa 	wrctl	ienable,r2
10017f0c:	e0bffc17 	ldw	r2,-16(fp)
10017f10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10017f14:	e0bffd17 	ldw	r2,-12(fp)
10017f18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10017f1c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10017f20:	0001883a 	nop
}
10017f24:	e037883a 	mov	sp,fp
10017f28:	df000017 	ldw	fp,0(sp)
10017f2c:	dec00104 	addi	sp,sp,4
10017f30:	f800283a 	ret

10017f34 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10017f34:	defffc04 	addi	sp,sp,-16
10017f38:	df000315 	stw	fp,12(sp)
10017f3c:	df000304 	addi	fp,sp,12
10017f40:	e13ffe15 	stw	r4,-8(fp)
10017f44:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10017f48:	000530fa 	rdctl	r2,ienable
10017f4c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10017f50:	00c00044 	movi	r3,1
10017f54:	e0bfff17 	ldw	r2,-4(fp)
10017f58:	1884983a 	sll	r2,r3,r2
10017f5c:	1007883a 	mov	r3,r2
10017f60:	e0bffd17 	ldw	r2,-12(fp)
10017f64:	1884703a 	and	r2,r3,r2
10017f68:	1004c03a 	cmpne	r2,r2,zero
10017f6c:	10803fcc 	andi	r2,r2,255
}
10017f70:	e037883a 	mov	sp,fp
10017f74:	df000017 	ldw	fp,0(sp)
10017f78:	dec00104 	addi	sp,sp,4
10017f7c:	f800283a 	ret

10017f80 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10017f80:	defff504 	addi	sp,sp,-44
10017f84:	dfc00a15 	stw	ra,40(sp)
10017f88:	df000915 	stw	fp,36(sp)
10017f8c:	df000904 	addi	fp,sp,36
10017f90:	e13ffc15 	stw	r4,-16(fp)
10017f94:	e17ffd15 	stw	r5,-12(fp)
10017f98:	e1bffe15 	stw	r6,-8(fp)
10017f9c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10017fa0:	00bffa84 	movi	r2,-22
10017fa4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10017fa8:	e0bffd17 	ldw	r2,-12(fp)
10017fac:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10017fb0:	e0bff817 	ldw	r2,-32(fp)
10017fb4:	10800808 	cmpgei	r2,r2,32
10017fb8:	1000271e 	bne	r2,zero,10018058 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10017fbc:	0005303a 	rdctl	r2,status
10017fc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10017fc4:	e0fffb17 	ldw	r3,-20(fp)
10017fc8:	00bfff84 	movi	r2,-2
10017fcc:	1884703a 	and	r2,r3,r2
10017fd0:	1001703a 	wrctl	status,r2
  
  return context;
10017fd4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10017fd8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10017fdc:	00840674 	movhi	r2,4121
10017fe0:	1092ea04 	addi	r2,r2,19368
10017fe4:	e0fff817 	ldw	r3,-32(fp)
10017fe8:	180690fa 	slli	r3,r3,3
10017fec:	10c5883a 	add	r2,r2,r3
10017ff0:	e0fffe17 	ldw	r3,-8(fp)
10017ff4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10017ff8:	00840674 	movhi	r2,4121
10017ffc:	1092ea04 	addi	r2,r2,19368
10018000:	e0fff817 	ldw	r3,-32(fp)
10018004:	180690fa 	slli	r3,r3,3
10018008:	10c5883a 	add	r2,r2,r3
1001800c:	10800104 	addi	r2,r2,4
10018010:	e0ffff17 	ldw	r3,-4(fp)
10018014:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10018018:	e0bffe17 	ldw	r2,-8(fp)
1001801c:	10000526 	beq	r2,zero,10018034 <alt_iic_isr_register+0xb4>
10018020:	e0bff817 	ldw	r2,-32(fp)
10018024:	100b883a 	mov	r5,r2
10018028:	e13ffc17 	ldw	r4,-16(fp)
1001802c:	0017e200 	call	10017e20 <alt_ic_irq_enable>
10018030:	00000406 	br	10018044 <alt_iic_isr_register+0xc4>
10018034:	e0bff817 	ldw	r2,-32(fp)
10018038:	100b883a 	mov	r5,r2
1001803c:	e13ffc17 	ldw	r4,-16(fp)
10018040:	0017ea80 	call	10017ea8 <alt_ic_irq_disable>
10018044:	e0bff715 	stw	r2,-36(fp)
10018048:	e0bffa17 	ldw	r2,-24(fp)
1001804c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10018050:	e0bff917 	ldw	r2,-28(fp)
10018054:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10018058:	e0bff717 	ldw	r2,-36(fp)
}
1001805c:	e037883a 	mov	sp,fp
10018060:	dfc00117 	ldw	ra,4(sp)
10018064:	df000017 	ldw	fp,0(sp)
10018068:	dec00204 	addi	sp,sp,8
1001806c:	f800283a 	ret

10018070 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10018070:	defff804 	addi	sp,sp,-32
10018074:	dfc00715 	stw	ra,28(sp)
10018078:	df000615 	stw	fp,24(sp)
1001807c:	dc000515 	stw	r16,20(sp)
10018080:	df000604 	addi	fp,sp,24
10018084:	e13ffb15 	stw	r4,-20(fp)
10018088:	e17ffc15 	stw	r5,-16(fp)
1001808c:	e1bffd15 	stw	r6,-12(fp)
10018090:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10018094:	e1bffe17 	ldw	r6,-8(fp)
10018098:	e17ffd17 	ldw	r5,-12(fp)
1001809c:	e13ffc17 	ldw	r4,-16(fp)
100180a0:	00182f80 	call	100182f8 <open>
100180a4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100180a8:	e0bffa17 	ldw	r2,-24(fp)
100180ac:	10002216 	blt	r2,zero,10018138 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100180b0:	040400b4 	movhi	r16,4098
100180b4:	84283d04 	addi	r16,r16,-24332
100180b8:	e0bffa17 	ldw	r2,-24(fp)
100180bc:	01400304 	movi	r5,12
100180c0:	1009883a 	mov	r4,r2
100180c4:	00096fc0 	call	100096fc <__mulsi3>
100180c8:	8085883a 	add	r2,r16,r2
100180cc:	10c00017 	ldw	r3,0(r2)
100180d0:	e0bffb17 	ldw	r2,-20(fp)
100180d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100180d8:	040400b4 	movhi	r16,4098
100180dc:	84283d04 	addi	r16,r16,-24332
100180e0:	e0bffa17 	ldw	r2,-24(fp)
100180e4:	01400304 	movi	r5,12
100180e8:	1009883a 	mov	r4,r2
100180ec:	00096fc0 	call	100096fc <__mulsi3>
100180f0:	8085883a 	add	r2,r16,r2
100180f4:	10800104 	addi	r2,r2,4
100180f8:	10c00017 	ldw	r3,0(r2)
100180fc:	e0bffb17 	ldw	r2,-20(fp)
10018100:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10018104:	040400b4 	movhi	r16,4098
10018108:	84283d04 	addi	r16,r16,-24332
1001810c:	e0bffa17 	ldw	r2,-24(fp)
10018110:	01400304 	movi	r5,12
10018114:	1009883a 	mov	r4,r2
10018118:	00096fc0 	call	100096fc <__mulsi3>
1001811c:	8085883a 	add	r2,r16,r2
10018120:	10800204 	addi	r2,r2,8
10018124:	10c00017 	ldw	r3,0(r2)
10018128:	e0bffb17 	ldw	r2,-20(fp)
1001812c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10018130:	e13ffa17 	ldw	r4,-24(fp)
10018134:	0016bac0 	call	10016bac <alt_release_fd>
  }
} 
10018138:	0001883a 	nop
1001813c:	e6ffff04 	addi	sp,fp,-4
10018140:	dfc00217 	ldw	ra,8(sp)
10018144:	df000117 	ldw	fp,4(sp)
10018148:	dc000017 	ldw	r16,0(sp)
1001814c:	dec00304 	addi	sp,sp,12
10018150:	f800283a 	ret

10018154 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10018154:	defffb04 	addi	sp,sp,-20
10018158:	dfc00415 	stw	ra,16(sp)
1001815c:	df000315 	stw	fp,12(sp)
10018160:	df000304 	addi	fp,sp,12
10018164:	e13ffd15 	stw	r4,-12(fp)
10018168:	e17ffe15 	stw	r5,-8(fp)
1001816c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10018170:	01c07fc4 	movi	r7,511
10018174:	01800044 	movi	r6,1
10018178:	e17ffd17 	ldw	r5,-12(fp)
1001817c:	010400b4 	movhi	r4,4098
10018180:	21284004 	addi	r4,r4,-24320
10018184:	00180700 	call	10018070 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10018188:	01c07fc4 	movi	r7,511
1001818c:	000d883a 	mov	r6,zero
10018190:	e17ffe17 	ldw	r5,-8(fp)
10018194:	010400b4 	movhi	r4,4098
10018198:	21283d04 	addi	r4,r4,-24332
1001819c:	00180700 	call	10018070 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
100181a0:	01c07fc4 	movi	r7,511
100181a4:	01800044 	movi	r6,1
100181a8:	e17fff17 	ldw	r5,-4(fp)
100181ac:	010400b4 	movhi	r4,4098
100181b0:	21284304 	addi	r4,r4,-24308
100181b4:	00180700 	call	10018070 <alt_open_fd>
}  
100181b8:	0001883a 	nop
100181bc:	e037883a 	mov	sp,fp
100181c0:	dfc00117 	ldw	ra,4(sp)
100181c4:	df000017 	ldw	fp,0(sp)
100181c8:	dec00204 	addi	sp,sp,8
100181cc:	f800283a 	ret

100181d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100181d0:	defffe04 	addi	sp,sp,-8
100181d4:	dfc00115 	stw	ra,4(sp)
100181d8:	df000015 	stw	fp,0(sp)
100181dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100181e0:	d0a01217 	ldw	r2,-32696(gp)
100181e4:	10000326 	beq	r2,zero,100181f4 <alt_get_errno+0x24>
100181e8:	d0a01217 	ldw	r2,-32696(gp)
100181ec:	103ee83a 	callr	r2
100181f0:	00000106 	br	100181f8 <alt_get_errno+0x28>
100181f4:	d0a7fd04 	addi	r2,gp,-24588
}
100181f8:	e037883a 	mov	sp,fp
100181fc:	dfc00117 	ldw	ra,4(sp)
10018200:	df000017 	ldw	fp,0(sp)
10018204:	dec00204 	addi	sp,sp,8
10018208:	f800283a 	ret

1001820c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1001820c:	defffb04 	addi	sp,sp,-20
10018210:	dfc00415 	stw	ra,16(sp)
10018214:	df000315 	stw	fp,12(sp)
10018218:	dc000215 	stw	r16,8(sp)
1001821c:	df000304 	addi	fp,sp,12
10018220:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10018224:	e0bffe17 	ldw	r2,-8(fp)
10018228:	10800217 	ldw	r2,8(r2)
1001822c:	10d00034 	orhi	r3,r2,16384
10018230:	e0bffe17 	ldw	r2,-8(fp)
10018234:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10018238:	e03ffd15 	stw	zero,-12(fp)
1001823c:	00002306 	br	100182cc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10018240:	040400b4 	movhi	r16,4098
10018244:	84283d04 	addi	r16,r16,-24332
10018248:	e0bffd17 	ldw	r2,-12(fp)
1001824c:	01400304 	movi	r5,12
10018250:	1009883a 	mov	r4,r2
10018254:	00096fc0 	call	100096fc <__mulsi3>
10018258:	8085883a 	add	r2,r16,r2
1001825c:	10c00017 	ldw	r3,0(r2)
10018260:	e0bffe17 	ldw	r2,-8(fp)
10018264:	10800017 	ldw	r2,0(r2)
10018268:	1880151e 	bne	r3,r2,100182c0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1001826c:	040400b4 	movhi	r16,4098
10018270:	84283d04 	addi	r16,r16,-24332
10018274:	e0bffd17 	ldw	r2,-12(fp)
10018278:	01400304 	movi	r5,12
1001827c:	1009883a 	mov	r4,r2
10018280:	00096fc0 	call	100096fc <__mulsi3>
10018284:	8085883a 	add	r2,r16,r2
10018288:	10800204 	addi	r2,r2,8
1001828c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10018290:	10000b0e 	bge	r2,zero,100182c0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10018294:	01400304 	movi	r5,12
10018298:	e13ffd17 	ldw	r4,-12(fp)
1001829c:	00096fc0 	call	100096fc <__mulsi3>
100182a0:	1007883a 	mov	r3,r2
100182a4:	008400b4 	movhi	r2,4098
100182a8:	10a83d04 	addi	r2,r2,-24332
100182ac:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100182b0:	e0bffe17 	ldw	r2,-8(fp)
100182b4:	18800226 	beq	r3,r2,100182c0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100182b8:	00bffcc4 	movi	r2,-13
100182bc:	00000806 	br	100182e0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100182c0:	e0bffd17 	ldw	r2,-12(fp)
100182c4:	10800044 	addi	r2,r2,1
100182c8:	e0bffd15 	stw	r2,-12(fp)
100182cc:	d0a01117 	ldw	r2,-32700(gp)
100182d0:	1007883a 	mov	r3,r2
100182d4:	e0bffd17 	ldw	r2,-12(fp)
100182d8:	18bfd92e 	bgeu	r3,r2,10018240 <__alt_data_end+0xf8018240>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100182dc:	0005883a 	mov	r2,zero
}
100182e0:	e6ffff04 	addi	sp,fp,-4
100182e4:	dfc00217 	ldw	ra,8(sp)
100182e8:	df000117 	ldw	fp,4(sp)
100182ec:	dc000017 	ldw	r16,0(sp)
100182f0:	dec00304 	addi	sp,sp,12
100182f4:	f800283a 	ret

100182f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100182f8:	defff604 	addi	sp,sp,-40
100182fc:	dfc00915 	stw	ra,36(sp)
10018300:	df000815 	stw	fp,32(sp)
10018304:	df000804 	addi	fp,sp,32
10018308:	e13ffd15 	stw	r4,-12(fp)
1001830c:	e17ffe15 	stw	r5,-8(fp)
10018310:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10018314:	00bfffc4 	movi	r2,-1
10018318:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1001831c:	00bffb44 	movi	r2,-19
10018320:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10018324:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10018328:	d1600f04 	addi	r5,gp,-32708
1001832c:	e13ffd17 	ldw	r4,-12(fp)
10018330:	001861c0 	call	1001861c <alt_find_dev>
10018334:	e0bff815 	stw	r2,-32(fp)
10018338:	e0bff817 	ldw	r2,-32(fp)
1001833c:	1000051e 	bne	r2,zero,10018354 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10018340:	e13ffd17 	ldw	r4,-12(fp)
10018344:	00186ac0 	call	100186ac <alt_find_file>
10018348:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1001834c:	00800044 	movi	r2,1
10018350:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10018354:	e0bff817 	ldw	r2,-32(fp)
10018358:	10002b26 	beq	r2,zero,10018408 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
1001835c:	e13ff817 	ldw	r4,-32(fp)
10018360:	00187b40 	call	100187b4 <alt_get_fd>
10018364:	e0bff915 	stw	r2,-28(fp)
10018368:	e0bff917 	ldw	r2,-28(fp)
1001836c:	1000030e 	bge	r2,zero,1001837c <open+0x84>
    {
      status = index;
10018370:	e0bff917 	ldw	r2,-28(fp)
10018374:	e0bffa15 	stw	r2,-24(fp)
10018378:	00002506 	br	10018410 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
1001837c:	01400304 	movi	r5,12
10018380:	e13ff917 	ldw	r4,-28(fp)
10018384:	00096fc0 	call	100096fc <__mulsi3>
10018388:	1007883a 	mov	r3,r2
1001838c:	008400b4 	movhi	r2,4098
10018390:	10a83d04 	addi	r2,r2,-24332
10018394:	1885883a 	add	r2,r3,r2
10018398:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1001839c:	e0fffe17 	ldw	r3,-8(fp)
100183a0:	00900034 	movhi	r2,16384
100183a4:	10bfffc4 	addi	r2,r2,-1
100183a8:	1886703a 	and	r3,r3,r2
100183ac:	e0bffc17 	ldw	r2,-16(fp)
100183b0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100183b4:	e0bffb17 	ldw	r2,-20(fp)
100183b8:	1000051e 	bne	r2,zero,100183d0 <open+0xd8>
100183bc:	e13ffc17 	ldw	r4,-16(fp)
100183c0:	001820c0 	call	1001820c <alt_file_locked>
100183c4:	e0bffa15 	stw	r2,-24(fp)
100183c8:	e0bffa17 	ldw	r2,-24(fp)
100183cc:	10001016 	blt	r2,zero,10018410 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100183d0:	e0bff817 	ldw	r2,-32(fp)
100183d4:	10800317 	ldw	r2,12(r2)
100183d8:	10000826 	beq	r2,zero,100183fc <open+0x104>
100183dc:	e0bff817 	ldw	r2,-32(fp)
100183e0:	10800317 	ldw	r2,12(r2)
100183e4:	e1ffff17 	ldw	r7,-4(fp)
100183e8:	e1bffe17 	ldw	r6,-8(fp)
100183ec:	e17ffd17 	ldw	r5,-12(fp)
100183f0:	e13ffc17 	ldw	r4,-16(fp)
100183f4:	103ee83a 	callr	r2
100183f8:	00000106 	br	10018400 <open+0x108>
100183fc:	0005883a 	mov	r2,zero
10018400:	e0bffa15 	stw	r2,-24(fp)
10018404:	00000206 	br	10018410 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10018408:	00bffb44 	movi	r2,-19
1001840c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10018410:	e0bffa17 	ldw	r2,-24(fp)
10018414:	1000090e 	bge	r2,zero,1001843c <open+0x144>
  {
    alt_release_fd (index);  
10018418:	e13ff917 	ldw	r4,-28(fp)
1001841c:	0016bac0 	call	10016bac <alt_release_fd>
    ALT_ERRNO = -status;
10018420:	00181d00 	call	100181d0 <alt_get_errno>
10018424:	1007883a 	mov	r3,r2
10018428:	e0bffa17 	ldw	r2,-24(fp)
1001842c:	0085c83a 	sub	r2,zero,r2
10018430:	18800015 	stw	r2,0(r3)
    return -1;
10018434:	00bfffc4 	movi	r2,-1
10018438:	00000106 	br	10018440 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
1001843c:	e0bff917 	ldw	r2,-28(fp)
}
10018440:	e037883a 	mov	sp,fp
10018444:	dfc00117 	ldw	ra,4(sp)
10018448:	df000017 	ldw	fp,0(sp)
1001844c:	dec00204 	addi	sp,sp,8
10018450:	f800283a 	ret

10018454 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10018454:	defffa04 	addi	sp,sp,-24
10018458:	df000515 	stw	fp,20(sp)
1001845c:	df000504 	addi	fp,sp,20
10018460:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10018464:	0005303a 	rdctl	r2,status
10018468:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001846c:	e0fffc17 	ldw	r3,-16(fp)
10018470:	00bfff84 	movi	r2,-2
10018474:	1884703a 	and	r2,r3,r2
10018478:	1001703a 	wrctl	status,r2
  
  return context;
1001847c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10018480:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10018484:	e0bfff17 	ldw	r2,-4(fp)
10018488:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1001848c:	e0bffd17 	ldw	r2,-12(fp)
10018490:	10800017 	ldw	r2,0(r2)
10018494:	e0fffd17 	ldw	r3,-12(fp)
10018498:	18c00117 	ldw	r3,4(r3)
1001849c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100184a0:	e0bffd17 	ldw	r2,-12(fp)
100184a4:	10800117 	ldw	r2,4(r2)
100184a8:	e0fffd17 	ldw	r3,-12(fp)
100184ac:	18c00017 	ldw	r3,0(r3)
100184b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100184b4:	e0bffd17 	ldw	r2,-12(fp)
100184b8:	e0fffd17 	ldw	r3,-12(fp)
100184bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100184c0:	e0bffd17 	ldw	r2,-12(fp)
100184c4:	e0fffd17 	ldw	r3,-12(fp)
100184c8:	10c00015 	stw	r3,0(r2)
100184cc:	e0bffb17 	ldw	r2,-20(fp)
100184d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100184d4:	e0bffe17 	ldw	r2,-8(fp)
100184d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100184dc:	0001883a 	nop
100184e0:	e037883a 	mov	sp,fp
100184e4:	df000017 	ldw	fp,0(sp)
100184e8:	dec00104 	addi	sp,sp,4
100184ec:	f800283a 	ret

100184f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100184f0:	defffb04 	addi	sp,sp,-20
100184f4:	dfc00415 	stw	ra,16(sp)
100184f8:	df000315 	stw	fp,12(sp)
100184fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10018500:	d0a01517 	ldw	r2,-32684(gp)
10018504:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10018508:	d0a80317 	ldw	r2,-24564(gp)
1001850c:	10800044 	addi	r2,r2,1
10018510:	d0a80315 	stw	r2,-24564(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10018514:	00002e06 	br	100185d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10018518:	e0bffd17 	ldw	r2,-12(fp)
1001851c:	10800017 	ldw	r2,0(r2)
10018520:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10018524:	e0bffd17 	ldw	r2,-12(fp)
10018528:	10800403 	ldbu	r2,16(r2)
1001852c:	10803fcc 	andi	r2,r2,255
10018530:	10000426 	beq	r2,zero,10018544 <alt_tick+0x54>
10018534:	d0a80317 	ldw	r2,-24564(gp)
10018538:	1000021e 	bne	r2,zero,10018544 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1001853c:	e0bffd17 	ldw	r2,-12(fp)
10018540:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10018544:	e0bffd17 	ldw	r2,-12(fp)
10018548:	10800217 	ldw	r2,8(r2)
1001854c:	d0e80317 	ldw	r3,-24564(gp)
10018550:	18801d36 	bltu	r3,r2,100185c8 <alt_tick+0xd8>
10018554:	e0bffd17 	ldw	r2,-12(fp)
10018558:	10800403 	ldbu	r2,16(r2)
1001855c:	10803fcc 	andi	r2,r2,255
10018560:	1000191e 	bne	r2,zero,100185c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10018564:	e0bffd17 	ldw	r2,-12(fp)
10018568:	10800317 	ldw	r2,12(r2)
1001856c:	e0fffd17 	ldw	r3,-12(fp)
10018570:	18c00517 	ldw	r3,20(r3)
10018574:	1809883a 	mov	r4,r3
10018578:	103ee83a 	callr	r2
1001857c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10018580:	e0bfff17 	ldw	r2,-4(fp)
10018584:	1000031e 	bne	r2,zero,10018594 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10018588:	e13ffd17 	ldw	r4,-12(fp)
1001858c:	00184540 	call	10018454 <alt_alarm_stop>
10018590:	00000d06 	br	100185c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10018594:	e0bffd17 	ldw	r2,-12(fp)
10018598:	10c00217 	ldw	r3,8(r2)
1001859c:	e0bfff17 	ldw	r2,-4(fp)
100185a0:	1887883a 	add	r3,r3,r2
100185a4:	e0bffd17 	ldw	r2,-12(fp)
100185a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100185ac:	e0bffd17 	ldw	r2,-12(fp)
100185b0:	10c00217 	ldw	r3,8(r2)
100185b4:	d0a80317 	ldw	r2,-24564(gp)
100185b8:	1880032e 	bgeu	r3,r2,100185c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100185bc:	e0bffd17 	ldw	r2,-12(fp)
100185c0:	00c00044 	movi	r3,1
100185c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100185c8:	e0bffe17 	ldw	r2,-8(fp)
100185cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100185d0:	e0fffd17 	ldw	r3,-12(fp)
100185d4:	d0a01504 	addi	r2,gp,-32684
100185d8:	18bfcf1e 	bne	r3,r2,10018518 <__alt_data_end+0xf8018518>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100185dc:	0001883a 	nop
}
100185e0:	0001883a 	nop
100185e4:	e037883a 	mov	sp,fp
100185e8:	dfc00117 	ldw	ra,4(sp)
100185ec:	df000017 	ldw	fp,0(sp)
100185f0:	dec00204 	addi	sp,sp,8
100185f4:	f800283a 	ret

100185f8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100185f8:	deffff04 	addi	sp,sp,-4
100185fc:	df000015 	stw	fp,0(sp)
10018600:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10018604:	000170fa 	wrctl	ienable,zero
}
10018608:	0001883a 	nop
1001860c:	e037883a 	mov	sp,fp
10018610:	df000017 	ldw	fp,0(sp)
10018614:	dec00104 	addi	sp,sp,4
10018618:	f800283a 	ret

1001861c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1001861c:	defffa04 	addi	sp,sp,-24
10018620:	dfc00515 	stw	ra,20(sp)
10018624:	df000415 	stw	fp,16(sp)
10018628:	df000404 	addi	fp,sp,16
1001862c:	e13ffe15 	stw	r4,-8(fp)
10018630:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10018634:	e0bfff17 	ldw	r2,-4(fp)
10018638:	10800017 	ldw	r2,0(r2)
1001863c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10018640:	e13ffe17 	ldw	r4,-8(fp)
10018644:	000c0b40 	call	1000c0b4 <strlen>
10018648:	10800044 	addi	r2,r2,1
1001864c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10018650:	00000d06 	br	10018688 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10018654:	e0bffc17 	ldw	r2,-16(fp)
10018658:	10800217 	ldw	r2,8(r2)
1001865c:	e0fffd17 	ldw	r3,-12(fp)
10018660:	180d883a 	mov	r6,r3
10018664:	e17ffe17 	ldw	r5,-8(fp)
10018668:	1009883a 	mov	r4,r2
1001866c:	00189600 	call	10018960 <memcmp>
10018670:	1000021e 	bne	r2,zero,1001867c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10018674:	e0bffc17 	ldw	r2,-16(fp)
10018678:	00000706 	br	10018698 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1001867c:	e0bffc17 	ldw	r2,-16(fp)
10018680:	10800017 	ldw	r2,0(r2)
10018684:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10018688:	e0fffc17 	ldw	r3,-16(fp)
1001868c:	e0bfff17 	ldw	r2,-4(fp)
10018690:	18bff01e 	bne	r3,r2,10018654 <__alt_data_end+0xf8018654>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10018694:	0005883a 	mov	r2,zero
}
10018698:	e037883a 	mov	sp,fp
1001869c:	dfc00117 	ldw	ra,4(sp)
100186a0:	df000017 	ldw	fp,0(sp)
100186a4:	dec00204 	addi	sp,sp,8
100186a8:	f800283a 	ret

100186ac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100186ac:	defffb04 	addi	sp,sp,-20
100186b0:	dfc00415 	stw	ra,16(sp)
100186b4:	df000315 	stw	fp,12(sp)
100186b8:	df000304 	addi	fp,sp,12
100186bc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100186c0:	d0a00d17 	ldw	r2,-32716(gp)
100186c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100186c8:	00003106 	br	10018790 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
100186cc:	e0bffd17 	ldw	r2,-12(fp)
100186d0:	10800217 	ldw	r2,8(r2)
100186d4:	1009883a 	mov	r4,r2
100186d8:	000c0b40 	call	1000c0b4 <strlen>
100186dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100186e0:	e0bffd17 	ldw	r2,-12(fp)
100186e4:	10c00217 	ldw	r3,8(r2)
100186e8:	e0bffe17 	ldw	r2,-8(fp)
100186ec:	10bfffc4 	addi	r2,r2,-1
100186f0:	1885883a 	add	r2,r3,r2
100186f4:	10800003 	ldbu	r2,0(r2)
100186f8:	10803fcc 	andi	r2,r2,255
100186fc:	1080201c 	xori	r2,r2,128
10018700:	10bfe004 	addi	r2,r2,-128
10018704:	10800bd8 	cmpnei	r2,r2,47
10018708:	1000031e 	bne	r2,zero,10018718 <alt_find_file+0x6c>
    {
      len -= 1;
1001870c:	e0bffe17 	ldw	r2,-8(fp)
10018710:	10bfffc4 	addi	r2,r2,-1
10018714:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10018718:	e0bffe17 	ldw	r2,-8(fp)
1001871c:	e0ffff17 	ldw	r3,-4(fp)
10018720:	1885883a 	add	r2,r3,r2
10018724:	10800003 	ldbu	r2,0(r2)
10018728:	10803fcc 	andi	r2,r2,255
1001872c:	1080201c 	xori	r2,r2,128
10018730:	10bfe004 	addi	r2,r2,-128
10018734:	10800be0 	cmpeqi	r2,r2,47
10018738:	1000081e 	bne	r2,zero,1001875c <alt_find_file+0xb0>
1001873c:	e0bffe17 	ldw	r2,-8(fp)
10018740:	e0ffff17 	ldw	r3,-4(fp)
10018744:	1885883a 	add	r2,r3,r2
10018748:	10800003 	ldbu	r2,0(r2)
1001874c:	10803fcc 	andi	r2,r2,255
10018750:	1080201c 	xori	r2,r2,128
10018754:	10bfe004 	addi	r2,r2,-128
10018758:	10000a1e 	bne	r2,zero,10018784 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1001875c:	e0bffd17 	ldw	r2,-12(fp)
10018760:	10800217 	ldw	r2,8(r2)
10018764:	e0fffe17 	ldw	r3,-8(fp)
10018768:	180d883a 	mov	r6,r3
1001876c:	e17fff17 	ldw	r5,-4(fp)
10018770:	1009883a 	mov	r4,r2
10018774:	00189600 	call	10018960 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10018778:	1000021e 	bne	r2,zero,10018784 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1001877c:	e0bffd17 	ldw	r2,-12(fp)
10018780:	00000706 	br	100187a0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10018784:	e0bffd17 	ldw	r2,-12(fp)
10018788:	10800017 	ldw	r2,0(r2)
1001878c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10018790:	e0fffd17 	ldw	r3,-12(fp)
10018794:	d0a00d04 	addi	r2,gp,-32716
10018798:	18bfcc1e 	bne	r3,r2,100186cc <__alt_data_end+0xf80186cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1001879c:	0005883a 	mov	r2,zero
}
100187a0:	e037883a 	mov	sp,fp
100187a4:	dfc00117 	ldw	ra,4(sp)
100187a8:	df000017 	ldw	fp,0(sp)
100187ac:	dec00204 	addi	sp,sp,8
100187b0:	f800283a 	ret

100187b4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100187b4:	defffa04 	addi	sp,sp,-24
100187b8:	dfc00515 	stw	ra,20(sp)
100187bc:	df000415 	stw	fp,16(sp)
100187c0:	dc000315 	stw	r16,12(sp)
100187c4:	df000404 	addi	fp,sp,16
100187c8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100187cc:	00bffa04 	movi	r2,-24
100187d0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100187d4:	e03ffc15 	stw	zero,-16(fp)
100187d8:	00001d06 	br	10018850 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
100187dc:	040400b4 	movhi	r16,4098
100187e0:	84283d04 	addi	r16,r16,-24332
100187e4:	e0bffc17 	ldw	r2,-16(fp)
100187e8:	01400304 	movi	r5,12
100187ec:	1009883a 	mov	r4,r2
100187f0:	00096fc0 	call	100096fc <__mulsi3>
100187f4:	8085883a 	add	r2,r16,r2
100187f8:	10800017 	ldw	r2,0(r2)
100187fc:	1000111e 	bne	r2,zero,10018844 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10018800:	040400b4 	movhi	r16,4098
10018804:	84283d04 	addi	r16,r16,-24332
10018808:	e0bffc17 	ldw	r2,-16(fp)
1001880c:	01400304 	movi	r5,12
10018810:	1009883a 	mov	r4,r2
10018814:	00096fc0 	call	100096fc <__mulsi3>
10018818:	8085883a 	add	r2,r16,r2
1001881c:	e0fffe17 	ldw	r3,-8(fp)
10018820:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10018824:	d0e01117 	ldw	r3,-32700(gp)
10018828:	e0bffc17 	ldw	r2,-16(fp)
1001882c:	1880020e 	bge	r3,r2,10018838 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10018830:	e0bffc17 	ldw	r2,-16(fp)
10018834:	d0a01115 	stw	r2,-32700(gp)
      }
      rc = i;
10018838:	e0bffc17 	ldw	r2,-16(fp)
1001883c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10018840:	00000606 	br	1001885c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10018844:	e0bffc17 	ldw	r2,-16(fp)
10018848:	10800044 	addi	r2,r2,1
1001884c:	e0bffc15 	stw	r2,-16(fp)
10018850:	e0bffc17 	ldw	r2,-16(fp)
10018854:	10800810 	cmplti	r2,r2,32
10018858:	103fe01e 	bne	r2,zero,100187dc <__alt_data_end+0xf80187dc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1001885c:	e0bffd17 	ldw	r2,-12(fp)
}
10018860:	e6ffff04 	addi	sp,fp,-4
10018864:	dfc00217 	ldw	ra,8(sp)
10018868:	df000117 	ldw	fp,4(sp)
1001886c:	dc000017 	ldw	r16,0(sp)
10018870:	dec00304 	addi	sp,sp,12
10018874:	f800283a 	ret

10018878 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10018878:	defffe04 	addi	sp,sp,-8
1001887c:	df000115 	stw	fp,4(sp)
10018880:	df000104 	addi	fp,sp,4
10018884:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10018888:	e0bfff17 	ldw	r2,-4(fp)
1001888c:	10bffe84 	addi	r2,r2,-6
10018890:	10c00428 	cmpgeui	r3,r2,16
10018894:	18001a1e 	bne	r3,zero,10018900 <alt_exception_cause_generated_bad_addr+0x88>
10018898:	100690ba 	slli	r3,r2,2
1001889c:	008400b4 	movhi	r2,4098
100188a0:	10a22c04 	addi	r2,r2,-30544
100188a4:	1885883a 	add	r2,r3,r2
100188a8:	10800017 	ldw	r2,0(r2)
100188ac:	1000683a 	jmp	r2
100188b0:	100188f0 	cmpltui	zero,r2,1571
100188b4:	100188f0 	cmpltui	zero,r2,1571
100188b8:	10018900 	call	11001890 <__alt_heap_start+0xe6cbe8>
100188bc:	10018900 	call	11001890 <__alt_heap_start+0xe6cbe8>
100188c0:	10018900 	call	11001890 <__alt_heap_start+0xe6cbe8>
100188c4:	100188f0 	cmpltui	zero,r2,1571
100188c8:	100188f8 	rdprs	zero,r2,1571
100188cc:	10018900 	call	11001890 <__alt_heap_start+0xe6cbe8>
100188d0:	100188f0 	cmpltui	zero,r2,1571
100188d4:	100188f0 	cmpltui	zero,r2,1571
100188d8:	10018900 	call	11001890 <__alt_heap_start+0xe6cbe8>
100188dc:	100188f0 	cmpltui	zero,r2,1571
100188e0:	100188f8 	rdprs	zero,r2,1571
100188e4:	10018900 	call	11001890 <__alt_heap_start+0xe6cbe8>
100188e8:	10018900 	call	11001890 <__alt_heap_start+0xe6cbe8>
100188ec:	100188f0 	cmpltui	zero,r2,1571
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
100188f0:	00800044 	movi	r2,1
100188f4:	00000306 	br	10018904 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
100188f8:	0005883a 	mov	r2,zero
100188fc:	00000106 	br	10018904 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10018900:	0005883a 	mov	r2,zero
  }
}
10018904:	e037883a 	mov	sp,fp
10018908:	df000017 	ldw	fp,0(sp)
1001890c:	dec00104 	addi	sp,sp,4
10018910:	f800283a 	ret

10018914 <atexit>:
10018914:	200b883a 	mov	r5,r4
10018918:	000f883a 	mov	r7,zero
1001891c:	000d883a 	mov	r6,zero
10018920:	0009883a 	mov	r4,zero
10018924:	00189dc1 	jmpi	100189dc <__register_exitproc>

10018928 <exit>:
10018928:	defffe04 	addi	sp,sp,-8
1001892c:	000b883a 	mov	r5,zero
10018930:	dc000015 	stw	r16,0(sp)
10018934:	dfc00115 	stw	ra,4(sp)
10018938:	2021883a 	mov	r16,r4
1001893c:	0018af40 	call	10018af4 <__call_exitprocs>
10018940:	008400b4 	movhi	r2,4098
10018944:	10acbc04 	addi	r2,r2,-19728
10018948:	11000017 	ldw	r4,0(r2)
1001894c:	20800f17 	ldw	r2,60(r4)
10018950:	10000126 	beq	r2,zero,10018958 <exit+0x30>
10018954:	103ee83a 	callr	r2
10018958:	8009883a 	mov	r4,r16
1001895c:	0018c740 	call	10018c74 <_exit>

10018960 <memcmp>:
10018960:	01c000c4 	movi	r7,3
10018964:	3980192e 	bgeu	r7,r6,100189cc <memcmp+0x6c>
10018968:	2144b03a 	or	r2,r4,r5
1001896c:	11c4703a 	and	r2,r2,r7
10018970:	10000f26 	beq	r2,zero,100189b0 <memcmp+0x50>
10018974:	20800003 	ldbu	r2,0(r4)
10018978:	28c00003 	ldbu	r3,0(r5)
1001897c:	10c0151e 	bne	r2,r3,100189d4 <memcmp+0x74>
10018980:	31bfff84 	addi	r6,r6,-2
10018984:	01ffffc4 	movi	r7,-1
10018988:	00000406 	br	1001899c <memcmp+0x3c>
1001898c:	20800003 	ldbu	r2,0(r4)
10018990:	28c00003 	ldbu	r3,0(r5)
10018994:	31bfffc4 	addi	r6,r6,-1
10018998:	10c00e1e 	bne	r2,r3,100189d4 <memcmp+0x74>
1001899c:	21000044 	addi	r4,r4,1
100189a0:	29400044 	addi	r5,r5,1
100189a4:	31fff91e 	bne	r6,r7,1001898c <__alt_data_end+0xf801898c>
100189a8:	0005883a 	mov	r2,zero
100189ac:	f800283a 	ret
100189b0:	20c00017 	ldw	r3,0(r4)
100189b4:	28800017 	ldw	r2,0(r5)
100189b8:	18bfee1e 	bne	r3,r2,10018974 <__alt_data_end+0xf8018974>
100189bc:	31bfff04 	addi	r6,r6,-4
100189c0:	21000104 	addi	r4,r4,4
100189c4:	29400104 	addi	r5,r5,4
100189c8:	39bff936 	bltu	r7,r6,100189b0 <__alt_data_end+0xf80189b0>
100189cc:	303fe91e 	bne	r6,zero,10018974 <__alt_data_end+0xf8018974>
100189d0:	003ff506 	br	100189a8 <__alt_data_end+0xf80189a8>
100189d4:	10c5c83a 	sub	r2,r2,r3
100189d8:	f800283a 	ret

100189dc <__register_exitproc>:
100189dc:	defffa04 	addi	sp,sp,-24
100189e0:	dc000315 	stw	r16,12(sp)
100189e4:	040400b4 	movhi	r16,4098
100189e8:	842cbc04 	addi	r16,r16,-19728
100189ec:	80c00017 	ldw	r3,0(r16)
100189f0:	dc400415 	stw	r17,16(sp)
100189f4:	dfc00515 	stw	ra,20(sp)
100189f8:	18805217 	ldw	r2,328(r3)
100189fc:	2023883a 	mov	r17,r4
10018a00:	10003726 	beq	r2,zero,10018ae0 <__register_exitproc+0x104>
10018a04:	10c00117 	ldw	r3,4(r2)
10018a08:	010007c4 	movi	r4,31
10018a0c:	20c00e16 	blt	r4,r3,10018a48 <__register_exitproc+0x6c>
10018a10:	1a000044 	addi	r8,r3,1
10018a14:	8800221e 	bne	r17,zero,10018aa0 <__register_exitproc+0xc4>
10018a18:	18c00084 	addi	r3,r3,2
10018a1c:	18c7883a 	add	r3,r3,r3
10018a20:	18c7883a 	add	r3,r3,r3
10018a24:	12000115 	stw	r8,4(r2)
10018a28:	10c7883a 	add	r3,r2,r3
10018a2c:	19400015 	stw	r5,0(r3)
10018a30:	0005883a 	mov	r2,zero
10018a34:	dfc00517 	ldw	ra,20(sp)
10018a38:	dc400417 	ldw	r17,16(sp)
10018a3c:	dc000317 	ldw	r16,12(sp)
10018a40:	dec00604 	addi	sp,sp,24
10018a44:	f800283a 	ret
10018a48:	00800034 	movhi	r2,0
10018a4c:	10800004 	addi	r2,r2,0
10018a50:	10002626 	beq	r2,zero,10018aec <__register_exitproc+0x110>
10018a54:	01006404 	movi	r4,400
10018a58:	d9400015 	stw	r5,0(sp)
10018a5c:	d9800115 	stw	r6,4(sp)
10018a60:	d9c00215 	stw	r7,8(sp)
10018a64:	00000000 	call	10000000 <__alt_mem_sdram>
10018a68:	d9400017 	ldw	r5,0(sp)
10018a6c:	d9800117 	ldw	r6,4(sp)
10018a70:	d9c00217 	ldw	r7,8(sp)
10018a74:	10001d26 	beq	r2,zero,10018aec <__register_exitproc+0x110>
10018a78:	81000017 	ldw	r4,0(r16)
10018a7c:	10000115 	stw	zero,4(r2)
10018a80:	02000044 	movi	r8,1
10018a84:	22405217 	ldw	r9,328(r4)
10018a88:	0007883a 	mov	r3,zero
10018a8c:	12400015 	stw	r9,0(r2)
10018a90:	20805215 	stw	r2,328(r4)
10018a94:	10006215 	stw	zero,392(r2)
10018a98:	10006315 	stw	zero,396(r2)
10018a9c:	883fde26 	beq	r17,zero,10018a18 <__alt_data_end+0xf8018a18>
10018aa0:	18c9883a 	add	r4,r3,r3
10018aa4:	2109883a 	add	r4,r4,r4
10018aa8:	1109883a 	add	r4,r2,r4
10018aac:	21802215 	stw	r6,136(r4)
10018ab0:	01800044 	movi	r6,1
10018ab4:	12406217 	ldw	r9,392(r2)
10018ab8:	30cc983a 	sll	r6,r6,r3
10018abc:	4992b03a 	or	r9,r9,r6
10018ac0:	12406215 	stw	r9,392(r2)
10018ac4:	21c04215 	stw	r7,264(r4)
10018ac8:	01000084 	movi	r4,2
10018acc:	893fd21e 	bne	r17,r4,10018a18 <__alt_data_end+0xf8018a18>
10018ad0:	11006317 	ldw	r4,396(r2)
10018ad4:	218cb03a 	or	r6,r4,r6
10018ad8:	11806315 	stw	r6,396(r2)
10018adc:	003fce06 	br	10018a18 <__alt_data_end+0xf8018a18>
10018ae0:	18805304 	addi	r2,r3,332
10018ae4:	18805215 	stw	r2,328(r3)
10018ae8:	003fc606 	br	10018a04 <__alt_data_end+0xf8018a04>
10018aec:	00bfffc4 	movi	r2,-1
10018af0:	003fd006 	br	10018a34 <__alt_data_end+0xf8018a34>

10018af4 <__call_exitprocs>:
10018af4:	defff504 	addi	sp,sp,-44
10018af8:	df000915 	stw	fp,36(sp)
10018afc:	dd400615 	stw	r21,24(sp)
10018b00:	dc800315 	stw	r18,12(sp)
10018b04:	dfc00a15 	stw	ra,40(sp)
10018b08:	ddc00815 	stw	r23,32(sp)
10018b0c:	dd800715 	stw	r22,28(sp)
10018b10:	dd000515 	stw	r20,20(sp)
10018b14:	dcc00415 	stw	r19,16(sp)
10018b18:	dc400215 	stw	r17,8(sp)
10018b1c:	dc000115 	stw	r16,4(sp)
10018b20:	d9000015 	stw	r4,0(sp)
10018b24:	2839883a 	mov	fp,r5
10018b28:	04800044 	movi	r18,1
10018b2c:	057fffc4 	movi	r21,-1
10018b30:	008400b4 	movhi	r2,4098
10018b34:	10acbc04 	addi	r2,r2,-19728
10018b38:	12000017 	ldw	r8,0(r2)
10018b3c:	45005217 	ldw	r20,328(r8)
10018b40:	44c05204 	addi	r19,r8,328
10018b44:	a0001c26 	beq	r20,zero,10018bb8 <__call_exitprocs+0xc4>
10018b48:	a0800117 	ldw	r2,4(r20)
10018b4c:	15ffffc4 	addi	r23,r2,-1
10018b50:	b8000d16 	blt	r23,zero,10018b88 <__call_exitprocs+0x94>
10018b54:	14000044 	addi	r16,r2,1
10018b58:	8421883a 	add	r16,r16,r16
10018b5c:	8421883a 	add	r16,r16,r16
10018b60:	84402004 	addi	r17,r16,128
10018b64:	a463883a 	add	r17,r20,r17
10018b68:	a421883a 	add	r16,r20,r16
10018b6c:	e0001e26 	beq	fp,zero,10018be8 <__call_exitprocs+0xf4>
10018b70:	80804017 	ldw	r2,256(r16)
10018b74:	e0801c26 	beq	fp,r2,10018be8 <__call_exitprocs+0xf4>
10018b78:	bdffffc4 	addi	r23,r23,-1
10018b7c:	843fff04 	addi	r16,r16,-4
10018b80:	8c7fff04 	addi	r17,r17,-4
10018b84:	bd7ff91e 	bne	r23,r21,10018b6c <__alt_data_end+0xf8018b6c>
10018b88:	00800034 	movhi	r2,0
10018b8c:	10800004 	addi	r2,r2,0
10018b90:	10000926 	beq	r2,zero,10018bb8 <__call_exitprocs+0xc4>
10018b94:	a0800117 	ldw	r2,4(r20)
10018b98:	1000301e 	bne	r2,zero,10018c5c <__call_exitprocs+0x168>
10018b9c:	a0800017 	ldw	r2,0(r20)
10018ba0:	10003226 	beq	r2,zero,10018c6c <__call_exitprocs+0x178>
10018ba4:	a009883a 	mov	r4,r20
10018ba8:	98800015 	stw	r2,0(r19)
10018bac:	00000000 	call	10000000 <__alt_mem_sdram>
10018bb0:	9d000017 	ldw	r20,0(r19)
10018bb4:	a03fe41e 	bne	r20,zero,10018b48 <__alt_data_end+0xf8018b48>
10018bb8:	dfc00a17 	ldw	ra,40(sp)
10018bbc:	df000917 	ldw	fp,36(sp)
10018bc0:	ddc00817 	ldw	r23,32(sp)
10018bc4:	dd800717 	ldw	r22,28(sp)
10018bc8:	dd400617 	ldw	r21,24(sp)
10018bcc:	dd000517 	ldw	r20,20(sp)
10018bd0:	dcc00417 	ldw	r19,16(sp)
10018bd4:	dc800317 	ldw	r18,12(sp)
10018bd8:	dc400217 	ldw	r17,8(sp)
10018bdc:	dc000117 	ldw	r16,4(sp)
10018be0:	dec00b04 	addi	sp,sp,44
10018be4:	f800283a 	ret
10018be8:	a0800117 	ldw	r2,4(r20)
10018bec:	80c00017 	ldw	r3,0(r16)
10018bf0:	10bfffc4 	addi	r2,r2,-1
10018bf4:	15c01426 	beq	r2,r23,10018c48 <__call_exitprocs+0x154>
10018bf8:	80000015 	stw	zero,0(r16)
10018bfc:	183fde26 	beq	r3,zero,10018b78 <__alt_data_end+0xf8018b78>
10018c00:	95c8983a 	sll	r4,r18,r23
10018c04:	a0806217 	ldw	r2,392(r20)
10018c08:	a5800117 	ldw	r22,4(r20)
10018c0c:	2084703a 	and	r2,r4,r2
10018c10:	10000b26 	beq	r2,zero,10018c40 <__call_exitprocs+0x14c>
10018c14:	a0806317 	ldw	r2,396(r20)
10018c18:	2088703a 	and	r4,r4,r2
10018c1c:	20000c1e 	bne	r4,zero,10018c50 <__call_exitprocs+0x15c>
10018c20:	89400017 	ldw	r5,0(r17)
10018c24:	d9000017 	ldw	r4,0(sp)
10018c28:	183ee83a 	callr	r3
10018c2c:	a0800117 	ldw	r2,4(r20)
10018c30:	15bfbf1e 	bne	r2,r22,10018b30 <__alt_data_end+0xf8018b30>
10018c34:	98800017 	ldw	r2,0(r19)
10018c38:	153fcf26 	beq	r2,r20,10018b78 <__alt_data_end+0xf8018b78>
10018c3c:	003fbc06 	br	10018b30 <__alt_data_end+0xf8018b30>
10018c40:	183ee83a 	callr	r3
10018c44:	003ff906 	br	10018c2c <__alt_data_end+0xf8018c2c>
10018c48:	a5c00115 	stw	r23,4(r20)
10018c4c:	003feb06 	br	10018bfc <__alt_data_end+0xf8018bfc>
10018c50:	89000017 	ldw	r4,0(r17)
10018c54:	183ee83a 	callr	r3
10018c58:	003ff406 	br	10018c2c <__alt_data_end+0xf8018c2c>
10018c5c:	a0800017 	ldw	r2,0(r20)
10018c60:	a027883a 	mov	r19,r20
10018c64:	1029883a 	mov	r20,r2
10018c68:	003fb606 	br	10018b44 <__alt_data_end+0xf8018b44>
10018c6c:	0005883a 	mov	r2,zero
10018c70:	003ffb06 	br	10018c60 <__alt_data_end+0xf8018c60>

10018c74 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10018c74:	defffd04 	addi	sp,sp,-12
10018c78:	df000215 	stw	fp,8(sp)
10018c7c:	df000204 	addi	fp,sp,8
10018c80:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10018c84:	0001883a 	nop
10018c88:	e0bfff17 	ldw	r2,-4(fp)
10018c8c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10018c90:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10018c94:	10000226 	beq	r2,zero,10018ca0 <_exit+0x2c>
    ALT_SIM_FAIL();
10018c98:	002af070 	cmpltui	zero,zero,43969
10018c9c:	00000106 	br	10018ca4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10018ca0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10018ca4:	003fff06 	br	10018ca4 <__alt_data_end+0xf8018ca4>
