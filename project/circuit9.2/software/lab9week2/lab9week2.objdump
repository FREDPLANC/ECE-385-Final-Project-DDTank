
lab9week2.elf:     file format elf32-littlenios2
lab9week2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00010400 memsz 0x00010400 flags r-x
    LOAD off    0x00011420 vaddr 0x10010420 paddr 0x10011f14 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013a08 vaddr 0x10013a08 paddr 0x10013a08 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fdd8  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000418  10010008  10010008  00011008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  10010420  10011f14  00011420  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10013a08  10013a08  00013a08  2**2
                  ALLOC, SMALL_DATA
  6 .ocm          00000000  00000000  00000000  00012f14  2**0
                  CONTENTS
  7 .sdram        00000000  10013b68  10013b68  00012f14  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00012f14  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ed0  00000000  00000000  00012f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00022ca1  00000000  00000000  00013e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008e5c  00000000  00000000  00036aa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b3af  00000000  00000000  0003f905  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000020ec  00000000  00000000  0004acb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000390a  00000000  00000000  0004cda0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017755  00000000  00000000  000506aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00067e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018a0  00000000  00000000  00067e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006c83e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006c841  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006c84d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006c84e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006c84f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006c853  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006c857  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006c85b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006c866  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006c871  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0006c87c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000039  00000000  00000000  0006c884  2**0
                  CONTENTS, READONLY
 30 .jdi          00004f1a  00000000  00000000  0006c8bd  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0004d398  00000000  00000000  000717d7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10010008 l    d  .rodata	00000000 .rodata
10010420 l    d  .rwdata	00000000 .rwdata
10013a08 l    d  .bss	00000000 .bss
00000000 l    d  .ocm	00000000 .ocm
10013b68 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab9week2_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
10011ecc l     O .rwdata	00000004 vga_ctrl
00000000 l    df *ABS*	00000000 text_mode_vga.c
10011ed0 l     O .rwdata	00000004 vga_ctrl
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
10010166 l     O .rodata	00000010 zeroes.4404
10002e50 l     F .text	000000bc __sbprintf
10010176 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10003060 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10004bb8 l     F .text	00000008 __fp_unlock
10004bcc l     F .text	0000019c __sinit.part.1
10004d68 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10010420 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10010864 l     O .rwdata	00000020 lc_ctype_charset
10010844 l     O .rwdata	00000020 lc_message_charset
10010884 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
100101a8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10007604 l     F .text	000000fc __sprint_r.part.0
100102cc l     O .rodata	00000010 zeroes.4349
10008c40 l     F .text	000000bc __sbprintf
100102dc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000d7e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000d8fc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000d928 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000da1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000db04 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000dbf0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000ddcc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10011f04 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000e070 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000e1ac l     F .text	00000034 alt_dev_reg
10010e6c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000e488 l     F .text	0000020c altera_avalon_jtag_uart_irq
1000e694 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1000ef70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1000f3d0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1000f530 l     F .text	0000003c alt_get_errno
1000f56c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10013a3c g     O .bss	00000004 alt_instruction_exception_handler
10007114 g     F .text	00000074 _mprec_log10
10007200 g     F .text	0000008c __any_on
100096bc g     F .text	00000054 _isatty_r
100101b4 g     O .rodata	00000028 __mprec_tinytens
1000dd08 g     F .text	0000007c alt_main
100002dc g     F .text	00000050 textVGAClr
10013a68 g     O .bss	00000100 alt_irq
10009710 g     F .text	00000060 _lseek_r
10011f14 g       *ABS*	00000000 __flash_rwdata_start
1000c1c0 g     F .text	00000088 .hidden __eqdf2
10013b68 g       *ABS*	00000000 __alt_heap_start
10000b1c g     F .text	0000003c printf
10009fe8 g     F .text	0000009c _wcrtomb_r
1000032c g     F .text	00000650 textVGATest
1000742c g     F .text	0000005c __sseek
10004f18 g     F .text	00000010 __sinit
10009e90 g     F .text	00000140 __swbuf_r
10005524 g     F .text	0000007c _setlocale_r
10004d70 g     F .text	00000078 __sfmoreglue
1000dda8 g     F .text	00000024 __malloc_unlock
10009770 g     F .text	0000015c memmove
10004f00 g     F .text	00000018 _cleanup
100061d4 g     F .text	000000a8 _Balloc
1000c248 g     F .text	000000dc .hidden __gtdf2
1000f958 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10009198 g     F .text	0000005c _fstat_r
10013a20 g     O .bss	00000004 errno
100073a8 g     F .text	00000008 __seofread
10013a28 g     O .bss	00000004 alt_argv
10019ecc g       *ABS*	00000000 _gp
1000e040 g     F .text	00000030 usleep
10010cec g     O .rwdata	00000180 alt_fd_list
1000f97c g     F .text	00000090 alt_find_dev
100009a4 g     F .text	00000148 memcpy
10004bc0 g     F .text	0000000c _cleanup_r
1000d600 g     F .text	000000dc .hidden __floatsidf
1000f4b4 g     F .text	0000007c alt_io_redirect
1000c324 g     F .text	000000f4 .hidden __ltdf2
10010008 g       *ABS*	00000000 __DTOR_END__
1000fbd8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1000728c g     F .text	00000074 __fpclassifyd
10007070 g     F .text	000000a4 __ratio
10008c24 g     F .text	0000001c __vfiprintf_internal
1000e88c g     F .text	0000021c altera_avalon_jtag_uart_read
10000aec g     F .text	00000030 _printf_r
1000ae88 g     F .text	00000064 .hidden __udivsi3
1000da58 g     F .text	000000ac isatty
10010204 g     O .rodata	000000c8 __mprec_tens
100055a0 g     F .text	0000000c __locale_charset
10013a1c g     O .bss	00000004 __malloc_top_pad
10011edc g     O .rwdata	00000004 __mb_cur_max
100055d0 g     F .text	0000000c _localeconv_r
100091f4 g     F .text	000004c8 __sfvwrite_r
10006608 g     F .text	0000003c __i2b
10007300 g     F .text	00000054 _sbrk_r
100098cc g     F .text	00000060 _read_r
10011efc g     O .rwdata	00000004 alt_max_fd
10008e8c g     F .text	000000f0 _fclose_r
10004b88 g     F .text	00000030 fflush
10013a18 g     O .bss	00000004 __malloc_max_sbrked_mem
1000af44 g     F .text	000008ac .hidden __adddf3
10006e18 g     F .text	0000010c __b2d
1000a7cc g     F .text	000005c4 .hidden __umoddi3
1000dc2c g     F .text	000000dc lseek
10011ed4 g     O .rwdata	00000004 _global_impure_ptr
1000992c g     F .text	00000564 _realloc_r
10013b68 g       *ABS*	00000000 __bss_end
1000f2e0 g     F .text	000000f0 alt_iic_isr_register
1000f850 g     F .text	00000108 alt_tick
1000a1d0 g     F .text	000005fc .hidden __udivdi3
100090f4 g     F .text	00000024 _fputwc_r
100101dc g     O .rodata	00000028 __mprec_bigtens
100063ec g     F .text	00000104 __s2b
1000d6dc g     F .text	000000a8 .hidden __floatunsidf
10006b58 g     F .text	00000060 __mcmp
10004f38 g     F .text	00000018 __fp_lock_all
1000f294 g     F .text	0000004c alt_ic_irq_enabled
1000f7b4 g     F .text	0000009c alt_alarm_stop
10013a30 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10010cc4 g     O .rwdata	00000028 alt_dev_null
1000ef50 g     F .text	00000020 alt_dcache_flush_all
100064f0 g     F .text	00000068 __hi0bits
1000d580 g     F .text	00000080 .hidden __fixdfsi
10011f14 g       *ABS*	00000000 __ram_rwdata_end
10011ef4 g     O .rwdata	00000008 alt_dev_list
1000e0ac g     F .text	00000100 write
10010420 g       *ABS*	00000000 __ram_rodata_end
1000d964 g     F .text	000000b8 fstat
1000c324 g     F .text	000000f4 .hidden __ledf2
100068d0 g     F .text	00000140 __pow5mult
10007718 g     F .text	0000150c ___vfiprintf_internal_r
10013a10 g     O .bss	00000004 __nlocale_changed
1000aeec g     F .text	00000058 .hidden __umodsi3
10013b68 g       *ABS*	00000000 end
1000e3c8 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10010008 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000d784 g     F .text	00000064 .hidden __clzsi2
1000eaa8 g     F .text	00000224 altera_avalon_jtag_uart_write
00000000 g       *ABS*	00000000 __alt_mem_ocm
10004f28 g     F .text	00000004 __sfp_lock_acquire
10005fc8 g     F .text	000000e4 memchr
10000b58 g     F .text	000022dc ___vfprintf_internal_r
1000508c g     F .text	00000310 _free_r
100055ac g     F .text	00000010 __locale_mb_cur_max
1000fe54 g     F .text	00000180 __call_exitprocs
10013a0c g     O .bss	00000004 __mlocale_changed
10011ee0 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10013a34 g     O .bss	00000004 _alt_tick_rate
10006a10 g     F .text	00000148 __lshift
10013a38 g     O .bss	00000004 _alt_nticks
1000de08 g     F .text	00000104 read
1000e218 g     F .text	0000004c alt_sys_init
1000fd3c g     F .text	00000118 __register_exitproc
10006644 g     F .text	0000028c __multiply
1000e734 g     F .text	00000068 altera_avalon_jtag_uart_close
1000097c g     F .text	00000028 .hidden __mulsi3
10010420 g       *ABS*	00000000 __ram_rwdata_start
10010008 g       *ABS*	00000000 __ram_rodata_start
10013a40 g     O .bss	00000028 __malloc_current_mallinfo
10006f24 g     F .text	0000014c __d2b
1000e264 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1000fb14 g     F .text	000000c4 alt_get_fd
1000edf8 g     F .text	00000158 alt_busy_sleep
10008d5c g     F .text	00000054 _close_r
1000fcc0 g     F .text	0000007c memcmp
1000e324 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10013b68 g       *ABS*	00000000 __alt_stack_base
1000e374 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10002f0c g     F .text	00000154 __swsetup_r
1000b7f0 g     F .text	000009d0 .hidden __divdf3
10004de8 g     F .text	00000118 __sfp
10007188 g     F .text	00000078 __copybits
100108bc g     O .rwdata	00000408 __malloc_av_
10004f34 g     F .text	00000004 __sinit_lock_release
1000c418 g     F .text	0000086c .hidden __muldf3
10007354 g     F .text	00000054 __sread
1000fa0c g     F .text	00000108 alt_find_file
1000efac g     F .text	000000a4 alt_dev_llist_insert
1000dd84 g     F .text	00000024 __malloc_lock
1000df90 g     F .text	000000b0 sbrk
10004b2c g     F .text	0000005c _fflush_r
10008db0 g     F .text	000000dc _calloc_r
10013a08 g       *ABS*	00000000 __bss_start
100060ac g     F .text	00000128 memset
1000026c g     F .text	0000002c main
10013a2c g     O .bss	00000004 alt_envp
10013a14 g     O .bss	00000004 __malloc_max_total_mem
1000e2c4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10009fd0 g     F .text	00000018 __swbuf
10007488 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10008f7c g     F .text	00000014 fclose
10003288 g     F .text	00001688 _dtoa_r
100057bc g     F .text	0000080c _malloc_r
1000a144 g     F .text	00000030 __ascii_wctomb
10011f00 g     O .rwdata	00000004 alt_errno
1000539c g     F .text	000000c4 _fwalk
1000ad90 g     F .text	00000084 .hidden __divsi3
10004f68 g     F .text	00000124 _malloc_trim_r
10010008 g       *ABS*	00000000 __CTOR_END__
10007490 g     F .text	000000dc strcmp
10010008 g       *ABS*	00000000 __flash_rodata_start
10010008 g       *ABS*	00000000 __DTOR_LIST__
1000c1c0 g     F .text	00000088 .hidden __nedf2
1000e1e0 g     F .text	00000038 alt_irq_init
1000df0c g     F .text	00000084 alt_release_fd
100102ec g     O .rodata	00000100 .hidden __clz_tab
10013a08 g     O .bss	00000004 _PathLocale
1000fc74 g     F .text	00000014 atexit
10008cfc g     F .text	00000060 _write_r
100055dc g     F .text	00000018 setlocale
10000298 g     F .text	00000044 textVGASetColor
10011ed8 g     O .rwdata	00000004 _impure_ptr
10013a24 g     O .bss	00000004 alt_argc
10004910 g     F .text	0000021c __sflush_r
1000f0b0 g     F .text	00000060 _do_dtors
100055c8 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10006db4 g     F .text	00000064 __ulp
10004f50 g     F .text	00000018 __fp_unlock_all
10011eec g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
100055f4 g     F .text	0000000c localeconv
1000f130 g     F .text	00000050 alt_ic_isr_register
10011f14 g       *ABS*	00000000 _edata
10013b68 g       *ABS*	00000000 _end
10008f90 g     F .text	00000164 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
1000e79c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1000f208 g     F .text	0000008c alt_ic_irq_disable
100073b0 g     F .text	0000007c __swrite
10011ee4 g     O .rwdata	00000004 __malloc_trim_threshold
100055bc g     F .text	0000000c __locale_msgcharset
1000fc88 g     F .text	00000038 exit
10005460 g     F .text	000000c4 _fwalk_reent
10006bb8 g     F .text	000001fc __mdiff
1000ae14 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10004f2c g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000ffd4 g     F .text	00000034 _exit
1000eccc g     F .text	0000012c alt_alarm_start
10005600 g     F .text	000001bc __smakebuf_r
1000756c g     F .text	00000098 strlen
1000f658 g     F .text	0000015c open
1000c248 g     F .text	000000dc .hidden __gedf2
10011ee8 g     O .rwdata	00000004 __wctomb
10007700 g     F .text	00000018 __sprint_r
1000f110 g     F .text	00000020 alt_icache_flush_all
10011f08 g     O .rwdata	00000004 alt_priority_mask
1000f180 g     F .text	00000088 alt_ic_irq_enable
10002e34 g     F .text	0000001c __vfprintf_internal
1000a174 g     F .text	0000005c _wctomb_r
1000cc84 g     F .text	000008fc .hidden __subdf3
10006558 g     F .text	000000b0 __lo0bits
10011f0c g     O .rwdata	00000008 alt_alarm_list
1000f050 g     F .text	00000060 _do_ctors
1000a084 g     F .text	000000c0 wcrtomb
1000d824 g     F .text	000000d8 close
1000db6c g     F .text	00000084 alt_load
10009118 g     F .text	00000080 fputwc
10004f30 g     F .text	00000004 __sinit_lock_acquire
100062a4 g     F .text	00000148 __multadd
1000627c g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	108e9a04 	addi	r2,r2,14952
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	108e9a04 	addi	r2,r2,14952
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a6dc17 	ldw	r2,-25744(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a6dc17 	ldw	r2,-25744(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
1000023c:	d6a7b314 	ori	gp,gp,40652
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000244:	108e8214 	ori	r2,r2,14856

    movhi r3, %hi(__bss_end)
10000248:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
1000024c:	18ceda14 	ori	r3,r3,15208

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	000db6c0 	call	1000db6c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	000dd080 	call	1000dd08 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <main>:
#include "text_mode_vga.h"
int main(void)
{
1000026c:	defffe04 	addi	sp,sp,-8
10000270:	dfc00115 	stw	ra,4(sp)
10000274:	df000015 	stw	fp,0(sp)
10000278:	d839883a 	mov	fp,sp
	textVGATest();
1000027c:	000032c0 	call	1000032c <textVGATest>
	return 0;
10000280:	0005883a 	mov	r2,zero
}
10000284:	e037883a 	mov	sp,fp
10000288:	dfc00117 	ldw	ra,4(sp)
1000028c:	df000017 	ldw	fp,0(sp)
10000290:	dec00204 	addi	sp,sp,8
10000294:	f800283a 	ret

10000298 <textVGASetColor>:
#include <alt_types.h>
#include "text_mode_vga.h"


void textVGASetColor(int background, int foreground)
{
10000298:	defffd04 	addi	sp,sp,-12
1000029c:	df000215 	stw	fp,8(sp)
100002a0:	df000204 	addi	fp,sp,8
100002a4:	e13ffe15 	stw	r4,-8(fp)
100002a8:	e17fff15 	stw	r5,-4(fp)
	vga_ctrl->CTRL = foreground << 13 |
100002ac:	d0e00117 	ldw	r3,-32764(gp)
100002b0:	e0bfff17 	ldw	r2,-4(fp)
100002b4:	1008937a 	slli	r4,r2,13
					 background << 1;
100002b8:	e0bffe17 	ldw	r2,-8(fp)
100002bc:	1085883a 	add	r2,r2,r2
#include "text_mode_vga.h"


void textVGASetColor(int background, int foreground)
{
	vga_ctrl->CTRL = foreground << 13 |
100002c0:	2084b03a 	or	r2,r4,r2
100002c4:	18825815 	stw	r2,2400(r3)
					 background << 1;
}
100002c8:	0001883a 	nop
100002cc:	e037883a 	mov	sp,fp
100002d0:	df000017 	ldw	fp,0(sp)
100002d4:	dec00104 	addi	sp,sp,4
100002d8:	f800283a 	ret

100002dc <textVGAClr>:

void textVGAClr()
{
100002dc:	defffe04 	addi	sp,sp,-8
100002e0:	df000115 	stw	fp,4(sp)
100002e4:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS); i++)
100002e8:	e03fff15 	stw	zero,-4(fp)
100002ec:	00000706 	br	1000030c <textVGAClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
100002f0:	d0e00117 	ldw	r3,-32764(gp)
100002f4:	e0bfff17 	ldw	r2,-4(fp)
100002f8:	1885883a 	add	r2,r3,r2
100002fc:	10000005 	stb	zero,0(r2)
					 background << 1;
}

void textVGAClr()
{
	for (int i = 0; i<(ROWS*COLUMNS); i++)
10000300:	e0bfff17 	ldw	r2,-4(fp)
10000304:	10800044 	addi	r2,r2,1
10000308:	e0bfff15 	stw	r2,-4(fp)
1000030c:	e0bfff17 	ldw	r2,-4(fp)
10000310:	10825810 	cmplti	r2,r2,2400
10000314:	103ff61e 	bne	r2,zero,100002f0 <__alt_data_end+0xf80002f0>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
10000318:	0001883a 	nop
1000031c:	e037883a 	mov	sp,fp
10000320:	df000017 	ldw	fp,0(sp)
10000324:	dec00104 	addi	sp,sp,4
10000328:	f800283a 	ret

1000032c <textVGATest>:

void textVGATest()
{
1000032c:	deff8904 	addi	sp,sp,-476
10000330:	dfc07615 	stw	ra,472(sp)
10000334:	df007515 	stw	fp,468(sp)
10000338:	dc007415 	stw	r16,464(sp)
1000033c:	df007504 	addi	fp,sp,468
	textVGASetColor(BLACK, WHITE);
10000340:	0143ffc4 	movi	r5,4095
10000344:	0009883a 	mov	r4,zero
10000348:	00002980 	call	10000298 <textVGASetColor>
	textVGAClr();
1000034c:	00002dc0 	call	100002dc <textVGAClr>

	//Register write and readback test
	alt_u32 checksum[ROWS], readsum[ROWS];

	for (int j = 0; j < ROWS; j++)
10000350:	e03f8b15 	stw	zero,-468(fp)
10000354:	00003106 	br	1000041c <textVGATest+0xf0>
	{
		checksum[j] = 0;
10000358:	e0bf8b17 	ldw	r2,-468(fp)
1000035c:	1085883a 	add	r2,r2,r2
10000360:	1085883a 	add	r2,r2,r2
10000364:	e0ff8b04 	addi	r3,fp,-468
10000368:	1885883a 	add	r2,r3,r2
1000036c:	10800904 	addi	r2,r2,36
10000370:	10000015 	stw	zero,0(r2)
		for (int i = 0; i < COLUMNS; i++)
10000374:	e03f8c15 	stw	zero,-464(fp)
10000378:	00002206 	br	10000404 <textVGATest+0xd8>
		{
			vga_ctrl->VRAM[j*COLUMNS + i] = i + j;
1000037c:	d4200117 	ldw	r16,-32764(gp)
10000380:	01401404 	movi	r5,80
10000384:	e13f8b17 	ldw	r4,-468(fp)
10000388:	000097c0 	call	1000097c <__mulsi3>
1000038c:	1007883a 	mov	r3,r2
10000390:	e0bf8c17 	ldw	r2,-464(fp)
10000394:	1885883a 	add	r2,r3,r2
10000398:	e0ff8c17 	ldw	r3,-464(fp)
1000039c:	1809883a 	mov	r4,r3
100003a0:	e0ff8b17 	ldw	r3,-468(fp)
100003a4:	20c7883a 	add	r3,r4,r3
100003a8:	8085883a 	add	r2,r16,r2
100003ac:	10c00005 	stb	r3,0(r2)
			checksum[j] += i + j;
100003b0:	e0bf8b17 	ldw	r2,-468(fp)
100003b4:	1085883a 	add	r2,r2,r2
100003b8:	1085883a 	add	r2,r2,r2
100003bc:	e13f8b04 	addi	r4,fp,-468
100003c0:	2085883a 	add	r2,r4,r2
100003c4:	10800904 	addi	r2,r2,36
100003c8:	10800017 	ldw	r2,0(r2)
100003cc:	e13f8c17 	ldw	r4,-464(fp)
100003d0:	e0ff8b17 	ldw	r3,-468(fp)
100003d4:	20c7883a 	add	r3,r4,r3
100003d8:	10c7883a 	add	r3,r2,r3
100003dc:	e0bf8b17 	ldw	r2,-468(fp)
100003e0:	1085883a 	add	r2,r2,r2
100003e4:	1085883a 	add	r2,r2,r2
100003e8:	e13f8b04 	addi	r4,fp,-468
100003ec:	2085883a 	add	r2,r4,r2
100003f0:	10800904 	addi	r2,r2,36
100003f4:	10c00015 	stw	r3,0(r2)
	alt_u32 checksum[ROWS], readsum[ROWS];

	for (int j = 0; j < ROWS; j++)
	{
		checksum[j] = 0;
		for (int i = 0; i < COLUMNS; i++)
100003f8:	e0bf8c17 	ldw	r2,-464(fp)
100003fc:	10800044 	addi	r2,r2,1
10000400:	e0bf8c15 	stw	r2,-464(fp)
10000404:	e0bf8c17 	ldw	r2,-464(fp)
10000408:	10801410 	cmplti	r2,r2,80
1000040c:	103fdb1e 	bne	r2,zero,1000037c <__alt_data_end+0xf800037c>
	textVGAClr();

	//Register write and readback test
	alt_u32 checksum[ROWS], readsum[ROWS];

	for (int j = 0; j < ROWS; j++)
10000410:	e0bf8b17 	ldw	r2,-468(fp)
10000414:	10800044 	addi	r2,r2,1
10000418:	e0bf8b15 	stw	r2,-468(fp)
1000041c:	e0bf8b17 	ldw	r2,-468(fp)
10000420:	10800790 	cmplti	r2,r2,30
10000424:	103fcc1e 	bne	r2,zero,10000358 <__alt_data_end+0xf8000358>
		{
			vga_ctrl->VRAM[j*COLUMNS + i] = i + j;
			checksum[j] += i + j;
		}
	}
	for (int j = 0; j < ROWS; j++)
10000428:	e03f8d15 	stw	zero,-460(fp)
1000042c:	00005206 	br	10000578 <textVGATest+0x24c>
	{
		readsum[j] = 0;
10000430:	e0bf8d17 	ldw	r2,-460(fp)
10000434:	1085883a 	add	r2,r2,r2
10000438:	1085883a 	add	r2,r2,r2
1000043c:	e0ff8b04 	addi	r3,fp,-468
10000440:	1885883a 	add	r2,r3,r2
10000444:	10802704 	addi	r2,r2,156
10000448:	10000015 	stw	zero,0(r2)
		for (int i = 0; i < COLUMNS; i++)
1000044c:	e03f8e15 	stw	zero,-456(fp)
10000450:	00001c06 	br	100004c4 <textVGATest+0x198>
		{
			readsum[j] += vga_ctrl->VRAM[j*COLUMNS + i];
10000454:	d4200117 	ldw	r16,-32764(gp)
10000458:	01401404 	movi	r5,80
1000045c:	e13f8d17 	ldw	r4,-460(fp)
10000460:	000097c0 	call	1000097c <__mulsi3>
10000464:	1007883a 	mov	r3,r2
10000468:	e0bf8e17 	ldw	r2,-456(fp)
1000046c:	1885883a 	add	r2,r3,r2
10000470:	8085883a 	add	r2,r16,r2
10000474:	11000003 	ldbu	r4,0(r2)
10000478:	e0bf8d17 	ldw	r2,-460(fp)
1000047c:	1085883a 	add	r2,r2,r2
10000480:	1085883a 	add	r2,r2,r2
10000484:	e0ff8b04 	addi	r3,fp,-468
10000488:	1885883a 	add	r2,r3,r2
1000048c:	10802704 	addi	r2,r2,156
10000490:	10c00017 	ldw	r3,0(r2)
10000494:	20803fcc 	andi	r2,r4,255
10000498:	1887883a 	add	r3,r3,r2
1000049c:	e0bf8d17 	ldw	r2,-460(fp)
100004a0:	1085883a 	add	r2,r2,r2
100004a4:	1085883a 	add	r2,r2,r2
100004a8:	e13f8b04 	addi	r4,fp,-468
100004ac:	2085883a 	add	r2,r4,r2
100004b0:	10802704 	addi	r2,r2,156
100004b4:	10c00015 	stw	r3,0(r2)
		}
	}
	for (int j = 0; j < ROWS; j++)
	{
		readsum[j] = 0;
		for (int i = 0; i < COLUMNS; i++)
100004b8:	e0bf8e17 	ldw	r2,-456(fp)
100004bc:	10800044 	addi	r2,r2,1
100004c0:	e0bf8e15 	stw	r2,-456(fp)
100004c4:	e0bf8e17 	ldw	r2,-456(fp)
100004c8:	10801410 	cmplti	r2,r2,80
100004cc:	103fe11e 	bne	r2,zero,10000454 <__alt_data_end+0xf8000454>
		{
			readsum[j] += vga_ctrl->VRAM[j*COLUMNS + i];
			//printf ("%x \n\r", vga_ctrl->VRAM[j*COLUMNS + i]);
		}
		printf ("Row: %d, Checksum: %x, Read-back Checksum: %x\n\r", j, checksum[j], readsum[j]);
100004d0:	e0bf8d17 	ldw	r2,-460(fp)
100004d4:	1085883a 	add	r2,r2,r2
100004d8:	1085883a 	add	r2,r2,r2
100004dc:	e0ff8b04 	addi	r3,fp,-468
100004e0:	1885883a 	add	r2,r3,r2
100004e4:	10800904 	addi	r2,r2,36
100004e8:	10c00017 	ldw	r3,0(r2)
100004ec:	e0bf8d17 	ldw	r2,-460(fp)
100004f0:	1085883a 	add	r2,r2,r2
100004f4:	1085883a 	add	r2,r2,r2
100004f8:	e13f8b04 	addi	r4,fp,-468
100004fc:	2085883a 	add	r2,r4,r2
10000500:	10802704 	addi	r2,r2,156
10000504:	10800017 	ldw	r2,0(r2)
10000508:	100f883a 	mov	r7,r2
1000050c:	180d883a 	mov	r6,r3
10000510:	e17f8d17 	ldw	r5,-460(fp)
10000514:	01040074 	movhi	r4,4097
10000518:	21000204 	addi	r4,r4,8
1000051c:	0000b1c0 	call	10000b1c <printf>
		if (checksum[j] != readsum[j])
10000520:	e0bf8d17 	ldw	r2,-460(fp)
10000524:	1085883a 	add	r2,r2,r2
10000528:	1085883a 	add	r2,r2,r2
1000052c:	e0ff8b04 	addi	r3,fp,-468
10000530:	1885883a 	add	r2,r3,r2
10000534:	10800904 	addi	r2,r2,36
10000538:	10c00017 	ldw	r3,0(r2)
1000053c:	e0bf8d17 	ldw	r2,-460(fp)
10000540:	1085883a 	add	r2,r2,r2
10000544:	1085883a 	add	r2,r2,r2
10000548:	e13f8b04 	addi	r4,fp,-468
1000054c:	2085883a 	add	r2,r4,r2
10000550:	10802704 	addi	r2,r2,156
10000554:	10800017 	ldw	r2,0(r2)
10000558:	18800426 	beq	r3,r2,1000056c <textVGATest+0x240>
		{
			printf ("Checksum mismatch!, check your Avalon-MM code\n\r");
1000055c:	01040074 	movhi	r4,4097
10000560:	21000e04 	addi	r4,r4,56
10000564:	0000b1c0 	call	10000b1c <printf>
			while (1){};
10000568:	003fff06 	br	10000568 <__alt_data_end+0xf8000568>
		{
			vga_ctrl->VRAM[j*COLUMNS + i] = i + j;
			checksum[j] += i + j;
		}
	}
	for (int j = 0; j < ROWS; j++)
1000056c:	e0bf8d17 	ldw	r2,-460(fp)
10000570:	10800044 	addi	r2,r2,1
10000574:	e0bf8d15 	stw	r2,-460(fp)
10000578:	e0bf8d17 	ldw	r2,-460(fp)
1000057c:	10800790 	cmplti	r2,r2,30
10000580:	103fab1e 	bne	r2,zero,10000430 <__alt_data_end+0xf8000430>
		{
			printf ("Checksum mismatch!, check your Avalon-MM code\n\r");
			while (1){};
		}
	}
	printf ("Checksum code passed!...starting color test \n\r");
10000584:	01040074 	movhi	r4,4097
10000588:	21001a04 	addi	r4,r4,104
1000058c:	0000b1c0 	call	10000b1c <printf>
	usleep (500000);
10000590:	01000234 	movhi	r4,8
10000594:	21284804 	addi	r4,r4,-24288
10000598:	000e0400 	call	1000e040 <usleep>

	textVGASetColor(DIM_GRN, BRIGHT_GRN);
1000059c:	01403c04 	movi	r5,240
100005a0:	01001c04 	movi	r4,112
100005a4:	00002980 	call	10000298 <textVGASetColor>
	textVGAClr();
100005a8:	00002dc0 	call	100002dc <textVGAClr>
	char greentest[] = "This text should draw in green";
100005ac:	009cda74 	movhi	r2,29545
100005b0:	109a1504 	addi	r2,r2,26708
100005b4:	e0bfd015 	stw	r2,-192(fp)
100005b8:	009e1974 	movhi	r2,30821
100005bc:	109d0804 	addi	r2,r2,29728
100005c0:	e0bfd115 	stw	r2,-188(fp)
100005c4:	009a1cf4 	movhi	r2,26739
100005c8:	10881d04 	addi	r2,r2,8308
100005cc:	e0bfd215 	stw	r2,-184(fp)
100005d0:	00991b34 	movhi	r2,25708
100005d4:	109d5bc4 	addi	r2,r2,30063
100005d8:	e0bfd315 	stw	r2,-180(fp)
100005dc:	00985cb4 	movhi	r2,24946
100005e0:	10990804 	addi	r2,r2,25632
100005e4:	e0bfd415 	stw	r2,-176(fp)
100005e8:	009b9a74 	movhi	r2,28265
100005ec:	10881dc4 	addi	r2,r2,8311
100005f0:	e0bfd515 	stw	r2,-172(fp)
100005f4:	00995cb4 	movhi	r2,25970
100005f8:	1099c804 	addi	r2,r2,26400
100005fc:	e0bfd615 	stw	r2,-168(fp)
10000600:	009b9944 	movi	r2,28261
10000604:	e0bfd70d 	sth	r2,-164(fp)
10000608:	e03fd785 	stb	zero,-162(fp)
	{
		for (int j = 0; j < ROWS; j++)
1000060c:	e03f8f15 	stw	zero,-452(fp)
10000610:	00001006 	br	10000654 <textVGATest+0x328>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
10000614:	d4200117 	ldw	r16,-32764(gp)
10000618:	01401404 	movi	r5,80
1000061c:	e13f8f17 	ldw	r4,-452(fp)
10000620:	000097c0 	call	1000097c <__mulsi3>
10000624:	8087883a 	add	r3,r16,r2
10000628:	e0bf8f17 	ldw	r2,-452(fp)
1000062c:	1885883a 	add	r2,r3,r2
10000630:	1009883a 	mov	r4,r2
10000634:	e0bfd004 	addi	r2,fp,-192
10000638:	00c007c4 	movi	r3,31
1000063c:	180d883a 	mov	r6,r3
10000640:	100b883a 	mov	r5,r2
10000644:	00009a40 	call	100009a4 <memcpy>

	textVGASetColor(DIM_GRN, BRIGHT_GRN);
	textVGAClr();
	char greentest[] = "This text should draw in green";
	{
		for (int j = 0; j < ROWS; j++)
10000648:	e0bf8f17 	ldw	r2,-452(fp)
1000064c:	10800044 	addi	r2,r2,1
10000650:	e0bf8f15 	stw	r2,-452(fp)
10000654:	e0bf8f17 	ldw	r2,-452(fp)
10000658:	10800790 	cmplti	r2,r2,30
1000065c:	103fed1e 	bne	r2,zero,10000614 <__alt_data_end+0xf8000614>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
		}
	}
	usleep (500000);
10000660:	01000234 	movhi	r4,8
10000664:	21284804 	addi	r4,r4,-24288
10000668:	000e0400 	call	1000e040 <usleep>

	textVGASetColor(DIM_RED, BRIGHT_RED);
1000066c:	0143c004 	movi	r5,3840
10000670:	0101c004 	movi	r4,1792
10000674:	00002980 	call	10000298 <textVGASetColor>
	textVGAClr();
10000678:	00002dc0 	call	100002dc <textVGAClr>
	char redtest[] = "This text should draw in red";
1000067c:	00840074 	movhi	r2,4097
10000680:	10802804 	addi	r2,r2,160
10000684:	e0ffd7c4 	addi	r3,fp,-161
10000688:	1009883a 	mov	r4,r2
1000068c:	00800744 	movi	r2,29
10000690:	100d883a 	mov	r6,r2
10000694:	200b883a 	mov	r5,r4
10000698:	1809883a 	mov	r4,r3
1000069c:	00009a40 	call	100009a4 <memcpy>
	{
		for (int j = 0; j < ROWS; j++)
100006a0:	e03f9015 	stw	zero,-448(fp)
100006a4:	00001206 	br	100006f0 <textVGATest+0x3c4>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+(ROWS-j),redtest, sizeof(redtest));
100006a8:	d4200117 	ldw	r16,-32764(gp)
100006ac:	01401404 	movi	r5,80
100006b0:	e13f9017 	ldw	r4,-448(fp)
100006b4:	000097c0 	call	1000097c <__mulsi3>
100006b8:	8085883a 	add	r2,r16,r2
100006bc:	01000784 	movi	r4,30
100006c0:	e0ff9017 	ldw	r3,-448(fp)
100006c4:	20c7c83a 	sub	r3,r4,r3
100006c8:	10c5883a 	add	r2,r2,r3
100006cc:	1009883a 	mov	r4,r2
100006d0:	e0bfd7c4 	addi	r2,fp,-161
100006d4:	00c00744 	movi	r3,29
100006d8:	180d883a 	mov	r6,r3
100006dc:	100b883a 	mov	r5,r2
100006e0:	00009a40 	call	100009a4 <memcpy>

	textVGASetColor(DIM_RED, BRIGHT_RED);
	textVGAClr();
	char redtest[] = "This text should draw in red";
	{
		for (int j = 0; j < ROWS; j++)
100006e4:	e0bf9017 	ldw	r2,-448(fp)
100006e8:	10800044 	addi	r2,r2,1
100006ec:	e0bf9015 	stw	r2,-448(fp)
100006f0:	e0bf9017 	ldw	r2,-448(fp)
100006f4:	10800790 	cmplti	r2,r2,30
100006f8:	103feb1e 	bne	r2,zero,100006a8 <__alt_data_end+0xf80006a8>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+(ROWS-j),redtest, sizeof(redtest));
		}
	}
	usleep (500000);
100006fc:	01000234 	movhi	r4,8
10000700:	21284804 	addi	r4,r4,-24288
10000704:	000e0400 	call	1000e040 <usleep>
	textVGASetColor(DIM_BLU, BRIGHT_BLU);
10000708:	014003c4 	movi	r5,15
1000070c:	010001c4 	movi	r4,7
10000710:	00002980 	call	10000298 <textVGASetColor>
	textVGAClr();
10000714:	00002dc0 	call	100002dc <textVGAClr>
	char blutest[] = "This text should draw in blue";
10000718:	009cda74 	movhi	r2,29545
1000071c:	109a1504 	addi	r2,r2,26708
10000720:	e0bfdf15 	stw	r2,-132(fp)
10000724:	009e1974 	movhi	r2,30821
10000728:	109d0804 	addi	r2,r2,29728
1000072c:	e0bfe015 	stw	r2,-128(fp)
10000730:	009a1cf4 	movhi	r2,26739
10000734:	10881d04 	addi	r2,r2,8308
10000738:	e0bfe115 	stw	r2,-124(fp)
1000073c:	00991b34 	movhi	r2,25708
10000740:	109d5bc4 	addi	r2,r2,30063
10000744:	e0bfe215 	stw	r2,-120(fp)
10000748:	00985cb4 	movhi	r2,24946
1000074c:	10990804 	addi	r2,r2,25632
10000750:	e0bfe315 	stw	r2,-116(fp)
10000754:	009b9a74 	movhi	r2,28265
10000758:	10881dc4 	addi	r2,r2,8311
1000075c:	e0bfe415 	stw	r2,-112(fp)
10000760:	009d5b34 	movhi	r2,30060
10000764:	10988804 	addi	r2,r2,25120
10000768:	e0bfe515 	stw	r2,-108(fp)
1000076c:	00801944 	movi	r2,101
10000770:	e0bfe60d 	sth	r2,-104(fp)
	{
		for (int j = 0; j < ROWS; j++)
10000774:	e03f9115 	stw	zero,-444(fp)
10000778:	00000e06 	br	100007b4 <textVGATest+0x488>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS],blutest, sizeof(blutest));
1000077c:	d4200117 	ldw	r16,-32764(gp)
10000780:	01401404 	movi	r5,80
10000784:	e13f9117 	ldw	r4,-444(fp)
10000788:	000097c0 	call	1000097c <__mulsi3>
1000078c:	8085883a 	add	r2,r16,r2
10000790:	1009883a 	mov	r4,r2
10000794:	e0bfdf04 	addi	r2,fp,-132
10000798:	00c00784 	movi	r3,30
1000079c:	180d883a 	mov	r6,r3
100007a0:	100b883a 	mov	r5,r2
100007a4:	00009a40 	call	100009a4 <memcpy>
	usleep (500000);
	textVGASetColor(DIM_BLU, BRIGHT_BLU);
	textVGAClr();
	char blutest[] = "This text should draw in blue";
	{
		for (int j = 0; j < ROWS; j++)
100007a8:	e0bf9117 	ldw	r2,-444(fp)
100007ac:	10800044 	addi	r2,r2,1
100007b0:	e0bf9115 	stw	r2,-444(fp)
100007b4:	e0bf9117 	ldw	r2,-444(fp)
100007b8:	10800790 	cmplti	r2,r2,30
100007bc:	103fef1e 	bne	r2,zero,1000077c <__alt_data_end+0xf800077c>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS],blutest, sizeof(blutest));
		}
	}
	usleep (500000);
100007c0:	01000234 	movhi	r4,8
100007c4:	21284804 	addi	r4,r4,-24288
100007c8:	000e0400 	call	1000e040 <usleep>
	textVGAClr();
100007cc:	00002dc0 	call	100002dc <textVGAClr>
	char inverted[] = "This text should draw inverted";
100007d0:	00840074 	movhi	r2,4097
100007d4:	10803004 	addi	r2,r2,192
100007d8:	e0ffe684 	addi	r3,fp,-102
100007dc:	1009883a 	mov	r4,r2
100007e0:	008007c4 	movi	r2,31
100007e4:	100d883a 	mov	r6,r2
100007e8:	200b883a 	mov	r5,r4
100007ec:	1809883a 	mov	r4,r3
100007f0:	00009a40 	call	100009a4 <memcpy>
	for (int i = 0; i < sizeof(inverted); i++)
100007f4:	e03f9215 	stw	zero,-440(fp)
100007f8:	00000e06 	br	10000834 <textVGATest+0x508>
		inverted[i] |= 0x80;
100007fc:	e0ffe684 	addi	r3,fp,-102
10000800:	e0bf9217 	ldw	r2,-440(fp)
10000804:	1885883a 	add	r2,r3,r2
10000808:	10c00003 	ldbu	r3,0(r2)
1000080c:	00bfe004 	movi	r2,-128
10000810:	1884b03a 	or	r2,r3,r2
10000814:	1009883a 	mov	r4,r2
10000818:	e0ffe684 	addi	r3,fp,-102
1000081c:	e0bf9217 	ldw	r2,-440(fp)
10000820:	1885883a 	add	r2,r3,r2
10000824:	11000005 	stb	r4,0(r2)
		}
	}
	usleep (500000);
	textVGAClr();
	char inverted[] = "This text should draw inverted";
	for (int i = 0; i < sizeof(inverted); i++)
10000828:	e0bf9217 	ldw	r2,-440(fp)
1000082c:	10800044 	addi	r2,r2,1
10000830:	e0bf9215 	stw	r2,-440(fp)
10000834:	e0bf9217 	ldw	r2,-440(fp)
10000838:	108007f0 	cmpltui	r2,r2,31
1000083c:	103fef1e 	bne	r2,zero,100007fc <__alt_data_end+0xf80007fc>
		inverted[i] |= 0x80;

	textVGASetColor(DIM_GRN, BRIGHT_GRN);
10000840:	01403c04 	movi	r5,240
10000844:	01001c04 	movi	r4,112
10000848:	00002980 	call	10000298 <textVGASetColor>
	{
		for (int j = 0; j < ROWS; j++)
1000084c:	e03f9315 	stw	zero,-436(fp)
10000850:	00002106 	br	100008d8 <textVGATest+0x5ac>
		{
			if (j%2==0)
10000854:	e0bf9317 	ldw	r2,-436(fp)
10000858:	1080004c 	andi	r2,r2,1
1000085c:	10000e1e 	bne	r2,zero,10000898 <textVGATest+0x56c>
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
10000860:	d4200117 	ldw	r16,-32764(gp)
10000864:	01401404 	movi	r5,80
10000868:	e13f9317 	ldw	r4,-436(fp)
1000086c:	000097c0 	call	1000097c <__mulsi3>
10000870:	8087883a 	add	r3,r16,r2
10000874:	e0bf9317 	ldw	r2,-436(fp)
10000878:	1885883a 	add	r2,r3,r2
1000087c:	1009883a 	mov	r4,r2
10000880:	e0bfd004 	addi	r2,fp,-192
10000884:	00c007c4 	movi	r3,31
10000888:	180d883a 	mov	r6,r3
1000088c:	100b883a 	mov	r5,r2
10000890:	00009a40 	call	100009a4 <memcpy>
10000894:	00000d06 	br	100008cc <textVGATest+0x5a0>
			else
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,inverted, sizeof(inverted));
10000898:	d4200117 	ldw	r16,-32764(gp)
1000089c:	01401404 	movi	r5,80
100008a0:	e13f9317 	ldw	r4,-436(fp)
100008a4:	000097c0 	call	1000097c <__mulsi3>
100008a8:	8087883a 	add	r3,r16,r2
100008ac:	e0bf9317 	ldw	r2,-436(fp)
100008b0:	1885883a 	add	r2,r3,r2
100008b4:	1009883a 	mov	r4,r2
100008b8:	e0bfe684 	addi	r2,fp,-102
100008bc:	00c007c4 	movi	r3,31
100008c0:	180d883a 	mov	r6,r3
100008c4:	100b883a 	mov	r5,r2
100008c8:	00009a40 	call	100009a4 <memcpy>
	for (int i = 0; i < sizeof(inverted); i++)
		inverted[i] |= 0x80;

	textVGASetColor(DIM_GRN, BRIGHT_GRN);
	{
		for (int j = 0; j < ROWS; j++)
100008cc:	e0bf9317 	ldw	r2,-436(fp)
100008d0:	10800044 	addi	r2,r2,1
100008d4:	e0bf9315 	stw	r2,-436(fp)
100008d8:	e0bf9317 	ldw	r2,-436(fp)
100008dc:	10800790 	cmplti	r2,r2,30
100008e0:	103fdc1e 	bne	r2,zero,10000854 <__alt_data_end+0xf8000854>
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
			else
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,inverted, sizeof(inverted));
		}
	}
	usleep (500000);
100008e4:	01000234 	movhi	r4,8
100008e8:	21284804 	addi	r4,r4,-24288
100008ec:	000e0400 	call	1000e040 <usleep>
	textVGASetColor(BLACK, WHITE);
100008f0:	0143ffc4 	movi	r5,4095
100008f4:	0009883a 	mov	r4,zero
100008f8:	00002980 	call	10000298 <textVGASetColor>
	textVGAClr();
100008fc:	00002dc0 	call	100002dc <textVGAClr>

	char completed[] = "All visual tests completed, verify on-screen results are correct.";
10000900:	00840074 	movhi	r2,4097
10000904:	10803804 	addi	r2,r2,224
10000908:	e0ffee44 	addi	r3,fp,-71
1000090c:	1009883a 	mov	r4,r2
10000910:	00801084 	movi	r2,66
10000914:	100d883a 	mov	r6,r2
10000918:	200b883a 	mov	r5,r4
1000091c:	1809883a 	mov	r4,r3
10000920:	00009a40 	call	100009a4 <memcpy>
	memcpy((void*)&vga_ctrl->VRAM[0],completed, sizeof(completed));
10000924:	d0a00117 	ldw	r2,-32764(gp)
10000928:	1009883a 	mov	r4,r2
1000092c:	e0bfee44 	addi	r2,fp,-71
10000930:	00c01084 	movi	r3,66
10000934:	180d883a 	mov	r6,r3
10000938:	100b883a 	mov	r5,r2
1000093c:	00009a40 	call	100009a4 <memcpy>
	printf( "%s \n\r", completed);
10000940:	e0bfee44 	addi	r2,fp,-71
10000944:	100b883a 	mov	r5,r2
10000948:	01040074 	movhi	r4,4097
1000094c:	21002604 	addi	r4,r4,152
10000950:	0000b1c0 	call	10000b1c <printf>

	usleep (1000000);
10000954:	010003f4 	movhi	r4,15
10000958:	21109004 	addi	r4,r4,16960
1000095c:	000e0400 	call	1000e040 <usleep>

}
10000960:	0001883a 	nop
10000964:	e6ffff04 	addi	sp,fp,-4
10000968:	dfc00217 	ldw	ra,8(sp)
1000096c:	df000117 	ldw	fp,4(sp)
10000970:	dc000017 	ldw	r16,0(sp)
10000974:	dec00304 	addi	sp,sp,12
10000978:	f800283a 	ret

1000097c <__mulsi3>:
1000097c:	0005883a 	mov	r2,zero
10000980:	20000726 	beq	r4,zero,100009a0 <__mulsi3+0x24>
10000984:	20c0004c 	andi	r3,r4,1
10000988:	2008d07a 	srli	r4,r4,1
1000098c:	18000126 	beq	r3,zero,10000994 <__mulsi3+0x18>
10000990:	1145883a 	add	r2,r2,r5
10000994:	294b883a 	add	r5,r5,r5
10000998:	203ffa1e 	bne	r4,zero,10000984 <__alt_data_end+0xf8000984>
1000099c:	f800283a 	ret
100009a0:	f800283a 	ret

100009a4 <memcpy>:
100009a4:	defffd04 	addi	sp,sp,-12
100009a8:	dfc00215 	stw	ra,8(sp)
100009ac:	dc400115 	stw	r17,4(sp)
100009b0:	dc000015 	stw	r16,0(sp)
100009b4:	00c003c4 	movi	r3,15
100009b8:	2005883a 	mov	r2,r4
100009bc:	1980452e 	bgeu	r3,r6,10000ad4 <memcpy+0x130>
100009c0:	2906b03a 	or	r3,r5,r4
100009c4:	18c000cc 	andi	r3,r3,3
100009c8:	1800441e 	bne	r3,zero,10000adc <memcpy+0x138>
100009cc:	347ffc04 	addi	r17,r6,-16
100009d0:	8822d13a 	srli	r17,r17,4
100009d4:	28c00104 	addi	r3,r5,4
100009d8:	23400104 	addi	r13,r4,4
100009dc:	8820913a 	slli	r16,r17,4
100009e0:	2b000204 	addi	r12,r5,8
100009e4:	22c00204 	addi	r11,r4,8
100009e8:	84000504 	addi	r16,r16,20
100009ec:	2a800304 	addi	r10,r5,12
100009f0:	22400304 	addi	r9,r4,12
100009f4:	2c21883a 	add	r16,r5,r16
100009f8:	2811883a 	mov	r8,r5
100009fc:	200f883a 	mov	r7,r4
10000a00:	41000017 	ldw	r4,0(r8)
10000a04:	1fc00017 	ldw	ra,0(r3)
10000a08:	63c00017 	ldw	r15,0(r12)
10000a0c:	39000015 	stw	r4,0(r7)
10000a10:	53800017 	ldw	r14,0(r10)
10000a14:	6fc00015 	stw	ra,0(r13)
10000a18:	5bc00015 	stw	r15,0(r11)
10000a1c:	4b800015 	stw	r14,0(r9)
10000a20:	18c00404 	addi	r3,r3,16
10000a24:	39c00404 	addi	r7,r7,16
10000a28:	42000404 	addi	r8,r8,16
10000a2c:	6b400404 	addi	r13,r13,16
10000a30:	63000404 	addi	r12,r12,16
10000a34:	5ac00404 	addi	r11,r11,16
10000a38:	52800404 	addi	r10,r10,16
10000a3c:	4a400404 	addi	r9,r9,16
10000a40:	1c3fef1e 	bne	r3,r16,10000a00 <__alt_data_end+0xf8000a00>
10000a44:	89c00044 	addi	r7,r17,1
10000a48:	380e913a 	slli	r7,r7,4
10000a4c:	310003cc 	andi	r4,r6,15
10000a50:	02c000c4 	movi	r11,3
10000a54:	11c7883a 	add	r3,r2,r7
10000a58:	29cb883a 	add	r5,r5,r7
10000a5c:	5900212e 	bgeu	r11,r4,10000ae4 <memcpy+0x140>
10000a60:	1813883a 	mov	r9,r3
10000a64:	2811883a 	mov	r8,r5
10000a68:	200f883a 	mov	r7,r4
10000a6c:	42800017 	ldw	r10,0(r8)
10000a70:	4a400104 	addi	r9,r9,4
10000a74:	39ffff04 	addi	r7,r7,-4
10000a78:	4abfff15 	stw	r10,-4(r9)
10000a7c:	42000104 	addi	r8,r8,4
10000a80:	59fffa36 	bltu	r11,r7,10000a6c <__alt_data_end+0xf8000a6c>
10000a84:	213fff04 	addi	r4,r4,-4
10000a88:	2008d0ba 	srli	r4,r4,2
10000a8c:	318000cc 	andi	r6,r6,3
10000a90:	21000044 	addi	r4,r4,1
10000a94:	2109883a 	add	r4,r4,r4
10000a98:	2109883a 	add	r4,r4,r4
10000a9c:	1907883a 	add	r3,r3,r4
10000aa0:	290b883a 	add	r5,r5,r4
10000aa4:	30000626 	beq	r6,zero,10000ac0 <memcpy+0x11c>
10000aa8:	198d883a 	add	r6,r3,r6
10000aac:	29c00003 	ldbu	r7,0(r5)
10000ab0:	18c00044 	addi	r3,r3,1
10000ab4:	29400044 	addi	r5,r5,1
10000ab8:	19ffffc5 	stb	r7,-1(r3)
10000abc:	19bffb1e 	bne	r3,r6,10000aac <__alt_data_end+0xf8000aac>
10000ac0:	dfc00217 	ldw	ra,8(sp)
10000ac4:	dc400117 	ldw	r17,4(sp)
10000ac8:	dc000017 	ldw	r16,0(sp)
10000acc:	dec00304 	addi	sp,sp,12
10000ad0:	f800283a 	ret
10000ad4:	2007883a 	mov	r3,r4
10000ad8:	003ff206 	br	10000aa4 <__alt_data_end+0xf8000aa4>
10000adc:	2007883a 	mov	r3,r4
10000ae0:	003ff106 	br	10000aa8 <__alt_data_end+0xf8000aa8>
10000ae4:	200d883a 	mov	r6,r4
10000ae8:	003fee06 	br	10000aa4 <__alt_data_end+0xf8000aa4>

10000aec <_printf_r>:
10000aec:	defffd04 	addi	sp,sp,-12
10000af0:	2805883a 	mov	r2,r5
10000af4:	dfc00015 	stw	ra,0(sp)
10000af8:	d9800115 	stw	r6,4(sp)
10000afc:	d9c00215 	stw	r7,8(sp)
10000b00:	21400217 	ldw	r5,8(r4)
10000b04:	d9c00104 	addi	r7,sp,4
10000b08:	100d883a 	mov	r6,r2
10000b0c:	0000b580 	call	10000b58 <___vfprintf_internal_r>
10000b10:	dfc00017 	ldw	ra,0(sp)
10000b14:	dec00304 	addi	sp,sp,12
10000b18:	f800283a 	ret

10000b1c <printf>:
10000b1c:	defffc04 	addi	sp,sp,-16
10000b20:	dfc00015 	stw	ra,0(sp)
10000b24:	d9400115 	stw	r5,4(sp)
10000b28:	d9800215 	stw	r6,8(sp)
10000b2c:	d9c00315 	stw	r7,12(sp)
10000b30:	00840074 	movhi	r2,4097
10000b34:	1087b604 	addi	r2,r2,7896
10000b38:	10800017 	ldw	r2,0(r2)
10000b3c:	200b883a 	mov	r5,r4
10000b40:	d9800104 	addi	r6,sp,4
10000b44:	11000217 	ldw	r4,8(r2)
10000b48:	0002e340 	call	10002e34 <__vfprintf_internal>
10000b4c:	dfc00017 	ldw	ra,0(sp)
10000b50:	dec00404 	addi	sp,sp,16
10000b54:	f800283a 	ret

10000b58 <___vfprintf_internal_r>:
10000b58:	deffb804 	addi	sp,sp,-288
10000b5c:	dfc04715 	stw	ra,284(sp)
10000b60:	ddc04515 	stw	r23,276(sp)
10000b64:	dd404315 	stw	r21,268(sp)
10000b68:	d9002d15 	stw	r4,180(sp)
10000b6c:	282f883a 	mov	r23,r5
10000b70:	302b883a 	mov	r21,r6
10000b74:	d9c02e15 	stw	r7,184(sp)
10000b78:	df004615 	stw	fp,280(sp)
10000b7c:	dd804415 	stw	r22,272(sp)
10000b80:	dd004215 	stw	r20,264(sp)
10000b84:	dcc04115 	stw	r19,260(sp)
10000b88:	dc804015 	stw	r18,256(sp)
10000b8c:	dc403f15 	stw	r17,252(sp)
10000b90:	dc003e15 	stw	r16,248(sp)
10000b94:	00055d00 	call	100055d0 <_localeconv_r>
10000b98:	10800017 	ldw	r2,0(r2)
10000b9c:	1009883a 	mov	r4,r2
10000ba0:	d8803415 	stw	r2,208(sp)
10000ba4:	000756c0 	call	1000756c <strlen>
10000ba8:	d8803715 	stw	r2,220(sp)
10000bac:	d8802d17 	ldw	r2,180(sp)
10000bb0:	10000226 	beq	r2,zero,10000bbc <___vfprintf_internal_r+0x64>
10000bb4:	10800e17 	ldw	r2,56(r2)
10000bb8:	1000fb26 	beq	r2,zero,10000fa8 <___vfprintf_internal_r+0x450>
10000bbc:	b880030b 	ldhu	r2,12(r23)
10000bc0:	10c8000c 	andi	r3,r2,8192
10000bc4:	1800061e 	bne	r3,zero,10000be0 <___vfprintf_internal_r+0x88>
10000bc8:	b9001917 	ldw	r4,100(r23)
10000bcc:	00f7ffc4 	movi	r3,-8193
10000bd0:	10880014 	ori	r2,r2,8192
10000bd4:	20c6703a 	and	r3,r4,r3
10000bd8:	b880030d 	sth	r2,12(r23)
10000bdc:	b8c01915 	stw	r3,100(r23)
10000be0:	10c0020c 	andi	r3,r2,8
10000be4:	1800c326 	beq	r3,zero,10000ef4 <___vfprintf_internal_r+0x39c>
10000be8:	b8c00417 	ldw	r3,16(r23)
10000bec:	1800c126 	beq	r3,zero,10000ef4 <___vfprintf_internal_r+0x39c>
10000bf0:	1080068c 	andi	r2,r2,26
10000bf4:	00c00284 	movi	r3,10
10000bf8:	10c0c626 	beq	r2,r3,10000f14 <___vfprintf_internal_r+0x3bc>
10000bfc:	d8c00404 	addi	r3,sp,16
10000c00:	05040074 	movhi	r20,4097
10000c04:	d9001e04 	addi	r4,sp,120
10000c08:	a5005984 	addi	r20,r20,358
10000c0c:	d8c01e15 	stw	r3,120(sp)
10000c10:	d8002015 	stw	zero,128(sp)
10000c14:	d8001f15 	stw	zero,124(sp)
10000c18:	d8003315 	stw	zero,204(sp)
10000c1c:	d8003615 	stw	zero,216(sp)
10000c20:	d8003815 	stw	zero,224(sp)
10000c24:	1811883a 	mov	r8,r3
10000c28:	d8003915 	stw	zero,228(sp)
10000c2c:	d8003a15 	stw	zero,232(sp)
10000c30:	d8002f15 	stw	zero,188(sp)
10000c34:	d9002815 	stw	r4,160(sp)
10000c38:	a8800007 	ldb	r2,0(r21)
10000c3c:	10028b26 	beq	r2,zero,1000166c <___vfprintf_internal_r+0xb14>
10000c40:	00c00944 	movi	r3,37
10000c44:	a823883a 	mov	r17,r21
10000c48:	10c0021e 	bne	r2,r3,10000c54 <___vfprintf_internal_r+0xfc>
10000c4c:	00001406 	br	10000ca0 <___vfprintf_internal_r+0x148>
10000c50:	10c00326 	beq	r2,r3,10000c60 <___vfprintf_internal_r+0x108>
10000c54:	8c400044 	addi	r17,r17,1
10000c58:	88800007 	ldb	r2,0(r17)
10000c5c:	103ffc1e 	bne	r2,zero,10000c50 <__alt_data_end+0xf8000c50>
10000c60:	8d61c83a 	sub	r16,r17,r21
10000c64:	80000e26 	beq	r16,zero,10000ca0 <___vfprintf_internal_r+0x148>
10000c68:	d8c02017 	ldw	r3,128(sp)
10000c6c:	d8801f17 	ldw	r2,124(sp)
10000c70:	45400015 	stw	r21,0(r8)
10000c74:	1c07883a 	add	r3,r3,r16
10000c78:	10800044 	addi	r2,r2,1
10000c7c:	d8c02015 	stw	r3,128(sp)
10000c80:	44000115 	stw	r16,4(r8)
10000c84:	d8801f15 	stw	r2,124(sp)
10000c88:	00c001c4 	movi	r3,7
10000c8c:	1880a916 	blt	r3,r2,10000f34 <___vfprintf_internal_r+0x3dc>
10000c90:	42000204 	addi	r8,r8,8
10000c94:	d9402f17 	ldw	r5,188(sp)
10000c98:	2c0b883a 	add	r5,r5,r16
10000c9c:	d9402f15 	stw	r5,188(sp)
10000ca0:	88800007 	ldb	r2,0(r17)
10000ca4:	1000aa26 	beq	r2,zero,10000f50 <___vfprintf_internal_r+0x3f8>
10000ca8:	8d400044 	addi	r21,r17,1
10000cac:	8c400047 	ldb	r17,1(r17)
10000cb0:	0021883a 	mov	r16,zero
10000cb4:	00bfffc4 	movi	r2,-1
10000cb8:	0025883a 	mov	r18,zero
10000cbc:	dc002905 	stb	r16,164(sp)
10000cc0:	d8002785 	stb	zero,158(sp)
10000cc4:	d8002b05 	stb	zero,172(sp)
10000cc8:	d8802a15 	stw	r2,168(sp)
10000ccc:	d8003115 	stw	zero,196(sp)
10000cd0:	04c01604 	movi	r19,88
10000cd4:	05800244 	movi	r22,9
10000cd8:	9021883a 	mov	r16,r18
10000cdc:	4039883a 	mov	fp,r8
10000ce0:	ad400044 	addi	r21,r21,1
10000ce4:	88bff804 	addi	r2,r17,-32
10000ce8:	98833236 	bltu	r19,r2,100019b4 <___vfprintf_internal_r+0xe5c>
10000cec:	100490ba 	slli	r2,r2,2
10000cf0:	00c40034 	movhi	r3,4096
10000cf4:	18c34104 	addi	r3,r3,3332
10000cf8:	10c5883a 	add	r2,r2,r3
10000cfc:	10800017 	ldw	r2,0(r2)
10000d00:	1000683a 	jmp	r2
10000d04:	100018ac 	andhi	zero,r2,98
10000d08:	100019b4 	orhi	zero,r2,102
10000d0c:	100019b4 	orhi	zero,r2,102
10000d10:	100018cc 	andi	zero,r2,99
10000d14:	100019b4 	orhi	zero,r2,102
10000d18:	100019b4 	orhi	zero,r2,102
10000d1c:	100019b4 	orhi	zero,r2,102
10000d20:	100019b4 	orhi	zero,r2,102
10000d24:	100019b4 	orhi	zero,r2,102
10000d28:	100019b4 	orhi	zero,r2,102
10000d2c:	10000fb4 	orhi	zero,r2,62
10000d30:	100017bc 	xorhi	zero,r2,94
10000d34:	100019b4 	orhi	zero,r2,102
10000d38:	10000e78 	rdprs	zero,r2,57
10000d3c:	10000fd8 	cmpnei	zero,r2,63
10000d40:	100019b4 	orhi	zero,r2,102
10000d44:	10001028 	cmpgeui	zero,r2,64
10000d48:	10001034 	orhi	zero,r2,64
10000d4c:	10001034 	orhi	zero,r2,64
10000d50:	10001034 	orhi	zero,r2,64
10000d54:	10001034 	orhi	zero,r2,64
10000d58:	10001034 	orhi	zero,r2,64
10000d5c:	10001034 	orhi	zero,r2,64
10000d60:	10001034 	orhi	zero,r2,64
10000d64:	10001034 	orhi	zero,r2,64
10000d68:	10001034 	orhi	zero,r2,64
10000d6c:	100019b4 	orhi	zero,r2,102
10000d70:	100019b4 	orhi	zero,r2,102
10000d74:	100019b4 	orhi	zero,r2,102
10000d78:	100019b4 	orhi	zero,r2,102
10000d7c:	100019b4 	orhi	zero,r2,102
10000d80:	100019b4 	orhi	zero,r2,102
10000d84:	100019b4 	orhi	zero,r2,102
10000d88:	100019b4 	orhi	zero,r2,102
10000d8c:	100019b4 	orhi	zero,r2,102
10000d90:	100019b4 	orhi	zero,r2,102
10000d94:	10001070 	cmpltui	zero,r2,65
10000d98:	10001138 	rdprs	zero,r2,68
10000d9c:	100019b4 	orhi	zero,r2,102
10000da0:	10001138 	rdprs	zero,r2,68
10000da4:	100019b4 	orhi	zero,r2,102
10000da8:	100019b4 	orhi	zero,r2,102
10000dac:	100019b4 	orhi	zero,r2,102
10000db0:	100019b4 	orhi	zero,r2,102
10000db4:	100011e4 	muli	zero,r2,71
10000db8:	100019b4 	orhi	zero,r2,102
10000dbc:	100019b4 	orhi	zero,r2,102
10000dc0:	100011f0 	cmpltui	zero,r2,71
10000dc4:	100019b4 	orhi	zero,r2,102
10000dc8:	100019b4 	orhi	zero,r2,102
10000dcc:	100019b4 	orhi	zero,r2,102
10000dd0:	100019b4 	orhi	zero,r2,102
10000dd4:	100019b4 	orhi	zero,r2,102
10000dd8:	10001674 	orhi	zero,r2,89
10000ddc:	100019b4 	orhi	zero,r2,102
10000de0:	100019b4 	orhi	zero,r2,102
10000de4:	100016e0 	cmpeqi	zero,r2,91
10000de8:	100019b4 	orhi	zero,r2,102
10000dec:	100019b4 	orhi	zero,r2,102
10000df0:	100019b4 	orhi	zero,r2,102
10000df4:	100019b4 	orhi	zero,r2,102
10000df8:	100019b4 	orhi	zero,r2,102
10000dfc:	100019b4 	orhi	zero,r2,102
10000e00:	100019b4 	orhi	zero,r2,102
10000e04:	100019b4 	orhi	zero,r2,102
10000e08:	100019b4 	orhi	zero,r2,102
10000e0c:	100019b4 	orhi	zero,r2,102
10000e10:	10001958 	cmpnei	zero,r2,101
10000e14:	100018d8 	cmpnei	zero,r2,99
10000e18:	10001138 	rdprs	zero,r2,68
10000e1c:	10001138 	rdprs	zero,r2,68
10000e20:	10001138 	rdprs	zero,r2,68
10000e24:	100018f8 	rdprs	zero,r2,99
10000e28:	100018d8 	cmpnei	zero,r2,99
10000e2c:	100019b4 	orhi	zero,r2,102
10000e30:	100019b4 	orhi	zero,r2,102
10000e34:	10001904 	addi	zero,r2,100
10000e38:	100019b4 	orhi	zero,r2,102
10000e3c:	10001918 	cmpnei	zero,r2,100
10000e40:	1000179c 	xori	zero,r2,94
10000e44:	10000e84 	addi	zero,r2,58
10000e48:	100017d4 	ori	zero,r2,95
10000e4c:	100019b4 	orhi	zero,r2,102
10000e50:	100017e0 	cmpeqi	zero,r2,95
10000e54:	100019b4 	orhi	zero,r2,102
10000e58:	10001844 	addi	zero,r2,97
10000e5c:	100019b4 	orhi	zero,r2,102
10000e60:	100019b4 	orhi	zero,r2,102
10000e64:	10001864 	muli	zero,r2,97
10000e68:	d8c03117 	ldw	r3,196(sp)
10000e6c:	d8802e15 	stw	r2,184(sp)
10000e70:	00c7c83a 	sub	r3,zero,r3
10000e74:	d8c03115 	stw	r3,196(sp)
10000e78:	84000114 	ori	r16,r16,4
10000e7c:	ac400007 	ldb	r17,0(r21)
10000e80:	003f9706 	br	10000ce0 <__alt_data_end+0xf8000ce0>
10000e84:	00800c04 	movi	r2,48
10000e88:	d8802705 	stb	r2,156(sp)
10000e8c:	00801e04 	movi	r2,120
10000e90:	d8802745 	stb	r2,157(sp)
10000e94:	d9002a17 	ldw	r4,168(sp)
10000e98:	d8802e17 	ldw	r2,184(sp)
10000e9c:	d8002785 	stb	zero,158(sp)
10000ea0:	e011883a 	mov	r8,fp
10000ea4:	10c00104 	addi	r3,r2,4
10000ea8:	14c00017 	ldw	r19,0(r2)
10000eac:	002d883a 	mov	r22,zero
10000eb0:	80800094 	ori	r2,r16,2
10000eb4:	2002ca16 	blt	r4,zero,100019e0 <___vfprintf_internal_r+0xe88>
10000eb8:	00bfdfc4 	movi	r2,-129
10000ebc:	80a4703a 	and	r18,r16,r2
10000ec0:	d8c02e15 	stw	r3,184(sp)
10000ec4:	94800094 	ori	r18,r18,2
10000ec8:	9802b41e 	bne	r19,zero,1000199c <___vfprintf_internal_r+0xe44>
10000ecc:	01440074 	movhi	r5,4097
10000ed0:	29405204 	addi	r5,r5,328
10000ed4:	d9403915 	stw	r5,228(sp)
10000ed8:	04401e04 	movi	r17,120
10000edc:	d8802a17 	ldw	r2,168(sp)
10000ee0:	0039883a 	mov	fp,zero
10000ee4:	1001fa26 	beq	r2,zero,100016d0 <___vfprintf_internal_r+0xb78>
10000ee8:	0027883a 	mov	r19,zero
10000eec:	002d883a 	mov	r22,zero
10000ef0:	00021906 	br	10001758 <___vfprintf_internal_r+0xc00>
10000ef4:	d9002d17 	ldw	r4,180(sp)
10000ef8:	b80b883a 	mov	r5,r23
10000efc:	0002f0c0 	call	10002f0c <__swsetup_r>
10000f00:	1005dc1e 	bne	r2,zero,10002674 <___vfprintf_internal_r+0x1b1c>
10000f04:	b880030b 	ldhu	r2,12(r23)
10000f08:	00c00284 	movi	r3,10
10000f0c:	1080068c 	andi	r2,r2,26
10000f10:	10ff3a1e 	bne	r2,r3,10000bfc <__alt_data_end+0xf8000bfc>
10000f14:	b880038f 	ldh	r2,14(r23)
10000f18:	103f3816 	blt	r2,zero,10000bfc <__alt_data_end+0xf8000bfc>
10000f1c:	d9c02e17 	ldw	r7,184(sp)
10000f20:	d9002d17 	ldw	r4,180(sp)
10000f24:	a80d883a 	mov	r6,r21
10000f28:	b80b883a 	mov	r5,r23
10000f2c:	0002e500 	call	10002e50 <__sbprintf>
10000f30:	00001106 	br	10000f78 <___vfprintf_internal_r+0x420>
10000f34:	d9002d17 	ldw	r4,180(sp)
10000f38:	d9801e04 	addi	r6,sp,120
10000f3c:	b80b883a 	mov	r5,r23
10000f40:	00077000 	call	10007700 <__sprint_r>
10000f44:	1000081e 	bne	r2,zero,10000f68 <___vfprintf_internal_r+0x410>
10000f48:	da000404 	addi	r8,sp,16
10000f4c:	003f5106 	br	10000c94 <__alt_data_end+0xf8000c94>
10000f50:	d8802017 	ldw	r2,128(sp)
10000f54:	10000426 	beq	r2,zero,10000f68 <___vfprintf_internal_r+0x410>
10000f58:	d9002d17 	ldw	r4,180(sp)
10000f5c:	d9801e04 	addi	r6,sp,120
10000f60:	b80b883a 	mov	r5,r23
10000f64:	00077000 	call	10007700 <__sprint_r>
10000f68:	b880030b 	ldhu	r2,12(r23)
10000f6c:	1080100c 	andi	r2,r2,64
10000f70:	1005c01e 	bne	r2,zero,10002674 <___vfprintf_internal_r+0x1b1c>
10000f74:	d8802f17 	ldw	r2,188(sp)
10000f78:	dfc04717 	ldw	ra,284(sp)
10000f7c:	df004617 	ldw	fp,280(sp)
10000f80:	ddc04517 	ldw	r23,276(sp)
10000f84:	dd804417 	ldw	r22,272(sp)
10000f88:	dd404317 	ldw	r21,268(sp)
10000f8c:	dd004217 	ldw	r20,264(sp)
10000f90:	dcc04117 	ldw	r19,260(sp)
10000f94:	dc804017 	ldw	r18,256(sp)
10000f98:	dc403f17 	ldw	r17,252(sp)
10000f9c:	dc003e17 	ldw	r16,248(sp)
10000fa0:	dec04804 	addi	sp,sp,288
10000fa4:	f800283a 	ret
10000fa8:	d9002d17 	ldw	r4,180(sp)
10000fac:	0004f180 	call	10004f18 <__sinit>
10000fb0:	003f0206 	br	10000bbc <__alt_data_end+0xf8000bbc>
10000fb4:	d9002e17 	ldw	r4,184(sp)
10000fb8:	d9402e17 	ldw	r5,184(sp)
10000fbc:	21000017 	ldw	r4,0(r4)
10000fc0:	28800104 	addi	r2,r5,4
10000fc4:	d9003115 	stw	r4,196(sp)
10000fc8:	203fa716 	blt	r4,zero,10000e68 <__alt_data_end+0xf8000e68>
10000fcc:	d8802e15 	stw	r2,184(sp)
10000fd0:	ac400007 	ldb	r17,0(r21)
10000fd4:	003f4206 	br	10000ce0 <__alt_data_end+0xf8000ce0>
10000fd8:	ac400007 	ldb	r17,0(r21)
10000fdc:	01000a84 	movi	r4,42
10000fe0:	a8c00044 	addi	r3,r21,1
10000fe4:	89075826 	beq	r17,r4,10002d48 <___vfprintf_internal_r+0x21f0>
10000fe8:	8cbff404 	addi	r18,r17,-48
10000fec:	b486ae36 	bltu	r22,r18,10002aa8 <___vfprintf_internal_r+0x1f50>
10000ff0:	0009883a 	mov	r4,zero
10000ff4:	1823883a 	mov	r17,r3
10000ff8:	01400284 	movi	r5,10
10000ffc:	000097c0 	call	1000097c <__mulsi3>
10001000:	88c00007 	ldb	r3,0(r17)
10001004:	1489883a 	add	r4,r2,r18
10001008:	8d400044 	addi	r21,r17,1
1000100c:	1cbff404 	addi	r18,r3,-48
10001010:	a823883a 	mov	r17,r21
10001014:	b4bff82e 	bgeu	r22,r18,10000ff8 <__alt_data_end+0xf8000ff8>
10001018:	1823883a 	mov	r17,r3
1000101c:	2005f616 	blt	r4,zero,100027f8 <___vfprintf_internal_r+0x1ca0>
10001020:	d9002a15 	stw	r4,168(sp)
10001024:	003f2f06 	br	10000ce4 <__alt_data_end+0xf8000ce4>
10001028:	84002014 	ori	r16,r16,128
1000102c:	ac400007 	ldb	r17,0(r21)
10001030:	003f2b06 	br	10000ce0 <__alt_data_end+0xf8000ce0>
10001034:	8cbff404 	addi	r18,r17,-48
10001038:	d8003115 	stw	zero,196(sp)
1000103c:	0009883a 	mov	r4,zero
10001040:	a823883a 	mov	r17,r21
10001044:	01400284 	movi	r5,10
10001048:	000097c0 	call	1000097c <__mulsi3>
1000104c:	88c00007 	ldb	r3,0(r17)
10001050:	9089883a 	add	r4,r18,r2
10001054:	ad400044 	addi	r21,r21,1
10001058:	1cbff404 	addi	r18,r3,-48
1000105c:	a823883a 	mov	r17,r21
10001060:	b4bff82e 	bgeu	r22,r18,10001044 <__alt_data_end+0xf8001044>
10001064:	1823883a 	mov	r17,r3
10001068:	d9003115 	stw	r4,196(sp)
1000106c:	003f1d06 	br	10000ce4 <__alt_data_end+0xf8000ce4>
10001070:	8025883a 	mov	r18,r16
10001074:	dc002903 	ldbu	r16,164(sp)
10001078:	e011883a 	mov	r8,fp
1000107c:	84003fcc 	andi	r16,r16,255
10001080:	8007531e 	bne	r16,zero,10002dd0 <___vfprintf_internal_r+0x2278>
10001084:	94800414 	ori	r18,r18,16
10001088:	9080080c 	andi	r2,r18,32
1000108c:	1003a326 	beq	r2,zero,10001f1c <___vfprintf_internal_r+0x13c4>
10001090:	d9002e17 	ldw	r4,184(sp)
10001094:	20800117 	ldw	r2,4(r4)
10001098:	24c00017 	ldw	r19,0(r4)
1000109c:	21000204 	addi	r4,r4,8
100010a0:	d9002e15 	stw	r4,184(sp)
100010a4:	102d883a 	mov	r22,r2
100010a8:	10047316 	blt	r2,zero,10002278 <___vfprintf_internal_r+0x1720>
100010ac:	d9002a17 	ldw	r4,168(sp)
100010b0:	df002783 	ldbu	fp,158(sp)
100010b4:	2003e416 	blt	r4,zero,10002048 <___vfprintf_internal_r+0x14f0>
100010b8:	00ffdfc4 	movi	r3,-129
100010bc:	9d84b03a 	or	r2,r19,r22
100010c0:	90e4703a 	and	r18,r18,r3
100010c4:	10018026 	beq	r2,zero,100016c8 <___vfprintf_internal_r+0xb70>
100010c8:	b003ab26 	beq	r22,zero,10001f78 <___vfprintf_internal_r+0x1420>
100010cc:	dc402915 	stw	r17,164(sp)
100010d0:	dc001e04 	addi	r16,sp,120
100010d4:	b023883a 	mov	r17,r22
100010d8:	402d883a 	mov	r22,r8
100010dc:	9809883a 	mov	r4,r19
100010e0:	880b883a 	mov	r5,r17
100010e4:	01800284 	movi	r6,10
100010e8:	000f883a 	mov	r7,zero
100010ec:	000a7cc0 	call	1000a7cc <__umoddi3>
100010f0:	10800c04 	addi	r2,r2,48
100010f4:	843fffc4 	addi	r16,r16,-1
100010f8:	9809883a 	mov	r4,r19
100010fc:	880b883a 	mov	r5,r17
10001100:	80800005 	stb	r2,0(r16)
10001104:	01800284 	movi	r6,10
10001108:	000f883a 	mov	r7,zero
1000110c:	000a1d00 	call	1000a1d0 <__udivdi3>
10001110:	1027883a 	mov	r19,r2
10001114:	10c4b03a 	or	r2,r2,r3
10001118:	1823883a 	mov	r17,r3
1000111c:	103fef1e 	bne	r2,zero,100010dc <__alt_data_end+0xf80010dc>
10001120:	d8c02817 	ldw	r3,160(sp)
10001124:	dc402917 	ldw	r17,164(sp)
10001128:	b011883a 	mov	r8,r22
1000112c:	1c07c83a 	sub	r3,r3,r16
10001130:	d8c02b15 	stw	r3,172(sp)
10001134:	00005f06 	br	100012b4 <___vfprintf_internal_r+0x75c>
10001138:	8025883a 	mov	r18,r16
1000113c:	dc002903 	ldbu	r16,164(sp)
10001140:	e011883a 	mov	r8,fp
10001144:	84003fcc 	andi	r16,r16,255
10001148:	80071e1e 	bne	r16,zero,10002dc4 <___vfprintf_internal_r+0x226c>
1000114c:	9080020c 	andi	r2,r18,8
10001150:	1004af26 	beq	r2,zero,10002410 <___vfprintf_internal_r+0x18b8>
10001154:	d9002e17 	ldw	r4,184(sp)
10001158:	d9402e17 	ldw	r5,184(sp)
1000115c:	d8802e17 	ldw	r2,184(sp)
10001160:	21000017 	ldw	r4,0(r4)
10001164:	29400117 	ldw	r5,4(r5)
10001168:	10800204 	addi	r2,r2,8
1000116c:	d9003615 	stw	r4,216(sp)
10001170:	d9403815 	stw	r5,224(sp)
10001174:	d8802e15 	stw	r2,184(sp)
10001178:	d9003617 	ldw	r4,216(sp)
1000117c:	d9403817 	ldw	r5,224(sp)
10001180:	da003d15 	stw	r8,244(sp)
10001184:	04000044 	movi	r16,1
10001188:	000728c0 	call	1000728c <__fpclassifyd>
1000118c:	da003d17 	ldw	r8,244(sp)
10001190:	1404441e 	bne	r2,r16,100022a4 <___vfprintf_internal_r+0x174c>
10001194:	d9003617 	ldw	r4,216(sp)
10001198:	d9403817 	ldw	r5,224(sp)
1000119c:	000d883a 	mov	r6,zero
100011a0:	000f883a 	mov	r7,zero
100011a4:	000c3240 	call	1000c324 <__ledf2>
100011a8:	da003d17 	ldw	r8,244(sp)
100011ac:	1005e316 	blt	r2,zero,1000293c <___vfprintf_internal_r+0x1de4>
100011b0:	df002783 	ldbu	fp,158(sp)
100011b4:	008011c4 	movi	r2,71
100011b8:	1445580e 	bge	r2,r17,1000271c <___vfprintf_internal_r+0x1bc4>
100011bc:	04040074 	movhi	r16,4097
100011c0:	84004a04 	addi	r16,r16,296
100011c4:	00c000c4 	movi	r3,3
100011c8:	00bfdfc4 	movi	r2,-129
100011cc:	d8c02915 	stw	r3,164(sp)
100011d0:	90a4703a 	and	r18,r18,r2
100011d4:	d8c02b15 	stw	r3,172(sp)
100011d8:	d8002a15 	stw	zero,168(sp)
100011dc:	d8003215 	stw	zero,200(sp)
100011e0:	00003a06 	br	100012cc <___vfprintf_internal_r+0x774>
100011e4:	84000214 	ori	r16,r16,8
100011e8:	ac400007 	ldb	r17,0(r21)
100011ec:	003ebc06 	br	10000ce0 <__alt_data_end+0xf8000ce0>
100011f0:	8025883a 	mov	r18,r16
100011f4:	dc002903 	ldbu	r16,164(sp)
100011f8:	e011883a 	mov	r8,fp
100011fc:	84003fcc 	andi	r16,r16,255
10001200:	8007001e 	bne	r16,zero,10002e04 <___vfprintf_internal_r+0x22ac>
10001204:	94800414 	ori	r18,r18,16
10001208:	9080080c 	andi	r2,r18,32
1000120c:	1002fa26 	beq	r2,zero,10001df8 <___vfprintf_internal_r+0x12a0>
10001210:	d9002e17 	ldw	r4,184(sp)
10001214:	d9402a17 	ldw	r5,168(sp)
10001218:	d8002785 	stb	zero,158(sp)
1000121c:	20800204 	addi	r2,r4,8
10001220:	24c00017 	ldw	r19,0(r4)
10001224:	25800117 	ldw	r22,4(r4)
10001228:	2804b116 	blt	r5,zero,100024f0 <___vfprintf_internal_r+0x1998>
1000122c:	013fdfc4 	movi	r4,-129
10001230:	9d86b03a 	or	r3,r19,r22
10001234:	d8802e15 	stw	r2,184(sp)
10001238:	9124703a 	and	r18,r18,r4
1000123c:	1802fb1e 	bne	r3,zero,10001e2c <___vfprintf_internal_r+0x12d4>
10001240:	d8c02a17 	ldw	r3,168(sp)
10001244:	0039883a 	mov	fp,zero
10001248:	1805e526 	beq	r3,zero,100029e0 <___vfprintf_internal_r+0x1e88>
1000124c:	0027883a 	mov	r19,zero
10001250:	002d883a 	mov	r22,zero
10001254:	dc001e04 	addi	r16,sp,120
10001258:	9806d0fa 	srli	r3,r19,3
1000125c:	b008977a 	slli	r4,r22,29
10001260:	b02cd0fa 	srli	r22,r22,3
10001264:	9cc001cc 	andi	r19,r19,7
10001268:	98800c04 	addi	r2,r19,48
1000126c:	843fffc4 	addi	r16,r16,-1
10001270:	20e6b03a 	or	r19,r4,r3
10001274:	80800005 	stb	r2,0(r16)
10001278:	9d86b03a 	or	r3,r19,r22
1000127c:	183ff61e 	bne	r3,zero,10001258 <__alt_data_end+0xf8001258>
10001280:	90c0004c 	andi	r3,r18,1
10001284:	18014126 	beq	r3,zero,1000178c <___vfprintf_internal_r+0xc34>
10001288:	10803fcc 	andi	r2,r2,255
1000128c:	1080201c 	xori	r2,r2,128
10001290:	10bfe004 	addi	r2,r2,-128
10001294:	00c00c04 	movi	r3,48
10001298:	10c13c26 	beq	r2,r3,1000178c <___vfprintf_internal_r+0xc34>
1000129c:	80ffffc5 	stb	r3,-1(r16)
100012a0:	d8c02817 	ldw	r3,160(sp)
100012a4:	80bfffc4 	addi	r2,r16,-1
100012a8:	1021883a 	mov	r16,r2
100012ac:	1887c83a 	sub	r3,r3,r2
100012b0:	d8c02b15 	stw	r3,172(sp)
100012b4:	d8802b17 	ldw	r2,172(sp)
100012b8:	d9002a17 	ldw	r4,168(sp)
100012bc:	1100010e 	bge	r2,r4,100012c4 <___vfprintf_internal_r+0x76c>
100012c0:	2005883a 	mov	r2,r4
100012c4:	d8802915 	stw	r2,164(sp)
100012c8:	d8003215 	stw	zero,200(sp)
100012cc:	e7003fcc 	andi	fp,fp,255
100012d0:	e700201c 	xori	fp,fp,128
100012d4:	e73fe004 	addi	fp,fp,-128
100012d8:	e0000326 	beq	fp,zero,100012e8 <___vfprintf_internal_r+0x790>
100012dc:	d8c02917 	ldw	r3,164(sp)
100012e0:	18c00044 	addi	r3,r3,1
100012e4:	d8c02915 	stw	r3,164(sp)
100012e8:	90c0008c 	andi	r3,r18,2
100012ec:	d8c02c15 	stw	r3,176(sp)
100012f0:	18000326 	beq	r3,zero,10001300 <___vfprintf_internal_r+0x7a8>
100012f4:	d8c02917 	ldw	r3,164(sp)
100012f8:	18c00084 	addi	r3,r3,2
100012fc:	d8c02915 	stw	r3,164(sp)
10001300:	90c0210c 	andi	r3,r18,132
10001304:	d8c03015 	stw	r3,192(sp)
10001308:	1801c51e 	bne	r3,zero,10001a20 <___vfprintf_internal_r+0xec8>
1000130c:	d9003117 	ldw	r4,196(sp)
10001310:	d8c02917 	ldw	r3,164(sp)
10001314:	20e7c83a 	sub	r19,r4,r3
10001318:	04c1c10e 	bge	zero,r19,10001a20 <___vfprintf_internal_r+0xec8>
1000131c:	02400404 	movi	r9,16
10001320:	d8c02017 	ldw	r3,128(sp)
10001324:	d8801f17 	ldw	r2,124(sp)
10001328:	4cc52f0e 	bge	r9,r19,100027e8 <___vfprintf_internal_r+0x1c90>
1000132c:	01440074 	movhi	r5,4097
10001330:	29405d84 	addi	r5,r5,374
10001334:	dc403b15 	stw	r17,236(sp)
10001338:	d9403515 	stw	r5,212(sp)
1000133c:	9823883a 	mov	r17,r19
10001340:	482d883a 	mov	r22,r9
10001344:	9027883a 	mov	r19,r18
10001348:	070001c4 	movi	fp,7
1000134c:	8025883a 	mov	r18,r16
10001350:	dc002d17 	ldw	r16,180(sp)
10001354:	00000306 	br	10001364 <___vfprintf_internal_r+0x80c>
10001358:	8c7ffc04 	addi	r17,r17,-16
1000135c:	42000204 	addi	r8,r8,8
10001360:	b440130e 	bge	r22,r17,100013b0 <___vfprintf_internal_r+0x858>
10001364:	01040074 	movhi	r4,4097
10001368:	18c00404 	addi	r3,r3,16
1000136c:	10800044 	addi	r2,r2,1
10001370:	21005d84 	addi	r4,r4,374
10001374:	41000015 	stw	r4,0(r8)
10001378:	45800115 	stw	r22,4(r8)
1000137c:	d8c02015 	stw	r3,128(sp)
10001380:	d8801f15 	stw	r2,124(sp)
10001384:	e0bff40e 	bge	fp,r2,10001358 <__alt_data_end+0xf8001358>
10001388:	d9801e04 	addi	r6,sp,120
1000138c:	b80b883a 	mov	r5,r23
10001390:	8009883a 	mov	r4,r16
10001394:	00077000 	call	10007700 <__sprint_r>
10001398:	103ef31e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
1000139c:	8c7ffc04 	addi	r17,r17,-16
100013a0:	d8c02017 	ldw	r3,128(sp)
100013a4:	d8801f17 	ldw	r2,124(sp)
100013a8:	da000404 	addi	r8,sp,16
100013ac:	b47fed16 	blt	r22,r17,10001364 <__alt_data_end+0xf8001364>
100013b0:	9021883a 	mov	r16,r18
100013b4:	9825883a 	mov	r18,r19
100013b8:	8827883a 	mov	r19,r17
100013bc:	dc403b17 	ldw	r17,236(sp)
100013c0:	d9403517 	ldw	r5,212(sp)
100013c4:	98c7883a 	add	r3,r19,r3
100013c8:	10800044 	addi	r2,r2,1
100013cc:	41400015 	stw	r5,0(r8)
100013d0:	44c00115 	stw	r19,4(r8)
100013d4:	d8c02015 	stw	r3,128(sp)
100013d8:	d8801f15 	stw	r2,124(sp)
100013dc:	010001c4 	movi	r4,7
100013e0:	2082c516 	blt	r4,r2,10001ef8 <___vfprintf_internal_r+0x13a0>
100013e4:	df002787 	ldb	fp,158(sp)
100013e8:	42000204 	addi	r8,r8,8
100013ec:	e0000c26 	beq	fp,zero,10001420 <___vfprintf_internal_r+0x8c8>
100013f0:	d8801f17 	ldw	r2,124(sp)
100013f4:	d9002784 	addi	r4,sp,158
100013f8:	18c00044 	addi	r3,r3,1
100013fc:	10800044 	addi	r2,r2,1
10001400:	41000015 	stw	r4,0(r8)
10001404:	01000044 	movi	r4,1
10001408:	41000115 	stw	r4,4(r8)
1000140c:	d8c02015 	stw	r3,128(sp)
10001410:	d8801f15 	stw	r2,124(sp)
10001414:	010001c4 	movi	r4,7
10001418:	20825e16 	blt	r4,r2,10001d94 <___vfprintf_internal_r+0x123c>
1000141c:	42000204 	addi	r8,r8,8
10001420:	d8802c17 	ldw	r2,176(sp)
10001424:	10000c26 	beq	r2,zero,10001458 <___vfprintf_internal_r+0x900>
10001428:	d8801f17 	ldw	r2,124(sp)
1000142c:	d9002704 	addi	r4,sp,156
10001430:	18c00084 	addi	r3,r3,2
10001434:	10800044 	addi	r2,r2,1
10001438:	41000015 	stw	r4,0(r8)
1000143c:	01000084 	movi	r4,2
10001440:	41000115 	stw	r4,4(r8)
10001444:	d8c02015 	stw	r3,128(sp)
10001448:	d8801f15 	stw	r2,124(sp)
1000144c:	010001c4 	movi	r4,7
10001450:	20825816 	blt	r4,r2,10001db4 <___vfprintf_internal_r+0x125c>
10001454:	42000204 	addi	r8,r8,8
10001458:	d9003017 	ldw	r4,192(sp)
1000145c:	00802004 	movi	r2,128
10001460:	2081bb26 	beq	r4,r2,10001b50 <___vfprintf_internal_r+0xff8>
10001464:	d9402a17 	ldw	r5,168(sp)
10001468:	d8802b17 	ldw	r2,172(sp)
1000146c:	28adc83a 	sub	r22,r5,r2
10001470:	0580310e 	bge	zero,r22,10001538 <___vfprintf_internal_r+0x9e0>
10001474:	07000404 	movi	fp,16
10001478:	d8801f17 	ldw	r2,124(sp)
1000147c:	e584360e 	bge	fp,r22,10002558 <___vfprintf_internal_r+0x1a00>
10001480:	01440074 	movhi	r5,4097
10001484:	29405984 	addi	r5,r5,358
10001488:	dc402a15 	stw	r17,168(sp)
1000148c:	d9402c15 	stw	r5,176(sp)
10001490:	b023883a 	mov	r17,r22
10001494:	04c001c4 	movi	r19,7
10001498:	a82d883a 	mov	r22,r21
1000149c:	902b883a 	mov	r21,r18
100014a0:	8025883a 	mov	r18,r16
100014a4:	dc002d17 	ldw	r16,180(sp)
100014a8:	00000306 	br	100014b8 <___vfprintf_internal_r+0x960>
100014ac:	8c7ffc04 	addi	r17,r17,-16
100014b0:	42000204 	addi	r8,r8,8
100014b4:	e440110e 	bge	fp,r17,100014fc <___vfprintf_internal_r+0x9a4>
100014b8:	18c00404 	addi	r3,r3,16
100014bc:	10800044 	addi	r2,r2,1
100014c0:	45000015 	stw	r20,0(r8)
100014c4:	47000115 	stw	fp,4(r8)
100014c8:	d8c02015 	stw	r3,128(sp)
100014cc:	d8801f15 	stw	r2,124(sp)
100014d0:	98bff60e 	bge	r19,r2,100014ac <__alt_data_end+0xf80014ac>
100014d4:	d9801e04 	addi	r6,sp,120
100014d8:	b80b883a 	mov	r5,r23
100014dc:	8009883a 	mov	r4,r16
100014e0:	00077000 	call	10007700 <__sprint_r>
100014e4:	103ea01e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
100014e8:	8c7ffc04 	addi	r17,r17,-16
100014ec:	d8c02017 	ldw	r3,128(sp)
100014f0:	d8801f17 	ldw	r2,124(sp)
100014f4:	da000404 	addi	r8,sp,16
100014f8:	e47fef16 	blt	fp,r17,100014b8 <__alt_data_end+0xf80014b8>
100014fc:	9021883a 	mov	r16,r18
10001500:	a825883a 	mov	r18,r21
10001504:	b02b883a 	mov	r21,r22
10001508:	882d883a 	mov	r22,r17
1000150c:	dc402a17 	ldw	r17,168(sp)
10001510:	d9002c17 	ldw	r4,176(sp)
10001514:	1d87883a 	add	r3,r3,r22
10001518:	10800044 	addi	r2,r2,1
1000151c:	41000015 	stw	r4,0(r8)
10001520:	45800115 	stw	r22,4(r8)
10001524:	d8c02015 	stw	r3,128(sp)
10001528:	d8801f15 	stw	r2,124(sp)
1000152c:	010001c4 	movi	r4,7
10001530:	20821016 	blt	r4,r2,10001d74 <___vfprintf_internal_r+0x121c>
10001534:	42000204 	addi	r8,r8,8
10001538:	9080400c 	andi	r2,r18,256
1000153c:	10013a1e 	bne	r2,zero,10001a28 <___vfprintf_internal_r+0xed0>
10001540:	d9402b17 	ldw	r5,172(sp)
10001544:	d8801f17 	ldw	r2,124(sp)
10001548:	44000015 	stw	r16,0(r8)
1000154c:	1947883a 	add	r3,r3,r5
10001550:	10800044 	addi	r2,r2,1
10001554:	41400115 	stw	r5,4(r8)
10001558:	d8c02015 	stw	r3,128(sp)
1000155c:	d8801f15 	stw	r2,124(sp)
10001560:	010001c4 	movi	r4,7
10001564:	2081f516 	blt	r4,r2,10001d3c <___vfprintf_internal_r+0x11e4>
10001568:	42000204 	addi	r8,r8,8
1000156c:	9480010c 	andi	r18,r18,4
10001570:	90003226 	beq	r18,zero,1000163c <___vfprintf_internal_r+0xae4>
10001574:	d9403117 	ldw	r5,196(sp)
10001578:	d8802917 	ldw	r2,164(sp)
1000157c:	28a1c83a 	sub	r16,r5,r2
10001580:	04002e0e 	bge	zero,r16,1000163c <___vfprintf_internal_r+0xae4>
10001584:	04400404 	movi	r17,16
10001588:	d8801f17 	ldw	r2,124(sp)
1000158c:	8c04c40e 	bge	r17,r16,100028a0 <___vfprintf_internal_r+0x1d48>
10001590:	01440074 	movhi	r5,4097
10001594:	29405d84 	addi	r5,r5,374
10001598:	d9403515 	stw	r5,212(sp)
1000159c:	048001c4 	movi	r18,7
100015a0:	dcc02d17 	ldw	r19,180(sp)
100015a4:	00000306 	br	100015b4 <___vfprintf_internal_r+0xa5c>
100015a8:	843ffc04 	addi	r16,r16,-16
100015ac:	42000204 	addi	r8,r8,8
100015b0:	8c00130e 	bge	r17,r16,10001600 <___vfprintf_internal_r+0xaa8>
100015b4:	01040074 	movhi	r4,4097
100015b8:	18c00404 	addi	r3,r3,16
100015bc:	10800044 	addi	r2,r2,1
100015c0:	21005d84 	addi	r4,r4,374
100015c4:	41000015 	stw	r4,0(r8)
100015c8:	44400115 	stw	r17,4(r8)
100015cc:	d8c02015 	stw	r3,128(sp)
100015d0:	d8801f15 	stw	r2,124(sp)
100015d4:	90bff40e 	bge	r18,r2,100015a8 <__alt_data_end+0xf80015a8>
100015d8:	d9801e04 	addi	r6,sp,120
100015dc:	b80b883a 	mov	r5,r23
100015e0:	9809883a 	mov	r4,r19
100015e4:	00077000 	call	10007700 <__sprint_r>
100015e8:	103e5f1e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
100015ec:	843ffc04 	addi	r16,r16,-16
100015f0:	d8c02017 	ldw	r3,128(sp)
100015f4:	d8801f17 	ldw	r2,124(sp)
100015f8:	da000404 	addi	r8,sp,16
100015fc:	8c3fed16 	blt	r17,r16,100015b4 <__alt_data_end+0xf80015b4>
10001600:	d9403517 	ldw	r5,212(sp)
10001604:	1c07883a 	add	r3,r3,r16
10001608:	10800044 	addi	r2,r2,1
1000160c:	41400015 	stw	r5,0(r8)
10001610:	44000115 	stw	r16,4(r8)
10001614:	d8c02015 	stw	r3,128(sp)
10001618:	d8801f15 	stw	r2,124(sp)
1000161c:	010001c4 	movi	r4,7
10001620:	2080060e 	bge	r4,r2,1000163c <___vfprintf_internal_r+0xae4>
10001624:	d9002d17 	ldw	r4,180(sp)
10001628:	d9801e04 	addi	r6,sp,120
1000162c:	b80b883a 	mov	r5,r23
10001630:	00077000 	call	10007700 <__sprint_r>
10001634:	103e4c1e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10001638:	d8c02017 	ldw	r3,128(sp)
1000163c:	d8803117 	ldw	r2,196(sp)
10001640:	d9002917 	ldw	r4,164(sp)
10001644:	1100010e 	bge	r2,r4,1000164c <___vfprintf_internal_r+0xaf4>
10001648:	2005883a 	mov	r2,r4
1000164c:	d9402f17 	ldw	r5,188(sp)
10001650:	288b883a 	add	r5,r5,r2
10001654:	d9402f15 	stw	r5,188(sp)
10001658:	1801c01e 	bne	r3,zero,10001d5c <___vfprintf_internal_r+0x1204>
1000165c:	a8800007 	ldb	r2,0(r21)
10001660:	d8001f15 	stw	zero,124(sp)
10001664:	da000404 	addi	r8,sp,16
10001668:	103d751e 	bne	r2,zero,10000c40 <__alt_data_end+0xf8000c40>
1000166c:	a823883a 	mov	r17,r21
10001670:	003d8b06 	br	10000ca0 <__alt_data_end+0xf8000ca0>
10001674:	8025883a 	mov	r18,r16
10001678:	dc002903 	ldbu	r16,164(sp)
1000167c:	e011883a 	mov	r8,fp
10001680:	84003fcc 	andi	r16,r16,255
10001684:	8005e51e 	bne	r16,zero,10002e1c <___vfprintf_internal_r+0x22c4>
10001688:	94800414 	ori	r18,r18,16
1000168c:	9080080c 	andi	r2,r18,32
10001690:	10022b26 	beq	r2,zero,10001f40 <___vfprintf_internal_r+0x13e8>
10001694:	d9002e17 	ldw	r4,184(sp)
10001698:	d9402a17 	ldw	r5,168(sp)
1000169c:	d8002785 	stb	zero,158(sp)
100016a0:	20c00204 	addi	r3,r4,8
100016a4:	24c00017 	ldw	r19,0(r4)
100016a8:	25800117 	ldw	r22,4(r4)
100016ac:	28042e16 	blt	r5,zero,10002768 <___vfprintf_internal_r+0x1c10>
100016b0:	013fdfc4 	movi	r4,-129
100016b4:	9d84b03a 	or	r2,r19,r22
100016b8:	d8c02e15 	stw	r3,184(sp)
100016bc:	9124703a 	and	r18,r18,r4
100016c0:	0039883a 	mov	fp,zero
100016c4:	103e801e 	bne	r2,zero,100010c8 <__alt_data_end+0xf80010c8>
100016c8:	d9002a17 	ldw	r4,168(sp)
100016cc:	2002e01e 	bne	r4,zero,10002250 <___vfprintf_internal_r+0x16f8>
100016d0:	d8002a15 	stw	zero,168(sp)
100016d4:	d8002b15 	stw	zero,172(sp)
100016d8:	dc001e04 	addi	r16,sp,120
100016dc:	003ef506 	br	100012b4 <__alt_data_end+0xf80012b4>
100016e0:	8025883a 	mov	r18,r16
100016e4:	dc002903 	ldbu	r16,164(sp)
100016e8:	e011883a 	mov	r8,fp
100016ec:	84003fcc 	andi	r16,r16,255
100016f0:	8005ba1e 	bne	r16,zero,10002ddc <___vfprintf_internal_r+0x2284>
100016f4:	01040074 	movhi	r4,4097
100016f8:	21004d04 	addi	r4,r4,308
100016fc:	d9003915 	stw	r4,228(sp)
10001700:	9080080c 	andi	r2,r18,32
10001704:	10006126 	beq	r2,zero,1000188c <___vfprintf_internal_r+0xd34>
10001708:	d9402e17 	ldw	r5,184(sp)
1000170c:	2cc00017 	ldw	r19,0(r5)
10001710:	2d800117 	ldw	r22,4(r5)
10001714:	29400204 	addi	r5,r5,8
10001718:	d9402e15 	stw	r5,184(sp)
1000171c:	9080004c 	andi	r2,r18,1
10001720:	1001ac26 	beq	r2,zero,10001dd4 <___vfprintf_internal_r+0x127c>
10001724:	9d84b03a 	or	r2,r19,r22
10001728:	10038526 	beq	r2,zero,10002540 <___vfprintf_internal_r+0x19e8>
1000172c:	d8c02a17 	ldw	r3,168(sp)
10001730:	00800c04 	movi	r2,48
10001734:	d8802705 	stb	r2,156(sp)
10001738:	dc402745 	stb	r17,157(sp)
1000173c:	d8002785 	stb	zero,158(sp)
10001740:	90800094 	ori	r2,r18,2
10001744:	18047916 	blt	r3,zero,1000292c <___vfprintf_internal_r+0x1dd4>
10001748:	00bfdfc4 	movi	r2,-129
1000174c:	90a4703a 	and	r18,r18,r2
10001750:	94800094 	ori	r18,r18,2
10001754:	0039883a 	mov	fp,zero
10001758:	d9003917 	ldw	r4,228(sp)
1000175c:	dc001e04 	addi	r16,sp,120
10001760:	988003cc 	andi	r2,r19,15
10001764:	b006973a 	slli	r3,r22,28
10001768:	2085883a 	add	r2,r4,r2
1000176c:	9826d13a 	srli	r19,r19,4
10001770:	10800003 	ldbu	r2,0(r2)
10001774:	b02cd13a 	srli	r22,r22,4
10001778:	843fffc4 	addi	r16,r16,-1
1000177c:	1ce6b03a 	or	r19,r3,r19
10001780:	80800005 	stb	r2,0(r16)
10001784:	9d84b03a 	or	r2,r19,r22
10001788:	103ff51e 	bne	r2,zero,10001760 <__alt_data_end+0xf8001760>
1000178c:	d8c02817 	ldw	r3,160(sp)
10001790:	1c07c83a 	sub	r3,r3,r16
10001794:	d8c02b15 	stw	r3,172(sp)
10001798:	003ec606 	br	100012b4 <__alt_data_end+0xf80012b4>
1000179c:	8025883a 	mov	r18,r16
100017a0:	dc002903 	ldbu	r16,164(sp)
100017a4:	e011883a 	mov	r8,fp
100017a8:	84003fcc 	andi	r16,r16,255
100017ac:	803e9626 	beq	r16,zero,10001208 <__alt_data_end+0xf8001208>
100017b0:	d8c02b03 	ldbu	r3,172(sp)
100017b4:	d8c02785 	stb	r3,158(sp)
100017b8:	003e9306 	br	10001208 <__alt_data_end+0xf8001208>
100017bc:	00c00044 	movi	r3,1
100017c0:	d8c02905 	stb	r3,164(sp)
100017c4:	00c00ac4 	movi	r3,43
100017c8:	d8c02b05 	stb	r3,172(sp)
100017cc:	ac400007 	ldb	r17,0(r21)
100017d0:	003d4306 	br	10000ce0 <__alt_data_end+0xf8000ce0>
100017d4:	84000814 	ori	r16,r16,32
100017d8:	ac400007 	ldb	r17,0(r21)
100017dc:	003d4006 	br	10000ce0 <__alt_data_end+0xf8000ce0>
100017e0:	d8802e17 	ldw	r2,184(sp)
100017e4:	8025883a 	mov	r18,r16
100017e8:	d8002785 	stb	zero,158(sp)
100017ec:	14000017 	ldw	r16,0(r2)
100017f0:	e011883a 	mov	r8,fp
100017f4:	14c00104 	addi	r19,r2,4
100017f8:	80042d26 	beq	r16,zero,100028b0 <___vfprintf_internal_r+0x1d58>
100017fc:	d8c02a17 	ldw	r3,168(sp)
10001800:	1803e416 	blt	r3,zero,10002794 <___vfprintf_internal_r+0x1c3c>
10001804:	180d883a 	mov	r6,r3
10001808:	000b883a 	mov	r5,zero
1000180c:	8009883a 	mov	r4,r16
10001810:	df003d15 	stw	fp,244(sp)
10001814:	0005fc80 	call	10005fc8 <memchr>
10001818:	da003d17 	ldw	r8,244(sp)
1000181c:	10046826 	beq	r2,zero,100029c0 <___vfprintf_internal_r+0x1e68>
10001820:	1405c83a 	sub	r2,r2,r16
10001824:	d8802b15 	stw	r2,172(sp)
10001828:	1003e016 	blt	r2,zero,100027ac <___vfprintf_internal_r+0x1c54>
1000182c:	df002783 	ldbu	fp,158(sp)
10001830:	d8802915 	stw	r2,164(sp)
10001834:	dcc02e15 	stw	r19,184(sp)
10001838:	d8002a15 	stw	zero,168(sp)
1000183c:	d8003215 	stw	zero,200(sp)
10001840:	003ea206 	br	100012cc <__alt_data_end+0xf80012cc>
10001844:	8025883a 	mov	r18,r16
10001848:	dc002903 	ldbu	r16,164(sp)
1000184c:	e011883a 	mov	r8,fp
10001850:	84003fcc 	andi	r16,r16,255
10001854:	803f8d26 	beq	r16,zero,1000168c <__alt_data_end+0xf800168c>
10001858:	d8c02b03 	ldbu	r3,172(sp)
1000185c:	d8c02785 	stb	r3,158(sp)
10001860:	003f8a06 	br	1000168c <__alt_data_end+0xf800168c>
10001864:	8025883a 	mov	r18,r16
10001868:	dc002903 	ldbu	r16,164(sp)
1000186c:	e011883a 	mov	r8,fp
10001870:	84003fcc 	andi	r16,r16,255
10001874:	8005661e 	bne	r16,zero,10002e10 <___vfprintf_internal_r+0x22b8>
10001878:	01040074 	movhi	r4,4097
1000187c:	21005204 	addi	r4,r4,328
10001880:	d9003915 	stw	r4,228(sp)
10001884:	9080080c 	andi	r2,r18,32
10001888:	103f9f1e 	bne	r2,zero,10001708 <__alt_data_end+0xf8001708>
1000188c:	9080040c 	andi	r2,r18,16
10001890:	1002eb26 	beq	r2,zero,10002440 <___vfprintf_internal_r+0x18e8>
10001894:	d8802e17 	ldw	r2,184(sp)
10001898:	002d883a 	mov	r22,zero
1000189c:	14c00017 	ldw	r19,0(r2)
100018a0:	10800104 	addi	r2,r2,4
100018a4:	d8802e15 	stw	r2,184(sp)
100018a8:	003f9c06 	br	1000171c <__alt_data_end+0xf800171c>
100018ac:	d8802b07 	ldb	r2,172(sp)
100018b0:	1002e11e 	bne	r2,zero,10002438 <___vfprintf_internal_r+0x18e0>
100018b4:	00c00044 	movi	r3,1
100018b8:	d8c02905 	stb	r3,164(sp)
100018bc:	00c00804 	movi	r3,32
100018c0:	d8c02b05 	stb	r3,172(sp)
100018c4:	ac400007 	ldb	r17,0(r21)
100018c8:	003d0506 	br	10000ce0 <__alt_data_end+0xf8000ce0>
100018cc:	84000054 	ori	r16,r16,1
100018d0:	ac400007 	ldb	r17,0(r21)
100018d4:	003d0206 	br	10000ce0 <__alt_data_end+0xf8000ce0>
100018d8:	8025883a 	mov	r18,r16
100018dc:	dc002903 	ldbu	r16,164(sp)
100018e0:	e011883a 	mov	r8,fp
100018e4:	84003fcc 	andi	r16,r16,255
100018e8:	803de726 	beq	r16,zero,10001088 <__alt_data_end+0xf8001088>
100018ec:	d8c02b03 	ldbu	r3,172(sp)
100018f0:	d8c02785 	stb	r3,158(sp)
100018f4:	003de406 	br	10001088 <__alt_data_end+0xf8001088>
100018f8:	84001014 	ori	r16,r16,64
100018fc:	ac400007 	ldb	r17,0(r21)
10001900:	003cf706 	br	10000ce0 <__alt_data_end+0xf8000ce0>
10001904:	ac400007 	ldb	r17,0(r21)
10001908:	00801b04 	movi	r2,108
1000190c:	88838f26 	beq	r17,r2,1000274c <___vfprintf_internal_r+0x1bf4>
10001910:	84000414 	ori	r16,r16,16
10001914:	003cf206 	br	10000ce0 <__alt_data_end+0xf8000ce0>
10001918:	8025883a 	mov	r18,r16
1000191c:	dc002903 	ldbu	r16,164(sp)
10001920:	e011883a 	mov	r8,fp
10001924:	84003fcc 	andi	r16,r16,255
10001928:	80053f1e 	bne	r16,zero,10002e28 <___vfprintf_internal_r+0x22d0>
1000192c:	9080080c 	andi	r2,r18,32
10001930:	1002d226 	beq	r2,zero,1000247c <___vfprintf_internal_r+0x1924>
10001934:	d9002e17 	ldw	r4,184(sp)
10001938:	d9402f17 	ldw	r5,188(sp)
1000193c:	20800017 	ldw	r2,0(r4)
10001940:	2807d7fa 	srai	r3,r5,31
10001944:	21000104 	addi	r4,r4,4
10001948:	d9002e15 	stw	r4,184(sp)
1000194c:	11400015 	stw	r5,0(r2)
10001950:	10c00115 	stw	r3,4(r2)
10001954:	003cb806 	br	10000c38 <__alt_data_end+0xf8000c38>
10001958:	d8c02e17 	ldw	r3,184(sp)
1000195c:	d9002e17 	ldw	r4,184(sp)
10001960:	8025883a 	mov	r18,r16
10001964:	18800017 	ldw	r2,0(r3)
10001968:	21000104 	addi	r4,r4,4
1000196c:	00c00044 	movi	r3,1
10001970:	e011883a 	mov	r8,fp
10001974:	d8c02915 	stw	r3,164(sp)
10001978:	d8002785 	stb	zero,158(sp)
1000197c:	d8801405 	stb	r2,80(sp)
10001980:	d9002e15 	stw	r4,184(sp)
10001984:	d8c02b15 	stw	r3,172(sp)
10001988:	d8002a15 	stw	zero,168(sp)
1000198c:	d8003215 	stw	zero,200(sp)
10001990:	dc001404 	addi	r16,sp,80
10001994:	0039883a 	mov	fp,zero
10001998:	003e5306 	br	100012e8 <__alt_data_end+0xf80012e8>
1000199c:	01040074 	movhi	r4,4097
100019a0:	21005204 	addi	r4,r4,328
100019a4:	0039883a 	mov	fp,zero
100019a8:	d9003915 	stw	r4,228(sp)
100019ac:	04401e04 	movi	r17,120
100019b0:	003f6906 	br	10001758 <__alt_data_end+0xf8001758>
100019b4:	8025883a 	mov	r18,r16
100019b8:	dc002903 	ldbu	r16,164(sp)
100019bc:	e011883a 	mov	r8,fp
100019c0:	84003fcc 	andi	r16,r16,255
100019c4:	8005081e 	bne	r16,zero,10002de8 <___vfprintf_internal_r+0x2290>
100019c8:	883d6126 	beq	r17,zero,10000f50 <__alt_data_end+0xf8000f50>
100019cc:	00c00044 	movi	r3,1
100019d0:	d8c02915 	stw	r3,164(sp)
100019d4:	dc401405 	stb	r17,80(sp)
100019d8:	d8002785 	stb	zero,158(sp)
100019dc:	003fe906 	br	10001984 <__alt_data_end+0xf8001984>
100019e0:	01440074 	movhi	r5,4097
100019e4:	29405204 	addi	r5,r5,328
100019e8:	d9403915 	stw	r5,228(sp)
100019ec:	d8c02e15 	stw	r3,184(sp)
100019f0:	1025883a 	mov	r18,r2
100019f4:	04401e04 	movi	r17,120
100019f8:	9d84b03a 	or	r2,r19,r22
100019fc:	1000fc1e 	bne	r2,zero,10001df0 <___vfprintf_internal_r+0x1298>
10001a00:	0039883a 	mov	fp,zero
10001a04:	00800084 	movi	r2,2
10001a08:	10803fcc 	andi	r2,r2,255
10001a0c:	00c00044 	movi	r3,1
10001a10:	10c20f26 	beq	r2,r3,10002250 <___vfprintf_internal_r+0x16f8>
10001a14:	00c00084 	movi	r3,2
10001a18:	10fd3326 	beq	r2,r3,10000ee8 <__alt_data_end+0xf8000ee8>
10001a1c:	003e0b06 	br	1000124c <__alt_data_end+0xf800124c>
10001a20:	d8c02017 	ldw	r3,128(sp)
10001a24:	003e7106 	br	100013ec <__alt_data_end+0xf80013ec>
10001a28:	00801944 	movi	r2,101
10001a2c:	14407e0e 	bge	r2,r17,10001c28 <___vfprintf_internal_r+0x10d0>
10001a30:	d9003617 	ldw	r4,216(sp)
10001a34:	d9403817 	ldw	r5,224(sp)
10001a38:	000d883a 	mov	r6,zero
10001a3c:	000f883a 	mov	r7,zero
10001a40:	d8c03c15 	stw	r3,240(sp)
10001a44:	da003d15 	stw	r8,244(sp)
10001a48:	000c1c00 	call	1000c1c0 <__eqdf2>
10001a4c:	d8c03c17 	ldw	r3,240(sp)
10001a50:	da003d17 	ldw	r8,244(sp)
10001a54:	1000f71e 	bne	r2,zero,10001e34 <___vfprintf_internal_r+0x12dc>
10001a58:	d8801f17 	ldw	r2,124(sp)
10001a5c:	01040074 	movhi	r4,4097
10001a60:	21005904 	addi	r4,r4,356
10001a64:	18c00044 	addi	r3,r3,1
10001a68:	10800044 	addi	r2,r2,1
10001a6c:	41000015 	stw	r4,0(r8)
10001a70:	01000044 	movi	r4,1
10001a74:	41000115 	stw	r4,4(r8)
10001a78:	d8c02015 	stw	r3,128(sp)
10001a7c:	d8801f15 	stw	r2,124(sp)
10001a80:	010001c4 	movi	r4,7
10001a84:	2082b816 	blt	r4,r2,10002568 <___vfprintf_internal_r+0x1a10>
10001a88:	42000204 	addi	r8,r8,8
10001a8c:	d8802617 	ldw	r2,152(sp)
10001a90:	d9403317 	ldw	r5,204(sp)
10001a94:	11400216 	blt	r2,r5,10001aa0 <___vfprintf_internal_r+0xf48>
10001a98:	9080004c 	andi	r2,r18,1
10001a9c:	103eb326 	beq	r2,zero,1000156c <__alt_data_end+0xf800156c>
10001aa0:	d8803717 	ldw	r2,220(sp)
10001aa4:	d9003417 	ldw	r4,208(sp)
10001aa8:	d9403717 	ldw	r5,220(sp)
10001aac:	1887883a 	add	r3,r3,r2
10001ab0:	d8801f17 	ldw	r2,124(sp)
10001ab4:	41000015 	stw	r4,0(r8)
10001ab8:	41400115 	stw	r5,4(r8)
10001abc:	10800044 	addi	r2,r2,1
10001ac0:	d8c02015 	stw	r3,128(sp)
10001ac4:	d8801f15 	stw	r2,124(sp)
10001ac8:	010001c4 	movi	r4,7
10001acc:	20832916 	blt	r4,r2,10002774 <___vfprintf_internal_r+0x1c1c>
10001ad0:	42000204 	addi	r8,r8,8
10001ad4:	d8803317 	ldw	r2,204(sp)
10001ad8:	143fffc4 	addi	r16,r2,-1
10001adc:	043ea30e 	bge	zero,r16,1000156c <__alt_data_end+0xf800156c>
10001ae0:	04400404 	movi	r17,16
10001ae4:	d8801f17 	ldw	r2,124(sp)
10001ae8:	8c00880e 	bge	r17,r16,10001d0c <___vfprintf_internal_r+0x11b4>
10001aec:	01440074 	movhi	r5,4097
10001af0:	29405984 	addi	r5,r5,358
10001af4:	d9402c15 	stw	r5,176(sp)
10001af8:	058001c4 	movi	r22,7
10001afc:	dcc02d17 	ldw	r19,180(sp)
10001b00:	00000306 	br	10001b10 <___vfprintf_internal_r+0xfb8>
10001b04:	42000204 	addi	r8,r8,8
10001b08:	843ffc04 	addi	r16,r16,-16
10001b0c:	8c00820e 	bge	r17,r16,10001d18 <___vfprintf_internal_r+0x11c0>
10001b10:	18c00404 	addi	r3,r3,16
10001b14:	10800044 	addi	r2,r2,1
10001b18:	45000015 	stw	r20,0(r8)
10001b1c:	44400115 	stw	r17,4(r8)
10001b20:	d8c02015 	stw	r3,128(sp)
10001b24:	d8801f15 	stw	r2,124(sp)
10001b28:	b0bff60e 	bge	r22,r2,10001b04 <__alt_data_end+0xf8001b04>
10001b2c:	d9801e04 	addi	r6,sp,120
10001b30:	b80b883a 	mov	r5,r23
10001b34:	9809883a 	mov	r4,r19
10001b38:	00077000 	call	10007700 <__sprint_r>
10001b3c:	103d0a1e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10001b40:	d8c02017 	ldw	r3,128(sp)
10001b44:	d8801f17 	ldw	r2,124(sp)
10001b48:	da000404 	addi	r8,sp,16
10001b4c:	003fee06 	br	10001b08 <__alt_data_end+0xf8001b08>
10001b50:	d9403117 	ldw	r5,196(sp)
10001b54:	d8802917 	ldw	r2,164(sp)
10001b58:	28adc83a 	sub	r22,r5,r2
10001b5c:	05be410e 	bge	zero,r22,10001464 <__alt_data_end+0xf8001464>
10001b60:	07000404 	movi	fp,16
10001b64:	d8801f17 	ldw	r2,124(sp)
10001b68:	e5838f0e 	bge	fp,r22,100029a8 <___vfprintf_internal_r+0x1e50>
10001b6c:	01440074 	movhi	r5,4097
10001b70:	29405984 	addi	r5,r5,358
10001b74:	dc403015 	stw	r17,192(sp)
10001b78:	d9402c15 	stw	r5,176(sp)
10001b7c:	b023883a 	mov	r17,r22
10001b80:	04c001c4 	movi	r19,7
10001b84:	a82d883a 	mov	r22,r21
10001b88:	902b883a 	mov	r21,r18
10001b8c:	8025883a 	mov	r18,r16
10001b90:	dc002d17 	ldw	r16,180(sp)
10001b94:	00000306 	br	10001ba4 <___vfprintf_internal_r+0x104c>
10001b98:	8c7ffc04 	addi	r17,r17,-16
10001b9c:	42000204 	addi	r8,r8,8
10001ba0:	e440110e 	bge	fp,r17,10001be8 <___vfprintf_internal_r+0x1090>
10001ba4:	18c00404 	addi	r3,r3,16
10001ba8:	10800044 	addi	r2,r2,1
10001bac:	45000015 	stw	r20,0(r8)
10001bb0:	47000115 	stw	fp,4(r8)
10001bb4:	d8c02015 	stw	r3,128(sp)
10001bb8:	d8801f15 	stw	r2,124(sp)
10001bbc:	98bff60e 	bge	r19,r2,10001b98 <__alt_data_end+0xf8001b98>
10001bc0:	d9801e04 	addi	r6,sp,120
10001bc4:	b80b883a 	mov	r5,r23
10001bc8:	8009883a 	mov	r4,r16
10001bcc:	00077000 	call	10007700 <__sprint_r>
10001bd0:	103ce51e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10001bd4:	8c7ffc04 	addi	r17,r17,-16
10001bd8:	d8c02017 	ldw	r3,128(sp)
10001bdc:	d8801f17 	ldw	r2,124(sp)
10001be0:	da000404 	addi	r8,sp,16
10001be4:	e47fef16 	blt	fp,r17,10001ba4 <__alt_data_end+0xf8001ba4>
10001be8:	9021883a 	mov	r16,r18
10001bec:	a825883a 	mov	r18,r21
10001bf0:	b02b883a 	mov	r21,r22
10001bf4:	882d883a 	mov	r22,r17
10001bf8:	dc403017 	ldw	r17,192(sp)
10001bfc:	d9002c17 	ldw	r4,176(sp)
10001c00:	1d87883a 	add	r3,r3,r22
10001c04:	10800044 	addi	r2,r2,1
10001c08:	41000015 	stw	r4,0(r8)
10001c0c:	45800115 	stw	r22,4(r8)
10001c10:	d8c02015 	stw	r3,128(sp)
10001c14:	d8801f15 	stw	r2,124(sp)
10001c18:	010001c4 	movi	r4,7
10001c1c:	20818e16 	blt	r4,r2,10002258 <___vfprintf_internal_r+0x1700>
10001c20:	42000204 	addi	r8,r8,8
10001c24:	003e0f06 	br	10001464 <__alt_data_end+0xf8001464>
10001c28:	d9403317 	ldw	r5,204(sp)
10001c2c:	00800044 	movi	r2,1
10001c30:	18c00044 	addi	r3,r3,1
10001c34:	1141530e 	bge	r2,r5,10002184 <___vfprintf_internal_r+0x162c>
10001c38:	dc401f17 	ldw	r17,124(sp)
10001c3c:	00800044 	movi	r2,1
10001c40:	40800115 	stw	r2,4(r8)
10001c44:	8c400044 	addi	r17,r17,1
10001c48:	44000015 	stw	r16,0(r8)
10001c4c:	d8c02015 	stw	r3,128(sp)
10001c50:	dc401f15 	stw	r17,124(sp)
10001c54:	008001c4 	movi	r2,7
10001c58:	14416b16 	blt	r2,r17,10002208 <___vfprintf_internal_r+0x16b0>
10001c5c:	42000204 	addi	r8,r8,8
10001c60:	d8803717 	ldw	r2,220(sp)
10001c64:	d9003417 	ldw	r4,208(sp)
10001c68:	8c400044 	addi	r17,r17,1
10001c6c:	10c7883a 	add	r3,r2,r3
10001c70:	40800115 	stw	r2,4(r8)
10001c74:	41000015 	stw	r4,0(r8)
10001c78:	d8c02015 	stw	r3,128(sp)
10001c7c:	dc401f15 	stw	r17,124(sp)
10001c80:	008001c4 	movi	r2,7
10001c84:	14416916 	blt	r2,r17,1000222c <___vfprintf_internal_r+0x16d4>
10001c88:	45800204 	addi	r22,r8,8
10001c8c:	d9003617 	ldw	r4,216(sp)
10001c90:	d9403817 	ldw	r5,224(sp)
10001c94:	000d883a 	mov	r6,zero
10001c98:	000f883a 	mov	r7,zero
10001c9c:	d8c03c15 	stw	r3,240(sp)
10001ca0:	000c1c00 	call	1000c1c0 <__eqdf2>
10001ca4:	d8c03c17 	ldw	r3,240(sp)
10001ca8:	1000bc26 	beq	r2,zero,10001f9c <___vfprintf_internal_r+0x1444>
10001cac:	d9403317 	ldw	r5,204(sp)
10001cb0:	84000044 	addi	r16,r16,1
10001cb4:	8c400044 	addi	r17,r17,1
10001cb8:	28bfffc4 	addi	r2,r5,-1
10001cbc:	1887883a 	add	r3,r3,r2
10001cc0:	b0800115 	stw	r2,4(r22)
10001cc4:	b4000015 	stw	r16,0(r22)
10001cc8:	d8c02015 	stw	r3,128(sp)
10001ccc:	dc401f15 	stw	r17,124(sp)
10001cd0:	008001c4 	movi	r2,7
10001cd4:	14414316 	blt	r2,r17,100021e4 <___vfprintf_internal_r+0x168c>
10001cd8:	b5800204 	addi	r22,r22,8
10001cdc:	d9003a17 	ldw	r4,232(sp)
10001ce0:	df0022c4 	addi	fp,sp,139
10001ce4:	8c400044 	addi	r17,r17,1
10001ce8:	20c7883a 	add	r3,r4,r3
10001cec:	b7000015 	stw	fp,0(r22)
10001cf0:	b1000115 	stw	r4,4(r22)
10001cf4:	d8c02015 	stw	r3,128(sp)
10001cf8:	dc401f15 	stw	r17,124(sp)
10001cfc:	008001c4 	movi	r2,7
10001d00:	14400e16 	blt	r2,r17,10001d3c <___vfprintf_internal_r+0x11e4>
10001d04:	b2000204 	addi	r8,r22,8
10001d08:	003e1806 	br	1000156c <__alt_data_end+0xf800156c>
10001d0c:	01040074 	movhi	r4,4097
10001d10:	21005984 	addi	r4,r4,358
10001d14:	d9002c15 	stw	r4,176(sp)
10001d18:	d9002c17 	ldw	r4,176(sp)
10001d1c:	1c07883a 	add	r3,r3,r16
10001d20:	44000115 	stw	r16,4(r8)
10001d24:	41000015 	stw	r4,0(r8)
10001d28:	10800044 	addi	r2,r2,1
10001d2c:	d8c02015 	stw	r3,128(sp)
10001d30:	d8801f15 	stw	r2,124(sp)
10001d34:	010001c4 	movi	r4,7
10001d38:	20be0b0e 	bge	r4,r2,10001568 <__alt_data_end+0xf8001568>
10001d3c:	d9002d17 	ldw	r4,180(sp)
10001d40:	d9801e04 	addi	r6,sp,120
10001d44:	b80b883a 	mov	r5,r23
10001d48:	00077000 	call	10007700 <__sprint_r>
10001d4c:	103c861e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10001d50:	d8c02017 	ldw	r3,128(sp)
10001d54:	da000404 	addi	r8,sp,16
10001d58:	003e0406 	br	1000156c <__alt_data_end+0xf800156c>
10001d5c:	d9002d17 	ldw	r4,180(sp)
10001d60:	d9801e04 	addi	r6,sp,120
10001d64:	b80b883a 	mov	r5,r23
10001d68:	00077000 	call	10007700 <__sprint_r>
10001d6c:	103e3b26 	beq	r2,zero,1000165c <__alt_data_end+0xf800165c>
10001d70:	003c7d06 	br	10000f68 <__alt_data_end+0xf8000f68>
10001d74:	d9002d17 	ldw	r4,180(sp)
10001d78:	d9801e04 	addi	r6,sp,120
10001d7c:	b80b883a 	mov	r5,r23
10001d80:	00077000 	call	10007700 <__sprint_r>
10001d84:	103c781e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10001d88:	d8c02017 	ldw	r3,128(sp)
10001d8c:	da000404 	addi	r8,sp,16
10001d90:	003de906 	br	10001538 <__alt_data_end+0xf8001538>
10001d94:	d9002d17 	ldw	r4,180(sp)
10001d98:	d9801e04 	addi	r6,sp,120
10001d9c:	b80b883a 	mov	r5,r23
10001da0:	00077000 	call	10007700 <__sprint_r>
10001da4:	103c701e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10001da8:	d8c02017 	ldw	r3,128(sp)
10001dac:	da000404 	addi	r8,sp,16
10001db0:	003d9b06 	br	10001420 <__alt_data_end+0xf8001420>
10001db4:	d9002d17 	ldw	r4,180(sp)
10001db8:	d9801e04 	addi	r6,sp,120
10001dbc:	b80b883a 	mov	r5,r23
10001dc0:	00077000 	call	10007700 <__sprint_r>
10001dc4:	103c681e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10001dc8:	d8c02017 	ldw	r3,128(sp)
10001dcc:	da000404 	addi	r8,sp,16
10001dd0:	003da106 	br	10001458 <__alt_data_end+0xf8001458>
10001dd4:	d9402a17 	ldw	r5,168(sp)
10001dd8:	d8002785 	stb	zero,158(sp)
10001ddc:	283f0616 	blt	r5,zero,100019f8 <__alt_data_end+0xf80019f8>
10001de0:	00ffdfc4 	movi	r3,-129
10001de4:	9d84b03a 	or	r2,r19,r22
10001de8:	90e4703a 	and	r18,r18,r3
10001dec:	103c3b26 	beq	r2,zero,10000edc <__alt_data_end+0xf8000edc>
10001df0:	0039883a 	mov	fp,zero
10001df4:	003e5806 	br	10001758 <__alt_data_end+0xf8001758>
10001df8:	9080040c 	andi	r2,r18,16
10001dfc:	1001b326 	beq	r2,zero,100024cc <___vfprintf_internal_r+0x1974>
10001e00:	d8c02e17 	ldw	r3,184(sp)
10001e04:	d9002a17 	ldw	r4,168(sp)
10001e08:	d8002785 	stb	zero,158(sp)
10001e0c:	18800104 	addi	r2,r3,4
10001e10:	1cc00017 	ldw	r19,0(r3)
10001e14:	002d883a 	mov	r22,zero
10001e18:	2001b516 	blt	r4,zero,100024f0 <___vfprintf_internal_r+0x1998>
10001e1c:	00ffdfc4 	movi	r3,-129
10001e20:	d8802e15 	stw	r2,184(sp)
10001e24:	90e4703a 	and	r18,r18,r3
10001e28:	983d0526 	beq	r19,zero,10001240 <__alt_data_end+0xf8001240>
10001e2c:	0039883a 	mov	fp,zero
10001e30:	003d0806 	br	10001254 <__alt_data_end+0xf8001254>
10001e34:	dc402617 	ldw	r17,152(sp)
10001e38:	0441d30e 	bge	zero,r17,10002588 <___vfprintf_internal_r+0x1a30>
10001e3c:	dc403217 	ldw	r17,200(sp)
10001e40:	d8803317 	ldw	r2,204(sp)
10001e44:	1440010e 	bge	r2,r17,10001e4c <___vfprintf_internal_r+0x12f4>
10001e48:	1023883a 	mov	r17,r2
10001e4c:	04400a0e 	bge	zero,r17,10001e78 <___vfprintf_internal_r+0x1320>
10001e50:	d8801f17 	ldw	r2,124(sp)
10001e54:	1c47883a 	add	r3,r3,r17
10001e58:	44000015 	stw	r16,0(r8)
10001e5c:	10800044 	addi	r2,r2,1
10001e60:	44400115 	stw	r17,4(r8)
10001e64:	d8c02015 	stw	r3,128(sp)
10001e68:	d8801f15 	stw	r2,124(sp)
10001e6c:	010001c4 	movi	r4,7
10001e70:	20826516 	blt	r4,r2,10002808 <___vfprintf_internal_r+0x1cb0>
10001e74:	42000204 	addi	r8,r8,8
10001e78:	88026116 	blt	r17,zero,10002800 <___vfprintf_internal_r+0x1ca8>
10001e7c:	d9003217 	ldw	r4,200(sp)
10001e80:	2463c83a 	sub	r17,r4,r17
10001e84:	04407b0e 	bge	zero,r17,10002074 <___vfprintf_internal_r+0x151c>
10001e88:	05800404 	movi	r22,16
10001e8c:	d8801f17 	ldw	r2,124(sp)
10001e90:	b4419d0e 	bge	r22,r17,10002508 <___vfprintf_internal_r+0x19b0>
10001e94:	01040074 	movhi	r4,4097
10001e98:	21005984 	addi	r4,r4,358
10001e9c:	d9002c15 	stw	r4,176(sp)
10001ea0:	070001c4 	movi	fp,7
10001ea4:	dcc02d17 	ldw	r19,180(sp)
10001ea8:	00000306 	br	10001eb8 <___vfprintf_internal_r+0x1360>
10001eac:	42000204 	addi	r8,r8,8
10001eb0:	8c7ffc04 	addi	r17,r17,-16
10001eb4:	b441970e 	bge	r22,r17,10002514 <___vfprintf_internal_r+0x19bc>
10001eb8:	18c00404 	addi	r3,r3,16
10001ebc:	10800044 	addi	r2,r2,1
10001ec0:	45000015 	stw	r20,0(r8)
10001ec4:	45800115 	stw	r22,4(r8)
10001ec8:	d8c02015 	stw	r3,128(sp)
10001ecc:	d8801f15 	stw	r2,124(sp)
10001ed0:	e0bff60e 	bge	fp,r2,10001eac <__alt_data_end+0xf8001eac>
10001ed4:	d9801e04 	addi	r6,sp,120
10001ed8:	b80b883a 	mov	r5,r23
10001edc:	9809883a 	mov	r4,r19
10001ee0:	00077000 	call	10007700 <__sprint_r>
10001ee4:	103c201e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10001ee8:	d8c02017 	ldw	r3,128(sp)
10001eec:	d8801f17 	ldw	r2,124(sp)
10001ef0:	da000404 	addi	r8,sp,16
10001ef4:	003fee06 	br	10001eb0 <__alt_data_end+0xf8001eb0>
10001ef8:	d9002d17 	ldw	r4,180(sp)
10001efc:	d9801e04 	addi	r6,sp,120
10001f00:	b80b883a 	mov	r5,r23
10001f04:	00077000 	call	10007700 <__sprint_r>
10001f08:	103c171e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10001f0c:	d8c02017 	ldw	r3,128(sp)
10001f10:	df002787 	ldb	fp,158(sp)
10001f14:	da000404 	addi	r8,sp,16
10001f18:	003d3406 	br	100013ec <__alt_data_end+0xf80013ec>
10001f1c:	9080040c 	andi	r2,r18,16
10001f20:	10016126 	beq	r2,zero,100024a8 <___vfprintf_internal_r+0x1950>
10001f24:	d9402e17 	ldw	r5,184(sp)
10001f28:	2cc00017 	ldw	r19,0(r5)
10001f2c:	29400104 	addi	r5,r5,4
10001f30:	d9402e15 	stw	r5,184(sp)
10001f34:	982dd7fa 	srai	r22,r19,31
10001f38:	b005883a 	mov	r2,r22
10001f3c:	003c5a06 	br	100010a8 <__alt_data_end+0xf80010a8>
10001f40:	9080040c 	andi	r2,r18,16
10001f44:	10003526 	beq	r2,zero,1000201c <___vfprintf_internal_r+0x14c4>
10001f48:	d8c02e17 	ldw	r3,184(sp)
10001f4c:	d9002a17 	ldw	r4,168(sp)
10001f50:	d8002785 	stb	zero,158(sp)
10001f54:	18800104 	addi	r2,r3,4
10001f58:	1cc00017 	ldw	r19,0(r3)
10001f5c:	002d883a 	mov	r22,zero
10001f60:	20003716 	blt	r4,zero,10002040 <___vfprintf_internal_r+0x14e8>
10001f64:	00ffdfc4 	movi	r3,-129
10001f68:	d8802e15 	stw	r2,184(sp)
10001f6c:	90e4703a 	and	r18,r18,r3
10001f70:	0039883a 	mov	fp,zero
10001f74:	983dd426 	beq	r19,zero,100016c8 <__alt_data_end+0xf80016c8>
10001f78:	00800244 	movi	r2,9
10001f7c:	14fc5336 	bltu	r2,r19,100010cc <__alt_data_end+0xf80010cc>
10001f80:	d8c02817 	ldw	r3,160(sp)
10001f84:	dc001dc4 	addi	r16,sp,119
10001f88:	9cc00c04 	addi	r19,r19,48
10001f8c:	1c07c83a 	sub	r3,r3,r16
10001f90:	dcc01dc5 	stb	r19,119(sp)
10001f94:	d8c02b15 	stw	r3,172(sp)
10001f98:	003cc606 	br	100012b4 <__alt_data_end+0xf80012b4>
10001f9c:	d8803317 	ldw	r2,204(sp)
10001fa0:	143fffc4 	addi	r16,r2,-1
10001fa4:	043f4d0e 	bge	zero,r16,10001cdc <__alt_data_end+0xf8001cdc>
10001fa8:	07000404 	movi	fp,16
10001fac:	e400810e 	bge	fp,r16,100021b4 <___vfprintf_internal_r+0x165c>
10001fb0:	01440074 	movhi	r5,4097
10001fb4:	29405984 	addi	r5,r5,358
10001fb8:	d9402c15 	stw	r5,176(sp)
10001fbc:	01c001c4 	movi	r7,7
10001fc0:	dcc02d17 	ldw	r19,180(sp)
10001fc4:	00000306 	br	10001fd4 <___vfprintf_internal_r+0x147c>
10001fc8:	b5800204 	addi	r22,r22,8
10001fcc:	843ffc04 	addi	r16,r16,-16
10001fd0:	e4007b0e 	bge	fp,r16,100021c0 <___vfprintf_internal_r+0x1668>
10001fd4:	18c00404 	addi	r3,r3,16
10001fd8:	8c400044 	addi	r17,r17,1
10001fdc:	b5000015 	stw	r20,0(r22)
10001fe0:	b7000115 	stw	fp,4(r22)
10001fe4:	d8c02015 	stw	r3,128(sp)
10001fe8:	dc401f15 	stw	r17,124(sp)
10001fec:	3c7ff60e 	bge	r7,r17,10001fc8 <__alt_data_end+0xf8001fc8>
10001ff0:	d9801e04 	addi	r6,sp,120
10001ff4:	b80b883a 	mov	r5,r23
10001ff8:	9809883a 	mov	r4,r19
10001ffc:	d9c03c15 	stw	r7,240(sp)
10002000:	00077000 	call	10007700 <__sprint_r>
10002004:	d9c03c17 	ldw	r7,240(sp)
10002008:	103bd71e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
1000200c:	d8c02017 	ldw	r3,128(sp)
10002010:	dc401f17 	ldw	r17,124(sp)
10002014:	dd800404 	addi	r22,sp,16
10002018:	003fec06 	br	10001fcc <__alt_data_end+0xf8001fcc>
1000201c:	9080100c 	andi	r2,r18,64
10002020:	d8002785 	stb	zero,158(sp)
10002024:	10010e26 	beq	r2,zero,10002460 <___vfprintf_internal_r+0x1908>
10002028:	d9402e17 	ldw	r5,184(sp)
1000202c:	d8c02a17 	ldw	r3,168(sp)
10002030:	002d883a 	mov	r22,zero
10002034:	28800104 	addi	r2,r5,4
10002038:	2cc0000b 	ldhu	r19,0(r5)
1000203c:	183fc90e 	bge	r3,zero,10001f64 <__alt_data_end+0xf8001f64>
10002040:	d8802e15 	stw	r2,184(sp)
10002044:	0039883a 	mov	fp,zero
10002048:	9d84b03a 	or	r2,r19,r22
1000204c:	103c1e1e 	bne	r2,zero,100010c8 <__alt_data_end+0xf80010c8>
10002050:	00800044 	movi	r2,1
10002054:	003e6c06 	br	10001a08 <__alt_data_end+0xf8001a08>
10002058:	d9002d17 	ldw	r4,180(sp)
1000205c:	d9801e04 	addi	r6,sp,120
10002060:	b80b883a 	mov	r5,r23
10002064:	00077000 	call	10007700 <__sprint_r>
10002068:	103bbf1e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
1000206c:	d8c02017 	ldw	r3,128(sp)
10002070:	da000404 	addi	r8,sp,16
10002074:	d9003217 	ldw	r4,200(sp)
10002078:	d8802617 	ldw	r2,152(sp)
1000207c:	d9403317 	ldw	r5,204(sp)
10002080:	8123883a 	add	r17,r16,r4
10002084:	11400216 	blt	r2,r5,10002090 <___vfprintf_internal_r+0x1538>
10002088:	9100004c 	andi	r4,r18,1
1000208c:	20000d26 	beq	r4,zero,100020c4 <___vfprintf_internal_r+0x156c>
10002090:	d9003717 	ldw	r4,220(sp)
10002094:	d9403417 	ldw	r5,208(sp)
10002098:	1907883a 	add	r3,r3,r4
1000209c:	d9001f17 	ldw	r4,124(sp)
100020a0:	41400015 	stw	r5,0(r8)
100020a4:	d9403717 	ldw	r5,220(sp)
100020a8:	21000044 	addi	r4,r4,1
100020ac:	d8c02015 	stw	r3,128(sp)
100020b0:	41400115 	stw	r5,4(r8)
100020b4:	d9001f15 	stw	r4,124(sp)
100020b8:	014001c4 	movi	r5,7
100020bc:	2901e816 	blt	r5,r4,10002860 <___vfprintf_internal_r+0x1d08>
100020c0:	42000204 	addi	r8,r8,8
100020c4:	d9003317 	ldw	r4,204(sp)
100020c8:	8121883a 	add	r16,r16,r4
100020cc:	2085c83a 	sub	r2,r4,r2
100020d0:	8461c83a 	sub	r16,r16,r17
100020d4:	1400010e 	bge	r2,r16,100020dc <___vfprintf_internal_r+0x1584>
100020d8:	1021883a 	mov	r16,r2
100020dc:	04000a0e 	bge	zero,r16,10002108 <___vfprintf_internal_r+0x15b0>
100020e0:	d9001f17 	ldw	r4,124(sp)
100020e4:	1c07883a 	add	r3,r3,r16
100020e8:	44400015 	stw	r17,0(r8)
100020ec:	21000044 	addi	r4,r4,1
100020f0:	44000115 	stw	r16,4(r8)
100020f4:	d8c02015 	stw	r3,128(sp)
100020f8:	d9001f15 	stw	r4,124(sp)
100020fc:	014001c4 	movi	r5,7
10002100:	2901fb16 	blt	r5,r4,100028f0 <___vfprintf_internal_r+0x1d98>
10002104:	42000204 	addi	r8,r8,8
10002108:	8001f716 	blt	r16,zero,100028e8 <___vfprintf_internal_r+0x1d90>
1000210c:	1421c83a 	sub	r16,r2,r16
10002110:	043d160e 	bge	zero,r16,1000156c <__alt_data_end+0xf800156c>
10002114:	04400404 	movi	r17,16
10002118:	d8801f17 	ldw	r2,124(sp)
1000211c:	8c3efb0e 	bge	r17,r16,10001d0c <__alt_data_end+0xf8001d0c>
10002120:	01440074 	movhi	r5,4097
10002124:	29405984 	addi	r5,r5,358
10002128:	d9402c15 	stw	r5,176(sp)
1000212c:	058001c4 	movi	r22,7
10002130:	dcc02d17 	ldw	r19,180(sp)
10002134:	00000306 	br	10002144 <___vfprintf_internal_r+0x15ec>
10002138:	42000204 	addi	r8,r8,8
1000213c:	843ffc04 	addi	r16,r16,-16
10002140:	8c3ef50e 	bge	r17,r16,10001d18 <__alt_data_end+0xf8001d18>
10002144:	18c00404 	addi	r3,r3,16
10002148:	10800044 	addi	r2,r2,1
1000214c:	45000015 	stw	r20,0(r8)
10002150:	44400115 	stw	r17,4(r8)
10002154:	d8c02015 	stw	r3,128(sp)
10002158:	d8801f15 	stw	r2,124(sp)
1000215c:	b0bff60e 	bge	r22,r2,10002138 <__alt_data_end+0xf8002138>
10002160:	d9801e04 	addi	r6,sp,120
10002164:	b80b883a 	mov	r5,r23
10002168:	9809883a 	mov	r4,r19
1000216c:	00077000 	call	10007700 <__sprint_r>
10002170:	103b7d1e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10002174:	d8c02017 	ldw	r3,128(sp)
10002178:	d8801f17 	ldw	r2,124(sp)
1000217c:	da000404 	addi	r8,sp,16
10002180:	003fee06 	br	1000213c <__alt_data_end+0xf800213c>
10002184:	9088703a 	and	r4,r18,r2
10002188:	203eab1e 	bne	r4,zero,10001c38 <__alt_data_end+0xf8001c38>
1000218c:	dc401f17 	ldw	r17,124(sp)
10002190:	40800115 	stw	r2,4(r8)
10002194:	44000015 	stw	r16,0(r8)
10002198:	8c400044 	addi	r17,r17,1
1000219c:	d8c02015 	stw	r3,128(sp)
100021a0:	dc401f15 	stw	r17,124(sp)
100021a4:	008001c4 	movi	r2,7
100021a8:	14400e16 	blt	r2,r17,100021e4 <___vfprintf_internal_r+0x168c>
100021ac:	45800204 	addi	r22,r8,8
100021b0:	003eca06 	br	10001cdc <__alt_data_end+0xf8001cdc>
100021b4:	01040074 	movhi	r4,4097
100021b8:	21005984 	addi	r4,r4,358
100021bc:	d9002c15 	stw	r4,176(sp)
100021c0:	d8802c17 	ldw	r2,176(sp)
100021c4:	1c07883a 	add	r3,r3,r16
100021c8:	8c400044 	addi	r17,r17,1
100021cc:	b0800015 	stw	r2,0(r22)
100021d0:	b4000115 	stw	r16,4(r22)
100021d4:	d8c02015 	stw	r3,128(sp)
100021d8:	dc401f15 	stw	r17,124(sp)
100021dc:	008001c4 	movi	r2,7
100021e0:	147ebd0e 	bge	r2,r17,10001cd8 <__alt_data_end+0xf8001cd8>
100021e4:	d9002d17 	ldw	r4,180(sp)
100021e8:	d9801e04 	addi	r6,sp,120
100021ec:	b80b883a 	mov	r5,r23
100021f0:	00077000 	call	10007700 <__sprint_r>
100021f4:	103b5c1e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
100021f8:	d8c02017 	ldw	r3,128(sp)
100021fc:	dc401f17 	ldw	r17,124(sp)
10002200:	dd800404 	addi	r22,sp,16
10002204:	003eb506 	br	10001cdc <__alt_data_end+0xf8001cdc>
10002208:	d9002d17 	ldw	r4,180(sp)
1000220c:	d9801e04 	addi	r6,sp,120
10002210:	b80b883a 	mov	r5,r23
10002214:	00077000 	call	10007700 <__sprint_r>
10002218:	103b531e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
1000221c:	d8c02017 	ldw	r3,128(sp)
10002220:	dc401f17 	ldw	r17,124(sp)
10002224:	da000404 	addi	r8,sp,16
10002228:	003e8d06 	br	10001c60 <__alt_data_end+0xf8001c60>
1000222c:	d9002d17 	ldw	r4,180(sp)
10002230:	d9801e04 	addi	r6,sp,120
10002234:	b80b883a 	mov	r5,r23
10002238:	00077000 	call	10007700 <__sprint_r>
1000223c:	103b4a1e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10002240:	d8c02017 	ldw	r3,128(sp)
10002244:	dc401f17 	ldw	r17,124(sp)
10002248:	dd800404 	addi	r22,sp,16
1000224c:	003e8f06 	br	10001c8c <__alt_data_end+0xf8001c8c>
10002250:	0027883a 	mov	r19,zero
10002254:	003f4a06 	br	10001f80 <__alt_data_end+0xf8001f80>
10002258:	d9002d17 	ldw	r4,180(sp)
1000225c:	d9801e04 	addi	r6,sp,120
10002260:	b80b883a 	mov	r5,r23
10002264:	00077000 	call	10007700 <__sprint_r>
10002268:	103b3f1e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
1000226c:	d8c02017 	ldw	r3,128(sp)
10002270:	da000404 	addi	r8,sp,16
10002274:	003c7b06 	br	10001464 <__alt_data_end+0xf8001464>
10002278:	d9402a17 	ldw	r5,168(sp)
1000227c:	04e7c83a 	sub	r19,zero,r19
10002280:	07000b44 	movi	fp,45
10002284:	9804c03a 	cmpne	r2,r19,zero
10002288:	05adc83a 	sub	r22,zero,r22
1000228c:	df002785 	stb	fp,158(sp)
10002290:	b0adc83a 	sub	r22,r22,r2
10002294:	28017b16 	blt	r5,zero,10002884 <___vfprintf_internal_r+0x1d2c>
10002298:	00bfdfc4 	movi	r2,-129
1000229c:	90a4703a 	and	r18,r18,r2
100022a0:	003b8906 	br	100010c8 <__alt_data_end+0xf80010c8>
100022a4:	d9003617 	ldw	r4,216(sp)
100022a8:	d9403817 	ldw	r5,224(sp)
100022ac:	da003d15 	stw	r8,244(sp)
100022b0:	000728c0 	call	1000728c <__fpclassifyd>
100022b4:	da003d17 	ldw	r8,244(sp)
100022b8:	1000f026 	beq	r2,zero,1000267c <___vfprintf_internal_r+0x1b24>
100022bc:	d9002a17 	ldw	r4,168(sp)
100022c0:	05bff7c4 	movi	r22,-33
100022c4:	00bfffc4 	movi	r2,-1
100022c8:	8dac703a 	and	r22,r17,r22
100022cc:	20820026 	beq	r4,r2,10002ad0 <___vfprintf_internal_r+0x1f78>
100022d0:	008011c4 	movi	r2,71
100022d4:	b081f726 	beq	r22,r2,10002ab4 <___vfprintf_internal_r+0x1f5c>
100022d8:	d9003817 	ldw	r4,224(sp)
100022dc:	90c04014 	ori	r3,r18,256
100022e0:	d8c02c15 	stw	r3,176(sp)
100022e4:	20021516 	blt	r4,zero,10002b3c <___vfprintf_internal_r+0x1fe4>
100022e8:	dcc03817 	ldw	r19,224(sp)
100022ec:	d8002905 	stb	zero,164(sp)
100022f0:	00801984 	movi	r2,102
100022f4:	8881f926 	beq	r17,r2,10002adc <___vfprintf_internal_r+0x1f84>
100022f8:	00801184 	movi	r2,70
100022fc:	88821c26 	beq	r17,r2,10002b70 <___vfprintf_internal_r+0x2018>
10002300:	00801144 	movi	r2,69
10002304:	b081ef26 	beq	r22,r2,10002ac4 <___vfprintf_internal_r+0x1f6c>
10002308:	d8c02a17 	ldw	r3,168(sp)
1000230c:	d8802104 	addi	r2,sp,132
10002310:	d8800315 	stw	r2,12(sp)
10002314:	d9403617 	ldw	r5,216(sp)
10002318:	d8802504 	addi	r2,sp,148
1000231c:	d9002d17 	ldw	r4,180(sp)
10002320:	d8800215 	stw	r2,8(sp)
10002324:	d8802604 	addi	r2,sp,152
10002328:	d8c00015 	stw	r3,0(sp)
1000232c:	d8800115 	stw	r2,4(sp)
10002330:	01c00084 	movi	r7,2
10002334:	980d883a 	mov	r6,r19
10002338:	d8c03c15 	stw	r3,240(sp)
1000233c:	da003d15 	stw	r8,244(sp)
10002340:	00032880 	call	10003288 <_dtoa_r>
10002344:	1021883a 	mov	r16,r2
10002348:	008019c4 	movi	r2,103
1000234c:	d8c03c17 	ldw	r3,240(sp)
10002350:	da003d17 	ldw	r8,244(sp)
10002354:	88817126 	beq	r17,r2,1000291c <___vfprintf_internal_r+0x1dc4>
10002358:	008011c4 	movi	r2,71
1000235c:	88829126 	beq	r17,r2,10002da4 <___vfprintf_internal_r+0x224c>
10002360:	80f9883a 	add	fp,r16,r3
10002364:	d9003617 	ldw	r4,216(sp)
10002368:	000d883a 	mov	r6,zero
1000236c:	000f883a 	mov	r7,zero
10002370:	980b883a 	mov	r5,r19
10002374:	da003d15 	stw	r8,244(sp)
10002378:	000c1c00 	call	1000c1c0 <__eqdf2>
1000237c:	da003d17 	ldw	r8,244(sp)
10002380:	10018d26 	beq	r2,zero,100029b8 <___vfprintf_internal_r+0x1e60>
10002384:	d8802117 	ldw	r2,132(sp)
10002388:	1700062e 	bgeu	r2,fp,100023a4 <___vfprintf_internal_r+0x184c>
1000238c:	01000c04 	movi	r4,48
10002390:	10c00044 	addi	r3,r2,1
10002394:	d8c02115 	stw	r3,132(sp)
10002398:	11000005 	stb	r4,0(r2)
1000239c:	d8802117 	ldw	r2,132(sp)
100023a0:	173ffb36 	bltu	r2,fp,10002390 <__alt_data_end+0xf8002390>
100023a4:	1405c83a 	sub	r2,r2,r16
100023a8:	d8803315 	stw	r2,204(sp)
100023ac:	008011c4 	movi	r2,71
100023b0:	b0817626 	beq	r22,r2,1000298c <___vfprintf_internal_r+0x1e34>
100023b4:	00801944 	movi	r2,101
100023b8:	1442800e 	bge	r2,r17,10002dbc <___vfprintf_internal_r+0x2264>
100023bc:	d8c02617 	ldw	r3,152(sp)
100023c0:	00801984 	movi	r2,102
100023c4:	d8c03215 	stw	r3,200(sp)
100023c8:	8881fe26 	beq	r17,r2,10002bc4 <___vfprintf_internal_r+0x206c>
100023cc:	d8c03217 	ldw	r3,200(sp)
100023d0:	d9003317 	ldw	r4,204(sp)
100023d4:	1901dd16 	blt	r3,r4,10002b4c <___vfprintf_internal_r+0x1ff4>
100023d8:	9480004c 	andi	r18,r18,1
100023dc:	90022b1e 	bne	r18,zero,10002c8c <___vfprintf_internal_r+0x2134>
100023e0:	1805883a 	mov	r2,r3
100023e4:	18028316 	blt	r3,zero,10002df4 <___vfprintf_internal_r+0x229c>
100023e8:	d8c03217 	ldw	r3,200(sp)
100023ec:	044019c4 	movi	r17,103
100023f0:	d8c02b15 	stw	r3,172(sp)
100023f4:	df002907 	ldb	fp,164(sp)
100023f8:	e001531e 	bne	fp,zero,10002948 <___vfprintf_internal_r+0x1df0>
100023fc:	df002783 	ldbu	fp,158(sp)
10002400:	d8802915 	stw	r2,164(sp)
10002404:	dc802c17 	ldw	r18,176(sp)
10002408:	d8002a15 	stw	zero,168(sp)
1000240c:	003baf06 	br	100012cc <__alt_data_end+0xf80012cc>
10002410:	d8c02e17 	ldw	r3,184(sp)
10002414:	d9002e17 	ldw	r4,184(sp)
10002418:	d9402e17 	ldw	r5,184(sp)
1000241c:	18c00017 	ldw	r3,0(r3)
10002420:	21000117 	ldw	r4,4(r4)
10002424:	29400204 	addi	r5,r5,8
10002428:	d8c03615 	stw	r3,216(sp)
1000242c:	d9003815 	stw	r4,224(sp)
10002430:	d9402e15 	stw	r5,184(sp)
10002434:	003b5006 	br	10001178 <__alt_data_end+0xf8001178>
10002438:	ac400007 	ldb	r17,0(r21)
1000243c:	003a2806 	br	10000ce0 <__alt_data_end+0xf8000ce0>
10002440:	9080100c 	andi	r2,r18,64
10002444:	1000a826 	beq	r2,zero,100026e8 <___vfprintf_internal_r+0x1b90>
10002448:	d8c02e17 	ldw	r3,184(sp)
1000244c:	002d883a 	mov	r22,zero
10002450:	1cc0000b 	ldhu	r19,0(r3)
10002454:	18c00104 	addi	r3,r3,4
10002458:	d8c02e15 	stw	r3,184(sp)
1000245c:	003caf06 	br	1000171c <__alt_data_end+0xf800171c>
10002460:	d9002e17 	ldw	r4,184(sp)
10002464:	d9402a17 	ldw	r5,168(sp)
10002468:	002d883a 	mov	r22,zero
1000246c:	20800104 	addi	r2,r4,4
10002470:	24c00017 	ldw	r19,0(r4)
10002474:	283ebb0e 	bge	r5,zero,10001f64 <__alt_data_end+0xf8001f64>
10002478:	003ef106 	br	10002040 <__alt_data_end+0xf8002040>
1000247c:	9080040c 	andi	r2,r18,16
10002480:	1000921e 	bne	r2,zero,100026cc <___vfprintf_internal_r+0x1b74>
10002484:	9480100c 	andi	r18,r18,64
10002488:	90013926 	beq	r18,zero,10002970 <___vfprintf_internal_r+0x1e18>
1000248c:	d9402e17 	ldw	r5,184(sp)
10002490:	d8c02f17 	ldw	r3,188(sp)
10002494:	28800017 	ldw	r2,0(r5)
10002498:	29400104 	addi	r5,r5,4
1000249c:	d9402e15 	stw	r5,184(sp)
100024a0:	10c0000d 	sth	r3,0(r2)
100024a4:	0039e406 	br	10000c38 <__alt_data_end+0xf8000c38>
100024a8:	9080100c 	andi	r2,r18,64
100024ac:	10008026 	beq	r2,zero,100026b0 <___vfprintf_internal_r+0x1b58>
100024b0:	d8802e17 	ldw	r2,184(sp)
100024b4:	14c0000f 	ldh	r19,0(r2)
100024b8:	10800104 	addi	r2,r2,4
100024bc:	d8802e15 	stw	r2,184(sp)
100024c0:	982dd7fa 	srai	r22,r19,31
100024c4:	b005883a 	mov	r2,r22
100024c8:	003af706 	br	100010a8 <__alt_data_end+0xf80010a8>
100024cc:	9080100c 	andi	r2,r18,64
100024d0:	d8002785 	stb	zero,158(sp)
100024d4:	10008a1e 	bne	r2,zero,10002700 <___vfprintf_internal_r+0x1ba8>
100024d8:	d9002e17 	ldw	r4,184(sp)
100024dc:	d9402a17 	ldw	r5,168(sp)
100024e0:	002d883a 	mov	r22,zero
100024e4:	20800104 	addi	r2,r4,4
100024e8:	24c00017 	ldw	r19,0(r4)
100024ec:	283e4b0e 	bge	r5,zero,10001e1c <__alt_data_end+0xf8001e1c>
100024f0:	9d86b03a 	or	r3,r19,r22
100024f4:	d8802e15 	stw	r2,184(sp)
100024f8:	183e4c1e 	bne	r3,zero,10001e2c <__alt_data_end+0xf8001e2c>
100024fc:	0039883a 	mov	fp,zero
10002500:	0005883a 	mov	r2,zero
10002504:	003d4006 	br	10001a08 <__alt_data_end+0xf8001a08>
10002508:	01440074 	movhi	r5,4097
1000250c:	29405984 	addi	r5,r5,358
10002510:	d9402c15 	stw	r5,176(sp)
10002514:	d9402c17 	ldw	r5,176(sp)
10002518:	1c47883a 	add	r3,r3,r17
1000251c:	10800044 	addi	r2,r2,1
10002520:	41400015 	stw	r5,0(r8)
10002524:	44400115 	stw	r17,4(r8)
10002528:	d8c02015 	stw	r3,128(sp)
1000252c:	d8801f15 	stw	r2,124(sp)
10002530:	010001c4 	movi	r4,7
10002534:	20bec816 	blt	r4,r2,10002058 <__alt_data_end+0xf8002058>
10002538:	42000204 	addi	r8,r8,8
1000253c:	003ecd06 	br	10002074 <__alt_data_end+0xf8002074>
10002540:	d9002a17 	ldw	r4,168(sp)
10002544:	d8002785 	stb	zero,158(sp)
10002548:	203d2d16 	blt	r4,zero,10001a00 <__alt_data_end+0xf8001a00>
1000254c:	00bfdfc4 	movi	r2,-129
10002550:	90a4703a 	and	r18,r18,r2
10002554:	003a6106 	br	10000edc <__alt_data_end+0xf8000edc>
10002558:	01040074 	movhi	r4,4097
1000255c:	21005984 	addi	r4,r4,358
10002560:	d9002c15 	stw	r4,176(sp)
10002564:	003bea06 	br	10001510 <__alt_data_end+0xf8001510>
10002568:	d9002d17 	ldw	r4,180(sp)
1000256c:	d9801e04 	addi	r6,sp,120
10002570:	b80b883a 	mov	r5,r23
10002574:	00077000 	call	10007700 <__sprint_r>
10002578:	103a7b1e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
1000257c:	d8c02017 	ldw	r3,128(sp)
10002580:	da000404 	addi	r8,sp,16
10002584:	003d4106 	br	10001a8c <__alt_data_end+0xf8001a8c>
10002588:	d8801f17 	ldw	r2,124(sp)
1000258c:	01440074 	movhi	r5,4097
10002590:	01000044 	movi	r4,1
10002594:	18c00044 	addi	r3,r3,1
10002598:	10800044 	addi	r2,r2,1
1000259c:	29405904 	addi	r5,r5,356
100025a0:	41000115 	stw	r4,4(r8)
100025a4:	41400015 	stw	r5,0(r8)
100025a8:	d8c02015 	stw	r3,128(sp)
100025ac:	d8801f15 	stw	r2,124(sp)
100025b0:	010001c4 	movi	r4,7
100025b4:	20805c16 	blt	r4,r2,10002728 <___vfprintf_internal_r+0x1bd0>
100025b8:	42000204 	addi	r8,r8,8
100025bc:	8800041e 	bne	r17,zero,100025d0 <___vfprintf_internal_r+0x1a78>
100025c0:	d8803317 	ldw	r2,204(sp)
100025c4:	1000021e 	bne	r2,zero,100025d0 <___vfprintf_internal_r+0x1a78>
100025c8:	9080004c 	andi	r2,r18,1
100025cc:	103be726 	beq	r2,zero,1000156c <__alt_data_end+0xf800156c>
100025d0:	d9003717 	ldw	r4,220(sp)
100025d4:	d8801f17 	ldw	r2,124(sp)
100025d8:	d9403417 	ldw	r5,208(sp)
100025dc:	20c7883a 	add	r3,r4,r3
100025e0:	10800044 	addi	r2,r2,1
100025e4:	41000115 	stw	r4,4(r8)
100025e8:	41400015 	stw	r5,0(r8)
100025ec:	d8c02015 	stw	r3,128(sp)
100025f0:	d8801f15 	stw	r2,124(sp)
100025f4:	010001c4 	movi	r4,7
100025f8:	20812116 	blt	r4,r2,10002a80 <___vfprintf_internal_r+0x1f28>
100025fc:	42000204 	addi	r8,r8,8
10002600:	0463c83a 	sub	r17,zero,r17
10002604:	0440730e 	bge	zero,r17,100027d4 <___vfprintf_internal_r+0x1c7c>
10002608:	05800404 	movi	r22,16
1000260c:	b440860e 	bge	r22,r17,10002828 <___vfprintf_internal_r+0x1cd0>
10002610:	01440074 	movhi	r5,4097
10002614:	29405984 	addi	r5,r5,358
10002618:	d9402c15 	stw	r5,176(sp)
1000261c:	070001c4 	movi	fp,7
10002620:	dcc02d17 	ldw	r19,180(sp)
10002624:	00000306 	br	10002634 <___vfprintf_internal_r+0x1adc>
10002628:	42000204 	addi	r8,r8,8
1000262c:	8c7ffc04 	addi	r17,r17,-16
10002630:	b440800e 	bge	r22,r17,10002834 <___vfprintf_internal_r+0x1cdc>
10002634:	18c00404 	addi	r3,r3,16
10002638:	10800044 	addi	r2,r2,1
1000263c:	45000015 	stw	r20,0(r8)
10002640:	45800115 	stw	r22,4(r8)
10002644:	d8c02015 	stw	r3,128(sp)
10002648:	d8801f15 	stw	r2,124(sp)
1000264c:	e0bff60e 	bge	fp,r2,10002628 <__alt_data_end+0xf8002628>
10002650:	d9801e04 	addi	r6,sp,120
10002654:	b80b883a 	mov	r5,r23
10002658:	9809883a 	mov	r4,r19
1000265c:	00077000 	call	10007700 <__sprint_r>
10002660:	103a411e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10002664:	d8c02017 	ldw	r3,128(sp)
10002668:	d8801f17 	ldw	r2,124(sp)
1000266c:	da000404 	addi	r8,sp,16
10002670:	003fee06 	br	1000262c <__alt_data_end+0xf800262c>
10002674:	00bfffc4 	movi	r2,-1
10002678:	003a3f06 	br	10000f78 <__alt_data_end+0xf8000f78>
1000267c:	008011c4 	movi	r2,71
10002680:	1440b816 	blt	r2,r17,10002964 <___vfprintf_internal_r+0x1e0c>
10002684:	04040074 	movhi	r16,4097
10002688:	84004b04 	addi	r16,r16,300
1000268c:	00c000c4 	movi	r3,3
10002690:	00bfdfc4 	movi	r2,-129
10002694:	d8c02915 	stw	r3,164(sp)
10002698:	90a4703a 	and	r18,r18,r2
1000269c:	df002783 	ldbu	fp,158(sp)
100026a0:	d8c02b15 	stw	r3,172(sp)
100026a4:	d8002a15 	stw	zero,168(sp)
100026a8:	d8003215 	stw	zero,200(sp)
100026ac:	003b0706 	br	100012cc <__alt_data_end+0xf80012cc>
100026b0:	d8c02e17 	ldw	r3,184(sp)
100026b4:	1cc00017 	ldw	r19,0(r3)
100026b8:	18c00104 	addi	r3,r3,4
100026bc:	d8c02e15 	stw	r3,184(sp)
100026c0:	982dd7fa 	srai	r22,r19,31
100026c4:	b005883a 	mov	r2,r22
100026c8:	003a7706 	br	100010a8 <__alt_data_end+0xf80010a8>
100026cc:	d8c02e17 	ldw	r3,184(sp)
100026d0:	d9002f17 	ldw	r4,188(sp)
100026d4:	18800017 	ldw	r2,0(r3)
100026d8:	18c00104 	addi	r3,r3,4
100026dc:	d8c02e15 	stw	r3,184(sp)
100026e0:	11000015 	stw	r4,0(r2)
100026e4:	00395406 	br	10000c38 <__alt_data_end+0xf8000c38>
100026e8:	d9002e17 	ldw	r4,184(sp)
100026ec:	002d883a 	mov	r22,zero
100026f0:	24c00017 	ldw	r19,0(r4)
100026f4:	21000104 	addi	r4,r4,4
100026f8:	d9002e15 	stw	r4,184(sp)
100026fc:	003c0706 	br	1000171c <__alt_data_end+0xf800171c>
10002700:	d9402e17 	ldw	r5,184(sp)
10002704:	d8c02a17 	ldw	r3,168(sp)
10002708:	002d883a 	mov	r22,zero
1000270c:	28800104 	addi	r2,r5,4
10002710:	2cc0000b 	ldhu	r19,0(r5)
10002714:	183dc10e 	bge	r3,zero,10001e1c <__alt_data_end+0xf8001e1c>
10002718:	003f7506 	br	100024f0 <__alt_data_end+0xf80024f0>
1000271c:	04040074 	movhi	r16,4097
10002720:	84004904 	addi	r16,r16,292
10002724:	003aa706 	br	100011c4 <__alt_data_end+0xf80011c4>
10002728:	d9002d17 	ldw	r4,180(sp)
1000272c:	d9801e04 	addi	r6,sp,120
10002730:	b80b883a 	mov	r5,r23
10002734:	00077000 	call	10007700 <__sprint_r>
10002738:	103a0b1e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
1000273c:	dc402617 	ldw	r17,152(sp)
10002740:	d8c02017 	ldw	r3,128(sp)
10002744:	da000404 	addi	r8,sp,16
10002748:	003f9c06 	br	100025bc <__alt_data_end+0xf80025bc>
1000274c:	ac400043 	ldbu	r17,1(r21)
10002750:	84000814 	ori	r16,r16,32
10002754:	ad400044 	addi	r21,r21,1
10002758:	8c403fcc 	andi	r17,r17,255
1000275c:	8c40201c 	xori	r17,r17,128
10002760:	8c7fe004 	addi	r17,r17,-128
10002764:	00395e06 	br	10000ce0 <__alt_data_end+0xf8000ce0>
10002768:	d8c02e15 	stw	r3,184(sp)
1000276c:	0039883a 	mov	fp,zero
10002770:	003e3506 	br	10002048 <__alt_data_end+0xf8002048>
10002774:	d9002d17 	ldw	r4,180(sp)
10002778:	d9801e04 	addi	r6,sp,120
1000277c:	b80b883a 	mov	r5,r23
10002780:	00077000 	call	10007700 <__sprint_r>
10002784:	1039f81e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10002788:	d8c02017 	ldw	r3,128(sp)
1000278c:	da000404 	addi	r8,sp,16
10002790:	003cd006 	br	10001ad4 <__alt_data_end+0xf8001ad4>
10002794:	8009883a 	mov	r4,r16
10002798:	df003d15 	stw	fp,244(sp)
1000279c:	000756c0 	call	1000756c <strlen>
100027a0:	d8802b15 	stw	r2,172(sp)
100027a4:	da003d17 	ldw	r8,244(sp)
100027a8:	103c200e 	bge	r2,zero,1000182c <__alt_data_end+0xf800182c>
100027ac:	0005883a 	mov	r2,zero
100027b0:	003c1e06 	br	1000182c <__alt_data_end+0xf800182c>
100027b4:	d9002d17 	ldw	r4,180(sp)
100027b8:	d9801e04 	addi	r6,sp,120
100027bc:	b80b883a 	mov	r5,r23
100027c0:	00077000 	call	10007700 <__sprint_r>
100027c4:	1039e81e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
100027c8:	d8c02017 	ldw	r3,128(sp)
100027cc:	d8801f17 	ldw	r2,124(sp)
100027d0:	da000404 	addi	r8,sp,16
100027d4:	d9403317 	ldw	r5,204(sp)
100027d8:	10800044 	addi	r2,r2,1
100027dc:	44000015 	stw	r16,0(r8)
100027e0:	28c7883a 	add	r3,r5,r3
100027e4:	003b5b06 	br	10001554 <__alt_data_end+0xf8001554>
100027e8:	01040074 	movhi	r4,4097
100027ec:	21005d84 	addi	r4,r4,374
100027f0:	d9003515 	stw	r4,212(sp)
100027f4:	003af206 	br	100013c0 <__alt_data_end+0xf80013c0>
100027f8:	013fffc4 	movi	r4,-1
100027fc:	003a0806 	br	10001020 <__alt_data_end+0xf8001020>
10002800:	0023883a 	mov	r17,zero
10002804:	003d9d06 	br	10001e7c <__alt_data_end+0xf8001e7c>
10002808:	d9002d17 	ldw	r4,180(sp)
1000280c:	d9801e04 	addi	r6,sp,120
10002810:	b80b883a 	mov	r5,r23
10002814:	00077000 	call	10007700 <__sprint_r>
10002818:	1039d31e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
1000281c:	d8c02017 	ldw	r3,128(sp)
10002820:	da000404 	addi	r8,sp,16
10002824:	003d9406 	br	10001e78 <__alt_data_end+0xf8001e78>
10002828:	01040074 	movhi	r4,4097
1000282c:	21005984 	addi	r4,r4,358
10002830:	d9002c15 	stw	r4,176(sp)
10002834:	d9002c17 	ldw	r4,176(sp)
10002838:	1c47883a 	add	r3,r3,r17
1000283c:	10800044 	addi	r2,r2,1
10002840:	41000015 	stw	r4,0(r8)
10002844:	44400115 	stw	r17,4(r8)
10002848:	d8c02015 	stw	r3,128(sp)
1000284c:	d8801f15 	stw	r2,124(sp)
10002850:	010001c4 	movi	r4,7
10002854:	20bfd716 	blt	r4,r2,100027b4 <__alt_data_end+0xf80027b4>
10002858:	42000204 	addi	r8,r8,8
1000285c:	003fdd06 	br	100027d4 <__alt_data_end+0xf80027d4>
10002860:	d9002d17 	ldw	r4,180(sp)
10002864:	d9801e04 	addi	r6,sp,120
10002868:	b80b883a 	mov	r5,r23
1000286c:	00077000 	call	10007700 <__sprint_r>
10002870:	1039bd1e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10002874:	d8802617 	ldw	r2,152(sp)
10002878:	d8c02017 	ldw	r3,128(sp)
1000287c:	da000404 	addi	r8,sp,16
10002880:	003e1006 	br	100020c4 <__alt_data_end+0xf80020c4>
10002884:	00800044 	movi	r2,1
10002888:	10803fcc 	andi	r2,r2,255
1000288c:	00c00044 	movi	r3,1
10002890:	10fa0d26 	beq	r2,r3,100010c8 <__alt_data_end+0xf80010c8>
10002894:	00c00084 	movi	r3,2
10002898:	10fbaf26 	beq	r2,r3,10001758 <__alt_data_end+0xf8001758>
1000289c:	003a6d06 	br	10001254 <__alt_data_end+0xf8001254>
100028a0:	01040074 	movhi	r4,4097
100028a4:	21005d84 	addi	r4,r4,374
100028a8:	d9003515 	stw	r4,212(sp)
100028ac:	003b5406 	br	10001600 <__alt_data_end+0xf8001600>
100028b0:	d8802a17 	ldw	r2,168(sp)
100028b4:	00c00184 	movi	r3,6
100028b8:	1880012e 	bgeu	r3,r2,100028c0 <___vfprintf_internal_r+0x1d68>
100028bc:	1805883a 	mov	r2,r3
100028c0:	d8802b15 	stw	r2,172(sp)
100028c4:	1000ef16 	blt	r2,zero,10002c84 <___vfprintf_internal_r+0x212c>
100028c8:	04040074 	movhi	r16,4097
100028cc:	d8802915 	stw	r2,164(sp)
100028d0:	dcc02e15 	stw	r19,184(sp)
100028d4:	d8002a15 	stw	zero,168(sp)
100028d8:	d8003215 	stw	zero,200(sp)
100028dc:	84005704 	addi	r16,r16,348
100028e0:	0039883a 	mov	fp,zero
100028e4:	003a8006 	br	100012e8 <__alt_data_end+0xf80012e8>
100028e8:	0021883a 	mov	r16,zero
100028ec:	003e0706 	br	1000210c <__alt_data_end+0xf800210c>
100028f0:	d9002d17 	ldw	r4,180(sp)
100028f4:	d9801e04 	addi	r6,sp,120
100028f8:	b80b883a 	mov	r5,r23
100028fc:	00077000 	call	10007700 <__sprint_r>
10002900:	1039991e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10002904:	d8802617 	ldw	r2,152(sp)
10002908:	d9403317 	ldw	r5,204(sp)
1000290c:	d8c02017 	ldw	r3,128(sp)
10002910:	da000404 	addi	r8,sp,16
10002914:	2885c83a 	sub	r2,r5,r2
10002918:	003dfb06 	br	10002108 <__alt_data_end+0xf8002108>
1000291c:	9080004c 	andi	r2,r18,1
10002920:	103e8f1e 	bne	r2,zero,10002360 <__alt_data_end+0xf8002360>
10002924:	d8802117 	ldw	r2,132(sp)
10002928:	003e9e06 	br	100023a4 <__alt_data_end+0xf80023a4>
1000292c:	1025883a 	mov	r18,r2
10002930:	0039883a 	mov	fp,zero
10002934:	00800084 	movi	r2,2
10002938:	003fd306 	br	10002888 <__alt_data_end+0xf8002888>
1000293c:	07000b44 	movi	fp,45
10002940:	df002785 	stb	fp,158(sp)
10002944:	003a1b06 	br	100011b4 <__alt_data_end+0xf80011b4>
10002948:	00c00b44 	movi	r3,45
1000294c:	d8c02785 	stb	r3,158(sp)
10002950:	d8802915 	stw	r2,164(sp)
10002954:	dc802c17 	ldw	r18,176(sp)
10002958:	d8002a15 	stw	zero,168(sp)
1000295c:	07000b44 	movi	fp,45
10002960:	003a5e06 	br	100012dc <__alt_data_end+0xf80012dc>
10002964:	04040074 	movhi	r16,4097
10002968:	84004c04 	addi	r16,r16,304
1000296c:	003f4706 	br	1000268c <__alt_data_end+0xf800268c>
10002970:	d9002e17 	ldw	r4,184(sp)
10002974:	d9402f17 	ldw	r5,188(sp)
10002978:	20800017 	ldw	r2,0(r4)
1000297c:	21000104 	addi	r4,r4,4
10002980:	d9002e15 	stw	r4,184(sp)
10002984:	11400015 	stw	r5,0(r2)
10002988:	0038ab06 	br	10000c38 <__alt_data_end+0xf8000c38>
1000298c:	dd802617 	ldw	r22,152(sp)
10002990:	00bfff44 	movi	r2,-3
10002994:	b0801c16 	blt	r22,r2,10002a08 <___vfprintf_internal_r+0x1eb0>
10002998:	d9402a17 	ldw	r5,168(sp)
1000299c:	2d801a16 	blt	r5,r22,10002a08 <___vfprintf_internal_r+0x1eb0>
100029a0:	dd803215 	stw	r22,200(sp)
100029a4:	003e8906 	br	100023cc <__alt_data_end+0xf80023cc>
100029a8:	01040074 	movhi	r4,4097
100029ac:	21005984 	addi	r4,r4,358
100029b0:	d9002c15 	stw	r4,176(sp)
100029b4:	003c9106 	br	10001bfc <__alt_data_end+0xf8001bfc>
100029b8:	e005883a 	mov	r2,fp
100029bc:	003e7906 	br	100023a4 <__alt_data_end+0xf80023a4>
100029c0:	d9002a17 	ldw	r4,168(sp)
100029c4:	df002783 	ldbu	fp,158(sp)
100029c8:	dcc02e15 	stw	r19,184(sp)
100029cc:	d9002915 	stw	r4,164(sp)
100029d0:	d9002b15 	stw	r4,172(sp)
100029d4:	d8002a15 	stw	zero,168(sp)
100029d8:	d8003215 	stw	zero,200(sp)
100029dc:	003a3b06 	br	100012cc <__alt_data_end+0xf80012cc>
100029e0:	9080004c 	andi	r2,r18,1
100029e4:	0039883a 	mov	fp,zero
100029e8:	10000426 	beq	r2,zero,100029fc <___vfprintf_internal_r+0x1ea4>
100029ec:	00800c04 	movi	r2,48
100029f0:	dc001dc4 	addi	r16,sp,119
100029f4:	d8801dc5 	stb	r2,119(sp)
100029f8:	003b6406 	br	1000178c <__alt_data_end+0xf800178c>
100029fc:	d8002b15 	stw	zero,172(sp)
10002a00:	dc001e04 	addi	r16,sp,120
10002a04:	003a2b06 	br	100012b4 <__alt_data_end+0xf80012b4>
10002a08:	8c7fff84 	addi	r17,r17,-2
10002a0c:	b5bfffc4 	addi	r22,r22,-1
10002a10:	dd802615 	stw	r22,152(sp)
10002a14:	dc4022c5 	stb	r17,139(sp)
10002a18:	b000bf16 	blt	r22,zero,10002d18 <___vfprintf_internal_r+0x21c0>
10002a1c:	00800ac4 	movi	r2,43
10002a20:	d8802305 	stb	r2,140(sp)
10002a24:	00800244 	movi	r2,9
10002a28:	15807016 	blt	r2,r22,10002bec <___vfprintf_internal_r+0x2094>
10002a2c:	00800c04 	movi	r2,48
10002a30:	b5800c04 	addi	r22,r22,48
10002a34:	d8802345 	stb	r2,141(sp)
10002a38:	dd802385 	stb	r22,142(sp)
10002a3c:	d88023c4 	addi	r2,sp,143
10002a40:	df0022c4 	addi	fp,sp,139
10002a44:	d8c03317 	ldw	r3,204(sp)
10002a48:	1739c83a 	sub	fp,r2,fp
10002a4c:	d9003317 	ldw	r4,204(sp)
10002a50:	e0c7883a 	add	r3,fp,r3
10002a54:	df003a15 	stw	fp,232(sp)
10002a58:	d8c02b15 	stw	r3,172(sp)
10002a5c:	00800044 	movi	r2,1
10002a60:	1100b30e 	bge	r2,r4,10002d30 <___vfprintf_internal_r+0x21d8>
10002a64:	d8c02b17 	ldw	r3,172(sp)
10002a68:	18c00044 	addi	r3,r3,1
10002a6c:	d8c02b15 	stw	r3,172(sp)
10002a70:	1805883a 	mov	r2,r3
10002a74:	1800ac16 	blt	r3,zero,10002d28 <___vfprintf_internal_r+0x21d0>
10002a78:	d8003215 	stw	zero,200(sp)
10002a7c:	003e5d06 	br	100023f4 <__alt_data_end+0xf80023f4>
10002a80:	d9002d17 	ldw	r4,180(sp)
10002a84:	d9801e04 	addi	r6,sp,120
10002a88:	b80b883a 	mov	r5,r23
10002a8c:	00077000 	call	10007700 <__sprint_r>
10002a90:	1039351e 	bne	r2,zero,10000f68 <__alt_data_end+0xf8000f68>
10002a94:	dc402617 	ldw	r17,152(sp)
10002a98:	d8c02017 	ldw	r3,128(sp)
10002a9c:	d8801f17 	ldw	r2,124(sp)
10002aa0:	da000404 	addi	r8,sp,16
10002aa4:	003ed606 	br	10002600 <__alt_data_end+0xf8002600>
10002aa8:	182b883a 	mov	r21,r3
10002aac:	d8002a15 	stw	zero,168(sp)
10002ab0:	00388c06 	br	10000ce4 <__alt_data_end+0xf8000ce4>
10002ab4:	d8802a17 	ldw	r2,168(sp)
10002ab8:	103e071e 	bne	r2,zero,100022d8 <__alt_data_end+0xf80022d8>
10002abc:	dc002a15 	stw	r16,168(sp)
10002ac0:	003e0506 	br	100022d8 <__alt_data_end+0xf80022d8>
10002ac4:	d9002a17 	ldw	r4,168(sp)
10002ac8:	20c00044 	addi	r3,r4,1
10002acc:	003e0f06 	br	1000230c <__alt_data_end+0xf800230c>
10002ad0:	01400184 	movi	r5,6
10002ad4:	d9402a15 	stw	r5,168(sp)
10002ad8:	003dff06 	br	100022d8 <__alt_data_end+0xf80022d8>
10002adc:	d8802104 	addi	r2,sp,132
10002ae0:	d8800315 	stw	r2,12(sp)
10002ae4:	d8802504 	addi	r2,sp,148
10002ae8:	d8800215 	stw	r2,8(sp)
10002aec:	d8802604 	addi	r2,sp,152
10002af0:	d8800115 	stw	r2,4(sp)
10002af4:	d8802a17 	ldw	r2,168(sp)
10002af8:	d9403617 	ldw	r5,216(sp)
10002afc:	d9002d17 	ldw	r4,180(sp)
10002b00:	d8800015 	stw	r2,0(sp)
10002b04:	01c000c4 	movi	r7,3
10002b08:	980d883a 	mov	r6,r19
10002b0c:	da003d15 	stw	r8,244(sp)
10002b10:	00032880 	call	10003288 <_dtoa_r>
10002b14:	d8c02a17 	ldw	r3,168(sp)
10002b18:	da003d17 	ldw	r8,244(sp)
10002b1c:	1021883a 	mov	r16,r2
10002b20:	10f9883a 	add	fp,r2,r3
10002b24:	81000007 	ldb	r4,0(r16)
10002b28:	00800c04 	movi	r2,48
10002b2c:	20805e26 	beq	r4,r2,10002ca8 <___vfprintf_internal_r+0x2150>
10002b30:	d8c02617 	ldw	r3,152(sp)
10002b34:	e0f9883a 	add	fp,fp,r3
10002b38:	003e0a06 	br	10002364 <__alt_data_end+0xf8002364>
10002b3c:	00c00b44 	movi	r3,45
10002b40:	24e0003c 	xorhi	r19,r4,32768
10002b44:	d8c02905 	stb	r3,164(sp)
10002b48:	003de906 	br	100022f0 <__alt_data_end+0xf80022f0>
10002b4c:	d8c03217 	ldw	r3,200(sp)
10002b50:	00c07a0e 	bge	zero,r3,10002d3c <___vfprintf_internal_r+0x21e4>
10002b54:	00800044 	movi	r2,1
10002b58:	d9003317 	ldw	r4,204(sp)
10002b5c:	1105883a 	add	r2,r2,r4
10002b60:	d8802b15 	stw	r2,172(sp)
10002b64:	10004e16 	blt	r2,zero,10002ca0 <___vfprintf_internal_r+0x2148>
10002b68:	044019c4 	movi	r17,103
10002b6c:	003e2106 	br	100023f4 <__alt_data_end+0xf80023f4>
10002b70:	d9002a17 	ldw	r4,168(sp)
10002b74:	d8802104 	addi	r2,sp,132
10002b78:	d8800315 	stw	r2,12(sp)
10002b7c:	d9000015 	stw	r4,0(sp)
10002b80:	d8802504 	addi	r2,sp,148
10002b84:	d9403617 	ldw	r5,216(sp)
10002b88:	d9002d17 	ldw	r4,180(sp)
10002b8c:	d8800215 	stw	r2,8(sp)
10002b90:	d8802604 	addi	r2,sp,152
10002b94:	d8800115 	stw	r2,4(sp)
10002b98:	01c000c4 	movi	r7,3
10002b9c:	980d883a 	mov	r6,r19
10002ba0:	da003d15 	stw	r8,244(sp)
10002ba4:	00032880 	call	10003288 <_dtoa_r>
10002ba8:	d8c02a17 	ldw	r3,168(sp)
10002bac:	da003d17 	ldw	r8,244(sp)
10002bb0:	1021883a 	mov	r16,r2
10002bb4:	00801184 	movi	r2,70
10002bb8:	80f9883a 	add	fp,r16,r3
10002bbc:	88bfd926 	beq	r17,r2,10002b24 <__alt_data_end+0xf8002b24>
10002bc0:	003de806 	br	10002364 <__alt_data_end+0xf8002364>
10002bc4:	d9002a17 	ldw	r4,168(sp)
10002bc8:	00c04d0e 	bge	zero,r3,10002d00 <___vfprintf_internal_r+0x21a8>
10002bcc:	2000441e 	bne	r4,zero,10002ce0 <___vfprintf_internal_r+0x2188>
10002bd0:	9480004c 	andi	r18,r18,1
10002bd4:	9000421e 	bne	r18,zero,10002ce0 <___vfprintf_internal_r+0x2188>
10002bd8:	1805883a 	mov	r2,r3
10002bdc:	18006f16 	blt	r3,zero,10002d9c <___vfprintf_internal_r+0x2244>
10002be0:	d8c03217 	ldw	r3,200(sp)
10002be4:	d8c02b15 	stw	r3,172(sp)
10002be8:	003e0206 	br	100023f4 <__alt_data_end+0xf80023f4>
10002bec:	df0022c4 	addi	fp,sp,139
10002bf0:	dc002a15 	stw	r16,168(sp)
10002bf4:	4027883a 	mov	r19,r8
10002bf8:	e021883a 	mov	r16,fp
10002bfc:	b009883a 	mov	r4,r22
10002c00:	01400284 	movi	r5,10
10002c04:	000ae140 	call	1000ae14 <__modsi3>
10002c08:	10800c04 	addi	r2,r2,48
10002c0c:	843fffc4 	addi	r16,r16,-1
10002c10:	b009883a 	mov	r4,r22
10002c14:	01400284 	movi	r5,10
10002c18:	80800005 	stb	r2,0(r16)
10002c1c:	000ad900 	call	1000ad90 <__divsi3>
10002c20:	102d883a 	mov	r22,r2
10002c24:	00800244 	movi	r2,9
10002c28:	15bff416 	blt	r2,r22,10002bfc <__alt_data_end+0xf8002bfc>
10002c2c:	9811883a 	mov	r8,r19
10002c30:	b0800c04 	addi	r2,r22,48
10002c34:	8027883a 	mov	r19,r16
10002c38:	997fffc4 	addi	r5,r19,-1
10002c3c:	98bfffc5 	stb	r2,-1(r19)
10002c40:	dc002a17 	ldw	r16,168(sp)
10002c44:	2f006d2e 	bgeu	r5,fp,10002dfc <___vfprintf_internal_r+0x22a4>
10002c48:	d9c02384 	addi	r7,sp,142
10002c4c:	3ccfc83a 	sub	r7,r7,r19
10002c50:	d9002344 	addi	r4,sp,141
10002c54:	e1cf883a 	add	r7,fp,r7
10002c58:	00000106 	br	10002c60 <___vfprintf_internal_r+0x2108>
10002c5c:	28800003 	ldbu	r2,0(r5)
10002c60:	20800005 	stb	r2,0(r4)
10002c64:	21000044 	addi	r4,r4,1
10002c68:	29400044 	addi	r5,r5,1
10002c6c:	393ffb1e 	bne	r7,r4,10002c5c <__alt_data_end+0xf8002c5c>
10002c70:	d8802304 	addi	r2,sp,140
10002c74:	14c5c83a 	sub	r2,r2,r19
10002c78:	d8c02344 	addi	r3,sp,141
10002c7c:	1885883a 	add	r2,r3,r2
10002c80:	003f7006 	br	10002a44 <__alt_data_end+0xf8002a44>
10002c84:	0005883a 	mov	r2,zero
10002c88:	003f0f06 	br	100028c8 <__alt_data_end+0xf80028c8>
10002c8c:	d8c03217 	ldw	r3,200(sp)
10002c90:	18c00044 	addi	r3,r3,1
10002c94:	d8c02b15 	stw	r3,172(sp)
10002c98:	1805883a 	mov	r2,r3
10002c9c:	183fb20e 	bge	r3,zero,10002b68 <__alt_data_end+0xf8002b68>
10002ca0:	0005883a 	mov	r2,zero
10002ca4:	003fb006 	br	10002b68 <__alt_data_end+0xf8002b68>
10002ca8:	d9003617 	ldw	r4,216(sp)
10002cac:	000d883a 	mov	r6,zero
10002cb0:	000f883a 	mov	r7,zero
10002cb4:	980b883a 	mov	r5,r19
10002cb8:	d8c03c15 	stw	r3,240(sp)
10002cbc:	da003d15 	stw	r8,244(sp)
10002cc0:	000c1c00 	call	1000c1c0 <__eqdf2>
10002cc4:	d8c03c17 	ldw	r3,240(sp)
10002cc8:	da003d17 	ldw	r8,244(sp)
10002ccc:	103f9826 	beq	r2,zero,10002b30 <__alt_data_end+0xf8002b30>
10002cd0:	00800044 	movi	r2,1
10002cd4:	10c7c83a 	sub	r3,r2,r3
10002cd8:	d8c02615 	stw	r3,152(sp)
10002cdc:	003f9506 	br	10002b34 <__alt_data_end+0xf8002b34>
10002ce0:	d9002a17 	ldw	r4,168(sp)
10002ce4:	d8c03217 	ldw	r3,200(sp)
10002ce8:	20800044 	addi	r2,r4,1
10002cec:	1885883a 	add	r2,r3,r2
10002cf0:	d8802b15 	stw	r2,172(sp)
10002cf4:	103dbf0e 	bge	r2,zero,100023f4 <__alt_data_end+0xf80023f4>
10002cf8:	0005883a 	mov	r2,zero
10002cfc:	003dbd06 	br	100023f4 <__alt_data_end+0xf80023f4>
10002d00:	2000201e 	bne	r4,zero,10002d84 <___vfprintf_internal_r+0x222c>
10002d04:	9480004c 	andi	r18,r18,1
10002d08:	90001e1e 	bne	r18,zero,10002d84 <___vfprintf_internal_r+0x222c>
10002d0c:	00800044 	movi	r2,1
10002d10:	d8802b15 	stw	r2,172(sp)
10002d14:	003db706 	br	100023f4 <__alt_data_end+0xf80023f4>
10002d18:	00800b44 	movi	r2,45
10002d1c:	05adc83a 	sub	r22,zero,r22
10002d20:	d8802305 	stb	r2,140(sp)
10002d24:	003f3f06 	br	10002a24 <__alt_data_end+0xf8002a24>
10002d28:	0005883a 	mov	r2,zero
10002d2c:	003f5206 	br	10002a78 <__alt_data_end+0xf8002a78>
10002d30:	90a4703a 	and	r18,r18,r2
10002d34:	903f4e26 	beq	r18,zero,10002a70 <__alt_data_end+0xf8002a70>
10002d38:	003f4a06 	br	10002a64 <__alt_data_end+0xf8002a64>
10002d3c:	00800084 	movi	r2,2
10002d40:	10c5c83a 	sub	r2,r2,r3
10002d44:	003f8406 	br	10002b58 <__alt_data_end+0xf8002b58>
10002d48:	d9402e17 	ldw	r5,184(sp)
10002d4c:	d9002e17 	ldw	r4,184(sp)
10002d50:	ac400043 	ldbu	r17,1(r21)
10002d54:	29400017 	ldw	r5,0(r5)
10002d58:	20800104 	addi	r2,r4,4
10002d5c:	d8802e15 	stw	r2,184(sp)
10002d60:	d9402a15 	stw	r5,168(sp)
10002d64:	182b883a 	mov	r21,r3
10002d68:	283e7b0e 	bge	r5,zero,10002758 <__alt_data_end+0xf8002758>
10002d6c:	8c403fcc 	andi	r17,r17,255
10002d70:	017fffc4 	movi	r5,-1
10002d74:	8c40201c 	xori	r17,r17,128
10002d78:	d9402a15 	stw	r5,168(sp)
10002d7c:	8c7fe004 	addi	r17,r17,-128
10002d80:	0037d706 	br	10000ce0 <__alt_data_end+0xf8000ce0>
10002d84:	d8c02a17 	ldw	r3,168(sp)
10002d88:	18c00084 	addi	r3,r3,2
10002d8c:	d8c02b15 	stw	r3,172(sp)
10002d90:	1805883a 	mov	r2,r3
10002d94:	183d970e 	bge	r3,zero,100023f4 <__alt_data_end+0xf80023f4>
10002d98:	003fd706 	br	10002cf8 <__alt_data_end+0xf8002cf8>
10002d9c:	0005883a 	mov	r2,zero
10002da0:	003f8f06 	br	10002be0 <__alt_data_end+0xf8002be0>
10002da4:	9080004c 	andi	r2,r18,1
10002da8:	103f821e 	bne	r2,zero,10002bb4 <__alt_data_end+0xf8002bb4>
10002dac:	d8802117 	ldw	r2,132(sp)
10002db0:	1405c83a 	sub	r2,r2,r16
10002db4:	d8803315 	stw	r2,204(sp)
10002db8:	b47ef426 	beq	r22,r17,1000298c <__alt_data_end+0xf800298c>
10002dbc:	dd802617 	ldw	r22,152(sp)
10002dc0:	003f1206 	br	10002a0c <__alt_data_end+0xf8002a0c>
10002dc4:	d8c02b03 	ldbu	r3,172(sp)
10002dc8:	d8c02785 	stb	r3,158(sp)
10002dcc:	0038df06 	br	1000114c <__alt_data_end+0xf800114c>
10002dd0:	d8c02b03 	ldbu	r3,172(sp)
10002dd4:	d8c02785 	stb	r3,158(sp)
10002dd8:	0038aa06 	br	10001084 <__alt_data_end+0xf8001084>
10002ddc:	d8c02b03 	ldbu	r3,172(sp)
10002de0:	d8c02785 	stb	r3,158(sp)
10002de4:	003a4306 	br	100016f4 <__alt_data_end+0xf80016f4>
10002de8:	d8c02b03 	ldbu	r3,172(sp)
10002dec:	d8c02785 	stb	r3,158(sp)
10002df0:	003af506 	br	100019c8 <__alt_data_end+0xf80019c8>
10002df4:	0005883a 	mov	r2,zero
10002df8:	003d7b06 	br	100023e8 <__alt_data_end+0xf80023e8>
10002dfc:	d8802344 	addi	r2,sp,141
10002e00:	003f1006 	br	10002a44 <__alt_data_end+0xf8002a44>
10002e04:	d8c02b03 	ldbu	r3,172(sp)
10002e08:	d8c02785 	stb	r3,158(sp)
10002e0c:	0038fd06 	br	10001204 <__alt_data_end+0xf8001204>
10002e10:	d8c02b03 	ldbu	r3,172(sp)
10002e14:	d8c02785 	stb	r3,158(sp)
10002e18:	003a9706 	br	10001878 <__alt_data_end+0xf8001878>
10002e1c:	d8c02b03 	ldbu	r3,172(sp)
10002e20:	d8c02785 	stb	r3,158(sp)
10002e24:	003a1806 	br	10001688 <__alt_data_end+0xf8001688>
10002e28:	d8c02b03 	ldbu	r3,172(sp)
10002e2c:	d8c02785 	stb	r3,158(sp)
10002e30:	003abe06 	br	1000192c <__alt_data_end+0xf800192c>

10002e34 <__vfprintf_internal>:
10002e34:	00840074 	movhi	r2,4097
10002e38:	1087b604 	addi	r2,r2,7896
10002e3c:	300f883a 	mov	r7,r6
10002e40:	280d883a 	mov	r6,r5
10002e44:	200b883a 	mov	r5,r4
10002e48:	11000017 	ldw	r4,0(r2)
10002e4c:	0000b581 	jmpi	10000b58 <___vfprintf_internal_r>

10002e50 <__sbprintf>:
10002e50:	2880030b 	ldhu	r2,12(r5)
10002e54:	2ac01917 	ldw	r11,100(r5)
10002e58:	2a80038b 	ldhu	r10,14(r5)
10002e5c:	2a400717 	ldw	r9,28(r5)
10002e60:	2a000917 	ldw	r8,36(r5)
10002e64:	defee204 	addi	sp,sp,-1144
10002e68:	00c10004 	movi	r3,1024
10002e6c:	dc011a15 	stw	r16,1128(sp)
10002e70:	10bfff4c 	andi	r2,r2,65533
10002e74:	2821883a 	mov	r16,r5
10002e78:	d8cb883a 	add	r5,sp,r3
10002e7c:	dc811c15 	stw	r18,1136(sp)
10002e80:	dc411b15 	stw	r17,1132(sp)
10002e84:	dfc11d15 	stw	ra,1140(sp)
10002e88:	2025883a 	mov	r18,r4
10002e8c:	d881030d 	sth	r2,1036(sp)
10002e90:	dac11915 	stw	r11,1124(sp)
10002e94:	da81038d 	sth	r10,1038(sp)
10002e98:	da410715 	stw	r9,1052(sp)
10002e9c:	da010915 	stw	r8,1060(sp)
10002ea0:	dec10015 	stw	sp,1024(sp)
10002ea4:	dec10415 	stw	sp,1040(sp)
10002ea8:	d8c10215 	stw	r3,1032(sp)
10002eac:	d8c10515 	stw	r3,1044(sp)
10002eb0:	d8010615 	stw	zero,1048(sp)
10002eb4:	0000b580 	call	10000b58 <___vfprintf_internal_r>
10002eb8:	1023883a 	mov	r17,r2
10002ebc:	10000416 	blt	r2,zero,10002ed0 <__sbprintf+0x80>
10002ec0:	d9410004 	addi	r5,sp,1024
10002ec4:	9009883a 	mov	r4,r18
10002ec8:	0004b2c0 	call	10004b2c <_fflush_r>
10002ecc:	10000d1e 	bne	r2,zero,10002f04 <__sbprintf+0xb4>
10002ed0:	d881030b 	ldhu	r2,1036(sp)
10002ed4:	1080100c 	andi	r2,r2,64
10002ed8:	10000326 	beq	r2,zero,10002ee8 <__sbprintf+0x98>
10002edc:	8080030b 	ldhu	r2,12(r16)
10002ee0:	10801014 	ori	r2,r2,64
10002ee4:	8080030d 	sth	r2,12(r16)
10002ee8:	8805883a 	mov	r2,r17
10002eec:	dfc11d17 	ldw	ra,1140(sp)
10002ef0:	dc811c17 	ldw	r18,1136(sp)
10002ef4:	dc411b17 	ldw	r17,1132(sp)
10002ef8:	dc011a17 	ldw	r16,1128(sp)
10002efc:	dec11e04 	addi	sp,sp,1144
10002f00:	f800283a 	ret
10002f04:	047fffc4 	movi	r17,-1
10002f08:	003ff106 	br	10002ed0 <__alt_data_end+0xf8002ed0>

10002f0c <__swsetup_r>:
10002f0c:	00840074 	movhi	r2,4097
10002f10:	defffd04 	addi	sp,sp,-12
10002f14:	1087b604 	addi	r2,r2,7896
10002f18:	dc400115 	stw	r17,4(sp)
10002f1c:	2023883a 	mov	r17,r4
10002f20:	11000017 	ldw	r4,0(r2)
10002f24:	dc000015 	stw	r16,0(sp)
10002f28:	dfc00215 	stw	ra,8(sp)
10002f2c:	2821883a 	mov	r16,r5
10002f30:	20000226 	beq	r4,zero,10002f3c <__swsetup_r+0x30>
10002f34:	20800e17 	ldw	r2,56(r4)
10002f38:	10003126 	beq	r2,zero,10003000 <__swsetup_r+0xf4>
10002f3c:	8080030b 	ldhu	r2,12(r16)
10002f40:	10c0020c 	andi	r3,r2,8
10002f44:	1009883a 	mov	r4,r2
10002f48:	18000f26 	beq	r3,zero,10002f88 <__swsetup_r+0x7c>
10002f4c:	80c00417 	ldw	r3,16(r16)
10002f50:	18001526 	beq	r3,zero,10002fa8 <__swsetup_r+0x9c>
10002f54:	1100004c 	andi	r4,r2,1
10002f58:	20001c1e 	bne	r4,zero,10002fcc <__swsetup_r+0xc0>
10002f5c:	1080008c 	andi	r2,r2,2
10002f60:	1000291e 	bne	r2,zero,10003008 <__swsetup_r+0xfc>
10002f64:	80800517 	ldw	r2,20(r16)
10002f68:	80800215 	stw	r2,8(r16)
10002f6c:	18001c26 	beq	r3,zero,10002fe0 <__swsetup_r+0xd4>
10002f70:	0005883a 	mov	r2,zero
10002f74:	dfc00217 	ldw	ra,8(sp)
10002f78:	dc400117 	ldw	r17,4(sp)
10002f7c:	dc000017 	ldw	r16,0(sp)
10002f80:	dec00304 	addi	sp,sp,12
10002f84:	f800283a 	ret
10002f88:	2080040c 	andi	r2,r4,16
10002f8c:	10002e26 	beq	r2,zero,10003048 <__swsetup_r+0x13c>
10002f90:	2080010c 	andi	r2,r4,4
10002f94:	10001e1e 	bne	r2,zero,10003010 <__swsetup_r+0x104>
10002f98:	80c00417 	ldw	r3,16(r16)
10002f9c:	20800214 	ori	r2,r4,8
10002fa0:	8080030d 	sth	r2,12(r16)
10002fa4:	183feb1e 	bne	r3,zero,10002f54 <__alt_data_end+0xf8002f54>
10002fa8:	1100a00c 	andi	r4,r2,640
10002fac:	01408004 	movi	r5,512
10002fb0:	217fe826 	beq	r4,r5,10002f54 <__alt_data_end+0xf8002f54>
10002fb4:	800b883a 	mov	r5,r16
10002fb8:	8809883a 	mov	r4,r17
10002fbc:	00056000 	call	10005600 <__smakebuf_r>
10002fc0:	8080030b 	ldhu	r2,12(r16)
10002fc4:	80c00417 	ldw	r3,16(r16)
10002fc8:	003fe206 	br	10002f54 <__alt_data_end+0xf8002f54>
10002fcc:	80800517 	ldw	r2,20(r16)
10002fd0:	80000215 	stw	zero,8(r16)
10002fd4:	0085c83a 	sub	r2,zero,r2
10002fd8:	80800615 	stw	r2,24(r16)
10002fdc:	183fe41e 	bne	r3,zero,10002f70 <__alt_data_end+0xf8002f70>
10002fe0:	80c0030b 	ldhu	r3,12(r16)
10002fe4:	0005883a 	mov	r2,zero
10002fe8:	1900200c 	andi	r4,r3,128
10002fec:	203fe126 	beq	r4,zero,10002f74 <__alt_data_end+0xf8002f74>
10002ff0:	18c01014 	ori	r3,r3,64
10002ff4:	80c0030d 	sth	r3,12(r16)
10002ff8:	00bfffc4 	movi	r2,-1
10002ffc:	003fdd06 	br	10002f74 <__alt_data_end+0xf8002f74>
10003000:	0004f180 	call	10004f18 <__sinit>
10003004:	003fcd06 	br	10002f3c <__alt_data_end+0xf8002f3c>
10003008:	0005883a 	mov	r2,zero
1000300c:	003fd606 	br	10002f68 <__alt_data_end+0xf8002f68>
10003010:	81400c17 	ldw	r5,48(r16)
10003014:	28000626 	beq	r5,zero,10003030 <__swsetup_r+0x124>
10003018:	80801004 	addi	r2,r16,64
1000301c:	28800326 	beq	r5,r2,1000302c <__swsetup_r+0x120>
10003020:	8809883a 	mov	r4,r17
10003024:	000508c0 	call	1000508c <_free_r>
10003028:	8100030b 	ldhu	r4,12(r16)
1000302c:	80000c15 	stw	zero,48(r16)
10003030:	80c00417 	ldw	r3,16(r16)
10003034:	00bff6c4 	movi	r2,-37
10003038:	1108703a 	and	r4,r2,r4
1000303c:	80000115 	stw	zero,4(r16)
10003040:	80c00015 	stw	r3,0(r16)
10003044:	003fd506 	br	10002f9c <__alt_data_end+0xf8002f9c>
10003048:	00800244 	movi	r2,9
1000304c:	88800015 	stw	r2,0(r17)
10003050:	20801014 	ori	r2,r4,64
10003054:	8080030d 	sth	r2,12(r16)
10003058:	00bfffc4 	movi	r2,-1
1000305c:	003fc506 	br	10002f74 <__alt_data_end+0xf8002f74>

10003060 <quorem>:
10003060:	defff204 	addi	sp,sp,-56
10003064:	ddc00b15 	stw	r23,44(sp)
10003068:	20800417 	ldw	r2,16(r4)
1000306c:	2dc00417 	ldw	r23,16(r5)
10003070:	dfc00d15 	stw	ra,52(sp)
10003074:	df000c15 	stw	fp,48(sp)
10003078:	dd800a15 	stw	r22,40(sp)
1000307c:	dd400915 	stw	r21,36(sp)
10003080:	dd000815 	stw	r20,32(sp)
10003084:	dcc00715 	stw	r19,28(sp)
10003088:	dc800615 	stw	r18,24(sp)
1000308c:	dc400515 	stw	r17,20(sp)
10003090:	dc000415 	stw	r16,16(sp)
10003094:	15c07a16 	blt	r2,r23,10003280 <quorem+0x220>
10003098:	bdffffc4 	addi	r23,r23,-1
1000309c:	bde9883a 	add	r20,r23,r23
100030a0:	28c00504 	addi	r3,r5,20
100030a4:	a529883a 	add	r20,r20,r20
100030a8:	1d39883a 	add	fp,r3,r20
100030ac:	24c00504 	addi	r19,r4,20
100030b0:	d9400215 	stw	r5,8(sp)
100030b4:	9d29883a 	add	r20,r19,r20
100030b8:	e1400017 	ldw	r5,0(fp)
100030bc:	d9000015 	stw	r4,0(sp)
100030c0:	a1000017 	ldw	r4,0(r20)
100030c4:	29400044 	addi	r5,r5,1
100030c8:	d8c00115 	stw	r3,4(sp)
100030cc:	dd000315 	stw	r20,12(sp)
100030d0:	000ae880 	call	1000ae88 <__udivsi3>
100030d4:	1025883a 	mov	r18,r2
100030d8:	10003026 	beq	r2,zero,1000319c <quorem+0x13c>
100030dc:	dc400117 	ldw	r17,4(sp)
100030e0:	9829883a 	mov	r20,r19
100030e4:	002d883a 	mov	r22,zero
100030e8:	0021883a 	mov	r16,zero
100030ec:	8d400017 	ldw	r21,0(r17)
100030f0:	900b883a 	mov	r5,r18
100030f4:	8c400104 	addi	r17,r17,4
100030f8:	a93fffcc 	andi	r4,r21,65535
100030fc:	000097c0 	call	1000097c <__mulsi3>
10003100:	a808d43a 	srli	r4,r21,16
10003104:	900b883a 	mov	r5,r18
10003108:	15ad883a 	add	r22,r2,r22
1000310c:	000097c0 	call	1000097c <__mulsi3>
10003110:	a1000017 	ldw	r4,0(r20)
10003114:	b00cd43a 	srli	r6,r22,16
10003118:	b0ffffcc 	andi	r3,r22,65535
1000311c:	217fffcc 	andi	r5,r4,65535
10003120:	2c21883a 	add	r16,r5,r16
10003124:	80c7c83a 	sub	r3,r16,r3
10003128:	2008d43a 	srli	r4,r4,16
1000312c:	1185883a 	add	r2,r2,r6
10003130:	1821d43a 	srai	r16,r3,16
10003134:	117fffcc 	andi	r5,r2,65535
10003138:	2149c83a 	sub	r4,r4,r5
1000313c:	2421883a 	add	r16,r4,r16
10003140:	8008943a 	slli	r4,r16,16
10003144:	18ffffcc 	andi	r3,r3,65535
10003148:	102cd43a 	srli	r22,r2,16
1000314c:	20c8b03a 	or	r4,r4,r3
10003150:	a1000015 	stw	r4,0(r20)
10003154:	8021d43a 	srai	r16,r16,16
10003158:	a5000104 	addi	r20,r20,4
1000315c:	e47fe32e 	bgeu	fp,r17,100030ec <__alt_data_end+0xf80030ec>
10003160:	d8c00317 	ldw	r3,12(sp)
10003164:	18800017 	ldw	r2,0(r3)
10003168:	10000c1e 	bne	r2,zero,1000319c <quorem+0x13c>
1000316c:	18bfff04 	addi	r2,r3,-4
10003170:	9880082e 	bgeu	r19,r2,10003194 <quorem+0x134>
10003174:	18ffff17 	ldw	r3,-4(r3)
10003178:	18000326 	beq	r3,zero,10003188 <quorem+0x128>
1000317c:	00000506 	br	10003194 <quorem+0x134>
10003180:	10c00017 	ldw	r3,0(r2)
10003184:	1800031e 	bne	r3,zero,10003194 <quorem+0x134>
10003188:	10bfff04 	addi	r2,r2,-4
1000318c:	bdffffc4 	addi	r23,r23,-1
10003190:	98bffb36 	bltu	r19,r2,10003180 <__alt_data_end+0xf8003180>
10003194:	d8c00017 	ldw	r3,0(sp)
10003198:	1dc00415 	stw	r23,16(r3)
1000319c:	d9400217 	ldw	r5,8(sp)
100031a0:	d9000017 	ldw	r4,0(sp)
100031a4:	0006b580 	call	10006b58 <__mcmp>
100031a8:	10002816 	blt	r2,zero,1000324c <quorem+0x1ec>
100031ac:	dc400117 	ldw	r17,4(sp)
100031b0:	94800044 	addi	r18,r18,1
100031b4:	980d883a 	mov	r6,r19
100031b8:	0007883a 	mov	r3,zero
100031bc:	31000017 	ldw	r4,0(r6)
100031c0:	89400017 	ldw	r5,0(r17)
100031c4:	31800104 	addi	r6,r6,4
100031c8:	20bfffcc 	andi	r2,r4,65535
100031cc:	10c7883a 	add	r3,r2,r3
100031d0:	28bfffcc 	andi	r2,r5,65535
100031d4:	1885c83a 	sub	r2,r3,r2
100031d8:	280ad43a 	srli	r5,r5,16
100031dc:	2008d43a 	srli	r4,r4,16
100031e0:	1007d43a 	srai	r3,r2,16
100031e4:	10bfffcc 	andi	r2,r2,65535
100031e8:	2149c83a 	sub	r4,r4,r5
100031ec:	20c9883a 	add	r4,r4,r3
100031f0:	200a943a 	slli	r5,r4,16
100031f4:	8c400104 	addi	r17,r17,4
100031f8:	2007d43a 	srai	r3,r4,16
100031fc:	2884b03a 	or	r2,r5,r2
10003200:	30bfff15 	stw	r2,-4(r6)
10003204:	e47fed2e 	bgeu	fp,r17,100031bc <__alt_data_end+0xf80031bc>
10003208:	bdc5883a 	add	r2,r23,r23
1000320c:	1085883a 	add	r2,r2,r2
10003210:	9887883a 	add	r3,r19,r2
10003214:	18800017 	ldw	r2,0(r3)
10003218:	10000c1e 	bne	r2,zero,1000324c <quorem+0x1ec>
1000321c:	18bfff04 	addi	r2,r3,-4
10003220:	9880082e 	bgeu	r19,r2,10003244 <quorem+0x1e4>
10003224:	18ffff17 	ldw	r3,-4(r3)
10003228:	18000326 	beq	r3,zero,10003238 <quorem+0x1d8>
1000322c:	00000506 	br	10003244 <quorem+0x1e4>
10003230:	10c00017 	ldw	r3,0(r2)
10003234:	1800031e 	bne	r3,zero,10003244 <quorem+0x1e4>
10003238:	10bfff04 	addi	r2,r2,-4
1000323c:	bdffffc4 	addi	r23,r23,-1
10003240:	98bffb36 	bltu	r19,r2,10003230 <__alt_data_end+0xf8003230>
10003244:	d8c00017 	ldw	r3,0(sp)
10003248:	1dc00415 	stw	r23,16(r3)
1000324c:	9005883a 	mov	r2,r18
10003250:	dfc00d17 	ldw	ra,52(sp)
10003254:	df000c17 	ldw	fp,48(sp)
10003258:	ddc00b17 	ldw	r23,44(sp)
1000325c:	dd800a17 	ldw	r22,40(sp)
10003260:	dd400917 	ldw	r21,36(sp)
10003264:	dd000817 	ldw	r20,32(sp)
10003268:	dcc00717 	ldw	r19,28(sp)
1000326c:	dc800617 	ldw	r18,24(sp)
10003270:	dc400517 	ldw	r17,20(sp)
10003274:	dc000417 	ldw	r16,16(sp)
10003278:	dec00e04 	addi	sp,sp,56
1000327c:	f800283a 	ret
10003280:	0005883a 	mov	r2,zero
10003284:	003ff206 	br	10003250 <__alt_data_end+0xf8003250>

10003288 <_dtoa_r>:
10003288:	20801017 	ldw	r2,64(r4)
1000328c:	deffde04 	addi	sp,sp,-136
10003290:	df002015 	stw	fp,128(sp)
10003294:	dcc01b15 	stw	r19,108(sp)
10003298:	dc801a15 	stw	r18,104(sp)
1000329c:	dc401915 	stw	r17,100(sp)
100032a0:	dc001815 	stw	r16,96(sp)
100032a4:	dfc02115 	stw	ra,132(sp)
100032a8:	ddc01f15 	stw	r23,124(sp)
100032ac:	dd801e15 	stw	r22,120(sp)
100032b0:	dd401d15 	stw	r21,116(sp)
100032b4:	dd001c15 	stw	r20,112(sp)
100032b8:	d9c00315 	stw	r7,12(sp)
100032bc:	2039883a 	mov	fp,r4
100032c0:	3023883a 	mov	r17,r6
100032c4:	2825883a 	mov	r18,r5
100032c8:	dc002417 	ldw	r16,144(sp)
100032cc:	3027883a 	mov	r19,r6
100032d0:	10000826 	beq	r2,zero,100032f4 <_dtoa_r+0x6c>
100032d4:	21801117 	ldw	r6,68(r4)
100032d8:	00c00044 	movi	r3,1
100032dc:	100b883a 	mov	r5,r2
100032e0:	1986983a 	sll	r3,r3,r6
100032e4:	11800115 	stw	r6,4(r2)
100032e8:	10c00215 	stw	r3,8(r2)
100032ec:	000627c0 	call	1000627c <_Bfree>
100032f0:	e0001015 	stw	zero,64(fp)
100032f4:	88002e16 	blt	r17,zero,100033b0 <_dtoa_r+0x128>
100032f8:	80000015 	stw	zero,0(r16)
100032fc:	889ffc2c 	andhi	r2,r17,32752
10003300:	00dffc34 	movhi	r3,32752
10003304:	10c01c26 	beq	r2,r3,10003378 <_dtoa_r+0xf0>
10003308:	000d883a 	mov	r6,zero
1000330c:	000f883a 	mov	r7,zero
10003310:	9009883a 	mov	r4,r18
10003314:	980b883a 	mov	r5,r19
10003318:	000c1c00 	call	1000c1c0 <__eqdf2>
1000331c:	10002b1e 	bne	r2,zero,100033cc <_dtoa_r+0x144>
10003320:	d9c02317 	ldw	r7,140(sp)
10003324:	00800044 	movi	r2,1
10003328:	38800015 	stw	r2,0(r7)
1000332c:	d8802517 	ldw	r2,148(sp)
10003330:	10019e26 	beq	r2,zero,100039ac <_dtoa_r+0x724>
10003334:	d8c02517 	ldw	r3,148(sp)
10003338:	00840074 	movhi	r2,4097
1000333c:	10805944 	addi	r2,r2,357
10003340:	18800015 	stw	r2,0(r3)
10003344:	10bfffc4 	addi	r2,r2,-1
10003348:	dfc02117 	ldw	ra,132(sp)
1000334c:	df002017 	ldw	fp,128(sp)
10003350:	ddc01f17 	ldw	r23,124(sp)
10003354:	dd801e17 	ldw	r22,120(sp)
10003358:	dd401d17 	ldw	r21,116(sp)
1000335c:	dd001c17 	ldw	r20,112(sp)
10003360:	dcc01b17 	ldw	r19,108(sp)
10003364:	dc801a17 	ldw	r18,104(sp)
10003368:	dc401917 	ldw	r17,100(sp)
1000336c:	dc001817 	ldw	r16,96(sp)
10003370:	dec02204 	addi	sp,sp,136
10003374:	f800283a 	ret
10003378:	d8c02317 	ldw	r3,140(sp)
1000337c:	0089c3c4 	movi	r2,9999
10003380:	18800015 	stw	r2,0(r3)
10003384:	90017726 	beq	r18,zero,10003964 <_dtoa_r+0x6dc>
10003388:	00840074 	movhi	r2,4097
1000338c:	10806504 	addi	r2,r2,404
10003390:	d9002517 	ldw	r4,148(sp)
10003394:	203fec26 	beq	r4,zero,10003348 <__alt_data_end+0xf8003348>
10003398:	10c000c7 	ldb	r3,3(r2)
1000339c:	1801781e 	bne	r3,zero,10003980 <_dtoa_r+0x6f8>
100033a0:	10c000c4 	addi	r3,r2,3
100033a4:	d9802517 	ldw	r6,148(sp)
100033a8:	30c00015 	stw	r3,0(r6)
100033ac:	003fe606 	br	10003348 <__alt_data_end+0xf8003348>
100033b0:	04e00034 	movhi	r19,32768
100033b4:	9cffffc4 	addi	r19,r19,-1
100033b8:	00800044 	movi	r2,1
100033bc:	8ce6703a 	and	r19,r17,r19
100033c0:	80800015 	stw	r2,0(r16)
100033c4:	9823883a 	mov	r17,r19
100033c8:	003fcc06 	br	100032fc <__alt_data_end+0xf80032fc>
100033cc:	d8800204 	addi	r2,sp,8
100033d0:	d8800015 	stw	r2,0(sp)
100033d4:	d9c00104 	addi	r7,sp,4
100033d8:	900b883a 	mov	r5,r18
100033dc:	980d883a 	mov	r6,r19
100033e0:	e009883a 	mov	r4,fp
100033e4:	8820d53a 	srli	r16,r17,20
100033e8:	0006f240 	call	10006f24 <__d2b>
100033ec:	d8800915 	stw	r2,36(sp)
100033f0:	8001651e 	bne	r16,zero,10003988 <_dtoa_r+0x700>
100033f4:	dd800217 	ldw	r22,8(sp)
100033f8:	dc000117 	ldw	r16,4(sp)
100033fc:	00800804 	movi	r2,32
10003400:	b421883a 	add	r16,r22,r16
10003404:	80c10c84 	addi	r3,r16,1074
10003408:	10c2d10e 	bge	r2,r3,10003f50 <_dtoa_r+0xcc8>
1000340c:	00801004 	movi	r2,64
10003410:	81010484 	addi	r4,r16,1042
10003414:	10c7c83a 	sub	r3,r2,r3
10003418:	9108d83a 	srl	r4,r18,r4
1000341c:	88e2983a 	sll	r17,r17,r3
10003420:	2448b03a 	or	r4,r4,r17
10003424:	000d6dc0 	call	1000d6dc <__floatunsidf>
10003428:	017f8434 	movhi	r5,65040
1000342c:	01800044 	movi	r6,1
10003430:	1009883a 	mov	r4,r2
10003434:	194b883a 	add	r5,r3,r5
10003438:	843fffc4 	addi	r16,r16,-1
1000343c:	d9801115 	stw	r6,68(sp)
10003440:	000d883a 	mov	r6,zero
10003444:	01cffe34 	movhi	r7,16376
10003448:	000cc840 	call	1000cc84 <__subdf3>
1000344c:	0198dbf4 	movhi	r6,25455
10003450:	01cff4f4 	movhi	r7,16339
10003454:	3190d844 	addi	r6,r6,17249
10003458:	39e1e9c4 	addi	r7,r7,-30809
1000345c:	1009883a 	mov	r4,r2
10003460:	180b883a 	mov	r5,r3
10003464:	000c4180 	call	1000c418 <__muldf3>
10003468:	01a2d874 	movhi	r6,35681
1000346c:	01cff1f4 	movhi	r7,16327
10003470:	31b22cc4 	addi	r6,r6,-14157
10003474:	39e28a04 	addi	r7,r7,-30168
10003478:	180b883a 	mov	r5,r3
1000347c:	1009883a 	mov	r4,r2
10003480:	000af440 	call	1000af44 <__adddf3>
10003484:	8009883a 	mov	r4,r16
10003488:	1029883a 	mov	r20,r2
1000348c:	1823883a 	mov	r17,r3
10003490:	000d6000 	call	1000d600 <__floatsidf>
10003494:	019427f4 	movhi	r6,20639
10003498:	01cff4f4 	movhi	r7,16339
1000349c:	319e7ec4 	addi	r6,r6,31227
100034a0:	39d104c4 	addi	r7,r7,17427
100034a4:	1009883a 	mov	r4,r2
100034a8:	180b883a 	mov	r5,r3
100034ac:	000c4180 	call	1000c418 <__muldf3>
100034b0:	100d883a 	mov	r6,r2
100034b4:	180f883a 	mov	r7,r3
100034b8:	a009883a 	mov	r4,r20
100034bc:	880b883a 	mov	r5,r17
100034c0:	000af440 	call	1000af44 <__adddf3>
100034c4:	1009883a 	mov	r4,r2
100034c8:	180b883a 	mov	r5,r3
100034cc:	1029883a 	mov	r20,r2
100034d0:	1823883a 	mov	r17,r3
100034d4:	000d5800 	call	1000d580 <__fixdfsi>
100034d8:	000d883a 	mov	r6,zero
100034dc:	000f883a 	mov	r7,zero
100034e0:	a009883a 	mov	r4,r20
100034e4:	880b883a 	mov	r5,r17
100034e8:	d8800515 	stw	r2,20(sp)
100034ec:	000c3240 	call	1000c324 <__ledf2>
100034f0:	10028716 	blt	r2,zero,10003f10 <_dtoa_r+0xc88>
100034f4:	d8c00517 	ldw	r3,20(sp)
100034f8:	00800584 	movi	r2,22
100034fc:	10c27536 	bltu	r2,r3,10003ed4 <_dtoa_r+0xc4c>
10003500:	180490fa 	slli	r2,r3,3
10003504:	00c40074 	movhi	r3,4097
10003508:	18c08104 	addi	r3,r3,516
1000350c:	1885883a 	add	r2,r3,r2
10003510:	11000017 	ldw	r4,0(r2)
10003514:	11400117 	ldw	r5,4(r2)
10003518:	900d883a 	mov	r6,r18
1000351c:	980f883a 	mov	r7,r19
10003520:	000c2480 	call	1000c248 <__gedf2>
10003524:	00828d0e 	bge	zero,r2,10003f5c <_dtoa_r+0xcd4>
10003528:	d9000517 	ldw	r4,20(sp)
1000352c:	d8000e15 	stw	zero,56(sp)
10003530:	213fffc4 	addi	r4,r4,-1
10003534:	d9000515 	stw	r4,20(sp)
10003538:	b42dc83a 	sub	r22,r22,r16
1000353c:	b5bfffc4 	addi	r22,r22,-1
10003540:	b0026f16 	blt	r22,zero,10003f00 <_dtoa_r+0xc78>
10003544:	d8000815 	stw	zero,32(sp)
10003548:	d9c00517 	ldw	r7,20(sp)
1000354c:	38026416 	blt	r7,zero,10003ee0 <_dtoa_r+0xc58>
10003550:	b1ed883a 	add	r22,r22,r7
10003554:	d9c00d15 	stw	r7,52(sp)
10003558:	d8000a15 	stw	zero,40(sp)
1000355c:	d9800317 	ldw	r6,12(sp)
10003560:	00800244 	movi	r2,9
10003564:	11811436 	bltu	r2,r6,100039b8 <_dtoa_r+0x730>
10003568:	00800144 	movi	r2,5
1000356c:	1184e10e 	bge	r2,r6,100048f4 <_dtoa_r+0x166c>
10003570:	31bfff04 	addi	r6,r6,-4
10003574:	d9800315 	stw	r6,12(sp)
10003578:	0023883a 	mov	r17,zero
1000357c:	d9800317 	ldw	r6,12(sp)
10003580:	008000c4 	movi	r2,3
10003584:	30836726 	beq	r6,r2,10004324 <_dtoa_r+0x109c>
10003588:	1183410e 	bge	r2,r6,10004290 <_dtoa_r+0x1008>
1000358c:	d9c00317 	ldw	r7,12(sp)
10003590:	00800104 	movi	r2,4
10003594:	38827c26 	beq	r7,r2,10003f88 <_dtoa_r+0xd00>
10003598:	00800144 	movi	r2,5
1000359c:	3884c41e 	bne	r7,r2,100048b0 <_dtoa_r+0x1628>
100035a0:	00800044 	movi	r2,1
100035a4:	d8800b15 	stw	r2,44(sp)
100035a8:	d8c00517 	ldw	r3,20(sp)
100035ac:	d9002217 	ldw	r4,136(sp)
100035b0:	1907883a 	add	r3,r3,r4
100035b4:	19800044 	addi	r6,r3,1
100035b8:	d8c00c15 	stw	r3,48(sp)
100035bc:	d9800615 	stw	r6,24(sp)
100035c0:	0183a40e 	bge	zero,r6,10004454 <_dtoa_r+0x11cc>
100035c4:	d9800617 	ldw	r6,24(sp)
100035c8:	3021883a 	mov	r16,r6
100035cc:	e0001115 	stw	zero,68(fp)
100035d0:	008005c4 	movi	r2,23
100035d4:	1184c92e 	bgeu	r2,r6,100048fc <_dtoa_r+0x1674>
100035d8:	00c00044 	movi	r3,1
100035dc:	00800104 	movi	r2,4
100035e0:	1085883a 	add	r2,r2,r2
100035e4:	11000504 	addi	r4,r2,20
100035e8:	180b883a 	mov	r5,r3
100035ec:	18c00044 	addi	r3,r3,1
100035f0:	313ffb2e 	bgeu	r6,r4,100035e0 <__alt_data_end+0xf80035e0>
100035f4:	e1401115 	stw	r5,68(fp)
100035f8:	e009883a 	mov	r4,fp
100035fc:	00061d40 	call	100061d4 <_Balloc>
10003600:	d8800715 	stw	r2,28(sp)
10003604:	e0801015 	stw	r2,64(fp)
10003608:	00800384 	movi	r2,14
1000360c:	1400f736 	bltu	r2,r16,100039ec <_dtoa_r+0x764>
10003610:	8800f626 	beq	r17,zero,100039ec <_dtoa_r+0x764>
10003614:	d9c00517 	ldw	r7,20(sp)
10003618:	01c39a0e 	bge	zero,r7,10004484 <_dtoa_r+0x11fc>
1000361c:	388003cc 	andi	r2,r7,15
10003620:	100490fa 	slli	r2,r2,3
10003624:	382bd13a 	srai	r21,r7,4
10003628:	00c40074 	movhi	r3,4097
1000362c:	18c08104 	addi	r3,r3,516
10003630:	1885883a 	add	r2,r3,r2
10003634:	a8c0040c 	andi	r3,r21,16
10003638:	12400017 	ldw	r9,0(r2)
1000363c:	12000117 	ldw	r8,4(r2)
10003640:	18037926 	beq	r3,zero,10004428 <_dtoa_r+0x11a0>
10003644:	00840074 	movhi	r2,4097
10003648:	10807704 	addi	r2,r2,476
1000364c:	11800817 	ldw	r6,32(r2)
10003650:	11c00917 	ldw	r7,36(r2)
10003654:	9009883a 	mov	r4,r18
10003658:	980b883a 	mov	r5,r19
1000365c:	da001715 	stw	r8,92(sp)
10003660:	da401615 	stw	r9,88(sp)
10003664:	000b7f00 	call	1000b7f0 <__divdf3>
10003668:	da001717 	ldw	r8,92(sp)
1000366c:	da401617 	ldw	r9,88(sp)
10003670:	ad4003cc 	andi	r21,r21,15
10003674:	040000c4 	movi	r16,3
10003678:	1023883a 	mov	r17,r2
1000367c:	1829883a 	mov	r20,r3
10003680:	a8001126 	beq	r21,zero,100036c8 <_dtoa_r+0x440>
10003684:	05c40074 	movhi	r23,4097
10003688:	bdc07704 	addi	r23,r23,476
1000368c:	4805883a 	mov	r2,r9
10003690:	4007883a 	mov	r3,r8
10003694:	a980004c 	andi	r6,r21,1
10003698:	1009883a 	mov	r4,r2
1000369c:	a82bd07a 	srai	r21,r21,1
100036a0:	180b883a 	mov	r5,r3
100036a4:	30000426 	beq	r6,zero,100036b8 <_dtoa_r+0x430>
100036a8:	b9800017 	ldw	r6,0(r23)
100036ac:	b9c00117 	ldw	r7,4(r23)
100036b0:	84000044 	addi	r16,r16,1
100036b4:	000c4180 	call	1000c418 <__muldf3>
100036b8:	bdc00204 	addi	r23,r23,8
100036bc:	a83ff51e 	bne	r21,zero,10003694 <__alt_data_end+0xf8003694>
100036c0:	1013883a 	mov	r9,r2
100036c4:	1811883a 	mov	r8,r3
100036c8:	480d883a 	mov	r6,r9
100036cc:	400f883a 	mov	r7,r8
100036d0:	8809883a 	mov	r4,r17
100036d4:	a00b883a 	mov	r5,r20
100036d8:	000b7f00 	call	1000b7f0 <__divdf3>
100036dc:	d8800f15 	stw	r2,60(sp)
100036e0:	d8c01015 	stw	r3,64(sp)
100036e4:	d8c00e17 	ldw	r3,56(sp)
100036e8:	18000626 	beq	r3,zero,10003704 <_dtoa_r+0x47c>
100036ec:	d9000f17 	ldw	r4,60(sp)
100036f0:	d9401017 	ldw	r5,64(sp)
100036f4:	000d883a 	mov	r6,zero
100036f8:	01cffc34 	movhi	r7,16368
100036fc:	000c3240 	call	1000c324 <__ledf2>
10003700:	10040b16 	blt	r2,zero,10004730 <_dtoa_r+0x14a8>
10003704:	8009883a 	mov	r4,r16
10003708:	000d6000 	call	1000d600 <__floatsidf>
1000370c:	d9800f17 	ldw	r6,60(sp)
10003710:	d9c01017 	ldw	r7,64(sp)
10003714:	1009883a 	mov	r4,r2
10003718:	180b883a 	mov	r5,r3
1000371c:	000c4180 	call	1000c418 <__muldf3>
10003720:	000d883a 	mov	r6,zero
10003724:	01d00734 	movhi	r7,16412
10003728:	1009883a 	mov	r4,r2
1000372c:	180b883a 	mov	r5,r3
10003730:	000af440 	call	1000af44 <__adddf3>
10003734:	1021883a 	mov	r16,r2
10003738:	d8800617 	ldw	r2,24(sp)
1000373c:	047f3034 	movhi	r17,64704
10003740:	1c63883a 	add	r17,r3,r17
10003744:	10031826 	beq	r2,zero,100043a8 <_dtoa_r+0x1120>
10003748:	d8c00517 	ldw	r3,20(sp)
1000374c:	db000617 	ldw	r12,24(sp)
10003750:	d8c01315 	stw	r3,76(sp)
10003754:	d9000b17 	ldw	r4,44(sp)
10003758:	20038f26 	beq	r4,zero,10004598 <_dtoa_r+0x1310>
1000375c:	60bfffc4 	addi	r2,r12,-1
10003760:	100490fa 	slli	r2,r2,3
10003764:	00c40074 	movhi	r3,4097
10003768:	18c08104 	addi	r3,r3,516
1000376c:	1885883a 	add	r2,r3,r2
10003770:	11800017 	ldw	r6,0(r2)
10003774:	11c00117 	ldw	r7,4(r2)
10003778:	d8800717 	ldw	r2,28(sp)
1000377c:	0009883a 	mov	r4,zero
10003780:	014ff834 	movhi	r5,16352
10003784:	db001615 	stw	r12,88(sp)
10003788:	15c00044 	addi	r23,r2,1
1000378c:	000b7f00 	call	1000b7f0 <__divdf3>
10003790:	800d883a 	mov	r6,r16
10003794:	880f883a 	mov	r7,r17
10003798:	1009883a 	mov	r4,r2
1000379c:	180b883a 	mov	r5,r3
100037a0:	000cc840 	call	1000cc84 <__subdf3>
100037a4:	d9401017 	ldw	r5,64(sp)
100037a8:	d9000f17 	ldw	r4,60(sp)
100037ac:	102b883a 	mov	r21,r2
100037b0:	d8c01215 	stw	r3,72(sp)
100037b4:	000d5800 	call	1000d580 <__fixdfsi>
100037b8:	1009883a 	mov	r4,r2
100037bc:	1029883a 	mov	r20,r2
100037c0:	000d6000 	call	1000d600 <__floatsidf>
100037c4:	d9000f17 	ldw	r4,60(sp)
100037c8:	d9401017 	ldw	r5,64(sp)
100037cc:	100d883a 	mov	r6,r2
100037d0:	180f883a 	mov	r7,r3
100037d4:	000cc840 	call	1000cc84 <__subdf3>
100037d8:	1823883a 	mov	r17,r3
100037dc:	d8c00717 	ldw	r3,28(sp)
100037e0:	d9401217 	ldw	r5,72(sp)
100037e4:	a2000c04 	addi	r8,r20,48
100037e8:	1021883a 	mov	r16,r2
100037ec:	1a000005 	stb	r8,0(r3)
100037f0:	800d883a 	mov	r6,r16
100037f4:	880f883a 	mov	r7,r17
100037f8:	a809883a 	mov	r4,r21
100037fc:	4029883a 	mov	r20,r8
10003800:	000c2480 	call	1000c248 <__gedf2>
10003804:	00841d16 	blt	zero,r2,1000487c <_dtoa_r+0x15f4>
10003808:	800d883a 	mov	r6,r16
1000380c:	880f883a 	mov	r7,r17
10003810:	0009883a 	mov	r4,zero
10003814:	014ffc34 	movhi	r5,16368
10003818:	000cc840 	call	1000cc84 <__subdf3>
1000381c:	d9401217 	ldw	r5,72(sp)
10003820:	100d883a 	mov	r6,r2
10003824:	180f883a 	mov	r7,r3
10003828:	a809883a 	mov	r4,r21
1000382c:	000c2480 	call	1000c248 <__gedf2>
10003830:	db001617 	ldw	r12,88(sp)
10003834:	00840e16 	blt	zero,r2,10004870 <_dtoa_r+0x15e8>
10003838:	00800044 	movi	r2,1
1000383c:	13006b0e 	bge	r2,r12,100039ec <_dtoa_r+0x764>
10003840:	d9000717 	ldw	r4,28(sp)
10003844:	dd800f15 	stw	r22,60(sp)
10003848:	dcc01015 	stw	r19,64(sp)
1000384c:	2319883a 	add	r12,r4,r12
10003850:	dcc01217 	ldw	r19,72(sp)
10003854:	602d883a 	mov	r22,r12
10003858:	dc801215 	stw	r18,72(sp)
1000385c:	b825883a 	mov	r18,r23
10003860:	00000906 	br	10003888 <_dtoa_r+0x600>
10003864:	000cc840 	call	1000cc84 <__subdf3>
10003868:	a80d883a 	mov	r6,r21
1000386c:	980f883a 	mov	r7,r19
10003870:	1009883a 	mov	r4,r2
10003874:	180b883a 	mov	r5,r3
10003878:	000c3240 	call	1000c324 <__ledf2>
1000387c:	1003e816 	blt	r2,zero,10004820 <_dtoa_r+0x1598>
10003880:	b825883a 	mov	r18,r23
10003884:	bd83e926 	beq	r23,r22,1000482c <_dtoa_r+0x15a4>
10003888:	a809883a 	mov	r4,r21
1000388c:	980b883a 	mov	r5,r19
10003890:	000d883a 	mov	r6,zero
10003894:	01d00934 	movhi	r7,16420
10003898:	000c4180 	call	1000c418 <__muldf3>
1000389c:	000d883a 	mov	r6,zero
100038a0:	01d00934 	movhi	r7,16420
100038a4:	8009883a 	mov	r4,r16
100038a8:	880b883a 	mov	r5,r17
100038ac:	102b883a 	mov	r21,r2
100038b0:	1827883a 	mov	r19,r3
100038b4:	000c4180 	call	1000c418 <__muldf3>
100038b8:	180b883a 	mov	r5,r3
100038bc:	1009883a 	mov	r4,r2
100038c0:	1821883a 	mov	r16,r3
100038c4:	1023883a 	mov	r17,r2
100038c8:	000d5800 	call	1000d580 <__fixdfsi>
100038cc:	1009883a 	mov	r4,r2
100038d0:	1029883a 	mov	r20,r2
100038d4:	000d6000 	call	1000d600 <__floatsidf>
100038d8:	8809883a 	mov	r4,r17
100038dc:	800b883a 	mov	r5,r16
100038e0:	100d883a 	mov	r6,r2
100038e4:	180f883a 	mov	r7,r3
100038e8:	000cc840 	call	1000cc84 <__subdf3>
100038ec:	a5000c04 	addi	r20,r20,48
100038f0:	a80d883a 	mov	r6,r21
100038f4:	980f883a 	mov	r7,r19
100038f8:	1009883a 	mov	r4,r2
100038fc:	180b883a 	mov	r5,r3
10003900:	95000005 	stb	r20,0(r18)
10003904:	1021883a 	mov	r16,r2
10003908:	1823883a 	mov	r17,r3
1000390c:	000c3240 	call	1000c324 <__ledf2>
10003910:	bdc00044 	addi	r23,r23,1
10003914:	800d883a 	mov	r6,r16
10003918:	880f883a 	mov	r7,r17
1000391c:	0009883a 	mov	r4,zero
10003920:	014ffc34 	movhi	r5,16368
10003924:	103fcf0e 	bge	r2,zero,10003864 <__alt_data_end+0xf8003864>
10003928:	d8c01317 	ldw	r3,76(sp)
1000392c:	d8c00515 	stw	r3,20(sp)
10003930:	d9400917 	ldw	r5,36(sp)
10003934:	e009883a 	mov	r4,fp
10003938:	000627c0 	call	1000627c <_Bfree>
1000393c:	d9000517 	ldw	r4,20(sp)
10003940:	d9802317 	ldw	r6,140(sp)
10003944:	d9c02517 	ldw	r7,148(sp)
10003948:	b8000005 	stb	zero,0(r23)
1000394c:	20800044 	addi	r2,r4,1
10003950:	30800015 	stw	r2,0(r6)
10003954:	3802aa26 	beq	r7,zero,10004400 <_dtoa_r+0x1178>
10003958:	3dc00015 	stw	r23,0(r7)
1000395c:	d8800717 	ldw	r2,28(sp)
10003960:	003e7906 	br	10003348 <__alt_data_end+0xf8003348>
10003964:	00800434 	movhi	r2,16
10003968:	10bfffc4 	addi	r2,r2,-1
1000396c:	88a2703a 	and	r17,r17,r2
10003970:	883e851e 	bne	r17,zero,10003388 <__alt_data_end+0xf8003388>
10003974:	00840074 	movhi	r2,4097
10003978:	10806204 	addi	r2,r2,392
1000397c:	003e8406 	br	10003390 <__alt_data_end+0xf8003390>
10003980:	10c00204 	addi	r3,r2,8
10003984:	003e8706 	br	100033a4 <__alt_data_end+0xf80033a4>
10003988:	01400434 	movhi	r5,16
1000398c:	297fffc4 	addi	r5,r5,-1
10003990:	994a703a 	and	r5,r19,r5
10003994:	9009883a 	mov	r4,r18
10003998:	843f0044 	addi	r16,r16,-1023
1000399c:	294ffc34 	orhi	r5,r5,16368
100039a0:	dd800217 	ldw	r22,8(sp)
100039a4:	d8001115 	stw	zero,68(sp)
100039a8:	003ea506 	br	10003440 <__alt_data_end+0xf8003440>
100039ac:	00840074 	movhi	r2,4097
100039b0:	10805904 	addi	r2,r2,356
100039b4:	003e6406 	br	10003348 <__alt_data_end+0xf8003348>
100039b8:	e0001115 	stw	zero,68(fp)
100039bc:	000b883a 	mov	r5,zero
100039c0:	e009883a 	mov	r4,fp
100039c4:	00061d40 	call	100061d4 <_Balloc>
100039c8:	01bfffc4 	movi	r6,-1
100039cc:	01c00044 	movi	r7,1
100039d0:	d8800715 	stw	r2,28(sp)
100039d4:	d9800c15 	stw	r6,48(sp)
100039d8:	e0801015 	stw	r2,64(fp)
100039dc:	d8000315 	stw	zero,12(sp)
100039e0:	d9c00b15 	stw	r7,44(sp)
100039e4:	d9800615 	stw	r6,24(sp)
100039e8:	d8002215 	stw	zero,136(sp)
100039ec:	d8800117 	ldw	r2,4(sp)
100039f0:	10008916 	blt	r2,zero,10003c18 <_dtoa_r+0x990>
100039f4:	d9000517 	ldw	r4,20(sp)
100039f8:	00c00384 	movi	r3,14
100039fc:	19008616 	blt	r3,r4,10003c18 <_dtoa_r+0x990>
10003a00:	200490fa 	slli	r2,r4,3
10003a04:	00c40074 	movhi	r3,4097
10003a08:	d9802217 	ldw	r6,136(sp)
10003a0c:	18c08104 	addi	r3,r3,516
10003a10:	1885883a 	add	r2,r3,r2
10003a14:	14000017 	ldw	r16,0(r2)
10003a18:	14400117 	ldw	r17,4(r2)
10003a1c:	30016316 	blt	r6,zero,10003fac <_dtoa_r+0xd24>
10003a20:	800d883a 	mov	r6,r16
10003a24:	880f883a 	mov	r7,r17
10003a28:	9009883a 	mov	r4,r18
10003a2c:	980b883a 	mov	r5,r19
10003a30:	000b7f00 	call	1000b7f0 <__divdf3>
10003a34:	180b883a 	mov	r5,r3
10003a38:	1009883a 	mov	r4,r2
10003a3c:	000d5800 	call	1000d580 <__fixdfsi>
10003a40:	1009883a 	mov	r4,r2
10003a44:	102b883a 	mov	r21,r2
10003a48:	000d6000 	call	1000d600 <__floatsidf>
10003a4c:	800d883a 	mov	r6,r16
10003a50:	880f883a 	mov	r7,r17
10003a54:	1009883a 	mov	r4,r2
10003a58:	180b883a 	mov	r5,r3
10003a5c:	000c4180 	call	1000c418 <__muldf3>
10003a60:	100d883a 	mov	r6,r2
10003a64:	180f883a 	mov	r7,r3
10003a68:	9009883a 	mov	r4,r18
10003a6c:	980b883a 	mov	r5,r19
10003a70:	000cc840 	call	1000cc84 <__subdf3>
10003a74:	d9c00717 	ldw	r7,28(sp)
10003a78:	1009883a 	mov	r4,r2
10003a7c:	a8800c04 	addi	r2,r21,48
10003a80:	38800005 	stb	r2,0(r7)
10003a84:	3dc00044 	addi	r23,r7,1
10003a88:	d9c00617 	ldw	r7,24(sp)
10003a8c:	01800044 	movi	r6,1
10003a90:	180b883a 	mov	r5,r3
10003a94:	2005883a 	mov	r2,r4
10003a98:	39803826 	beq	r7,r6,10003b7c <_dtoa_r+0x8f4>
10003a9c:	000d883a 	mov	r6,zero
10003aa0:	01d00934 	movhi	r7,16420
10003aa4:	000c4180 	call	1000c418 <__muldf3>
10003aa8:	000d883a 	mov	r6,zero
10003aac:	000f883a 	mov	r7,zero
10003ab0:	1009883a 	mov	r4,r2
10003ab4:	180b883a 	mov	r5,r3
10003ab8:	1025883a 	mov	r18,r2
10003abc:	1827883a 	mov	r19,r3
10003ac0:	000c1c00 	call	1000c1c0 <__eqdf2>
10003ac4:	103f9a26 	beq	r2,zero,10003930 <__alt_data_end+0xf8003930>
10003ac8:	d9c00617 	ldw	r7,24(sp)
10003acc:	d8c00717 	ldw	r3,28(sp)
10003ad0:	b829883a 	mov	r20,r23
10003ad4:	38bfffc4 	addi	r2,r7,-1
10003ad8:	18ad883a 	add	r22,r3,r2
10003adc:	00000a06 	br	10003b08 <_dtoa_r+0x880>
10003ae0:	000c4180 	call	1000c418 <__muldf3>
10003ae4:	000d883a 	mov	r6,zero
10003ae8:	000f883a 	mov	r7,zero
10003aec:	1009883a 	mov	r4,r2
10003af0:	180b883a 	mov	r5,r3
10003af4:	1025883a 	mov	r18,r2
10003af8:	1827883a 	mov	r19,r3
10003afc:	b829883a 	mov	r20,r23
10003b00:	000c1c00 	call	1000c1c0 <__eqdf2>
10003b04:	103f8a26 	beq	r2,zero,10003930 <__alt_data_end+0xf8003930>
10003b08:	800d883a 	mov	r6,r16
10003b0c:	880f883a 	mov	r7,r17
10003b10:	9009883a 	mov	r4,r18
10003b14:	980b883a 	mov	r5,r19
10003b18:	000b7f00 	call	1000b7f0 <__divdf3>
10003b1c:	180b883a 	mov	r5,r3
10003b20:	1009883a 	mov	r4,r2
10003b24:	000d5800 	call	1000d580 <__fixdfsi>
10003b28:	1009883a 	mov	r4,r2
10003b2c:	102b883a 	mov	r21,r2
10003b30:	000d6000 	call	1000d600 <__floatsidf>
10003b34:	800d883a 	mov	r6,r16
10003b38:	880f883a 	mov	r7,r17
10003b3c:	1009883a 	mov	r4,r2
10003b40:	180b883a 	mov	r5,r3
10003b44:	000c4180 	call	1000c418 <__muldf3>
10003b48:	100d883a 	mov	r6,r2
10003b4c:	180f883a 	mov	r7,r3
10003b50:	9009883a 	mov	r4,r18
10003b54:	980b883a 	mov	r5,r19
10003b58:	000cc840 	call	1000cc84 <__subdf3>
10003b5c:	aa000c04 	addi	r8,r21,48
10003b60:	a2000005 	stb	r8,0(r20)
10003b64:	000d883a 	mov	r6,zero
10003b68:	01d00934 	movhi	r7,16420
10003b6c:	1009883a 	mov	r4,r2
10003b70:	180b883a 	mov	r5,r3
10003b74:	a5c00044 	addi	r23,r20,1
10003b78:	b53fd91e 	bne	r22,r20,10003ae0 <__alt_data_end+0xf8003ae0>
10003b7c:	100d883a 	mov	r6,r2
10003b80:	180f883a 	mov	r7,r3
10003b84:	1009883a 	mov	r4,r2
10003b88:	180b883a 	mov	r5,r3
10003b8c:	000af440 	call	1000af44 <__adddf3>
10003b90:	100d883a 	mov	r6,r2
10003b94:	180f883a 	mov	r7,r3
10003b98:	8009883a 	mov	r4,r16
10003b9c:	880b883a 	mov	r5,r17
10003ba0:	1027883a 	mov	r19,r2
10003ba4:	1825883a 	mov	r18,r3
10003ba8:	000c3240 	call	1000c324 <__ledf2>
10003bac:	10000816 	blt	r2,zero,10003bd0 <_dtoa_r+0x948>
10003bb0:	980d883a 	mov	r6,r19
10003bb4:	900f883a 	mov	r7,r18
10003bb8:	8009883a 	mov	r4,r16
10003bbc:	880b883a 	mov	r5,r17
10003bc0:	000c1c00 	call	1000c1c0 <__eqdf2>
10003bc4:	103f5a1e 	bne	r2,zero,10003930 <__alt_data_end+0xf8003930>
10003bc8:	ad40004c 	andi	r21,r21,1
10003bcc:	a83f5826 	beq	r21,zero,10003930 <__alt_data_end+0xf8003930>
10003bd0:	bd3fffc3 	ldbu	r20,-1(r23)
10003bd4:	b8bfffc4 	addi	r2,r23,-1
10003bd8:	1007883a 	mov	r3,r2
10003bdc:	01400e44 	movi	r5,57
10003be0:	d9800717 	ldw	r6,28(sp)
10003be4:	00000506 	br	10003bfc <_dtoa_r+0x974>
10003be8:	18ffffc4 	addi	r3,r3,-1
10003bec:	11824726 	beq	r2,r6,1000450c <_dtoa_r+0x1284>
10003bf0:	1d000003 	ldbu	r20,0(r3)
10003bf4:	102f883a 	mov	r23,r2
10003bf8:	10bfffc4 	addi	r2,r2,-1
10003bfc:	a1003fcc 	andi	r4,r20,255
10003c00:	2100201c 	xori	r4,r4,128
10003c04:	213fe004 	addi	r4,r4,-128
10003c08:	217ff726 	beq	r4,r5,10003be8 <__alt_data_end+0xf8003be8>
10003c0c:	a2000044 	addi	r8,r20,1
10003c10:	12000005 	stb	r8,0(r2)
10003c14:	003f4606 	br	10003930 <__alt_data_end+0xf8003930>
10003c18:	d9000b17 	ldw	r4,44(sp)
10003c1c:	2000c826 	beq	r4,zero,10003f40 <_dtoa_r+0xcb8>
10003c20:	d9800317 	ldw	r6,12(sp)
10003c24:	00c00044 	movi	r3,1
10003c28:	1980f90e 	bge	r3,r6,10004010 <_dtoa_r+0xd88>
10003c2c:	d8800617 	ldw	r2,24(sp)
10003c30:	d8c00a17 	ldw	r3,40(sp)
10003c34:	157fffc4 	addi	r21,r2,-1
10003c38:	1d41f316 	blt	r3,r21,10004408 <_dtoa_r+0x1180>
10003c3c:	1d6bc83a 	sub	r21,r3,r21
10003c40:	d9c00617 	ldw	r7,24(sp)
10003c44:	3802aa16 	blt	r7,zero,100046f0 <_dtoa_r+0x1468>
10003c48:	dd000817 	ldw	r20,32(sp)
10003c4c:	d8800617 	ldw	r2,24(sp)
10003c50:	d8c00817 	ldw	r3,32(sp)
10003c54:	01400044 	movi	r5,1
10003c58:	e009883a 	mov	r4,fp
10003c5c:	1887883a 	add	r3,r3,r2
10003c60:	d8c00815 	stw	r3,32(sp)
10003c64:	b0ad883a 	add	r22,r22,r2
10003c68:	00066080 	call	10006608 <__i2b>
10003c6c:	1023883a 	mov	r17,r2
10003c70:	a0000826 	beq	r20,zero,10003c94 <_dtoa_r+0xa0c>
10003c74:	0580070e 	bge	zero,r22,10003c94 <_dtoa_r+0xa0c>
10003c78:	a005883a 	mov	r2,r20
10003c7c:	b500b916 	blt	r22,r20,10003f64 <_dtoa_r+0xcdc>
10003c80:	d9000817 	ldw	r4,32(sp)
10003c84:	a0a9c83a 	sub	r20,r20,r2
10003c88:	b0adc83a 	sub	r22,r22,r2
10003c8c:	2089c83a 	sub	r4,r4,r2
10003c90:	d9000815 	stw	r4,32(sp)
10003c94:	d9800a17 	ldw	r6,40(sp)
10003c98:	0181810e 	bge	zero,r6,100042a0 <_dtoa_r+0x1018>
10003c9c:	d9c00b17 	ldw	r7,44(sp)
10003ca0:	3800b326 	beq	r7,zero,10003f70 <_dtoa_r+0xce8>
10003ca4:	a800b226 	beq	r21,zero,10003f70 <_dtoa_r+0xce8>
10003ca8:	880b883a 	mov	r5,r17
10003cac:	a80d883a 	mov	r6,r21
10003cb0:	e009883a 	mov	r4,fp
10003cb4:	00068d00 	call	100068d0 <__pow5mult>
10003cb8:	d9800917 	ldw	r6,36(sp)
10003cbc:	100b883a 	mov	r5,r2
10003cc0:	e009883a 	mov	r4,fp
10003cc4:	1023883a 	mov	r17,r2
10003cc8:	00066440 	call	10006644 <__multiply>
10003ccc:	1021883a 	mov	r16,r2
10003cd0:	d8800a17 	ldw	r2,40(sp)
10003cd4:	d9400917 	ldw	r5,36(sp)
10003cd8:	e009883a 	mov	r4,fp
10003cdc:	1545c83a 	sub	r2,r2,r21
10003ce0:	d8800a15 	stw	r2,40(sp)
10003ce4:	000627c0 	call	1000627c <_Bfree>
10003ce8:	d8c00a17 	ldw	r3,40(sp)
10003cec:	18009f1e 	bne	r3,zero,10003f6c <_dtoa_r+0xce4>
10003cf0:	05c00044 	movi	r23,1
10003cf4:	e009883a 	mov	r4,fp
10003cf8:	b80b883a 	mov	r5,r23
10003cfc:	00066080 	call	10006608 <__i2b>
10003d00:	d9000d17 	ldw	r4,52(sp)
10003d04:	102b883a 	mov	r21,r2
10003d08:	2000ce26 	beq	r4,zero,10004044 <_dtoa_r+0xdbc>
10003d0c:	200d883a 	mov	r6,r4
10003d10:	100b883a 	mov	r5,r2
10003d14:	e009883a 	mov	r4,fp
10003d18:	00068d00 	call	100068d0 <__pow5mult>
10003d1c:	d9800317 	ldw	r6,12(sp)
10003d20:	102b883a 	mov	r21,r2
10003d24:	b981810e 	bge	r23,r6,1000432c <_dtoa_r+0x10a4>
10003d28:	0027883a 	mov	r19,zero
10003d2c:	a8800417 	ldw	r2,16(r21)
10003d30:	05c00804 	movi	r23,32
10003d34:	10800104 	addi	r2,r2,4
10003d38:	1085883a 	add	r2,r2,r2
10003d3c:	1085883a 	add	r2,r2,r2
10003d40:	a885883a 	add	r2,r21,r2
10003d44:	11000017 	ldw	r4,0(r2)
10003d48:	00064f00 	call	100064f0 <__hi0bits>
10003d4c:	b885c83a 	sub	r2,r23,r2
10003d50:	1585883a 	add	r2,r2,r22
10003d54:	108007cc 	andi	r2,r2,31
10003d58:	1000b326 	beq	r2,zero,10004028 <_dtoa_r+0xda0>
10003d5c:	00c00804 	movi	r3,32
10003d60:	1887c83a 	sub	r3,r3,r2
10003d64:	01000104 	movi	r4,4
10003d68:	20c2cd0e 	bge	r4,r3,100048a0 <_dtoa_r+0x1618>
10003d6c:	00c00704 	movi	r3,28
10003d70:	1885c83a 	sub	r2,r3,r2
10003d74:	d8c00817 	ldw	r3,32(sp)
10003d78:	a0a9883a 	add	r20,r20,r2
10003d7c:	b0ad883a 	add	r22,r22,r2
10003d80:	1887883a 	add	r3,r3,r2
10003d84:	d8c00815 	stw	r3,32(sp)
10003d88:	d9800817 	ldw	r6,32(sp)
10003d8c:	0180040e 	bge	zero,r6,10003da0 <_dtoa_r+0xb18>
10003d90:	800b883a 	mov	r5,r16
10003d94:	e009883a 	mov	r4,fp
10003d98:	0006a100 	call	10006a10 <__lshift>
10003d9c:	1021883a 	mov	r16,r2
10003da0:	0580050e 	bge	zero,r22,10003db8 <_dtoa_r+0xb30>
10003da4:	a80b883a 	mov	r5,r21
10003da8:	b00d883a 	mov	r6,r22
10003dac:	e009883a 	mov	r4,fp
10003db0:	0006a100 	call	10006a10 <__lshift>
10003db4:	102b883a 	mov	r21,r2
10003db8:	d9c00e17 	ldw	r7,56(sp)
10003dbc:	3801211e 	bne	r7,zero,10004244 <_dtoa_r+0xfbc>
10003dc0:	d9800617 	ldw	r6,24(sp)
10003dc4:	0181380e 	bge	zero,r6,100042a8 <_dtoa_r+0x1020>
10003dc8:	d8c00b17 	ldw	r3,44(sp)
10003dcc:	1800ab1e 	bne	r3,zero,1000407c <_dtoa_r+0xdf4>
10003dd0:	dc800717 	ldw	r18,28(sp)
10003dd4:	dcc00617 	ldw	r19,24(sp)
10003dd8:	9029883a 	mov	r20,r18
10003ddc:	00000206 	br	10003de8 <_dtoa_r+0xb60>
10003de0:	00062a40 	call	100062a4 <__multadd>
10003de4:	1021883a 	mov	r16,r2
10003de8:	a80b883a 	mov	r5,r21
10003dec:	8009883a 	mov	r4,r16
10003df0:	00030600 	call	10003060 <quorem>
10003df4:	10800c04 	addi	r2,r2,48
10003df8:	90800005 	stb	r2,0(r18)
10003dfc:	94800044 	addi	r18,r18,1
10003e00:	9507c83a 	sub	r3,r18,r20
10003e04:	000f883a 	mov	r7,zero
10003e08:	01800284 	movi	r6,10
10003e0c:	800b883a 	mov	r5,r16
10003e10:	e009883a 	mov	r4,fp
10003e14:	1cfff216 	blt	r3,r19,10003de0 <__alt_data_end+0xf8003de0>
10003e18:	1011883a 	mov	r8,r2
10003e1c:	d8800617 	ldw	r2,24(sp)
10003e20:	0082370e 	bge	zero,r2,10004700 <_dtoa_r+0x1478>
10003e24:	d9000717 	ldw	r4,28(sp)
10003e28:	0025883a 	mov	r18,zero
10003e2c:	20af883a 	add	r23,r4,r2
10003e30:	01800044 	movi	r6,1
10003e34:	800b883a 	mov	r5,r16
10003e38:	e009883a 	mov	r4,fp
10003e3c:	da001715 	stw	r8,92(sp)
10003e40:	0006a100 	call	10006a10 <__lshift>
10003e44:	a80b883a 	mov	r5,r21
10003e48:	1009883a 	mov	r4,r2
10003e4c:	d8800915 	stw	r2,36(sp)
10003e50:	0006b580 	call	10006b58 <__mcmp>
10003e54:	da001717 	ldw	r8,92(sp)
10003e58:	0081800e 	bge	zero,r2,1000445c <_dtoa_r+0x11d4>
10003e5c:	b93fffc3 	ldbu	r4,-1(r23)
10003e60:	b8bfffc4 	addi	r2,r23,-1
10003e64:	1007883a 	mov	r3,r2
10003e68:	01800e44 	movi	r6,57
10003e6c:	d9c00717 	ldw	r7,28(sp)
10003e70:	00000506 	br	10003e88 <_dtoa_r+0xc00>
10003e74:	18ffffc4 	addi	r3,r3,-1
10003e78:	11c12326 	beq	r2,r7,10004308 <_dtoa_r+0x1080>
10003e7c:	19000003 	ldbu	r4,0(r3)
10003e80:	102f883a 	mov	r23,r2
10003e84:	10bfffc4 	addi	r2,r2,-1
10003e88:	21403fcc 	andi	r5,r4,255
10003e8c:	2940201c 	xori	r5,r5,128
10003e90:	297fe004 	addi	r5,r5,-128
10003e94:	29bff726 	beq	r5,r6,10003e74 <__alt_data_end+0xf8003e74>
10003e98:	21000044 	addi	r4,r4,1
10003e9c:	11000005 	stb	r4,0(r2)
10003ea0:	a80b883a 	mov	r5,r21
10003ea4:	e009883a 	mov	r4,fp
10003ea8:	000627c0 	call	1000627c <_Bfree>
10003eac:	883ea026 	beq	r17,zero,10003930 <__alt_data_end+0xf8003930>
10003eb0:	90000426 	beq	r18,zero,10003ec4 <_dtoa_r+0xc3c>
10003eb4:	94400326 	beq	r18,r17,10003ec4 <_dtoa_r+0xc3c>
10003eb8:	900b883a 	mov	r5,r18
10003ebc:	e009883a 	mov	r4,fp
10003ec0:	000627c0 	call	1000627c <_Bfree>
10003ec4:	880b883a 	mov	r5,r17
10003ec8:	e009883a 	mov	r4,fp
10003ecc:	000627c0 	call	1000627c <_Bfree>
10003ed0:	003e9706 	br	10003930 <__alt_data_end+0xf8003930>
10003ed4:	01800044 	movi	r6,1
10003ed8:	d9800e15 	stw	r6,56(sp)
10003edc:	003d9606 	br	10003538 <__alt_data_end+0xf8003538>
10003ee0:	d8800817 	ldw	r2,32(sp)
10003ee4:	d8c00517 	ldw	r3,20(sp)
10003ee8:	d8000d15 	stw	zero,52(sp)
10003eec:	10c5c83a 	sub	r2,r2,r3
10003ef0:	00c9c83a 	sub	r4,zero,r3
10003ef4:	d8800815 	stw	r2,32(sp)
10003ef8:	d9000a15 	stw	r4,40(sp)
10003efc:	003d9706 	br	1000355c <__alt_data_end+0xf800355c>
10003f00:	05adc83a 	sub	r22,zero,r22
10003f04:	dd800815 	stw	r22,32(sp)
10003f08:	002d883a 	mov	r22,zero
10003f0c:	003d8e06 	br	10003548 <__alt_data_end+0xf8003548>
10003f10:	d9000517 	ldw	r4,20(sp)
10003f14:	000d6000 	call	1000d600 <__floatsidf>
10003f18:	100d883a 	mov	r6,r2
10003f1c:	180f883a 	mov	r7,r3
10003f20:	a009883a 	mov	r4,r20
10003f24:	880b883a 	mov	r5,r17
10003f28:	000c1c00 	call	1000c1c0 <__eqdf2>
10003f2c:	103d7126 	beq	r2,zero,100034f4 <__alt_data_end+0xf80034f4>
10003f30:	d9c00517 	ldw	r7,20(sp)
10003f34:	39ffffc4 	addi	r7,r7,-1
10003f38:	d9c00515 	stw	r7,20(sp)
10003f3c:	003d6d06 	br	100034f4 <__alt_data_end+0xf80034f4>
10003f40:	dd400a17 	ldw	r21,40(sp)
10003f44:	dd000817 	ldw	r20,32(sp)
10003f48:	0023883a 	mov	r17,zero
10003f4c:	003f4806 	br	10003c70 <__alt_data_end+0xf8003c70>
10003f50:	10e3c83a 	sub	r17,r2,r3
10003f54:	9448983a 	sll	r4,r18,r17
10003f58:	003d3206 	br	10003424 <__alt_data_end+0xf8003424>
10003f5c:	d8000e15 	stw	zero,56(sp)
10003f60:	003d7506 	br	10003538 <__alt_data_end+0xf8003538>
10003f64:	b005883a 	mov	r2,r22
10003f68:	003f4506 	br	10003c80 <__alt_data_end+0xf8003c80>
10003f6c:	dc000915 	stw	r16,36(sp)
10003f70:	d9800a17 	ldw	r6,40(sp)
10003f74:	d9400917 	ldw	r5,36(sp)
10003f78:	e009883a 	mov	r4,fp
10003f7c:	00068d00 	call	100068d0 <__pow5mult>
10003f80:	1021883a 	mov	r16,r2
10003f84:	003f5a06 	br	10003cf0 <__alt_data_end+0xf8003cf0>
10003f88:	01c00044 	movi	r7,1
10003f8c:	d9c00b15 	stw	r7,44(sp)
10003f90:	d8802217 	ldw	r2,136(sp)
10003f94:	0081280e 	bge	zero,r2,10004438 <_dtoa_r+0x11b0>
10003f98:	100d883a 	mov	r6,r2
10003f9c:	1021883a 	mov	r16,r2
10003fa0:	d8800c15 	stw	r2,48(sp)
10003fa4:	d8800615 	stw	r2,24(sp)
10003fa8:	003d8806 	br	100035cc <__alt_data_end+0xf80035cc>
10003fac:	d8800617 	ldw	r2,24(sp)
10003fb0:	00be9b16 	blt	zero,r2,10003a20 <__alt_data_end+0xf8003a20>
10003fb4:	10010f1e 	bne	r2,zero,100043f4 <_dtoa_r+0x116c>
10003fb8:	880b883a 	mov	r5,r17
10003fbc:	000d883a 	mov	r6,zero
10003fc0:	01d00534 	movhi	r7,16404
10003fc4:	8009883a 	mov	r4,r16
10003fc8:	000c4180 	call	1000c418 <__muldf3>
10003fcc:	900d883a 	mov	r6,r18
10003fd0:	980f883a 	mov	r7,r19
10003fd4:	1009883a 	mov	r4,r2
10003fd8:	180b883a 	mov	r5,r3
10003fdc:	000c2480 	call	1000c248 <__gedf2>
10003fe0:	002b883a 	mov	r21,zero
10003fe4:	0023883a 	mov	r17,zero
10003fe8:	1000bf16 	blt	r2,zero,100042e8 <_dtoa_r+0x1060>
10003fec:	d9802217 	ldw	r6,136(sp)
10003ff0:	ddc00717 	ldw	r23,28(sp)
10003ff4:	018c303a 	nor	r6,zero,r6
10003ff8:	d9800515 	stw	r6,20(sp)
10003ffc:	a80b883a 	mov	r5,r21
10004000:	e009883a 	mov	r4,fp
10004004:	000627c0 	call	1000627c <_Bfree>
10004008:	883e4926 	beq	r17,zero,10003930 <__alt_data_end+0xf8003930>
1000400c:	003fad06 	br	10003ec4 <__alt_data_end+0xf8003ec4>
10004010:	d9c01117 	ldw	r7,68(sp)
10004014:	3801bc26 	beq	r7,zero,10004708 <_dtoa_r+0x1480>
10004018:	10810cc4 	addi	r2,r2,1075
1000401c:	dd400a17 	ldw	r21,40(sp)
10004020:	dd000817 	ldw	r20,32(sp)
10004024:	003f0a06 	br	10003c50 <__alt_data_end+0xf8003c50>
10004028:	00800704 	movi	r2,28
1000402c:	d9000817 	ldw	r4,32(sp)
10004030:	a0a9883a 	add	r20,r20,r2
10004034:	b0ad883a 	add	r22,r22,r2
10004038:	2089883a 	add	r4,r4,r2
1000403c:	d9000815 	stw	r4,32(sp)
10004040:	003f5106 	br	10003d88 <__alt_data_end+0xf8003d88>
10004044:	d8c00317 	ldw	r3,12(sp)
10004048:	b8c1fc0e 	bge	r23,r3,1000483c <_dtoa_r+0x15b4>
1000404c:	0027883a 	mov	r19,zero
10004050:	b805883a 	mov	r2,r23
10004054:	003f3e06 	br	10003d50 <__alt_data_end+0xf8003d50>
10004058:	880b883a 	mov	r5,r17
1000405c:	e009883a 	mov	r4,fp
10004060:	000f883a 	mov	r7,zero
10004064:	01800284 	movi	r6,10
10004068:	00062a40 	call	100062a4 <__multadd>
1000406c:	d9000c17 	ldw	r4,48(sp)
10004070:	1023883a 	mov	r17,r2
10004074:	0102040e 	bge	zero,r4,10004888 <_dtoa_r+0x1600>
10004078:	d9000615 	stw	r4,24(sp)
1000407c:	0500050e 	bge	zero,r20,10004094 <_dtoa_r+0xe0c>
10004080:	880b883a 	mov	r5,r17
10004084:	a00d883a 	mov	r6,r20
10004088:	e009883a 	mov	r4,fp
1000408c:	0006a100 	call	10006a10 <__lshift>
10004090:	1023883a 	mov	r17,r2
10004094:	9801241e 	bne	r19,zero,10004528 <_dtoa_r+0x12a0>
10004098:	8829883a 	mov	r20,r17
1000409c:	d9000617 	ldw	r4,24(sp)
100040a0:	dcc00717 	ldw	r19,28(sp)
100040a4:	9480004c 	andi	r18,r18,1
100040a8:	20bfffc4 	addi	r2,r4,-1
100040ac:	9885883a 	add	r2,r19,r2
100040b0:	d8800415 	stw	r2,16(sp)
100040b4:	dc800615 	stw	r18,24(sp)
100040b8:	a80b883a 	mov	r5,r21
100040bc:	8009883a 	mov	r4,r16
100040c0:	00030600 	call	10003060 <quorem>
100040c4:	880b883a 	mov	r5,r17
100040c8:	8009883a 	mov	r4,r16
100040cc:	102f883a 	mov	r23,r2
100040d0:	0006b580 	call	10006b58 <__mcmp>
100040d4:	a80b883a 	mov	r5,r21
100040d8:	a00d883a 	mov	r6,r20
100040dc:	e009883a 	mov	r4,fp
100040e0:	102d883a 	mov	r22,r2
100040e4:	0006bb80 	call	10006bb8 <__mdiff>
100040e8:	1007883a 	mov	r3,r2
100040ec:	10800317 	ldw	r2,12(r2)
100040f0:	bc800c04 	addi	r18,r23,48
100040f4:	180b883a 	mov	r5,r3
100040f8:	10004e1e 	bne	r2,zero,10004234 <_dtoa_r+0xfac>
100040fc:	8009883a 	mov	r4,r16
10004100:	d8c01615 	stw	r3,88(sp)
10004104:	0006b580 	call	10006b58 <__mcmp>
10004108:	d8c01617 	ldw	r3,88(sp)
1000410c:	e009883a 	mov	r4,fp
10004110:	d8801615 	stw	r2,88(sp)
10004114:	180b883a 	mov	r5,r3
10004118:	000627c0 	call	1000627c <_Bfree>
1000411c:	d8801617 	ldw	r2,88(sp)
10004120:	1000041e 	bne	r2,zero,10004134 <_dtoa_r+0xeac>
10004124:	d9800317 	ldw	r6,12(sp)
10004128:	3000021e 	bne	r6,zero,10004134 <_dtoa_r+0xeac>
1000412c:	d8c00617 	ldw	r3,24(sp)
10004130:	18003726 	beq	r3,zero,10004210 <_dtoa_r+0xf88>
10004134:	b0002016 	blt	r22,zero,100041b8 <_dtoa_r+0xf30>
10004138:	b000041e 	bne	r22,zero,1000414c <_dtoa_r+0xec4>
1000413c:	d9000317 	ldw	r4,12(sp)
10004140:	2000021e 	bne	r4,zero,1000414c <_dtoa_r+0xec4>
10004144:	d8c00617 	ldw	r3,24(sp)
10004148:	18001b26 	beq	r3,zero,100041b8 <_dtoa_r+0xf30>
1000414c:	00810716 	blt	zero,r2,1000456c <_dtoa_r+0x12e4>
10004150:	d8c00417 	ldw	r3,16(sp)
10004154:	9d800044 	addi	r22,r19,1
10004158:	9c800005 	stb	r18,0(r19)
1000415c:	b02f883a 	mov	r23,r22
10004160:	98c10626 	beq	r19,r3,1000457c <_dtoa_r+0x12f4>
10004164:	800b883a 	mov	r5,r16
10004168:	000f883a 	mov	r7,zero
1000416c:	01800284 	movi	r6,10
10004170:	e009883a 	mov	r4,fp
10004174:	00062a40 	call	100062a4 <__multadd>
10004178:	1021883a 	mov	r16,r2
1000417c:	000f883a 	mov	r7,zero
10004180:	01800284 	movi	r6,10
10004184:	880b883a 	mov	r5,r17
10004188:	e009883a 	mov	r4,fp
1000418c:	8d002526 	beq	r17,r20,10004224 <_dtoa_r+0xf9c>
10004190:	00062a40 	call	100062a4 <__multadd>
10004194:	a00b883a 	mov	r5,r20
10004198:	000f883a 	mov	r7,zero
1000419c:	01800284 	movi	r6,10
100041a0:	e009883a 	mov	r4,fp
100041a4:	1023883a 	mov	r17,r2
100041a8:	00062a40 	call	100062a4 <__multadd>
100041ac:	1029883a 	mov	r20,r2
100041b0:	b027883a 	mov	r19,r22
100041b4:	003fc006 	br	100040b8 <__alt_data_end+0xf80040b8>
100041b8:	9011883a 	mov	r8,r18
100041bc:	00800e0e 	bge	zero,r2,100041f8 <_dtoa_r+0xf70>
100041c0:	800b883a 	mov	r5,r16
100041c4:	01800044 	movi	r6,1
100041c8:	e009883a 	mov	r4,fp
100041cc:	da001715 	stw	r8,92(sp)
100041d0:	0006a100 	call	10006a10 <__lshift>
100041d4:	a80b883a 	mov	r5,r21
100041d8:	1009883a 	mov	r4,r2
100041dc:	1021883a 	mov	r16,r2
100041e0:	0006b580 	call	10006b58 <__mcmp>
100041e4:	da001717 	ldw	r8,92(sp)
100041e8:	0081960e 	bge	zero,r2,10004844 <_dtoa_r+0x15bc>
100041ec:	00800e44 	movi	r2,57
100041f0:	40817026 	beq	r8,r2,100047b4 <_dtoa_r+0x152c>
100041f4:	ba000c44 	addi	r8,r23,49
100041f8:	8825883a 	mov	r18,r17
100041fc:	9dc00044 	addi	r23,r19,1
10004200:	9a000005 	stb	r8,0(r19)
10004204:	a023883a 	mov	r17,r20
10004208:	dc000915 	stw	r16,36(sp)
1000420c:	003f2406 	br	10003ea0 <__alt_data_end+0xf8003ea0>
10004210:	00800e44 	movi	r2,57
10004214:	9011883a 	mov	r8,r18
10004218:	90816626 	beq	r18,r2,100047b4 <_dtoa_r+0x152c>
1000421c:	05bff516 	blt	zero,r22,100041f4 <__alt_data_end+0xf80041f4>
10004220:	003ff506 	br	100041f8 <__alt_data_end+0xf80041f8>
10004224:	00062a40 	call	100062a4 <__multadd>
10004228:	1023883a 	mov	r17,r2
1000422c:	1029883a 	mov	r20,r2
10004230:	003fdf06 	br	100041b0 <__alt_data_end+0xf80041b0>
10004234:	e009883a 	mov	r4,fp
10004238:	000627c0 	call	1000627c <_Bfree>
1000423c:	00800044 	movi	r2,1
10004240:	003fbc06 	br	10004134 <__alt_data_end+0xf8004134>
10004244:	a80b883a 	mov	r5,r21
10004248:	8009883a 	mov	r4,r16
1000424c:	0006b580 	call	10006b58 <__mcmp>
10004250:	103edb0e 	bge	r2,zero,10003dc0 <__alt_data_end+0xf8003dc0>
10004254:	800b883a 	mov	r5,r16
10004258:	000f883a 	mov	r7,zero
1000425c:	01800284 	movi	r6,10
10004260:	e009883a 	mov	r4,fp
10004264:	00062a40 	call	100062a4 <__multadd>
10004268:	1021883a 	mov	r16,r2
1000426c:	d8800517 	ldw	r2,20(sp)
10004270:	d8c00b17 	ldw	r3,44(sp)
10004274:	10bfffc4 	addi	r2,r2,-1
10004278:	d8800515 	stw	r2,20(sp)
1000427c:	183f761e 	bne	r3,zero,10004058 <__alt_data_end+0xf8004058>
10004280:	d9000c17 	ldw	r4,48(sp)
10004284:	0101730e 	bge	zero,r4,10004854 <_dtoa_r+0x15cc>
10004288:	d9000615 	stw	r4,24(sp)
1000428c:	003ed006 	br	10003dd0 <__alt_data_end+0xf8003dd0>
10004290:	00800084 	movi	r2,2
10004294:	3081861e 	bne	r6,r2,100048b0 <_dtoa_r+0x1628>
10004298:	d8000b15 	stw	zero,44(sp)
1000429c:	003f3c06 	br	10003f90 <__alt_data_end+0xf8003f90>
100042a0:	dc000917 	ldw	r16,36(sp)
100042a4:	003e9206 	br	10003cf0 <__alt_data_end+0xf8003cf0>
100042a8:	d9c00317 	ldw	r7,12(sp)
100042ac:	00800084 	movi	r2,2
100042b0:	11fec50e 	bge	r2,r7,10003dc8 <__alt_data_end+0xf8003dc8>
100042b4:	d9000617 	ldw	r4,24(sp)
100042b8:	20013c1e 	bne	r4,zero,100047ac <_dtoa_r+0x1524>
100042bc:	a80b883a 	mov	r5,r21
100042c0:	000f883a 	mov	r7,zero
100042c4:	01800144 	movi	r6,5
100042c8:	e009883a 	mov	r4,fp
100042cc:	00062a40 	call	100062a4 <__multadd>
100042d0:	100b883a 	mov	r5,r2
100042d4:	8009883a 	mov	r4,r16
100042d8:	102b883a 	mov	r21,r2
100042dc:	0006b580 	call	10006b58 <__mcmp>
100042e0:	dc000915 	stw	r16,36(sp)
100042e4:	00bf410e 	bge	zero,r2,10003fec <__alt_data_end+0xf8003fec>
100042e8:	d9c00717 	ldw	r7,28(sp)
100042ec:	00800c44 	movi	r2,49
100042f0:	38800005 	stb	r2,0(r7)
100042f4:	d8800517 	ldw	r2,20(sp)
100042f8:	3dc00044 	addi	r23,r7,1
100042fc:	10800044 	addi	r2,r2,1
10004300:	d8800515 	stw	r2,20(sp)
10004304:	003f3d06 	br	10003ffc <__alt_data_end+0xf8003ffc>
10004308:	d9800517 	ldw	r6,20(sp)
1000430c:	d9c00717 	ldw	r7,28(sp)
10004310:	00800c44 	movi	r2,49
10004314:	31800044 	addi	r6,r6,1
10004318:	d9800515 	stw	r6,20(sp)
1000431c:	38800005 	stb	r2,0(r7)
10004320:	003edf06 	br	10003ea0 <__alt_data_end+0xf8003ea0>
10004324:	d8000b15 	stw	zero,44(sp)
10004328:	003c9f06 	br	100035a8 <__alt_data_end+0xf80035a8>
1000432c:	903e7e1e 	bne	r18,zero,10003d28 <__alt_data_end+0xf8003d28>
10004330:	00800434 	movhi	r2,16
10004334:	10bfffc4 	addi	r2,r2,-1
10004338:	9884703a 	and	r2,r19,r2
1000433c:	1000ea1e 	bne	r2,zero,100046e8 <_dtoa_r+0x1460>
10004340:	9cdffc2c 	andhi	r19,r19,32752
10004344:	9800e826 	beq	r19,zero,100046e8 <_dtoa_r+0x1460>
10004348:	d9c00817 	ldw	r7,32(sp)
1000434c:	b5800044 	addi	r22,r22,1
10004350:	04c00044 	movi	r19,1
10004354:	39c00044 	addi	r7,r7,1
10004358:	d9c00815 	stw	r7,32(sp)
1000435c:	d8800d17 	ldw	r2,52(sp)
10004360:	103e721e 	bne	r2,zero,10003d2c <__alt_data_end+0xf8003d2c>
10004364:	00800044 	movi	r2,1
10004368:	003e7906 	br	10003d50 <__alt_data_end+0xf8003d50>
1000436c:	8009883a 	mov	r4,r16
10004370:	000d6000 	call	1000d600 <__floatsidf>
10004374:	d9800f17 	ldw	r6,60(sp)
10004378:	d9c01017 	ldw	r7,64(sp)
1000437c:	1009883a 	mov	r4,r2
10004380:	180b883a 	mov	r5,r3
10004384:	000c4180 	call	1000c418 <__muldf3>
10004388:	000d883a 	mov	r6,zero
1000438c:	01d00734 	movhi	r7,16412
10004390:	1009883a 	mov	r4,r2
10004394:	180b883a 	mov	r5,r3
10004398:	000af440 	call	1000af44 <__adddf3>
1000439c:	047f3034 	movhi	r17,64704
100043a0:	1021883a 	mov	r16,r2
100043a4:	1c63883a 	add	r17,r3,r17
100043a8:	d9000f17 	ldw	r4,60(sp)
100043ac:	d9401017 	ldw	r5,64(sp)
100043b0:	000d883a 	mov	r6,zero
100043b4:	01d00534 	movhi	r7,16404
100043b8:	000cc840 	call	1000cc84 <__subdf3>
100043bc:	800d883a 	mov	r6,r16
100043c0:	880f883a 	mov	r7,r17
100043c4:	1009883a 	mov	r4,r2
100043c8:	180b883a 	mov	r5,r3
100043cc:	102b883a 	mov	r21,r2
100043d0:	1829883a 	mov	r20,r3
100043d4:	000c2480 	call	1000c248 <__gedf2>
100043d8:	00806c16 	blt	zero,r2,1000458c <_dtoa_r+0x1304>
100043dc:	89e0003c 	xorhi	r7,r17,32768
100043e0:	800d883a 	mov	r6,r16
100043e4:	a809883a 	mov	r4,r21
100043e8:	a00b883a 	mov	r5,r20
100043ec:	000c3240 	call	1000c324 <__ledf2>
100043f0:	103d7e0e 	bge	r2,zero,100039ec <__alt_data_end+0xf80039ec>
100043f4:	002b883a 	mov	r21,zero
100043f8:	0023883a 	mov	r17,zero
100043fc:	003efb06 	br	10003fec <__alt_data_end+0xf8003fec>
10004400:	d8800717 	ldw	r2,28(sp)
10004404:	003bd006 	br	10003348 <__alt_data_end+0xf8003348>
10004408:	d9000a17 	ldw	r4,40(sp)
1000440c:	d9800d17 	ldw	r6,52(sp)
10004410:	dd400a15 	stw	r21,40(sp)
10004414:	a905c83a 	sub	r2,r21,r4
10004418:	308d883a 	add	r6,r6,r2
1000441c:	d9800d15 	stw	r6,52(sp)
10004420:	002b883a 	mov	r21,zero
10004424:	003e0606 	br	10003c40 <__alt_data_end+0xf8003c40>
10004428:	9023883a 	mov	r17,r18
1000442c:	9829883a 	mov	r20,r19
10004430:	04000084 	movi	r16,2
10004434:	003c9206 	br	10003680 <__alt_data_end+0xf8003680>
10004438:	04000044 	movi	r16,1
1000443c:	dc000c15 	stw	r16,48(sp)
10004440:	dc000615 	stw	r16,24(sp)
10004444:	dc002215 	stw	r16,136(sp)
10004448:	e0001115 	stw	zero,68(fp)
1000444c:	000b883a 	mov	r5,zero
10004450:	003c6906 	br	100035f8 <__alt_data_end+0xf80035f8>
10004454:	3021883a 	mov	r16,r6
10004458:	003ffb06 	br	10004448 <__alt_data_end+0xf8004448>
1000445c:	1000021e 	bne	r2,zero,10004468 <_dtoa_r+0x11e0>
10004460:	4200004c 	andi	r8,r8,1
10004464:	403e7d1e 	bne	r8,zero,10003e5c <__alt_data_end+0xf8003e5c>
10004468:	01000c04 	movi	r4,48
1000446c:	00000106 	br	10004474 <_dtoa_r+0x11ec>
10004470:	102f883a 	mov	r23,r2
10004474:	b8bfffc4 	addi	r2,r23,-1
10004478:	10c00007 	ldb	r3,0(r2)
1000447c:	193ffc26 	beq	r3,r4,10004470 <__alt_data_end+0xf8004470>
10004480:	003e8706 	br	10003ea0 <__alt_data_end+0xf8003ea0>
10004484:	d8800517 	ldw	r2,20(sp)
10004488:	00a3c83a 	sub	r17,zero,r2
1000448c:	8800a426 	beq	r17,zero,10004720 <_dtoa_r+0x1498>
10004490:	888003cc 	andi	r2,r17,15
10004494:	100490fa 	slli	r2,r2,3
10004498:	00c40074 	movhi	r3,4097
1000449c:	18c08104 	addi	r3,r3,516
100044a0:	1885883a 	add	r2,r3,r2
100044a4:	11800017 	ldw	r6,0(r2)
100044a8:	11c00117 	ldw	r7,4(r2)
100044ac:	9009883a 	mov	r4,r18
100044b0:	980b883a 	mov	r5,r19
100044b4:	8823d13a 	srai	r17,r17,4
100044b8:	000c4180 	call	1000c418 <__muldf3>
100044bc:	d8800f15 	stw	r2,60(sp)
100044c0:	d8c01015 	stw	r3,64(sp)
100044c4:	8800e826 	beq	r17,zero,10004868 <_dtoa_r+0x15e0>
100044c8:	05040074 	movhi	r20,4097
100044cc:	a5007704 	addi	r20,r20,476
100044d0:	04000084 	movi	r16,2
100044d4:	8980004c 	andi	r6,r17,1
100044d8:	1009883a 	mov	r4,r2
100044dc:	8823d07a 	srai	r17,r17,1
100044e0:	180b883a 	mov	r5,r3
100044e4:	30000426 	beq	r6,zero,100044f8 <_dtoa_r+0x1270>
100044e8:	a1800017 	ldw	r6,0(r20)
100044ec:	a1c00117 	ldw	r7,4(r20)
100044f0:	84000044 	addi	r16,r16,1
100044f4:	000c4180 	call	1000c418 <__muldf3>
100044f8:	a5000204 	addi	r20,r20,8
100044fc:	883ff51e 	bne	r17,zero,100044d4 <__alt_data_end+0xf80044d4>
10004500:	d8800f15 	stw	r2,60(sp)
10004504:	d8c01015 	stw	r3,64(sp)
10004508:	003c7606 	br	100036e4 <__alt_data_end+0xf80036e4>
1000450c:	00c00c04 	movi	r3,48
10004510:	10c00005 	stb	r3,0(r2)
10004514:	d8c00517 	ldw	r3,20(sp)
10004518:	bd3fffc3 	ldbu	r20,-1(r23)
1000451c:	18c00044 	addi	r3,r3,1
10004520:	d8c00515 	stw	r3,20(sp)
10004524:	003db906 	br	10003c0c <__alt_data_end+0xf8003c0c>
10004528:	89400117 	ldw	r5,4(r17)
1000452c:	e009883a 	mov	r4,fp
10004530:	00061d40 	call	100061d4 <_Balloc>
10004534:	89800417 	ldw	r6,16(r17)
10004538:	89400304 	addi	r5,r17,12
1000453c:	11000304 	addi	r4,r2,12
10004540:	31800084 	addi	r6,r6,2
10004544:	318d883a 	add	r6,r6,r6
10004548:	318d883a 	add	r6,r6,r6
1000454c:	1027883a 	mov	r19,r2
10004550:	00009a40 	call	100009a4 <memcpy>
10004554:	01800044 	movi	r6,1
10004558:	980b883a 	mov	r5,r19
1000455c:	e009883a 	mov	r4,fp
10004560:	0006a100 	call	10006a10 <__lshift>
10004564:	1029883a 	mov	r20,r2
10004568:	003ecc06 	br	1000409c <__alt_data_end+0xf800409c>
1000456c:	00800e44 	movi	r2,57
10004570:	90809026 	beq	r18,r2,100047b4 <_dtoa_r+0x152c>
10004574:	92000044 	addi	r8,r18,1
10004578:	003f1f06 	br	100041f8 <__alt_data_end+0xf80041f8>
1000457c:	9011883a 	mov	r8,r18
10004580:	8825883a 	mov	r18,r17
10004584:	a023883a 	mov	r17,r20
10004588:	003e2906 	br	10003e30 <__alt_data_end+0xf8003e30>
1000458c:	002b883a 	mov	r21,zero
10004590:	0023883a 	mov	r17,zero
10004594:	003f5406 	br	100042e8 <__alt_data_end+0xf80042e8>
10004598:	61bfffc4 	addi	r6,r12,-1
1000459c:	300490fa 	slli	r2,r6,3
100045a0:	00c40074 	movhi	r3,4097
100045a4:	18c08104 	addi	r3,r3,516
100045a8:	1885883a 	add	r2,r3,r2
100045ac:	11000017 	ldw	r4,0(r2)
100045b0:	11400117 	ldw	r5,4(r2)
100045b4:	d8800717 	ldw	r2,28(sp)
100045b8:	880f883a 	mov	r7,r17
100045bc:	d9801215 	stw	r6,72(sp)
100045c0:	800d883a 	mov	r6,r16
100045c4:	db001615 	stw	r12,88(sp)
100045c8:	15c00044 	addi	r23,r2,1
100045cc:	000c4180 	call	1000c418 <__muldf3>
100045d0:	d9401017 	ldw	r5,64(sp)
100045d4:	d9000f17 	ldw	r4,60(sp)
100045d8:	d8c01515 	stw	r3,84(sp)
100045dc:	d8801415 	stw	r2,80(sp)
100045e0:	000d5800 	call	1000d580 <__fixdfsi>
100045e4:	1009883a 	mov	r4,r2
100045e8:	1021883a 	mov	r16,r2
100045ec:	000d6000 	call	1000d600 <__floatsidf>
100045f0:	d9000f17 	ldw	r4,60(sp)
100045f4:	d9401017 	ldw	r5,64(sp)
100045f8:	100d883a 	mov	r6,r2
100045fc:	180f883a 	mov	r7,r3
10004600:	000cc840 	call	1000cc84 <__subdf3>
10004604:	1829883a 	mov	r20,r3
10004608:	d8c00717 	ldw	r3,28(sp)
1000460c:	84000c04 	addi	r16,r16,48
10004610:	1023883a 	mov	r17,r2
10004614:	1c000005 	stb	r16,0(r3)
10004618:	db001617 	ldw	r12,88(sp)
1000461c:	00800044 	movi	r2,1
10004620:	60802226 	beq	r12,r2,100046ac <_dtoa_r+0x1424>
10004624:	d9c00717 	ldw	r7,28(sp)
10004628:	8805883a 	mov	r2,r17
1000462c:	b82b883a 	mov	r21,r23
10004630:	3b19883a 	add	r12,r7,r12
10004634:	6023883a 	mov	r17,r12
10004638:	a007883a 	mov	r3,r20
1000463c:	dc800f15 	stw	r18,60(sp)
10004640:	000d883a 	mov	r6,zero
10004644:	01d00934 	movhi	r7,16420
10004648:	1009883a 	mov	r4,r2
1000464c:	180b883a 	mov	r5,r3
10004650:	000c4180 	call	1000c418 <__muldf3>
10004654:	180b883a 	mov	r5,r3
10004658:	1009883a 	mov	r4,r2
1000465c:	1829883a 	mov	r20,r3
10004660:	1025883a 	mov	r18,r2
10004664:	000d5800 	call	1000d580 <__fixdfsi>
10004668:	1009883a 	mov	r4,r2
1000466c:	1021883a 	mov	r16,r2
10004670:	000d6000 	call	1000d600 <__floatsidf>
10004674:	100d883a 	mov	r6,r2
10004678:	180f883a 	mov	r7,r3
1000467c:	9009883a 	mov	r4,r18
10004680:	a00b883a 	mov	r5,r20
10004684:	84000c04 	addi	r16,r16,48
10004688:	000cc840 	call	1000cc84 <__subdf3>
1000468c:	ad400044 	addi	r21,r21,1
10004690:	ac3fffc5 	stb	r16,-1(r21)
10004694:	ac7fea1e 	bne	r21,r17,10004640 <__alt_data_end+0xf8004640>
10004698:	1023883a 	mov	r17,r2
1000469c:	d8801217 	ldw	r2,72(sp)
100046a0:	dc800f17 	ldw	r18,60(sp)
100046a4:	1829883a 	mov	r20,r3
100046a8:	b8af883a 	add	r23,r23,r2
100046ac:	d9001417 	ldw	r4,80(sp)
100046b0:	d9401517 	ldw	r5,84(sp)
100046b4:	000d883a 	mov	r6,zero
100046b8:	01cff834 	movhi	r7,16352
100046bc:	000af440 	call	1000af44 <__adddf3>
100046c0:	880d883a 	mov	r6,r17
100046c4:	a00f883a 	mov	r7,r20
100046c8:	1009883a 	mov	r4,r2
100046cc:	180b883a 	mov	r5,r3
100046d0:	000c3240 	call	1000c324 <__ledf2>
100046d4:	10003e0e 	bge	r2,zero,100047d0 <_dtoa_r+0x1548>
100046d8:	d9001317 	ldw	r4,76(sp)
100046dc:	bd3fffc3 	ldbu	r20,-1(r23)
100046e0:	d9000515 	stw	r4,20(sp)
100046e4:	003d3b06 	br	10003bd4 <__alt_data_end+0xf8003bd4>
100046e8:	0027883a 	mov	r19,zero
100046ec:	003f1b06 	br	1000435c <__alt_data_end+0xf800435c>
100046f0:	d8800817 	ldw	r2,32(sp)
100046f4:	11e9c83a 	sub	r20,r2,r7
100046f8:	0005883a 	mov	r2,zero
100046fc:	003d5406 	br	10003c50 <__alt_data_end+0xf8003c50>
10004700:	00800044 	movi	r2,1
10004704:	003dc706 	br	10003e24 <__alt_data_end+0xf8003e24>
10004708:	d8c00217 	ldw	r3,8(sp)
1000470c:	00800d84 	movi	r2,54
10004710:	dd400a17 	ldw	r21,40(sp)
10004714:	10c5c83a 	sub	r2,r2,r3
10004718:	dd000817 	ldw	r20,32(sp)
1000471c:	003d4c06 	br	10003c50 <__alt_data_end+0xf8003c50>
10004720:	dc800f15 	stw	r18,60(sp)
10004724:	dcc01015 	stw	r19,64(sp)
10004728:	04000084 	movi	r16,2
1000472c:	003bed06 	br	100036e4 <__alt_data_end+0xf80036e4>
10004730:	d9000617 	ldw	r4,24(sp)
10004734:	203f0d26 	beq	r4,zero,1000436c <__alt_data_end+0xf800436c>
10004738:	d9800c17 	ldw	r6,48(sp)
1000473c:	01bcab0e 	bge	zero,r6,100039ec <__alt_data_end+0xf80039ec>
10004740:	d9401017 	ldw	r5,64(sp)
10004744:	d9000f17 	ldw	r4,60(sp)
10004748:	000d883a 	mov	r6,zero
1000474c:	01d00934 	movhi	r7,16420
10004750:	000c4180 	call	1000c418 <__muldf3>
10004754:	81000044 	addi	r4,r16,1
10004758:	d8800f15 	stw	r2,60(sp)
1000475c:	d8c01015 	stw	r3,64(sp)
10004760:	000d6000 	call	1000d600 <__floatsidf>
10004764:	d9800f17 	ldw	r6,60(sp)
10004768:	d9c01017 	ldw	r7,64(sp)
1000476c:	1009883a 	mov	r4,r2
10004770:	180b883a 	mov	r5,r3
10004774:	000c4180 	call	1000c418 <__muldf3>
10004778:	01d00734 	movhi	r7,16412
1000477c:	000d883a 	mov	r6,zero
10004780:	1009883a 	mov	r4,r2
10004784:	180b883a 	mov	r5,r3
10004788:	000af440 	call	1000af44 <__adddf3>
1000478c:	d9c00517 	ldw	r7,20(sp)
10004790:	047f3034 	movhi	r17,64704
10004794:	1021883a 	mov	r16,r2
10004798:	39ffffc4 	addi	r7,r7,-1
1000479c:	d9c01315 	stw	r7,76(sp)
100047a0:	1c63883a 	add	r17,r3,r17
100047a4:	db000c17 	ldw	r12,48(sp)
100047a8:	003bea06 	br	10003754 <__alt_data_end+0xf8003754>
100047ac:	dc000915 	stw	r16,36(sp)
100047b0:	003e0e06 	br	10003fec <__alt_data_end+0xf8003fec>
100047b4:	01000e44 	movi	r4,57
100047b8:	8825883a 	mov	r18,r17
100047bc:	9dc00044 	addi	r23,r19,1
100047c0:	99000005 	stb	r4,0(r19)
100047c4:	a023883a 	mov	r17,r20
100047c8:	dc000915 	stw	r16,36(sp)
100047cc:	003da406 	br	10003e60 <__alt_data_end+0xf8003e60>
100047d0:	d9801417 	ldw	r6,80(sp)
100047d4:	d9c01517 	ldw	r7,84(sp)
100047d8:	0009883a 	mov	r4,zero
100047dc:	014ff834 	movhi	r5,16352
100047e0:	000cc840 	call	1000cc84 <__subdf3>
100047e4:	880d883a 	mov	r6,r17
100047e8:	a00f883a 	mov	r7,r20
100047ec:	1009883a 	mov	r4,r2
100047f0:	180b883a 	mov	r5,r3
100047f4:	000c2480 	call	1000c248 <__gedf2>
100047f8:	00bc7c0e 	bge	zero,r2,100039ec <__alt_data_end+0xf80039ec>
100047fc:	01000c04 	movi	r4,48
10004800:	00000106 	br	10004808 <_dtoa_r+0x1580>
10004804:	102f883a 	mov	r23,r2
10004808:	b8bfffc4 	addi	r2,r23,-1
1000480c:	10c00007 	ldb	r3,0(r2)
10004810:	193ffc26 	beq	r3,r4,10004804 <__alt_data_end+0xf8004804>
10004814:	d9801317 	ldw	r6,76(sp)
10004818:	d9800515 	stw	r6,20(sp)
1000481c:	003c4406 	br	10003930 <__alt_data_end+0xf8003930>
10004820:	d9801317 	ldw	r6,76(sp)
10004824:	d9800515 	stw	r6,20(sp)
10004828:	003cea06 	br	10003bd4 <__alt_data_end+0xf8003bd4>
1000482c:	dd800f17 	ldw	r22,60(sp)
10004830:	dcc01017 	ldw	r19,64(sp)
10004834:	dc801217 	ldw	r18,72(sp)
10004838:	003c6c06 	br	100039ec <__alt_data_end+0xf80039ec>
1000483c:	903e031e 	bne	r18,zero,1000404c <__alt_data_end+0xf800404c>
10004840:	003ebb06 	br	10004330 <__alt_data_end+0xf8004330>
10004844:	103e6c1e 	bne	r2,zero,100041f8 <__alt_data_end+0xf80041f8>
10004848:	4080004c 	andi	r2,r8,1
1000484c:	103e6a26 	beq	r2,zero,100041f8 <__alt_data_end+0xf80041f8>
10004850:	003e6606 	br	100041ec <__alt_data_end+0xf80041ec>
10004854:	d8c00317 	ldw	r3,12(sp)
10004858:	00800084 	movi	r2,2
1000485c:	10c02916 	blt	r2,r3,10004904 <_dtoa_r+0x167c>
10004860:	d9000c17 	ldw	r4,48(sp)
10004864:	003e8806 	br	10004288 <__alt_data_end+0xf8004288>
10004868:	04000084 	movi	r16,2
1000486c:	003b9d06 	br	100036e4 <__alt_data_end+0xf80036e4>
10004870:	d9001317 	ldw	r4,76(sp)
10004874:	d9000515 	stw	r4,20(sp)
10004878:	003cd606 	br	10003bd4 <__alt_data_end+0xf8003bd4>
1000487c:	d8801317 	ldw	r2,76(sp)
10004880:	d8800515 	stw	r2,20(sp)
10004884:	003c2a06 	br	10003930 <__alt_data_end+0xf8003930>
10004888:	d9800317 	ldw	r6,12(sp)
1000488c:	00800084 	movi	r2,2
10004890:	11801516 	blt	r2,r6,100048e8 <_dtoa_r+0x1660>
10004894:	d9c00c17 	ldw	r7,48(sp)
10004898:	d9c00615 	stw	r7,24(sp)
1000489c:	003df706 	br	1000407c <__alt_data_end+0xf800407c>
100048a0:	193d3926 	beq	r3,r4,10003d88 <__alt_data_end+0xf8003d88>
100048a4:	00c00f04 	movi	r3,60
100048a8:	1885c83a 	sub	r2,r3,r2
100048ac:	003ddf06 	br	1000402c <__alt_data_end+0xf800402c>
100048b0:	e009883a 	mov	r4,fp
100048b4:	e0001115 	stw	zero,68(fp)
100048b8:	000b883a 	mov	r5,zero
100048bc:	00061d40 	call	100061d4 <_Balloc>
100048c0:	d8800715 	stw	r2,28(sp)
100048c4:	d8c00717 	ldw	r3,28(sp)
100048c8:	00bfffc4 	movi	r2,-1
100048cc:	01000044 	movi	r4,1
100048d0:	d8800c15 	stw	r2,48(sp)
100048d4:	e0c01015 	stw	r3,64(fp)
100048d8:	d9000b15 	stw	r4,44(sp)
100048dc:	d8800615 	stw	r2,24(sp)
100048e0:	d8002215 	stw	zero,136(sp)
100048e4:	003c4106 	br	100039ec <__alt_data_end+0xf80039ec>
100048e8:	d8c00c17 	ldw	r3,48(sp)
100048ec:	d8c00615 	stw	r3,24(sp)
100048f0:	003e7006 	br	100042b4 <__alt_data_end+0xf80042b4>
100048f4:	04400044 	movi	r17,1
100048f8:	003b2006 	br	1000357c <__alt_data_end+0xf800357c>
100048fc:	000b883a 	mov	r5,zero
10004900:	003b3d06 	br	100035f8 <__alt_data_end+0xf80035f8>
10004904:	d8800c17 	ldw	r2,48(sp)
10004908:	d8800615 	stw	r2,24(sp)
1000490c:	003e6906 	br	100042b4 <__alt_data_end+0xf80042b4>

10004910 <__sflush_r>:
10004910:	2880030b 	ldhu	r2,12(r5)
10004914:	defffb04 	addi	sp,sp,-20
10004918:	dcc00315 	stw	r19,12(sp)
1000491c:	dc400115 	stw	r17,4(sp)
10004920:	dfc00415 	stw	ra,16(sp)
10004924:	dc800215 	stw	r18,8(sp)
10004928:	dc000015 	stw	r16,0(sp)
1000492c:	10c0020c 	andi	r3,r2,8
10004930:	2823883a 	mov	r17,r5
10004934:	2027883a 	mov	r19,r4
10004938:	1800311e 	bne	r3,zero,10004a00 <__sflush_r+0xf0>
1000493c:	28c00117 	ldw	r3,4(r5)
10004940:	10820014 	ori	r2,r2,2048
10004944:	2880030d 	sth	r2,12(r5)
10004948:	00c04b0e 	bge	zero,r3,10004a78 <__sflush_r+0x168>
1000494c:	8a000a17 	ldw	r8,40(r17)
10004950:	40002326 	beq	r8,zero,100049e0 <__sflush_r+0xd0>
10004954:	9c000017 	ldw	r16,0(r19)
10004958:	10c4000c 	andi	r3,r2,4096
1000495c:	98000015 	stw	zero,0(r19)
10004960:	18004826 	beq	r3,zero,10004a84 <__sflush_r+0x174>
10004964:	89801417 	ldw	r6,80(r17)
10004968:	10c0010c 	andi	r3,r2,4
1000496c:	18000626 	beq	r3,zero,10004988 <__sflush_r+0x78>
10004970:	88c00117 	ldw	r3,4(r17)
10004974:	88800c17 	ldw	r2,48(r17)
10004978:	30cdc83a 	sub	r6,r6,r3
1000497c:	10000226 	beq	r2,zero,10004988 <__sflush_r+0x78>
10004980:	88800f17 	ldw	r2,60(r17)
10004984:	308dc83a 	sub	r6,r6,r2
10004988:	89400717 	ldw	r5,28(r17)
1000498c:	000f883a 	mov	r7,zero
10004990:	9809883a 	mov	r4,r19
10004994:	403ee83a 	callr	r8
10004998:	00ffffc4 	movi	r3,-1
1000499c:	10c04426 	beq	r2,r3,10004ab0 <__sflush_r+0x1a0>
100049a0:	88c0030b 	ldhu	r3,12(r17)
100049a4:	89000417 	ldw	r4,16(r17)
100049a8:	88000115 	stw	zero,4(r17)
100049ac:	197dffcc 	andi	r5,r3,63487
100049b0:	8940030d 	sth	r5,12(r17)
100049b4:	89000015 	stw	r4,0(r17)
100049b8:	18c4000c 	andi	r3,r3,4096
100049bc:	18002c1e 	bne	r3,zero,10004a70 <__sflush_r+0x160>
100049c0:	89400c17 	ldw	r5,48(r17)
100049c4:	9c000015 	stw	r16,0(r19)
100049c8:	28000526 	beq	r5,zero,100049e0 <__sflush_r+0xd0>
100049cc:	88801004 	addi	r2,r17,64
100049d0:	28800226 	beq	r5,r2,100049dc <__sflush_r+0xcc>
100049d4:	9809883a 	mov	r4,r19
100049d8:	000508c0 	call	1000508c <_free_r>
100049dc:	88000c15 	stw	zero,48(r17)
100049e0:	0005883a 	mov	r2,zero
100049e4:	dfc00417 	ldw	ra,16(sp)
100049e8:	dcc00317 	ldw	r19,12(sp)
100049ec:	dc800217 	ldw	r18,8(sp)
100049f0:	dc400117 	ldw	r17,4(sp)
100049f4:	dc000017 	ldw	r16,0(sp)
100049f8:	dec00504 	addi	sp,sp,20
100049fc:	f800283a 	ret
10004a00:	2c800417 	ldw	r18,16(r5)
10004a04:	903ff626 	beq	r18,zero,100049e0 <__alt_data_end+0xf80049e0>
10004a08:	2c000017 	ldw	r16,0(r5)
10004a0c:	108000cc 	andi	r2,r2,3
10004a10:	2c800015 	stw	r18,0(r5)
10004a14:	84a1c83a 	sub	r16,r16,r18
10004a18:	1000131e 	bne	r2,zero,10004a68 <__sflush_r+0x158>
10004a1c:	28800517 	ldw	r2,20(r5)
10004a20:	88800215 	stw	r2,8(r17)
10004a24:	04000316 	blt	zero,r16,10004a34 <__sflush_r+0x124>
10004a28:	003fed06 	br	100049e0 <__alt_data_end+0xf80049e0>
10004a2c:	90a5883a 	add	r18,r18,r2
10004a30:	043feb0e 	bge	zero,r16,100049e0 <__alt_data_end+0xf80049e0>
10004a34:	88800917 	ldw	r2,36(r17)
10004a38:	89400717 	ldw	r5,28(r17)
10004a3c:	800f883a 	mov	r7,r16
10004a40:	900d883a 	mov	r6,r18
10004a44:	9809883a 	mov	r4,r19
10004a48:	103ee83a 	callr	r2
10004a4c:	80a1c83a 	sub	r16,r16,r2
10004a50:	00bff616 	blt	zero,r2,10004a2c <__alt_data_end+0xf8004a2c>
10004a54:	88c0030b 	ldhu	r3,12(r17)
10004a58:	00bfffc4 	movi	r2,-1
10004a5c:	18c01014 	ori	r3,r3,64
10004a60:	88c0030d 	sth	r3,12(r17)
10004a64:	003fdf06 	br	100049e4 <__alt_data_end+0xf80049e4>
10004a68:	0005883a 	mov	r2,zero
10004a6c:	003fec06 	br	10004a20 <__alt_data_end+0xf8004a20>
10004a70:	88801415 	stw	r2,80(r17)
10004a74:	003fd206 	br	100049c0 <__alt_data_end+0xf80049c0>
10004a78:	28c00f17 	ldw	r3,60(r5)
10004a7c:	00ffb316 	blt	zero,r3,1000494c <__alt_data_end+0xf800494c>
10004a80:	003fd706 	br	100049e0 <__alt_data_end+0xf80049e0>
10004a84:	89400717 	ldw	r5,28(r17)
10004a88:	000d883a 	mov	r6,zero
10004a8c:	01c00044 	movi	r7,1
10004a90:	9809883a 	mov	r4,r19
10004a94:	403ee83a 	callr	r8
10004a98:	100d883a 	mov	r6,r2
10004a9c:	00bfffc4 	movi	r2,-1
10004aa0:	30801426 	beq	r6,r2,10004af4 <__sflush_r+0x1e4>
10004aa4:	8880030b 	ldhu	r2,12(r17)
10004aa8:	8a000a17 	ldw	r8,40(r17)
10004aac:	003fae06 	br	10004968 <__alt_data_end+0xf8004968>
10004ab0:	98c00017 	ldw	r3,0(r19)
10004ab4:	183fba26 	beq	r3,zero,100049a0 <__alt_data_end+0xf80049a0>
10004ab8:	01000744 	movi	r4,29
10004abc:	19000626 	beq	r3,r4,10004ad8 <__sflush_r+0x1c8>
10004ac0:	01000584 	movi	r4,22
10004ac4:	19000426 	beq	r3,r4,10004ad8 <__sflush_r+0x1c8>
10004ac8:	88c0030b 	ldhu	r3,12(r17)
10004acc:	18c01014 	ori	r3,r3,64
10004ad0:	88c0030d 	sth	r3,12(r17)
10004ad4:	003fc306 	br	100049e4 <__alt_data_end+0xf80049e4>
10004ad8:	8880030b 	ldhu	r2,12(r17)
10004adc:	88c00417 	ldw	r3,16(r17)
10004ae0:	88000115 	stw	zero,4(r17)
10004ae4:	10bdffcc 	andi	r2,r2,63487
10004ae8:	8880030d 	sth	r2,12(r17)
10004aec:	88c00015 	stw	r3,0(r17)
10004af0:	003fb306 	br	100049c0 <__alt_data_end+0xf80049c0>
10004af4:	98800017 	ldw	r2,0(r19)
10004af8:	103fea26 	beq	r2,zero,10004aa4 <__alt_data_end+0xf8004aa4>
10004afc:	00c00744 	movi	r3,29
10004b00:	10c00226 	beq	r2,r3,10004b0c <__sflush_r+0x1fc>
10004b04:	00c00584 	movi	r3,22
10004b08:	10c0031e 	bne	r2,r3,10004b18 <__sflush_r+0x208>
10004b0c:	9c000015 	stw	r16,0(r19)
10004b10:	0005883a 	mov	r2,zero
10004b14:	003fb306 	br	100049e4 <__alt_data_end+0xf80049e4>
10004b18:	88c0030b 	ldhu	r3,12(r17)
10004b1c:	3005883a 	mov	r2,r6
10004b20:	18c01014 	ori	r3,r3,64
10004b24:	88c0030d 	sth	r3,12(r17)
10004b28:	003fae06 	br	100049e4 <__alt_data_end+0xf80049e4>

10004b2c <_fflush_r>:
10004b2c:	defffd04 	addi	sp,sp,-12
10004b30:	dc000115 	stw	r16,4(sp)
10004b34:	dfc00215 	stw	ra,8(sp)
10004b38:	2021883a 	mov	r16,r4
10004b3c:	20000226 	beq	r4,zero,10004b48 <_fflush_r+0x1c>
10004b40:	20800e17 	ldw	r2,56(r4)
10004b44:	10000c26 	beq	r2,zero,10004b78 <_fflush_r+0x4c>
10004b48:	2880030f 	ldh	r2,12(r5)
10004b4c:	1000051e 	bne	r2,zero,10004b64 <_fflush_r+0x38>
10004b50:	0005883a 	mov	r2,zero
10004b54:	dfc00217 	ldw	ra,8(sp)
10004b58:	dc000117 	ldw	r16,4(sp)
10004b5c:	dec00304 	addi	sp,sp,12
10004b60:	f800283a 	ret
10004b64:	8009883a 	mov	r4,r16
10004b68:	dfc00217 	ldw	ra,8(sp)
10004b6c:	dc000117 	ldw	r16,4(sp)
10004b70:	dec00304 	addi	sp,sp,12
10004b74:	00049101 	jmpi	10004910 <__sflush_r>
10004b78:	d9400015 	stw	r5,0(sp)
10004b7c:	0004f180 	call	10004f18 <__sinit>
10004b80:	d9400017 	ldw	r5,0(sp)
10004b84:	003ff006 	br	10004b48 <__alt_data_end+0xf8004b48>

10004b88 <fflush>:
10004b88:	20000526 	beq	r4,zero,10004ba0 <fflush+0x18>
10004b8c:	00840074 	movhi	r2,4097
10004b90:	1087b604 	addi	r2,r2,7896
10004b94:	200b883a 	mov	r5,r4
10004b98:	11000017 	ldw	r4,0(r2)
10004b9c:	0004b2c1 	jmpi	10004b2c <_fflush_r>
10004ba0:	00840074 	movhi	r2,4097
10004ba4:	1087b504 	addi	r2,r2,7892
10004ba8:	11000017 	ldw	r4,0(r2)
10004bac:	01440034 	movhi	r5,4096
10004bb0:	2952cb04 	addi	r5,r5,19244
10004bb4:	00054601 	jmpi	10005460 <_fwalk_reent>

10004bb8 <__fp_unlock>:
10004bb8:	0005883a 	mov	r2,zero
10004bbc:	f800283a 	ret

10004bc0 <_cleanup_r>:
10004bc0:	01440074 	movhi	r5,4097
10004bc4:	2963a304 	addi	r5,r5,-29044
10004bc8:	00054601 	jmpi	10005460 <_fwalk_reent>

10004bcc <__sinit.part.1>:
10004bcc:	defff704 	addi	sp,sp,-36
10004bd0:	00c40034 	movhi	r3,4096
10004bd4:	dfc00815 	stw	ra,32(sp)
10004bd8:	ddc00715 	stw	r23,28(sp)
10004bdc:	dd800615 	stw	r22,24(sp)
10004be0:	dd400515 	stw	r21,20(sp)
10004be4:	dd000415 	stw	r20,16(sp)
10004be8:	dcc00315 	stw	r19,12(sp)
10004bec:	dc800215 	stw	r18,8(sp)
10004bf0:	dc400115 	stw	r17,4(sp)
10004bf4:	dc000015 	stw	r16,0(sp)
10004bf8:	18d2f004 	addi	r3,r3,19392
10004bfc:	24000117 	ldw	r16,4(r4)
10004c00:	20c00f15 	stw	r3,60(r4)
10004c04:	2080bb04 	addi	r2,r4,748
10004c08:	00c000c4 	movi	r3,3
10004c0c:	20c0b915 	stw	r3,740(r4)
10004c10:	2080ba15 	stw	r2,744(r4)
10004c14:	2000b815 	stw	zero,736(r4)
10004c18:	05c00204 	movi	r23,8
10004c1c:	00800104 	movi	r2,4
10004c20:	2025883a 	mov	r18,r4
10004c24:	b80d883a 	mov	r6,r23
10004c28:	81001704 	addi	r4,r16,92
10004c2c:	000b883a 	mov	r5,zero
10004c30:	80000015 	stw	zero,0(r16)
10004c34:	80000115 	stw	zero,4(r16)
10004c38:	80000215 	stw	zero,8(r16)
10004c3c:	8080030d 	sth	r2,12(r16)
10004c40:	80001915 	stw	zero,100(r16)
10004c44:	8000038d 	sth	zero,14(r16)
10004c48:	80000415 	stw	zero,16(r16)
10004c4c:	80000515 	stw	zero,20(r16)
10004c50:	80000615 	stw	zero,24(r16)
10004c54:	00060ac0 	call	100060ac <memset>
10004c58:	05840034 	movhi	r22,4096
10004c5c:	94400217 	ldw	r17,8(r18)
10004c60:	05440034 	movhi	r21,4096
10004c64:	05040034 	movhi	r20,4096
10004c68:	04c40034 	movhi	r19,4096
10004c6c:	b59cd504 	addi	r22,r22,29524
10004c70:	ad5cec04 	addi	r21,r21,29616
10004c74:	a51d0b04 	addi	r20,r20,29740
10004c78:	9cdd2204 	addi	r19,r19,29832
10004c7c:	85800815 	stw	r22,32(r16)
10004c80:	85400915 	stw	r21,36(r16)
10004c84:	85000a15 	stw	r20,40(r16)
10004c88:	84c00b15 	stw	r19,44(r16)
10004c8c:	84000715 	stw	r16,28(r16)
10004c90:	00800284 	movi	r2,10
10004c94:	8880030d 	sth	r2,12(r17)
10004c98:	00800044 	movi	r2,1
10004c9c:	b80d883a 	mov	r6,r23
10004ca0:	89001704 	addi	r4,r17,92
10004ca4:	000b883a 	mov	r5,zero
10004ca8:	88000015 	stw	zero,0(r17)
10004cac:	88000115 	stw	zero,4(r17)
10004cb0:	88000215 	stw	zero,8(r17)
10004cb4:	88001915 	stw	zero,100(r17)
10004cb8:	8880038d 	sth	r2,14(r17)
10004cbc:	88000415 	stw	zero,16(r17)
10004cc0:	88000515 	stw	zero,20(r17)
10004cc4:	88000615 	stw	zero,24(r17)
10004cc8:	00060ac0 	call	100060ac <memset>
10004ccc:	94000317 	ldw	r16,12(r18)
10004cd0:	00800484 	movi	r2,18
10004cd4:	8c400715 	stw	r17,28(r17)
10004cd8:	8d800815 	stw	r22,32(r17)
10004cdc:	8d400915 	stw	r21,36(r17)
10004ce0:	8d000a15 	stw	r20,40(r17)
10004ce4:	8cc00b15 	stw	r19,44(r17)
10004ce8:	8080030d 	sth	r2,12(r16)
10004cec:	00800084 	movi	r2,2
10004cf0:	80000015 	stw	zero,0(r16)
10004cf4:	80000115 	stw	zero,4(r16)
10004cf8:	80000215 	stw	zero,8(r16)
10004cfc:	80001915 	stw	zero,100(r16)
10004d00:	8080038d 	sth	r2,14(r16)
10004d04:	80000415 	stw	zero,16(r16)
10004d08:	80000515 	stw	zero,20(r16)
10004d0c:	80000615 	stw	zero,24(r16)
10004d10:	b80d883a 	mov	r6,r23
10004d14:	000b883a 	mov	r5,zero
10004d18:	81001704 	addi	r4,r16,92
10004d1c:	00060ac0 	call	100060ac <memset>
10004d20:	00800044 	movi	r2,1
10004d24:	84000715 	stw	r16,28(r16)
10004d28:	85800815 	stw	r22,32(r16)
10004d2c:	85400915 	stw	r21,36(r16)
10004d30:	85000a15 	stw	r20,40(r16)
10004d34:	84c00b15 	stw	r19,44(r16)
10004d38:	90800e15 	stw	r2,56(r18)
10004d3c:	dfc00817 	ldw	ra,32(sp)
10004d40:	ddc00717 	ldw	r23,28(sp)
10004d44:	dd800617 	ldw	r22,24(sp)
10004d48:	dd400517 	ldw	r21,20(sp)
10004d4c:	dd000417 	ldw	r20,16(sp)
10004d50:	dcc00317 	ldw	r19,12(sp)
10004d54:	dc800217 	ldw	r18,8(sp)
10004d58:	dc400117 	ldw	r17,4(sp)
10004d5c:	dc000017 	ldw	r16,0(sp)
10004d60:	dec00904 	addi	sp,sp,36
10004d64:	f800283a 	ret

10004d68 <__fp_lock>:
10004d68:	0005883a 	mov	r2,zero
10004d6c:	f800283a 	ret

10004d70 <__sfmoreglue>:
10004d70:	defffc04 	addi	sp,sp,-16
10004d74:	dc800215 	stw	r18,8(sp)
10004d78:	2825883a 	mov	r18,r5
10004d7c:	dc000015 	stw	r16,0(sp)
10004d80:	01401a04 	movi	r5,104
10004d84:	2021883a 	mov	r16,r4
10004d88:	913fffc4 	addi	r4,r18,-1
10004d8c:	dfc00315 	stw	ra,12(sp)
10004d90:	dc400115 	stw	r17,4(sp)
10004d94:	000097c0 	call	1000097c <__mulsi3>
10004d98:	8009883a 	mov	r4,r16
10004d9c:	11401d04 	addi	r5,r2,116
10004da0:	1023883a 	mov	r17,r2
10004da4:	00057bc0 	call	100057bc <_malloc_r>
10004da8:	1021883a 	mov	r16,r2
10004dac:	10000726 	beq	r2,zero,10004dcc <__sfmoreglue+0x5c>
10004db0:	11000304 	addi	r4,r2,12
10004db4:	10000015 	stw	zero,0(r2)
10004db8:	14800115 	stw	r18,4(r2)
10004dbc:	11000215 	stw	r4,8(r2)
10004dc0:	89801a04 	addi	r6,r17,104
10004dc4:	000b883a 	mov	r5,zero
10004dc8:	00060ac0 	call	100060ac <memset>
10004dcc:	8005883a 	mov	r2,r16
10004dd0:	dfc00317 	ldw	ra,12(sp)
10004dd4:	dc800217 	ldw	r18,8(sp)
10004dd8:	dc400117 	ldw	r17,4(sp)
10004ddc:	dc000017 	ldw	r16,0(sp)
10004de0:	dec00404 	addi	sp,sp,16
10004de4:	f800283a 	ret

10004de8 <__sfp>:
10004de8:	defffb04 	addi	sp,sp,-20
10004dec:	dc000015 	stw	r16,0(sp)
10004df0:	04040074 	movhi	r16,4097
10004df4:	8407b504 	addi	r16,r16,7892
10004df8:	dcc00315 	stw	r19,12(sp)
10004dfc:	2027883a 	mov	r19,r4
10004e00:	81000017 	ldw	r4,0(r16)
10004e04:	dfc00415 	stw	ra,16(sp)
10004e08:	dc800215 	stw	r18,8(sp)
10004e0c:	20800e17 	ldw	r2,56(r4)
10004e10:	dc400115 	stw	r17,4(sp)
10004e14:	1000021e 	bne	r2,zero,10004e20 <__sfp+0x38>
10004e18:	0004bcc0 	call	10004bcc <__sinit.part.1>
10004e1c:	81000017 	ldw	r4,0(r16)
10004e20:	2480b804 	addi	r18,r4,736
10004e24:	047fffc4 	movi	r17,-1
10004e28:	91000117 	ldw	r4,4(r18)
10004e2c:	94000217 	ldw	r16,8(r18)
10004e30:	213fffc4 	addi	r4,r4,-1
10004e34:	20000a16 	blt	r4,zero,10004e60 <__sfp+0x78>
10004e38:	8080030f 	ldh	r2,12(r16)
10004e3c:	10000c26 	beq	r2,zero,10004e70 <__sfp+0x88>
10004e40:	80c01d04 	addi	r3,r16,116
10004e44:	00000206 	br	10004e50 <__sfp+0x68>
10004e48:	18bfe60f 	ldh	r2,-104(r3)
10004e4c:	10000826 	beq	r2,zero,10004e70 <__sfp+0x88>
10004e50:	213fffc4 	addi	r4,r4,-1
10004e54:	1c3ffd04 	addi	r16,r3,-12
10004e58:	18c01a04 	addi	r3,r3,104
10004e5c:	247ffa1e 	bne	r4,r17,10004e48 <__alt_data_end+0xf8004e48>
10004e60:	90800017 	ldw	r2,0(r18)
10004e64:	10001d26 	beq	r2,zero,10004edc <__sfp+0xf4>
10004e68:	1025883a 	mov	r18,r2
10004e6c:	003fee06 	br	10004e28 <__alt_data_end+0xf8004e28>
10004e70:	00bfffc4 	movi	r2,-1
10004e74:	8080038d 	sth	r2,14(r16)
10004e78:	00800044 	movi	r2,1
10004e7c:	8080030d 	sth	r2,12(r16)
10004e80:	80001915 	stw	zero,100(r16)
10004e84:	80000015 	stw	zero,0(r16)
10004e88:	80000215 	stw	zero,8(r16)
10004e8c:	80000115 	stw	zero,4(r16)
10004e90:	80000415 	stw	zero,16(r16)
10004e94:	80000515 	stw	zero,20(r16)
10004e98:	80000615 	stw	zero,24(r16)
10004e9c:	01800204 	movi	r6,8
10004ea0:	000b883a 	mov	r5,zero
10004ea4:	81001704 	addi	r4,r16,92
10004ea8:	00060ac0 	call	100060ac <memset>
10004eac:	8005883a 	mov	r2,r16
10004eb0:	80000c15 	stw	zero,48(r16)
10004eb4:	80000d15 	stw	zero,52(r16)
10004eb8:	80001115 	stw	zero,68(r16)
10004ebc:	80001215 	stw	zero,72(r16)
10004ec0:	dfc00417 	ldw	ra,16(sp)
10004ec4:	dcc00317 	ldw	r19,12(sp)
10004ec8:	dc800217 	ldw	r18,8(sp)
10004ecc:	dc400117 	ldw	r17,4(sp)
10004ed0:	dc000017 	ldw	r16,0(sp)
10004ed4:	dec00504 	addi	sp,sp,20
10004ed8:	f800283a 	ret
10004edc:	01400104 	movi	r5,4
10004ee0:	9809883a 	mov	r4,r19
10004ee4:	0004d700 	call	10004d70 <__sfmoreglue>
10004ee8:	90800015 	stw	r2,0(r18)
10004eec:	103fde1e 	bne	r2,zero,10004e68 <__alt_data_end+0xf8004e68>
10004ef0:	00800304 	movi	r2,12
10004ef4:	98800015 	stw	r2,0(r19)
10004ef8:	0005883a 	mov	r2,zero
10004efc:	003ff006 	br	10004ec0 <__alt_data_end+0xf8004ec0>

10004f00 <_cleanup>:
10004f00:	00840074 	movhi	r2,4097
10004f04:	1087b504 	addi	r2,r2,7892
10004f08:	11000017 	ldw	r4,0(r2)
10004f0c:	01440074 	movhi	r5,4097
10004f10:	2963a304 	addi	r5,r5,-29044
10004f14:	00054601 	jmpi	10005460 <_fwalk_reent>

10004f18 <__sinit>:
10004f18:	20800e17 	ldw	r2,56(r4)
10004f1c:	10000126 	beq	r2,zero,10004f24 <__sinit+0xc>
10004f20:	f800283a 	ret
10004f24:	0004bcc1 	jmpi	10004bcc <__sinit.part.1>

10004f28 <__sfp_lock_acquire>:
10004f28:	f800283a 	ret

10004f2c <__sfp_lock_release>:
10004f2c:	f800283a 	ret

10004f30 <__sinit_lock_acquire>:
10004f30:	f800283a 	ret

10004f34 <__sinit_lock_release>:
10004f34:	f800283a 	ret

10004f38 <__fp_lock_all>:
10004f38:	00840074 	movhi	r2,4097
10004f3c:	1087b604 	addi	r2,r2,7896
10004f40:	11000017 	ldw	r4,0(r2)
10004f44:	01440034 	movhi	r5,4096
10004f48:	29535a04 	addi	r5,r5,19816
10004f4c:	000539c1 	jmpi	1000539c <_fwalk>

10004f50 <__fp_unlock_all>:
10004f50:	00840074 	movhi	r2,4097
10004f54:	1087b604 	addi	r2,r2,7896
10004f58:	11000017 	ldw	r4,0(r2)
10004f5c:	01440034 	movhi	r5,4096
10004f60:	2952ee04 	addi	r5,r5,19384
10004f64:	000539c1 	jmpi	1000539c <_fwalk>

10004f68 <_malloc_trim_r>:
10004f68:	defffb04 	addi	sp,sp,-20
10004f6c:	dcc00315 	stw	r19,12(sp)
10004f70:	04c40074 	movhi	r19,4097
10004f74:	dc800215 	stw	r18,8(sp)
10004f78:	dc400115 	stw	r17,4(sp)
10004f7c:	dc000015 	stw	r16,0(sp)
10004f80:	dfc00415 	stw	ra,16(sp)
10004f84:	2821883a 	mov	r16,r5
10004f88:	9cc22f04 	addi	r19,r19,2236
10004f8c:	2025883a 	mov	r18,r4
10004f90:	000dd840 	call	1000dd84 <__malloc_lock>
10004f94:	98800217 	ldw	r2,8(r19)
10004f98:	14400117 	ldw	r17,4(r2)
10004f9c:	00bfff04 	movi	r2,-4
10004fa0:	88a2703a 	and	r17,r17,r2
10004fa4:	8c21c83a 	sub	r16,r17,r16
10004fa8:	8403fbc4 	addi	r16,r16,4079
10004fac:	8020d33a 	srli	r16,r16,12
10004fb0:	0083ffc4 	movi	r2,4095
10004fb4:	843fffc4 	addi	r16,r16,-1
10004fb8:	8020933a 	slli	r16,r16,12
10004fbc:	1400060e 	bge	r2,r16,10004fd8 <_malloc_trim_r+0x70>
10004fc0:	000b883a 	mov	r5,zero
10004fc4:	9009883a 	mov	r4,r18
10004fc8:	00073000 	call	10007300 <_sbrk_r>
10004fcc:	98c00217 	ldw	r3,8(r19)
10004fd0:	1c47883a 	add	r3,r3,r17
10004fd4:	10c00a26 	beq	r2,r3,10005000 <_malloc_trim_r+0x98>
10004fd8:	9009883a 	mov	r4,r18
10004fdc:	000dda80 	call	1000dda8 <__malloc_unlock>
10004fe0:	0005883a 	mov	r2,zero
10004fe4:	dfc00417 	ldw	ra,16(sp)
10004fe8:	dcc00317 	ldw	r19,12(sp)
10004fec:	dc800217 	ldw	r18,8(sp)
10004ff0:	dc400117 	ldw	r17,4(sp)
10004ff4:	dc000017 	ldw	r16,0(sp)
10004ff8:	dec00504 	addi	sp,sp,20
10004ffc:	f800283a 	ret
10005000:	040bc83a 	sub	r5,zero,r16
10005004:	9009883a 	mov	r4,r18
10005008:	00073000 	call	10007300 <_sbrk_r>
1000500c:	00ffffc4 	movi	r3,-1
10005010:	10c00d26 	beq	r2,r3,10005048 <_malloc_trim_r+0xe0>
10005014:	00c40074 	movhi	r3,4097
10005018:	18ce9004 	addi	r3,r3,14912
1000501c:	18800017 	ldw	r2,0(r3)
10005020:	99000217 	ldw	r4,8(r19)
10005024:	8c23c83a 	sub	r17,r17,r16
10005028:	8c400054 	ori	r17,r17,1
1000502c:	1421c83a 	sub	r16,r2,r16
10005030:	24400115 	stw	r17,4(r4)
10005034:	9009883a 	mov	r4,r18
10005038:	1c000015 	stw	r16,0(r3)
1000503c:	000dda80 	call	1000dda8 <__malloc_unlock>
10005040:	00800044 	movi	r2,1
10005044:	003fe706 	br	10004fe4 <__alt_data_end+0xf8004fe4>
10005048:	000b883a 	mov	r5,zero
1000504c:	9009883a 	mov	r4,r18
10005050:	00073000 	call	10007300 <_sbrk_r>
10005054:	99000217 	ldw	r4,8(r19)
10005058:	014003c4 	movi	r5,15
1000505c:	1107c83a 	sub	r3,r2,r4
10005060:	28ffdd0e 	bge	r5,r3,10004fd8 <__alt_data_end+0xf8004fd8>
10005064:	01440074 	movhi	r5,4097
10005068:	2947b804 	addi	r5,r5,7904
1000506c:	29400017 	ldw	r5,0(r5)
10005070:	18c00054 	ori	r3,r3,1
10005074:	20c00115 	stw	r3,4(r4)
10005078:	00c40074 	movhi	r3,4097
1000507c:	1145c83a 	sub	r2,r2,r5
10005080:	18ce9004 	addi	r3,r3,14912
10005084:	18800015 	stw	r2,0(r3)
10005088:	003fd306 	br	10004fd8 <__alt_data_end+0xf8004fd8>

1000508c <_free_r>:
1000508c:	28004126 	beq	r5,zero,10005194 <_free_r+0x108>
10005090:	defffd04 	addi	sp,sp,-12
10005094:	dc400115 	stw	r17,4(sp)
10005098:	dc000015 	stw	r16,0(sp)
1000509c:	2023883a 	mov	r17,r4
100050a0:	2821883a 	mov	r16,r5
100050a4:	dfc00215 	stw	ra,8(sp)
100050a8:	000dd840 	call	1000dd84 <__malloc_lock>
100050ac:	81ffff17 	ldw	r7,-4(r16)
100050b0:	00bfff84 	movi	r2,-2
100050b4:	01040074 	movhi	r4,4097
100050b8:	81bffe04 	addi	r6,r16,-8
100050bc:	3884703a 	and	r2,r7,r2
100050c0:	21022f04 	addi	r4,r4,2236
100050c4:	308b883a 	add	r5,r6,r2
100050c8:	2a400117 	ldw	r9,4(r5)
100050cc:	22000217 	ldw	r8,8(r4)
100050d0:	00ffff04 	movi	r3,-4
100050d4:	48c6703a 	and	r3,r9,r3
100050d8:	2a005726 	beq	r5,r8,10005238 <_free_r+0x1ac>
100050dc:	28c00115 	stw	r3,4(r5)
100050e0:	39c0004c 	andi	r7,r7,1
100050e4:	3800091e 	bne	r7,zero,1000510c <_free_r+0x80>
100050e8:	823ffe17 	ldw	r8,-8(r16)
100050ec:	22400204 	addi	r9,r4,8
100050f0:	320dc83a 	sub	r6,r6,r8
100050f4:	31c00217 	ldw	r7,8(r6)
100050f8:	1205883a 	add	r2,r2,r8
100050fc:	3a406526 	beq	r7,r9,10005294 <_free_r+0x208>
10005100:	32000317 	ldw	r8,12(r6)
10005104:	3a000315 	stw	r8,12(r7)
10005108:	41c00215 	stw	r7,8(r8)
1000510c:	28cf883a 	add	r7,r5,r3
10005110:	39c00117 	ldw	r7,4(r7)
10005114:	39c0004c 	andi	r7,r7,1
10005118:	38003a26 	beq	r7,zero,10005204 <_free_r+0x178>
1000511c:	10c00054 	ori	r3,r2,1
10005120:	30c00115 	stw	r3,4(r6)
10005124:	3087883a 	add	r3,r6,r2
10005128:	18800015 	stw	r2,0(r3)
1000512c:	00c07fc4 	movi	r3,511
10005130:	18801936 	bltu	r3,r2,10005198 <_free_r+0x10c>
10005134:	1004d0fa 	srli	r2,r2,3
10005138:	01c00044 	movi	r7,1
1000513c:	21400117 	ldw	r5,4(r4)
10005140:	10c00044 	addi	r3,r2,1
10005144:	18c7883a 	add	r3,r3,r3
10005148:	1005d0ba 	srai	r2,r2,2
1000514c:	18c7883a 	add	r3,r3,r3
10005150:	18c7883a 	add	r3,r3,r3
10005154:	1907883a 	add	r3,r3,r4
10005158:	3884983a 	sll	r2,r7,r2
1000515c:	19c00017 	ldw	r7,0(r3)
10005160:	1a3ffe04 	addi	r8,r3,-8
10005164:	1144b03a 	or	r2,r2,r5
10005168:	32000315 	stw	r8,12(r6)
1000516c:	31c00215 	stw	r7,8(r6)
10005170:	20800115 	stw	r2,4(r4)
10005174:	19800015 	stw	r6,0(r3)
10005178:	39800315 	stw	r6,12(r7)
1000517c:	8809883a 	mov	r4,r17
10005180:	dfc00217 	ldw	ra,8(sp)
10005184:	dc400117 	ldw	r17,4(sp)
10005188:	dc000017 	ldw	r16,0(sp)
1000518c:	dec00304 	addi	sp,sp,12
10005190:	000dda81 	jmpi	1000dda8 <__malloc_unlock>
10005194:	f800283a 	ret
10005198:	100ad27a 	srli	r5,r2,9
1000519c:	00c00104 	movi	r3,4
100051a0:	19404a36 	bltu	r3,r5,100052cc <_free_r+0x240>
100051a4:	100ad1ba 	srli	r5,r2,6
100051a8:	28c00e44 	addi	r3,r5,57
100051ac:	18c7883a 	add	r3,r3,r3
100051b0:	29400e04 	addi	r5,r5,56
100051b4:	18c7883a 	add	r3,r3,r3
100051b8:	18c7883a 	add	r3,r3,r3
100051bc:	1909883a 	add	r4,r3,r4
100051c0:	20c00017 	ldw	r3,0(r4)
100051c4:	01c40074 	movhi	r7,4097
100051c8:	213ffe04 	addi	r4,r4,-8
100051cc:	39c22f04 	addi	r7,r7,2236
100051d0:	20c04426 	beq	r4,r3,100052e4 <_free_r+0x258>
100051d4:	01ffff04 	movi	r7,-4
100051d8:	19400117 	ldw	r5,4(r3)
100051dc:	29ca703a 	and	r5,r5,r7
100051e0:	1140022e 	bgeu	r2,r5,100051ec <_free_r+0x160>
100051e4:	18c00217 	ldw	r3,8(r3)
100051e8:	20fffb1e 	bne	r4,r3,100051d8 <__alt_data_end+0xf80051d8>
100051ec:	19000317 	ldw	r4,12(r3)
100051f0:	31000315 	stw	r4,12(r6)
100051f4:	30c00215 	stw	r3,8(r6)
100051f8:	21800215 	stw	r6,8(r4)
100051fc:	19800315 	stw	r6,12(r3)
10005200:	003fde06 	br	1000517c <__alt_data_end+0xf800517c>
10005204:	29c00217 	ldw	r7,8(r5)
10005208:	10c5883a 	add	r2,r2,r3
1000520c:	00c40074 	movhi	r3,4097
10005210:	18c23104 	addi	r3,r3,2244
10005214:	38c03b26 	beq	r7,r3,10005304 <_free_r+0x278>
10005218:	2a000317 	ldw	r8,12(r5)
1000521c:	11400054 	ori	r5,r2,1
10005220:	3087883a 	add	r3,r6,r2
10005224:	3a000315 	stw	r8,12(r7)
10005228:	41c00215 	stw	r7,8(r8)
1000522c:	31400115 	stw	r5,4(r6)
10005230:	18800015 	stw	r2,0(r3)
10005234:	003fbd06 	br	1000512c <__alt_data_end+0xf800512c>
10005238:	39c0004c 	andi	r7,r7,1
1000523c:	10c5883a 	add	r2,r2,r3
10005240:	3800071e 	bne	r7,zero,10005260 <_free_r+0x1d4>
10005244:	81fffe17 	ldw	r7,-8(r16)
10005248:	31cdc83a 	sub	r6,r6,r7
1000524c:	30c00317 	ldw	r3,12(r6)
10005250:	31400217 	ldw	r5,8(r6)
10005254:	11c5883a 	add	r2,r2,r7
10005258:	28c00315 	stw	r3,12(r5)
1000525c:	19400215 	stw	r5,8(r3)
10005260:	10c00054 	ori	r3,r2,1
10005264:	30c00115 	stw	r3,4(r6)
10005268:	00c40074 	movhi	r3,4097
1000526c:	18c7b904 	addi	r3,r3,7908
10005270:	18c00017 	ldw	r3,0(r3)
10005274:	21800215 	stw	r6,8(r4)
10005278:	10ffc036 	bltu	r2,r3,1000517c <__alt_data_end+0xf800517c>
1000527c:	00840074 	movhi	r2,4097
10005280:	108e8704 	addi	r2,r2,14876
10005284:	11400017 	ldw	r5,0(r2)
10005288:	8809883a 	mov	r4,r17
1000528c:	0004f680 	call	10004f68 <_malloc_trim_r>
10005290:	003fba06 	br	1000517c <__alt_data_end+0xf800517c>
10005294:	28c9883a 	add	r4,r5,r3
10005298:	21000117 	ldw	r4,4(r4)
1000529c:	2100004c 	andi	r4,r4,1
100052a0:	2000391e 	bne	r4,zero,10005388 <_free_r+0x2fc>
100052a4:	29c00217 	ldw	r7,8(r5)
100052a8:	29000317 	ldw	r4,12(r5)
100052ac:	1885883a 	add	r2,r3,r2
100052b0:	10c00054 	ori	r3,r2,1
100052b4:	39000315 	stw	r4,12(r7)
100052b8:	21c00215 	stw	r7,8(r4)
100052bc:	30c00115 	stw	r3,4(r6)
100052c0:	308d883a 	add	r6,r6,r2
100052c4:	30800015 	stw	r2,0(r6)
100052c8:	003fac06 	br	1000517c <__alt_data_end+0xf800517c>
100052cc:	00c00504 	movi	r3,20
100052d0:	19401536 	bltu	r3,r5,10005328 <_free_r+0x29c>
100052d4:	28c01704 	addi	r3,r5,92
100052d8:	18c7883a 	add	r3,r3,r3
100052dc:	294016c4 	addi	r5,r5,91
100052e0:	003fb406 	br	100051b4 <__alt_data_end+0xf80051b4>
100052e4:	280bd0ba 	srai	r5,r5,2
100052e8:	00c00044 	movi	r3,1
100052ec:	38800117 	ldw	r2,4(r7)
100052f0:	194a983a 	sll	r5,r3,r5
100052f4:	2007883a 	mov	r3,r4
100052f8:	2884b03a 	or	r2,r5,r2
100052fc:	38800115 	stw	r2,4(r7)
10005300:	003fbb06 	br	100051f0 <__alt_data_end+0xf80051f0>
10005304:	21800515 	stw	r6,20(r4)
10005308:	21800415 	stw	r6,16(r4)
1000530c:	10c00054 	ori	r3,r2,1
10005310:	31c00315 	stw	r7,12(r6)
10005314:	31c00215 	stw	r7,8(r6)
10005318:	30c00115 	stw	r3,4(r6)
1000531c:	308d883a 	add	r6,r6,r2
10005320:	30800015 	stw	r2,0(r6)
10005324:	003f9506 	br	1000517c <__alt_data_end+0xf800517c>
10005328:	00c01504 	movi	r3,84
1000532c:	19400536 	bltu	r3,r5,10005344 <_free_r+0x2b8>
10005330:	100ad33a 	srli	r5,r2,12
10005334:	28c01bc4 	addi	r3,r5,111
10005338:	18c7883a 	add	r3,r3,r3
1000533c:	29401b84 	addi	r5,r5,110
10005340:	003f9c06 	br	100051b4 <__alt_data_end+0xf80051b4>
10005344:	00c05504 	movi	r3,340
10005348:	19400536 	bltu	r3,r5,10005360 <_free_r+0x2d4>
1000534c:	100ad3fa 	srli	r5,r2,15
10005350:	28c01e04 	addi	r3,r5,120
10005354:	18c7883a 	add	r3,r3,r3
10005358:	29401dc4 	addi	r5,r5,119
1000535c:	003f9506 	br	100051b4 <__alt_data_end+0xf80051b4>
10005360:	00c15504 	movi	r3,1364
10005364:	19400536 	bltu	r3,r5,1000537c <_free_r+0x2f0>
10005368:	100ad4ba 	srli	r5,r2,18
1000536c:	28c01f44 	addi	r3,r5,125
10005370:	18c7883a 	add	r3,r3,r3
10005374:	29401f04 	addi	r5,r5,124
10005378:	003f8e06 	br	100051b4 <__alt_data_end+0xf80051b4>
1000537c:	00c03f84 	movi	r3,254
10005380:	01401f84 	movi	r5,126
10005384:	003f8b06 	br	100051b4 <__alt_data_end+0xf80051b4>
10005388:	10c00054 	ori	r3,r2,1
1000538c:	30c00115 	stw	r3,4(r6)
10005390:	308d883a 	add	r6,r6,r2
10005394:	30800015 	stw	r2,0(r6)
10005398:	003f7806 	br	1000517c <__alt_data_end+0xf800517c>

1000539c <_fwalk>:
1000539c:	defff704 	addi	sp,sp,-36
100053a0:	dd000415 	stw	r20,16(sp)
100053a4:	dfc00815 	stw	ra,32(sp)
100053a8:	ddc00715 	stw	r23,28(sp)
100053ac:	dd800615 	stw	r22,24(sp)
100053b0:	dd400515 	stw	r21,20(sp)
100053b4:	dcc00315 	stw	r19,12(sp)
100053b8:	dc800215 	stw	r18,8(sp)
100053bc:	dc400115 	stw	r17,4(sp)
100053c0:	dc000015 	stw	r16,0(sp)
100053c4:	2500b804 	addi	r20,r4,736
100053c8:	a0002326 	beq	r20,zero,10005458 <_fwalk+0xbc>
100053cc:	282b883a 	mov	r21,r5
100053d0:	002f883a 	mov	r23,zero
100053d4:	05800044 	movi	r22,1
100053d8:	04ffffc4 	movi	r19,-1
100053dc:	a4400117 	ldw	r17,4(r20)
100053e0:	a4800217 	ldw	r18,8(r20)
100053e4:	8c7fffc4 	addi	r17,r17,-1
100053e8:	88000d16 	blt	r17,zero,10005420 <_fwalk+0x84>
100053ec:	94000304 	addi	r16,r18,12
100053f0:	94800384 	addi	r18,r18,14
100053f4:	8080000b 	ldhu	r2,0(r16)
100053f8:	8c7fffc4 	addi	r17,r17,-1
100053fc:	813ffd04 	addi	r4,r16,-12
10005400:	b080042e 	bgeu	r22,r2,10005414 <_fwalk+0x78>
10005404:	9080000f 	ldh	r2,0(r18)
10005408:	14c00226 	beq	r2,r19,10005414 <_fwalk+0x78>
1000540c:	a83ee83a 	callr	r21
10005410:	b8aeb03a 	or	r23,r23,r2
10005414:	84001a04 	addi	r16,r16,104
10005418:	94801a04 	addi	r18,r18,104
1000541c:	8cfff51e 	bne	r17,r19,100053f4 <__alt_data_end+0xf80053f4>
10005420:	a5000017 	ldw	r20,0(r20)
10005424:	a03fed1e 	bne	r20,zero,100053dc <__alt_data_end+0xf80053dc>
10005428:	b805883a 	mov	r2,r23
1000542c:	dfc00817 	ldw	ra,32(sp)
10005430:	ddc00717 	ldw	r23,28(sp)
10005434:	dd800617 	ldw	r22,24(sp)
10005438:	dd400517 	ldw	r21,20(sp)
1000543c:	dd000417 	ldw	r20,16(sp)
10005440:	dcc00317 	ldw	r19,12(sp)
10005444:	dc800217 	ldw	r18,8(sp)
10005448:	dc400117 	ldw	r17,4(sp)
1000544c:	dc000017 	ldw	r16,0(sp)
10005450:	dec00904 	addi	sp,sp,36
10005454:	f800283a 	ret
10005458:	002f883a 	mov	r23,zero
1000545c:	003ff206 	br	10005428 <__alt_data_end+0xf8005428>

10005460 <_fwalk_reent>:
10005460:	defff704 	addi	sp,sp,-36
10005464:	dd000415 	stw	r20,16(sp)
10005468:	dfc00815 	stw	ra,32(sp)
1000546c:	ddc00715 	stw	r23,28(sp)
10005470:	dd800615 	stw	r22,24(sp)
10005474:	dd400515 	stw	r21,20(sp)
10005478:	dcc00315 	stw	r19,12(sp)
1000547c:	dc800215 	stw	r18,8(sp)
10005480:	dc400115 	stw	r17,4(sp)
10005484:	dc000015 	stw	r16,0(sp)
10005488:	2500b804 	addi	r20,r4,736
1000548c:	a0002326 	beq	r20,zero,1000551c <_fwalk_reent+0xbc>
10005490:	282b883a 	mov	r21,r5
10005494:	2027883a 	mov	r19,r4
10005498:	002f883a 	mov	r23,zero
1000549c:	05800044 	movi	r22,1
100054a0:	04bfffc4 	movi	r18,-1
100054a4:	a4400117 	ldw	r17,4(r20)
100054a8:	a4000217 	ldw	r16,8(r20)
100054ac:	8c7fffc4 	addi	r17,r17,-1
100054b0:	88000c16 	blt	r17,zero,100054e4 <_fwalk_reent+0x84>
100054b4:	84000304 	addi	r16,r16,12
100054b8:	8080000b 	ldhu	r2,0(r16)
100054bc:	8c7fffc4 	addi	r17,r17,-1
100054c0:	817ffd04 	addi	r5,r16,-12
100054c4:	b080052e 	bgeu	r22,r2,100054dc <_fwalk_reent+0x7c>
100054c8:	8080008f 	ldh	r2,2(r16)
100054cc:	9809883a 	mov	r4,r19
100054d0:	14800226 	beq	r2,r18,100054dc <_fwalk_reent+0x7c>
100054d4:	a83ee83a 	callr	r21
100054d8:	b8aeb03a 	or	r23,r23,r2
100054dc:	84001a04 	addi	r16,r16,104
100054e0:	8cbff51e 	bne	r17,r18,100054b8 <__alt_data_end+0xf80054b8>
100054e4:	a5000017 	ldw	r20,0(r20)
100054e8:	a03fee1e 	bne	r20,zero,100054a4 <__alt_data_end+0xf80054a4>
100054ec:	b805883a 	mov	r2,r23
100054f0:	dfc00817 	ldw	ra,32(sp)
100054f4:	ddc00717 	ldw	r23,28(sp)
100054f8:	dd800617 	ldw	r22,24(sp)
100054fc:	dd400517 	ldw	r21,20(sp)
10005500:	dd000417 	ldw	r20,16(sp)
10005504:	dcc00317 	ldw	r19,12(sp)
10005508:	dc800217 	ldw	r18,8(sp)
1000550c:	dc400117 	ldw	r17,4(sp)
10005510:	dc000017 	ldw	r16,0(sp)
10005514:	dec00904 	addi	sp,sp,36
10005518:	f800283a 	ret
1000551c:	002f883a 	mov	r23,zero
10005520:	003ff206 	br	100054ec <__alt_data_end+0xf80054ec>

10005524 <_setlocale_r>:
10005524:	30001b26 	beq	r6,zero,10005594 <_setlocale_r+0x70>
10005528:	01440074 	movhi	r5,4097
1000552c:	defffe04 	addi	sp,sp,-8
10005530:	29406704 	addi	r5,r5,412
10005534:	3009883a 	mov	r4,r6
10005538:	dc000015 	stw	r16,0(sp)
1000553c:	dfc00115 	stw	ra,4(sp)
10005540:	3021883a 	mov	r16,r6
10005544:	00074900 	call	10007490 <strcmp>
10005548:	1000061e 	bne	r2,zero,10005564 <_setlocale_r+0x40>
1000554c:	00840074 	movhi	r2,4097
10005550:	10806604 	addi	r2,r2,408
10005554:	dfc00117 	ldw	ra,4(sp)
10005558:	dc000017 	ldw	r16,0(sp)
1000555c:	dec00204 	addi	sp,sp,8
10005560:	f800283a 	ret
10005564:	01440074 	movhi	r5,4097
10005568:	29406604 	addi	r5,r5,408
1000556c:	8009883a 	mov	r4,r16
10005570:	00074900 	call	10007490 <strcmp>
10005574:	103ff526 	beq	r2,zero,1000554c <__alt_data_end+0xf800554c>
10005578:	01440074 	movhi	r5,4097
1000557c:	29405104 	addi	r5,r5,324
10005580:	8009883a 	mov	r4,r16
10005584:	00074900 	call	10007490 <strcmp>
10005588:	103ff026 	beq	r2,zero,1000554c <__alt_data_end+0xf800554c>
1000558c:	0005883a 	mov	r2,zero
10005590:	003ff006 	br	10005554 <__alt_data_end+0xf8005554>
10005594:	00840074 	movhi	r2,4097
10005598:	10806604 	addi	r2,r2,408
1000559c:	f800283a 	ret

100055a0 <__locale_charset>:
100055a0:	00840074 	movhi	r2,4097
100055a4:	10821904 	addi	r2,r2,2148
100055a8:	f800283a 	ret

100055ac <__locale_mb_cur_max>:
100055ac:	00840074 	movhi	r2,4097
100055b0:	1087b704 	addi	r2,r2,7900
100055b4:	10800017 	ldw	r2,0(r2)
100055b8:	f800283a 	ret

100055bc <__locale_msgcharset>:
100055bc:	00840074 	movhi	r2,4097
100055c0:	10821104 	addi	r2,r2,2116
100055c4:	f800283a 	ret

100055c8 <__locale_cjk_lang>:
100055c8:	0005883a 	mov	r2,zero
100055cc:	f800283a 	ret

100055d0 <_localeconv_r>:
100055d0:	00840074 	movhi	r2,4097
100055d4:	10822104 	addi	r2,r2,2180
100055d8:	f800283a 	ret

100055dc <setlocale>:
100055dc:	00840074 	movhi	r2,4097
100055e0:	1087b604 	addi	r2,r2,7896
100055e4:	280d883a 	mov	r6,r5
100055e8:	200b883a 	mov	r5,r4
100055ec:	11000017 	ldw	r4,0(r2)
100055f0:	00055241 	jmpi	10005524 <_setlocale_r>

100055f4 <localeconv>:
100055f4:	00840074 	movhi	r2,4097
100055f8:	10822104 	addi	r2,r2,2180
100055fc:	f800283a 	ret

10005600 <__smakebuf_r>:
10005600:	2880030b 	ldhu	r2,12(r5)
10005604:	10c0008c 	andi	r3,r2,2
10005608:	1800411e 	bne	r3,zero,10005710 <__smakebuf_r+0x110>
1000560c:	deffec04 	addi	sp,sp,-80
10005610:	dc000f15 	stw	r16,60(sp)
10005614:	2821883a 	mov	r16,r5
10005618:	2940038f 	ldh	r5,14(r5)
1000561c:	dc401015 	stw	r17,64(sp)
10005620:	dfc01315 	stw	ra,76(sp)
10005624:	dcc01215 	stw	r19,72(sp)
10005628:	dc801115 	stw	r18,68(sp)
1000562c:	2023883a 	mov	r17,r4
10005630:	28001c16 	blt	r5,zero,100056a4 <__smakebuf_r+0xa4>
10005634:	d80d883a 	mov	r6,sp
10005638:	00091980 	call	10009198 <_fstat_r>
1000563c:	10001816 	blt	r2,zero,100056a0 <__smakebuf_r+0xa0>
10005640:	d8800117 	ldw	r2,4(sp)
10005644:	00e00014 	movui	r3,32768
10005648:	10bc000c 	andi	r2,r2,61440
1000564c:	14c80020 	cmpeqi	r19,r2,8192
10005650:	10c03726 	beq	r2,r3,10005730 <__smakebuf_r+0x130>
10005654:	80c0030b 	ldhu	r3,12(r16)
10005658:	18c20014 	ori	r3,r3,2048
1000565c:	80c0030d 	sth	r3,12(r16)
10005660:	00c80004 	movi	r3,8192
10005664:	10c0521e 	bne	r2,r3,100057b0 <__smakebuf_r+0x1b0>
10005668:	8140038f 	ldh	r5,14(r16)
1000566c:	8809883a 	mov	r4,r17
10005670:	00096bc0 	call	100096bc <_isatty_r>
10005674:	10004c26 	beq	r2,zero,100057a8 <__smakebuf_r+0x1a8>
10005678:	8080030b 	ldhu	r2,12(r16)
1000567c:	80c010c4 	addi	r3,r16,67
10005680:	80c00015 	stw	r3,0(r16)
10005684:	10800054 	ori	r2,r2,1
10005688:	8080030d 	sth	r2,12(r16)
1000568c:	00800044 	movi	r2,1
10005690:	80c00415 	stw	r3,16(r16)
10005694:	80800515 	stw	r2,20(r16)
10005698:	04810004 	movi	r18,1024
1000569c:	00000706 	br	100056bc <__smakebuf_r+0xbc>
100056a0:	8080030b 	ldhu	r2,12(r16)
100056a4:	10c0200c 	andi	r3,r2,128
100056a8:	18001f1e 	bne	r3,zero,10005728 <__smakebuf_r+0x128>
100056ac:	04810004 	movi	r18,1024
100056b0:	10820014 	ori	r2,r2,2048
100056b4:	8080030d 	sth	r2,12(r16)
100056b8:	0027883a 	mov	r19,zero
100056bc:	900b883a 	mov	r5,r18
100056c0:	8809883a 	mov	r4,r17
100056c4:	00057bc0 	call	100057bc <_malloc_r>
100056c8:	10002c26 	beq	r2,zero,1000577c <__smakebuf_r+0x17c>
100056cc:	80c0030b 	ldhu	r3,12(r16)
100056d0:	01040034 	movhi	r4,4096
100056d4:	2112f004 	addi	r4,r4,19392
100056d8:	89000f15 	stw	r4,60(r17)
100056dc:	18c02014 	ori	r3,r3,128
100056e0:	80c0030d 	sth	r3,12(r16)
100056e4:	80800015 	stw	r2,0(r16)
100056e8:	80800415 	stw	r2,16(r16)
100056ec:	84800515 	stw	r18,20(r16)
100056f0:	98001a1e 	bne	r19,zero,1000575c <__smakebuf_r+0x15c>
100056f4:	dfc01317 	ldw	ra,76(sp)
100056f8:	dcc01217 	ldw	r19,72(sp)
100056fc:	dc801117 	ldw	r18,68(sp)
10005700:	dc401017 	ldw	r17,64(sp)
10005704:	dc000f17 	ldw	r16,60(sp)
10005708:	dec01404 	addi	sp,sp,80
1000570c:	f800283a 	ret
10005710:	288010c4 	addi	r2,r5,67
10005714:	28800015 	stw	r2,0(r5)
10005718:	28800415 	stw	r2,16(r5)
1000571c:	00800044 	movi	r2,1
10005720:	28800515 	stw	r2,20(r5)
10005724:	f800283a 	ret
10005728:	04801004 	movi	r18,64
1000572c:	003fe006 	br	100056b0 <__alt_data_end+0xf80056b0>
10005730:	81000a17 	ldw	r4,40(r16)
10005734:	00c40034 	movhi	r3,4096
10005738:	18dd0b04 	addi	r3,r3,29740
1000573c:	20ffc51e 	bne	r4,r3,10005654 <__alt_data_end+0xf8005654>
10005740:	8080030b 	ldhu	r2,12(r16)
10005744:	04810004 	movi	r18,1024
10005748:	84801315 	stw	r18,76(r16)
1000574c:	1484b03a 	or	r2,r2,r18
10005750:	8080030d 	sth	r2,12(r16)
10005754:	0027883a 	mov	r19,zero
10005758:	003fd806 	br	100056bc <__alt_data_end+0xf80056bc>
1000575c:	8140038f 	ldh	r5,14(r16)
10005760:	8809883a 	mov	r4,r17
10005764:	00096bc0 	call	100096bc <_isatty_r>
10005768:	103fe226 	beq	r2,zero,100056f4 <__alt_data_end+0xf80056f4>
1000576c:	8080030b 	ldhu	r2,12(r16)
10005770:	10800054 	ori	r2,r2,1
10005774:	8080030d 	sth	r2,12(r16)
10005778:	003fde06 	br	100056f4 <__alt_data_end+0xf80056f4>
1000577c:	8080030b 	ldhu	r2,12(r16)
10005780:	10c0800c 	andi	r3,r2,512
10005784:	183fdb1e 	bne	r3,zero,100056f4 <__alt_data_end+0xf80056f4>
10005788:	10800094 	ori	r2,r2,2
1000578c:	80c010c4 	addi	r3,r16,67
10005790:	8080030d 	sth	r2,12(r16)
10005794:	00800044 	movi	r2,1
10005798:	80c00015 	stw	r3,0(r16)
1000579c:	80c00415 	stw	r3,16(r16)
100057a0:	80800515 	stw	r2,20(r16)
100057a4:	003fd306 	br	100056f4 <__alt_data_end+0xf80056f4>
100057a8:	04810004 	movi	r18,1024
100057ac:	003fc306 	br	100056bc <__alt_data_end+0xf80056bc>
100057b0:	0027883a 	mov	r19,zero
100057b4:	04810004 	movi	r18,1024
100057b8:	003fc006 	br	100056bc <__alt_data_end+0xf80056bc>

100057bc <_malloc_r>:
100057bc:	defff504 	addi	sp,sp,-44
100057c0:	dc800315 	stw	r18,12(sp)
100057c4:	dfc00a15 	stw	ra,40(sp)
100057c8:	df000915 	stw	fp,36(sp)
100057cc:	ddc00815 	stw	r23,32(sp)
100057d0:	dd800715 	stw	r22,28(sp)
100057d4:	dd400615 	stw	r21,24(sp)
100057d8:	dd000515 	stw	r20,20(sp)
100057dc:	dcc00415 	stw	r19,16(sp)
100057e0:	dc400215 	stw	r17,8(sp)
100057e4:	dc000115 	stw	r16,4(sp)
100057e8:	288002c4 	addi	r2,r5,11
100057ec:	00c00584 	movi	r3,22
100057f0:	2025883a 	mov	r18,r4
100057f4:	18807f2e 	bgeu	r3,r2,100059f4 <_malloc_r+0x238>
100057f8:	047ffe04 	movi	r17,-8
100057fc:	1462703a 	and	r17,r2,r17
10005800:	8800a316 	blt	r17,zero,10005a90 <_malloc_r+0x2d4>
10005804:	8940a236 	bltu	r17,r5,10005a90 <_malloc_r+0x2d4>
10005808:	000dd840 	call	1000dd84 <__malloc_lock>
1000580c:	00807dc4 	movi	r2,503
10005810:	1441e92e 	bgeu	r2,r17,10005fb8 <_malloc_r+0x7fc>
10005814:	8804d27a 	srli	r2,r17,9
10005818:	1000a126 	beq	r2,zero,10005aa0 <_malloc_r+0x2e4>
1000581c:	00c00104 	movi	r3,4
10005820:	18811e36 	bltu	r3,r2,10005c9c <_malloc_r+0x4e0>
10005824:	8804d1ba 	srli	r2,r17,6
10005828:	12000e44 	addi	r8,r2,57
1000582c:	11c00e04 	addi	r7,r2,56
10005830:	4209883a 	add	r4,r8,r8
10005834:	04c40074 	movhi	r19,4097
10005838:	2109883a 	add	r4,r4,r4
1000583c:	9cc22f04 	addi	r19,r19,2236
10005840:	2109883a 	add	r4,r4,r4
10005844:	9909883a 	add	r4,r19,r4
10005848:	24000117 	ldw	r16,4(r4)
1000584c:	213ffe04 	addi	r4,r4,-8
10005850:	24009726 	beq	r4,r16,10005ab0 <_malloc_r+0x2f4>
10005854:	80800117 	ldw	r2,4(r16)
10005858:	01bfff04 	movi	r6,-4
1000585c:	014003c4 	movi	r5,15
10005860:	1184703a 	and	r2,r2,r6
10005864:	1447c83a 	sub	r3,r2,r17
10005868:	28c00716 	blt	r5,r3,10005888 <_malloc_r+0xcc>
1000586c:	1800920e 	bge	r3,zero,10005ab8 <_malloc_r+0x2fc>
10005870:	84000317 	ldw	r16,12(r16)
10005874:	24008e26 	beq	r4,r16,10005ab0 <_malloc_r+0x2f4>
10005878:	80800117 	ldw	r2,4(r16)
1000587c:	1184703a 	and	r2,r2,r6
10005880:	1447c83a 	sub	r3,r2,r17
10005884:	28fff90e 	bge	r5,r3,1000586c <__alt_data_end+0xf800586c>
10005888:	3809883a 	mov	r4,r7
1000588c:	01840074 	movhi	r6,4097
10005890:	9c000417 	ldw	r16,16(r19)
10005894:	31822f04 	addi	r6,r6,2236
10005898:	32000204 	addi	r8,r6,8
1000589c:	82013426 	beq	r16,r8,10005d70 <_malloc_r+0x5b4>
100058a0:	80c00117 	ldw	r3,4(r16)
100058a4:	00bfff04 	movi	r2,-4
100058a8:	188e703a 	and	r7,r3,r2
100058ac:	3c45c83a 	sub	r2,r7,r17
100058b0:	00c003c4 	movi	r3,15
100058b4:	18811f16 	blt	r3,r2,10005d34 <_malloc_r+0x578>
100058b8:	32000515 	stw	r8,20(r6)
100058bc:	32000415 	stw	r8,16(r6)
100058c0:	10007f0e 	bge	r2,zero,10005ac0 <_malloc_r+0x304>
100058c4:	00807fc4 	movi	r2,511
100058c8:	11c0fd36 	bltu	r2,r7,10005cc0 <_malloc_r+0x504>
100058cc:	3806d0fa 	srli	r3,r7,3
100058d0:	01c00044 	movi	r7,1
100058d4:	30800117 	ldw	r2,4(r6)
100058d8:	19400044 	addi	r5,r3,1
100058dc:	294b883a 	add	r5,r5,r5
100058e0:	1807d0ba 	srai	r3,r3,2
100058e4:	294b883a 	add	r5,r5,r5
100058e8:	294b883a 	add	r5,r5,r5
100058ec:	298b883a 	add	r5,r5,r6
100058f0:	38c6983a 	sll	r3,r7,r3
100058f4:	29c00017 	ldw	r7,0(r5)
100058f8:	2a7ffe04 	addi	r9,r5,-8
100058fc:	1886b03a 	or	r3,r3,r2
10005900:	82400315 	stw	r9,12(r16)
10005904:	81c00215 	stw	r7,8(r16)
10005908:	30c00115 	stw	r3,4(r6)
1000590c:	2c000015 	stw	r16,0(r5)
10005910:	3c000315 	stw	r16,12(r7)
10005914:	2005d0ba 	srai	r2,r4,2
10005918:	01400044 	movi	r5,1
1000591c:	288a983a 	sll	r5,r5,r2
10005920:	19406f36 	bltu	r3,r5,10005ae0 <_malloc_r+0x324>
10005924:	28c4703a 	and	r2,r5,r3
10005928:	10000a1e 	bne	r2,zero,10005954 <_malloc_r+0x198>
1000592c:	00bfff04 	movi	r2,-4
10005930:	294b883a 	add	r5,r5,r5
10005934:	2088703a 	and	r4,r4,r2
10005938:	28c4703a 	and	r2,r5,r3
1000593c:	21000104 	addi	r4,r4,4
10005940:	1000041e 	bne	r2,zero,10005954 <_malloc_r+0x198>
10005944:	294b883a 	add	r5,r5,r5
10005948:	28c4703a 	and	r2,r5,r3
1000594c:	21000104 	addi	r4,r4,4
10005950:	103ffc26 	beq	r2,zero,10005944 <__alt_data_end+0xf8005944>
10005954:	02bfff04 	movi	r10,-4
10005958:	024003c4 	movi	r9,15
1000595c:	21800044 	addi	r6,r4,1
10005960:	318d883a 	add	r6,r6,r6
10005964:	318d883a 	add	r6,r6,r6
10005968:	318d883a 	add	r6,r6,r6
1000596c:	998d883a 	add	r6,r19,r6
10005970:	333ffe04 	addi	r12,r6,-8
10005974:	2017883a 	mov	r11,r4
10005978:	31800104 	addi	r6,r6,4
1000597c:	34000017 	ldw	r16,0(r6)
10005980:	31fffd04 	addi	r7,r6,-12
10005984:	81c0041e 	bne	r16,r7,10005998 <_malloc_r+0x1dc>
10005988:	0000fb06 	br	10005d78 <_malloc_r+0x5bc>
1000598c:	1801030e 	bge	r3,zero,10005d9c <_malloc_r+0x5e0>
10005990:	84000317 	ldw	r16,12(r16)
10005994:	81c0f826 	beq	r16,r7,10005d78 <_malloc_r+0x5bc>
10005998:	80800117 	ldw	r2,4(r16)
1000599c:	1284703a 	and	r2,r2,r10
100059a0:	1447c83a 	sub	r3,r2,r17
100059a4:	48fff90e 	bge	r9,r3,1000598c <__alt_data_end+0xf800598c>
100059a8:	80800317 	ldw	r2,12(r16)
100059ac:	81000217 	ldw	r4,8(r16)
100059b0:	89400054 	ori	r5,r17,1
100059b4:	81400115 	stw	r5,4(r16)
100059b8:	20800315 	stw	r2,12(r4)
100059bc:	11000215 	stw	r4,8(r2)
100059c0:	8463883a 	add	r17,r16,r17
100059c4:	9c400515 	stw	r17,20(r19)
100059c8:	9c400415 	stw	r17,16(r19)
100059cc:	18800054 	ori	r2,r3,1
100059d0:	88800115 	stw	r2,4(r17)
100059d4:	8a000315 	stw	r8,12(r17)
100059d8:	8a000215 	stw	r8,8(r17)
100059dc:	88e3883a 	add	r17,r17,r3
100059e0:	88c00015 	stw	r3,0(r17)
100059e4:	9009883a 	mov	r4,r18
100059e8:	000dda80 	call	1000dda8 <__malloc_unlock>
100059ec:	80800204 	addi	r2,r16,8
100059f0:	00001b06 	br	10005a60 <_malloc_r+0x2a4>
100059f4:	04400404 	movi	r17,16
100059f8:	89402536 	bltu	r17,r5,10005a90 <_malloc_r+0x2d4>
100059fc:	000dd840 	call	1000dd84 <__malloc_lock>
10005a00:	00800184 	movi	r2,6
10005a04:	01000084 	movi	r4,2
10005a08:	04c40074 	movhi	r19,4097
10005a0c:	1085883a 	add	r2,r2,r2
10005a10:	9cc22f04 	addi	r19,r19,2236
10005a14:	1085883a 	add	r2,r2,r2
10005a18:	9885883a 	add	r2,r19,r2
10005a1c:	14000117 	ldw	r16,4(r2)
10005a20:	10fffe04 	addi	r3,r2,-8
10005a24:	80c0d926 	beq	r16,r3,10005d8c <_malloc_r+0x5d0>
10005a28:	80c00117 	ldw	r3,4(r16)
10005a2c:	81000317 	ldw	r4,12(r16)
10005a30:	00bfff04 	movi	r2,-4
10005a34:	1884703a 	and	r2,r3,r2
10005a38:	81400217 	ldw	r5,8(r16)
10005a3c:	8085883a 	add	r2,r16,r2
10005a40:	10c00117 	ldw	r3,4(r2)
10005a44:	29000315 	stw	r4,12(r5)
10005a48:	21400215 	stw	r5,8(r4)
10005a4c:	18c00054 	ori	r3,r3,1
10005a50:	10c00115 	stw	r3,4(r2)
10005a54:	9009883a 	mov	r4,r18
10005a58:	000dda80 	call	1000dda8 <__malloc_unlock>
10005a5c:	80800204 	addi	r2,r16,8
10005a60:	dfc00a17 	ldw	ra,40(sp)
10005a64:	df000917 	ldw	fp,36(sp)
10005a68:	ddc00817 	ldw	r23,32(sp)
10005a6c:	dd800717 	ldw	r22,28(sp)
10005a70:	dd400617 	ldw	r21,24(sp)
10005a74:	dd000517 	ldw	r20,20(sp)
10005a78:	dcc00417 	ldw	r19,16(sp)
10005a7c:	dc800317 	ldw	r18,12(sp)
10005a80:	dc400217 	ldw	r17,8(sp)
10005a84:	dc000117 	ldw	r16,4(sp)
10005a88:	dec00b04 	addi	sp,sp,44
10005a8c:	f800283a 	ret
10005a90:	00800304 	movi	r2,12
10005a94:	90800015 	stw	r2,0(r18)
10005a98:	0005883a 	mov	r2,zero
10005a9c:	003ff006 	br	10005a60 <__alt_data_end+0xf8005a60>
10005aa0:	01002004 	movi	r4,128
10005aa4:	02001004 	movi	r8,64
10005aa8:	01c00fc4 	movi	r7,63
10005aac:	003f6106 	br	10005834 <__alt_data_end+0xf8005834>
10005ab0:	4009883a 	mov	r4,r8
10005ab4:	003f7506 	br	1000588c <__alt_data_end+0xf800588c>
10005ab8:	81000317 	ldw	r4,12(r16)
10005abc:	003fde06 	br	10005a38 <__alt_data_end+0xf8005a38>
10005ac0:	81c5883a 	add	r2,r16,r7
10005ac4:	11400117 	ldw	r5,4(r2)
10005ac8:	9009883a 	mov	r4,r18
10005acc:	29400054 	ori	r5,r5,1
10005ad0:	11400115 	stw	r5,4(r2)
10005ad4:	000dda80 	call	1000dda8 <__malloc_unlock>
10005ad8:	80800204 	addi	r2,r16,8
10005adc:	003fe006 	br	10005a60 <__alt_data_end+0xf8005a60>
10005ae0:	9c000217 	ldw	r16,8(r19)
10005ae4:	00bfff04 	movi	r2,-4
10005ae8:	85800117 	ldw	r22,4(r16)
10005aec:	b0ac703a 	and	r22,r22,r2
10005af0:	b4400336 	bltu	r22,r17,10005b00 <_malloc_r+0x344>
10005af4:	b445c83a 	sub	r2,r22,r17
10005af8:	00c003c4 	movi	r3,15
10005afc:	18805d16 	blt	r3,r2,10005c74 <_malloc_r+0x4b8>
10005b00:	05c40074 	movhi	r23,4097
10005b04:	00840074 	movhi	r2,4097
10005b08:	108e8704 	addi	r2,r2,14876
10005b0c:	bdc7b804 	addi	r23,r23,7904
10005b10:	15400017 	ldw	r21,0(r2)
10005b14:	b8c00017 	ldw	r3,0(r23)
10005b18:	00bfffc4 	movi	r2,-1
10005b1c:	858d883a 	add	r6,r16,r22
10005b20:	8d6b883a 	add	r21,r17,r21
10005b24:	1880ea26 	beq	r3,r2,10005ed0 <_malloc_r+0x714>
10005b28:	ad4403c4 	addi	r21,r21,4111
10005b2c:	00bc0004 	movi	r2,-4096
10005b30:	a8aa703a 	and	r21,r21,r2
10005b34:	a80b883a 	mov	r5,r21
10005b38:	9009883a 	mov	r4,r18
10005b3c:	d9800015 	stw	r6,0(sp)
10005b40:	00073000 	call	10007300 <_sbrk_r>
10005b44:	1029883a 	mov	r20,r2
10005b48:	00bfffc4 	movi	r2,-1
10005b4c:	d9800017 	ldw	r6,0(sp)
10005b50:	a080e826 	beq	r20,r2,10005ef4 <_malloc_r+0x738>
10005b54:	a180a636 	bltu	r20,r6,10005df0 <_malloc_r+0x634>
10005b58:	07040074 	movhi	fp,4097
10005b5c:	e70e9004 	addi	fp,fp,14912
10005b60:	e0800017 	ldw	r2,0(fp)
10005b64:	a887883a 	add	r3,r21,r2
10005b68:	e0c00015 	stw	r3,0(fp)
10005b6c:	3500e626 	beq	r6,r20,10005f08 <_malloc_r+0x74c>
10005b70:	b9000017 	ldw	r4,0(r23)
10005b74:	00bfffc4 	movi	r2,-1
10005b78:	2080ee26 	beq	r4,r2,10005f34 <_malloc_r+0x778>
10005b7c:	a185c83a 	sub	r2,r20,r6
10005b80:	10c5883a 	add	r2,r2,r3
10005b84:	e0800015 	stw	r2,0(fp)
10005b88:	a0c001cc 	andi	r3,r20,7
10005b8c:	1800bc26 	beq	r3,zero,10005e80 <_malloc_r+0x6c4>
10005b90:	a0e9c83a 	sub	r20,r20,r3
10005b94:	00840204 	movi	r2,4104
10005b98:	a5000204 	addi	r20,r20,8
10005b9c:	10c7c83a 	sub	r3,r2,r3
10005ba0:	a545883a 	add	r2,r20,r21
10005ba4:	1083ffcc 	andi	r2,r2,4095
10005ba8:	18abc83a 	sub	r21,r3,r2
10005bac:	a80b883a 	mov	r5,r21
10005bb0:	9009883a 	mov	r4,r18
10005bb4:	00073000 	call	10007300 <_sbrk_r>
10005bb8:	00ffffc4 	movi	r3,-1
10005bbc:	10c0e126 	beq	r2,r3,10005f44 <_malloc_r+0x788>
10005bc0:	1505c83a 	sub	r2,r2,r20
10005bc4:	1545883a 	add	r2,r2,r21
10005bc8:	10800054 	ori	r2,r2,1
10005bcc:	e0c00017 	ldw	r3,0(fp)
10005bd0:	9d000215 	stw	r20,8(r19)
10005bd4:	a0800115 	stw	r2,4(r20)
10005bd8:	a8c7883a 	add	r3,r21,r3
10005bdc:	e0c00015 	stw	r3,0(fp)
10005be0:	84c00e26 	beq	r16,r19,10005c1c <_malloc_r+0x460>
10005be4:	018003c4 	movi	r6,15
10005be8:	3580a72e 	bgeu	r6,r22,10005e88 <_malloc_r+0x6cc>
10005bec:	81400117 	ldw	r5,4(r16)
10005bf0:	013ffe04 	movi	r4,-8
10005bf4:	b0bffd04 	addi	r2,r22,-12
10005bf8:	1104703a 	and	r2,r2,r4
10005bfc:	2900004c 	andi	r4,r5,1
10005c00:	2088b03a 	or	r4,r4,r2
10005c04:	81000115 	stw	r4,4(r16)
10005c08:	01400144 	movi	r5,5
10005c0c:	8089883a 	add	r4,r16,r2
10005c10:	21400115 	stw	r5,4(r4)
10005c14:	21400215 	stw	r5,8(r4)
10005c18:	3080cd36 	bltu	r6,r2,10005f50 <_malloc_r+0x794>
10005c1c:	00840074 	movhi	r2,4097
10005c20:	108e8604 	addi	r2,r2,14872
10005c24:	11000017 	ldw	r4,0(r2)
10005c28:	20c0012e 	bgeu	r4,r3,10005c30 <_malloc_r+0x474>
10005c2c:	10c00015 	stw	r3,0(r2)
10005c30:	00840074 	movhi	r2,4097
10005c34:	108e8504 	addi	r2,r2,14868
10005c38:	11000017 	ldw	r4,0(r2)
10005c3c:	9c000217 	ldw	r16,8(r19)
10005c40:	20c0012e 	bgeu	r4,r3,10005c48 <_malloc_r+0x48c>
10005c44:	10c00015 	stw	r3,0(r2)
10005c48:	80c00117 	ldw	r3,4(r16)
10005c4c:	00bfff04 	movi	r2,-4
10005c50:	1886703a 	and	r3,r3,r2
10005c54:	1c45c83a 	sub	r2,r3,r17
10005c58:	1c400236 	bltu	r3,r17,10005c64 <_malloc_r+0x4a8>
10005c5c:	00c003c4 	movi	r3,15
10005c60:	18800416 	blt	r3,r2,10005c74 <_malloc_r+0x4b8>
10005c64:	9009883a 	mov	r4,r18
10005c68:	000dda80 	call	1000dda8 <__malloc_unlock>
10005c6c:	0005883a 	mov	r2,zero
10005c70:	003f7b06 	br	10005a60 <__alt_data_end+0xf8005a60>
10005c74:	88c00054 	ori	r3,r17,1
10005c78:	80c00115 	stw	r3,4(r16)
10005c7c:	8463883a 	add	r17,r16,r17
10005c80:	10800054 	ori	r2,r2,1
10005c84:	9c400215 	stw	r17,8(r19)
10005c88:	88800115 	stw	r2,4(r17)
10005c8c:	9009883a 	mov	r4,r18
10005c90:	000dda80 	call	1000dda8 <__malloc_unlock>
10005c94:	80800204 	addi	r2,r16,8
10005c98:	003f7106 	br	10005a60 <__alt_data_end+0xf8005a60>
10005c9c:	00c00504 	movi	r3,20
10005ca0:	18804a2e 	bgeu	r3,r2,10005dcc <_malloc_r+0x610>
10005ca4:	00c01504 	movi	r3,84
10005ca8:	18806e36 	bltu	r3,r2,10005e64 <_malloc_r+0x6a8>
10005cac:	8804d33a 	srli	r2,r17,12
10005cb0:	12001bc4 	addi	r8,r2,111
10005cb4:	11c01b84 	addi	r7,r2,110
10005cb8:	4209883a 	add	r4,r8,r8
10005cbc:	003edd06 	br	10005834 <__alt_data_end+0xf8005834>
10005cc0:	3804d27a 	srli	r2,r7,9
10005cc4:	00c00104 	movi	r3,4
10005cc8:	1880442e 	bgeu	r3,r2,10005ddc <_malloc_r+0x620>
10005ccc:	00c00504 	movi	r3,20
10005cd0:	18808136 	bltu	r3,r2,10005ed8 <_malloc_r+0x71c>
10005cd4:	11401704 	addi	r5,r2,92
10005cd8:	10c016c4 	addi	r3,r2,91
10005cdc:	294b883a 	add	r5,r5,r5
10005ce0:	294b883a 	add	r5,r5,r5
10005ce4:	294b883a 	add	r5,r5,r5
10005ce8:	994b883a 	add	r5,r19,r5
10005cec:	28800017 	ldw	r2,0(r5)
10005cf0:	01840074 	movhi	r6,4097
10005cf4:	297ffe04 	addi	r5,r5,-8
10005cf8:	31822f04 	addi	r6,r6,2236
10005cfc:	28806526 	beq	r5,r2,10005e94 <_malloc_r+0x6d8>
10005d00:	01bfff04 	movi	r6,-4
10005d04:	10c00117 	ldw	r3,4(r2)
10005d08:	1986703a 	and	r3,r3,r6
10005d0c:	38c0022e 	bgeu	r7,r3,10005d18 <_malloc_r+0x55c>
10005d10:	10800217 	ldw	r2,8(r2)
10005d14:	28bffb1e 	bne	r5,r2,10005d04 <__alt_data_end+0xf8005d04>
10005d18:	11400317 	ldw	r5,12(r2)
10005d1c:	98c00117 	ldw	r3,4(r19)
10005d20:	81400315 	stw	r5,12(r16)
10005d24:	80800215 	stw	r2,8(r16)
10005d28:	2c000215 	stw	r16,8(r5)
10005d2c:	14000315 	stw	r16,12(r2)
10005d30:	003ef806 	br	10005914 <__alt_data_end+0xf8005914>
10005d34:	88c00054 	ori	r3,r17,1
10005d38:	80c00115 	stw	r3,4(r16)
10005d3c:	8463883a 	add	r17,r16,r17
10005d40:	34400515 	stw	r17,20(r6)
10005d44:	34400415 	stw	r17,16(r6)
10005d48:	10c00054 	ori	r3,r2,1
10005d4c:	8a000315 	stw	r8,12(r17)
10005d50:	8a000215 	stw	r8,8(r17)
10005d54:	88c00115 	stw	r3,4(r17)
10005d58:	88a3883a 	add	r17,r17,r2
10005d5c:	88800015 	stw	r2,0(r17)
10005d60:	9009883a 	mov	r4,r18
10005d64:	000dda80 	call	1000dda8 <__malloc_unlock>
10005d68:	80800204 	addi	r2,r16,8
10005d6c:	003f3c06 	br	10005a60 <__alt_data_end+0xf8005a60>
10005d70:	30c00117 	ldw	r3,4(r6)
10005d74:	003ee706 	br	10005914 <__alt_data_end+0xf8005914>
10005d78:	5ac00044 	addi	r11,r11,1
10005d7c:	588000cc 	andi	r2,r11,3
10005d80:	31800204 	addi	r6,r6,8
10005d84:	103efd1e 	bne	r2,zero,1000597c <__alt_data_end+0xf800597c>
10005d88:	00002406 	br	10005e1c <_malloc_r+0x660>
10005d8c:	14000317 	ldw	r16,12(r2)
10005d90:	143f251e 	bne	r2,r16,10005a28 <__alt_data_end+0xf8005a28>
10005d94:	21000084 	addi	r4,r4,2
10005d98:	003ebc06 	br	1000588c <__alt_data_end+0xf800588c>
10005d9c:	8085883a 	add	r2,r16,r2
10005da0:	10c00117 	ldw	r3,4(r2)
10005da4:	81000317 	ldw	r4,12(r16)
10005da8:	81400217 	ldw	r5,8(r16)
10005dac:	18c00054 	ori	r3,r3,1
10005db0:	10c00115 	stw	r3,4(r2)
10005db4:	29000315 	stw	r4,12(r5)
10005db8:	21400215 	stw	r5,8(r4)
10005dbc:	9009883a 	mov	r4,r18
10005dc0:	000dda80 	call	1000dda8 <__malloc_unlock>
10005dc4:	80800204 	addi	r2,r16,8
10005dc8:	003f2506 	br	10005a60 <__alt_data_end+0xf8005a60>
10005dcc:	12001704 	addi	r8,r2,92
10005dd0:	11c016c4 	addi	r7,r2,91
10005dd4:	4209883a 	add	r4,r8,r8
10005dd8:	003e9606 	br	10005834 <__alt_data_end+0xf8005834>
10005ddc:	3804d1ba 	srli	r2,r7,6
10005de0:	11400e44 	addi	r5,r2,57
10005de4:	10c00e04 	addi	r3,r2,56
10005de8:	294b883a 	add	r5,r5,r5
10005dec:	003fbc06 	br	10005ce0 <__alt_data_end+0xf8005ce0>
10005df0:	84ff5926 	beq	r16,r19,10005b58 <__alt_data_end+0xf8005b58>
10005df4:	00840074 	movhi	r2,4097
10005df8:	10822f04 	addi	r2,r2,2236
10005dfc:	14000217 	ldw	r16,8(r2)
10005e00:	00bfff04 	movi	r2,-4
10005e04:	80c00117 	ldw	r3,4(r16)
10005e08:	1886703a 	and	r3,r3,r2
10005e0c:	003f9106 	br	10005c54 <__alt_data_end+0xf8005c54>
10005e10:	60800217 	ldw	r2,8(r12)
10005e14:	213fffc4 	addi	r4,r4,-1
10005e18:	1300651e 	bne	r2,r12,10005fb0 <_malloc_r+0x7f4>
10005e1c:	208000cc 	andi	r2,r4,3
10005e20:	633ffe04 	addi	r12,r12,-8
10005e24:	103ffa1e 	bne	r2,zero,10005e10 <__alt_data_end+0xf8005e10>
10005e28:	98800117 	ldw	r2,4(r19)
10005e2c:	0146303a 	nor	r3,zero,r5
10005e30:	1884703a 	and	r2,r3,r2
10005e34:	98800115 	stw	r2,4(r19)
10005e38:	294b883a 	add	r5,r5,r5
10005e3c:	117f2836 	bltu	r2,r5,10005ae0 <__alt_data_end+0xf8005ae0>
10005e40:	283f2726 	beq	r5,zero,10005ae0 <__alt_data_end+0xf8005ae0>
10005e44:	2886703a 	and	r3,r5,r2
10005e48:	5809883a 	mov	r4,r11
10005e4c:	183ec31e 	bne	r3,zero,1000595c <__alt_data_end+0xf800595c>
10005e50:	294b883a 	add	r5,r5,r5
10005e54:	2886703a 	and	r3,r5,r2
10005e58:	21000104 	addi	r4,r4,4
10005e5c:	183ffc26 	beq	r3,zero,10005e50 <__alt_data_end+0xf8005e50>
10005e60:	003ebe06 	br	1000595c <__alt_data_end+0xf800595c>
10005e64:	00c05504 	movi	r3,340
10005e68:	18801236 	bltu	r3,r2,10005eb4 <_malloc_r+0x6f8>
10005e6c:	8804d3fa 	srli	r2,r17,15
10005e70:	12001e04 	addi	r8,r2,120
10005e74:	11c01dc4 	addi	r7,r2,119
10005e78:	4209883a 	add	r4,r8,r8
10005e7c:	003e6d06 	br	10005834 <__alt_data_end+0xf8005834>
10005e80:	00c40004 	movi	r3,4096
10005e84:	003f4606 	br	10005ba0 <__alt_data_end+0xf8005ba0>
10005e88:	00800044 	movi	r2,1
10005e8c:	a0800115 	stw	r2,4(r20)
10005e90:	003f7406 	br	10005c64 <__alt_data_end+0xf8005c64>
10005e94:	1805d0ba 	srai	r2,r3,2
10005e98:	01c00044 	movi	r7,1
10005e9c:	30c00117 	ldw	r3,4(r6)
10005ea0:	388e983a 	sll	r7,r7,r2
10005ea4:	2805883a 	mov	r2,r5
10005ea8:	38c6b03a 	or	r3,r7,r3
10005eac:	30c00115 	stw	r3,4(r6)
10005eb0:	003f9b06 	br	10005d20 <__alt_data_end+0xf8005d20>
10005eb4:	00c15504 	movi	r3,1364
10005eb8:	18801a36 	bltu	r3,r2,10005f24 <_malloc_r+0x768>
10005ebc:	8804d4ba 	srli	r2,r17,18
10005ec0:	12001f44 	addi	r8,r2,125
10005ec4:	11c01f04 	addi	r7,r2,124
10005ec8:	4209883a 	add	r4,r8,r8
10005ecc:	003e5906 	br	10005834 <__alt_data_end+0xf8005834>
10005ed0:	ad400404 	addi	r21,r21,16
10005ed4:	003f1706 	br	10005b34 <__alt_data_end+0xf8005b34>
10005ed8:	00c01504 	movi	r3,84
10005edc:	18802336 	bltu	r3,r2,10005f6c <_malloc_r+0x7b0>
10005ee0:	3804d33a 	srli	r2,r7,12
10005ee4:	11401bc4 	addi	r5,r2,111
10005ee8:	10c01b84 	addi	r3,r2,110
10005eec:	294b883a 	add	r5,r5,r5
10005ef0:	003f7b06 	br	10005ce0 <__alt_data_end+0xf8005ce0>
10005ef4:	9c000217 	ldw	r16,8(r19)
10005ef8:	00bfff04 	movi	r2,-4
10005efc:	80c00117 	ldw	r3,4(r16)
10005f00:	1886703a 	and	r3,r3,r2
10005f04:	003f5306 	br	10005c54 <__alt_data_end+0xf8005c54>
10005f08:	3083ffcc 	andi	r2,r6,4095
10005f0c:	103f181e 	bne	r2,zero,10005b70 <__alt_data_end+0xf8005b70>
10005f10:	99000217 	ldw	r4,8(r19)
10005f14:	b545883a 	add	r2,r22,r21
10005f18:	10800054 	ori	r2,r2,1
10005f1c:	20800115 	stw	r2,4(r4)
10005f20:	003f3e06 	br	10005c1c <__alt_data_end+0xf8005c1c>
10005f24:	01003f84 	movi	r4,254
10005f28:	02001fc4 	movi	r8,127
10005f2c:	01c01f84 	movi	r7,126
10005f30:	003e4006 	br	10005834 <__alt_data_end+0xf8005834>
10005f34:	00840074 	movhi	r2,4097
10005f38:	1087b804 	addi	r2,r2,7904
10005f3c:	15000015 	stw	r20,0(r2)
10005f40:	003f1106 	br	10005b88 <__alt_data_end+0xf8005b88>
10005f44:	00800044 	movi	r2,1
10005f48:	002b883a 	mov	r21,zero
10005f4c:	003f1f06 	br	10005bcc <__alt_data_end+0xf8005bcc>
10005f50:	81400204 	addi	r5,r16,8
10005f54:	9009883a 	mov	r4,r18
10005f58:	000508c0 	call	1000508c <_free_r>
10005f5c:	00840074 	movhi	r2,4097
10005f60:	108e9004 	addi	r2,r2,14912
10005f64:	10c00017 	ldw	r3,0(r2)
10005f68:	003f2c06 	br	10005c1c <__alt_data_end+0xf8005c1c>
10005f6c:	00c05504 	movi	r3,340
10005f70:	18800536 	bltu	r3,r2,10005f88 <_malloc_r+0x7cc>
10005f74:	3804d3fa 	srli	r2,r7,15
10005f78:	11401e04 	addi	r5,r2,120
10005f7c:	10c01dc4 	addi	r3,r2,119
10005f80:	294b883a 	add	r5,r5,r5
10005f84:	003f5606 	br	10005ce0 <__alt_data_end+0xf8005ce0>
10005f88:	00c15504 	movi	r3,1364
10005f8c:	18800536 	bltu	r3,r2,10005fa4 <_malloc_r+0x7e8>
10005f90:	3804d4ba 	srli	r2,r7,18
10005f94:	11401f44 	addi	r5,r2,125
10005f98:	10c01f04 	addi	r3,r2,124
10005f9c:	294b883a 	add	r5,r5,r5
10005fa0:	003f4f06 	br	10005ce0 <__alt_data_end+0xf8005ce0>
10005fa4:	01403f84 	movi	r5,254
10005fa8:	00c01f84 	movi	r3,126
10005fac:	003f4c06 	br	10005ce0 <__alt_data_end+0xf8005ce0>
10005fb0:	98800117 	ldw	r2,4(r19)
10005fb4:	003fa006 	br	10005e38 <__alt_data_end+0xf8005e38>
10005fb8:	8808d0fa 	srli	r4,r17,3
10005fbc:	20800044 	addi	r2,r4,1
10005fc0:	1085883a 	add	r2,r2,r2
10005fc4:	003e9006 	br	10005a08 <__alt_data_end+0xf8005a08>

10005fc8 <memchr>:
10005fc8:	208000cc 	andi	r2,r4,3
10005fcc:	280f883a 	mov	r7,r5
10005fd0:	10003426 	beq	r2,zero,100060a4 <memchr+0xdc>
10005fd4:	30bfffc4 	addi	r2,r6,-1
10005fd8:	30001a26 	beq	r6,zero,10006044 <memchr+0x7c>
10005fdc:	20c00003 	ldbu	r3,0(r4)
10005fe0:	29803fcc 	andi	r6,r5,255
10005fe4:	30c0051e 	bne	r6,r3,10005ffc <memchr+0x34>
10005fe8:	00001806 	br	1000604c <memchr+0x84>
10005fec:	10001526 	beq	r2,zero,10006044 <memchr+0x7c>
10005ff0:	20c00003 	ldbu	r3,0(r4)
10005ff4:	10bfffc4 	addi	r2,r2,-1
10005ff8:	30c01426 	beq	r6,r3,1000604c <memchr+0x84>
10005ffc:	21000044 	addi	r4,r4,1
10006000:	20c000cc 	andi	r3,r4,3
10006004:	183ff91e 	bne	r3,zero,10005fec <__alt_data_end+0xf8005fec>
10006008:	020000c4 	movi	r8,3
1000600c:	40801136 	bltu	r8,r2,10006054 <memchr+0x8c>
10006010:	10000c26 	beq	r2,zero,10006044 <memchr+0x7c>
10006014:	20c00003 	ldbu	r3,0(r4)
10006018:	29403fcc 	andi	r5,r5,255
1000601c:	28c00b26 	beq	r5,r3,1000604c <memchr+0x84>
10006020:	20c00044 	addi	r3,r4,1
10006024:	39803fcc 	andi	r6,r7,255
10006028:	2089883a 	add	r4,r4,r2
1000602c:	00000306 	br	1000603c <memchr+0x74>
10006030:	18c00044 	addi	r3,r3,1
10006034:	197fffc3 	ldbu	r5,-1(r3)
10006038:	31400526 	beq	r6,r5,10006050 <memchr+0x88>
1000603c:	1805883a 	mov	r2,r3
10006040:	20fffb1e 	bne	r4,r3,10006030 <__alt_data_end+0xf8006030>
10006044:	0005883a 	mov	r2,zero
10006048:	f800283a 	ret
1000604c:	2005883a 	mov	r2,r4
10006050:	f800283a 	ret
10006054:	28c03fcc 	andi	r3,r5,255
10006058:	1812923a 	slli	r9,r3,8
1000605c:	02ffbff4 	movhi	r11,65279
10006060:	02a02074 	movhi	r10,32897
10006064:	48d2b03a 	or	r9,r9,r3
10006068:	4806943a 	slli	r3,r9,16
1000606c:	5affbfc4 	addi	r11,r11,-257
10006070:	52a02004 	addi	r10,r10,-32640
10006074:	48d2b03a 	or	r9,r9,r3
10006078:	20c00017 	ldw	r3,0(r4)
1000607c:	48c6f03a 	xor	r3,r9,r3
10006080:	1acd883a 	add	r6,r3,r11
10006084:	00c6303a 	nor	r3,zero,r3
10006088:	30c6703a 	and	r3,r6,r3
1000608c:	1a86703a 	and	r3,r3,r10
10006090:	183fe01e 	bne	r3,zero,10006014 <__alt_data_end+0xf8006014>
10006094:	10bfff04 	addi	r2,r2,-4
10006098:	21000104 	addi	r4,r4,4
1000609c:	40bff636 	bltu	r8,r2,10006078 <__alt_data_end+0xf8006078>
100060a0:	003fdb06 	br	10006010 <__alt_data_end+0xf8006010>
100060a4:	3005883a 	mov	r2,r6
100060a8:	003fd706 	br	10006008 <__alt_data_end+0xf8006008>

100060ac <memset>:
100060ac:	20c000cc 	andi	r3,r4,3
100060b0:	2005883a 	mov	r2,r4
100060b4:	18004426 	beq	r3,zero,100061c8 <memset+0x11c>
100060b8:	31ffffc4 	addi	r7,r6,-1
100060bc:	30004026 	beq	r6,zero,100061c0 <memset+0x114>
100060c0:	2813883a 	mov	r9,r5
100060c4:	200d883a 	mov	r6,r4
100060c8:	2007883a 	mov	r3,r4
100060cc:	00000406 	br	100060e0 <memset+0x34>
100060d0:	3a3fffc4 	addi	r8,r7,-1
100060d4:	31800044 	addi	r6,r6,1
100060d8:	38003926 	beq	r7,zero,100061c0 <memset+0x114>
100060dc:	400f883a 	mov	r7,r8
100060e0:	18c00044 	addi	r3,r3,1
100060e4:	32400005 	stb	r9,0(r6)
100060e8:	1a0000cc 	andi	r8,r3,3
100060ec:	403ff81e 	bne	r8,zero,100060d0 <__alt_data_end+0xf80060d0>
100060f0:	010000c4 	movi	r4,3
100060f4:	21c02d2e 	bgeu	r4,r7,100061ac <memset+0x100>
100060f8:	29003fcc 	andi	r4,r5,255
100060fc:	200c923a 	slli	r6,r4,8
10006100:	3108b03a 	or	r4,r6,r4
10006104:	200c943a 	slli	r6,r4,16
10006108:	218cb03a 	or	r6,r4,r6
1000610c:	010003c4 	movi	r4,15
10006110:	21c0182e 	bgeu	r4,r7,10006174 <memset+0xc8>
10006114:	3b3ffc04 	addi	r12,r7,-16
10006118:	6018d13a 	srli	r12,r12,4
1000611c:	1a000104 	addi	r8,r3,4
10006120:	1ac00204 	addi	r11,r3,8
10006124:	6008913a 	slli	r4,r12,4
10006128:	1a800304 	addi	r10,r3,12
1000612c:	1813883a 	mov	r9,r3
10006130:	21000504 	addi	r4,r4,20
10006134:	1909883a 	add	r4,r3,r4
10006138:	49800015 	stw	r6,0(r9)
1000613c:	41800015 	stw	r6,0(r8)
10006140:	59800015 	stw	r6,0(r11)
10006144:	51800015 	stw	r6,0(r10)
10006148:	42000404 	addi	r8,r8,16
1000614c:	4a400404 	addi	r9,r9,16
10006150:	5ac00404 	addi	r11,r11,16
10006154:	52800404 	addi	r10,r10,16
10006158:	413ff71e 	bne	r8,r4,10006138 <__alt_data_end+0xf8006138>
1000615c:	63000044 	addi	r12,r12,1
10006160:	6018913a 	slli	r12,r12,4
10006164:	39c003cc 	andi	r7,r7,15
10006168:	010000c4 	movi	r4,3
1000616c:	1b07883a 	add	r3,r3,r12
10006170:	21c00e2e 	bgeu	r4,r7,100061ac <memset+0x100>
10006174:	1813883a 	mov	r9,r3
10006178:	3811883a 	mov	r8,r7
1000617c:	010000c4 	movi	r4,3
10006180:	49800015 	stw	r6,0(r9)
10006184:	423fff04 	addi	r8,r8,-4
10006188:	4a400104 	addi	r9,r9,4
1000618c:	223ffc36 	bltu	r4,r8,10006180 <__alt_data_end+0xf8006180>
10006190:	393fff04 	addi	r4,r7,-4
10006194:	2008d0ba 	srli	r4,r4,2
10006198:	39c000cc 	andi	r7,r7,3
1000619c:	21000044 	addi	r4,r4,1
100061a0:	2109883a 	add	r4,r4,r4
100061a4:	2109883a 	add	r4,r4,r4
100061a8:	1907883a 	add	r3,r3,r4
100061ac:	38000526 	beq	r7,zero,100061c4 <memset+0x118>
100061b0:	19cf883a 	add	r7,r3,r7
100061b4:	19400005 	stb	r5,0(r3)
100061b8:	18c00044 	addi	r3,r3,1
100061bc:	38fffd1e 	bne	r7,r3,100061b4 <__alt_data_end+0xf80061b4>
100061c0:	f800283a 	ret
100061c4:	f800283a 	ret
100061c8:	2007883a 	mov	r3,r4
100061cc:	300f883a 	mov	r7,r6
100061d0:	003fc706 	br	100060f0 <__alt_data_end+0xf80060f0>

100061d4 <_Balloc>:
100061d4:	20801317 	ldw	r2,76(r4)
100061d8:	defffc04 	addi	sp,sp,-16
100061dc:	dc400115 	stw	r17,4(sp)
100061e0:	dc000015 	stw	r16,0(sp)
100061e4:	dfc00315 	stw	ra,12(sp)
100061e8:	dc800215 	stw	r18,8(sp)
100061ec:	2023883a 	mov	r17,r4
100061f0:	2821883a 	mov	r16,r5
100061f4:	10000f26 	beq	r2,zero,10006234 <_Balloc+0x60>
100061f8:	8407883a 	add	r3,r16,r16
100061fc:	18c7883a 	add	r3,r3,r3
10006200:	10c7883a 	add	r3,r2,r3
10006204:	18800017 	ldw	r2,0(r3)
10006208:	10001126 	beq	r2,zero,10006250 <_Balloc+0x7c>
1000620c:	11000017 	ldw	r4,0(r2)
10006210:	19000015 	stw	r4,0(r3)
10006214:	10000415 	stw	zero,16(r2)
10006218:	10000315 	stw	zero,12(r2)
1000621c:	dfc00317 	ldw	ra,12(sp)
10006220:	dc800217 	ldw	r18,8(sp)
10006224:	dc400117 	ldw	r17,4(sp)
10006228:	dc000017 	ldw	r16,0(sp)
1000622c:	dec00404 	addi	sp,sp,16
10006230:	f800283a 	ret
10006234:	01800844 	movi	r6,33
10006238:	01400104 	movi	r5,4
1000623c:	0008db00 	call	10008db0 <_calloc_r>
10006240:	88801315 	stw	r2,76(r17)
10006244:	103fec1e 	bne	r2,zero,100061f8 <__alt_data_end+0xf80061f8>
10006248:	0005883a 	mov	r2,zero
1000624c:	003ff306 	br	1000621c <__alt_data_end+0xf800621c>
10006250:	01400044 	movi	r5,1
10006254:	2c24983a 	sll	r18,r5,r16
10006258:	8809883a 	mov	r4,r17
1000625c:	91800144 	addi	r6,r18,5
10006260:	318d883a 	add	r6,r6,r6
10006264:	318d883a 	add	r6,r6,r6
10006268:	0008db00 	call	10008db0 <_calloc_r>
1000626c:	103ff626 	beq	r2,zero,10006248 <__alt_data_end+0xf8006248>
10006270:	14000115 	stw	r16,4(r2)
10006274:	14800215 	stw	r18,8(r2)
10006278:	003fe606 	br	10006214 <__alt_data_end+0xf8006214>

1000627c <_Bfree>:
1000627c:	28000826 	beq	r5,zero,100062a0 <_Bfree+0x24>
10006280:	28c00117 	ldw	r3,4(r5)
10006284:	20801317 	ldw	r2,76(r4)
10006288:	18c7883a 	add	r3,r3,r3
1000628c:	18c7883a 	add	r3,r3,r3
10006290:	10c5883a 	add	r2,r2,r3
10006294:	10c00017 	ldw	r3,0(r2)
10006298:	28c00015 	stw	r3,0(r5)
1000629c:	11400015 	stw	r5,0(r2)
100062a0:	f800283a 	ret

100062a4 <__multadd>:
100062a4:	defff704 	addi	sp,sp,-36
100062a8:	dc800215 	stw	r18,8(sp)
100062ac:	2c800417 	ldw	r18,16(r5)
100062b0:	dd800615 	stw	r22,24(sp)
100062b4:	dd400515 	stw	r21,20(sp)
100062b8:	dd000415 	stw	r20,16(sp)
100062bc:	dcc00315 	stw	r19,12(sp)
100062c0:	dc400115 	stw	r17,4(sp)
100062c4:	dc000015 	stw	r16,0(sp)
100062c8:	dfc00815 	stw	ra,32(sp)
100062cc:	ddc00715 	stw	r23,28(sp)
100062d0:	2827883a 	mov	r19,r5
100062d4:	2029883a 	mov	r20,r4
100062d8:	3023883a 	mov	r17,r6
100062dc:	3821883a 	mov	r16,r7
100062e0:	2d400504 	addi	r21,r5,20
100062e4:	002d883a 	mov	r22,zero
100062e8:	adc00017 	ldw	r23,0(r21)
100062ec:	880b883a 	mov	r5,r17
100062f0:	ad400104 	addi	r21,r21,4
100062f4:	b93fffcc 	andi	r4,r23,65535
100062f8:	000097c0 	call	1000097c <__mulsi3>
100062fc:	b808d43a 	srli	r4,r23,16
10006300:	880b883a 	mov	r5,r17
10006304:	1421883a 	add	r16,r2,r16
10006308:	000097c0 	call	1000097c <__mulsi3>
1000630c:	800ed43a 	srli	r7,r16,16
10006310:	80ffffcc 	andi	r3,r16,65535
10006314:	b5800044 	addi	r22,r22,1
10006318:	11c5883a 	add	r2,r2,r7
1000631c:	100e943a 	slli	r7,r2,16
10006320:	1020d43a 	srli	r16,r2,16
10006324:	38c7883a 	add	r3,r7,r3
10006328:	a8ffff15 	stw	r3,-4(r21)
1000632c:	b4bfee16 	blt	r22,r18,100062e8 <__alt_data_end+0xf80062e8>
10006330:	80000926 	beq	r16,zero,10006358 <__multadd+0xb4>
10006334:	98800217 	ldw	r2,8(r19)
10006338:	9080130e 	bge	r18,r2,10006388 <__multadd+0xe4>
1000633c:	90800144 	addi	r2,r18,5
10006340:	1085883a 	add	r2,r2,r2
10006344:	1085883a 	add	r2,r2,r2
10006348:	9885883a 	add	r2,r19,r2
1000634c:	14000015 	stw	r16,0(r2)
10006350:	94800044 	addi	r18,r18,1
10006354:	9c800415 	stw	r18,16(r19)
10006358:	9805883a 	mov	r2,r19
1000635c:	dfc00817 	ldw	ra,32(sp)
10006360:	ddc00717 	ldw	r23,28(sp)
10006364:	dd800617 	ldw	r22,24(sp)
10006368:	dd400517 	ldw	r21,20(sp)
1000636c:	dd000417 	ldw	r20,16(sp)
10006370:	dcc00317 	ldw	r19,12(sp)
10006374:	dc800217 	ldw	r18,8(sp)
10006378:	dc400117 	ldw	r17,4(sp)
1000637c:	dc000017 	ldw	r16,0(sp)
10006380:	dec00904 	addi	sp,sp,36
10006384:	f800283a 	ret
10006388:	99400117 	ldw	r5,4(r19)
1000638c:	a009883a 	mov	r4,r20
10006390:	29400044 	addi	r5,r5,1
10006394:	00061d40 	call	100061d4 <_Balloc>
10006398:	99800417 	ldw	r6,16(r19)
1000639c:	99400304 	addi	r5,r19,12
100063a0:	11000304 	addi	r4,r2,12
100063a4:	31800084 	addi	r6,r6,2
100063a8:	318d883a 	add	r6,r6,r6
100063ac:	318d883a 	add	r6,r6,r6
100063b0:	1023883a 	mov	r17,r2
100063b4:	00009a40 	call	100009a4 <memcpy>
100063b8:	98000a26 	beq	r19,zero,100063e4 <__multadd+0x140>
100063bc:	98c00117 	ldw	r3,4(r19)
100063c0:	a0801317 	ldw	r2,76(r20)
100063c4:	18c7883a 	add	r3,r3,r3
100063c8:	18c7883a 	add	r3,r3,r3
100063cc:	10c5883a 	add	r2,r2,r3
100063d0:	10c00017 	ldw	r3,0(r2)
100063d4:	98c00015 	stw	r3,0(r19)
100063d8:	14c00015 	stw	r19,0(r2)
100063dc:	8827883a 	mov	r19,r17
100063e0:	003fd606 	br	1000633c <__alt_data_end+0xf800633c>
100063e4:	8827883a 	mov	r19,r17
100063e8:	003fd406 	br	1000633c <__alt_data_end+0xf800633c>

100063ec <__s2b>:
100063ec:	defff904 	addi	sp,sp,-28
100063f0:	dc400115 	stw	r17,4(sp)
100063f4:	dc000015 	stw	r16,0(sp)
100063f8:	2023883a 	mov	r17,r4
100063fc:	2821883a 	mov	r16,r5
10006400:	39000204 	addi	r4,r7,8
10006404:	01400244 	movi	r5,9
10006408:	dcc00315 	stw	r19,12(sp)
1000640c:	dc800215 	stw	r18,8(sp)
10006410:	dfc00615 	stw	ra,24(sp)
10006414:	dd400515 	stw	r21,20(sp)
10006418:	dd000415 	stw	r20,16(sp)
1000641c:	3825883a 	mov	r18,r7
10006420:	3027883a 	mov	r19,r6
10006424:	000ad900 	call	1000ad90 <__divsi3>
10006428:	00c00044 	movi	r3,1
1000642c:	000b883a 	mov	r5,zero
10006430:	1880030e 	bge	r3,r2,10006440 <__s2b+0x54>
10006434:	18c7883a 	add	r3,r3,r3
10006438:	29400044 	addi	r5,r5,1
1000643c:	18bffd16 	blt	r3,r2,10006434 <__alt_data_end+0xf8006434>
10006440:	8809883a 	mov	r4,r17
10006444:	00061d40 	call	100061d4 <_Balloc>
10006448:	d8c00717 	ldw	r3,28(sp)
1000644c:	10c00515 	stw	r3,20(r2)
10006450:	00c00044 	movi	r3,1
10006454:	10c00415 	stw	r3,16(r2)
10006458:	00c00244 	movi	r3,9
1000645c:	1cc0210e 	bge	r3,r19,100064e4 <__s2b+0xf8>
10006460:	80eb883a 	add	r21,r16,r3
10006464:	a829883a 	mov	r20,r21
10006468:	84e1883a 	add	r16,r16,r19
1000646c:	a1c00007 	ldb	r7,0(r20)
10006470:	01800284 	movi	r6,10
10006474:	a5000044 	addi	r20,r20,1
10006478:	100b883a 	mov	r5,r2
1000647c:	39fff404 	addi	r7,r7,-48
10006480:	8809883a 	mov	r4,r17
10006484:	00062a40 	call	100062a4 <__multadd>
10006488:	a43ff81e 	bne	r20,r16,1000646c <__alt_data_end+0xf800646c>
1000648c:	ace1883a 	add	r16,r21,r19
10006490:	843ffe04 	addi	r16,r16,-8
10006494:	9c800a0e 	bge	r19,r18,100064c0 <__s2b+0xd4>
10006498:	94e5c83a 	sub	r18,r18,r19
1000649c:	84a5883a 	add	r18,r16,r18
100064a0:	81c00007 	ldb	r7,0(r16)
100064a4:	01800284 	movi	r6,10
100064a8:	84000044 	addi	r16,r16,1
100064ac:	100b883a 	mov	r5,r2
100064b0:	39fff404 	addi	r7,r7,-48
100064b4:	8809883a 	mov	r4,r17
100064b8:	00062a40 	call	100062a4 <__multadd>
100064bc:	84bff81e 	bne	r16,r18,100064a0 <__alt_data_end+0xf80064a0>
100064c0:	dfc00617 	ldw	ra,24(sp)
100064c4:	dd400517 	ldw	r21,20(sp)
100064c8:	dd000417 	ldw	r20,16(sp)
100064cc:	dcc00317 	ldw	r19,12(sp)
100064d0:	dc800217 	ldw	r18,8(sp)
100064d4:	dc400117 	ldw	r17,4(sp)
100064d8:	dc000017 	ldw	r16,0(sp)
100064dc:	dec00704 	addi	sp,sp,28
100064e0:	f800283a 	ret
100064e4:	84000284 	addi	r16,r16,10
100064e8:	1827883a 	mov	r19,r3
100064ec:	003fe906 	br	10006494 <__alt_data_end+0xf8006494>

100064f0 <__hi0bits>:
100064f0:	20bfffec 	andhi	r2,r4,65535
100064f4:	1000141e 	bne	r2,zero,10006548 <__hi0bits+0x58>
100064f8:	2008943a 	slli	r4,r4,16
100064fc:	00800404 	movi	r2,16
10006500:	20ffc02c 	andhi	r3,r4,65280
10006504:	1800021e 	bne	r3,zero,10006510 <__hi0bits+0x20>
10006508:	2008923a 	slli	r4,r4,8
1000650c:	10800204 	addi	r2,r2,8
10006510:	20fc002c 	andhi	r3,r4,61440
10006514:	1800021e 	bne	r3,zero,10006520 <__hi0bits+0x30>
10006518:	2008913a 	slli	r4,r4,4
1000651c:	10800104 	addi	r2,r2,4
10006520:	20f0002c 	andhi	r3,r4,49152
10006524:	1800031e 	bne	r3,zero,10006534 <__hi0bits+0x44>
10006528:	2109883a 	add	r4,r4,r4
1000652c:	10800084 	addi	r2,r2,2
10006530:	2109883a 	add	r4,r4,r4
10006534:	20000316 	blt	r4,zero,10006544 <__hi0bits+0x54>
10006538:	2110002c 	andhi	r4,r4,16384
1000653c:	2000041e 	bne	r4,zero,10006550 <__hi0bits+0x60>
10006540:	00800804 	movi	r2,32
10006544:	f800283a 	ret
10006548:	0005883a 	mov	r2,zero
1000654c:	003fec06 	br	10006500 <__alt_data_end+0xf8006500>
10006550:	10800044 	addi	r2,r2,1
10006554:	f800283a 	ret

10006558 <__lo0bits>:
10006558:	20c00017 	ldw	r3,0(r4)
1000655c:	188001cc 	andi	r2,r3,7
10006560:	10000826 	beq	r2,zero,10006584 <__lo0bits+0x2c>
10006564:	1880004c 	andi	r2,r3,1
10006568:	1000211e 	bne	r2,zero,100065f0 <__lo0bits+0x98>
1000656c:	1880008c 	andi	r2,r3,2
10006570:	1000211e 	bne	r2,zero,100065f8 <__lo0bits+0xa0>
10006574:	1806d0ba 	srli	r3,r3,2
10006578:	00800084 	movi	r2,2
1000657c:	20c00015 	stw	r3,0(r4)
10006580:	f800283a 	ret
10006584:	18bfffcc 	andi	r2,r3,65535
10006588:	10001326 	beq	r2,zero,100065d8 <__lo0bits+0x80>
1000658c:	0005883a 	mov	r2,zero
10006590:	19403fcc 	andi	r5,r3,255
10006594:	2800021e 	bne	r5,zero,100065a0 <__lo0bits+0x48>
10006598:	1806d23a 	srli	r3,r3,8
1000659c:	10800204 	addi	r2,r2,8
100065a0:	194003cc 	andi	r5,r3,15
100065a4:	2800021e 	bne	r5,zero,100065b0 <__lo0bits+0x58>
100065a8:	1806d13a 	srli	r3,r3,4
100065ac:	10800104 	addi	r2,r2,4
100065b0:	194000cc 	andi	r5,r3,3
100065b4:	2800021e 	bne	r5,zero,100065c0 <__lo0bits+0x68>
100065b8:	1806d0ba 	srli	r3,r3,2
100065bc:	10800084 	addi	r2,r2,2
100065c0:	1940004c 	andi	r5,r3,1
100065c4:	2800081e 	bne	r5,zero,100065e8 <__lo0bits+0x90>
100065c8:	1806d07a 	srli	r3,r3,1
100065cc:	1800051e 	bne	r3,zero,100065e4 <__lo0bits+0x8c>
100065d0:	00800804 	movi	r2,32
100065d4:	f800283a 	ret
100065d8:	1806d43a 	srli	r3,r3,16
100065dc:	00800404 	movi	r2,16
100065e0:	003feb06 	br	10006590 <__alt_data_end+0xf8006590>
100065e4:	10800044 	addi	r2,r2,1
100065e8:	20c00015 	stw	r3,0(r4)
100065ec:	f800283a 	ret
100065f0:	0005883a 	mov	r2,zero
100065f4:	f800283a 	ret
100065f8:	1806d07a 	srli	r3,r3,1
100065fc:	00800044 	movi	r2,1
10006600:	20c00015 	stw	r3,0(r4)
10006604:	f800283a 	ret

10006608 <__i2b>:
10006608:	defffd04 	addi	sp,sp,-12
1000660c:	dc000015 	stw	r16,0(sp)
10006610:	04000044 	movi	r16,1
10006614:	dc400115 	stw	r17,4(sp)
10006618:	2823883a 	mov	r17,r5
1000661c:	800b883a 	mov	r5,r16
10006620:	dfc00215 	stw	ra,8(sp)
10006624:	00061d40 	call	100061d4 <_Balloc>
10006628:	14400515 	stw	r17,20(r2)
1000662c:	14000415 	stw	r16,16(r2)
10006630:	dfc00217 	ldw	ra,8(sp)
10006634:	dc400117 	ldw	r17,4(sp)
10006638:	dc000017 	ldw	r16,0(sp)
1000663c:	dec00304 	addi	sp,sp,12
10006640:	f800283a 	ret

10006644 <__multiply>:
10006644:	deffef04 	addi	sp,sp,-68
10006648:	dc400815 	stw	r17,32(sp)
1000664c:	dc000715 	stw	r16,28(sp)
10006650:	34400417 	ldw	r17,16(r6)
10006654:	2c000417 	ldw	r16,16(r5)
10006658:	dd800d15 	stw	r22,52(sp)
1000665c:	dc800915 	stw	r18,36(sp)
10006660:	dfc01015 	stw	ra,64(sp)
10006664:	df000f15 	stw	fp,60(sp)
10006668:	ddc00e15 	stw	r23,56(sp)
1000666c:	dd400c15 	stw	r21,48(sp)
10006670:	dd000b15 	stw	r20,44(sp)
10006674:	dcc00a15 	stw	r19,40(sp)
10006678:	2825883a 	mov	r18,r5
1000667c:	302d883a 	mov	r22,r6
10006680:	8440050e 	bge	r16,r17,10006698 <__multiply+0x54>
10006684:	8007883a 	mov	r3,r16
10006688:	3025883a 	mov	r18,r6
1000668c:	8821883a 	mov	r16,r17
10006690:	282d883a 	mov	r22,r5
10006694:	1823883a 	mov	r17,r3
10006698:	90800217 	ldw	r2,8(r18)
1000669c:	8447883a 	add	r3,r16,r17
100066a0:	d8c00215 	stw	r3,8(sp)
100066a4:	91400117 	ldw	r5,4(r18)
100066a8:	10c0010e 	bge	r2,r3,100066b0 <__multiply+0x6c>
100066ac:	29400044 	addi	r5,r5,1
100066b0:	00061d40 	call	100061d4 <_Balloc>
100066b4:	d8c00217 	ldw	r3,8(sp)
100066b8:	d8800615 	stw	r2,24(sp)
100066bc:	18eb883a 	add	r21,r3,r3
100066c0:	ad6b883a 	add	r21,r21,r21
100066c4:	10c00504 	addi	r3,r2,20
100066c8:	1d6b883a 	add	r21,r3,r21
100066cc:	d8c00115 	stw	r3,4(sp)
100066d0:	dd400315 	stw	r21,12(sp)
100066d4:	1805883a 	mov	r2,r3
100066d8:	1d40042e 	bgeu	r3,r21,100066ec <__multiply+0xa8>
100066dc:	d8c00317 	ldw	r3,12(sp)
100066e0:	10000015 	stw	zero,0(r2)
100066e4:	10800104 	addi	r2,r2,4
100066e8:	10fffc36 	bltu	r2,r3,100066dc <__alt_data_end+0xf80066dc>
100066ec:	8c63883a 	add	r17,r17,r17
100066f0:	b5800504 	addi	r22,r22,20
100066f4:	8c63883a 	add	r17,r17,r17
100066f8:	94800504 	addi	r18,r18,20
100066fc:	8421883a 	add	r16,r16,r16
10006700:	b463883a 	add	r17,r22,r17
10006704:	8421883a 	add	r16,r16,r16
10006708:	dd800015 	stw	r22,0(sp)
1000670c:	dc800415 	stw	r18,16(sp)
10006710:	dc400515 	stw	r17,20(sp)
10006714:	9429883a 	add	r20,r18,r16
10006718:	b4404f2e 	bgeu	r22,r17,10006858 <__multiply+0x214>
1000671c:	d8c00017 	ldw	r3,0(sp)
10006720:	1c800017 	ldw	r18,0(r3)
10006724:	947fffcc 	andi	r17,r18,65535
10006728:	88001e26 	beq	r17,zero,100067a4 <__multiply+0x160>
1000672c:	dd800117 	ldw	r22,4(sp)
10006730:	dd400417 	ldw	r21,16(sp)
10006734:	0027883a 	mov	r19,zero
10006738:	ac800017 	ldw	r18,0(r21)
1000673c:	b4000017 	ldw	r16,0(r22)
10006740:	880b883a 	mov	r5,r17
10006744:	913fffcc 	andi	r4,r18,65535
10006748:	000097c0 	call	1000097c <__mulsi3>
1000674c:	9008d43a 	srli	r4,r18,16
10006750:	84bfffcc 	andi	r18,r16,65535
10006754:	1485883a 	add	r2,r2,r18
10006758:	14e5883a 	add	r18,r2,r19
1000675c:	8020d43a 	srli	r16,r16,16
10006760:	9026d43a 	srli	r19,r18,16
10006764:	880b883a 	mov	r5,r17
10006768:	000097c0 	call	1000097c <__mulsi3>
1000676c:	1405883a 	add	r2,r2,r16
10006770:	14e1883a 	add	r16,r2,r19
10006774:	90ffffcc 	andi	r3,r18,65535
10006778:	8024943a 	slli	r18,r16,16
1000677c:	ad400104 	addi	r21,r21,4
10006780:	b005883a 	mov	r2,r22
10006784:	90c6b03a 	or	r3,r18,r3
10006788:	b0c00015 	stw	r3,0(r22)
1000678c:	8026d43a 	srli	r19,r16,16
10006790:	b5800104 	addi	r22,r22,4
10006794:	ad3fe836 	bltu	r21,r20,10006738 <__alt_data_end+0xf8006738>
10006798:	d8c00017 	ldw	r3,0(sp)
1000679c:	14c00115 	stw	r19,4(r2)
100067a0:	1c800017 	ldw	r18,0(r3)
100067a4:	9024d43a 	srli	r18,r18,16
100067a8:	90002226 	beq	r18,zero,10006834 <__multiply+0x1f0>
100067ac:	d8c00117 	ldw	r3,4(sp)
100067b0:	dd800417 	ldw	r22,16(sp)
100067b4:	002f883a 	mov	r23,zero
100067b8:	1f000017 	ldw	fp,0(r3)
100067bc:	1823883a 	mov	r17,r3
100067c0:	182b883a 	mov	r21,r3
100067c4:	e021883a 	mov	r16,fp
100067c8:	00000106 	br	100067d0 <__multiply+0x18c>
100067cc:	982b883a 	mov	r21,r19
100067d0:	b100000b 	ldhu	r4,0(r22)
100067d4:	8020d43a 	srli	r16,r16,16
100067d8:	900b883a 	mov	r5,r18
100067dc:	000097c0 	call	1000097c <__mulsi3>
100067e0:	1405883a 	add	r2,r2,r16
100067e4:	15ef883a 	add	r23,r2,r23
100067e8:	b804943a 	slli	r2,r23,16
100067ec:	e0ffffcc 	andi	r3,fp,65535
100067f0:	8c400104 	addi	r17,r17,4
100067f4:	10c6b03a 	or	r3,r2,r3
100067f8:	88ffff15 	stw	r3,-4(r17)
100067fc:	b5800104 	addi	r22,r22,4
10006800:	b13fff17 	ldw	r4,-4(r22)
10006804:	acc00104 	addi	r19,r21,4
10006808:	900b883a 	mov	r5,r18
1000680c:	2008d43a 	srli	r4,r4,16
10006810:	9c000017 	ldw	r16,0(r19)
10006814:	000097c0 	call	1000097c <__mulsi3>
10006818:	b806d43a 	srli	r3,r23,16
1000681c:	813fffcc 	andi	r4,r16,65535
10006820:	1105883a 	add	r2,r2,r4
10006824:	10f9883a 	add	fp,r2,r3
10006828:	e02ed43a 	srli	r23,fp,16
1000682c:	b53fe736 	bltu	r22,r20,100067cc <__alt_data_end+0xf80067cc>
10006830:	af000115 	stw	fp,4(r21)
10006834:	d8c00017 	ldw	r3,0(sp)
10006838:	d9000517 	ldw	r4,20(sp)
1000683c:	18c00104 	addi	r3,r3,4
10006840:	d8c00015 	stw	r3,0(sp)
10006844:	d8c00117 	ldw	r3,4(sp)
10006848:	18c00104 	addi	r3,r3,4
1000684c:	d8c00115 	stw	r3,4(sp)
10006850:	d8c00017 	ldw	r3,0(sp)
10006854:	193fb136 	bltu	r3,r4,1000671c <__alt_data_end+0xf800671c>
10006858:	d8c00217 	ldw	r3,8(sp)
1000685c:	00c00c0e 	bge	zero,r3,10006890 <__multiply+0x24c>
10006860:	d8c00317 	ldw	r3,12(sp)
10006864:	18bfff17 	ldw	r2,-4(r3)
10006868:	1d7fff04 	addi	r21,r3,-4
1000686c:	10000326 	beq	r2,zero,1000687c <__multiply+0x238>
10006870:	00000706 	br	10006890 <__multiply+0x24c>
10006874:	a8800017 	ldw	r2,0(r21)
10006878:	1000051e 	bne	r2,zero,10006890 <__multiply+0x24c>
1000687c:	d8c00217 	ldw	r3,8(sp)
10006880:	ad7fff04 	addi	r21,r21,-4
10006884:	18ffffc4 	addi	r3,r3,-1
10006888:	d8c00215 	stw	r3,8(sp)
1000688c:	183ff91e 	bne	r3,zero,10006874 <__alt_data_end+0xf8006874>
10006890:	d8c00617 	ldw	r3,24(sp)
10006894:	d9000217 	ldw	r4,8(sp)
10006898:	1805883a 	mov	r2,r3
1000689c:	19000415 	stw	r4,16(r3)
100068a0:	dfc01017 	ldw	ra,64(sp)
100068a4:	df000f17 	ldw	fp,60(sp)
100068a8:	ddc00e17 	ldw	r23,56(sp)
100068ac:	dd800d17 	ldw	r22,52(sp)
100068b0:	dd400c17 	ldw	r21,48(sp)
100068b4:	dd000b17 	ldw	r20,44(sp)
100068b8:	dcc00a17 	ldw	r19,40(sp)
100068bc:	dc800917 	ldw	r18,36(sp)
100068c0:	dc400817 	ldw	r17,32(sp)
100068c4:	dc000717 	ldw	r16,28(sp)
100068c8:	dec01104 	addi	sp,sp,68
100068cc:	f800283a 	ret

100068d0 <__pow5mult>:
100068d0:	defffa04 	addi	sp,sp,-24
100068d4:	dcc00315 	stw	r19,12(sp)
100068d8:	dc000015 	stw	r16,0(sp)
100068dc:	dfc00515 	stw	ra,20(sp)
100068e0:	dd000415 	stw	r20,16(sp)
100068e4:	dc800215 	stw	r18,8(sp)
100068e8:	dc400115 	stw	r17,4(sp)
100068ec:	308000cc 	andi	r2,r6,3
100068f0:	3021883a 	mov	r16,r6
100068f4:	2027883a 	mov	r19,r4
100068f8:	10002f1e 	bne	r2,zero,100069b8 <__pow5mult+0xe8>
100068fc:	2825883a 	mov	r18,r5
10006900:	8021d0ba 	srai	r16,r16,2
10006904:	80001a26 	beq	r16,zero,10006970 <__pow5mult+0xa0>
10006908:	9c401217 	ldw	r17,72(r19)
1000690c:	8800061e 	bne	r17,zero,10006928 <__pow5mult+0x58>
10006910:	00003406 	br	100069e4 <__pow5mult+0x114>
10006914:	8021d07a 	srai	r16,r16,1
10006918:	80001526 	beq	r16,zero,10006970 <__pow5mult+0xa0>
1000691c:	88800017 	ldw	r2,0(r17)
10006920:	10001c26 	beq	r2,zero,10006994 <__pow5mult+0xc4>
10006924:	1023883a 	mov	r17,r2
10006928:	8080004c 	andi	r2,r16,1
1000692c:	103ff926 	beq	r2,zero,10006914 <__alt_data_end+0xf8006914>
10006930:	880d883a 	mov	r6,r17
10006934:	900b883a 	mov	r5,r18
10006938:	9809883a 	mov	r4,r19
1000693c:	00066440 	call	10006644 <__multiply>
10006940:	90001b26 	beq	r18,zero,100069b0 <__pow5mult+0xe0>
10006944:	91000117 	ldw	r4,4(r18)
10006948:	98c01317 	ldw	r3,76(r19)
1000694c:	8021d07a 	srai	r16,r16,1
10006950:	2109883a 	add	r4,r4,r4
10006954:	2109883a 	add	r4,r4,r4
10006958:	1907883a 	add	r3,r3,r4
1000695c:	19000017 	ldw	r4,0(r3)
10006960:	91000015 	stw	r4,0(r18)
10006964:	1c800015 	stw	r18,0(r3)
10006968:	1025883a 	mov	r18,r2
1000696c:	803feb1e 	bne	r16,zero,1000691c <__alt_data_end+0xf800691c>
10006970:	9005883a 	mov	r2,r18
10006974:	dfc00517 	ldw	ra,20(sp)
10006978:	dd000417 	ldw	r20,16(sp)
1000697c:	dcc00317 	ldw	r19,12(sp)
10006980:	dc800217 	ldw	r18,8(sp)
10006984:	dc400117 	ldw	r17,4(sp)
10006988:	dc000017 	ldw	r16,0(sp)
1000698c:	dec00604 	addi	sp,sp,24
10006990:	f800283a 	ret
10006994:	880d883a 	mov	r6,r17
10006998:	880b883a 	mov	r5,r17
1000699c:	9809883a 	mov	r4,r19
100069a0:	00066440 	call	10006644 <__multiply>
100069a4:	88800015 	stw	r2,0(r17)
100069a8:	10000015 	stw	zero,0(r2)
100069ac:	003fdd06 	br	10006924 <__alt_data_end+0xf8006924>
100069b0:	1025883a 	mov	r18,r2
100069b4:	003fd706 	br	10006914 <__alt_data_end+0xf8006914>
100069b8:	10bfffc4 	addi	r2,r2,-1
100069bc:	1085883a 	add	r2,r2,r2
100069c0:	00c40074 	movhi	r3,4097
100069c4:	18c06a04 	addi	r3,r3,424
100069c8:	1085883a 	add	r2,r2,r2
100069cc:	1885883a 	add	r2,r3,r2
100069d0:	11800017 	ldw	r6,0(r2)
100069d4:	000f883a 	mov	r7,zero
100069d8:	00062a40 	call	100062a4 <__multadd>
100069dc:	1025883a 	mov	r18,r2
100069e0:	003fc706 	br	10006900 <__alt_data_end+0xf8006900>
100069e4:	05000044 	movi	r20,1
100069e8:	a00b883a 	mov	r5,r20
100069ec:	9809883a 	mov	r4,r19
100069f0:	00061d40 	call	100061d4 <_Balloc>
100069f4:	1023883a 	mov	r17,r2
100069f8:	00809c44 	movi	r2,625
100069fc:	88800515 	stw	r2,20(r17)
10006a00:	8d000415 	stw	r20,16(r17)
10006a04:	9c401215 	stw	r17,72(r19)
10006a08:	88000015 	stw	zero,0(r17)
10006a0c:	003fc606 	br	10006928 <__alt_data_end+0xf8006928>

10006a10 <__lshift>:
10006a10:	defff904 	addi	sp,sp,-28
10006a14:	dd400515 	stw	r21,20(sp)
10006a18:	dcc00315 	stw	r19,12(sp)
10006a1c:	302bd17a 	srai	r21,r6,5
10006a20:	2cc00417 	ldw	r19,16(r5)
10006a24:	28800217 	ldw	r2,8(r5)
10006a28:	dd000415 	stw	r20,16(sp)
10006a2c:	ace7883a 	add	r19,r21,r19
10006a30:	dc800215 	stw	r18,8(sp)
10006a34:	dc400115 	stw	r17,4(sp)
10006a38:	dc000015 	stw	r16,0(sp)
10006a3c:	dfc00615 	stw	ra,24(sp)
10006a40:	9c000044 	addi	r16,r19,1
10006a44:	2823883a 	mov	r17,r5
10006a48:	3029883a 	mov	r20,r6
10006a4c:	2025883a 	mov	r18,r4
10006a50:	29400117 	ldw	r5,4(r5)
10006a54:	1400030e 	bge	r2,r16,10006a64 <__lshift+0x54>
10006a58:	1085883a 	add	r2,r2,r2
10006a5c:	29400044 	addi	r5,r5,1
10006a60:	143ffd16 	blt	r2,r16,10006a58 <__alt_data_end+0xf8006a58>
10006a64:	9009883a 	mov	r4,r18
10006a68:	00061d40 	call	100061d4 <_Balloc>
10006a6c:	10c00504 	addi	r3,r2,20
10006a70:	0540070e 	bge	zero,r21,10006a90 <__lshift+0x80>
10006a74:	ad6b883a 	add	r21,r21,r21
10006a78:	ad6b883a 	add	r21,r21,r21
10006a7c:	1809883a 	mov	r4,r3
10006a80:	1d47883a 	add	r3,r3,r21
10006a84:	20000015 	stw	zero,0(r4)
10006a88:	21000104 	addi	r4,r4,4
10006a8c:	193ffd1e 	bne	r3,r4,10006a84 <__alt_data_end+0xf8006a84>
10006a90:	8a000417 	ldw	r8,16(r17)
10006a94:	89000504 	addi	r4,r17,20
10006a98:	a18007cc 	andi	r6,r20,31
10006a9c:	4211883a 	add	r8,r8,r8
10006aa0:	4211883a 	add	r8,r8,r8
10006aa4:	2211883a 	add	r8,r4,r8
10006aa8:	30002326 	beq	r6,zero,10006b38 <__lshift+0x128>
10006aac:	02400804 	movi	r9,32
10006ab0:	4993c83a 	sub	r9,r9,r6
10006ab4:	000b883a 	mov	r5,zero
10006ab8:	21c00017 	ldw	r7,0(r4)
10006abc:	1815883a 	mov	r10,r3
10006ac0:	18c00104 	addi	r3,r3,4
10006ac4:	398e983a 	sll	r7,r7,r6
10006ac8:	21000104 	addi	r4,r4,4
10006acc:	394ab03a 	or	r5,r7,r5
10006ad0:	197fff15 	stw	r5,-4(r3)
10006ad4:	217fff17 	ldw	r5,-4(r4)
10006ad8:	2a4ad83a 	srl	r5,r5,r9
10006adc:	223ff636 	bltu	r4,r8,10006ab8 <__alt_data_end+0xf8006ab8>
10006ae0:	51400115 	stw	r5,4(r10)
10006ae4:	28001a1e 	bne	r5,zero,10006b50 <__lshift+0x140>
10006ae8:	843fffc4 	addi	r16,r16,-1
10006aec:	14000415 	stw	r16,16(r2)
10006af0:	88000826 	beq	r17,zero,10006b14 <__lshift+0x104>
10006af4:	89000117 	ldw	r4,4(r17)
10006af8:	90c01317 	ldw	r3,76(r18)
10006afc:	2109883a 	add	r4,r4,r4
10006b00:	2109883a 	add	r4,r4,r4
10006b04:	1907883a 	add	r3,r3,r4
10006b08:	19000017 	ldw	r4,0(r3)
10006b0c:	89000015 	stw	r4,0(r17)
10006b10:	1c400015 	stw	r17,0(r3)
10006b14:	dfc00617 	ldw	ra,24(sp)
10006b18:	dd400517 	ldw	r21,20(sp)
10006b1c:	dd000417 	ldw	r20,16(sp)
10006b20:	dcc00317 	ldw	r19,12(sp)
10006b24:	dc800217 	ldw	r18,8(sp)
10006b28:	dc400117 	ldw	r17,4(sp)
10006b2c:	dc000017 	ldw	r16,0(sp)
10006b30:	dec00704 	addi	sp,sp,28
10006b34:	f800283a 	ret
10006b38:	21400017 	ldw	r5,0(r4)
10006b3c:	18c00104 	addi	r3,r3,4
10006b40:	21000104 	addi	r4,r4,4
10006b44:	197fff15 	stw	r5,-4(r3)
10006b48:	223ffb36 	bltu	r4,r8,10006b38 <__alt_data_end+0xf8006b38>
10006b4c:	003fe606 	br	10006ae8 <__alt_data_end+0xf8006ae8>
10006b50:	9c000084 	addi	r16,r19,2
10006b54:	003fe406 	br	10006ae8 <__alt_data_end+0xf8006ae8>

10006b58 <__mcmp>:
10006b58:	20800417 	ldw	r2,16(r4)
10006b5c:	28c00417 	ldw	r3,16(r5)
10006b60:	10c5c83a 	sub	r2,r2,r3
10006b64:	1000111e 	bne	r2,zero,10006bac <__mcmp+0x54>
10006b68:	18c7883a 	add	r3,r3,r3
10006b6c:	18c7883a 	add	r3,r3,r3
10006b70:	21000504 	addi	r4,r4,20
10006b74:	29400504 	addi	r5,r5,20
10006b78:	20c5883a 	add	r2,r4,r3
10006b7c:	28cb883a 	add	r5,r5,r3
10006b80:	00000106 	br	10006b88 <__mcmp+0x30>
10006b84:	20800a2e 	bgeu	r4,r2,10006bb0 <__mcmp+0x58>
10006b88:	10bfff04 	addi	r2,r2,-4
10006b8c:	297fff04 	addi	r5,r5,-4
10006b90:	11800017 	ldw	r6,0(r2)
10006b94:	28c00017 	ldw	r3,0(r5)
10006b98:	30fffa26 	beq	r6,r3,10006b84 <__alt_data_end+0xf8006b84>
10006b9c:	30c00236 	bltu	r6,r3,10006ba8 <__mcmp+0x50>
10006ba0:	00800044 	movi	r2,1
10006ba4:	f800283a 	ret
10006ba8:	00bfffc4 	movi	r2,-1
10006bac:	f800283a 	ret
10006bb0:	0005883a 	mov	r2,zero
10006bb4:	f800283a 	ret

10006bb8 <__mdiff>:
10006bb8:	28c00417 	ldw	r3,16(r5)
10006bbc:	30800417 	ldw	r2,16(r6)
10006bc0:	defffa04 	addi	sp,sp,-24
10006bc4:	dcc00315 	stw	r19,12(sp)
10006bc8:	dc800215 	stw	r18,8(sp)
10006bcc:	dfc00515 	stw	ra,20(sp)
10006bd0:	dd000415 	stw	r20,16(sp)
10006bd4:	dc400115 	stw	r17,4(sp)
10006bd8:	dc000015 	stw	r16,0(sp)
10006bdc:	1887c83a 	sub	r3,r3,r2
10006be0:	2825883a 	mov	r18,r5
10006be4:	3027883a 	mov	r19,r6
10006be8:	1800141e 	bne	r3,zero,10006c3c <__mdiff+0x84>
10006bec:	1085883a 	add	r2,r2,r2
10006bf0:	1085883a 	add	r2,r2,r2
10006bf4:	2a000504 	addi	r8,r5,20
10006bf8:	34000504 	addi	r16,r6,20
10006bfc:	4087883a 	add	r3,r8,r2
10006c00:	8085883a 	add	r2,r16,r2
10006c04:	00000106 	br	10006c0c <__mdiff+0x54>
10006c08:	40c0592e 	bgeu	r8,r3,10006d70 <__mdiff+0x1b8>
10006c0c:	18ffff04 	addi	r3,r3,-4
10006c10:	10bfff04 	addi	r2,r2,-4
10006c14:	19c00017 	ldw	r7,0(r3)
10006c18:	11400017 	ldw	r5,0(r2)
10006c1c:	397ffa26 	beq	r7,r5,10006c08 <__alt_data_end+0xf8006c08>
10006c20:	3940592e 	bgeu	r7,r5,10006d88 <__mdiff+0x1d0>
10006c24:	9005883a 	mov	r2,r18
10006c28:	4023883a 	mov	r17,r8
10006c2c:	9825883a 	mov	r18,r19
10006c30:	05000044 	movi	r20,1
10006c34:	1027883a 	mov	r19,r2
10006c38:	00000406 	br	10006c4c <__mdiff+0x94>
10006c3c:	18005616 	blt	r3,zero,10006d98 <__mdiff+0x1e0>
10006c40:	34400504 	addi	r17,r6,20
10006c44:	2c000504 	addi	r16,r5,20
10006c48:	0029883a 	mov	r20,zero
10006c4c:	91400117 	ldw	r5,4(r18)
10006c50:	00061d40 	call	100061d4 <_Balloc>
10006c54:	92400417 	ldw	r9,16(r18)
10006c58:	9b000417 	ldw	r12,16(r19)
10006c5c:	12c00504 	addi	r11,r2,20
10006c60:	4a51883a 	add	r8,r9,r9
10006c64:	6319883a 	add	r12,r12,r12
10006c68:	4211883a 	add	r8,r8,r8
10006c6c:	6319883a 	add	r12,r12,r12
10006c70:	15000315 	stw	r20,12(r2)
10006c74:	8211883a 	add	r8,r16,r8
10006c78:	8b19883a 	add	r12,r17,r12
10006c7c:	0007883a 	mov	r3,zero
10006c80:	81400017 	ldw	r5,0(r16)
10006c84:	89c00017 	ldw	r7,0(r17)
10006c88:	59800104 	addi	r6,r11,4
10006c8c:	293fffcc 	andi	r4,r5,65535
10006c90:	20c7883a 	add	r3,r4,r3
10006c94:	393fffcc 	andi	r4,r7,65535
10006c98:	1909c83a 	sub	r4,r3,r4
10006c9c:	280ad43a 	srli	r5,r5,16
10006ca0:	380ed43a 	srli	r7,r7,16
10006ca4:	2007d43a 	srai	r3,r4,16
10006ca8:	213fffcc 	andi	r4,r4,65535
10006cac:	29cbc83a 	sub	r5,r5,r7
10006cb0:	28c7883a 	add	r3,r5,r3
10006cb4:	180a943a 	slli	r5,r3,16
10006cb8:	8c400104 	addi	r17,r17,4
10006cbc:	84000104 	addi	r16,r16,4
10006cc0:	2908b03a 	or	r4,r5,r4
10006cc4:	59000015 	stw	r4,0(r11)
10006cc8:	1807d43a 	srai	r3,r3,16
10006ccc:	3015883a 	mov	r10,r6
10006cd0:	3017883a 	mov	r11,r6
10006cd4:	8b3fea36 	bltu	r17,r12,10006c80 <__alt_data_end+0xf8006c80>
10006cd8:	8200162e 	bgeu	r16,r8,10006d34 <__mdiff+0x17c>
10006cdc:	8017883a 	mov	r11,r16
10006ce0:	59400017 	ldw	r5,0(r11)
10006ce4:	31800104 	addi	r6,r6,4
10006ce8:	5ac00104 	addi	r11,r11,4
10006cec:	293fffcc 	andi	r4,r5,65535
10006cf0:	20c7883a 	add	r3,r4,r3
10006cf4:	280ed43a 	srli	r7,r5,16
10006cf8:	180bd43a 	srai	r5,r3,16
10006cfc:	193fffcc 	andi	r4,r3,65535
10006d00:	3947883a 	add	r3,r7,r5
10006d04:	180a943a 	slli	r5,r3,16
10006d08:	1807d43a 	srai	r3,r3,16
10006d0c:	2908b03a 	or	r4,r5,r4
10006d10:	313fff15 	stw	r4,-4(r6)
10006d14:	5a3ff236 	bltu	r11,r8,10006ce0 <__alt_data_end+0xf8006ce0>
10006d18:	0406303a 	nor	r3,zero,r16
10006d1c:	1a07883a 	add	r3,r3,r8
10006d20:	1806d0ba 	srli	r3,r3,2
10006d24:	18c00044 	addi	r3,r3,1
10006d28:	18c7883a 	add	r3,r3,r3
10006d2c:	18c7883a 	add	r3,r3,r3
10006d30:	50d5883a 	add	r10,r10,r3
10006d34:	50ffff04 	addi	r3,r10,-4
10006d38:	2000041e 	bne	r4,zero,10006d4c <__mdiff+0x194>
10006d3c:	18ffff04 	addi	r3,r3,-4
10006d40:	19000017 	ldw	r4,0(r3)
10006d44:	4a7fffc4 	addi	r9,r9,-1
10006d48:	203ffc26 	beq	r4,zero,10006d3c <__alt_data_end+0xf8006d3c>
10006d4c:	12400415 	stw	r9,16(r2)
10006d50:	dfc00517 	ldw	ra,20(sp)
10006d54:	dd000417 	ldw	r20,16(sp)
10006d58:	dcc00317 	ldw	r19,12(sp)
10006d5c:	dc800217 	ldw	r18,8(sp)
10006d60:	dc400117 	ldw	r17,4(sp)
10006d64:	dc000017 	ldw	r16,0(sp)
10006d68:	dec00604 	addi	sp,sp,24
10006d6c:	f800283a 	ret
10006d70:	000b883a 	mov	r5,zero
10006d74:	00061d40 	call	100061d4 <_Balloc>
10006d78:	00c00044 	movi	r3,1
10006d7c:	10c00415 	stw	r3,16(r2)
10006d80:	10000515 	stw	zero,20(r2)
10006d84:	003ff206 	br	10006d50 <__alt_data_end+0xf8006d50>
10006d88:	8023883a 	mov	r17,r16
10006d8c:	0029883a 	mov	r20,zero
10006d90:	4021883a 	mov	r16,r8
10006d94:	003fad06 	br	10006c4c <__alt_data_end+0xf8006c4c>
10006d98:	9005883a 	mov	r2,r18
10006d9c:	94400504 	addi	r17,r18,20
10006da0:	9c000504 	addi	r16,r19,20
10006da4:	9825883a 	mov	r18,r19
10006da8:	05000044 	movi	r20,1
10006dac:	1027883a 	mov	r19,r2
10006db0:	003fa606 	br	10006c4c <__alt_data_end+0xf8006c4c>

10006db4 <__ulp>:
10006db4:	295ffc2c 	andhi	r5,r5,32752
10006db8:	00bf3034 	movhi	r2,64704
10006dbc:	2887883a 	add	r3,r5,r2
10006dc0:	00c0020e 	bge	zero,r3,10006dcc <__ulp+0x18>
10006dc4:	0005883a 	mov	r2,zero
10006dc8:	f800283a 	ret
10006dcc:	00c7c83a 	sub	r3,zero,r3
10006dd0:	1807d53a 	srai	r3,r3,20
10006dd4:	008004c4 	movi	r2,19
10006dd8:	10c00b0e 	bge	r2,r3,10006e08 <__ulp+0x54>
10006ddc:	18bffb04 	addi	r2,r3,-20
10006de0:	01000784 	movi	r4,30
10006de4:	0007883a 	mov	r3,zero
10006de8:	20800516 	blt	r4,r2,10006e00 <__ulp+0x4c>
10006dec:	010007c4 	movi	r4,31
10006df0:	2089c83a 	sub	r4,r4,r2
10006df4:	00800044 	movi	r2,1
10006df8:	1104983a 	sll	r2,r2,r4
10006dfc:	f800283a 	ret
10006e00:	00800044 	movi	r2,1
10006e04:	f800283a 	ret
10006e08:	01400234 	movhi	r5,8
10006e0c:	28c7d83a 	sra	r3,r5,r3
10006e10:	0005883a 	mov	r2,zero
10006e14:	f800283a 	ret

10006e18 <__b2d>:
10006e18:	defffa04 	addi	sp,sp,-24
10006e1c:	dc000015 	stw	r16,0(sp)
10006e20:	24000417 	ldw	r16,16(r4)
10006e24:	dc400115 	stw	r17,4(sp)
10006e28:	24400504 	addi	r17,r4,20
10006e2c:	8421883a 	add	r16,r16,r16
10006e30:	8421883a 	add	r16,r16,r16
10006e34:	8c21883a 	add	r16,r17,r16
10006e38:	dc800215 	stw	r18,8(sp)
10006e3c:	84bfff17 	ldw	r18,-4(r16)
10006e40:	dd000415 	stw	r20,16(sp)
10006e44:	dcc00315 	stw	r19,12(sp)
10006e48:	9009883a 	mov	r4,r18
10006e4c:	2829883a 	mov	r20,r5
10006e50:	dfc00515 	stw	ra,20(sp)
10006e54:	00064f00 	call	100064f0 <__hi0bits>
10006e58:	00c00804 	movi	r3,32
10006e5c:	1889c83a 	sub	r4,r3,r2
10006e60:	a1000015 	stw	r4,0(r20)
10006e64:	01000284 	movi	r4,10
10006e68:	84ffff04 	addi	r19,r16,-4
10006e6c:	20801216 	blt	r4,r2,10006eb8 <__b2d+0xa0>
10006e70:	018002c4 	movi	r6,11
10006e74:	308dc83a 	sub	r6,r6,r2
10006e78:	9186d83a 	srl	r3,r18,r6
10006e7c:	18cffc34 	orhi	r3,r3,16368
10006e80:	8cc0212e 	bgeu	r17,r19,10006f08 <__b2d+0xf0>
10006e84:	813ffe17 	ldw	r4,-8(r16)
10006e88:	218cd83a 	srl	r6,r4,r6
10006e8c:	10800544 	addi	r2,r2,21
10006e90:	9084983a 	sll	r2,r18,r2
10006e94:	1184b03a 	or	r2,r2,r6
10006e98:	dfc00517 	ldw	ra,20(sp)
10006e9c:	dd000417 	ldw	r20,16(sp)
10006ea0:	dcc00317 	ldw	r19,12(sp)
10006ea4:	dc800217 	ldw	r18,8(sp)
10006ea8:	dc400117 	ldw	r17,4(sp)
10006eac:	dc000017 	ldw	r16,0(sp)
10006eb0:	dec00604 	addi	sp,sp,24
10006eb4:	f800283a 	ret
10006eb8:	8cc00f2e 	bgeu	r17,r19,10006ef8 <__b2d+0xe0>
10006ebc:	117ffd44 	addi	r5,r2,-11
10006ec0:	80bffe17 	ldw	r2,-8(r16)
10006ec4:	28000e26 	beq	r5,zero,10006f00 <__b2d+0xe8>
10006ec8:	1949c83a 	sub	r4,r3,r5
10006ecc:	9164983a 	sll	r18,r18,r5
10006ed0:	1106d83a 	srl	r3,r2,r4
10006ed4:	81bffe04 	addi	r6,r16,-8
10006ed8:	948ffc34 	orhi	r18,r18,16368
10006edc:	90c6b03a 	or	r3,r18,r3
10006ee0:	89800e2e 	bgeu	r17,r6,10006f1c <__b2d+0x104>
10006ee4:	81bffd17 	ldw	r6,-12(r16)
10006ee8:	1144983a 	sll	r2,r2,r5
10006eec:	310ad83a 	srl	r5,r6,r4
10006ef0:	2884b03a 	or	r2,r5,r2
10006ef4:	003fe806 	br	10006e98 <__alt_data_end+0xf8006e98>
10006ef8:	10bffd44 	addi	r2,r2,-11
10006efc:	1000041e 	bne	r2,zero,10006f10 <__b2d+0xf8>
10006f00:	90cffc34 	orhi	r3,r18,16368
10006f04:	003fe406 	br	10006e98 <__alt_data_end+0xf8006e98>
10006f08:	000d883a 	mov	r6,zero
10006f0c:	003fdf06 	br	10006e8c <__alt_data_end+0xf8006e8c>
10006f10:	90a4983a 	sll	r18,r18,r2
10006f14:	0005883a 	mov	r2,zero
10006f18:	003ff906 	br	10006f00 <__alt_data_end+0xf8006f00>
10006f1c:	1144983a 	sll	r2,r2,r5
10006f20:	003fdd06 	br	10006e98 <__alt_data_end+0xf8006e98>

10006f24 <__d2b>:
10006f24:	defff804 	addi	sp,sp,-32
10006f28:	dc000215 	stw	r16,8(sp)
10006f2c:	3021883a 	mov	r16,r6
10006f30:	dc400315 	stw	r17,12(sp)
10006f34:	8022907a 	slli	r17,r16,1
10006f38:	dd000615 	stw	r20,24(sp)
10006f3c:	2829883a 	mov	r20,r5
10006f40:	01400044 	movi	r5,1
10006f44:	dcc00515 	stw	r19,20(sp)
10006f48:	dc800415 	stw	r18,16(sp)
10006f4c:	dfc00715 	stw	ra,28(sp)
10006f50:	3825883a 	mov	r18,r7
10006f54:	8822d57a 	srli	r17,r17,21
10006f58:	00061d40 	call	100061d4 <_Balloc>
10006f5c:	1027883a 	mov	r19,r2
10006f60:	00800434 	movhi	r2,16
10006f64:	10bfffc4 	addi	r2,r2,-1
10006f68:	808c703a 	and	r6,r16,r2
10006f6c:	88000126 	beq	r17,zero,10006f74 <__d2b+0x50>
10006f70:	31800434 	orhi	r6,r6,16
10006f74:	d9800015 	stw	r6,0(sp)
10006f78:	a0002426 	beq	r20,zero,1000700c <__d2b+0xe8>
10006f7c:	d9000104 	addi	r4,sp,4
10006f80:	dd000115 	stw	r20,4(sp)
10006f84:	00065580 	call	10006558 <__lo0bits>
10006f88:	d8c00017 	ldw	r3,0(sp)
10006f8c:	10002f1e 	bne	r2,zero,1000704c <__d2b+0x128>
10006f90:	d9000117 	ldw	r4,4(sp)
10006f94:	99000515 	stw	r4,20(r19)
10006f98:	1821003a 	cmpeq	r16,r3,zero
10006f9c:	01000084 	movi	r4,2
10006fa0:	2421c83a 	sub	r16,r4,r16
10006fa4:	98c00615 	stw	r3,24(r19)
10006fa8:	9c000415 	stw	r16,16(r19)
10006fac:	88001f1e 	bne	r17,zero,1000702c <__d2b+0x108>
10006fb0:	10bef384 	addi	r2,r2,-1074
10006fb4:	90800015 	stw	r2,0(r18)
10006fb8:	00900034 	movhi	r2,16384
10006fbc:	10bfffc4 	addi	r2,r2,-1
10006fc0:	8085883a 	add	r2,r16,r2
10006fc4:	1085883a 	add	r2,r2,r2
10006fc8:	1085883a 	add	r2,r2,r2
10006fcc:	9885883a 	add	r2,r19,r2
10006fd0:	11000517 	ldw	r4,20(r2)
10006fd4:	8020917a 	slli	r16,r16,5
10006fd8:	00064f00 	call	100064f0 <__hi0bits>
10006fdc:	d8c00817 	ldw	r3,32(sp)
10006fe0:	8085c83a 	sub	r2,r16,r2
10006fe4:	18800015 	stw	r2,0(r3)
10006fe8:	9805883a 	mov	r2,r19
10006fec:	dfc00717 	ldw	ra,28(sp)
10006ff0:	dd000617 	ldw	r20,24(sp)
10006ff4:	dcc00517 	ldw	r19,20(sp)
10006ff8:	dc800417 	ldw	r18,16(sp)
10006ffc:	dc400317 	ldw	r17,12(sp)
10007000:	dc000217 	ldw	r16,8(sp)
10007004:	dec00804 	addi	sp,sp,32
10007008:	f800283a 	ret
1000700c:	d809883a 	mov	r4,sp
10007010:	00065580 	call	10006558 <__lo0bits>
10007014:	d8c00017 	ldw	r3,0(sp)
10007018:	04000044 	movi	r16,1
1000701c:	9c000415 	stw	r16,16(r19)
10007020:	98c00515 	stw	r3,20(r19)
10007024:	10800804 	addi	r2,r2,32
10007028:	883fe126 	beq	r17,zero,10006fb0 <__alt_data_end+0xf8006fb0>
1000702c:	00c00d44 	movi	r3,53
10007030:	8c7ef344 	addi	r17,r17,-1075
10007034:	88a3883a 	add	r17,r17,r2
10007038:	1885c83a 	sub	r2,r3,r2
1000703c:	d8c00817 	ldw	r3,32(sp)
10007040:	94400015 	stw	r17,0(r18)
10007044:	18800015 	stw	r2,0(r3)
10007048:	003fe706 	br	10006fe8 <__alt_data_end+0xf8006fe8>
1000704c:	01000804 	movi	r4,32
10007050:	2089c83a 	sub	r4,r4,r2
10007054:	1908983a 	sll	r4,r3,r4
10007058:	d9400117 	ldw	r5,4(sp)
1000705c:	1886d83a 	srl	r3,r3,r2
10007060:	2148b03a 	or	r4,r4,r5
10007064:	99000515 	stw	r4,20(r19)
10007068:	d8c00015 	stw	r3,0(sp)
1000706c:	003fca06 	br	10006f98 <__alt_data_end+0xf8006f98>

10007070 <__ratio>:
10007070:	defff904 	addi	sp,sp,-28
10007074:	dc400315 	stw	r17,12(sp)
10007078:	2823883a 	mov	r17,r5
1000707c:	d9400104 	addi	r5,sp,4
10007080:	dfc00615 	stw	ra,24(sp)
10007084:	dcc00515 	stw	r19,20(sp)
10007088:	dc800415 	stw	r18,16(sp)
1000708c:	2027883a 	mov	r19,r4
10007090:	dc000215 	stw	r16,8(sp)
10007094:	0006e180 	call	10006e18 <__b2d>
10007098:	d80b883a 	mov	r5,sp
1000709c:	8809883a 	mov	r4,r17
100070a0:	1025883a 	mov	r18,r2
100070a4:	1821883a 	mov	r16,r3
100070a8:	0006e180 	call	10006e18 <__b2d>
100070ac:	8a000417 	ldw	r8,16(r17)
100070b0:	99000417 	ldw	r4,16(r19)
100070b4:	d9400117 	ldw	r5,4(sp)
100070b8:	2209c83a 	sub	r4,r4,r8
100070bc:	2010917a 	slli	r8,r4,5
100070c0:	d9000017 	ldw	r4,0(sp)
100070c4:	2909c83a 	sub	r4,r5,r4
100070c8:	4109883a 	add	r4,r8,r4
100070cc:	01000e0e 	bge	zero,r4,10007108 <__ratio+0x98>
100070d0:	2008953a 	slli	r4,r4,20
100070d4:	2421883a 	add	r16,r4,r16
100070d8:	100d883a 	mov	r6,r2
100070dc:	180f883a 	mov	r7,r3
100070e0:	9009883a 	mov	r4,r18
100070e4:	800b883a 	mov	r5,r16
100070e8:	000b7f00 	call	1000b7f0 <__divdf3>
100070ec:	dfc00617 	ldw	ra,24(sp)
100070f0:	dcc00517 	ldw	r19,20(sp)
100070f4:	dc800417 	ldw	r18,16(sp)
100070f8:	dc400317 	ldw	r17,12(sp)
100070fc:	dc000217 	ldw	r16,8(sp)
10007100:	dec00704 	addi	sp,sp,28
10007104:	f800283a 	ret
10007108:	2008953a 	slli	r4,r4,20
1000710c:	1907c83a 	sub	r3,r3,r4
10007110:	003ff106 	br	100070d8 <__alt_data_end+0xf80070d8>

10007114 <_mprec_log10>:
10007114:	defffe04 	addi	sp,sp,-8
10007118:	dc000015 	stw	r16,0(sp)
1000711c:	dfc00115 	stw	ra,4(sp)
10007120:	008005c4 	movi	r2,23
10007124:	2021883a 	mov	r16,r4
10007128:	11000d0e 	bge	r2,r4,10007160 <_mprec_log10+0x4c>
1000712c:	0005883a 	mov	r2,zero
10007130:	00cffc34 	movhi	r3,16368
10007134:	843fffc4 	addi	r16,r16,-1
10007138:	000d883a 	mov	r6,zero
1000713c:	01d00934 	movhi	r7,16420
10007140:	1009883a 	mov	r4,r2
10007144:	180b883a 	mov	r5,r3
10007148:	000c4180 	call	1000c418 <__muldf3>
1000714c:	803ff91e 	bne	r16,zero,10007134 <__alt_data_end+0xf8007134>
10007150:	dfc00117 	ldw	ra,4(sp)
10007154:	dc000017 	ldw	r16,0(sp)
10007158:	dec00204 	addi	sp,sp,8
1000715c:	f800283a 	ret
10007160:	202090fa 	slli	r16,r4,3
10007164:	00840074 	movhi	r2,4097
10007168:	10808104 	addi	r2,r2,516
1000716c:	1421883a 	add	r16,r2,r16
10007170:	80800017 	ldw	r2,0(r16)
10007174:	80c00117 	ldw	r3,4(r16)
10007178:	dfc00117 	ldw	ra,4(sp)
1000717c:	dc000017 	ldw	r16,0(sp)
10007180:	dec00204 	addi	sp,sp,8
10007184:	f800283a 	ret

10007188 <__copybits>:
10007188:	297fffc4 	addi	r5,r5,-1
1000718c:	280fd17a 	srai	r7,r5,5
10007190:	30c00417 	ldw	r3,16(r6)
10007194:	30800504 	addi	r2,r6,20
10007198:	39c00044 	addi	r7,r7,1
1000719c:	18c7883a 	add	r3,r3,r3
100071a0:	39cf883a 	add	r7,r7,r7
100071a4:	18c7883a 	add	r3,r3,r3
100071a8:	39cf883a 	add	r7,r7,r7
100071ac:	10c7883a 	add	r3,r2,r3
100071b0:	21cf883a 	add	r7,r4,r7
100071b4:	10c00d2e 	bgeu	r2,r3,100071ec <__copybits+0x64>
100071b8:	200b883a 	mov	r5,r4
100071bc:	12000017 	ldw	r8,0(r2)
100071c0:	29400104 	addi	r5,r5,4
100071c4:	10800104 	addi	r2,r2,4
100071c8:	2a3fff15 	stw	r8,-4(r5)
100071cc:	10fffb36 	bltu	r2,r3,100071bc <__alt_data_end+0xf80071bc>
100071d0:	1985c83a 	sub	r2,r3,r6
100071d4:	10bffac4 	addi	r2,r2,-21
100071d8:	1004d0ba 	srli	r2,r2,2
100071dc:	10800044 	addi	r2,r2,1
100071e0:	1085883a 	add	r2,r2,r2
100071e4:	1085883a 	add	r2,r2,r2
100071e8:	2089883a 	add	r4,r4,r2
100071ec:	21c0032e 	bgeu	r4,r7,100071fc <__copybits+0x74>
100071f0:	20000015 	stw	zero,0(r4)
100071f4:	21000104 	addi	r4,r4,4
100071f8:	21fffd36 	bltu	r4,r7,100071f0 <__alt_data_end+0xf80071f0>
100071fc:	f800283a 	ret

10007200 <__any_on>:
10007200:	20c00417 	ldw	r3,16(r4)
10007204:	2805d17a 	srai	r2,r5,5
10007208:	21000504 	addi	r4,r4,20
1000720c:	18800d0e 	bge	r3,r2,10007244 <__any_on+0x44>
10007210:	18c7883a 	add	r3,r3,r3
10007214:	18c7883a 	add	r3,r3,r3
10007218:	20c7883a 	add	r3,r4,r3
1000721c:	20c0192e 	bgeu	r4,r3,10007284 <__any_on+0x84>
10007220:	18bfff17 	ldw	r2,-4(r3)
10007224:	18ffff04 	addi	r3,r3,-4
10007228:	1000041e 	bne	r2,zero,1000723c <__any_on+0x3c>
1000722c:	20c0142e 	bgeu	r4,r3,10007280 <__any_on+0x80>
10007230:	18ffff04 	addi	r3,r3,-4
10007234:	19400017 	ldw	r5,0(r3)
10007238:	283ffc26 	beq	r5,zero,1000722c <__alt_data_end+0xf800722c>
1000723c:	00800044 	movi	r2,1
10007240:	f800283a 	ret
10007244:	10c00a0e 	bge	r2,r3,10007270 <__any_on+0x70>
10007248:	1085883a 	add	r2,r2,r2
1000724c:	1085883a 	add	r2,r2,r2
10007250:	294007cc 	andi	r5,r5,31
10007254:	2087883a 	add	r3,r4,r2
10007258:	283ff026 	beq	r5,zero,1000721c <__alt_data_end+0xf800721c>
1000725c:	19800017 	ldw	r6,0(r3)
10007260:	3144d83a 	srl	r2,r6,r5
10007264:	114a983a 	sll	r5,r2,r5
10007268:	317ff41e 	bne	r6,r5,1000723c <__alt_data_end+0xf800723c>
1000726c:	003feb06 	br	1000721c <__alt_data_end+0xf800721c>
10007270:	1085883a 	add	r2,r2,r2
10007274:	1085883a 	add	r2,r2,r2
10007278:	2087883a 	add	r3,r4,r2
1000727c:	003fe706 	br	1000721c <__alt_data_end+0xf800721c>
10007280:	f800283a 	ret
10007284:	0005883a 	mov	r2,zero
10007288:	f800283a 	ret

1000728c <__fpclassifyd>:
1000728c:	00a00034 	movhi	r2,32768
10007290:	10bfffc4 	addi	r2,r2,-1
10007294:	2884703a 	and	r2,r5,r2
10007298:	10000726 	beq	r2,zero,100072b8 <__fpclassifyd+0x2c>
1000729c:	00fffc34 	movhi	r3,65520
100072a0:	019ff834 	movhi	r6,32736
100072a4:	28c7883a 	add	r3,r5,r3
100072a8:	31bfffc4 	addi	r6,r6,-1
100072ac:	30c00536 	bltu	r6,r3,100072c4 <__fpclassifyd+0x38>
100072b0:	00800104 	movi	r2,4
100072b4:	f800283a 	ret
100072b8:	2000021e 	bne	r4,zero,100072c4 <__fpclassifyd+0x38>
100072bc:	00800084 	movi	r2,2
100072c0:	f800283a 	ret
100072c4:	00dffc34 	movhi	r3,32752
100072c8:	019ff834 	movhi	r6,32736
100072cc:	28cb883a 	add	r5,r5,r3
100072d0:	31bfffc4 	addi	r6,r6,-1
100072d4:	317ff62e 	bgeu	r6,r5,100072b0 <__alt_data_end+0xf80072b0>
100072d8:	01400434 	movhi	r5,16
100072dc:	297fffc4 	addi	r5,r5,-1
100072e0:	28800236 	bltu	r5,r2,100072ec <__fpclassifyd+0x60>
100072e4:	008000c4 	movi	r2,3
100072e8:	f800283a 	ret
100072ec:	10c00226 	beq	r2,r3,100072f8 <__fpclassifyd+0x6c>
100072f0:	0005883a 	mov	r2,zero
100072f4:	f800283a 	ret
100072f8:	2005003a 	cmpeq	r2,r4,zero
100072fc:	f800283a 	ret

10007300 <_sbrk_r>:
10007300:	defffd04 	addi	sp,sp,-12
10007304:	dc000015 	stw	r16,0(sp)
10007308:	04040074 	movhi	r16,4097
1000730c:	dc400115 	stw	r17,4(sp)
10007310:	840e8804 	addi	r16,r16,14880
10007314:	2023883a 	mov	r17,r4
10007318:	2809883a 	mov	r4,r5
1000731c:	dfc00215 	stw	ra,8(sp)
10007320:	80000015 	stw	zero,0(r16)
10007324:	000df900 	call	1000df90 <sbrk>
10007328:	00ffffc4 	movi	r3,-1
1000732c:	10c00526 	beq	r2,r3,10007344 <_sbrk_r+0x44>
10007330:	dfc00217 	ldw	ra,8(sp)
10007334:	dc400117 	ldw	r17,4(sp)
10007338:	dc000017 	ldw	r16,0(sp)
1000733c:	dec00304 	addi	sp,sp,12
10007340:	f800283a 	ret
10007344:	80c00017 	ldw	r3,0(r16)
10007348:	183ff926 	beq	r3,zero,10007330 <__alt_data_end+0xf8007330>
1000734c:	88c00015 	stw	r3,0(r17)
10007350:	003ff706 	br	10007330 <__alt_data_end+0xf8007330>

10007354 <__sread>:
10007354:	defffe04 	addi	sp,sp,-8
10007358:	dc000015 	stw	r16,0(sp)
1000735c:	2821883a 	mov	r16,r5
10007360:	2940038f 	ldh	r5,14(r5)
10007364:	dfc00115 	stw	ra,4(sp)
10007368:	00098cc0 	call	100098cc <_read_r>
1000736c:	10000716 	blt	r2,zero,1000738c <__sread+0x38>
10007370:	80c01417 	ldw	r3,80(r16)
10007374:	1887883a 	add	r3,r3,r2
10007378:	80c01415 	stw	r3,80(r16)
1000737c:	dfc00117 	ldw	ra,4(sp)
10007380:	dc000017 	ldw	r16,0(sp)
10007384:	dec00204 	addi	sp,sp,8
10007388:	f800283a 	ret
1000738c:	80c0030b 	ldhu	r3,12(r16)
10007390:	18fbffcc 	andi	r3,r3,61439
10007394:	80c0030d 	sth	r3,12(r16)
10007398:	dfc00117 	ldw	ra,4(sp)
1000739c:	dc000017 	ldw	r16,0(sp)
100073a0:	dec00204 	addi	sp,sp,8
100073a4:	f800283a 	ret

100073a8 <__seofread>:
100073a8:	0005883a 	mov	r2,zero
100073ac:	f800283a 	ret

100073b0 <__swrite>:
100073b0:	2880030b 	ldhu	r2,12(r5)
100073b4:	defffb04 	addi	sp,sp,-20
100073b8:	dcc00315 	stw	r19,12(sp)
100073bc:	dc800215 	stw	r18,8(sp)
100073c0:	dc400115 	stw	r17,4(sp)
100073c4:	dc000015 	stw	r16,0(sp)
100073c8:	dfc00415 	stw	ra,16(sp)
100073cc:	10c0400c 	andi	r3,r2,256
100073d0:	2821883a 	mov	r16,r5
100073d4:	2023883a 	mov	r17,r4
100073d8:	3025883a 	mov	r18,r6
100073dc:	3827883a 	mov	r19,r7
100073e0:	18000526 	beq	r3,zero,100073f8 <__swrite+0x48>
100073e4:	2940038f 	ldh	r5,14(r5)
100073e8:	01c00084 	movi	r7,2
100073ec:	000d883a 	mov	r6,zero
100073f0:	00097100 	call	10009710 <_lseek_r>
100073f4:	8080030b 	ldhu	r2,12(r16)
100073f8:	8140038f 	ldh	r5,14(r16)
100073fc:	10bbffcc 	andi	r2,r2,61439
10007400:	980f883a 	mov	r7,r19
10007404:	900d883a 	mov	r6,r18
10007408:	8809883a 	mov	r4,r17
1000740c:	8080030d 	sth	r2,12(r16)
10007410:	dfc00417 	ldw	ra,16(sp)
10007414:	dcc00317 	ldw	r19,12(sp)
10007418:	dc800217 	ldw	r18,8(sp)
1000741c:	dc400117 	ldw	r17,4(sp)
10007420:	dc000017 	ldw	r16,0(sp)
10007424:	dec00504 	addi	sp,sp,20
10007428:	0008cfc1 	jmpi	10008cfc <_write_r>

1000742c <__sseek>:
1000742c:	defffe04 	addi	sp,sp,-8
10007430:	dc000015 	stw	r16,0(sp)
10007434:	2821883a 	mov	r16,r5
10007438:	2940038f 	ldh	r5,14(r5)
1000743c:	dfc00115 	stw	ra,4(sp)
10007440:	00097100 	call	10009710 <_lseek_r>
10007444:	00ffffc4 	movi	r3,-1
10007448:	10c00826 	beq	r2,r3,1000746c <__sseek+0x40>
1000744c:	80c0030b 	ldhu	r3,12(r16)
10007450:	80801415 	stw	r2,80(r16)
10007454:	18c40014 	ori	r3,r3,4096
10007458:	80c0030d 	sth	r3,12(r16)
1000745c:	dfc00117 	ldw	ra,4(sp)
10007460:	dc000017 	ldw	r16,0(sp)
10007464:	dec00204 	addi	sp,sp,8
10007468:	f800283a 	ret
1000746c:	80c0030b 	ldhu	r3,12(r16)
10007470:	18fbffcc 	andi	r3,r3,61439
10007474:	80c0030d 	sth	r3,12(r16)
10007478:	dfc00117 	ldw	ra,4(sp)
1000747c:	dc000017 	ldw	r16,0(sp)
10007480:	dec00204 	addi	sp,sp,8
10007484:	f800283a 	ret

10007488 <__sclose>:
10007488:	2940038f 	ldh	r5,14(r5)
1000748c:	0008d5c1 	jmpi	10008d5c <_close_r>

10007490 <strcmp>:
10007490:	2144b03a 	or	r2,r4,r5
10007494:	108000cc 	andi	r2,r2,3
10007498:	1000171e 	bne	r2,zero,100074f8 <strcmp+0x68>
1000749c:	20800017 	ldw	r2,0(r4)
100074a0:	28c00017 	ldw	r3,0(r5)
100074a4:	10c0141e 	bne	r2,r3,100074f8 <strcmp+0x68>
100074a8:	027fbff4 	movhi	r9,65279
100074ac:	4a7fbfc4 	addi	r9,r9,-257
100074b0:	0086303a 	nor	r3,zero,r2
100074b4:	02202074 	movhi	r8,32897
100074b8:	1245883a 	add	r2,r2,r9
100074bc:	42202004 	addi	r8,r8,-32640
100074c0:	10c4703a 	and	r2,r2,r3
100074c4:	1204703a 	and	r2,r2,r8
100074c8:	10000226 	beq	r2,zero,100074d4 <strcmp+0x44>
100074cc:	00002306 	br	1000755c <strcmp+0xcc>
100074d0:	1000221e 	bne	r2,zero,1000755c <strcmp+0xcc>
100074d4:	21000104 	addi	r4,r4,4
100074d8:	20c00017 	ldw	r3,0(r4)
100074dc:	29400104 	addi	r5,r5,4
100074e0:	29800017 	ldw	r6,0(r5)
100074e4:	1a4f883a 	add	r7,r3,r9
100074e8:	00c4303a 	nor	r2,zero,r3
100074ec:	3884703a 	and	r2,r7,r2
100074f0:	1204703a 	and	r2,r2,r8
100074f4:	19bff626 	beq	r3,r6,100074d0 <__alt_data_end+0xf80074d0>
100074f8:	20800003 	ldbu	r2,0(r4)
100074fc:	10c03fcc 	andi	r3,r2,255
10007500:	18c0201c 	xori	r3,r3,128
10007504:	18ffe004 	addi	r3,r3,-128
10007508:	18000c26 	beq	r3,zero,1000753c <strcmp+0xac>
1000750c:	29800007 	ldb	r6,0(r5)
10007510:	19800326 	beq	r3,r6,10007520 <strcmp+0x90>
10007514:	00001306 	br	10007564 <strcmp+0xd4>
10007518:	29800007 	ldb	r6,0(r5)
1000751c:	11800b1e 	bne	r2,r6,1000754c <strcmp+0xbc>
10007520:	21000044 	addi	r4,r4,1
10007524:	20c00003 	ldbu	r3,0(r4)
10007528:	29400044 	addi	r5,r5,1
1000752c:	18803fcc 	andi	r2,r3,255
10007530:	1080201c 	xori	r2,r2,128
10007534:	10bfe004 	addi	r2,r2,-128
10007538:	103ff71e 	bne	r2,zero,10007518 <__alt_data_end+0xf8007518>
1000753c:	0007883a 	mov	r3,zero
10007540:	28800003 	ldbu	r2,0(r5)
10007544:	1885c83a 	sub	r2,r3,r2
10007548:	f800283a 	ret
1000754c:	28800003 	ldbu	r2,0(r5)
10007550:	18c03fcc 	andi	r3,r3,255
10007554:	1885c83a 	sub	r2,r3,r2
10007558:	f800283a 	ret
1000755c:	0005883a 	mov	r2,zero
10007560:	f800283a 	ret
10007564:	10c03fcc 	andi	r3,r2,255
10007568:	003ff506 	br	10007540 <__alt_data_end+0xf8007540>

1000756c <strlen>:
1000756c:	208000cc 	andi	r2,r4,3
10007570:	10002026 	beq	r2,zero,100075f4 <strlen+0x88>
10007574:	20800007 	ldb	r2,0(r4)
10007578:	10002026 	beq	r2,zero,100075fc <strlen+0x90>
1000757c:	2005883a 	mov	r2,r4
10007580:	00000206 	br	1000758c <strlen+0x20>
10007584:	10c00007 	ldb	r3,0(r2)
10007588:	18001826 	beq	r3,zero,100075ec <strlen+0x80>
1000758c:	10800044 	addi	r2,r2,1
10007590:	10c000cc 	andi	r3,r2,3
10007594:	183ffb1e 	bne	r3,zero,10007584 <__alt_data_end+0xf8007584>
10007598:	10c00017 	ldw	r3,0(r2)
1000759c:	01ffbff4 	movhi	r7,65279
100075a0:	39ffbfc4 	addi	r7,r7,-257
100075a4:	00ca303a 	nor	r5,zero,r3
100075a8:	01a02074 	movhi	r6,32897
100075ac:	19c7883a 	add	r3,r3,r7
100075b0:	31a02004 	addi	r6,r6,-32640
100075b4:	1946703a 	and	r3,r3,r5
100075b8:	1986703a 	and	r3,r3,r6
100075bc:	1800091e 	bne	r3,zero,100075e4 <strlen+0x78>
100075c0:	10800104 	addi	r2,r2,4
100075c4:	10c00017 	ldw	r3,0(r2)
100075c8:	19cb883a 	add	r5,r3,r7
100075cc:	00c6303a 	nor	r3,zero,r3
100075d0:	28c6703a 	and	r3,r5,r3
100075d4:	1986703a 	and	r3,r3,r6
100075d8:	183ff926 	beq	r3,zero,100075c0 <__alt_data_end+0xf80075c0>
100075dc:	00000106 	br	100075e4 <strlen+0x78>
100075e0:	10800044 	addi	r2,r2,1
100075e4:	10c00007 	ldb	r3,0(r2)
100075e8:	183ffd1e 	bne	r3,zero,100075e0 <__alt_data_end+0xf80075e0>
100075ec:	1105c83a 	sub	r2,r2,r4
100075f0:	f800283a 	ret
100075f4:	2005883a 	mov	r2,r4
100075f8:	003fe706 	br	10007598 <__alt_data_end+0xf8007598>
100075fc:	0005883a 	mov	r2,zero
10007600:	f800283a 	ret

10007604 <__sprint_r.part.0>:
10007604:	28801917 	ldw	r2,100(r5)
10007608:	defff604 	addi	sp,sp,-40
1000760c:	dd400515 	stw	r21,20(sp)
10007610:	dfc00915 	stw	ra,36(sp)
10007614:	df000815 	stw	fp,32(sp)
10007618:	ddc00715 	stw	r23,28(sp)
1000761c:	dd800615 	stw	r22,24(sp)
10007620:	dd000415 	stw	r20,16(sp)
10007624:	dcc00315 	stw	r19,12(sp)
10007628:	dc800215 	stw	r18,8(sp)
1000762c:	dc400115 	stw	r17,4(sp)
10007630:	dc000015 	stw	r16,0(sp)
10007634:	1088000c 	andi	r2,r2,8192
10007638:	302b883a 	mov	r21,r6
1000763c:	10002e26 	beq	r2,zero,100076f8 <__sprint_r.part.0+0xf4>
10007640:	30800217 	ldw	r2,8(r6)
10007644:	35800017 	ldw	r22,0(r6)
10007648:	10002926 	beq	r2,zero,100076f0 <__sprint_r.part.0+0xec>
1000764c:	2827883a 	mov	r19,r5
10007650:	2029883a 	mov	r20,r4
10007654:	b5c00104 	addi	r23,r22,4
10007658:	04bfffc4 	movi	r18,-1
1000765c:	bc400017 	ldw	r17,0(r23)
10007660:	b4000017 	ldw	r16,0(r22)
10007664:	0039883a 	mov	fp,zero
10007668:	8822d0ba 	srli	r17,r17,2
1000766c:	8800031e 	bne	r17,zero,1000767c <__sprint_r.part.0+0x78>
10007670:	00001806 	br	100076d4 <__sprint_r.part.0+0xd0>
10007674:	84000104 	addi	r16,r16,4
10007678:	8f001526 	beq	r17,fp,100076d0 <__sprint_r.part.0+0xcc>
1000767c:	81400017 	ldw	r5,0(r16)
10007680:	980d883a 	mov	r6,r19
10007684:	a009883a 	mov	r4,r20
10007688:	00090f40 	call	100090f4 <_fputwc_r>
1000768c:	e7000044 	addi	fp,fp,1
10007690:	14bff81e 	bne	r2,r18,10007674 <__alt_data_end+0xf8007674>
10007694:	9005883a 	mov	r2,r18
10007698:	a8000215 	stw	zero,8(r21)
1000769c:	a8000115 	stw	zero,4(r21)
100076a0:	dfc00917 	ldw	ra,36(sp)
100076a4:	df000817 	ldw	fp,32(sp)
100076a8:	ddc00717 	ldw	r23,28(sp)
100076ac:	dd800617 	ldw	r22,24(sp)
100076b0:	dd400517 	ldw	r21,20(sp)
100076b4:	dd000417 	ldw	r20,16(sp)
100076b8:	dcc00317 	ldw	r19,12(sp)
100076bc:	dc800217 	ldw	r18,8(sp)
100076c0:	dc400117 	ldw	r17,4(sp)
100076c4:	dc000017 	ldw	r16,0(sp)
100076c8:	dec00a04 	addi	sp,sp,40
100076cc:	f800283a 	ret
100076d0:	a8800217 	ldw	r2,8(r21)
100076d4:	8c63883a 	add	r17,r17,r17
100076d8:	8c63883a 	add	r17,r17,r17
100076dc:	1445c83a 	sub	r2,r2,r17
100076e0:	a8800215 	stw	r2,8(r21)
100076e4:	b5800204 	addi	r22,r22,8
100076e8:	bdc00204 	addi	r23,r23,8
100076ec:	103fdb1e 	bne	r2,zero,1000765c <__alt_data_end+0xf800765c>
100076f0:	0005883a 	mov	r2,zero
100076f4:	003fe806 	br	10007698 <__alt_data_end+0xf8007698>
100076f8:	00091f40 	call	100091f4 <__sfvwrite_r>
100076fc:	003fe606 	br	10007698 <__alt_data_end+0xf8007698>

10007700 <__sprint_r>:
10007700:	30c00217 	ldw	r3,8(r6)
10007704:	18000126 	beq	r3,zero,1000770c <__sprint_r+0xc>
10007708:	00076041 	jmpi	10007604 <__sprint_r.part.0>
1000770c:	30000115 	stw	zero,4(r6)
10007710:	0005883a 	mov	r2,zero
10007714:	f800283a 	ret

10007718 <___vfiprintf_internal_r>:
10007718:	deffca04 	addi	sp,sp,-216
1000771c:	dd403115 	stw	r21,196(sp)
10007720:	dfc03515 	stw	ra,212(sp)
10007724:	df003415 	stw	fp,208(sp)
10007728:	ddc03315 	stw	r23,204(sp)
1000772c:	dd803215 	stw	r22,200(sp)
10007730:	dd003015 	stw	r20,192(sp)
10007734:	dcc02f15 	stw	r19,188(sp)
10007738:	dc802e15 	stw	r18,184(sp)
1000773c:	dc402d15 	stw	r17,180(sp)
10007740:	dc002c15 	stw	r16,176(sp)
10007744:	d9002115 	stw	r4,132(sp)
10007748:	d9402015 	stw	r5,128(sp)
1000774c:	d9c02215 	stw	r7,136(sp)
10007750:	302b883a 	mov	r21,r6
10007754:	20000226 	beq	r4,zero,10007760 <___vfiprintf_internal_r+0x48>
10007758:	20800e17 	ldw	r2,56(r4)
1000775c:	1000cf26 	beq	r2,zero,10007a9c <___vfiprintf_internal_r+0x384>
10007760:	d8c02017 	ldw	r3,128(sp)
10007764:	1880030b 	ldhu	r2,12(r3)
10007768:	10c8000c 	andi	r3,r2,8192
1000776c:	1800071e 	bne	r3,zero,1000778c <___vfiprintf_internal_r+0x74>
10007770:	d9402017 	ldw	r5,128(sp)
10007774:	00f7ffc4 	movi	r3,-8193
10007778:	10880014 	ori	r2,r2,8192
1000777c:	29001917 	ldw	r4,100(r5)
10007780:	2880030d 	sth	r2,12(r5)
10007784:	20c6703a 	and	r3,r4,r3
10007788:	28c01915 	stw	r3,100(r5)
1000778c:	10c0020c 	andi	r3,r2,8
10007790:	1800a526 	beq	r3,zero,10007a28 <___vfiprintf_internal_r+0x310>
10007794:	d9002017 	ldw	r4,128(sp)
10007798:	20c00417 	ldw	r3,16(r4)
1000779c:	1800a226 	beq	r3,zero,10007a28 <___vfiprintf_internal_r+0x310>
100077a0:	1080068c 	andi	r2,r2,26
100077a4:	00c00284 	movi	r3,10
100077a8:	10c0a826 	beq	r2,r3,10007a4c <___vfiprintf_internal_r+0x334>
100077ac:	d9001a04 	addi	r4,sp,104
100077b0:	d94019c4 	addi	r5,sp,103
100077b4:	04840074 	movhi	r18,4097
100077b8:	2145c83a 	sub	r2,r4,r5
100077bc:	9480b304 	addi	r18,r18,716
100077c0:	d9001e15 	stw	r4,120(sp)
100077c4:	d9401f15 	stw	r5,124(sp)
100077c8:	dec01a15 	stw	sp,104(sp)
100077cc:	d8001c15 	stw	zero,112(sp)
100077d0:	d8001b15 	stw	zero,108(sp)
100077d4:	d811883a 	mov	r8,sp
100077d8:	d8002615 	stw	zero,152(sp)
100077dc:	d8002415 	stw	zero,144(sp)
100077e0:	d8802815 	stw	r2,160(sp)
100077e4:	a82d883a 	mov	r22,r21
100077e8:	b0800007 	ldb	r2,0(r22)
100077ec:	10040d26 	beq	r2,zero,10008824 <___vfiprintf_internal_r+0x110c>
100077f0:	00c00944 	movi	r3,37
100077f4:	b029883a 	mov	r20,r22
100077f8:	10c0021e 	bne	r2,r3,10007804 <___vfiprintf_internal_r+0xec>
100077fc:	00001606 	br	10007858 <___vfiprintf_internal_r+0x140>
10007800:	10c00326 	beq	r2,r3,10007810 <___vfiprintf_internal_r+0xf8>
10007804:	a5000044 	addi	r20,r20,1
10007808:	a0800007 	ldb	r2,0(r20)
1000780c:	103ffc1e 	bne	r2,zero,10007800 <__alt_data_end+0xf8007800>
10007810:	a5a1c83a 	sub	r16,r20,r22
10007814:	80001026 	beq	r16,zero,10007858 <___vfiprintf_internal_r+0x140>
10007818:	d8c01c17 	ldw	r3,112(sp)
1000781c:	d8801b17 	ldw	r2,108(sp)
10007820:	45800015 	stw	r22,0(r8)
10007824:	80c7883a 	add	r3,r16,r3
10007828:	10800044 	addi	r2,r2,1
1000782c:	44000115 	stw	r16,4(r8)
10007830:	d8c01c15 	stw	r3,112(sp)
10007834:	d8801b15 	stw	r2,108(sp)
10007838:	010001c4 	movi	r4,7
1000783c:	2080750e 	bge	r4,r2,10007a14 <___vfiprintf_internal_r+0x2fc>
10007840:	1803951e 	bne	r3,zero,10008698 <___vfiprintf_internal_r+0xf80>
10007844:	d8c02417 	ldw	r3,144(sp)
10007848:	d8001b15 	stw	zero,108(sp)
1000784c:	d811883a 	mov	r8,sp
10007850:	1c07883a 	add	r3,r3,r16
10007854:	d8c02415 	stw	r3,144(sp)
10007858:	a0800007 	ldb	r2,0(r20)
1000785c:	1002e026 	beq	r2,zero,100083e0 <___vfiprintf_internal_r+0xcc8>
10007860:	a5800044 	addi	r22,r20,1
10007864:	a0c00047 	ldb	r3,1(r20)
10007868:	d8001d85 	stb	zero,118(sp)
1000786c:	0027883a 	mov	r19,zero
10007870:	d8002305 	stb	zero,140(sp)
10007874:	043fffc4 	movi	r16,-1
10007878:	d8002515 	stw	zero,148(sp)
1000787c:	0023883a 	mov	r17,zero
10007880:	05001604 	movi	r20,88
10007884:	05400244 	movi	r21,9
10007888:	402f883a 	mov	r23,r8
1000788c:	b5800044 	addi	r22,r22,1
10007890:	18bff804 	addi	r2,r3,-32
10007894:	a0827736 	bltu	r20,r2,10008274 <___vfiprintf_internal_r+0xb5c>
10007898:	100490ba 	slli	r2,r2,2
1000789c:	01040034 	movhi	r4,4096
100078a0:	211e2c04 	addi	r4,r4,30896
100078a4:	1105883a 	add	r2,r2,r4
100078a8:	10800017 	ldw	r2,0(r2)
100078ac:	1000683a 	jmp	r2
100078b0:	10007f74 	orhi	zero,r2,509
100078b4:	10008274 	orhi	zero,r2,521
100078b8:	10008274 	orhi	zero,r2,521
100078bc:	10007f90 	cmplti	zero,r2,510
100078c0:	10008274 	orhi	zero,r2,521
100078c4:	10008274 	orhi	zero,r2,521
100078c8:	10008274 	orhi	zero,r2,521
100078cc:	10008274 	orhi	zero,r2,521
100078d0:	10008274 	orhi	zero,r2,521
100078d4:	10008274 	orhi	zero,r2,521
100078d8:	10008198 	cmpnei	zero,r2,518
100078dc:	100081bc 	xorhi	zero,r2,518
100078e0:	10008274 	orhi	zero,r2,521
100078e4:	10007ab4 	orhi	zero,r2,490
100078e8:	100081d0 	cmplti	zero,r2,519
100078ec:	10008274 	orhi	zero,r2,521
100078f0:	10007f9c 	xori	zero,r2,510
100078f4:	10007fa8 	cmpgeui	zero,r2,510
100078f8:	10007fa8 	cmpgeui	zero,r2,510
100078fc:	10007fa8 	cmpgeui	zero,r2,510
10007900:	10007fa8 	cmpgeui	zero,r2,510
10007904:	10007fa8 	cmpgeui	zero,r2,510
10007908:	10007fa8 	cmpgeui	zero,r2,510
1000790c:	10007fa8 	cmpgeui	zero,r2,510
10007910:	10007fa8 	cmpgeui	zero,r2,510
10007914:	10007fa8 	cmpgeui	zero,r2,510
10007918:	10008274 	orhi	zero,r2,521
1000791c:	10008274 	orhi	zero,r2,521
10007920:	10008274 	orhi	zero,r2,521
10007924:	10008274 	orhi	zero,r2,521
10007928:	10008274 	orhi	zero,r2,521
1000792c:	10008274 	orhi	zero,r2,521
10007930:	10008274 	orhi	zero,r2,521
10007934:	10008274 	orhi	zero,r2,521
10007938:	10008274 	orhi	zero,r2,521
1000793c:	10008274 	orhi	zero,r2,521
10007940:	10007fe8 	cmpgeui	zero,r2,511
10007944:	10008274 	orhi	zero,r2,521
10007948:	10008274 	orhi	zero,r2,521
1000794c:	10008274 	orhi	zero,r2,521
10007950:	10008274 	orhi	zero,r2,521
10007954:	10008274 	orhi	zero,r2,521
10007958:	10008274 	orhi	zero,r2,521
1000795c:	10008274 	orhi	zero,r2,521
10007960:	10008274 	orhi	zero,r2,521
10007964:	10008274 	orhi	zero,r2,521
10007968:	10008274 	orhi	zero,r2,521
1000796c:	10008024 	muli	zero,r2,512
10007970:	10008274 	orhi	zero,r2,521
10007974:	10008274 	orhi	zero,r2,521
10007978:	10008274 	orhi	zero,r2,521
1000797c:	10008274 	orhi	zero,r2,521
10007980:	10008274 	orhi	zero,r2,521
10007984:	10008080 	call	11000808 <_gp+0xfe693c>
10007988:	10008274 	orhi	zero,r2,521
1000798c:	10008274 	orhi	zero,r2,521
10007990:	100080f4 	orhi	zero,r2,515
10007994:	10008274 	orhi	zero,r2,521
10007998:	10008274 	orhi	zero,r2,521
1000799c:	10008274 	orhi	zero,r2,521
100079a0:	10008274 	orhi	zero,r2,521
100079a4:	10008274 	orhi	zero,r2,521
100079a8:	10008274 	orhi	zero,r2,521
100079ac:	10008274 	orhi	zero,r2,521
100079b0:	10008274 	orhi	zero,r2,521
100079b4:	10008274 	orhi	zero,r2,521
100079b8:	10008274 	orhi	zero,r2,521
100079bc:	10007e9c 	xori	zero,r2,506
100079c0:	10007ecc 	andi	zero,r2,507
100079c4:	10008274 	orhi	zero,r2,521
100079c8:	10008274 	orhi	zero,r2,521
100079cc:	10008274 	orhi	zero,r2,521
100079d0:	1000821c 	xori	zero,r2,520
100079d4:	10007ecc 	andi	zero,r2,507
100079d8:	10008274 	orhi	zero,r2,521
100079dc:	10008274 	orhi	zero,r2,521
100079e0:	10007d74 	orhi	zero,r2,501
100079e4:	10008274 	orhi	zero,r2,521
100079e8:	10007d88 	cmpgei	zero,r2,502
100079ec:	10007dc0 	call	110007dc <_gp+0xfe6910>
100079f0:	10007ac0 	call	110007ac <_gp+0xfe68e0>
100079f4:	10007d68 	cmpgeui	zero,r2,501
100079f8:	10008274 	orhi	zero,r2,521
100079fc:	10008134 	orhi	zero,r2,516
10007a00:	10008274 	orhi	zero,r2,521
10007a04:	10008180 	call	11000818 <_gp+0xfe694c>
10007a08:	10008274 	orhi	zero,r2,521
10007a0c:	10008274 	orhi	zero,r2,521
10007a10:	10007e44 	addi	zero,r2,505
10007a14:	42000204 	addi	r8,r8,8
10007a18:	d8c02417 	ldw	r3,144(sp)
10007a1c:	1c07883a 	add	r3,r3,r16
10007a20:	d8c02415 	stw	r3,144(sp)
10007a24:	003f8c06 	br	10007858 <__alt_data_end+0xf8007858>
10007a28:	d9402017 	ldw	r5,128(sp)
10007a2c:	d9002117 	ldw	r4,132(sp)
10007a30:	0002f0c0 	call	10002f0c <__swsetup_r>
10007a34:	1003c11e 	bne	r2,zero,1000893c <___vfiprintf_internal_r+0x1224>
10007a38:	d9402017 	ldw	r5,128(sp)
10007a3c:	00c00284 	movi	r3,10
10007a40:	2880030b 	ldhu	r2,12(r5)
10007a44:	1080068c 	andi	r2,r2,26
10007a48:	10ff581e 	bne	r2,r3,100077ac <__alt_data_end+0xf80077ac>
10007a4c:	d8c02017 	ldw	r3,128(sp)
10007a50:	1880038f 	ldh	r2,14(r3)
10007a54:	103f5516 	blt	r2,zero,100077ac <__alt_data_end+0xf80077ac>
10007a58:	d9c02217 	ldw	r7,136(sp)
10007a5c:	d9002117 	ldw	r4,132(sp)
10007a60:	a80d883a 	mov	r6,r21
10007a64:	180b883a 	mov	r5,r3
10007a68:	0008c400 	call	10008c40 <__sbprintf>
10007a6c:	dfc03517 	ldw	ra,212(sp)
10007a70:	df003417 	ldw	fp,208(sp)
10007a74:	ddc03317 	ldw	r23,204(sp)
10007a78:	dd803217 	ldw	r22,200(sp)
10007a7c:	dd403117 	ldw	r21,196(sp)
10007a80:	dd003017 	ldw	r20,192(sp)
10007a84:	dcc02f17 	ldw	r19,188(sp)
10007a88:	dc802e17 	ldw	r18,184(sp)
10007a8c:	dc402d17 	ldw	r17,180(sp)
10007a90:	dc002c17 	ldw	r16,176(sp)
10007a94:	dec03604 	addi	sp,sp,216
10007a98:	f800283a 	ret
10007a9c:	0004f180 	call	10004f18 <__sinit>
10007aa0:	003f2f06 	br	10007760 <__alt_data_end+0xf8007760>
10007aa4:	d8c02517 	ldw	r3,148(sp)
10007aa8:	d8802215 	stw	r2,136(sp)
10007aac:	00c7c83a 	sub	r3,zero,r3
10007ab0:	d8c02515 	stw	r3,148(sp)
10007ab4:	8c400114 	ori	r17,r17,4
10007ab8:	b0c00007 	ldb	r3,0(r22)
10007abc:	003f7306 	br	1000788c <__alt_data_end+0xf800788c>
10007ac0:	00800c04 	movi	r2,48
10007ac4:	d9402217 	ldw	r5,136(sp)
10007ac8:	d8801d05 	stb	r2,116(sp)
10007acc:	00801e04 	movi	r2,120
10007ad0:	d8801d45 	stb	r2,117(sp)
10007ad4:	d8001d85 	stb	zero,118(sp)
10007ad8:	b811883a 	mov	r8,r23
10007adc:	28c00104 	addi	r3,r5,4
10007ae0:	2cc00017 	ldw	r19,0(r5)
10007ae4:	0029883a 	mov	r20,zero
10007ae8:	88800094 	ori	r2,r17,2
10007aec:	80032516 	blt	r16,zero,10008784 <___vfiprintf_internal_r+0x106c>
10007af0:	00bfdfc4 	movi	r2,-129
10007af4:	88a2703a 	and	r17,r17,r2
10007af8:	d8c02215 	stw	r3,136(sp)
10007afc:	8c400094 	ori	r17,r17,2
10007b00:	98032a1e 	bne	r19,zero,100087ac <___vfiprintf_internal_r+0x1094>
10007b04:	00840074 	movhi	r2,4097
10007b08:	10805204 	addi	r2,r2,328
10007b0c:	d8802615 	stw	r2,152(sp)
10007b10:	002b883a 	mov	r21,zero
10007b14:	8001741e 	bne	r16,zero,100080e8 <___vfiprintf_internal_r+0x9d0>
10007b18:	0021883a 	mov	r16,zero
10007b1c:	0029883a 	mov	r20,zero
10007b20:	ddc01a04 	addi	r23,sp,104
10007b24:	8027883a 	mov	r19,r16
10007b28:	8500010e 	bge	r16,r20,10007b30 <___vfiprintf_internal_r+0x418>
10007b2c:	a027883a 	mov	r19,r20
10007b30:	ad403fcc 	andi	r21,r21,255
10007b34:	ad40201c 	xori	r21,r21,128
10007b38:	ad7fe004 	addi	r21,r21,-128
10007b3c:	a8000126 	beq	r21,zero,10007b44 <___vfiprintf_internal_r+0x42c>
10007b40:	9cc00044 	addi	r19,r19,1
10007b44:	89c0008c 	andi	r7,r17,2
10007b48:	38000126 	beq	r7,zero,10007b50 <___vfiprintf_internal_r+0x438>
10007b4c:	9cc00084 	addi	r19,r19,2
10007b50:	88c0210c 	andi	r3,r17,132
10007b54:	1801dd1e 	bne	r3,zero,100082cc <___vfiprintf_internal_r+0xbb4>
10007b58:	d9402517 	ldw	r5,148(sp)
10007b5c:	2cebc83a 	sub	r21,r5,r19
10007b60:	0541da0e 	bge	zero,r21,100082cc <___vfiprintf_internal_r+0xbb4>
10007b64:	07000404 	movi	fp,16
10007b68:	d8801c17 	ldw	r2,112(sp)
10007b6c:	e543be0e 	bge	fp,r21,10008a68 <___vfiprintf_internal_r+0x1350>
10007b70:	01440074 	movhi	r5,4097
10007b74:	2940b704 	addi	r5,r5,732
10007b78:	dc002715 	stw	r16,156(sp)
10007b7c:	d9801b17 	ldw	r6,108(sp)
10007b80:	a821883a 	mov	r16,r21
10007b84:	d9402315 	stw	r5,140(sp)
10007b88:	028001c4 	movi	r10,7
10007b8c:	d9c02915 	stw	r7,164(sp)
10007b90:	182b883a 	mov	r21,r3
10007b94:	00000506 	br	10007bac <___vfiprintf_internal_r+0x494>
10007b98:	31000084 	addi	r4,r6,2
10007b9c:	42000204 	addi	r8,r8,8
10007ba0:	180d883a 	mov	r6,r3
10007ba4:	843ffc04 	addi	r16,r16,-16
10007ba8:	e4000f0e 	bge	fp,r16,10007be8 <___vfiprintf_internal_r+0x4d0>
10007bac:	01040074 	movhi	r4,4097
10007bb0:	10800404 	addi	r2,r2,16
10007bb4:	30c00044 	addi	r3,r6,1
10007bb8:	2100b704 	addi	r4,r4,732
10007bbc:	41000015 	stw	r4,0(r8)
10007bc0:	47000115 	stw	fp,4(r8)
10007bc4:	d8801c15 	stw	r2,112(sp)
10007bc8:	d8c01b15 	stw	r3,108(sp)
10007bcc:	50fff20e 	bge	r10,r3,10007b98 <__alt_data_end+0xf8007b98>
10007bd0:	1001b21e 	bne	r2,zero,1000829c <___vfiprintf_internal_r+0xb84>
10007bd4:	843ffc04 	addi	r16,r16,-16
10007bd8:	000d883a 	mov	r6,zero
10007bdc:	01000044 	movi	r4,1
10007be0:	d811883a 	mov	r8,sp
10007be4:	e43ff116 	blt	fp,r16,10007bac <__alt_data_end+0xf8007bac>
10007be8:	a807883a 	mov	r3,r21
10007bec:	d9c02917 	ldw	r7,164(sp)
10007bf0:	802b883a 	mov	r21,r16
10007bf4:	dc002717 	ldw	r16,156(sp)
10007bf8:	d9402317 	ldw	r5,140(sp)
10007bfc:	a885883a 	add	r2,r21,r2
10007c00:	45400115 	stw	r21,4(r8)
10007c04:	41400015 	stw	r5,0(r8)
10007c08:	d8801c15 	stw	r2,112(sp)
10007c0c:	d9001b15 	stw	r4,108(sp)
10007c10:	014001c4 	movi	r5,7
10007c14:	29026216 	blt	r5,r4,100085a0 <___vfiprintf_internal_r+0xe88>
10007c18:	d9801d87 	ldb	r6,118(sp)
10007c1c:	42000204 	addi	r8,r8,8
10007c20:	21400044 	addi	r5,r4,1
10007c24:	3001ae1e 	bne	r6,zero,100082e0 <___vfiprintf_internal_r+0xbc8>
10007c28:	3801bb26 	beq	r7,zero,10008318 <___vfiprintf_internal_r+0xc00>
10007c2c:	d9001d04 	addi	r4,sp,116
10007c30:	10800084 	addi	r2,r2,2
10007c34:	41000015 	stw	r4,0(r8)
10007c38:	01000084 	movi	r4,2
10007c3c:	41000115 	stw	r4,4(r8)
10007c40:	d8801c15 	stw	r2,112(sp)
10007c44:	d9401b15 	stw	r5,108(sp)
10007c48:	010001c4 	movi	r4,7
10007c4c:	2142680e 	bge	r4,r5,100085f0 <___vfiprintf_internal_r+0xed8>
10007c50:	1002b11e 	bne	r2,zero,10008718 <___vfiprintf_internal_r+0x1000>
10007c54:	01802004 	movi	r6,128
10007c58:	01400044 	movi	r5,1
10007c5c:	0009883a 	mov	r4,zero
10007c60:	d811883a 	mov	r8,sp
10007c64:	1981ae1e 	bne	r3,r6,10008320 <___vfiprintf_internal_r+0xc08>
10007c68:	d8c02517 	ldw	r3,148(sp)
10007c6c:	1cf9c83a 	sub	fp,r3,r19
10007c70:	0701ab0e 	bge	zero,fp,10008320 <___vfiprintf_internal_r+0xc08>
10007c74:	05400404 	movi	r21,16
10007c78:	af03a90e 	bge	r21,fp,10008b20 <___vfiprintf_internal_r+0x1408>
10007c7c:	01440074 	movhi	r5,4097
10007c80:	2940b304 	addi	r5,r5,716
10007c84:	d9402315 	stw	r5,140(sp)
10007c88:	01c001c4 	movi	r7,7
10007c8c:	00000506 	br	10007ca4 <___vfiprintf_internal_r+0x58c>
10007c90:	21800084 	addi	r6,r4,2
10007c94:	42000204 	addi	r8,r8,8
10007c98:	1809883a 	mov	r4,r3
10007c9c:	e73ffc04 	addi	fp,fp,-16
10007ca0:	af000d0e 	bge	r21,fp,10007cd8 <___vfiprintf_internal_r+0x5c0>
10007ca4:	10800404 	addi	r2,r2,16
10007ca8:	20c00044 	addi	r3,r4,1
10007cac:	44800015 	stw	r18,0(r8)
10007cb0:	45400115 	stw	r21,4(r8)
10007cb4:	d8801c15 	stw	r2,112(sp)
10007cb8:	d8c01b15 	stw	r3,108(sp)
10007cbc:	38fff40e 	bge	r7,r3,10007c90 <__alt_data_end+0xf8007c90>
10007cc0:	10022b1e 	bne	r2,zero,10008570 <___vfiprintf_internal_r+0xe58>
10007cc4:	e73ffc04 	addi	fp,fp,-16
10007cc8:	01800044 	movi	r6,1
10007ccc:	0009883a 	mov	r4,zero
10007cd0:	d811883a 	mov	r8,sp
10007cd4:	af3ff316 	blt	r21,fp,10007ca4 <__alt_data_end+0xf8007ca4>
10007cd8:	d8c02317 	ldw	r3,140(sp)
10007cdc:	1705883a 	add	r2,r2,fp
10007ce0:	47000115 	stw	fp,4(r8)
10007ce4:	40c00015 	stw	r3,0(r8)
10007ce8:	d8801c15 	stw	r2,112(sp)
10007cec:	d9801b15 	stw	r6,108(sp)
10007cf0:	00c001c4 	movi	r3,7
10007cf4:	19829416 	blt	r3,r6,10008748 <___vfiprintf_internal_r+0x1030>
10007cf8:	8521c83a 	sub	r16,r16,r20
10007cfc:	42000204 	addi	r8,r8,8
10007d00:	31400044 	addi	r5,r6,1
10007d04:	3009883a 	mov	r4,r6
10007d08:	04018716 	blt	zero,r16,10008328 <___vfiprintf_internal_r+0xc10>
10007d0c:	a085883a 	add	r2,r20,r2
10007d10:	45c00015 	stw	r23,0(r8)
10007d14:	45000115 	stw	r20,4(r8)
10007d18:	d8801c15 	stw	r2,112(sp)
10007d1c:	d9401b15 	stw	r5,108(sp)
10007d20:	00c001c4 	movi	r3,7
10007d24:	1941c20e 	bge	r3,r5,10008430 <___vfiprintf_internal_r+0xd18>
10007d28:	1002531e 	bne	r2,zero,10008678 <___vfiprintf_internal_r+0xf60>
10007d2c:	d8001b15 	stw	zero,108(sp)
10007d30:	8c40010c 	andi	r17,r17,4
10007d34:	88023226 	beq	r17,zero,10008600 <___vfiprintf_internal_r+0xee8>
10007d38:	d9002517 	ldw	r4,148(sp)
10007d3c:	24e3c83a 	sub	r17,r4,r19
10007d40:	04432916 	blt	zero,r17,100089e8 <___vfiprintf_internal_r+0x12d0>
10007d44:	d8802517 	ldw	r2,148(sp)
10007d48:	14c0010e 	bge	r2,r19,10007d50 <___vfiprintf_internal_r+0x638>
10007d4c:	9805883a 	mov	r2,r19
10007d50:	d8c02417 	ldw	r3,144(sp)
10007d54:	1887883a 	add	r3,r3,r2
10007d58:	d8c02415 	stw	r3,144(sp)
10007d5c:	d8001b15 	stw	zero,108(sp)
10007d60:	d811883a 	mov	r8,sp
10007d64:	003ea006 	br	100077e8 <__alt_data_end+0xf80077e8>
10007d68:	8c400814 	ori	r17,r17,32
10007d6c:	b0c00007 	ldb	r3,0(r22)
10007d70:	003ec606 	br	1000788c <__alt_data_end+0xf800788c>
10007d74:	b0c00007 	ldb	r3,0(r22)
10007d78:	00801b04 	movi	r2,108
10007d7c:	18832026 	beq	r3,r2,10008a00 <___vfiprintf_internal_r+0x12e8>
10007d80:	8c400414 	ori	r17,r17,16
10007d84:	003ec106 	br	1000788c <__alt_data_end+0xf800788c>
10007d88:	9cc03fcc 	andi	r19,r19,255
10007d8c:	b811883a 	mov	r8,r23
10007d90:	9803981e 	bne	r19,zero,10008bf4 <___vfiprintf_internal_r+0x14dc>
10007d94:	8880080c 	andi	r2,r17,32
10007d98:	1002be26 	beq	r2,zero,10008894 <___vfiprintf_internal_r+0x117c>
10007d9c:	d9002217 	ldw	r4,136(sp)
10007da0:	d9402417 	ldw	r5,144(sp)
10007da4:	20800017 	ldw	r2,0(r4)
10007da8:	2807d7fa 	srai	r3,r5,31
10007dac:	21000104 	addi	r4,r4,4
10007db0:	d9002215 	stw	r4,136(sp)
10007db4:	11400015 	stw	r5,0(r2)
10007db8:	10c00115 	stw	r3,4(r2)
10007dbc:	003e8a06 	br	100077e8 <__alt_data_end+0xf80077e8>
10007dc0:	9cc03fcc 	andi	r19,r19,255
10007dc4:	b811883a 	mov	r8,r23
10007dc8:	9803871e 	bne	r19,zero,10008be8 <___vfiprintf_internal_r+0x14d0>
10007dcc:	8880080c 	andi	r2,r17,32
10007dd0:	10009a26 	beq	r2,zero,1000803c <___vfiprintf_internal_r+0x924>
10007dd4:	d9002217 	ldw	r4,136(sp)
10007dd8:	d8001d85 	stb	zero,118(sp)
10007ddc:	20800204 	addi	r2,r4,8
10007de0:	24c00017 	ldw	r19,0(r4)
10007de4:	25000117 	ldw	r20,4(r4)
10007de8:	8002a416 	blt	r16,zero,1000887c <___vfiprintf_internal_r+0x1164>
10007dec:	013fdfc4 	movi	r4,-129
10007df0:	9d06b03a 	or	r3,r19,r20
10007df4:	d8802215 	stw	r2,136(sp)
10007df8:	8922703a 	and	r17,r17,r4
10007dfc:	18009b26 	beq	r3,zero,1000806c <___vfiprintf_internal_r+0x954>
10007e00:	002b883a 	mov	r21,zero
10007e04:	ddc01a04 	addi	r23,sp,104
10007e08:	9806d0fa 	srli	r3,r19,3
10007e0c:	a008977a 	slli	r4,r20,29
10007e10:	a028d0fa 	srli	r20,r20,3
10007e14:	9cc001cc 	andi	r19,r19,7
10007e18:	98800c04 	addi	r2,r19,48
10007e1c:	bdffffc4 	addi	r23,r23,-1
10007e20:	20e6b03a 	or	r19,r4,r3
10007e24:	b8800005 	stb	r2,0(r23)
10007e28:	9d06b03a 	or	r3,r19,r20
10007e2c:	183ff61e 	bne	r3,zero,10007e08 <__alt_data_end+0xf8007e08>
10007e30:	88c0004c 	andi	r3,r17,1
10007e34:	18021f1e 	bne	r3,zero,100086b4 <___vfiprintf_internal_r+0xf9c>
10007e38:	d9401e17 	ldw	r5,120(sp)
10007e3c:	2de9c83a 	sub	r20,r5,r23
10007e40:	003f3806 	br	10007b24 <__alt_data_end+0xf8007b24>
10007e44:	9cc03fcc 	andi	r19,r19,255
10007e48:	b811883a 	mov	r8,r23
10007e4c:	98034f1e 	bne	r19,zero,10008b8c <___vfiprintf_internal_r+0x1474>
10007e50:	00840074 	movhi	r2,4097
10007e54:	10805204 	addi	r2,r2,328
10007e58:	d8802615 	stw	r2,152(sp)
10007e5c:	8880080c 	andi	r2,r17,32
10007e60:	1000ac26 	beq	r2,zero,10008114 <___vfiprintf_internal_r+0x9fc>
10007e64:	d9002217 	ldw	r4,136(sp)
10007e68:	24c00017 	ldw	r19,0(r4)
10007e6c:	25000117 	ldw	r20,4(r4)
10007e70:	21000204 	addi	r4,r4,8
10007e74:	d9002215 	stw	r4,136(sp)
10007e78:	8880004c 	andi	r2,r17,1
10007e7c:	1001e726 	beq	r2,zero,1000861c <___vfiprintf_internal_r+0xf04>
10007e80:	9d04b03a 	or	r2,r19,r20
10007e84:	10025c1e 	bne	r2,zero,100087f8 <___vfiprintf_internal_r+0x10e0>
10007e88:	d8001d85 	stb	zero,118(sp)
10007e8c:	80024416 	blt	r16,zero,100087a0 <___vfiprintf_internal_r+0x1088>
10007e90:	00bfdfc4 	movi	r2,-129
10007e94:	88a2703a 	and	r17,r17,r2
10007e98:	003f1d06 	br	10007b10 <__alt_data_end+0xf8007b10>
10007e9c:	d8c02217 	ldw	r3,136(sp)
10007ea0:	04c00044 	movi	r19,1
10007ea4:	b811883a 	mov	r8,r23
10007ea8:	18800017 	ldw	r2,0(r3)
10007eac:	18c00104 	addi	r3,r3,4
10007eb0:	d8001d85 	stb	zero,118(sp)
10007eb4:	d8801005 	stb	r2,64(sp)
10007eb8:	d8c02215 	stw	r3,136(sp)
10007ebc:	9829883a 	mov	r20,r19
10007ec0:	ddc01004 	addi	r23,sp,64
10007ec4:	0021883a 	mov	r16,zero
10007ec8:	003f1e06 	br	10007b44 <__alt_data_end+0xf8007b44>
10007ecc:	9cc03fcc 	andi	r19,r19,255
10007ed0:	b811883a 	mov	r8,r23
10007ed4:	9803331e 	bne	r19,zero,10008ba4 <___vfiprintf_internal_r+0x148c>
10007ed8:	8880080c 	andi	r2,r17,32
10007edc:	10004826 	beq	r2,zero,10008000 <___vfiprintf_internal_r+0x8e8>
10007ee0:	d9002217 	ldw	r4,136(sp)
10007ee4:	20800117 	ldw	r2,4(r4)
10007ee8:	24c00017 	ldw	r19,0(r4)
10007eec:	21000204 	addi	r4,r4,8
10007ef0:	d9002215 	stw	r4,136(sp)
10007ef4:	1029883a 	mov	r20,r2
10007ef8:	10024c16 	blt	r2,zero,1000882c <___vfiprintf_internal_r+0x1114>
10007efc:	dd401d83 	ldbu	r21,118(sp)
10007f00:	80007116 	blt	r16,zero,100080c8 <___vfiprintf_internal_r+0x9b0>
10007f04:	00ffdfc4 	movi	r3,-129
10007f08:	9d04b03a 	or	r2,r19,r20
10007f0c:	88e2703a 	and	r17,r17,r3
10007f10:	1000d126 	beq	r2,zero,10008258 <___vfiprintf_internal_r+0xb40>
10007f14:	a0023526 	beq	r20,zero,100087ec <___vfiprintf_internal_r+0x10d4>
10007f18:	ddc01a04 	addi	r23,sp,104
10007f1c:	4039883a 	mov	fp,r8
10007f20:	9809883a 	mov	r4,r19
10007f24:	a00b883a 	mov	r5,r20
10007f28:	01800284 	movi	r6,10
10007f2c:	000f883a 	mov	r7,zero
10007f30:	000a7cc0 	call	1000a7cc <__umoddi3>
10007f34:	10800c04 	addi	r2,r2,48
10007f38:	bdffffc4 	addi	r23,r23,-1
10007f3c:	9809883a 	mov	r4,r19
10007f40:	a00b883a 	mov	r5,r20
10007f44:	b8800005 	stb	r2,0(r23)
10007f48:	01800284 	movi	r6,10
10007f4c:	000f883a 	mov	r7,zero
10007f50:	000a1d00 	call	1000a1d0 <__udivdi3>
10007f54:	1027883a 	mov	r19,r2
10007f58:	10c4b03a 	or	r2,r2,r3
10007f5c:	1829883a 	mov	r20,r3
10007f60:	103fef1e 	bne	r2,zero,10007f20 <__alt_data_end+0xf8007f20>
10007f64:	d9001e17 	ldw	r4,120(sp)
10007f68:	e011883a 	mov	r8,fp
10007f6c:	25e9c83a 	sub	r20,r4,r23
10007f70:	003eec06 	br	10007b24 <__alt_data_end+0xf8007b24>
10007f74:	d8802307 	ldb	r2,140(sp)
10007f78:	1002361e 	bne	r2,zero,10008854 <___vfiprintf_internal_r+0x113c>
10007f7c:	00c00804 	movi	r3,32
10007f80:	d8c02305 	stb	r3,140(sp)
10007f84:	04c00044 	movi	r19,1
10007f88:	b0c00007 	ldb	r3,0(r22)
10007f8c:	003e3f06 	br	1000788c <__alt_data_end+0xf800788c>
10007f90:	8c400054 	ori	r17,r17,1
10007f94:	b0c00007 	ldb	r3,0(r22)
10007f98:	003e3c06 	br	1000788c <__alt_data_end+0xf800788c>
10007f9c:	8c402014 	ori	r17,r17,128
10007fa0:	b0c00007 	ldb	r3,0(r22)
10007fa4:	003e3906 	br	1000788c <__alt_data_end+0xf800788c>
10007fa8:	dc002715 	stw	r16,156(sp)
10007fac:	d8002515 	stw	zero,148(sp)
10007fb0:	1f3ff404 	addi	fp,r3,-48
10007fb4:	0009883a 	mov	r4,zero
10007fb8:	b021883a 	mov	r16,r22
10007fbc:	01400284 	movi	r5,10
10007fc0:	000097c0 	call	1000097c <__mulsi3>
10007fc4:	80c00007 	ldb	r3,0(r16)
10007fc8:	e089883a 	add	r4,fp,r2
10007fcc:	b5800044 	addi	r22,r22,1
10007fd0:	1f3ff404 	addi	fp,r3,-48
10007fd4:	b021883a 	mov	r16,r22
10007fd8:	af3ff82e 	bgeu	r21,fp,10007fbc <__alt_data_end+0xf8007fbc>
10007fdc:	d9002515 	stw	r4,148(sp)
10007fe0:	dc002717 	ldw	r16,156(sp)
10007fe4:	003e2a06 	br	10007890 <__alt_data_end+0xf8007890>
10007fe8:	9cc03fcc 	andi	r19,r19,255
10007fec:	b811883a 	mov	r8,r23
10007ff0:	9802e91e 	bne	r19,zero,10008b98 <___vfiprintf_internal_r+0x1480>
10007ff4:	8c400414 	ori	r17,r17,16
10007ff8:	8880080c 	andi	r2,r17,32
10007ffc:	103fb81e 	bne	r2,zero,10007ee0 <__alt_data_end+0xf8007ee0>
10008000:	8880040c 	andi	r2,r17,16
10008004:	10022e26 	beq	r2,zero,100088c0 <___vfiprintf_internal_r+0x11a8>
10008008:	d9402217 	ldw	r5,136(sp)
1000800c:	2cc00017 	ldw	r19,0(r5)
10008010:	29400104 	addi	r5,r5,4
10008014:	d9402215 	stw	r5,136(sp)
10008018:	9829d7fa 	srai	r20,r19,31
1000801c:	a005883a 	mov	r2,r20
10008020:	003fb506 	br	10007ef8 <__alt_data_end+0xf8007ef8>
10008024:	9cc03fcc 	andi	r19,r19,255
10008028:	b811883a 	mov	r8,r23
1000802c:	9802fa1e 	bne	r19,zero,10008c18 <___vfiprintf_internal_r+0x1500>
10008030:	8c400414 	ori	r17,r17,16
10008034:	8880080c 	andi	r2,r17,32
10008038:	103f661e 	bne	r2,zero,10007dd4 <__alt_data_end+0xf8007dd4>
1000803c:	8880040c 	andi	r2,r17,16
10008040:	10020626 	beq	r2,zero,1000885c <___vfiprintf_internal_r+0x1144>
10008044:	d9402217 	ldw	r5,136(sp)
10008048:	d8001d85 	stb	zero,118(sp)
1000804c:	0029883a 	mov	r20,zero
10008050:	28800104 	addi	r2,r5,4
10008054:	2cc00017 	ldw	r19,0(r5)
10008058:	80020816 	blt	r16,zero,1000887c <___vfiprintf_internal_r+0x1164>
1000805c:	00ffdfc4 	movi	r3,-129
10008060:	d8802215 	stw	r2,136(sp)
10008064:	88e2703a 	and	r17,r17,r3
10008068:	983f651e 	bne	r19,zero,10007e00 <__alt_data_end+0xf8007e00>
1000806c:	002b883a 	mov	r21,zero
10008070:	8002cf26 	beq	r16,zero,10008bb0 <___vfiprintf_internal_r+0x1498>
10008074:	0027883a 	mov	r19,zero
10008078:	0029883a 	mov	r20,zero
1000807c:	003f6106 	br	10007e04 <__alt_data_end+0xf8007e04>
10008080:	9cc03fcc 	andi	r19,r19,255
10008084:	b811883a 	mov	r8,r23
10008088:	9802e01e 	bne	r19,zero,10008c0c <___vfiprintf_internal_r+0x14f4>
1000808c:	8c400414 	ori	r17,r17,16
10008090:	8880080c 	andi	r2,r17,32
10008094:	1000641e 	bne	r2,zero,10008228 <___vfiprintf_internal_r+0xb10>
10008098:	8880040c 	andi	r2,r17,16
1000809c:	1001c81e 	bne	r2,zero,100087c0 <___vfiprintf_internal_r+0x10a8>
100080a0:	8880100c 	andi	r2,r17,64
100080a4:	d8001d85 	stb	zero,118(sp)
100080a8:	1002281e 	bne	r2,zero,1000894c <___vfiprintf_internal_r+0x1234>
100080ac:	d9002217 	ldw	r4,136(sp)
100080b0:	0029883a 	mov	r20,zero
100080b4:	20800104 	addi	r2,r4,4
100080b8:	24c00017 	ldw	r19,0(r4)
100080bc:	8001c60e 	bge	r16,zero,100087d8 <___vfiprintf_internal_r+0x10c0>
100080c0:	d8802215 	stw	r2,136(sp)
100080c4:	002b883a 	mov	r21,zero
100080c8:	9d04b03a 	or	r2,r19,r20
100080cc:	103f911e 	bne	r2,zero,10007f14 <__alt_data_end+0xf8007f14>
100080d0:	00800044 	movi	r2,1
100080d4:	10803fcc 	andi	r2,r2,255
100080d8:	00c00044 	movi	r3,1
100080dc:	10c05f26 	beq	r2,r3,1000825c <___vfiprintf_internal_r+0xb44>
100080e0:	00c00084 	movi	r3,2
100080e4:	10ffe31e 	bne	r2,r3,10008074 <__alt_data_end+0xf8008074>
100080e8:	0027883a 	mov	r19,zero
100080ec:	0029883a 	mov	r20,zero
100080f0:	00015106 	br	10008638 <___vfiprintf_internal_r+0xf20>
100080f4:	9cc03fcc 	andi	r19,r19,255
100080f8:	b811883a 	mov	r8,r23
100080fc:	9802c01e 	bne	r19,zero,10008c00 <___vfiprintf_internal_r+0x14e8>
10008100:	01440074 	movhi	r5,4097
10008104:	29404d04 	addi	r5,r5,308
10008108:	d9402615 	stw	r5,152(sp)
1000810c:	8880080c 	andi	r2,r17,32
10008110:	103f541e 	bne	r2,zero,10007e64 <__alt_data_end+0xf8007e64>
10008114:	8880040c 	andi	r2,r17,16
10008118:	1001f226 	beq	r2,zero,100088e4 <___vfiprintf_internal_r+0x11cc>
1000811c:	d9402217 	ldw	r5,136(sp)
10008120:	0029883a 	mov	r20,zero
10008124:	2cc00017 	ldw	r19,0(r5)
10008128:	29400104 	addi	r5,r5,4
1000812c:	d9402215 	stw	r5,136(sp)
10008130:	003f5106 	br	10007e78 <__alt_data_end+0xf8007e78>
10008134:	d8c02217 	ldw	r3,136(sp)
10008138:	b811883a 	mov	r8,r23
1000813c:	d8001d85 	stb	zero,118(sp)
10008140:	1dc00017 	ldw	r23,0(r3)
10008144:	1f000104 	addi	fp,r3,4
10008148:	b8025926 	beq	r23,zero,10008ab0 <___vfiprintf_internal_r+0x1398>
1000814c:	80023316 	blt	r16,zero,10008a1c <___vfiprintf_internal_r+0x1304>
10008150:	800d883a 	mov	r6,r16
10008154:	000b883a 	mov	r5,zero
10008158:	b809883a 	mov	r4,r23
1000815c:	da002a15 	stw	r8,168(sp)
10008160:	0005fc80 	call	10005fc8 <memchr>
10008164:	da002a17 	ldw	r8,168(sp)
10008168:	10026826 	beq	r2,zero,10008b0c <___vfiprintf_internal_r+0x13f4>
1000816c:	15e9c83a 	sub	r20,r2,r23
10008170:	dd401d83 	ldbu	r21,118(sp)
10008174:	df002215 	stw	fp,136(sp)
10008178:	0021883a 	mov	r16,zero
1000817c:	003e6906 	br	10007b24 <__alt_data_end+0xf8007b24>
10008180:	9cc03fcc 	andi	r19,r19,255
10008184:	b811883a 	mov	r8,r23
10008188:	983fc126 	beq	r19,zero,10008090 <__alt_data_end+0xf8008090>
1000818c:	d8c02303 	ldbu	r3,140(sp)
10008190:	d8c01d85 	stb	r3,118(sp)
10008194:	003fbe06 	br	10008090 <__alt_data_end+0xf8008090>
10008198:	d9002217 	ldw	r4,136(sp)
1000819c:	d9402217 	ldw	r5,136(sp)
100081a0:	21000017 	ldw	r4,0(r4)
100081a4:	28800104 	addi	r2,r5,4
100081a8:	d9002515 	stw	r4,148(sp)
100081ac:	203e3d16 	blt	r4,zero,10007aa4 <__alt_data_end+0xf8007aa4>
100081b0:	d8802215 	stw	r2,136(sp)
100081b4:	b0c00007 	ldb	r3,0(r22)
100081b8:	003db406 	br	1000788c <__alt_data_end+0xf800788c>
100081bc:	00c00ac4 	movi	r3,43
100081c0:	d8c02305 	stb	r3,140(sp)
100081c4:	04c00044 	movi	r19,1
100081c8:	b0c00007 	ldb	r3,0(r22)
100081cc:	003daf06 	br	1000788c <__alt_data_end+0xf800788c>
100081d0:	b0c00007 	ldb	r3,0(r22)
100081d4:	01000a84 	movi	r4,42
100081d8:	b4000044 	addi	r16,r22,1
100081dc:	19025e26 	beq	r3,r4,10008b58 <___vfiprintf_internal_r+0x1440>
100081e0:	1f3ff404 	addi	fp,r3,-48
100081e4:	0009883a 	mov	r4,zero
100081e8:	af025236 	bltu	r21,fp,10008b34 <___vfiprintf_internal_r+0x141c>
100081ec:	01400284 	movi	r5,10
100081f0:	000097c0 	call	1000097c <__mulsi3>
100081f4:	80c00007 	ldb	r3,0(r16)
100081f8:	1709883a 	add	r4,r2,fp
100081fc:	85800044 	addi	r22,r16,1
10008200:	1f3ff404 	addi	fp,r3,-48
10008204:	b021883a 	mov	r16,r22
10008208:	af3ff82e 	bgeu	r21,fp,100081ec <__alt_data_end+0xf80081ec>
1000820c:	2021883a 	mov	r16,r4
10008210:	203d9f0e 	bge	r4,zero,10007890 <__alt_data_end+0xf8007890>
10008214:	043fffc4 	movi	r16,-1
10008218:	003d9d06 	br	10007890 <__alt_data_end+0xf8007890>
1000821c:	8c401014 	ori	r17,r17,64
10008220:	b0c00007 	ldb	r3,0(r22)
10008224:	003d9906 	br	1000788c <__alt_data_end+0xf800788c>
10008228:	d9002217 	ldw	r4,136(sp)
1000822c:	d8001d85 	stb	zero,118(sp)
10008230:	20c00204 	addi	r3,r4,8
10008234:	24c00017 	ldw	r19,0(r4)
10008238:	25000117 	ldw	r20,4(r4)
1000823c:	8001e716 	blt	r16,zero,100089dc <___vfiprintf_internal_r+0x12c4>
10008240:	013fdfc4 	movi	r4,-129
10008244:	9d04b03a 	or	r2,r19,r20
10008248:	d8c02215 	stw	r3,136(sp)
1000824c:	8922703a 	and	r17,r17,r4
10008250:	002b883a 	mov	r21,zero
10008254:	103f2f1e 	bne	r2,zero,10007f14 <__alt_data_end+0xf8007f14>
10008258:	803e2f26 	beq	r16,zero,10007b18 <__alt_data_end+0xf8007b18>
1000825c:	0027883a 	mov	r19,zero
10008260:	9cc00c04 	addi	r19,r19,48
10008264:	dcc019c5 	stb	r19,103(sp)
10008268:	dd002817 	ldw	r20,160(sp)
1000826c:	ddc019c4 	addi	r23,sp,103
10008270:	003e2c06 	br	10007b24 <__alt_data_end+0xf8007b24>
10008274:	9cc03fcc 	andi	r19,r19,255
10008278:	b811883a 	mov	r8,r23
1000827c:	9802571e 	bne	r19,zero,10008bdc <___vfiprintf_internal_r+0x14c4>
10008280:	18005726 	beq	r3,zero,100083e0 <___vfiprintf_internal_r+0xcc8>
10008284:	04c00044 	movi	r19,1
10008288:	d8c01005 	stb	r3,64(sp)
1000828c:	d8001d85 	stb	zero,118(sp)
10008290:	9829883a 	mov	r20,r19
10008294:	ddc01004 	addi	r23,sp,64
10008298:	003f0a06 	br	10007ec4 <__alt_data_end+0xf8007ec4>
1000829c:	d9402017 	ldw	r5,128(sp)
100082a0:	d9002117 	ldw	r4,132(sp)
100082a4:	d9801a04 	addi	r6,sp,104
100082a8:	da802a15 	stw	r10,168(sp)
100082ac:	00076040 	call	10007604 <__sprint_r.part.0>
100082b0:	da802a17 	ldw	r10,168(sp)
100082b4:	1000501e 	bne	r2,zero,100083f8 <___vfiprintf_internal_r+0xce0>
100082b8:	d9801b17 	ldw	r6,108(sp)
100082bc:	d8801c17 	ldw	r2,112(sp)
100082c0:	d811883a 	mov	r8,sp
100082c4:	31000044 	addi	r4,r6,1
100082c8:	003e3606 	br	10007ba4 <__alt_data_end+0xf8007ba4>
100082cc:	d9001b17 	ldw	r4,108(sp)
100082d0:	d8801c17 	ldw	r2,112(sp)
100082d4:	21400044 	addi	r5,r4,1
100082d8:	d9801d87 	ldb	r6,118(sp)
100082dc:	303e5226 	beq	r6,zero,10007c28 <__alt_data_end+0xf8007c28>
100082e0:	01800044 	movi	r6,1
100082e4:	d9001d84 	addi	r4,sp,118
100082e8:	1185883a 	add	r2,r2,r6
100082ec:	41000015 	stw	r4,0(r8)
100082f0:	41800115 	stw	r6,4(r8)
100082f4:	d8801c15 	stw	r2,112(sp)
100082f8:	d9401b15 	stw	r5,108(sp)
100082fc:	010001c4 	movi	r4,7
10008300:	2140b00e 	bge	r4,r5,100085c4 <___vfiprintf_internal_r+0xeac>
10008304:	1000f61e 	bne	r2,zero,100086e0 <___vfiprintf_internal_r+0xfc8>
10008308:	3800b31e 	bne	r7,zero,100085d8 <___vfiprintf_internal_r+0xec0>
1000830c:	0009883a 	mov	r4,zero
10008310:	300b883a 	mov	r5,r6
10008314:	d811883a 	mov	r8,sp
10008318:	01802004 	movi	r6,128
1000831c:	19be5226 	beq	r3,r6,10007c68 <__alt_data_end+0xf8007c68>
10008320:	8521c83a 	sub	r16,r16,r20
10008324:	043e790e 	bge	zero,r16,10007d0c <__alt_data_end+0xf8007d0c>
10008328:	05400404 	movi	r21,16
1000832c:	ac01b00e 	bge	r21,r16,100089f0 <___vfiprintf_internal_r+0x12d8>
10008330:	01440074 	movhi	r5,4097
10008334:	2940b304 	addi	r5,r5,716
10008338:	d9402315 	stw	r5,140(sp)
1000833c:	070001c4 	movi	fp,7
10008340:	00000506 	br	10008358 <___vfiprintf_internal_r+0xc40>
10008344:	21400084 	addi	r5,r4,2
10008348:	42000204 	addi	r8,r8,8
1000834c:	1809883a 	mov	r4,r3
10008350:	843ffc04 	addi	r16,r16,-16
10008354:	ac000d0e 	bge	r21,r16,1000838c <___vfiprintf_internal_r+0xc74>
10008358:	10800404 	addi	r2,r2,16
1000835c:	20c00044 	addi	r3,r4,1
10008360:	44800015 	stw	r18,0(r8)
10008364:	45400115 	stw	r21,4(r8)
10008368:	d8801c15 	stw	r2,112(sp)
1000836c:	d8c01b15 	stw	r3,108(sp)
10008370:	e0fff40e 	bge	fp,r3,10008344 <__alt_data_end+0xf8008344>
10008374:	1000101e 	bne	r2,zero,100083b8 <___vfiprintf_internal_r+0xca0>
10008378:	843ffc04 	addi	r16,r16,-16
1000837c:	01400044 	movi	r5,1
10008380:	0009883a 	mov	r4,zero
10008384:	d811883a 	mov	r8,sp
10008388:	ac3ff316 	blt	r21,r16,10008358 <__alt_data_end+0xf8008358>
1000838c:	d8c02317 	ldw	r3,140(sp)
10008390:	1405883a 	add	r2,r2,r16
10008394:	44000115 	stw	r16,4(r8)
10008398:	40c00015 	stw	r3,0(r8)
1000839c:	d8801c15 	stw	r2,112(sp)
100083a0:	d9401b15 	stw	r5,108(sp)
100083a4:	00c001c4 	movi	r3,7
100083a8:	19401916 	blt	r3,r5,10008410 <___vfiprintf_internal_r+0xcf8>
100083ac:	42000204 	addi	r8,r8,8
100083b0:	29400044 	addi	r5,r5,1
100083b4:	003e5506 	br	10007d0c <__alt_data_end+0xf8007d0c>
100083b8:	d9402017 	ldw	r5,128(sp)
100083bc:	d9002117 	ldw	r4,132(sp)
100083c0:	d9801a04 	addi	r6,sp,104
100083c4:	00076040 	call	10007604 <__sprint_r.part.0>
100083c8:	10000b1e 	bne	r2,zero,100083f8 <___vfiprintf_internal_r+0xce0>
100083cc:	d9001b17 	ldw	r4,108(sp)
100083d0:	d8801c17 	ldw	r2,112(sp)
100083d4:	d811883a 	mov	r8,sp
100083d8:	21400044 	addi	r5,r4,1
100083dc:	003fdc06 	br	10008350 <__alt_data_end+0xf8008350>
100083e0:	d8801c17 	ldw	r2,112(sp)
100083e4:	10000426 	beq	r2,zero,100083f8 <___vfiprintf_internal_r+0xce0>
100083e8:	d9402017 	ldw	r5,128(sp)
100083ec:	d9002117 	ldw	r4,132(sp)
100083f0:	d9801a04 	addi	r6,sp,104
100083f4:	00076040 	call	10007604 <__sprint_r.part.0>
100083f8:	d9402017 	ldw	r5,128(sp)
100083fc:	2880030b 	ldhu	r2,12(r5)
10008400:	1080100c 	andi	r2,r2,64
10008404:	10014d1e 	bne	r2,zero,1000893c <___vfiprintf_internal_r+0x1224>
10008408:	d8802417 	ldw	r2,144(sp)
1000840c:	003d9706 	br	10007a6c <__alt_data_end+0xf8007a6c>
10008410:	1000d21e 	bne	r2,zero,1000875c <___vfiprintf_internal_r+0x1044>
10008414:	00c00044 	movi	r3,1
10008418:	a005883a 	mov	r2,r20
1000841c:	ddc00015 	stw	r23,0(sp)
10008420:	dd000115 	stw	r20,4(sp)
10008424:	dd001c15 	stw	r20,112(sp)
10008428:	d8c01b15 	stw	r3,108(sp)
1000842c:	d811883a 	mov	r8,sp
10008430:	42000204 	addi	r8,r8,8
10008434:	8c40010c 	andi	r17,r17,4
10008438:	88004026 	beq	r17,zero,1000853c <___vfiprintf_internal_r+0xe24>
1000843c:	d9002517 	ldw	r4,148(sp)
10008440:	24e3c83a 	sub	r17,r4,r19
10008444:	04403d0e 	bge	zero,r17,1000853c <___vfiprintf_internal_r+0xe24>
10008448:	04000404 	movi	r16,16
1000844c:	8441a90e 	bge	r16,r17,10008af4 <___vfiprintf_internal_r+0x13dc>
10008450:	00c40074 	movhi	r3,4097
10008454:	18c0b704 	addi	r3,r3,732
10008458:	d9001b17 	ldw	r4,108(sp)
1000845c:	d8c02315 	stw	r3,140(sp)
10008460:	050001c4 	movi	r20,7
10008464:	dd402117 	ldw	r21,132(sp)
10008468:	ddc02017 	ldw	r23,128(sp)
1000846c:	00000506 	br	10008484 <___vfiprintf_internal_r+0xd6c>
10008470:	21400084 	addi	r5,r4,2
10008474:	42000204 	addi	r8,r8,8
10008478:	1809883a 	mov	r4,r3
1000847c:	8c7ffc04 	addi	r17,r17,-16
10008480:	84400f0e 	bge	r16,r17,100084c0 <___vfiprintf_internal_r+0xda8>
10008484:	01440074 	movhi	r5,4097
10008488:	10800404 	addi	r2,r2,16
1000848c:	20c00044 	addi	r3,r4,1
10008490:	2940b704 	addi	r5,r5,732
10008494:	41400015 	stw	r5,0(r8)
10008498:	44000115 	stw	r16,4(r8)
1000849c:	d8801c15 	stw	r2,112(sp)
100084a0:	d8c01b15 	stw	r3,108(sp)
100084a4:	a0fff20e 	bge	r20,r3,10008470 <__alt_data_end+0xf8008470>
100084a8:	1000141e 	bne	r2,zero,100084fc <___vfiprintf_internal_r+0xde4>
100084ac:	8c7ffc04 	addi	r17,r17,-16
100084b0:	01400044 	movi	r5,1
100084b4:	0009883a 	mov	r4,zero
100084b8:	d811883a 	mov	r8,sp
100084bc:	847ff116 	blt	r16,r17,10008484 <__alt_data_end+0xf8008484>
100084c0:	d8c02317 	ldw	r3,140(sp)
100084c4:	1445883a 	add	r2,r2,r17
100084c8:	44400115 	stw	r17,4(r8)
100084cc:	40c00015 	stw	r3,0(r8)
100084d0:	d8801c15 	stw	r2,112(sp)
100084d4:	d9401b15 	stw	r5,108(sp)
100084d8:	00c001c4 	movi	r3,7
100084dc:	1940170e 	bge	r3,r5,1000853c <___vfiprintf_internal_r+0xe24>
100084e0:	1000101e 	bne	r2,zero,10008524 <___vfiprintf_internal_r+0xe0c>
100084e4:	d8802517 	ldw	r2,148(sp)
100084e8:	14c11616 	blt	r2,r19,10008944 <___vfiprintf_internal_r+0x122c>
100084ec:	d9002417 	ldw	r4,144(sp)
100084f0:	2089883a 	add	r4,r4,r2
100084f4:	d9002415 	stw	r4,144(sp)
100084f8:	003e1806 	br	10007d5c <__alt_data_end+0xf8007d5c>
100084fc:	d9801a04 	addi	r6,sp,104
10008500:	b80b883a 	mov	r5,r23
10008504:	a809883a 	mov	r4,r21
10008508:	00076040 	call	10007604 <__sprint_r.part.0>
1000850c:	103fba1e 	bne	r2,zero,100083f8 <__alt_data_end+0xf80083f8>
10008510:	d9001b17 	ldw	r4,108(sp)
10008514:	d8801c17 	ldw	r2,112(sp)
10008518:	d811883a 	mov	r8,sp
1000851c:	21400044 	addi	r5,r4,1
10008520:	003fd606 	br	1000847c <__alt_data_end+0xf800847c>
10008524:	d9402017 	ldw	r5,128(sp)
10008528:	d9002117 	ldw	r4,132(sp)
1000852c:	d9801a04 	addi	r6,sp,104
10008530:	00076040 	call	10007604 <__sprint_r.part.0>
10008534:	103fb01e 	bne	r2,zero,100083f8 <__alt_data_end+0xf80083f8>
10008538:	d8801c17 	ldw	r2,112(sp)
1000853c:	d8c02517 	ldw	r3,148(sp)
10008540:	1cc0010e 	bge	r3,r19,10008548 <___vfiprintf_internal_r+0xe30>
10008544:	9807883a 	mov	r3,r19
10008548:	d9002417 	ldw	r4,144(sp)
1000854c:	20c9883a 	add	r4,r4,r3
10008550:	d9002415 	stw	r4,144(sp)
10008554:	103e0126 	beq	r2,zero,10007d5c <__alt_data_end+0xf8007d5c>
10008558:	d9402017 	ldw	r5,128(sp)
1000855c:	d9002117 	ldw	r4,132(sp)
10008560:	d9801a04 	addi	r6,sp,104
10008564:	00076040 	call	10007604 <__sprint_r.part.0>
10008568:	103dfc26 	beq	r2,zero,10007d5c <__alt_data_end+0xf8007d5c>
1000856c:	003fa206 	br	100083f8 <__alt_data_end+0xf80083f8>
10008570:	d9402017 	ldw	r5,128(sp)
10008574:	d9002117 	ldw	r4,132(sp)
10008578:	d9801a04 	addi	r6,sp,104
1000857c:	d9c02b15 	stw	r7,172(sp)
10008580:	00076040 	call	10007604 <__sprint_r.part.0>
10008584:	d9c02b17 	ldw	r7,172(sp)
10008588:	103f9b1e 	bne	r2,zero,100083f8 <__alt_data_end+0xf80083f8>
1000858c:	d9001b17 	ldw	r4,108(sp)
10008590:	d8801c17 	ldw	r2,112(sp)
10008594:	d811883a 	mov	r8,sp
10008598:	21800044 	addi	r6,r4,1
1000859c:	003dbf06 	br	10007c9c <__alt_data_end+0xf8007c9c>
100085a0:	1000d81e 	bne	r2,zero,10008904 <___vfiprintf_internal_r+0x11ec>
100085a4:	d9001d87 	ldb	r4,118(sp)
100085a8:	20000a26 	beq	r4,zero,100085d4 <___vfiprintf_internal_r+0xebc>
100085ac:	00800044 	movi	r2,1
100085b0:	d9001d84 	addi	r4,sp,118
100085b4:	100b883a 	mov	r5,r2
100085b8:	d9000015 	stw	r4,0(sp)
100085bc:	d8800115 	stw	r2,4(sp)
100085c0:	d811883a 	mov	r8,sp
100085c4:	2809883a 	mov	r4,r5
100085c8:	42000204 	addi	r8,r8,8
100085cc:	29400044 	addi	r5,r5,1
100085d0:	003d9506 	br	10007c28 <__alt_data_end+0xf8007c28>
100085d4:	3800fd26 	beq	r7,zero,100089cc <___vfiprintf_internal_r+0x12b4>
100085d8:	00800084 	movi	r2,2
100085dc:	d9001d04 	addi	r4,sp,116
100085e0:	d9000015 	stw	r4,0(sp)
100085e4:	d8800115 	stw	r2,4(sp)
100085e8:	01400044 	movi	r5,1
100085ec:	d811883a 	mov	r8,sp
100085f0:	2809883a 	mov	r4,r5
100085f4:	42000204 	addi	r8,r8,8
100085f8:	29400044 	addi	r5,r5,1
100085fc:	003f4606 	br	10008318 <__alt_data_end+0xf8008318>
10008600:	d8802517 	ldw	r2,148(sp)
10008604:	14c0010e 	bge	r2,r19,1000860c <___vfiprintf_internal_r+0xef4>
10008608:	9805883a 	mov	r2,r19
1000860c:	d9402417 	ldw	r5,144(sp)
10008610:	288b883a 	add	r5,r5,r2
10008614:	d9402415 	stw	r5,144(sp)
10008618:	003dd006 	br	10007d5c <__alt_data_end+0xf8007d5c>
1000861c:	d8001d85 	stb	zero,118(sp)
10008620:	80005d16 	blt	r16,zero,10008798 <___vfiprintf_internal_r+0x1080>
10008624:	00ffdfc4 	movi	r3,-129
10008628:	9d04b03a 	or	r2,r19,r20
1000862c:	88e2703a 	and	r17,r17,r3
10008630:	103d3726 	beq	r2,zero,10007b10 <__alt_data_end+0xf8007b10>
10008634:	002b883a 	mov	r21,zero
10008638:	d9002617 	ldw	r4,152(sp)
1000863c:	ddc01a04 	addi	r23,sp,104
10008640:	988003cc 	andi	r2,r19,15
10008644:	a006973a 	slli	r3,r20,28
10008648:	2085883a 	add	r2,r4,r2
1000864c:	9826d13a 	srli	r19,r19,4
10008650:	10800003 	ldbu	r2,0(r2)
10008654:	a028d13a 	srli	r20,r20,4
10008658:	bdffffc4 	addi	r23,r23,-1
1000865c:	1ce6b03a 	or	r19,r3,r19
10008660:	b8800005 	stb	r2,0(r23)
10008664:	9d04b03a 	or	r2,r19,r20
10008668:	103ff51e 	bne	r2,zero,10008640 <__alt_data_end+0xf8008640>
1000866c:	d8801e17 	ldw	r2,120(sp)
10008670:	15e9c83a 	sub	r20,r2,r23
10008674:	003d2b06 	br	10007b24 <__alt_data_end+0xf8007b24>
10008678:	d9402017 	ldw	r5,128(sp)
1000867c:	d9002117 	ldw	r4,132(sp)
10008680:	d9801a04 	addi	r6,sp,104
10008684:	00076040 	call	10007604 <__sprint_r.part.0>
10008688:	103f5b1e 	bne	r2,zero,100083f8 <__alt_data_end+0xf80083f8>
1000868c:	d8801c17 	ldw	r2,112(sp)
10008690:	d811883a 	mov	r8,sp
10008694:	003f6706 	br	10008434 <__alt_data_end+0xf8008434>
10008698:	d9402017 	ldw	r5,128(sp)
1000869c:	d9002117 	ldw	r4,132(sp)
100086a0:	d9801a04 	addi	r6,sp,104
100086a4:	00076040 	call	10007604 <__sprint_r.part.0>
100086a8:	103f531e 	bne	r2,zero,100083f8 <__alt_data_end+0xf80083f8>
100086ac:	d811883a 	mov	r8,sp
100086b0:	003cd906 	br	10007a18 <__alt_data_end+0xf8007a18>
100086b4:	10803fcc 	andi	r2,r2,255
100086b8:	1080201c 	xori	r2,r2,128
100086bc:	10bfe004 	addi	r2,r2,-128
100086c0:	00c00c04 	movi	r3,48
100086c4:	10ffe926 	beq	r2,r3,1000866c <__alt_data_end+0xf800866c>
100086c8:	b8ffffc5 	stb	r3,-1(r23)
100086cc:	d8c01e17 	ldw	r3,120(sp)
100086d0:	b8bfffc4 	addi	r2,r23,-1
100086d4:	102f883a 	mov	r23,r2
100086d8:	18a9c83a 	sub	r20,r3,r2
100086dc:	003d1106 	br	10007b24 <__alt_data_end+0xf8007b24>
100086e0:	d9402017 	ldw	r5,128(sp)
100086e4:	d9002117 	ldw	r4,132(sp)
100086e8:	d9801a04 	addi	r6,sp,104
100086ec:	d8c02a15 	stw	r3,168(sp)
100086f0:	d9c02b15 	stw	r7,172(sp)
100086f4:	00076040 	call	10007604 <__sprint_r.part.0>
100086f8:	d8c02a17 	ldw	r3,168(sp)
100086fc:	d9c02b17 	ldw	r7,172(sp)
10008700:	103f3d1e 	bne	r2,zero,100083f8 <__alt_data_end+0xf80083f8>
10008704:	d9001b17 	ldw	r4,108(sp)
10008708:	d8801c17 	ldw	r2,112(sp)
1000870c:	d811883a 	mov	r8,sp
10008710:	21400044 	addi	r5,r4,1
10008714:	003d4406 	br	10007c28 <__alt_data_end+0xf8007c28>
10008718:	d9402017 	ldw	r5,128(sp)
1000871c:	d9002117 	ldw	r4,132(sp)
10008720:	d9801a04 	addi	r6,sp,104
10008724:	d8c02a15 	stw	r3,168(sp)
10008728:	00076040 	call	10007604 <__sprint_r.part.0>
1000872c:	d8c02a17 	ldw	r3,168(sp)
10008730:	103f311e 	bne	r2,zero,100083f8 <__alt_data_end+0xf80083f8>
10008734:	d9001b17 	ldw	r4,108(sp)
10008738:	d8801c17 	ldw	r2,112(sp)
1000873c:	d811883a 	mov	r8,sp
10008740:	21400044 	addi	r5,r4,1
10008744:	003ef406 	br	10008318 <__alt_data_end+0xf8008318>
10008748:	1000bd1e 	bne	r2,zero,10008a40 <___vfiprintf_internal_r+0x1328>
1000874c:	01400044 	movi	r5,1
10008750:	0009883a 	mov	r4,zero
10008754:	d811883a 	mov	r8,sp
10008758:	003ef106 	br	10008320 <__alt_data_end+0xf8008320>
1000875c:	d9402017 	ldw	r5,128(sp)
10008760:	d9002117 	ldw	r4,132(sp)
10008764:	d9801a04 	addi	r6,sp,104
10008768:	00076040 	call	10007604 <__sprint_r.part.0>
1000876c:	103f221e 	bne	r2,zero,100083f8 <__alt_data_end+0xf80083f8>
10008770:	d9401b17 	ldw	r5,108(sp)
10008774:	d8801c17 	ldw	r2,112(sp)
10008778:	d811883a 	mov	r8,sp
1000877c:	29400044 	addi	r5,r5,1
10008780:	003d6206 	br	10007d0c <__alt_data_end+0xf8007d0c>
10008784:	01440074 	movhi	r5,4097
10008788:	29405204 	addi	r5,r5,328
1000878c:	d9402615 	stw	r5,152(sp)
10008790:	d8c02215 	stw	r3,136(sp)
10008794:	1023883a 	mov	r17,r2
10008798:	9d04b03a 	or	r2,r19,r20
1000879c:	103fa51e 	bne	r2,zero,10008634 <__alt_data_end+0xf8008634>
100087a0:	002b883a 	mov	r21,zero
100087a4:	00800084 	movi	r2,2
100087a8:	003e4a06 	br	100080d4 <__alt_data_end+0xf80080d4>
100087ac:	01440074 	movhi	r5,4097
100087b0:	29405204 	addi	r5,r5,328
100087b4:	002b883a 	mov	r21,zero
100087b8:	d9402615 	stw	r5,152(sp)
100087bc:	003f9e06 	br	10008638 <__alt_data_end+0xf8008638>
100087c0:	d9402217 	ldw	r5,136(sp)
100087c4:	d8001d85 	stb	zero,118(sp)
100087c8:	0029883a 	mov	r20,zero
100087cc:	28800104 	addi	r2,r5,4
100087d0:	2cc00017 	ldw	r19,0(r5)
100087d4:	803e3a16 	blt	r16,zero,100080c0 <__alt_data_end+0xf80080c0>
100087d8:	00ffdfc4 	movi	r3,-129
100087dc:	d8802215 	stw	r2,136(sp)
100087e0:	88e2703a 	and	r17,r17,r3
100087e4:	002b883a 	mov	r21,zero
100087e8:	983e9b26 	beq	r19,zero,10008258 <__alt_data_end+0xf8008258>
100087ec:	00800244 	movi	r2,9
100087f0:	14fdc936 	bltu	r2,r19,10007f18 <__alt_data_end+0xf8007f18>
100087f4:	003e9a06 	br	10008260 <__alt_data_end+0xf8008260>
100087f8:	00800c04 	movi	r2,48
100087fc:	d8c01d45 	stb	r3,117(sp)
10008800:	d8801d05 	stb	r2,116(sp)
10008804:	d8001d85 	stb	zero,118(sp)
10008808:	88c00094 	ori	r3,r17,2
1000880c:	80009c16 	blt	r16,zero,10008a80 <___vfiprintf_internal_r+0x1368>
10008810:	00bfdfc4 	movi	r2,-129
10008814:	88a2703a 	and	r17,r17,r2
10008818:	8c400094 	ori	r17,r17,2
1000881c:	002b883a 	mov	r21,zero
10008820:	003f8506 	br	10008638 <__alt_data_end+0xf8008638>
10008824:	b029883a 	mov	r20,r22
10008828:	003c0b06 	br	10007858 <__alt_data_end+0xf8007858>
1000882c:	04e7c83a 	sub	r19,zero,r19
10008830:	05400b44 	movi	r21,45
10008834:	9804c03a 	cmpne	r2,r19,zero
10008838:	0529c83a 	sub	r20,zero,r20
1000883c:	dd401d85 	stb	r21,118(sp)
10008840:	a0a9c83a 	sub	r20,r20,r2
10008844:	80009716 	blt	r16,zero,10008aa4 <___vfiprintf_internal_r+0x138c>
10008848:	00bfdfc4 	movi	r2,-129
1000884c:	88a2703a 	and	r17,r17,r2
10008850:	003db006 	br	10007f14 <__alt_data_end+0xf8007f14>
10008854:	b0c00007 	ldb	r3,0(r22)
10008858:	003c0c06 	br	1000788c <__alt_data_end+0xf800788c>
1000885c:	8880100c 	andi	r2,r17,64
10008860:	d8001d85 	stb	zero,118(sp)
10008864:	1000461e 	bne	r2,zero,10008980 <___vfiprintf_internal_r+0x1268>
10008868:	d9002217 	ldw	r4,136(sp)
1000886c:	0029883a 	mov	r20,zero
10008870:	20800104 	addi	r2,r4,4
10008874:	24c00017 	ldw	r19,0(r4)
10008878:	803df80e 	bge	r16,zero,1000805c <__alt_data_end+0xf800805c>
1000887c:	9d06b03a 	or	r3,r19,r20
10008880:	d8802215 	stw	r2,136(sp)
10008884:	183d5e1e 	bne	r3,zero,10007e00 <__alt_data_end+0xf8007e00>
10008888:	002b883a 	mov	r21,zero
1000888c:	0005883a 	mov	r2,zero
10008890:	003e1006 	br	100080d4 <__alt_data_end+0xf80080d4>
10008894:	8880040c 	andi	r2,r17,16
10008898:	1000321e 	bne	r2,zero,10008964 <___vfiprintf_internal_r+0x124c>
1000889c:	8c40100c 	andi	r17,r17,64
100088a0:	88008d26 	beq	r17,zero,10008ad8 <___vfiprintf_internal_r+0x13c0>
100088a4:	d9402217 	ldw	r5,136(sp)
100088a8:	d8c02417 	ldw	r3,144(sp)
100088ac:	28800017 	ldw	r2,0(r5)
100088b0:	29400104 	addi	r5,r5,4
100088b4:	d9402215 	stw	r5,136(sp)
100088b8:	10c0000d 	sth	r3,0(r2)
100088bc:	003bca06 	br	100077e8 <__alt_data_end+0xf80077e8>
100088c0:	8880100c 	andi	r2,r17,64
100088c4:	10003a26 	beq	r2,zero,100089b0 <___vfiprintf_internal_r+0x1298>
100088c8:	d8802217 	ldw	r2,136(sp)
100088cc:	14c0000f 	ldh	r19,0(r2)
100088d0:	10800104 	addi	r2,r2,4
100088d4:	d8802215 	stw	r2,136(sp)
100088d8:	9829d7fa 	srai	r20,r19,31
100088dc:	a005883a 	mov	r2,r20
100088e0:	003d8506 	br	10007ef8 <__alt_data_end+0xf8007ef8>
100088e4:	8880100c 	andi	r2,r17,64
100088e8:	10002b26 	beq	r2,zero,10008998 <___vfiprintf_internal_r+0x1280>
100088ec:	d8802217 	ldw	r2,136(sp)
100088f0:	0029883a 	mov	r20,zero
100088f4:	14c0000b 	ldhu	r19,0(r2)
100088f8:	10800104 	addi	r2,r2,4
100088fc:	d8802215 	stw	r2,136(sp)
10008900:	003d5d06 	br	10007e78 <__alt_data_end+0xf8007e78>
10008904:	d9402017 	ldw	r5,128(sp)
10008908:	d9002117 	ldw	r4,132(sp)
1000890c:	d9801a04 	addi	r6,sp,104
10008910:	d8c02a15 	stw	r3,168(sp)
10008914:	d9c02b15 	stw	r7,172(sp)
10008918:	00076040 	call	10007604 <__sprint_r.part.0>
1000891c:	d8c02a17 	ldw	r3,168(sp)
10008920:	d9c02b17 	ldw	r7,172(sp)
10008924:	103eb41e 	bne	r2,zero,100083f8 <__alt_data_end+0xf80083f8>
10008928:	d9001b17 	ldw	r4,108(sp)
1000892c:	d8801c17 	ldw	r2,112(sp)
10008930:	d811883a 	mov	r8,sp
10008934:	21400044 	addi	r5,r4,1
10008938:	003e6706 	br	100082d8 <__alt_data_end+0xf80082d8>
1000893c:	00bfffc4 	movi	r2,-1
10008940:	003c4a06 	br	10007a6c <__alt_data_end+0xf8007a6c>
10008944:	9805883a 	mov	r2,r19
10008948:	003ee806 	br	100084ec <__alt_data_end+0xf80084ec>
1000894c:	d8c02217 	ldw	r3,136(sp)
10008950:	0029883a 	mov	r20,zero
10008954:	18800104 	addi	r2,r3,4
10008958:	1cc0000b 	ldhu	r19,0(r3)
1000895c:	803f9e0e 	bge	r16,zero,100087d8 <__alt_data_end+0xf80087d8>
10008960:	003dd706 	br	100080c0 <__alt_data_end+0xf80080c0>
10008964:	d8c02217 	ldw	r3,136(sp)
10008968:	d9002417 	ldw	r4,144(sp)
1000896c:	18800017 	ldw	r2,0(r3)
10008970:	18c00104 	addi	r3,r3,4
10008974:	d8c02215 	stw	r3,136(sp)
10008978:	11000015 	stw	r4,0(r2)
1000897c:	003b9a06 	br	100077e8 <__alt_data_end+0xf80077e8>
10008980:	d8c02217 	ldw	r3,136(sp)
10008984:	0029883a 	mov	r20,zero
10008988:	18800104 	addi	r2,r3,4
1000898c:	1cc0000b 	ldhu	r19,0(r3)
10008990:	803db20e 	bge	r16,zero,1000805c <__alt_data_end+0xf800805c>
10008994:	003fb906 	br	1000887c <__alt_data_end+0xf800887c>
10008998:	d9002217 	ldw	r4,136(sp)
1000899c:	0029883a 	mov	r20,zero
100089a0:	24c00017 	ldw	r19,0(r4)
100089a4:	21000104 	addi	r4,r4,4
100089a8:	d9002215 	stw	r4,136(sp)
100089ac:	003d3206 	br	10007e78 <__alt_data_end+0xf8007e78>
100089b0:	d8c02217 	ldw	r3,136(sp)
100089b4:	1cc00017 	ldw	r19,0(r3)
100089b8:	18c00104 	addi	r3,r3,4
100089bc:	d8c02215 	stw	r3,136(sp)
100089c0:	9829d7fa 	srai	r20,r19,31
100089c4:	a005883a 	mov	r2,r20
100089c8:	003d4b06 	br	10007ef8 <__alt_data_end+0xf8007ef8>
100089cc:	0009883a 	mov	r4,zero
100089d0:	01400044 	movi	r5,1
100089d4:	d811883a 	mov	r8,sp
100089d8:	003e4f06 	br	10008318 <__alt_data_end+0xf8008318>
100089dc:	d8c02215 	stw	r3,136(sp)
100089e0:	002b883a 	mov	r21,zero
100089e4:	003db806 	br	100080c8 <__alt_data_end+0xf80080c8>
100089e8:	d811883a 	mov	r8,sp
100089ec:	003e9606 	br	10008448 <__alt_data_end+0xf8008448>
100089f0:	01040074 	movhi	r4,4097
100089f4:	2100b304 	addi	r4,r4,716
100089f8:	d9002315 	stw	r4,140(sp)
100089fc:	003e6306 	br	1000838c <__alt_data_end+0xf800838c>
10008a00:	b0c00043 	ldbu	r3,1(r22)
10008a04:	8c400814 	ori	r17,r17,32
10008a08:	b5800044 	addi	r22,r22,1
10008a0c:	18c03fcc 	andi	r3,r3,255
10008a10:	18c0201c 	xori	r3,r3,128
10008a14:	18ffe004 	addi	r3,r3,-128
10008a18:	003b9c06 	br	1000788c <__alt_data_end+0xf800788c>
10008a1c:	b809883a 	mov	r4,r23
10008a20:	da002a15 	stw	r8,168(sp)
10008a24:	000756c0 	call	1000756c <strlen>
10008a28:	1029883a 	mov	r20,r2
10008a2c:	dd401d83 	ldbu	r21,118(sp)
10008a30:	df002215 	stw	fp,136(sp)
10008a34:	0021883a 	mov	r16,zero
10008a38:	da002a17 	ldw	r8,168(sp)
10008a3c:	003c3906 	br	10007b24 <__alt_data_end+0xf8007b24>
10008a40:	d9402017 	ldw	r5,128(sp)
10008a44:	d9002117 	ldw	r4,132(sp)
10008a48:	d9801a04 	addi	r6,sp,104
10008a4c:	00076040 	call	10007604 <__sprint_r.part.0>
10008a50:	103e691e 	bne	r2,zero,100083f8 <__alt_data_end+0xf80083f8>
10008a54:	d9001b17 	ldw	r4,108(sp)
10008a58:	d8801c17 	ldw	r2,112(sp)
10008a5c:	d811883a 	mov	r8,sp
10008a60:	21400044 	addi	r5,r4,1
10008a64:	003e2e06 	br	10008320 <__alt_data_end+0xf8008320>
10008a68:	01040074 	movhi	r4,4097
10008a6c:	2100b704 	addi	r4,r4,732
10008a70:	d9002315 	stw	r4,140(sp)
10008a74:	d9001b17 	ldw	r4,108(sp)
10008a78:	21000044 	addi	r4,r4,1
10008a7c:	003c5e06 	br	10007bf8 <__alt_data_end+0xf8007bf8>
10008a80:	002b883a 	mov	r21,zero
10008a84:	00800084 	movi	r2,2
10008a88:	10803fcc 	andi	r2,r2,255
10008a8c:	01000044 	movi	r4,1
10008a90:	11002b26 	beq	r2,r4,10008b40 <___vfiprintf_internal_r+0x1428>
10008a94:	01000084 	movi	r4,2
10008a98:	11002b1e 	bne	r2,r4,10008b48 <___vfiprintf_internal_r+0x1430>
10008a9c:	1823883a 	mov	r17,r3
10008aa0:	003ee506 	br	10008638 <__alt_data_end+0xf8008638>
10008aa4:	8807883a 	mov	r3,r17
10008aa8:	00800044 	movi	r2,1
10008aac:	003ff606 	br	10008a88 <__alt_data_end+0xf8008a88>
10008ab0:	00800184 	movi	r2,6
10008ab4:	1400012e 	bgeu	r2,r16,10008abc <___vfiprintf_internal_r+0x13a4>
10008ab8:	1021883a 	mov	r16,r2
10008abc:	8029883a 	mov	r20,r16
10008ac0:	8027883a 	mov	r19,r16
10008ac4:	80002216 	blt	r16,zero,10008b50 <___vfiprintf_internal_r+0x1438>
10008ac8:	05c40074 	movhi	r23,4097
10008acc:	df002215 	stw	fp,136(sp)
10008ad0:	bdc05704 	addi	r23,r23,348
10008ad4:	003cfb06 	br	10007ec4 <__alt_data_end+0xf8007ec4>
10008ad8:	d9002217 	ldw	r4,136(sp)
10008adc:	d9402417 	ldw	r5,144(sp)
10008ae0:	20800017 	ldw	r2,0(r4)
10008ae4:	21000104 	addi	r4,r4,4
10008ae8:	d9002215 	stw	r4,136(sp)
10008aec:	11400015 	stw	r5,0(r2)
10008af0:	003b3d06 	br	100077e8 <__alt_data_end+0xf80077e8>
10008af4:	01440074 	movhi	r5,4097
10008af8:	2940b704 	addi	r5,r5,732
10008afc:	d9402315 	stw	r5,140(sp)
10008b00:	d9401b17 	ldw	r5,108(sp)
10008b04:	29400044 	addi	r5,r5,1
10008b08:	003e6d06 	br	100084c0 <__alt_data_end+0xf80084c0>
10008b0c:	8029883a 	mov	r20,r16
10008b10:	dd401d83 	ldbu	r21,118(sp)
10008b14:	df002215 	stw	fp,136(sp)
10008b18:	0021883a 	mov	r16,zero
10008b1c:	003c0106 	br	10007b24 <__alt_data_end+0xf8007b24>
10008b20:	00c40074 	movhi	r3,4097
10008b24:	18c0b304 	addi	r3,r3,716
10008b28:	d8c02315 	stw	r3,140(sp)
10008b2c:	280d883a 	mov	r6,r5
10008b30:	003c6906 	br	10007cd8 <__alt_data_end+0xf8007cd8>
10008b34:	802d883a 	mov	r22,r16
10008b38:	0021883a 	mov	r16,zero
10008b3c:	003b5406 	br	10007890 <__alt_data_end+0xf8007890>
10008b40:	1823883a 	mov	r17,r3
10008b44:	003cf306 	br	10007f14 <__alt_data_end+0xf8007f14>
10008b48:	1823883a 	mov	r17,r3
10008b4c:	003cad06 	br	10007e04 <__alt_data_end+0xf8007e04>
10008b50:	0027883a 	mov	r19,zero
10008b54:	003fdc06 	br	10008ac8 <__alt_data_end+0xf8008ac8>
10008b58:	d9402217 	ldw	r5,136(sp)
10008b5c:	8005883a 	mov	r2,r16
10008b60:	b0c00043 	ldbu	r3,1(r22)
10008b64:	2c000017 	ldw	r16,0(r5)
10008b68:	29000104 	addi	r4,r5,4
10008b6c:	d9002215 	stw	r4,136(sp)
10008b70:	102d883a 	mov	r22,r2
10008b74:	803fa50e 	bge	r16,zero,10008a0c <__alt_data_end+0xf8008a0c>
10008b78:	18c03fcc 	andi	r3,r3,255
10008b7c:	18c0201c 	xori	r3,r3,128
10008b80:	043fffc4 	movi	r16,-1
10008b84:	18ffe004 	addi	r3,r3,-128
10008b88:	003b4006 	br	1000788c <__alt_data_end+0xf800788c>
10008b8c:	d9402303 	ldbu	r5,140(sp)
10008b90:	d9401d85 	stb	r5,118(sp)
10008b94:	003cae06 	br	10007e50 <__alt_data_end+0xf8007e50>
10008b98:	d8c02303 	ldbu	r3,140(sp)
10008b9c:	d8c01d85 	stb	r3,118(sp)
10008ba0:	003d1406 	br	10007ff4 <__alt_data_end+0xf8007ff4>
10008ba4:	d8c02303 	ldbu	r3,140(sp)
10008ba8:	d8c01d85 	stb	r3,118(sp)
10008bac:	003cca06 	br	10007ed8 <__alt_data_end+0xf8007ed8>
10008bb0:	8880004c 	andi	r2,r17,1
10008bb4:	002b883a 	mov	r21,zero
10008bb8:	10000526 	beq	r2,zero,10008bd0 <___vfiprintf_internal_r+0x14b8>
10008bbc:	00800c04 	movi	r2,48
10008bc0:	d88019c5 	stb	r2,103(sp)
10008bc4:	dd002817 	ldw	r20,160(sp)
10008bc8:	ddc019c4 	addi	r23,sp,103
10008bcc:	003bd506 	br	10007b24 <__alt_data_end+0xf8007b24>
10008bd0:	0029883a 	mov	r20,zero
10008bd4:	ddc01a04 	addi	r23,sp,104
10008bd8:	003bd206 	br	10007b24 <__alt_data_end+0xf8007b24>
10008bdc:	d9002303 	ldbu	r4,140(sp)
10008be0:	d9001d85 	stb	r4,118(sp)
10008be4:	003da606 	br	10008280 <__alt_data_end+0xf8008280>
10008be8:	d8c02303 	ldbu	r3,140(sp)
10008bec:	d8c01d85 	stb	r3,118(sp)
10008bf0:	003c7606 	br	10007dcc <__alt_data_end+0xf8007dcc>
10008bf4:	d8c02303 	ldbu	r3,140(sp)
10008bf8:	d8c01d85 	stb	r3,118(sp)
10008bfc:	003c6506 	br	10007d94 <__alt_data_end+0xf8007d94>
10008c00:	d9002303 	ldbu	r4,140(sp)
10008c04:	d9001d85 	stb	r4,118(sp)
10008c08:	003d3d06 	br	10008100 <__alt_data_end+0xf8008100>
10008c0c:	d8c02303 	ldbu	r3,140(sp)
10008c10:	d8c01d85 	stb	r3,118(sp)
10008c14:	003d1d06 	br	1000808c <__alt_data_end+0xf800808c>
10008c18:	d8c02303 	ldbu	r3,140(sp)
10008c1c:	d8c01d85 	stb	r3,118(sp)
10008c20:	003d0306 	br	10008030 <__alt_data_end+0xf8008030>

10008c24 <__vfiprintf_internal>:
10008c24:	00840074 	movhi	r2,4097
10008c28:	1087b604 	addi	r2,r2,7896
10008c2c:	300f883a 	mov	r7,r6
10008c30:	280d883a 	mov	r6,r5
10008c34:	200b883a 	mov	r5,r4
10008c38:	11000017 	ldw	r4,0(r2)
10008c3c:	00077181 	jmpi	10007718 <___vfiprintf_internal_r>

10008c40 <__sbprintf>:
10008c40:	2880030b 	ldhu	r2,12(r5)
10008c44:	2ac01917 	ldw	r11,100(r5)
10008c48:	2a80038b 	ldhu	r10,14(r5)
10008c4c:	2a400717 	ldw	r9,28(r5)
10008c50:	2a000917 	ldw	r8,36(r5)
10008c54:	defee204 	addi	sp,sp,-1144
10008c58:	00c10004 	movi	r3,1024
10008c5c:	dc011a15 	stw	r16,1128(sp)
10008c60:	10bfff4c 	andi	r2,r2,65533
10008c64:	2821883a 	mov	r16,r5
10008c68:	d8cb883a 	add	r5,sp,r3
10008c6c:	dc811c15 	stw	r18,1136(sp)
10008c70:	dc411b15 	stw	r17,1132(sp)
10008c74:	dfc11d15 	stw	ra,1140(sp)
10008c78:	2025883a 	mov	r18,r4
10008c7c:	d881030d 	sth	r2,1036(sp)
10008c80:	dac11915 	stw	r11,1124(sp)
10008c84:	da81038d 	sth	r10,1038(sp)
10008c88:	da410715 	stw	r9,1052(sp)
10008c8c:	da010915 	stw	r8,1060(sp)
10008c90:	dec10015 	stw	sp,1024(sp)
10008c94:	dec10415 	stw	sp,1040(sp)
10008c98:	d8c10215 	stw	r3,1032(sp)
10008c9c:	d8c10515 	stw	r3,1044(sp)
10008ca0:	d8010615 	stw	zero,1048(sp)
10008ca4:	00077180 	call	10007718 <___vfiprintf_internal_r>
10008ca8:	1023883a 	mov	r17,r2
10008cac:	10000416 	blt	r2,zero,10008cc0 <__sbprintf+0x80>
10008cb0:	d9410004 	addi	r5,sp,1024
10008cb4:	9009883a 	mov	r4,r18
10008cb8:	0004b2c0 	call	10004b2c <_fflush_r>
10008cbc:	10000d1e 	bne	r2,zero,10008cf4 <__sbprintf+0xb4>
10008cc0:	d881030b 	ldhu	r2,1036(sp)
10008cc4:	1080100c 	andi	r2,r2,64
10008cc8:	10000326 	beq	r2,zero,10008cd8 <__sbprintf+0x98>
10008ccc:	8080030b 	ldhu	r2,12(r16)
10008cd0:	10801014 	ori	r2,r2,64
10008cd4:	8080030d 	sth	r2,12(r16)
10008cd8:	8805883a 	mov	r2,r17
10008cdc:	dfc11d17 	ldw	ra,1140(sp)
10008ce0:	dc811c17 	ldw	r18,1136(sp)
10008ce4:	dc411b17 	ldw	r17,1132(sp)
10008ce8:	dc011a17 	ldw	r16,1128(sp)
10008cec:	dec11e04 	addi	sp,sp,1144
10008cf0:	f800283a 	ret
10008cf4:	047fffc4 	movi	r17,-1
10008cf8:	003ff106 	br	10008cc0 <__alt_data_end+0xf8008cc0>

10008cfc <_write_r>:
10008cfc:	defffd04 	addi	sp,sp,-12
10008d00:	2805883a 	mov	r2,r5
10008d04:	dc000015 	stw	r16,0(sp)
10008d08:	04040074 	movhi	r16,4097
10008d0c:	dc400115 	stw	r17,4(sp)
10008d10:	300b883a 	mov	r5,r6
10008d14:	840e8804 	addi	r16,r16,14880
10008d18:	2023883a 	mov	r17,r4
10008d1c:	380d883a 	mov	r6,r7
10008d20:	1009883a 	mov	r4,r2
10008d24:	dfc00215 	stw	ra,8(sp)
10008d28:	80000015 	stw	zero,0(r16)
10008d2c:	000e0ac0 	call	1000e0ac <write>
10008d30:	00ffffc4 	movi	r3,-1
10008d34:	10c00526 	beq	r2,r3,10008d4c <_write_r+0x50>
10008d38:	dfc00217 	ldw	ra,8(sp)
10008d3c:	dc400117 	ldw	r17,4(sp)
10008d40:	dc000017 	ldw	r16,0(sp)
10008d44:	dec00304 	addi	sp,sp,12
10008d48:	f800283a 	ret
10008d4c:	80c00017 	ldw	r3,0(r16)
10008d50:	183ff926 	beq	r3,zero,10008d38 <__alt_data_end+0xf8008d38>
10008d54:	88c00015 	stw	r3,0(r17)
10008d58:	003ff706 	br	10008d38 <__alt_data_end+0xf8008d38>

10008d5c <_close_r>:
10008d5c:	defffd04 	addi	sp,sp,-12
10008d60:	dc000015 	stw	r16,0(sp)
10008d64:	04040074 	movhi	r16,4097
10008d68:	dc400115 	stw	r17,4(sp)
10008d6c:	840e8804 	addi	r16,r16,14880
10008d70:	2023883a 	mov	r17,r4
10008d74:	2809883a 	mov	r4,r5
10008d78:	dfc00215 	stw	ra,8(sp)
10008d7c:	80000015 	stw	zero,0(r16)
10008d80:	000d8240 	call	1000d824 <close>
10008d84:	00ffffc4 	movi	r3,-1
10008d88:	10c00526 	beq	r2,r3,10008da0 <_close_r+0x44>
10008d8c:	dfc00217 	ldw	ra,8(sp)
10008d90:	dc400117 	ldw	r17,4(sp)
10008d94:	dc000017 	ldw	r16,0(sp)
10008d98:	dec00304 	addi	sp,sp,12
10008d9c:	f800283a 	ret
10008da0:	80c00017 	ldw	r3,0(r16)
10008da4:	183ff926 	beq	r3,zero,10008d8c <__alt_data_end+0xf8008d8c>
10008da8:	88c00015 	stw	r3,0(r17)
10008dac:	003ff706 	br	10008d8c <__alt_data_end+0xf8008d8c>

10008db0 <_calloc_r>:
10008db0:	defffe04 	addi	sp,sp,-8
10008db4:	2805883a 	mov	r2,r5
10008db8:	dc000015 	stw	r16,0(sp)
10008dbc:	300b883a 	mov	r5,r6
10008dc0:	2021883a 	mov	r16,r4
10008dc4:	1009883a 	mov	r4,r2
10008dc8:	dfc00115 	stw	ra,4(sp)
10008dcc:	000097c0 	call	1000097c <__mulsi3>
10008dd0:	100b883a 	mov	r5,r2
10008dd4:	8009883a 	mov	r4,r16
10008dd8:	00057bc0 	call	100057bc <_malloc_r>
10008ddc:	10002926 	beq	r2,zero,10008e84 <_calloc_r+0xd4>
10008de0:	11bfff17 	ldw	r6,-4(r2)
10008de4:	1021883a 	mov	r16,r2
10008de8:	00bfff04 	movi	r2,-4
10008dec:	308c703a 	and	r6,r6,r2
10008df0:	00c00904 	movi	r3,36
10008df4:	308d883a 	add	r6,r6,r2
10008df8:	19801636 	bltu	r3,r6,10008e54 <_calloc_r+0xa4>
10008dfc:	008004c4 	movi	r2,19
10008e00:	11800b2e 	bgeu	r2,r6,10008e30 <_calloc_r+0x80>
10008e04:	80000015 	stw	zero,0(r16)
10008e08:	80000115 	stw	zero,4(r16)
10008e0c:	008006c4 	movi	r2,27
10008e10:	11801a2e 	bgeu	r2,r6,10008e7c <_calloc_r+0xcc>
10008e14:	80000215 	stw	zero,8(r16)
10008e18:	80000315 	stw	zero,12(r16)
10008e1c:	30c0151e 	bne	r6,r3,10008e74 <_calloc_r+0xc4>
10008e20:	80000415 	stw	zero,16(r16)
10008e24:	80800604 	addi	r2,r16,24
10008e28:	80000515 	stw	zero,20(r16)
10008e2c:	00000106 	br	10008e34 <_calloc_r+0x84>
10008e30:	8005883a 	mov	r2,r16
10008e34:	10000015 	stw	zero,0(r2)
10008e38:	10000115 	stw	zero,4(r2)
10008e3c:	10000215 	stw	zero,8(r2)
10008e40:	8005883a 	mov	r2,r16
10008e44:	dfc00117 	ldw	ra,4(sp)
10008e48:	dc000017 	ldw	r16,0(sp)
10008e4c:	dec00204 	addi	sp,sp,8
10008e50:	f800283a 	ret
10008e54:	000b883a 	mov	r5,zero
10008e58:	8009883a 	mov	r4,r16
10008e5c:	00060ac0 	call	100060ac <memset>
10008e60:	8005883a 	mov	r2,r16
10008e64:	dfc00117 	ldw	ra,4(sp)
10008e68:	dc000017 	ldw	r16,0(sp)
10008e6c:	dec00204 	addi	sp,sp,8
10008e70:	f800283a 	ret
10008e74:	80800404 	addi	r2,r16,16
10008e78:	003fee06 	br	10008e34 <__alt_data_end+0xf8008e34>
10008e7c:	80800204 	addi	r2,r16,8
10008e80:	003fec06 	br	10008e34 <__alt_data_end+0xf8008e34>
10008e84:	0005883a 	mov	r2,zero
10008e88:	003fee06 	br	10008e44 <__alt_data_end+0xf8008e44>

10008e8c <_fclose_r>:
10008e8c:	28003926 	beq	r5,zero,10008f74 <_fclose_r+0xe8>
10008e90:	defffc04 	addi	sp,sp,-16
10008e94:	dc400115 	stw	r17,4(sp)
10008e98:	dc000015 	stw	r16,0(sp)
10008e9c:	dfc00315 	stw	ra,12(sp)
10008ea0:	dc800215 	stw	r18,8(sp)
10008ea4:	2023883a 	mov	r17,r4
10008ea8:	2821883a 	mov	r16,r5
10008eac:	20000226 	beq	r4,zero,10008eb8 <_fclose_r+0x2c>
10008eb0:	20800e17 	ldw	r2,56(r4)
10008eb4:	10002726 	beq	r2,zero,10008f54 <_fclose_r+0xc8>
10008eb8:	8080030f 	ldh	r2,12(r16)
10008ebc:	1000071e 	bne	r2,zero,10008edc <_fclose_r+0x50>
10008ec0:	0005883a 	mov	r2,zero
10008ec4:	dfc00317 	ldw	ra,12(sp)
10008ec8:	dc800217 	ldw	r18,8(sp)
10008ecc:	dc400117 	ldw	r17,4(sp)
10008ed0:	dc000017 	ldw	r16,0(sp)
10008ed4:	dec00404 	addi	sp,sp,16
10008ed8:	f800283a 	ret
10008edc:	800b883a 	mov	r5,r16
10008ee0:	8809883a 	mov	r4,r17
10008ee4:	00049100 	call	10004910 <__sflush_r>
10008ee8:	1025883a 	mov	r18,r2
10008eec:	80800b17 	ldw	r2,44(r16)
10008ef0:	10000426 	beq	r2,zero,10008f04 <_fclose_r+0x78>
10008ef4:	81400717 	ldw	r5,28(r16)
10008ef8:	8809883a 	mov	r4,r17
10008efc:	103ee83a 	callr	r2
10008f00:	10001616 	blt	r2,zero,10008f5c <_fclose_r+0xd0>
10008f04:	8080030b 	ldhu	r2,12(r16)
10008f08:	1080200c 	andi	r2,r2,128
10008f0c:	1000151e 	bne	r2,zero,10008f64 <_fclose_r+0xd8>
10008f10:	81400c17 	ldw	r5,48(r16)
10008f14:	28000526 	beq	r5,zero,10008f2c <_fclose_r+0xa0>
10008f18:	80801004 	addi	r2,r16,64
10008f1c:	28800226 	beq	r5,r2,10008f28 <_fclose_r+0x9c>
10008f20:	8809883a 	mov	r4,r17
10008f24:	000508c0 	call	1000508c <_free_r>
10008f28:	80000c15 	stw	zero,48(r16)
10008f2c:	81401117 	ldw	r5,68(r16)
10008f30:	28000326 	beq	r5,zero,10008f40 <_fclose_r+0xb4>
10008f34:	8809883a 	mov	r4,r17
10008f38:	000508c0 	call	1000508c <_free_r>
10008f3c:	80001115 	stw	zero,68(r16)
10008f40:	0004f280 	call	10004f28 <__sfp_lock_acquire>
10008f44:	8000030d 	sth	zero,12(r16)
10008f48:	0004f2c0 	call	10004f2c <__sfp_lock_release>
10008f4c:	9005883a 	mov	r2,r18
10008f50:	003fdc06 	br	10008ec4 <__alt_data_end+0xf8008ec4>
10008f54:	0004f180 	call	10004f18 <__sinit>
10008f58:	003fd706 	br	10008eb8 <__alt_data_end+0xf8008eb8>
10008f5c:	04bfffc4 	movi	r18,-1
10008f60:	003fe806 	br	10008f04 <__alt_data_end+0xf8008f04>
10008f64:	81400417 	ldw	r5,16(r16)
10008f68:	8809883a 	mov	r4,r17
10008f6c:	000508c0 	call	1000508c <_free_r>
10008f70:	003fe706 	br	10008f10 <__alt_data_end+0xf8008f10>
10008f74:	0005883a 	mov	r2,zero
10008f78:	f800283a 	ret

10008f7c <fclose>:
10008f7c:	00840074 	movhi	r2,4097
10008f80:	1087b604 	addi	r2,r2,7896
10008f84:	200b883a 	mov	r5,r4
10008f88:	11000017 	ldw	r4,0(r2)
10008f8c:	0008e8c1 	jmpi	10008e8c <_fclose_r>

10008f90 <__fputwc>:
10008f90:	defff804 	addi	sp,sp,-32
10008f94:	dcc00415 	stw	r19,16(sp)
10008f98:	dc800315 	stw	r18,12(sp)
10008f9c:	dc000115 	stw	r16,4(sp)
10008fa0:	dfc00715 	stw	ra,28(sp)
10008fa4:	dd400615 	stw	r21,24(sp)
10008fa8:	dd000515 	stw	r20,20(sp)
10008fac:	dc400215 	stw	r17,8(sp)
10008fb0:	2027883a 	mov	r19,r4
10008fb4:	2825883a 	mov	r18,r5
10008fb8:	3021883a 	mov	r16,r6
10008fbc:	00055ac0 	call	100055ac <__locale_mb_cur_max>
10008fc0:	00c00044 	movi	r3,1
10008fc4:	10c03e26 	beq	r2,r3,100090c0 <__fputwc+0x130>
10008fc8:	81c01704 	addi	r7,r16,92
10008fcc:	900d883a 	mov	r6,r18
10008fd0:	d80b883a 	mov	r5,sp
10008fd4:	9809883a 	mov	r4,r19
10008fd8:	0009fe80 	call	10009fe8 <_wcrtomb_r>
10008fdc:	1029883a 	mov	r20,r2
10008fe0:	00bfffc4 	movi	r2,-1
10008fe4:	a0802026 	beq	r20,r2,10009068 <__fputwc+0xd8>
10008fe8:	d9400003 	ldbu	r5,0(sp)
10008fec:	a0001c26 	beq	r20,zero,10009060 <__fputwc+0xd0>
10008ff0:	0023883a 	mov	r17,zero
10008ff4:	05400284 	movi	r21,10
10008ff8:	00000906 	br	10009020 <__fputwc+0x90>
10008ffc:	80800017 	ldw	r2,0(r16)
10009000:	11400005 	stb	r5,0(r2)
10009004:	80c00017 	ldw	r3,0(r16)
10009008:	18c00044 	addi	r3,r3,1
1000900c:	80c00015 	stw	r3,0(r16)
10009010:	8c400044 	addi	r17,r17,1
10009014:	dc45883a 	add	r2,sp,r17
10009018:	8d00112e 	bgeu	r17,r20,10009060 <__fputwc+0xd0>
1000901c:	11400003 	ldbu	r5,0(r2)
10009020:	80c00217 	ldw	r3,8(r16)
10009024:	18ffffc4 	addi	r3,r3,-1
10009028:	80c00215 	stw	r3,8(r16)
1000902c:	183ff30e 	bge	r3,zero,10008ffc <__alt_data_end+0xf8008ffc>
10009030:	80800617 	ldw	r2,24(r16)
10009034:	18801916 	blt	r3,r2,1000909c <__fputwc+0x10c>
10009038:	80800017 	ldw	r2,0(r16)
1000903c:	11400005 	stb	r5,0(r2)
10009040:	80800017 	ldw	r2,0(r16)
10009044:	10c00003 	ldbu	r3,0(r2)
10009048:	10800044 	addi	r2,r2,1
1000904c:	1d402326 	beq	r3,r21,100090dc <__fputwc+0x14c>
10009050:	80800015 	stw	r2,0(r16)
10009054:	8c400044 	addi	r17,r17,1
10009058:	dc45883a 	add	r2,sp,r17
1000905c:	8d3fef36 	bltu	r17,r20,1000901c <__alt_data_end+0xf800901c>
10009060:	9005883a 	mov	r2,r18
10009064:	00000406 	br	10009078 <__fputwc+0xe8>
10009068:	80c0030b 	ldhu	r3,12(r16)
1000906c:	a005883a 	mov	r2,r20
10009070:	18c01014 	ori	r3,r3,64
10009074:	80c0030d 	sth	r3,12(r16)
10009078:	dfc00717 	ldw	ra,28(sp)
1000907c:	dd400617 	ldw	r21,24(sp)
10009080:	dd000517 	ldw	r20,20(sp)
10009084:	dcc00417 	ldw	r19,16(sp)
10009088:	dc800317 	ldw	r18,12(sp)
1000908c:	dc400217 	ldw	r17,8(sp)
10009090:	dc000117 	ldw	r16,4(sp)
10009094:	dec00804 	addi	sp,sp,32
10009098:	f800283a 	ret
1000909c:	800d883a 	mov	r6,r16
100090a0:	29403fcc 	andi	r5,r5,255
100090a4:	9809883a 	mov	r4,r19
100090a8:	0009e900 	call	10009e90 <__swbuf_r>
100090ac:	10bfffe0 	cmpeqi	r2,r2,-1
100090b0:	10803fcc 	andi	r2,r2,255
100090b4:	103fd626 	beq	r2,zero,10009010 <__alt_data_end+0xf8009010>
100090b8:	00bfffc4 	movi	r2,-1
100090bc:	003fee06 	br	10009078 <__alt_data_end+0xf8009078>
100090c0:	90ffffc4 	addi	r3,r18,-1
100090c4:	01003f84 	movi	r4,254
100090c8:	20ffbf36 	bltu	r4,r3,10008fc8 <__alt_data_end+0xf8008fc8>
100090cc:	900b883a 	mov	r5,r18
100090d0:	dc800005 	stb	r18,0(sp)
100090d4:	1029883a 	mov	r20,r2
100090d8:	003fc506 	br	10008ff0 <__alt_data_end+0xf8008ff0>
100090dc:	800d883a 	mov	r6,r16
100090e0:	a80b883a 	mov	r5,r21
100090e4:	9809883a 	mov	r4,r19
100090e8:	0009e900 	call	10009e90 <__swbuf_r>
100090ec:	10bfffe0 	cmpeqi	r2,r2,-1
100090f0:	003fef06 	br	100090b0 <__alt_data_end+0xf80090b0>

100090f4 <_fputwc_r>:
100090f4:	3080030b 	ldhu	r2,12(r6)
100090f8:	10c8000c 	andi	r3,r2,8192
100090fc:	1800051e 	bne	r3,zero,10009114 <_fputwc_r+0x20>
10009100:	30c01917 	ldw	r3,100(r6)
10009104:	10880014 	ori	r2,r2,8192
10009108:	3080030d 	sth	r2,12(r6)
1000910c:	18880014 	ori	r2,r3,8192
10009110:	30801915 	stw	r2,100(r6)
10009114:	0008f901 	jmpi	10008f90 <__fputwc>

10009118 <fputwc>:
10009118:	00840074 	movhi	r2,4097
1000911c:	defffc04 	addi	sp,sp,-16
10009120:	1087b604 	addi	r2,r2,7896
10009124:	dc000115 	stw	r16,4(sp)
10009128:	14000017 	ldw	r16,0(r2)
1000912c:	dc400215 	stw	r17,8(sp)
10009130:	dfc00315 	stw	ra,12(sp)
10009134:	2023883a 	mov	r17,r4
10009138:	80000226 	beq	r16,zero,10009144 <fputwc+0x2c>
1000913c:	80800e17 	ldw	r2,56(r16)
10009140:	10001026 	beq	r2,zero,10009184 <fputwc+0x6c>
10009144:	2880030b 	ldhu	r2,12(r5)
10009148:	10c8000c 	andi	r3,r2,8192
1000914c:	1800051e 	bne	r3,zero,10009164 <fputwc+0x4c>
10009150:	28c01917 	ldw	r3,100(r5)
10009154:	10880014 	ori	r2,r2,8192
10009158:	2880030d 	sth	r2,12(r5)
1000915c:	18880014 	ori	r2,r3,8192
10009160:	28801915 	stw	r2,100(r5)
10009164:	280d883a 	mov	r6,r5
10009168:	8009883a 	mov	r4,r16
1000916c:	880b883a 	mov	r5,r17
10009170:	dfc00317 	ldw	ra,12(sp)
10009174:	dc400217 	ldw	r17,8(sp)
10009178:	dc000117 	ldw	r16,4(sp)
1000917c:	dec00404 	addi	sp,sp,16
10009180:	0008f901 	jmpi	10008f90 <__fputwc>
10009184:	8009883a 	mov	r4,r16
10009188:	d9400015 	stw	r5,0(sp)
1000918c:	0004f180 	call	10004f18 <__sinit>
10009190:	d9400017 	ldw	r5,0(sp)
10009194:	003feb06 	br	10009144 <__alt_data_end+0xf8009144>

10009198 <_fstat_r>:
10009198:	defffd04 	addi	sp,sp,-12
1000919c:	2805883a 	mov	r2,r5
100091a0:	dc000015 	stw	r16,0(sp)
100091a4:	04040074 	movhi	r16,4097
100091a8:	dc400115 	stw	r17,4(sp)
100091ac:	840e8804 	addi	r16,r16,14880
100091b0:	2023883a 	mov	r17,r4
100091b4:	300b883a 	mov	r5,r6
100091b8:	1009883a 	mov	r4,r2
100091bc:	dfc00215 	stw	ra,8(sp)
100091c0:	80000015 	stw	zero,0(r16)
100091c4:	000d9640 	call	1000d964 <fstat>
100091c8:	00ffffc4 	movi	r3,-1
100091cc:	10c00526 	beq	r2,r3,100091e4 <_fstat_r+0x4c>
100091d0:	dfc00217 	ldw	ra,8(sp)
100091d4:	dc400117 	ldw	r17,4(sp)
100091d8:	dc000017 	ldw	r16,0(sp)
100091dc:	dec00304 	addi	sp,sp,12
100091e0:	f800283a 	ret
100091e4:	80c00017 	ldw	r3,0(r16)
100091e8:	183ff926 	beq	r3,zero,100091d0 <__alt_data_end+0xf80091d0>
100091ec:	88c00015 	stw	r3,0(r17)
100091f0:	003ff706 	br	100091d0 <__alt_data_end+0xf80091d0>

100091f4 <__sfvwrite_r>:
100091f4:	30800217 	ldw	r2,8(r6)
100091f8:	10006726 	beq	r2,zero,10009398 <__sfvwrite_r+0x1a4>
100091fc:	28c0030b 	ldhu	r3,12(r5)
10009200:	defff404 	addi	sp,sp,-48
10009204:	dd400715 	stw	r21,28(sp)
10009208:	dd000615 	stw	r20,24(sp)
1000920c:	dc000215 	stw	r16,8(sp)
10009210:	dfc00b15 	stw	ra,44(sp)
10009214:	df000a15 	stw	fp,40(sp)
10009218:	ddc00915 	stw	r23,36(sp)
1000921c:	dd800815 	stw	r22,32(sp)
10009220:	dcc00515 	stw	r19,20(sp)
10009224:	dc800415 	stw	r18,16(sp)
10009228:	dc400315 	stw	r17,12(sp)
1000922c:	1880020c 	andi	r2,r3,8
10009230:	2821883a 	mov	r16,r5
10009234:	202b883a 	mov	r21,r4
10009238:	3029883a 	mov	r20,r6
1000923c:	10002726 	beq	r2,zero,100092dc <__sfvwrite_r+0xe8>
10009240:	28800417 	ldw	r2,16(r5)
10009244:	10002526 	beq	r2,zero,100092dc <__sfvwrite_r+0xe8>
10009248:	1880008c 	andi	r2,r3,2
1000924c:	a4400017 	ldw	r17,0(r20)
10009250:	10002a26 	beq	r2,zero,100092fc <__sfvwrite_r+0x108>
10009254:	05a00034 	movhi	r22,32768
10009258:	0027883a 	mov	r19,zero
1000925c:	0025883a 	mov	r18,zero
10009260:	b5bf0004 	addi	r22,r22,-1024
10009264:	980d883a 	mov	r6,r19
10009268:	a809883a 	mov	r4,r21
1000926c:	90004626 	beq	r18,zero,10009388 <__sfvwrite_r+0x194>
10009270:	900f883a 	mov	r7,r18
10009274:	b480022e 	bgeu	r22,r18,10009280 <__sfvwrite_r+0x8c>
10009278:	01e00034 	movhi	r7,32768
1000927c:	39ff0004 	addi	r7,r7,-1024
10009280:	80800917 	ldw	r2,36(r16)
10009284:	81400717 	ldw	r5,28(r16)
10009288:	103ee83a 	callr	r2
1000928c:	00805a0e 	bge	zero,r2,100093f8 <__sfvwrite_r+0x204>
10009290:	a0c00217 	ldw	r3,8(r20)
10009294:	98a7883a 	add	r19,r19,r2
10009298:	90a5c83a 	sub	r18,r18,r2
1000929c:	1885c83a 	sub	r2,r3,r2
100092a0:	a0800215 	stw	r2,8(r20)
100092a4:	103fef1e 	bne	r2,zero,10009264 <__alt_data_end+0xf8009264>
100092a8:	0005883a 	mov	r2,zero
100092ac:	dfc00b17 	ldw	ra,44(sp)
100092b0:	df000a17 	ldw	fp,40(sp)
100092b4:	ddc00917 	ldw	r23,36(sp)
100092b8:	dd800817 	ldw	r22,32(sp)
100092bc:	dd400717 	ldw	r21,28(sp)
100092c0:	dd000617 	ldw	r20,24(sp)
100092c4:	dcc00517 	ldw	r19,20(sp)
100092c8:	dc800417 	ldw	r18,16(sp)
100092cc:	dc400317 	ldw	r17,12(sp)
100092d0:	dc000217 	ldw	r16,8(sp)
100092d4:	dec00c04 	addi	sp,sp,48
100092d8:	f800283a 	ret
100092dc:	800b883a 	mov	r5,r16
100092e0:	a809883a 	mov	r4,r21
100092e4:	0002f0c0 	call	10002f0c <__swsetup_r>
100092e8:	1000ee1e 	bne	r2,zero,100096a4 <__sfvwrite_r+0x4b0>
100092ec:	80c0030b 	ldhu	r3,12(r16)
100092f0:	a4400017 	ldw	r17,0(r20)
100092f4:	1880008c 	andi	r2,r3,2
100092f8:	103fd61e 	bne	r2,zero,10009254 <__alt_data_end+0xf8009254>
100092fc:	1880004c 	andi	r2,r3,1
10009300:	1000421e 	bne	r2,zero,1000940c <__sfvwrite_r+0x218>
10009304:	0039883a 	mov	fp,zero
10009308:	0025883a 	mov	r18,zero
1000930c:	90001a26 	beq	r18,zero,10009378 <__sfvwrite_r+0x184>
10009310:	1880800c 	andi	r2,r3,512
10009314:	84c00217 	ldw	r19,8(r16)
10009318:	10002126 	beq	r2,zero,100093a0 <__sfvwrite_r+0x1ac>
1000931c:	982f883a 	mov	r23,r19
10009320:	94c09636 	bltu	r18,r19,1000957c <__sfvwrite_r+0x388>
10009324:	1881200c 	andi	r2,r3,1152
10009328:	1000a11e 	bne	r2,zero,100095b0 <__sfvwrite_r+0x3bc>
1000932c:	81000017 	ldw	r4,0(r16)
10009330:	b80d883a 	mov	r6,r23
10009334:	e00b883a 	mov	r5,fp
10009338:	00097700 	call	10009770 <memmove>
1000933c:	80c00217 	ldw	r3,8(r16)
10009340:	81000017 	ldw	r4,0(r16)
10009344:	9005883a 	mov	r2,r18
10009348:	1ce7c83a 	sub	r19,r3,r19
1000934c:	25cf883a 	add	r7,r4,r23
10009350:	84c00215 	stw	r19,8(r16)
10009354:	81c00015 	stw	r7,0(r16)
10009358:	a0c00217 	ldw	r3,8(r20)
1000935c:	e0b9883a 	add	fp,fp,r2
10009360:	90a5c83a 	sub	r18,r18,r2
10009364:	18a7c83a 	sub	r19,r3,r2
10009368:	a4c00215 	stw	r19,8(r20)
1000936c:	983fce26 	beq	r19,zero,100092a8 <__alt_data_end+0xf80092a8>
10009370:	80c0030b 	ldhu	r3,12(r16)
10009374:	903fe61e 	bne	r18,zero,10009310 <__alt_data_end+0xf8009310>
10009378:	8f000017 	ldw	fp,0(r17)
1000937c:	8c800117 	ldw	r18,4(r17)
10009380:	8c400204 	addi	r17,r17,8
10009384:	003fe106 	br	1000930c <__alt_data_end+0xf800930c>
10009388:	8cc00017 	ldw	r19,0(r17)
1000938c:	8c800117 	ldw	r18,4(r17)
10009390:	8c400204 	addi	r17,r17,8
10009394:	003fb306 	br	10009264 <__alt_data_end+0xf8009264>
10009398:	0005883a 	mov	r2,zero
1000939c:	f800283a 	ret
100093a0:	81000017 	ldw	r4,0(r16)
100093a4:	80800417 	ldw	r2,16(r16)
100093a8:	11005a36 	bltu	r2,r4,10009514 <__sfvwrite_r+0x320>
100093ac:	85c00517 	ldw	r23,20(r16)
100093b0:	95c05836 	bltu	r18,r23,10009514 <__sfvwrite_r+0x320>
100093b4:	00a00034 	movhi	r2,32768
100093b8:	10bfffc4 	addi	r2,r2,-1
100093bc:	9009883a 	mov	r4,r18
100093c0:	1480012e 	bgeu	r2,r18,100093c8 <__sfvwrite_r+0x1d4>
100093c4:	1009883a 	mov	r4,r2
100093c8:	b80b883a 	mov	r5,r23
100093cc:	000ad900 	call	1000ad90 <__divsi3>
100093d0:	b80b883a 	mov	r5,r23
100093d4:	1009883a 	mov	r4,r2
100093d8:	000097c0 	call	1000097c <__mulsi3>
100093dc:	81400717 	ldw	r5,28(r16)
100093e0:	80c00917 	ldw	r3,36(r16)
100093e4:	100f883a 	mov	r7,r2
100093e8:	e00d883a 	mov	r6,fp
100093ec:	a809883a 	mov	r4,r21
100093f0:	183ee83a 	callr	r3
100093f4:	00bfd816 	blt	zero,r2,10009358 <__alt_data_end+0xf8009358>
100093f8:	8080030b 	ldhu	r2,12(r16)
100093fc:	10801014 	ori	r2,r2,64
10009400:	8080030d 	sth	r2,12(r16)
10009404:	00bfffc4 	movi	r2,-1
10009408:	003fa806 	br	100092ac <__alt_data_end+0xf80092ac>
1000940c:	0027883a 	mov	r19,zero
10009410:	0011883a 	mov	r8,zero
10009414:	0039883a 	mov	fp,zero
10009418:	0025883a 	mov	r18,zero
1000941c:	90001f26 	beq	r18,zero,1000949c <__sfvwrite_r+0x2a8>
10009420:	40005a26 	beq	r8,zero,1000958c <__sfvwrite_r+0x398>
10009424:	982d883a 	mov	r22,r19
10009428:	94c0012e 	bgeu	r18,r19,10009430 <__sfvwrite_r+0x23c>
1000942c:	902d883a 	mov	r22,r18
10009430:	81000017 	ldw	r4,0(r16)
10009434:	80800417 	ldw	r2,16(r16)
10009438:	b02f883a 	mov	r23,r22
1000943c:	81c00517 	ldw	r7,20(r16)
10009440:	1100032e 	bgeu	r2,r4,10009450 <__sfvwrite_r+0x25c>
10009444:	80c00217 	ldw	r3,8(r16)
10009448:	38c7883a 	add	r3,r7,r3
1000944c:	1d801816 	blt	r3,r22,100094b0 <__sfvwrite_r+0x2bc>
10009450:	b1c03e16 	blt	r22,r7,1000954c <__sfvwrite_r+0x358>
10009454:	80800917 	ldw	r2,36(r16)
10009458:	81400717 	ldw	r5,28(r16)
1000945c:	e00d883a 	mov	r6,fp
10009460:	da000115 	stw	r8,4(sp)
10009464:	a809883a 	mov	r4,r21
10009468:	103ee83a 	callr	r2
1000946c:	102f883a 	mov	r23,r2
10009470:	da000117 	ldw	r8,4(sp)
10009474:	00bfe00e 	bge	zero,r2,100093f8 <__alt_data_end+0xf80093f8>
10009478:	9de7c83a 	sub	r19,r19,r23
1000947c:	98001f26 	beq	r19,zero,100094fc <__sfvwrite_r+0x308>
10009480:	a0800217 	ldw	r2,8(r20)
10009484:	e5f9883a 	add	fp,fp,r23
10009488:	95e5c83a 	sub	r18,r18,r23
1000948c:	15efc83a 	sub	r23,r2,r23
10009490:	a5c00215 	stw	r23,8(r20)
10009494:	b83f8426 	beq	r23,zero,100092a8 <__alt_data_end+0xf80092a8>
10009498:	903fe11e 	bne	r18,zero,10009420 <__alt_data_end+0xf8009420>
1000949c:	8f000017 	ldw	fp,0(r17)
100094a0:	8c800117 	ldw	r18,4(r17)
100094a4:	0011883a 	mov	r8,zero
100094a8:	8c400204 	addi	r17,r17,8
100094ac:	003fdb06 	br	1000941c <__alt_data_end+0xf800941c>
100094b0:	180d883a 	mov	r6,r3
100094b4:	e00b883a 	mov	r5,fp
100094b8:	da000115 	stw	r8,4(sp)
100094bc:	d8c00015 	stw	r3,0(sp)
100094c0:	00097700 	call	10009770 <memmove>
100094c4:	d8c00017 	ldw	r3,0(sp)
100094c8:	80800017 	ldw	r2,0(r16)
100094cc:	800b883a 	mov	r5,r16
100094d0:	a809883a 	mov	r4,r21
100094d4:	10c5883a 	add	r2,r2,r3
100094d8:	80800015 	stw	r2,0(r16)
100094dc:	d8c00015 	stw	r3,0(sp)
100094e0:	0004b2c0 	call	10004b2c <_fflush_r>
100094e4:	d8c00017 	ldw	r3,0(sp)
100094e8:	da000117 	ldw	r8,4(sp)
100094ec:	103fc21e 	bne	r2,zero,100093f8 <__alt_data_end+0xf80093f8>
100094f0:	182f883a 	mov	r23,r3
100094f4:	9de7c83a 	sub	r19,r19,r23
100094f8:	983fe11e 	bne	r19,zero,10009480 <__alt_data_end+0xf8009480>
100094fc:	800b883a 	mov	r5,r16
10009500:	a809883a 	mov	r4,r21
10009504:	0004b2c0 	call	10004b2c <_fflush_r>
10009508:	103fbb1e 	bne	r2,zero,100093f8 <__alt_data_end+0xf80093f8>
1000950c:	0011883a 	mov	r8,zero
10009510:	003fdb06 	br	10009480 <__alt_data_end+0xf8009480>
10009514:	94c0012e 	bgeu	r18,r19,1000951c <__sfvwrite_r+0x328>
10009518:	9027883a 	mov	r19,r18
1000951c:	980d883a 	mov	r6,r19
10009520:	e00b883a 	mov	r5,fp
10009524:	00097700 	call	10009770 <memmove>
10009528:	80800217 	ldw	r2,8(r16)
1000952c:	80c00017 	ldw	r3,0(r16)
10009530:	14c5c83a 	sub	r2,r2,r19
10009534:	1cc7883a 	add	r3,r3,r19
10009538:	80800215 	stw	r2,8(r16)
1000953c:	80c00015 	stw	r3,0(r16)
10009540:	10004326 	beq	r2,zero,10009650 <__sfvwrite_r+0x45c>
10009544:	9805883a 	mov	r2,r19
10009548:	003f8306 	br	10009358 <__alt_data_end+0xf8009358>
1000954c:	b00d883a 	mov	r6,r22
10009550:	e00b883a 	mov	r5,fp
10009554:	da000115 	stw	r8,4(sp)
10009558:	00097700 	call	10009770 <memmove>
1000955c:	80800217 	ldw	r2,8(r16)
10009560:	80c00017 	ldw	r3,0(r16)
10009564:	da000117 	ldw	r8,4(sp)
10009568:	1585c83a 	sub	r2,r2,r22
1000956c:	1dad883a 	add	r22,r3,r22
10009570:	80800215 	stw	r2,8(r16)
10009574:	85800015 	stw	r22,0(r16)
10009578:	003fbf06 	br	10009478 <__alt_data_end+0xf8009478>
1000957c:	81000017 	ldw	r4,0(r16)
10009580:	9027883a 	mov	r19,r18
10009584:	902f883a 	mov	r23,r18
10009588:	003f6906 	br	10009330 <__alt_data_end+0xf8009330>
1000958c:	900d883a 	mov	r6,r18
10009590:	01400284 	movi	r5,10
10009594:	e009883a 	mov	r4,fp
10009598:	0005fc80 	call	10005fc8 <memchr>
1000959c:	10003e26 	beq	r2,zero,10009698 <__sfvwrite_r+0x4a4>
100095a0:	10800044 	addi	r2,r2,1
100095a4:	1727c83a 	sub	r19,r2,fp
100095a8:	02000044 	movi	r8,1
100095ac:	003f9d06 	br	10009424 <__alt_data_end+0xf8009424>
100095b0:	80800517 	ldw	r2,20(r16)
100095b4:	81400417 	ldw	r5,16(r16)
100095b8:	81c00017 	ldw	r7,0(r16)
100095bc:	10a7883a 	add	r19,r2,r2
100095c0:	9885883a 	add	r2,r19,r2
100095c4:	1026d7fa 	srli	r19,r2,31
100095c8:	396dc83a 	sub	r22,r7,r5
100095cc:	b1000044 	addi	r4,r22,1
100095d0:	9885883a 	add	r2,r19,r2
100095d4:	1027d07a 	srai	r19,r2,1
100095d8:	2485883a 	add	r2,r4,r18
100095dc:	980d883a 	mov	r6,r19
100095e0:	9880022e 	bgeu	r19,r2,100095ec <__sfvwrite_r+0x3f8>
100095e4:	1027883a 	mov	r19,r2
100095e8:	100d883a 	mov	r6,r2
100095ec:	18c1000c 	andi	r3,r3,1024
100095f0:	18001c26 	beq	r3,zero,10009664 <__sfvwrite_r+0x470>
100095f4:	300b883a 	mov	r5,r6
100095f8:	a809883a 	mov	r4,r21
100095fc:	00057bc0 	call	100057bc <_malloc_r>
10009600:	102f883a 	mov	r23,r2
10009604:	10002926 	beq	r2,zero,100096ac <__sfvwrite_r+0x4b8>
10009608:	81400417 	ldw	r5,16(r16)
1000960c:	b00d883a 	mov	r6,r22
10009610:	1009883a 	mov	r4,r2
10009614:	00009a40 	call	100009a4 <memcpy>
10009618:	8080030b 	ldhu	r2,12(r16)
1000961c:	00fedfc4 	movi	r3,-1153
10009620:	10c4703a 	and	r2,r2,r3
10009624:	10802014 	ori	r2,r2,128
10009628:	8080030d 	sth	r2,12(r16)
1000962c:	bd89883a 	add	r4,r23,r22
10009630:	9d8fc83a 	sub	r7,r19,r22
10009634:	85c00415 	stw	r23,16(r16)
10009638:	84c00515 	stw	r19,20(r16)
1000963c:	81000015 	stw	r4,0(r16)
10009640:	9027883a 	mov	r19,r18
10009644:	81c00215 	stw	r7,8(r16)
10009648:	902f883a 	mov	r23,r18
1000964c:	003f3806 	br	10009330 <__alt_data_end+0xf8009330>
10009650:	800b883a 	mov	r5,r16
10009654:	a809883a 	mov	r4,r21
10009658:	0004b2c0 	call	10004b2c <_fflush_r>
1000965c:	103fb926 	beq	r2,zero,10009544 <__alt_data_end+0xf8009544>
10009660:	003f6506 	br	100093f8 <__alt_data_end+0xf80093f8>
10009664:	a809883a 	mov	r4,r21
10009668:	000992c0 	call	1000992c <_realloc_r>
1000966c:	102f883a 	mov	r23,r2
10009670:	103fee1e 	bne	r2,zero,1000962c <__alt_data_end+0xf800962c>
10009674:	81400417 	ldw	r5,16(r16)
10009678:	a809883a 	mov	r4,r21
1000967c:	000508c0 	call	1000508c <_free_r>
10009680:	8080030b 	ldhu	r2,12(r16)
10009684:	00ffdfc4 	movi	r3,-129
10009688:	1884703a 	and	r2,r3,r2
1000968c:	00c00304 	movi	r3,12
10009690:	a8c00015 	stw	r3,0(r21)
10009694:	003f5906 	br	100093fc <__alt_data_end+0xf80093fc>
10009698:	94c00044 	addi	r19,r18,1
1000969c:	02000044 	movi	r8,1
100096a0:	003f6006 	br	10009424 <__alt_data_end+0xf8009424>
100096a4:	00bfffc4 	movi	r2,-1
100096a8:	003f0006 	br	100092ac <__alt_data_end+0xf80092ac>
100096ac:	00800304 	movi	r2,12
100096b0:	a8800015 	stw	r2,0(r21)
100096b4:	8080030b 	ldhu	r2,12(r16)
100096b8:	003f5006 	br	100093fc <__alt_data_end+0xf80093fc>

100096bc <_isatty_r>:
100096bc:	defffd04 	addi	sp,sp,-12
100096c0:	dc000015 	stw	r16,0(sp)
100096c4:	04040074 	movhi	r16,4097
100096c8:	dc400115 	stw	r17,4(sp)
100096cc:	840e8804 	addi	r16,r16,14880
100096d0:	2023883a 	mov	r17,r4
100096d4:	2809883a 	mov	r4,r5
100096d8:	dfc00215 	stw	ra,8(sp)
100096dc:	80000015 	stw	zero,0(r16)
100096e0:	000da580 	call	1000da58 <isatty>
100096e4:	00ffffc4 	movi	r3,-1
100096e8:	10c00526 	beq	r2,r3,10009700 <_isatty_r+0x44>
100096ec:	dfc00217 	ldw	ra,8(sp)
100096f0:	dc400117 	ldw	r17,4(sp)
100096f4:	dc000017 	ldw	r16,0(sp)
100096f8:	dec00304 	addi	sp,sp,12
100096fc:	f800283a 	ret
10009700:	80c00017 	ldw	r3,0(r16)
10009704:	183ff926 	beq	r3,zero,100096ec <__alt_data_end+0xf80096ec>
10009708:	88c00015 	stw	r3,0(r17)
1000970c:	003ff706 	br	100096ec <__alt_data_end+0xf80096ec>

10009710 <_lseek_r>:
10009710:	defffd04 	addi	sp,sp,-12
10009714:	2805883a 	mov	r2,r5
10009718:	dc000015 	stw	r16,0(sp)
1000971c:	04040074 	movhi	r16,4097
10009720:	dc400115 	stw	r17,4(sp)
10009724:	300b883a 	mov	r5,r6
10009728:	840e8804 	addi	r16,r16,14880
1000972c:	2023883a 	mov	r17,r4
10009730:	380d883a 	mov	r6,r7
10009734:	1009883a 	mov	r4,r2
10009738:	dfc00215 	stw	ra,8(sp)
1000973c:	80000015 	stw	zero,0(r16)
10009740:	000dc2c0 	call	1000dc2c <lseek>
10009744:	00ffffc4 	movi	r3,-1
10009748:	10c00526 	beq	r2,r3,10009760 <_lseek_r+0x50>
1000974c:	dfc00217 	ldw	ra,8(sp)
10009750:	dc400117 	ldw	r17,4(sp)
10009754:	dc000017 	ldw	r16,0(sp)
10009758:	dec00304 	addi	sp,sp,12
1000975c:	f800283a 	ret
10009760:	80c00017 	ldw	r3,0(r16)
10009764:	183ff926 	beq	r3,zero,1000974c <__alt_data_end+0xf800974c>
10009768:	88c00015 	stw	r3,0(r17)
1000976c:	003ff706 	br	1000974c <__alt_data_end+0xf800974c>

10009770 <memmove>:
10009770:	2005883a 	mov	r2,r4
10009774:	29000b2e 	bgeu	r5,r4,100097a4 <memmove+0x34>
10009778:	298f883a 	add	r7,r5,r6
1000977c:	21c0092e 	bgeu	r4,r7,100097a4 <memmove+0x34>
10009780:	2187883a 	add	r3,r4,r6
10009784:	198bc83a 	sub	r5,r3,r6
10009788:	30004826 	beq	r6,zero,100098ac <memmove+0x13c>
1000978c:	39ffffc4 	addi	r7,r7,-1
10009790:	39000003 	ldbu	r4,0(r7)
10009794:	18ffffc4 	addi	r3,r3,-1
10009798:	19000005 	stb	r4,0(r3)
1000979c:	28fffb1e 	bne	r5,r3,1000978c <__alt_data_end+0xf800978c>
100097a0:	f800283a 	ret
100097a4:	00c003c4 	movi	r3,15
100097a8:	1980412e 	bgeu	r3,r6,100098b0 <memmove+0x140>
100097ac:	2886b03a 	or	r3,r5,r2
100097b0:	18c000cc 	andi	r3,r3,3
100097b4:	1800401e 	bne	r3,zero,100098b8 <memmove+0x148>
100097b8:	33fffc04 	addi	r15,r6,-16
100097bc:	781ed13a 	srli	r15,r15,4
100097c0:	28c00104 	addi	r3,r5,4
100097c4:	13400104 	addi	r13,r2,4
100097c8:	781c913a 	slli	r14,r15,4
100097cc:	2b000204 	addi	r12,r5,8
100097d0:	12c00204 	addi	r11,r2,8
100097d4:	73800504 	addi	r14,r14,20
100097d8:	2a800304 	addi	r10,r5,12
100097dc:	12400304 	addi	r9,r2,12
100097e0:	2b9d883a 	add	r14,r5,r14
100097e4:	2811883a 	mov	r8,r5
100097e8:	100f883a 	mov	r7,r2
100097ec:	41000017 	ldw	r4,0(r8)
100097f0:	39c00404 	addi	r7,r7,16
100097f4:	18c00404 	addi	r3,r3,16
100097f8:	393ffc15 	stw	r4,-16(r7)
100097fc:	193ffc17 	ldw	r4,-16(r3)
10009800:	6b400404 	addi	r13,r13,16
10009804:	5ac00404 	addi	r11,r11,16
10009808:	693ffc15 	stw	r4,-16(r13)
1000980c:	61000017 	ldw	r4,0(r12)
10009810:	4a400404 	addi	r9,r9,16
10009814:	42000404 	addi	r8,r8,16
10009818:	593ffc15 	stw	r4,-16(r11)
1000981c:	51000017 	ldw	r4,0(r10)
10009820:	63000404 	addi	r12,r12,16
10009824:	52800404 	addi	r10,r10,16
10009828:	493ffc15 	stw	r4,-16(r9)
1000982c:	1bbfef1e 	bne	r3,r14,100097ec <__alt_data_end+0xf80097ec>
10009830:	79000044 	addi	r4,r15,1
10009834:	2008913a 	slli	r4,r4,4
10009838:	328003cc 	andi	r10,r6,15
1000983c:	02c000c4 	movi	r11,3
10009840:	1107883a 	add	r3,r2,r4
10009844:	290b883a 	add	r5,r5,r4
10009848:	5a801e2e 	bgeu	r11,r10,100098c4 <memmove+0x154>
1000984c:	1813883a 	mov	r9,r3
10009850:	2811883a 	mov	r8,r5
10009854:	500f883a 	mov	r7,r10
10009858:	41000017 	ldw	r4,0(r8)
1000985c:	4a400104 	addi	r9,r9,4
10009860:	39ffff04 	addi	r7,r7,-4
10009864:	493fff15 	stw	r4,-4(r9)
10009868:	42000104 	addi	r8,r8,4
1000986c:	59fffa36 	bltu	r11,r7,10009858 <__alt_data_end+0xf8009858>
10009870:	513fff04 	addi	r4,r10,-4
10009874:	2008d0ba 	srli	r4,r4,2
10009878:	318000cc 	andi	r6,r6,3
1000987c:	21000044 	addi	r4,r4,1
10009880:	2109883a 	add	r4,r4,r4
10009884:	2109883a 	add	r4,r4,r4
10009888:	1907883a 	add	r3,r3,r4
1000988c:	290b883a 	add	r5,r5,r4
10009890:	30000b26 	beq	r6,zero,100098c0 <memmove+0x150>
10009894:	198d883a 	add	r6,r3,r6
10009898:	29c00003 	ldbu	r7,0(r5)
1000989c:	18c00044 	addi	r3,r3,1
100098a0:	29400044 	addi	r5,r5,1
100098a4:	19ffffc5 	stb	r7,-1(r3)
100098a8:	19bffb1e 	bne	r3,r6,10009898 <__alt_data_end+0xf8009898>
100098ac:	f800283a 	ret
100098b0:	1007883a 	mov	r3,r2
100098b4:	003ff606 	br	10009890 <__alt_data_end+0xf8009890>
100098b8:	1007883a 	mov	r3,r2
100098bc:	003ff506 	br	10009894 <__alt_data_end+0xf8009894>
100098c0:	f800283a 	ret
100098c4:	500d883a 	mov	r6,r10
100098c8:	003ff106 	br	10009890 <__alt_data_end+0xf8009890>

100098cc <_read_r>:
100098cc:	defffd04 	addi	sp,sp,-12
100098d0:	2805883a 	mov	r2,r5
100098d4:	dc000015 	stw	r16,0(sp)
100098d8:	04040074 	movhi	r16,4097
100098dc:	dc400115 	stw	r17,4(sp)
100098e0:	300b883a 	mov	r5,r6
100098e4:	840e8804 	addi	r16,r16,14880
100098e8:	2023883a 	mov	r17,r4
100098ec:	380d883a 	mov	r6,r7
100098f0:	1009883a 	mov	r4,r2
100098f4:	dfc00215 	stw	ra,8(sp)
100098f8:	80000015 	stw	zero,0(r16)
100098fc:	000de080 	call	1000de08 <read>
10009900:	00ffffc4 	movi	r3,-1
10009904:	10c00526 	beq	r2,r3,1000991c <_read_r+0x50>
10009908:	dfc00217 	ldw	ra,8(sp)
1000990c:	dc400117 	ldw	r17,4(sp)
10009910:	dc000017 	ldw	r16,0(sp)
10009914:	dec00304 	addi	sp,sp,12
10009918:	f800283a 	ret
1000991c:	80c00017 	ldw	r3,0(r16)
10009920:	183ff926 	beq	r3,zero,10009908 <__alt_data_end+0xf8009908>
10009924:	88c00015 	stw	r3,0(r17)
10009928:	003ff706 	br	10009908 <__alt_data_end+0xf8009908>

1000992c <_realloc_r>:
1000992c:	defff604 	addi	sp,sp,-40
10009930:	dc800215 	stw	r18,8(sp)
10009934:	dfc00915 	stw	ra,36(sp)
10009938:	df000815 	stw	fp,32(sp)
1000993c:	ddc00715 	stw	r23,28(sp)
10009940:	dd800615 	stw	r22,24(sp)
10009944:	dd400515 	stw	r21,20(sp)
10009948:	dd000415 	stw	r20,16(sp)
1000994c:	dcc00315 	stw	r19,12(sp)
10009950:	dc400115 	stw	r17,4(sp)
10009954:	dc000015 	stw	r16,0(sp)
10009958:	3025883a 	mov	r18,r6
1000995c:	2800b726 	beq	r5,zero,10009c3c <_realloc_r+0x310>
10009960:	282b883a 	mov	r21,r5
10009964:	2029883a 	mov	r20,r4
10009968:	000dd840 	call	1000dd84 <__malloc_lock>
1000996c:	a8bfff17 	ldw	r2,-4(r21)
10009970:	043fff04 	movi	r16,-4
10009974:	90c002c4 	addi	r3,r18,11
10009978:	01000584 	movi	r4,22
1000997c:	acfffe04 	addi	r19,r21,-8
10009980:	1420703a 	and	r16,r2,r16
10009984:	20c0332e 	bgeu	r4,r3,10009a54 <_realloc_r+0x128>
10009988:	047ffe04 	movi	r17,-8
1000998c:	1c62703a 	and	r17,r3,r17
10009990:	8807883a 	mov	r3,r17
10009994:	88005816 	blt	r17,zero,10009af8 <_realloc_r+0x1cc>
10009998:	8c805736 	bltu	r17,r18,10009af8 <_realloc_r+0x1cc>
1000999c:	80c0300e 	bge	r16,r3,10009a60 <_realloc_r+0x134>
100099a0:	07040074 	movhi	fp,4097
100099a4:	e7022f04 	addi	fp,fp,2236
100099a8:	e1c00217 	ldw	r7,8(fp)
100099ac:	9c09883a 	add	r4,r19,r16
100099b0:	22000117 	ldw	r8,4(r4)
100099b4:	21c06326 	beq	r4,r7,10009b44 <_realloc_r+0x218>
100099b8:	017fff84 	movi	r5,-2
100099bc:	414a703a 	and	r5,r8,r5
100099c0:	214b883a 	add	r5,r4,r5
100099c4:	29800117 	ldw	r6,4(r5)
100099c8:	3180004c 	andi	r6,r6,1
100099cc:	30003f26 	beq	r6,zero,10009acc <_realloc_r+0x1a0>
100099d0:	1080004c 	andi	r2,r2,1
100099d4:	10008326 	beq	r2,zero,10009be4 <_realloc_r+0x2b8>
100099d8:	900b883a 	mov	r5,r18
100099dc:	a009883a 	mov	r4,r20
100099e0:	00057bc0 	call	100057bc <_malloc_r>
100099e4:	1025883a 	mov	r18,r2
100099e8:	10011e26 	beq	r2,zero,10009e64 <_realloc_r+0x538>
100099ec:	a93fff17 	ldw	r4,-4(r21)
100099f0:	10fffe04 	addi	r3,r2,-8
100099f4:	00bfff84 	movi	r2,-2
100099f8:	2084703a 	and	r2,r4,r2
100099fc:	9885883a 	add	r2,r19,r2
10009a00:	1880ee26 	beq	r3,r2,10009dbc <_realloc_r+0x490>
10009a04:	81bfff04 	addi	r6,r16,-4
10009a08:	00800904 	movi	r2,36
10009a0c:	1180b836 	bltu	r2,r6,10009cf0 <_realloc_r+0x3c4>
10009a10:	00c004c4 	movi	r3,19
10009a14:	19809636 	bltu	r3,r6,10009c70 <_realloc_r+0x344>
10009a18:	9005883a 	mov	r2,r18
10009a1c:	a807883a 	mov	r3,r21
10009a20:	19000017 	ldw	r4,0(r3)
10009a24:	11000015 	stw	r4,0(r2)
10009a28:	19000117 	ldw	r4,4(r3)
10009a2c:	11000115 	stw	r4,4(r2)
10009a30:	18c00217 	ldw	r3,8(r3)
10009a34:	10c00215 	stw	r3,8(r2)
10009a38:	a80b883a 	mov	r5,r21
10009a3c:	a009883a 	mov	r4,r20
10009a40:	000508c0 	call	1000508c <_free_r>
10009a44:	a009883a 	mov	r4,r20
10009a48:	000dda80 	call	1000dda8 <__malloc_unlock>
10009a4c:	9005883a 	mov	r2,r18
10009a50:	00001206 	br	10009a9c <_realloc_r+0x170>
10009a54:	00c00404 	movi	r3,16
10009a58:	1823883a 	mov	r17,r3
10009a5c:	003fce06 	br	10009998 <__alt_data_end+0xf8009998>
10009a60:	a825883a 	mov	r18,r21
10009a64:	8445c83a 	sub	r2,r16,r17
10009a68:	00c003c4 	movi	r3,15
10009a6c:	18802636 	bltu	r3,r2,10009b08 <_realloc_r+0x1dc>
10009a70:	99800117 	ldw	r6,4(r19)
10009a74:	9c07883a 	add	r3,r19,r16
10009a78:	3180004c 	andi	r6,r6,1
10009a7c:	3420b03a 	or	r16,r6,r16
10009a80:	9c000115 	stw	r16,4(r19)
10009a84:	18800117 	ldw	r2,4(r3)
10009a88:	10800054 	ori	r2,r2,1
10009a8c:	18800115 	stw	r2,4(r3)
10009a90:	a009883a 	mov	r4,r20
10009a94:	000dda80 	call	1000dda8 <__malloc_unlock>
10009a98:	9005883a 	mov	r2,r18
10009a9c:	dfc00917 	ldw	ra,36(sp)
10009aa0:	df000817 	ldw	fp,32(sp)
10009aa4:	ddc00717 	ldw	r23,28(sp)
10009aa8:	dd800617 	ldw	r22,24(sp)
10009aac:	dd400517 	ldw	r21,20(sp)
10009ab0:	dd000417 	ldw	r20,16(sp)
10009ab4:	dcc00317 	ldw	r19,12(sp)
10009ab8:	dc800217 	ldw	r18,8(sp)
10009abc:	dc400117 	ldw	r17,4(sp)
10009ac0:	dc000017 	ldw	r16,0(sp)
10009ac4:	dec00a04 	addi	sp,sp,40
10009ac8:	f800283a 	ret
10009acc:	017fff04 	movi	r5,-4
10009ad0:	414a703a 	and	r5,r8,r5
10009ad4:	814d883a 	add	r6,r16,r5
10009ad8:	30c01f16 	blt	r6,r3,10009b58 <_realloc_r+0x22c>
10009adc:	20800317 	ldw	r2,12(r4)
10009ae0:	20c00217 	ldw	r3,8(r4)
10009ae4:	a825883a 	mov	r18,r21
10009ae8:	3021883a 	mov	r16,r6
10009aec:	18800315 	stw	r2,12(r3)
10009af0:	10c00215 	stw	r3,8(r2)
10009af4:	003fdb06 	br	10009a64 <__alt_data_end+0xf8009a64>
10009af8:	00800304 	movi	r2,12
10009afc:	a0800015 	stw	r2,0(r20)
10009b00:	0005883a 	mov	r2,zero
10009b04:	003fe506 	br	10009a9c <__alt_data_end+0xf8009a9c>
10009b08:	98c00117 	ldw	r3,4(r19)
10009b0c:	9c4b883a 	add	r5,r19,r17
10009b10:	11000054 	ori	r4,r2,1
10009b14:	18c0004c 	andi	r3,r3,1
10009b18:	1c62b03a 	or	r17,r3,r17
10009b1c:	9c400115 	stw	r17,4(r19)
10009b20:	29000115 	stw	r4,4(r5)
10009b24:	2885883a 	add	r2,r5,r2
10009b28:	10c00117 	ldw	r3,4(r2)
10009b2c:	29400204 	addi	r5,r5,8
10009b30:	a009883a 	mov	r4,r20
10009b34:	18c00054 	ori	r3,r3,1
10009b38:	10c00115 	stw	r3,4(r2)
10009b3c:	000508c0 	call	1000508c <_free_r>
10009b40:	003fd306 	br	10009a90 <__alt_data_end+0xf8009a90>
10009b44:	017fff04 	movi	r5,-4
10009b48:	414a703a 	and	r5,r8,r5
10009b4c:	89800404 	addi	r6,r17,16
10009b50:	8151883a 	add	r8,r16,r5
10009b54:	4180590e 	bge	r8,r6,10009cbc <_realloc_r+0x390>
10009b58:	1080004c 	andi	r2,r2,1
10009b5c:	103f9e1e 	bne	r2,zero,100099d8 <__alt_data_end+0xf80099d8>
10009b60:	adbffe17 	ldw	r22,-8(r21)
10009b64:	00bfff04 	movi	r2,-4
10009b68:	9dadc83a 	sub	r22,r19,r22
10009b6c:	b1800117 	ldw	r6,4(r22)
10009b70:	3084703a 	and	r2,r6,r2
10009b74:	20002026 	beq	r4,zero,10009bf8 <_realloc_r+0x2cc>
10009b78:	80af883a 	add	r23,r16,r2
10009b7c:	b96f883a 	add	r23,r23,r5
10009b80:	21c05f26 	beq	r4,r7,10009d00 <_realloc_r+0x3d4>
10009b84:	b8c01c16 	blt	r23,r3,10009bf8 <_realloc_r+0x2cc>
10009b88:	20800317 	ldw	r2,12(r4)
10009b8c:	20c00217 	ldw	r3,8(r4)
10009b90:	81bfff04 	addi	r6,r16,-4
10009b94:	01000904 	movi	r4,36
10009b98:	18800315 	stw	r2,12(r3)
10009b9c:	10c00215 	stw	r3,8(r2)
10009ba0:	b0c00217 	ldw	r3,8(r22)
10009ba4:	b0800317 	ldw	r2,12(r22)
10009ba8:	b4800204 	addi	r18,r22,8
10009bac:	18800315 	stw	r2,12(r3)
10009bb0:	10c00215 	stw	r3,8(r2)
10009bb4:	21801b36 	bltu	r4,r6,10009c24 <_realloc_r+0x2f8>
10009bb8:	008004c4 	movi	r2,19
10009bbc:	1180352e 	bgeu	r2,r6,10009c94 <_realloc_r+0x368>
10009bc0:	a8800017 	ldw	r2,0(r21)
10009bc4:	b0800215 	stw	r2,8(r22)
10009bc8:	a8800117 	ldw	r2,4(r21)
10009bcc:	b0800315 	stw	r2,12(r22)
10009bd0:	008006c4 	movi	r2,27
10009bd4:	11807f36 	bltu	r2,r6,10009dd4 <_realloc_r+0x4a8>
10009bd8:	b0800404 	addi	r2,r22,16
10009bdc:	ad400204 	addi	r21,r21,8
10009be0:	00002d06 	br	10009c98 <_realloc_r+0x36c>
10009be4:	adbffe17 	ldw	r22,-8(r21)
10009be8:	00bfff04 	movi	r2,-4
10009bec:	9dadc83a 	sub	r22,r19,r22
10009bf0:	b1000117 	ldw	r4,4(r22)
10009bf4:	2084703a 	and	r2,r4,r2
10009bf8:	b03f7726 	beq	r22,zero,100099d8 <__alt_data_end+0xf80099d8>
10009bfc:	80af883a 	add	r23,r16,r2
10009c00:	b8ff7516 	blt	r23,r3,100099d8 <__alt_data_end+0xf80099d8>
10009c04:	b0800317 	ldw	r2,12(r22)
10009c08:	b0c00217 	ldw	r3,8(r22)
10009c0c:	81bfff04 	addi	r6,r16,-4
10009c10:	01000904 	movi	r4,36
10009c14:	18800315 	stw	r2,12(r3)
10009c18:	10c00215 	stw	r3,8(r2)
10009c1c:	b4800204 	addi	r18,r22,8
10009c20:	21bfe52e 	bgeu	r4,r6,10009bb8 <__alt_data_end+0xf8009bb8>
10009c24:	a80b883a 	mov	r5,r21
10009c28:	9009883a 	mov	r4,r18
10009c2c:	00097700 	call	10009770 <memmove>
10009c30:	b821883a 	mov	r16,r23
10009c34:	b027883a 	mov	r19,r22
10009c38:	003f8a06 	br	10009a64 <__alt_data_end+0xf8009a64>
10009c3c:	300b883a 	mov	r5,r6
10009c40:	dfc00917 	ldw	ra,36(sp)
10009c44:	df000817 	ldw	fp,32(sp)
10009c48:	ddc00717 	ldw	r23,28(sp)
10009c4c:	dd800617 	ldw	r22,24(sp)
10009c50:	dd400517 	ldw	r21,20(sp)
10009c54:	dd000417 	ldw	r20,16(sp)
10009c58:	dcc00317 	ldw	r19,12(sp)
10009c5c:	dc800217 	ldw	r18,8(sp)
10009c60:	dc400117 	ldw	r17,4(sp)
10009c64:	dc000017 	ldw	r16,0(sp)
10009c68:	dec00a04 	addi	sp,sp,40
10009c6c:	00057bc1 	jmpi	100057bc <_malloc_r>
10009c70:	a8c00017 	ldw	r3,0(r21)
10009c74:	90c00015 	stw	r3,0(r18)
10009c78:	a8c00117 	ldw	r3,4(r21)
10009c7c:	90c00115 	stw	r3,4(r18)
10009c80:	00c006c4 	movi	r3,27
10009c84:	19804536 	bltu	r3,r6,10009d9c <_realloc_r+0x470>
10009c88:	90800204 	addi	r2,r18,8
10009c8c:	a8c00204 	addi	r3,r21,8
10009c90:	003f6306 	br	10009a20 <__alt_data_end+0xf8009a20>
10009c94:	9005883a 	mov	r2,r18
10009c98:	a8c00017 	ldw	r3,0(r21)
10009c9c:	b821883a 	mov	r16,r23
10009ca0:	b027883a 	mov	r19,r22
10009ca4:	10c00015 	stw	r3,0(r2)
10009ca8:	a8c00117 	ldw	r3,4(r21)
10009cac:	10c00115 	stw	r3,4(r2)
10009cb0:	a8c00217 	ldw	r3,8(r21)
10009cb4:	10c00215 	stw	r3,8(r2)
10009cb8:	003f6a06 	br	10009a64 <__alt_data_end+0xf8009a64>
10009cbc:	9c67883a 	add	r19,r19,r17
10009cc0:	4445c83a 	sub	r2,r8,r17
10009cc4:	e4c00215 	stw	r19,8(fp)
10009cc8:	10800054 	ori	r2,r2,1
10009ccc:	98800115 	stw	r2,4(r19)
10009cd0:	a8bfff17 	ldw	r2,-4(r21)
10009cd4:	a009883a 	mov	r4,r20
10009cd8:	1080004c 	andi	r2,r2,1
10009cdc:	1462b03a 	or	r17,r2,r17
10009ce0:	ac7fff15 	stw	r17,-4(r21)
10009ce4:	000dda80 	call	1000dda8 <__malloc_unlock>
10009ce8:	a805883a 	mov	r2,r21
10009cec:	003f6b06 	br	10009a9c <__alt_data_end+0xf8009a9c>
10009cf0:	a80b883a 	mov	r5,r21
10009cf4:	9009883a 	mov	r4,r18
10009cf8:	00097700 	call	10009770 <memmove>
10009cfc:	003f4e06 	br	10009a38 <__alt_data_end+0xf8009a38>
10009d00:	89000404 	addi	r4,r17,16
10009d04:	b93fbc16 	blt	r23,r4,10009bf8 <__alt_data_end+0xf8009bf8>
10009d08:	b0800317 	ldw	r2,12(r22)
10009d0c:	b0c00217 	ldw	r3,8(r22)
10009d10:	81bfff04 	addi	r6,r16,-4
10009d14:	01000904 	movi	r4,36
10009d18:	18800315 	stw	r2,12(r3)
10009d1c:	10c00215 	stw	r3,8(r2)
10009d20:	b4800204 	addi	r18,r22,8
10009d24:	21804336 	bltu	r4,r6,10009e34 <_realloc_r+0x508>
10009d28:	008004c4 	movi	r2,19
10009d2c:	11803f2e 	bgeu	r2,r6,10009e2c <_realloc_r+0x500>
10009d30:	a8800017 	ldw	r2,0(r21)
10009d34:	b0800215 	stw	r2,8(r22)
10009d38:	a8800117 	ldw	r2,4(r21)
10009d3c:	b0800315 	stw	r2,12(r22)
10009d40:	008006c4 	movi	r2,27
10009d44:	11803f36 	bltu	r2,r6,10009e44 <_realloc_r+0x518>
10009d48:	b0800404 	addi	r2,r22,16
10009d4c:	ad400204 	addi	r21,r21,8
10009d50:	a8c00017 	ldw	r3,0(r21)
10009d54:	10c00015 	stw	r3,0(r2)
10009d58:	a8c00117 	ldw	r3,4(r21)
10009d5c:	10c00115 	stw	r3,4(r2)
10009d60:	a8c00217 	ldw	r3,8(r21)
10009d64:	10c00215 	stw	r3,8(r2)
10009d68:	b447883a 	add	r3,r22,r17
10009d6c:	bc45c83a 	sub	r2,r23,r17
10009d70:	e0c00215 	stw	r3,8(fp)
10009d74:	10800054 	ori	r2,r2,1
10009d78:	18800115 	stw	r2,4(r3)
10009d7c:	b0800117 	ldw	r2,4(r22)
10009d80:	a009883a 	mov	r4,r20
10009d84:	1080004c 	andi	r2,r2,1
10009d88:	1462b03a 	or	r17,r2,r17
10009d8c:	b4400115 	stw	r17,4(r22)
10009d90:	000dda80 	call	1000dda8 <__malloc_unlock>
10009d94:	9005883a 	mov	r2,r18
10009d98:	003f4006 	br	10009a9c <__alt_data_end+0xf8009a9c>
10009d9c:	a8c00217 	ldw	r3,8(r21)
10009da0:	90c00215 	stw	r3,8(r18)
10009da4:	a8c00317 	ldw	r3,12(r21)
10009da8:	90c00315 	stw	r3,12(r18)
10009dac:	30801126 	beq	r6,r2,10009df4 <_realloc_r+0x4c8>
10009db0:	90800404 	addi	r2,r18,16
10009db4:	a8c00404 	addi	r3,r21,16
10009db8:	003f1906 	br	10009a20 <__alt_data_end+0xf8009a20>
10009dbc:	90ffff17 	ldw	r3,-4(r18)
10009dc0:	00bfff04 	movi	r2,-4
10009dc4:	a825883a 	mov	r18,r21
10009dc8:	1884703a 	and	r2,r3,r2
10009dcc:	80a1883a 	add	r16,r16,r2
10009dd0:	003f2406 	br	10009a64 <__alt_data_end+0xf8009a64>
10009dd4:	a8800217 	ldw	r2,8(r21)
10009dd8:	b0800415 	stw	r2,16(r22)
10009ddc:	a8800317 	ldw	r2,12(r21)
10009de0:	b0800515 	stw	r2,20(r22)
10009de4:	31000a26 	beq	r6,r4,10009e10 <_realloc_r+0x4e4>
10009de8:	b0800604 	addi	r2,r22,24
10009dec:	ad400404 	addi	r21,r21,16
10009df0:	003fa906 	br	10009c98 <__alt_data_end+0xf8009c98>
10009df4:	a9000417 	ldw	r4,16(r21)
10009df8:	90800604 	addi	r2,r18,24
10009dfc:	a8c00604 	addi	r3,r21,24
10009e00:	91000415 	stw	r4,16(r18)
10009e04:	a9000517 	ldw	r4,20(r21)
10009e08:	91000515 	stw	r4,20(r18)
10009e0c:	003f0406 	br	10009a20 <__alt_data_end+0xf8009a20>
10009e10:	a8c00417 	ldw	r3,16(r21)
10009e14:	ad400604 	addi	r21,r21,24
10009e18:	b0800804 	addi	r2,r22,32
10009e1c:	b0c00615 	stw	r3,24(r22)
10009e20:	a8ffff17 	ldw	r3,-4(r21)
10009e24:	b0c00715 	stw	r3,28(r22)
10009e28:	003f9b06 	br	10009c98 <__alt_data_end+0xf8009c98>
10009e2c:	9005883a 	mov	r2,r18
10009e30:	003fc706 	br	10009d50 <__alt_data_end+0xf8009d50>
10009e34:	a80b883a 	mov	r5,r21
10009e38:	9009883a 	mov	r4,r18
10009e3c:	00097700 	call	10009770 <memmove>
10009e40:	003fc906 	br	10009d68 <__alt_data_end+0xf8009d68>
10009e44:	a8800217 	ldw	r2,8(r21)
10009e48:	b0800415 	stw	r2,16(r22)
10009e4c:	a8800317 	ldw	r2,12(r21)
10009e50:	b0800515 	stw	r2,20(r22)
10009e54:	31000726 	beq	r6,r4,10009e74 <_realloc_r+0x548>
10009e58:	b0800604 	addi	r2,r22,24
10009e5c:	ad400404 	addi	r21,r21,16
10009e60:	003fbb06 	br	10009d50 <__alt_data_end+0xf8009d50>
10009e64:	a009883a 	mov	r4,r20
10009e68:	000dda80 	call	1000dda8 <__malloc_unlock>
10009e6c:	0005883a 	mov	r2,zero
10009e70:	003f0a06 	br	10009a9c <__alt_data_end+0xf8009a9c>
10009e74:	a8c00417 	ldw	r3,16(r21)
10009e78:	ad400604 	addi	r21,r21,24
10009e7c:	b0800804 	addi	r2,r22,32
10009e80:	b0c00615 	stw	r3,24(r22)
10009e84:	a8ffff17 	ldw	r3,-4(r21)
10009e88:	b0c00715 	stw	r3,28(r22)
10009e8c:	003fb006 	br	10009d50 <__alt_data_end+0xf8009d50>

10009e90 <__swbuf_r>:
10009e90:	defffb04 	addi	sp,sp,-20
10009e94:	dcc00315 	stw	r19,12(sp)
10009e98:	dc800215 	stw	r18,8(sp)
10009e9c:	dc000015 	stw	r16,0(sp)
10009ea0:	dfc00415 	stw	ra,16(sp)
10009ea4:	dc400115 	stw	r17,4(sp)
10009ea8:	2025883a 	mov	r18,r4
10009eac:	2827883a 	mov	r19,r5
10009eb0:	3021883a 	mov	r16,r6
10009eb4:	20000226 	beq	r4,zero,10009ec0 <__swbuf_r+0x30>
10009eb8:	20800e17 	ldw	r2,56(r4)
10009ebc:	10004226 	beq	r2,zero,10009fc8 <__swbuf_r+0x138>
10009ec0:	80800617 	ldw	r2,24(r16)
10009ec4:	8100030b 	ldhu	r4,12(r16)
10009ec8:	80800215 	stw	r2,8(r16)
10009ecc:	2080020c 	andi	r2,r4,8
10009ed0:	10003626 	beq	r2,zero,10009fac <__swbuf_r+0x11c>
10009ed4:	80c00417 	ldw	r3,16(r16)
10009ed8:	18003426 	beq	r3,zero,10009fac <__swbuf_r+0x11c>
10009edc:	2088000c 	andi	r2,r4,8192
10009ee0:	9c403fcc 	andi	r17,r19,255
10009ee4:	10001a26 	beq	r2,zero,10009f50 <__swbuf_r+0xc0>
10009ee8:	80800017 	ldw	r2,0(r16)
10009eec:	81000517 	ldw	r4,20(r16)
10009ef0:	10c7c83a 	sub	r3,r2,r3
10009ef4:	1900200e 	bge	r3,r4,10009f78 <__swbuf_r+0xe8>
10009ef8:	18c00044 	addi	r3,r3,1
10009efc:	81000217 	ldw	r4,8(r16)
10009f00:	11400044 	addi	r5,r2,1
10009f04:	81400015 	stw	r5,0(r16)
10009f08:	213fffc4 	addi	r4,r4,-1
10009f0c:	81000215 	stw	r4,8(r16)
10009f10:	14c00005 	stb	r19,0(r2)
10009f14:	80800517 	ldw	r2,20(r16)
10009f18:	10c01e26 	beq	r2,r3,10009f94 <__swbuf_r+0x104>
10009f1c:	8080030b 	ldhu	r2,12(r16)
10009f20:	1080004c 	andi	r2,r2,1
10009f24:	10000226 	beq	r2,zero,10009f30 <__swbuf_r+0xa0>
10009f28:	00800284 	movi	r2,10
10009f2c:	88801926 	beq	r17,r2,10009f94 <__swbuf_r+0x104>
10009f30:	8805883a 	mov	r2,r17
10009f34:	dfc00417 	ldw	ra,16(sp)
10009f38:	dcc00317 	ldw	r19,12(sp)
10009f3c:	dc800217 	ldw	r18,8(sp)
10009f40:	dc400117 	ldw	r17,4(sp)
10009f44:	dc000017 	ldw	r16,0(sp)
10009f48:	dec00504 	addi	sp,sp,20
10009f4c:	f800283a 	ret
10009f50:	81401917 	ldw	r5,100(r16)
10009f54:	00b7ffc4 	movi	r2,-8193
10009f58:	21080014 	ori	r4,r4,8192
10009f5c:	2884703a 	and	r2,r5,r2
10009f60:	80801915 	stw	r2,100(r16)
10009f64:	80800017 	ldw	r2,0(r16)
10009f68:	8100030d 	sth	r4,12(r16)
10009f6c:	81000517 	ldw	r4,20(r16)
10009f70:	10c7c83a 	sub	r3,r2,r3
10009f74:	193fe016 	blt	r3,r4,10009ef8 <__alt_data_end+0xf8009ef8>
10009f78:	800b883a 	mov	r5,r16
10009f7c:	9009883a 	mov	r4,r18
10009f80:	0004b2c0 	call	10004b2c <_fflush_r>
10009f84:	1000071e 	bne	r2,zero,10009fa4 <__swbuf_r+0x114>
10009f88:	80800017 	ldw	r2,0(r16)
10009f8c:	00c00044 	movi	r3,1
10009f90:	003fda06 	br	10009efc <__alt_data_end+0xf8009efc>
10009f94:	800b883a 	mov	r5,r16
10009f98:	9009883a 	mov	r4,r18
10009f9c:	0004b2c0 	call	10004b2c <_fflush_r>
10009fa0:	103fe326 	beq	r2,zero,10009f30 <__alt_data_end+0xf8009f30>
10009fa4:	00bfffc4 	movi	r2,-1
10009fa8:	003fe206 	br	10009f34 <__alt_data_end+0xf8009f34>
10009fac:	800b883a 	mov	r5,r16
10009fb0:	9009883a 	mov	r4,r18
10009fb4:	0002f0c0 	call	10002f0c <__swsetup_r>
10009fb8:	103ffa1e 	bne	r2,zero,10009fa4 <__alt_data_end+0xf8009fa4>
10009fbc:	8100030b 	ldhu	r4,12(r16)
10009fc0:	80c00417 	ldw	r3,16(r16)
10009fc4:	003fc506 	br	10009edc <__alt_data_end+0xf8009edc>
10009fc8:	0004f180 	call	10004f18 <__sinit>
10009fcc:	003fbc06 	br	10009ec0 <__alt_data_end+0xf8009ec0>

10009fd0 <__swbuf>:
10009fd0:	00840074 	movhi	r2,4097
10009fd4:	1087b604 	addi	r2,r2,7896
10009fd8:	280d883a 	mov	r6,r5
10009fdc:	200b883a 	mov	r5,r4
10009fe0:	11000017 	ldw	r4,0(r2)
10009fe4:	0009e901 	jmpi	10009e90 <__swbuf_r>

10009fe8 <_wcrtomb_r>:
10009fe8:	defff604 	addi	sp,sp,-40
10009fec:	00840074 	movhi	r2,4097
10009ff0:	dc800815 	stw	r18,32(sp)
10009ff4:	dc400715 	stw	r17,28(sp)
10009ff8:	dc000615 	stw	r16,24(sp)
10009ffc:	1087ba04 	addi	r2,r2,7912
1000a000:	dfc00915 	stw	ra,36(sp)
1000a004:	2021883a 	mov	r16,r4
1000a008:	3823883a 	mov	r17,r7
1000a00c:	14800017 	ldw	r18,0(r2)
1000a010:	28001426 	beq	r5,zero,1000a064 <_wcrtomb_r+0x7c>
1000a014:	d9400415 	stw	r5,16(sp)
1000a018:	d9800515 	stw	r6,20(sp)
1000a01c:	00055a00 	call	100055a0 <__locale_charset>
1000a020:	d9800517 	ldw	r6,20(sp)
1000a024:	d9400417 	ldw	r5,16(sp)
1000a028:	100f883a 	mov	r7,r2
1000a02c:	dc400015 	stw	r17,0(sp)
1000a030:	8009883a 	mov	r4,r16
1000a034:	903ee83a 	callr	r18
1000a038:	00ffffc4 	movi	r3,-1
1000a03c:	10c0031e 	bne	r2,r3,1000a04c <_wcrtomb_r+0x64>
1000a040:	88000015 	stw	zero,0(r17)
1000a044:	00c02284 	movi	r3,138
1000a048:	80c00015 	stw	r3,0(r16)
1000a04c:	dfc00917 	ldw	ra,36(sp)
1000a050:	dc800817 	ldw	r18,32(sp)
1000a054:	dc400717 	ldw	r17,28(sp)
1000a058:	dc000617 	ldw	r16,24(sp)
1000a05c:	dec00a04 	addi	sp,sp,40
1000a060:	f800283a 	ret
1000a064:	00055a00 	call	100055a0 <__locale_charset>
1000a068:	100f883a 	mov	r7,r2
1000a06c:	dc400015 	stw	r17,0(sp)
1000a070:	000d883a 	mov	r6,zero
1000a074:	d9400104 	addi	r5,sp,4
1000a078:	8009883a 	mov	r4,r16
1000a07c:	903ee83a 	callr	r18
1000a080:	003fed06 	br	1000a038 <__alt_data_end+0xf800a038>

1000a084 <wcrtomb>:
1000a084:	defff604 	addi	sp,sp,-40
1000a088:	00840074 	movhi	r2,4097
1000a08c:	dc800615 	stw	r18,24(sp)
1000a090:	dc400515 	stw	r17,20(sp)
1000a094:	1087b604 	addi	r2,r2,7896
1000a098:	dfc00915 	stw	ra,36(sp)
1000a09c:	dd000815 	stw	r20,32(sp)
1000a0a0:	dcc00715 	stw	r19,28(sp)
1000a0a4:	dc000415 	stw	r16,16(sp)
1000a0a8:	3025883a 	mov	r18,r6
1000a0ac:	14400017 	ldw	r17,0(r2)
1000a0b0:	20001926 	beq	r4,zero,1000a118 <wcrtomb+0x94>
1000a0b4:	00840074 	movhi	r2,4097
1000a0b8:	1087ba04 	addi	r2,r2,7912
1000a0bc:	15000017 	ldw	r20,0(r2)
1000a0c0:	2021883a 	mov	r16,r4
1000a0c4:	2827883a 	mov	r19,r5
1000a0c8:	00055a00 	call	100055a0 <__locale_charset>
1000a0cc:	100f883a 	mov	r7,r2
1000a0d0:	dc800015 	stw	r18,0(sp)
1000a0d4:	980d883a 	mov	r6,r19
1000a0d8:	800b883a 	mov	r5,r16
1000a0dc:	8809883a 	mov	r4,r17
1000a0e0:	a03ee83a 	callr	r20
1000a0e4:	00ffffc4 	movi	r3,-1
1000a0e8:	10c0031e 	bne	r2,r3,1000a0f8 <wcrtomb+0x74>
1000a0ec:	90000015 	stw	zero,0(r18)
1000a0f0:	00c02284 	movi	r3,138
1000a0f4:	88c00015 	stw	r3,0(r17)
1000a0f8:	dfc00917 	ldw	ra,36(sp)
1000a0fc:	dd000817 	ldw	r20,32(sp)
1000a100:	dcc00717 	ldw	r19,28(sp)
1000a104:	dc800617 	ldw	r18,24(sp)
1000a108:	dc400517 	ldw	r17,20(sp)
1000a10c:	dc000417 	ldw	r16,16(sp)
1000a110:	dec00a04 	addi	sp,sp,40
1000a114:	f800283a 	ret
1000a118:	00840074 	movhi	r2,4097
1000a11c:	1087ba04 	addi	r2,r2,7912
1000a120:	14000017 	ldw	r16,0(r2)
1000a124:	00055a00 	call	100055a0 <__locale_charset>
1000a128:	100f883a 	mov	r7,r2
1000a12c:	dc800015 	stw	r18,0(sp)
1000a130:	000d883a 	mov	r6,zero
1000a134:	d9400104 	addi	r5,sp,4
1000a138:	8809883a 	mov	r4,r17
1000a13c:	803ee83a 	callr	r16
1000a140:	003fe806 	br	1000a0e4 <__alt_data_end+0xf800a0e4>

1000a144 <__ascii_wctomb>:
1000a144:	28000526 	beq	r5,zero,1000a15c <__ascii_wctomb+0x18>
1000a148:	00803fc4 	movi	r2,255
1000a14c:	11800536 	bltu	r2,r6,1000a164 <__ascii_wctomb+0x20>
1000a150:	29800005 	stb	r6,0(r5)
1000a154:	00800044 	movi	r2,1
1000a158:	f800283a 	ret
1000a15c:	0005883a 	mov	r2,zero
1000a160:	f800283a 	ret
1000a164:	00802284 	movi	r2,138
1000a168:	20800015 	stw	r2,0(r4)
1000a16c:	00bfffc4 	movi	r2,-1
1000a170:	f800283a 	ret

1000a174 <_wctomb_r>:
1000a174:	00840074 	movhi	r2,4097
1000a178:	defff904 	addi	sp,sp,-28
1000a17c:	1087ba04 	addi	r2,r2,7912
1000a180:	dfc00615 	stw	ra,24(sp)
1000a184:	dc400515 	stw	r17,20(sp)
1000a188:	dc000415 	stw	r16,16(sp)
1000a18c:	3823883a 	mov	r17,r7
1000a190:	14000017 	ldw	r16,0(r2)
1000a194:	d9000115 	stw	r4,4(sp)
1000a198:	d9400215 	stw	r5,8(sp)
1000a19c:	d9800315 	stw	r6,12(sp)
1000a1a0:	00055a00 	call	100055a0 <__locale_charset>
1000a1a4:	d9800317 	ldw	r6,12(sp)
1000a1a8:	d9400217 	ldw	r5,8(sp)
1000a1ac:	d9000117 	ldw	r4,4(sp)
1000a1b0:	100f883a 	mov	r7,r2
1000a1b4:	dc400015 	stw	r17,0(sp)
1000a1b8:	803ee83a 	callr	r16
1000a1bc:	dfc00617 	ldw	ra,24(sp)
1000a1c0:	dc400517 	ldw	r17,20(sp)
1000a1c4:	dc000417 	ldw	r16,16(sp)
1000a1c8:	dec00704 	addi	sp,sp,28
1000a1cc:	f800283a 	ret

1000a1d0 <__udivdi3>:
1000a1d0:	defff404 	addi	sp,sp,-48
1000a1d4:	dcc00515 	stw	r19,20(sp)
1000a1d8:	dc000215 	stw	r16,8(sp)
1000a1dc:	dfc00b15 	stw	ra,44(sp)
1000a1e0:	df000a15 	stw	fp,40(sp)
1000a1e4:	ddc00915 	stw	r23,36(sp)
1000a1e8:	dd800815 	stw	r22,32(sp)
1000a1ec:	dd400715 	stw	r21,28(sp)
1000a1f0:	dd000615 	stw	r20,24(sp)
1000a1f4:	dc800415 	stw	r18,16(sp)
1000a1f8:	dc400315 	stw	r17,12(sp)
1000a1fc:	2027883a 	mov	r19,r4
1000a200:	2821883a 	mov	r16,r5
1000a204:	3800461e 	bne	r7,zero,1000a320 <__udivdi3+0x150>
1000a208:	3023883a 	mov	r17,r6
1000a20c:	2025883a 	mov	r18,r4
1000a210:	2980572e 	bgeu	r5,r6,1000a370 <__udivdi3+0x1a0>
1000a214:	00bfffd4 	movui	r2,65535
1000a218:	282d883a 	mov	r22,r5
1000a21c:	1180b236 	bltu	r2,r6,1000a4e8 <__udivdi3+0x318>
1000a220:	00803fc4 	movi	r2,255
1000a224:	1185803a 	cmpltu	r2,r2,r6
1000a228:	100490fa 	slli	r2,r2,3
1000a22c:	3086d83a 	srl	r3,r6,r2
1000a230:	01040074 	movhi	r4,4097
1000a234:	2100bb04 	addi	r4,r4,748
1000a238:	20c7883a 	add	r3,r4,r3
1000a23c:	18c00003 	ldbu	r3,0(r3)
1000a240:	1885883a 	add	r2,r3,r2
1000a244:	00c00804 	movi	r3,32
1000a248:	1887c83a 	sub	r3,r3,r2
1000a24c:	18000526 	beq	r3,zero,1000a264 <__udivdi3+0x94>
1000a250:	80e0983a 	sll	r16,r16,r3
1000a254:	9884d83a 	srl	r2,r19,r2
1000a258:	30e2983a 	sll	r17,r6,r3
1000a25c:	98e4983a 	sll	r18,r19,r3
1000a260:	142cb03a 	or	r22,r2,r16
1000a264:	882ad43a 	srli	r21,r17,16
1000a268:	b009883a 	mov	r4,r22
1000a26c:	8d3fffcc 	andi	r20,r17,65535
1000a270:	a80b883a 	mov	r5,r21
1000a274:	000aeec0 	call	1000aeec <__umodsi3>
1000a278:	b009883a 	mov	r4,r22
1000a27c:	a80b883a 	mov	r5,r21
1000a280:	1027883a 	mov	r19,r2
1000a284:	000ae880 	call	1000ae88 <__udivsi3>
1000a288:	100b883a 	mov	r5,r2
1000a28c:	a009883a 	mov	r4,r20
1000a290:	102d883a 	mov	r22,r2
1000a294:	000097c0 	call	1000097c <__mulsi3>
1000a298:	9826943a 	slli	r19,r19,16
1000a29c:	9006d43a 	srli	r3,r18,16
1000a2a0:	1cc6b03a 	or	r3,r3,r19
1000a2a4:	1880052e 	bgeu	r3,r2,1000a2bc <__udivdi3+0xec>
1000a2a8:	1c47883a 	add	r3,r3,r17
1000a2ac:	b13fffc4 	addi	r4,r22,-1
1000a2b0:	1c400136 	bltu	r3,r17,1000a2b8 <__udivdi3+0xe8>
1000a2b4:	18814236 	bltu	r3,r2,1000a7c0 <__udivdi3+0x5f0>
1000a2b8:	202d883a 	mov	r22,r4
1000a2bc:	18a1c83a 	sub	r16,r3,r2
1000a2c0:	8009883a 	mov	r4,r16
1000a2c4:	a80b883a 	mov	r5,r21
1000a2c8:	000aeec0 	call	1000aeec <__umodsi3>
1000a2cc:	1027883a 	mov	r19,r2
1000a2d0:	8009883a 	mov	r4,r16
1000a2d4:	a80b883a 	mov	r5,r21
1000a2d8:	9826943a 	slli	r19,r19,16
1000a2dc:	000ae880 	call	1000ae88 <__udivsi3>
1000a2e0:	100b883a 	mov	r5,r2
1000a2e4:	a009883a 	mov	r4,r20
1000a2e8:	94bfffcc 	andi	r18,r18,65535
1000a2ec:	1021883a 	mov	r16,r2
1000a2f0:	94e4b03a 	or	r18,r18,r19
1000a2f4:	000097c0 	call	1000097c <__mulsi3>
1000a2f8:	9080052e 	bgeu	r18,r2,1000a310 <__udivdi3+0x140>
1000a2fc:	8ca5883a 	add	r18,r17,r18
1000a300:	80ffffc4 	addi	r3,r16,-1
1000a304:	94410c36 	bltu	r18,r17,1000a738 <__udivdi3+0x568>
1000a308:	90810b2e 	bgeu	r18,r2,1000a738 <__udivdi3+0x568>
1000a30c:	843fff84 	addi	r16,r16,-2
1000a310:	b004943a 	slli	r2,r22,16
1000a314:	0007883a 	mov	r3,zero
1000a318:	1404b03a 	or	r2,r2,r16
1000a31c:	00005e06 	br	1000a498 <__udivdi3+0x2c8>
1000a320:	29c05b36 	bltu	r5,r7,1000a490 <__udivdi3+0x2c0>
1000a324:	00bfffd4 	movui	r2,65535
1000a328:	11c0672e 	bgeu	r2,r7,1000a4c8 <__udivdi3+0x2f8>
1000a32c:	00804034 	movhi	r2,256
1000a330:	10bfffc4 	addi	r2,r2,-1
1000a334:	11c10a36 	bltu	r2,r7,1000a760 <__udivdi3+0x590>
1000a338:	00800404 	movi	r2,16
1000a33c:	3886d83a 	srl	r3,r7,r2
1000a340:	01040074 	movhi	r4,4097
1000a344:	2100bb04 	addi	r4,r4,748
1000a348:	20c7883a 	add	r3,r4,r3
1000a34c:	18c00003 	ldbu	r3,0(r3)
1000a350:	05c00804 	movi	r23,32
1000a354:	1885883a 	add	r2,r3,r2
1000a358:	b8afc83a 	sub	r23,r23,r2
1000a35c:	b800671e 	bne	r23,zero,1000a4fc <__udivdi3+0x32c>
1000a360:	3c010536 	bltu	r7,r16,1000a778 <__udivdi3+0x5a8>
1000a364:	9985403a 	cmpgeu	r2,r19,r6
1000a368:	0007883a 	mov	r3,zero
1000a36c:	00004a06 	br	1000a498 <__udivdi3+0x2c8>
1000a370:	3000041e 	bne	r6,zero,1000a384 <__udivdi3+0x1b4>
1000a374:	000b883a 	mov	r5,zero
1000a378:	01000044 	movi	r4,1
1000a37c:	000ae880 	call	1000ae88 <__udivsi3>
1000a380:	1023883a 	mov	r17,r2
1000a384:	00bfffd4 	movui	r2,65535
1000a388:	1440532e 	bgeu	r2,r17,1000a4d8 <__udivdi3+0x308>
1000a38c:	00804034 	movhi	r2,256
1000a390:	10bfffc4 	addi	r2,r2,-1
1000a394:	1440f436 	bltu	r2,r17,1000a768 <__udivdi3+0x598>
1000a398:	00800404 	movi	r2,16
1000a39c:	8886d83a 	srl	r3,r17,r2
1000a3a0:	01040074 	movhi	r4,4097
1000a3a4:	2100bb04 	addi	r4,r4,748
1000a3a8:	20c7883a 	add	r3,r4,r3
1000a3ac:	18c00003 	ldbu	r3,0(r3)
1000a3b0:	1885883a 	add	r2,r3,r2
1000a3b4:	00c00804 	movi	r3,32
1000a3b8:	1887c83a 	sub	r3,r3,r2
1000a3bc:	1800a51e 	bne	r3,zero,1000a654 <__udivdi3+0x484>
1000a3c0:	882ad43a 	srli	r21,r17,16
1000a3c4:	8461c83a 	sub	r16,r16,r17
1000a3c8:	8d3fffcc 	andi	r20,r17,65535
1000a3cc:	00c00044 	movi	r3,1
1000a3d0:	a80b883a 	mov	r5,r21
1000a3d4:	8009883a 	mov	r4,r16
1000a3d8:	d8c00115 	stw	r3,4(sp)
1000a3dc:	000aeec0 	call	1000aeec <__umodsi3>
1000a3e0:	a80b883a 	mov	r5,r21
1000a3e4:	8009883a 	mov	r4,r16
1000a3e8:	1027883a 	mov	r19,r2
1000a3ec:	000ae880 	call	1000ae88 <__udivsi3>
1000a3f0:	a00b883a 	mov	r5,r20
1000a3f4:	1009883a 	mov	r4,r2
1000a3f8:	102d883a 	mov	r22,r2
1000a3fc:	000097c0 	call	1000097c <__mulsi3>
1000a400:	9826943a 	slli	r19,r19,16
1000a404:	900ed43a 	srli	r7,r18,16
1000a408:	d8c00117 	ldw	r3,4(sp)
1000a40c:	3cceb03a 	or	r7,r7,r19
1000a410:	3880052e 	bgeu	r7,r2,1000a428 <__udivdi3+0x258>
1000a414:	3c4f883a 	add	r7,r7,r17
1000a418:	b13fffc4 	addi	r4,r22,-1
1000a41c:	3c400136 	bltu	r7,r17,1000a424 <__udivdi3+0x254>
1000a420:	3880e436 	bltu	r7,r2,1000a7b4 <__udivdi3+0x5e4>
1000a424:	202d883a 	mov	r22,r4
1000a428:	38a1c83a 	sub	r16,r7,r2
1000a42c:	8009883a 	mov	r4,r16
1000a430:	a80b883a 	mov	r5,r21
1000a434:	d8c00115 	stw	r3,4(sp)
1000a438:	000aeec0 	call	1000aeec <__umodsi3>
1000a43c:	1027883a 	mov	r19,r2
1000a440:	8009883a 	mov	r4,r16
1000a444:	a80b883a 	mov	r5,r21
1000a448:	9826943a 	slli	r19,r19,16
1000a44c:	000ae880 	call	1000ae88 <__udivsi3>
1000a450:	a00b883a 	mov	r5,r20
1000a454:	1009883a 	mov	r4,r2
1000a458:	94bfffcc 	andi	r18,r18,65535
1000a45c:	1021883a 	mov	r16,r2
1000a460:	94e4b03a 	or	r18,r18,r19
1000a464:	000097c0 	call	1000097c <__mulsi3>
1000a468:	d8c00117 	ldw	r3,4(sp)
1000a46c:	9080052e 	bgeu	r18,r2,1000a484 <__udivdi3+0x2b4>
1000a470:	8ca5883a 	add	r18,r17,r18
1000a474:	813fffc4 	addi	r4,r16,-1
1000a478:	9440ad36 	bltu	r18,r17,1000a730 <__udivdi3+0x560>
1000a47c:	9080ac2e 	bgeu	r18,r2,1000a730 <__udivdi3+0x560>
1000a480:	843fff84 	addi	r16,r16,-2
1000a484:	b004943a 	slli	r2,r22,16
1000a488:	1404b03a 	or	r2,r2,r16
1000a48c:	00000206 	br	1000a498 <__udivdi3+0x2c8>
1000a490:	0007883a 	mov	r3,zero
1000a494:	0005883a 	mov	r2,zero
1000a498:	dfc00b17 	ldw	ra,44(sp)
1000a49c:	df000a17 	ldw	fp,40(sp)
1000a4a0:	ddc00917 	ldw	r23,36(sp)
1000a4a4:	dd800817 	ldw	r22,32(sp)
1000a4a8:	dd400717 	ldw	r21,28(sp)
1000a4ac:	dd000617 	ldw	r20,24(sp)
1000a4b0:	dcc00517 	ldw	r19,20(sp)
1000a4b4:	dc800417 	ldw	r18,16(sp)
1000a4b8:	dc400317 	ldw	r17,12(sp)
1000a4bc:	dc000217 	ldw	r16,8(sp)
1000a4c0:	dec00c04 	addi	sp,sp,48
1000a4c4:	f800283a 	ret
1000a4c8:	00803fc4 	movi	r2,255
1000a4cc:	11c5803a 	cmpltu	r2,r2,r7
1000a4d0:	100490fa 	slli	r2,r2,3
1000a4d4:	003f9906 	br	1000a33c <__alt_data_end+0xf800a33c>
1000a4d8:	00803fc4 	movi	r2,255
1000a4dc:	1445803a 	cmpltu	r2,r2,r17
1000a4e0:	100490fa 	slli	r2,r2,3
1000a4e4:	003fad06 	br	1000a39c <__alt_data_end+0xf800a39c>
1000a4e8:	00804034 	movhi	r2,256
1000a4ec:	10bfffc4 	addi	r2,r2,-1
1000a4f0:	11809f36 	bltu	r2,r6,1000a770 <__udivdi3+0x5a0>
1000a4f4:	00800404 	movi	r2,16
1000a4f8:	003f4c06 	br	1000a22c <__alt_data_end+0xf800a22c>
1000a4fc:	3dce983a 	sll	r7,r7,r23
1000a500:	30b8d83a 	srl	fp,r6,r2
1000a504:	80a2d83a 	srl	r17,r16,r2
1000a508:	35cc983a 	sll	r6,r6,r23
1000a50c:	3f38b03a 	or	fp,r7,fp
1000a510:	e024d43a 	srli	r18,fp,16
1000a514:	9884d83a 	srl	r2,r19,r2
1000a518:	85e0983a 	sll	r16,r16,r23
1000a51c:	8809883a 	mov	r4,r17
1000a520:	900b883a 	mov	r5,r18
1000a524:	d9800015 	stw	r6,0(sp)
1000a528:	1420b03a 	or	r16,r2,r16
1000a52c:	000aeec0 	call	1000aeec <__umodsi3>
1000a530:	900b883a 	mov	r5,r18
1000a534:	8809883a 	mov	r4,r17
1000a538:	1029883a 	mov	r20,r2
1000a53c:	e5bfffcc 	andi	r22,fp,65535
1000a540:	000ae880 	call	1000ae88 <__udivsi3>
1000a544:	100b883a 	mov	r5,r2
1000a548:	b009883a 	mov	r4,r22
1000a54c:	102b883a 	mov	r21,r2
1000a550:	000097c0 	call	1000097c <__mulsi3>
1000a554:	a028943a 	slli	r20,r20,16
1000a558:	8006d43a 	srli	r3,r16,16
1000a55c:	1d06b03a 	or	r3,r3,r20
1000a560:	1880042e 	bgeu	r3,r2,1000a574 <__udivdi3+0x3a4>
1000a564:	1f07883a 	add	r3,r3,fp
1000a568:	a93fffc4 	addi	r4,r21,-1
1000a56c:	1f00892e 	bgeu	r3,fp,1000a794 <__udivdi3+0x5c4>
1000a570:	202b883a 	mov	r21,r4
1000a574:	18a3c83a 	sub	r17,r3,r2
1000a578:	8809883a 	mov	r4,r17
1000a57c:	900b883a 	mov	r5,r18
1000a580:	000aeec0 	call	1000aeec <__umodsi3>
1000a584:	1029883a 	mov	r20,r2
1000a588:	8809883a 	mov	r4,r17
1000a58c:	900b883a 	mov	r5,r18
1000a590:	a028943a 	slli	r20,r20,16
1000a594:	000ae880 	call	1000ae88 <__udivsi3>
1000a598:	100b883a 	mov	r5,r2
1000a59c:	b009883a 	mov	r4,r22
1000a5a0:	843fffcc 	andi	r16,r16,65535
1000a5a4:	1023883a 	mov	r17,r2
1000a5a8:	8520b03a 	or	r16,r16,r20
1000a5ac:	000097c0 	call	1000097c <__mulsi3>
1000a5b0:	8080042e 	bgeu	r16,r2,1000a5c4 <__udivdi3+0x3f4>
1000a5b4:	8721883a 	add	r16,r16,fp
1000a5b8:	88ffffc4 	addi	r3,r17,-1
1000a5bc:	8700712e 	bgeu	r16,fp,1000a784 <__udivdi3+0x5b4>
1000a5c0:	1823883a 	mov	r17,r3
1000a5c4:	a80e943a 	slli	r7,r21,16
1000a5c8:	d8c00017 	ldw	r3,0(sp)
1000a5cc:	80a1c83a 	sub	r16,r16,r2
1000a5d0:	3c64b03a 	or	r18,r7,r17
1000a5d4:	1d3fffcc 	andi	r20,r3,65535
1000a5d8:	9022d43a 	srli	r17,r18,16
1000a5dc:	95bfffcc 	andi	r22,r18,65535
1000a5e0:	a00b883a 	mov	r5,r20
1000a5e4:	b009883a 	mov	r4,r22
1000a5e8:	182ad43a 	srli	r21,r3,16
1000a5ec:	000097c0 	call	1000097c <__mulsi3>
1000a5f0:	a00b883a 	mov	r5,r20
1000a5f4:	8809883a 	mov	r4,r17
1000a5f8:	1039883a 	mov	fp,r2
1000a5fc:	000097c0 	call	1000097c <__mulsi3>
1000a600:	8809883a 	mov	r4,r17
1000a604:	a80b883a 	mov	r5,r21
1000a608:	1029883a 	mov	r20,r2
1000a60c:	000097c0 	call	1000097c <__mulsi3>
1000a610:	a80b883a 	mov	r5,r21
1000a614:	b009883a 	mov	r4,r22
1000a618:	1023883a 	mov	r17,r2
1000a61c:	000097c0 	call	1000097c <__mulsi3>
1000a620:	e006d43a 	srli	r3,fp,16
1000a624:	1505883a 	add	r2,r2,r20
1000a628:	1887883a 	add	r3,r3,r2
1000a62c:	1d00022e 	bgeu	r3,r20,1000a638 <__udivdi3+0x468>
1000a630:	00800074 	movhi	r2,1
1000a634:	88a3883a 	add	r17,r17,r2
1000a638:	1804d43a 	srli	r2,r3,16
1000a63c:	1463883a 	add	r17,r2,r17
1000a640:	84404436 	bltu	r16,r17,1000a754 <__udivdi3+0x584>
1000a644:	84403e26 	beq	r16,r17,1000a740 <__udivdi3+0x570>
1000a648:	9005883a 	mov	r2,r18
1000a64c:	0007883a 	mov	r3,zero
1000a650:	003f9106 	br	1000a498 <__alt_data_end+0xf800a498>
1000a654:	88e2983a 	sll	r17,r17,r3
1000a658:	80aed83a 	srl	r23,r16,r2
1000a65c:	80e0983a 	sll	r16,r16,r3
1000a660:	882ad43a 	srli	r21,r17,16
1000a664:	9884d83a 	srl	r2,r19,r2
1000a668:	b809883a 	mov	r4,r23
1000a66c:	a80b883a 	mov	r5,r21
1000a670:	98e4983a 	sll	r18,r19,r3
1000a674:	142cb03a 	or	r22,r2,r16
1000a678:	000aeec0 	call	1000aeec <__umodsi3>
1000a67c:	b809883a 	mov	r4,r23
1000a680:	a80b883a 	mov	r5,r21
1000a684:	1027883a 	mov	r19,r2
1000a688:	8d3fffcc 	andi	r20,r17,65535
1000a68c:	000ae880 	call	1000ae88 <__udivsi3>
1000a690:	a009883a 	mov	r4,r20
1000a694:	100b883a 	mov	r5,r2
1000a698:	102f883a 	mov	r23,r2
1000a69c:	000097c0 	call	1000097c <__mulsi3>
1000a6a0:	9826943a 	slli	r19,r19,16
1000a6a4:	b008d43a 	srli	r4,r22,16
1000a6a8:	24c8b03a 	or	r4,r4,r19
1000a6ac:	2080062e 	bgeu	r4,r2,1000a6c8 <__udivdi3+0x4f8>
1000a6b0:	2449883a 	add	r4,r4,r17
1000a6b4:	b8ffffc4 	addi	r3,r23,-1
1000a6b8:	24403c36 	bltu	r4,r17,1000a7ac <__udivdi3+0x5dc>
1000a6bc:	20803b2e 	bgeu	r4,r2,1000a7ac <__udivdi3+0x5dc>
1000a6c0:	bdffff84 	addi	r23,r23,-2
1000a6c4:	2449883a 	add	r4,r4,r17
1000a6c8:	20a1c83a 	sub	r16,r4,r2
1000a6cc:	a80b883a 	mov	r5,r21
1000a6d0:	8009883a 	mov	r4,r16
1000a6d4:	000aeec0 	call	1000aeec <__umodsi3>
1000a6d8:	a80b883a 	mov	r5,r21
1000a6dc:	8009883a 	mov	r4,r16
1000a6e0:	1027883a 	mov	r19,r2
1000a6e4:	000ae880 	call	1000ae88 <__udivsi3>
1000a6e8:	a009883a 	mov	r4,r20
1000a6ec:	100b883a 	mov	r5,r2
1000a6f0:	9826943a 	slli	r19,r19,16
1000a6f4:	1039883a 	mov	fp,r2
1000a6f8:	000097c0 	call	1000097c <__mulsi3>
1000a6fc:	b13fffcc 	andi	r4,r22,65535
1000a700:	24c8b03a 	or	r4,r4,r19
1000a704:	2080062e 	bgeu	r4,r2,1000a720 <__udivdi3+0x550>
1000a708:	2449883a 	add	r4,r4,r17
1000a70c:	e0ffffc4 	addi	r3,fp,-1
1000a710:	24402436 	bltu	r4,r17,1000a7a4 <__udivdi3+0x5d4>
1000a714:	2080232e 	bgeu	r4,r2,1000a7a4 <__udivdi3+0x5d4>
1000a718:	e73fff84 	addi	fp,fp,-2
1000a71c:	2449883a 	add	r4,r4,r17
1000a720:	b82e943a 	slli	r23,r23,16
1000a724:	20a1c83a 	sub	r16,r4,r2
1000a728:	bf06b03a 	or	r3,r23,fp
1000a72c:	003f2806 	br	1000a3d0 <__alt_data_end+0xf800a3d0>
1000a730:	2021883a 	mov	r16,r4
1000a734:	003f5306 	br	1000a484 <__alt_data_end+0xf800a484>
1000a738:	1821883a 	mov	r16,r3
1000a73c:	003ef406 	br	1000a310 <__alt_data_end+0xf800a310>
1000a740:	1806943a 	slli	r3,r3,16
1000a744:	9de6983a 	sll	r19,r19,r23
1000a748:	e73fffcc 	andi	fp,fp,65535
1000a74c:	1f07883a 	add	r3,r3,fp
1000a750:	98ffbd2e 	bgeu	r19,r3,1000a648 <__alt_data_end+0xf800a648>
1000a754:	90bfffc4 	addi	r2,r18,-1
1000a758:	0007883a 	mov	r3,zero
1000a75c:	003f4e06 	br	1000a498 <__alt_data_end+0xf800a498>
1000a760:	00800604 	movi	r2,24
1000a764:	003ef506 	br	1000a33c <__alt_data_end+0xf800a33c>
1000a768:	00800604 	movi	r2,24
1000a76c:	003f0b06 	br	1000a39c <__alt_data_end+0xf800a39c>
1000a770:	00800604 	movi	r2,24
1000a774:	003ead06 	br	1000a22c <__alt_data_end+0xf800a22c>
1000a778:	0007883a 	mov	r3,zero
1000a77c:	00800044 	movi	r2,1
1000a780:	003f4506 	br	1000a498 <__alt_data_end+0xf800a498>
1000a784:	80bf8e2e 	bgeu	r16,r2,1000a5c0 <__alt_data_end+0xf800a5c0>
1000a788:	8c7fff84 	addi	r17,r17,-2
1000a78c:	8721883a 	add	r16,r16,fp
1000a790:	003f8c06 	br	1000a5c4 <__alt_data_end+0xf800a5c4>
1000a794:	18bf762e 	bgeu	r3,r2,1000a570 <__alt_data_end+0xf800a570>
1000a798:	ad7fff84 	addi	r21,r21,-2
1000a79c:	1f07883a 	add	r3,r3,fp
1000a7a0:	003f7406 	br	1000a574 <__alt_data_end+0xf800a574>
1000a7a4:	1839883a 	mov	fp,r3
1000a7a8:	003fdd06 	br	1000a720 <__alt_data_end+0xf800a720>
1000a7ac:	182f883a 	mov	r23,r3
1000a7b0:	003fc506 	br	1000a6c8 <__alt_data_end+0xf800a6c8>
1000a7b4:	b5bfff84 	addi	r22,r22,-2
1000a7b8:	3c4f883a 	add	r7,r7,r17
1000a7bc:	003f1a06 	br	1000a428 <__alt_data_end+0xf800a428>
1000a7c0:	b5bfff84 	addi	r22,r22,-2
1000a7c4:	1c47883a 	add	r3,r3,r17
1000a7c8:	003ebc06 	br	1000a2bc <__alt_data_end+0xf800a2bc>

1000a7cc <__umoddi3>:
1000a7cc:	defff304 	addi	sp,sp,-52
1000a7d0:	df000b15 	stw	fp,44(sp)
1000a7d4:	dc400415 	stw	r17,16(sp)
1000a7d8:	dc000315 	stw	r16,12(sp)
1000a7dc:	dfc00c15 	stw	ra,48(sp)
1000a7e0:	ddc00a15 	stw	r23,40(sp)
1000a7e4:	dd800915 	stw	r22,36(sp)
1000a7e8:	dd400815 	stw	r21,32(sp)
1000a7ec:	dd000715 	stw	r20,28(sp)
1000a7f0:	dcc00615 	stw	r19,24(sp)
1000a7f4:	dc800515 	stw	r18,20(sp)
1000a7f8:	2021883a 	mov	r16,r4
1000a7fc:	2823883a 	mov	r17,r5
1000a800:	2839883a 	mov	fp,r5
1000a804:	3800401e 	bne	r7,zero,1000a908 <__umoddi3+0x13c>
1000a808:	3027883a 	mov	r19,r6
1000a80c:	2029883a 	mov	r20,r4
1000a810:	2980552e 	bgeu	r5,r6,1000a968 <__umoddi3+0x19c>
1000a814:	00bfffd4 	movui	r2,65535
1000a818:	1180a236 	bltu	r2,r6,1000aaa4 <__umoddi3+0x2d8>
1000a81c:	01003fc4 	movi	r4,255
1000a820:	2189803a 	cmpltu	r4,r4,r6
1000a824:	200890fa 	slli	r4,r4,3
1000a828:	3104d83a 	srl	r2,r6,r4
1000a82c:	00c40074 	movhi	r3,4097
1000a830:	18c0bb04 	addi	r3,r3,748
1000a834:	1885883a 	add	r2,r3,r2
1000a838:	10c00003 	ldbu	r3,0(r2)
1000a83c:	00800804 	movi	r2,32
1000a840:	1909883a 	add	r4,r3,r4
1000a844:	1125c83a 	sub	r18,r2,r4
1000a848:	90000526 	beq	r18,zero,1000a860 <__umoddi3+0x94>
1000a84c:	8ca2983a 	sll	r17,r17,r18
1000a850:	8108d83a 	srl	r4,r16,r4
1000a854:	34a6983a 	sll	r19,r6,r18
1000a858:	84a8983a 	sll	r20,r16,r18
1000a85c:	2478b03a 	or	fp,r4,r17
1000a860:	982cd43a 	srli	r22,r19,16
1000a864:	e009883a 	mov	r4,fp
1000a868:	9dffffcc 	andi	r23,r19,65535
1000a86c:	b00b883a 	mov	r5,r22
1000a870:	000aeec0 	call	1000aeec <__umodsi3>
1000a874:	b00b883a 	mov	r5,r22
1000a878:	e009883a 	mov	r4,fp
1000a87c:	102b883a 	mov	r21,r2
1000a880:	000ae880 	call	1000ae88 <__udivsi3>
1000a884:	100b883a 	mov	r5,r2
1000a888:	b809883a 	mov	r4,r23
1000a88c:	000097c0 	call	1000097c <__mulsi3>
1000a890:	a82a943a 	slli	r21,r21,16
1000a894:	a006d43a 	srli	r3,r20,16
1000a898:	1d46b03a 	or	r3,r3,r21
1000a89c:	1880032e 	bgeu	r3,r2,1000a8ac <__umoddi3+0xe0>
1000a8a0:	1cc7883a 	add	r3,r3,r19
1000a8a4:	1cc00136 	bltu	r3,r19,1000a8ac <__umoddi3+0xe0>
1000a8a8:	18813136 	bltu	r3,r2,1000ad70 <__umoddi3+0x5a4>
1000a8ac:	18a1c83a 	sub	r16,r3,r2
1000a8b0:	b00b883a 	mov	r5,r22
1000a8b4:	8009883a 	mov	r4,r16
1000a8b8:	000aeec0 	call	1000aeec <__umodsi3>
1000a8bc:	b00b883a 	mov	r5,r22
1000a8c0:	8009883a 	mov	r4,r16
1000a8c4:	1023883a 	mov	r17,r2
1000a8c8:	000ae880 	call	1000ae88 <__udivsi3>
1000a8cc:	100b883a 	mov	r5,r2
1000a8d0:	b809883a 	mov	r4,r23
1000a8d4:	8822943a 	slli	r17,r17,16
1000a8d8:	000097c0 	call	1000097c <__mulsi3>
1000a8dc:	a0ffffcc 	andi	r3,r20,65535
1000a8e0:	1c46b03a 	or	r3,r3,r17
1000a8e4:	1880042e 	bgeu	r3,r2,1000a8f8 <__umoddi3+0x12c>
1000a8e8:	1cc7883a 	add	r3,r3,r19
1000a8ec:	1cc00236 	bltu	r3,r19,1000a8f8 <__umoddi3+0x12c>
1000a8f0:	1880012e 	bgeu	r3,r2,1000a8f8 <__umoddi3+0x12c>
1000a8f4:	1cc7883a 	add	r3,r3,r19
1000a8f8:	1885c83a 	sub	r2,r3,r2
1000a8fc:	1484d83a 	srl	r2,r2,r18
1000a900:	0007883a 	mov	r3,zero
1000a904:	00005306 	br	1000aa54 <__umoddi3+0x288>
1000a908:	29c05036 	bltu	r5,r7,1000aa4c <__umoddi3+0x280>
1000a90c:	00bfffd4 	movui	r2,65535
1000a910:	11c05c2e 	bgeu	r2,r7,1000aa84 <__umoddi3+0x2b8>
1000a914:	00804034 	movhi	r2,256
1000a918:	10bfffc4 	addi	r2,r2,-1
1000a91c:	11c10636 	bltu	r2,r7,1000ad38 <__umoddi3+0x56c>
1000a920:	01000404 	movi	r4,16
1000a924:	3904d83a 	srl	r2,r7,r4
1000a928:	00c40074 	movhi	r3,4097
1000a92c:	18c0bb04 	addi	r3,r3,748
1000a930:	1885883a 	add	r2,r3,r2
1000a934:	14c00003 	ldbu	r19,0(r2)
1000a938:	00c00804 	movi	r3,32
1000a93c:	9927883a 	add	r19,r19,r4
1000a940:	1ce9c83a 	sub	r20,r3,r19
1000a944:	a0005c1e 	bne	r20,zero,1000aab8 <__umoddi3+0x2ec>
1000a948:	3c400136 	bltu	r7,r17,1000a950 <__umoddi3+0x184>
1000a94c:	81810a36 	bltu	r16,r6,1000ad78 <__umoddi3+0x5ac>
1000a950:	8185c83a 	sub	r2,r16,r6
1000a954:	89e3c83a 	sub	r17,r17,r7
1000a958:	8089803a 	cmpltu	r4,r16,r2
1000a95c:	8939c83a 	sub	fp,r17,r4
1000a960:	e007883a 	mov	r3,fp
1000a964:	00003b06 	br	1000aa54 <__umoddi3+0x288>
1000a968:	3000041e 	bne	r6,zero,1000a97c <__umoddi3+0x1b0>
1000a96c:	000b883a 	mov	r5,zero
1000a970:	01000044 	movi	r4,1
1000a974:	000ae880 	call	1000ae88 <__udivsi3>
1000a978:	1027883a 	mov	r19,r2
1000a97c:	00bfffd4 	movui	r2,65535
1000a980:	14c0442e 	bgeu	r2,r19,1000aa94 <__umoddi3+0x2c8>
1000a984:	00804034 	movhi	r2,256
1000a988:	10bfffc4 	addi	r2,r2,-1
1000a98c:	14c0ec36 	bltu	r2,r19,1000ad40 <__umoddi3+0x574>
1000a990:	00800404 	movi	r2,16
1000a994:	9886d83a 	srl	r3,r19,r2
1000a998:	01040074 	movhi	r4,4097
1000a99c:	2100bb04 	addi	r4,r4,748
1000a9a0:	20c7883a 	add	r3,r4,r3
1000a9a4:	18c00003 	ldbu	r3,0(r3)
1000a9a8:	1887883a 	add	r3,r3,r2
1000a9ac:	00800804 	movi	r2,32
1000a9b0:	10e5c83a 	sub	r18,r2,r3
1000a9b4:	9000ab1e 	bne	r18,zero,1000ac64 <__umoddi3+0x498>
1000a9b8:	982cd43a 	srli	r22,r19,16
1000a9bc:	8ce3c83a 	sub	r17,r17,r19
1000a9c0:	9dffffcc 	andi	r23,r19,65535
1000a9c4:	b00b883a 	mov	r5,r22
1000a9c8:	8809883a 	mov	r4,r17
1000a9cc:	000aeec0 	call	1000aeec <__umodsi3>
1000a9d0:	b00b883a 	mov	r5,r22
1000a9d4:	8809883a 	mov	r4,r17
1000a9d8:	102b883a 	mov	r21,r2
1000a9dc:	000ae880 	call	1000ae88 <__udivsi3>
1000a9e0:	b80b883a 	mov	r5,r23
1000a9e4:	1009883a 	mov	r4,r2
1000a9e8:	000097c0 	call	1000097c <__mulsi3>
1000a9ec:	a82a943a 	slli	r21,r21,16
1000a9f0:	a006d43a 	srli	r3,r20,16
1000a9f4:	1d46b03a 	or	r3,r3,r21
1000a9f8:	1880042e 	bgeu	r3,r2,1000aa0c <__umoddi3+0x240>
1000a9fc:	1cc7883a 	add	r3,r3,r19
1000aa00:	1cc00236 	bltu	r3,r19,1000aa0c <__umoddi3+0x240>
1000aa04:	1880012e 	bgeu	r3,r2,1000aa0c <__umoddi3+0x240>
1000aa08:	1cc7883a 	add	r3,r3,r19
1000aa0c:	18a1c83a 	sub	r16,r3,r2
1000aa10:	b00b883a 	mov	r5,r22
1000aa14:	8009883a 	mov	r4,r16
1000aa18:	000aeec0 	call	1000aeec <__umodsi3>
1000aa1c:	1023883a 	mov	r17,r2
1000aa20:	b00b883a 	mov	r5,r22
1000aa24:	8009883a 	mov	r4,r16
1000aa28:	000ae880 	call	1000ae88 <__udivsi3>
1000aa2c:	8822943a 	slli	r17,r17,16
1000aa30:	b80b883a 	mov	r5,r23
1000aa34:	1009883a 	mov	r4,r2
1000aa38:	000097c0 	call	1000097c <__mulsi3>
1000aa3c:	a53fffcc 	andi	r20,r20,65535
1000aa40:	a446b03a 	or	r3,r20,r17
1000aa44:	18bfac2e 	bgeu	r3,r2,1000a8f8 <__alt_data_end+0xf800a8f8>
1000aa48:	003fa706 	br	1000a8e8 <__alt_data_end+0xf800a8e8>
1000aa4c:	2005883a 	mov	r2,r4
1000aa50:	2807883a 	mov	r3,r5
1000aa54:	dfc00c17 	ldw	ra,48(sp)
1000aa58:	df000b17 	ldw	fp,44(sp)
1000aa5c:	ddc00a17 	ldw	r23,40(sp)
1000aa60:	dd800917 	ldw	r22,36(sp)
1000aa64:	dd400817 	ldw	r21,32(sp)
1000aa68:	dd000717 	ldw	r20,28(sp)
1000aa6c:	dcc00617 	ldw	r19,24(sp)
1000aa70:	dc800517 	ldw	r18,20(sp)
1000aa74:	dc400417 	ldw	r17,16(sp)
1000aa78:	dc000317 	ldw	r16,12(sp)
1000aa7c:	dec00d04 	addi	sp,sp,52
1000aa80:	f800283a 	ret
1000aa84:	04c03fc4 	movi	r19,255
1000aa88:	99c9803a 	cmpltu	r4,r19,r7
1000aa8c:	200890fa 	slli	r4,r4,3
1000aa90:	003fa406 	br	1000a924 <__alt_data_end+0xf800a924>
1000aa94:	00803fc4 	movi	r2,255
1000aa98:	14c5803a 	cmpltu	r2,r2,r19
1000aa9c:	100490fa 	slli	r2,r2,3
1000aaa0:	003fbc06 	br	1000a994 <__alt_data_end+0xf800a994>
1000aaa4:	00804034 	movhi	r2,256
1000aaa8:	10bfffc4 	addi	r2,r2,-1
1000aaac:	1180a636 	bltu	r2,r6,1000ad48 <__umoddi3+0x57c>
1000aab0:	01000404 	movi	r4,16
1000aab4:	003f5c06 	br	1000a828 <__alt_data_end+0xf800a828>
1000aab8:	3d0e983a 	sll	r7,r7,r20
1000aabc:	34ead83a 	srl	r21,r6,r19
1000aac0:	8cc6d83a 	srl	r3,r17,r19
1000aac4:	8d10983a 	sll	r8,r17,r20
1000aac8:	3d6ab03a 	or	r21,r7,r21
1000aacc:	a82cd43a 	srli	r22,r21,16
1000aad0:	84e2d83a 	srl	r17,r16,r19
1000aad4:	1809883a 	mov	r4,r3
1000aad8:	b00b883a 	mov	r5,r22
1000aadc:	8a22b03a 	or	r17,r17,r8
1000aae0:	3524983a 	sll	r18,r6,r20
1000aae4:	dc400015 	stw	r17,0(sp)
1000aae8:	d8c00115 	stw	r3,4(sp)
1000aaec:	000aeec0 	call	1000aeec <__umodsi3>
1000aaf0:	d8c00117 	ldw	r3,4(sp)
1000aaf4:	b00b883a 	mov	r5,r22
1000aaf8:	1039883a 	mov	fp,r2
1000aafc:	1809883a 	mov	r4,r3
1000ab00:	000ae880 	call	1000ae88 <__udivsi3>
1000ab04:	adffffcc 	andi	r23,r21,65535
1000ab08:	100b883a 	mov	r5,r2
1000ab0c:	b809883a 	mov	r4,r23
1000ab10:	1023883a 	mov	r17,r2
1000ab14:	000097c0 	call	1000097c <__mulsi3>
1000ab18:	d9400017 	ldw	r5,0(sp)
1000ab1c:	e008943a 	slli	r4,fp,16
1000ab20:	8520983a 	sll	r16,r16,r20
1000ab24:	2806d43a 	srli	r3,r5,16
1000ab28:	1906b03a 	or	r3,r3,r4
1000ab2c:	1880042e 	bgeu	r3,r2,1000ab40 <__umoddi3+0x374>
1000ab30:	1d47883a 	add	r3,r3,r21
1000ab34:	893fffc4 	addi	r4,r17,-1
1000ab38:	1d40892e 	bgeu	r3,r21,1000ad60 <__umoddi3+0x594>
1000ab3c:	2023883a 	mov	r17,r4
1000ab40:	18b9c83a 	sub	fp,r3,r2
1000ab44:	b00b883a 	mov	r5,r22
1000ab48:	e009883a 	mov	r4,fp
1000ab4c:	000aeec0 	call	1000aeec <__umodsi3>
1000ab50:	b00b883a 	mov	r5,r22
1000ab54:	e009883a 	mov	r4,fp
1000ab58:	d8800215 	stw	r2,8(sp)
1000ab5c:	000ae880 	call	1000ae88 <__udivsi3>
1000ab60:	100b883a 	mov	r5,r2
1000ab64:	b809883a 	mov	r4,r23
1000ab68:	102d883a 	mov	r22,r2
1000ab6c:	000097c0 	call	1000097c <__mulsi3>
1000ab70:	d9800217 	ldw	r6,8(sp)
1000ab74:	d8c00017 	ldw	r3,0(sp)
1000ab78:	300c943a 	slli	r6,r6,16
1000ab7c:	1a3fffcc 	andi	r8,r3,65535
1000ab80:	4190b03a 	or	r8,r8,r6
1000ab84:	4080042e 	bgeu	r8,r2,1000ab98 <__umoddi3+0x3cc>
1000ab88:	4551883a 	add	r8,r8,r21
1000ab8c:	b0ffffc4 	addi	r3,r22,-1
1000ab90:	45406f2e 	bgeu	r8,r21,1000ad50 <__umoddi3+0x584>
1000ab94:	182d883a 	mov	r22,r3
1000ab98:	880e943a 	slli	r7,r17,16
1000ab9c:	9006d43a 	srli	r3,r18,16
1000aba0:	91bfffcc 	andi	r6,r18,65535
1000aba4:	3dacb03a 	or	r22,r7,r22
1000aba8:	b02ed43a 	srli	r23,r22,16
1000abac:	b5bfffcc 	andi	r22,r22,65535
1000abb0:	300b883a 	mov	r5,r6
1000abb4:	b009883a 	mov	r4,r22
1000abb8:	40a3c83a 	sub	r17,r8,r2
1000abbc:	d8c00115 	stw	r3,4(sp)
1000abc0:	d9800215 	stw	r6,8(sp)
1000abc4:	000097c0 	call	1000097c <__mulsi3>
1000abc8:	d9800217 	ldw	r6,8(sp)
1000abcc:	b809883a 	mov	r4,r23
1000abd0:	1039883a 	mov	fp,r2
1000abd4:	300b883a 	mov	r5,r6
1000abd8:	000097c0 	call	1000097c <__mulsi3>
1000abdc:	d8c00117 	ldw	r3,4(sp)
1000abe0:	b809883a 	mov	r4,r23
1000abe4:	d8800215 	stw	r2,8(sp)
1000abe8:	180b883a 	mov	r5,r3
1000abec:	000097c0 	call	1000097c <__mulsi3>
1000abf0:	d8c00117 	ldw	r3,4(sp)
1000abf4:	b009883a 	mov	r4,r22
1000abf8:	102f883a 	mov	r23,r2
1000abfc:	180b883a 	mov	r5,r3
1000ac00:	000097c0 	call	1000097c <__mulsi3>
1000ac04:	d9800217 	ldw	r6,8(sp)
1000ac08:	e006d43a 	srli	r3,fp,16
1000ac0c:	1185883a 	add	r2,r2,r6
1000ac10:	1885883a 	add	r2,r3,r2
1000ac14:	1180022e 	bgeu	r2,r6,1000ac20 <__umoddi3+0x454>
1000ac18:	00c00074 	movhi	r3,1
1000ac1c:	b8ef883a 	add	r23,r23,r3
1000ac20:	1006d43a 	srli	r3,r2,16
1000ac24:	1004943a 	slli	r2,r2,16
1000ac28:	e73fffcc 	andi	fp,fp,65535
1000ac2c:	1dc7883a 	add	r3,r3,r23
1000ac30:	1739883a 	add	fp,r2,fp
1000ac34:	88c03a36 	bltu	r17,r3,1000ad20 <__umoddi3+0x554>
1000ac38:	88c05126 	beq	r17,r3,1000ad80 <__umoddi3+0x5b4>
1000ac3c:	88c9c83a 	sub	r4,r17,r3
1000ac40:	e00f883a 	mov	r7,fp
1000ac44:	81cfc83a 	sub	r7,r16,r7
1000ac48:	81c7803a 	cmpltu	r3,r16,r7
1000ac4c:	20c7c83a 	sub	r3,r4,r3
1000ac50:	1cc4983a 	sll	r2,r3,r19
1000ac54:	3d0ed83a 	srl	r7,r7,r20
1000ac58:	1d06d83a 	srl	r3,r3,r20
1000ac5c:	11c4b03a 	or	r2,r2,r7
1000ac60:	003f7c06 	br	1000aa54 <__alt_data_end+0xf800aa54>
1000ac64:	9ca6983a 	sll	r19,r19,r18
1000ac68:	88f8d83a 	srl	fp,r17,r3
1000ac6c:	80c4d83a 	srl	r2,r16,r3
1000ac70:	982cd43a 	srli	r22,r19,16
1000ac74:	8ca2983a 	sll	r17,r17,r18
1000ac78:	e009883a 	mov	r4,fp
1000ac7c:	b00b883a 	mov	r5,r22
1000ac80:	146ab03a 	or	r21,r2,r17
1000ac84:	000aeec0 	call	1000aeec <__umodsi3>
1000ac88:	b00b883a 	mov	r5,r22
1000ac8c:	e009883a 	mov	r4,fp
1000ac90:	1029883a 	mov	r20,r2
1000ac94:	9dffffcc 	andi	r23,r19,65535
1000ac98:	000ae880 	call	1000ae88 <__udivsi3>
1000ac9c:	b809883a 	mov	r4,r23
1000aca0:	100b883a 	mov	r5,r2
1000aca4:	000097c0 	call	1000097c <__mulsi3>
1000aca8:	a008943a 	slli	r4,r20,16
1000acac:	a806d43a 	srli	r3,r21,16
1000acb0:	84a8983a 	sll	r20,r16,r18
1000acb4:	1906b03a 	or	r3,r3,r4
1000acb8:	1880042e 	bgeu	r3,r2,1000accc <__umoddi3+0x500>
1000acbc:	1cc7883a 	add	r3,r3,r19
1000acc0:	1cc00236 	bltu	r3,r19,1000accc <__umoddi3+0x500>
1000acc4:	1880012e 	bgeu	r3,r2,1000accc <__umoddi3+0x500>
1000acc8:	1cc7883a 	add	r3,r3,r19
1000accc:	18a3c83a 	sub	r17,r3,r2
1000acd0:	b00b883a 	mov	r5,r22
1000acd4:	8809883a 	mov	r4,r17
1000acd8:	000aeec0 	call	1000aeec <__umodsi3>
1000acdc:	b00b883a 	mov	r5,r22
1000ace0:	8809883a 	mov	r4,r17
1000ace4:	1021883a 	mov	r16,r2
1000ace8:	000ae880 	call	1000ae88 <__udivsi3>
1000acec:	100b883a 	mov	r5,r2
1000acf0:	b809883a 	mov	r4,r23
1000acf4:	8020943a 	slli	r16,r16,16
1000acf8:	000097c0 	call	1000097c <__mulsi3>
1000acfc:	a8ffffcc 	andi	r3,r21,65535
1000ad00:	1c06b03a 	or	r3,r3,r16
1000ad04:	1880042e 	bgeu	r3,r2,1000ad18 <__umoddi3+0x54c>
1000ad08:	1cc7883a 	add	r3,r3,r19
1000ad0c:	1cc00236 	bltu	r3,r19,1000ad18 <__umoddi3+0x54c>
1000ad10:	1880012e 	bgeu	r3,r2,1000ad18 <__umoddi3+0x54c>
1000ad14:	1cc7883a 	add	r3,r3,r19
1000ad18:	18a3c83a 	sub	r17,r3,r2
1000ad1c:	003f2906 	br	1000a9c4 <__alt_data_end+0xf800a9c4>
1000ad20:	e48fc83a 	sub	r7,fp,r18
1000ad24:	1d49c83a 	sub	r4,r3,r21
1000ad28:	e1f9803a 	cmpltu	fp,fp,r7
1000ad2c:	2739c83a 	sub	fp,r4,fp
1000ad30:	8f09c83a 	sub	r4,r17,fp
1000ad34:	003fc306 	br	1000ac44 <__alt_data_end+0xf800ac44>
1000ad38:	01000604 	movi	r4,24
1000ad3c:	003ef906 	br	1000a924 <__alt_data_end+0xf800a924>
1000ad40:	00800604 	movi	r2,24
1000ad44:	003f1306 	br	1000a994 <__alt_data_end+0xf800a994>
1000ad48:	01000604 	movi	r4,24
1000ad4c:	003eb606 	br	1000a828 <__alt_data_end+0xf800a828>
1000ad50:	40bf902e 	bgeu	r8,r2,1000ab94 <__alt_data_end+0xf800ab94>
1000ad54:	b5bfff84 	addi	r22,r22,-2
1000ad58:	4551883a 	add	r8,r8,r21
1000ad5c:	003f8e06 	br	1000ab98 <__alt_data_end+0xf800ab98>
1000ad60:	18bf762e 	bgeu	r3,r2,1000ab3c <__alt_data_end+0xf800ab3c>
1000ad64:	8c7fff84 	addi	r17,r17,-2
1000ad68:	1d47883a 	add	r3,r3,r21
1000ad6c:	003f7406 	br	1000ab40 <__alt_data_end+0xf800ab40>
1000ad70:	1cc7883a 	add	r3,r3,r19
1000ad74:	003ecd06 	br	1000a8ac <__alt_data_end+0xf800a8ac>
1000ad78:	8005883a 	mov	r2,r16
1000ad7c:	003ef806 	br	1000a960 <__alt_data_end+0xf800a960>
1000ad80:	873fe736 	bltu	r16,fp,1000ad20 <__alt_data_end+0xf800ad20>
1000ad84:	e00f883a 	mov	r7,fp
1000ad88:	0009883a 	mov	r4,zero
1000ad8c:	003fad06 	br	1000ac44 <__alt_data_end+0xf800ac44>

1000ad90 <__divsi3>:
1000ad90:	20001b16 	blt	r4,zero,1000ae00 <__divsi3+0x70>
1000ad94:	000f883a 	mov	r7,zero
1000ad98:	28001616 	blt	r5,zero,1000adf4 <__divsi3+0x64>
1000ad9c:	200d883a 	mov	r6,r4
1000ada0:	29001a2e 	bgeu	r5,r4,1000ae0c <__divsi3+0x7c>
1000ada4:	00800804 	movi	r2,32
1000ada8:	00c00044 	movi	r3,1
1000adac:	00000106 	br	1000adb4 <__divsi3+0x24>
1000adb0:	10000d26 	beq	r2,zero,1000ade8 <__divsi3+0x58>
1000adb4:	294b883a 	add	r5,r5,r5
1000adb8:	10bfffc4 	addi	r2,r2,-1
1000adbc:	18c7883a 	add	r3,r3,r3
1000adc0:	293ffb36 	bltu	r5,r4,1000adb0 <__alt_data_end+0xf800adb0>
1000adc4:	0005883a 	mov	r2,zero
1000adc8:	18000726 	beq	r3,zero,1000ade8 <__divsi3+0x58>
1000adcc:	0005883a 	mov	r2,zero
1000add0:	31400236 	bltu	r6,r5,1000addc <__divsi3+0x4c>
1000add4:	314dc83a 	sub	r6,r6,r5
1000add8:	10c4b03a 	or	r2,r2,r3
1000addc:	1806d07a 	srli	r3,r3,1
1000ade0:	280ad07a 	srli	r5,r5,1
1000ade4:	183ffa1e 	bne	r3,zero,1000add0 <__alt_data_end+0xf800add0>
1000ade8:	38000126 	beq	r7,zero,1000adf0 <__divsi3+0x60>
1000adec:	0085c83a 	sub	r2,zero,r2
1000adf0:	f800283a 	ret
1000adf4:	014bc83a 	sub	r5,zero,r5
1000adf8:	39c0005c 	xori	r7,r7,1
1000adfc:	003fe706 	br	1000ad9c <__alt_data_end+0xf800ad9c>
1000ae00:	0109c83a 	sub	r4,zero,r4
1000ae04:	01c00044 	movi	r7,1
1000ae08:	003fe306 	br	1000ad98 <__alt_data_end+0xf800ad98>
1000ae0c:	00c00044 	movi	r3,1
1000ae10:	003fee06 	br	1000adcc <__alt_data_end+0xf800adcc>

1000ae14 <__modsi3>:
1000ae14:	20001716 	blt	r4,zero,1000ae74 <__modsi3+0x60>
1000ae18:	000f883a 	mov	r7,zero
1000ae1c:	2005883a 	mov	r2,r4
1000ae20:	28001216 	blt	r5,zero,1000ae6c <__modsi3+0x58>
1000ae24:	2900162e 	bgeu	r5,r4,1000ae80 <__modsi3+0x6c>
1000ae28:	01800804 	movi	r6,32
1000ae2c:	00c00044 	movi	r3,1
1000ae30:	00000106 	br	1000ae38 <__modsi3+0x24>
1000ae34:	30000a26 	beq	r6,zero,1000ae60 <__modsi3+0x4c>
1000ae38:	294b883a 	add	r5,r5,r5
1000ae3c:	31bfffc4 	addi	r6,r6,-1
1000ae40:	18c7883a 	add	r3,r3,r3
1000ae44:	293ffb36 	bltu	r5,r4,1000ae34 <__alt_data_end+0xf800ae34>
1000ae48:	18000526 	beq	r3,zero,1000ae60 <__modsi3+0x4c>
1000ae4c:	1806d07a 	srli	r3,r3,1
1000ae50:	11400136 	bltu	r2,r5,1000ae58 <__modsi3+0x44>
1000ae54:	1145c83a 	sub	r2,r2,r5
1000ae58:	280ad07a 	srli	r5,r5,1
1000ae5c:	183ffb1e 	bne	r3,zero,1000ae4c <__alt_data_end+0xf800ae4c>
1000ae60:	38000126 	beq	r7,zero,1000ae68 <__modsi3+0x54>
1000ae64:	0085c83a 	sub	r2,zero,r2
1000ae68:	f800283a 	ret
1000ae6c:	014bc83a 	sub	r5,zero,r5
1000ae70:	003fec06 	br	1000ae24 <__alt_data_end+0xf800ae24>
1000ae74:	0109c83a 	sub	r4,zero,r4
1000ae78:	01c00044 	movi	r7,1
1000ae7c:	003fe706 	br	1000ae1c <__alt_data_end+0xf800ae1c>
1000ae80:	00c00044 	movi	r3,1
1000ae84:	003ff106 	br	1000ae4c <__alt_data_end+0xf800ae4c>

1000ae88 <__udivsi3>:
1000ae88:	200d883a 	mov	r6,r4
1000ae8c:	2900152e 	bgeu	r5,r4,1000aee4 <__udivsi3+0x5c>
1000ae90:	28001416 	blt	r5,zero,1000aee4 <__udivsi3+0x5c>
1000ae94:	00800804 	movi	r2,32
1000ae98:	00c00044 	movi	r3,1
1000ae9c:	00000206 	br	1000aea8 <__udivsi3+0x20>
1000aea0:	10000e26 	beq	r2,zero,1000aedc <__udivsi3+0x54>
1000aea4:	28000516 	blt	r5,zero,1000aebc <__udivsi3+0x34>
1000aea8:	294b883a 	add	r5,r5,r5
1000aeac:	10bfffc4 	addi	r2,r2,-1
1000aeb0:	18c7883a 	add	r3,r3,r3
1000aeb4:	293ffa36 	bltu	r5,r4,1000aea0 <__alt_data_end+0xf800aea0>
1000aeb8:	18000826 	beq	r3,zero,1000aedc <__udivsi3+0x54>
1000aebc:	0005883a 	mov	r2,zero
1000aec0:	31400236 	bltu	r6,r5,1000aecc <__udivsi3+0x44>
1000aec4:	314dc83a 	sub	r6,r6,r5
1000aec8:	10c4b03a 	or	r2,r2,r3
1000aecc:	1806d07a 	srli	r3,r3,1
1000aed0:	280ad07a 	srli	r5,r5,1
1000aed4:	183ffa1e 	bne	r3,zero,1000aec0 <__alt_data_end+0xf800aec0>
1000aed8:	f800283a 	ret
1000aedc:	0005883a 	mov	r2,zero
1000aee0:	f800283a 	ret
1000aee4:	00c00044 	movi	r3,1
1000aee8:	003ff406 	br	1000aebc <__alt_data_end+0xf800aebc>

1000aeec <__umodsi3>:
1000aeec:	2005883a 	mov	r2,r4
1000aef0:	2900122e 	bgeu	r5,r4,1000af3c <__umodsi3+0x50>
1000aef4:	28001116 	blt	r5,zero,1000af3c <__umodsi3+0x50>
1000aef8:	01800804 	movi	r6,32
1000aefc:	00c00044 	movi	r3,1
1000af00:	00000206 	br	1000af0c <__umodsi3+0x20>
1000af04:	30000c26 	beq	r6,zero,1000af38 <__umodsi3+0x4c>
1000af08:	28000516 	blt	r5,zero,1000af20 <__umodsi3+0x34>
1000af0c:	294b883a 	add	r5,r5,r5
1000af10:	31bfffc4 	addi	r6,r6,-1
1000af14:	18c7883a 	add	r3,r3,r3
1000af18:	293ffa36 	bltu	r5,r4,1000af04 <__alt_data_end+0xf800af04>
1000af1c:	18000626 	beq	r3,zero,1000af38 <__umodsi3+0x4c>
1000af20:	1806d07a 	srli	r3,r3,1
1000af24:	11400136 	bltu	r2,r5,1000af2c <__umodsi3+0x40>
1000af28:	1145c83a 	sub	r2,r2,r5
1000af2c:	280ad07a 	srli	r5,r5,1
1000af30:	183ffb1e 	bne	r3,zero,1000af20 <__alt_data_end+0xf800af20>
1000af34:	f800283a 	ret
1000af38:	f800283a 	ret
1000af3c:	00c00044 	movi	r3,1
1000af40:	003ff706 	br	1000af20 <__alt_data_end+0xf800af20>

1000af44 <__adddf3>:
1000af44:	02c00434 	movhi	r11,16
1000af48:	5affffc4 	addi	r11,r11,-1
1000af4c:	2806d7fa 	srli	r3,r5,31
1000af50:	2ad4703a 	and	r10,r5,r11
1000af54:	3ad2703a 	and	r9,r7,r11
1000af58:	3804d53a 	srli	r2,r7,20
1000af5c:	3018d77a 	srli	r12,r6,29
1000af60:	280ad53a 	srli	r5,r5,20
1000af64:	501490fa 	slli	r10,r10,3
1000af68:	2010d77a 	srli	r8,r4,29
1000af6c:	481290fa 	slli	r9,r9,3
1000af70:	380ed7fa 	srli	r7,r7,31
1000af74:	defffb04 	addi	sp,sp,-20
1000af78:	dc800215 	stw	r18,8(sp)
1000af7c:	dc400115 	stw	r17,4(sp)
1000af80:	dc000015 	stw	r16,0(sp)
1000af84:	dfc00415 	stw	ra,16(sp)
1000af88:	dcc00315 	stw	r19,12(sp)
1000af8c:	1c803fcc 	andi	r18,r3,255
1000af90:	2c01ffcc 	andi	r16,r5,2047
1000af94:	5210b03a 	or	r8,r10,r8
1000af98:	202290fa 	slli	r17,r4,3
1000af9c:	1081ffcc 	andi	r2,r2,2047
1000afa0:	4b12b03a 	or	r9,r9,r12
1000afa4:	300c90fa 	slli	r6,r6,3
1000afa8:	91c07526 	beq	r18,r7,1000b180 <__adddf3+0x23c>
1000afac:	8087c83a 	sub	r3,r16,r2
1000afb0:	00c0ab0e 	bge	zero,r3,1000b260 <__adddf3+0x31c>
1000afb4:	10002a1e 	bne	r2,zero,1000b060 <__adddf3+0x11c>
1000afb8:	4984b03a 	or	r2,r9,r6
1000afbc:	1000961e 	bne	r2,zero,1000b218 <__adddf3+0x2d4>
1000afc0:	888001cc 	andi	r2,r17,7
1000afc4:	10000726 	beq	r2,zero,1000afe4 <__adddf3+0xa0>
1000afc8:	888003cc 	andi	r2,r17,15
1000afcc:	00c00104 	movi	r3,4
1000afd0:	10c00426 	beq	r2,r3,1000afe4 <__adddf3+0xa0>
1000afd4:	88c7883a 	add	r3,r17,r3
1000afd8:	1c63803a 	cmpltu	r17,r3,r17
1000afdc:	4451883a 	add	r8,r8,r17
1000afe0:	1823883a 	mov	r17,r3
1000afe4:	4080202c 	andhi	r2,r8,128
1000afe8:	10005926 	beq	r2,zero,1000b150 <__adddf3+0x20c>
1000afec:	84000044 	addi	r16,r16,1
1000aff0:	0081ffc4 	movi	r2,2047
1000aff4:	8080ba26 	beq	r16,r2,1000b2e0 <__adddf3+0x39c>
1000aff8:	00bfe034 	movhi	r2,65408
1000affc:	10bfffc4 	addi	r2,r2,-1
1000b000:	4090703a 	and	r8,r8,r2
1000b004:	4004977a 	slli	r2,r8,29
1000b008:	4010927a 	slli	r8,r8,9
1000b00c:	8822d0fa 	srli	r17,r17,3
1000b010:	8401ffcc 	andi	r16,r16,2047
1000b014:	4010d33a 	srli	r8,r8,12
1000b018:	9007883a 	mov	r3,r18
1000b01c:	1444b03a 	or	r2,r2,r17
1000b020:	8401ffcc 	andi	r16,r16,2047
1000b024:	8020953a 	slli	r16,r16,20
1000b028:	18c03fcc 	andi	r3,r3,255
1000b02c:	01000434 	movhi	r4,16
1000b030:	213fffc4 	addi	r4,r4,-1
1000b034:	180697fa 	slli	r3,r3,31
1000b038:	4110703a 	and	r8,r8,r4
1000b03c:	4410b03a 	or	r8,r8,r16
1000b040:	40c6b03a 	or	r3,r8,r3
1000b044:	dfc00417 	ldw	ra,16(sp)
1000b048:	dcc00317 	ldw	r19,12(sp)
1000b04c:	dc800217 	ldw	r18,8(sp)
1000b050:	dc400117 	ldw	r17,4(sp)
1000b054:	dc000017 	ldw	r16,0(sp)
1000b058:	dec00504 	addi	sp,sp,20
1000b05c:	f800283a 	ret
1000b060:	0081ffc4 	movi	r2,2047
1000b064:	80bfd626 	beq	r16,r2,1000afc0 <__alt_data_end+0xf800afc0>
1000b068:	4a402034 	orhi	r9,r9,128
1000b06c:	00800e04 	movi	r2,56
1000b070:	10c09f16 	blt	r2,r3,1000b2f0 <__adddf3+0x3ac>
1000b074:	008007c4 	movi	r2,31
1000b078:	10c0c216 	blt	r2,r3,1000b384 <__adddf3+0x440>
1000b07c:	00800804 	movi	r2,32
1000b080:	10c5c83a 	sub	r2,r2,r3
1000b084:	488a983a 	sll	r5,r9,r2
1000b088:	30c8d83a 	srl	r4,r6,r3
1000b08c:	3084983a 	sll	r2,r6,r2
1000b090:	48c6d83a 	srl	r3,r9,r3
1000b094:	290cb03a 	or	r6,r5,r4
1000b098:	1004c03a 	cmpne	r2,r2,zero
1000b09c:	308cb03a 	or	r6,r6,r2
1000b0a0:	898dc83a 	sub	r6,r17,r6
1000b0a4:	89a3803a 	cmpltu	r17,r17,r6
1000b0a8:	40d1c83a 	sub	r8,r8,r3
1000b0ac:	4451c83a 	sub	r8,r8,r17
1000b0b0:	3023883a 	mov	r17,r6
1000b0b4:	4080202c 	andhi	r2,r8,128
1000b0b8:	10002326 	beq	r2,zero,1000b148 <__adddf3+0x204>
1000b0bc:	04c02034 	movhi	r19,128
1000b0c0:	9cffffc4 	addi	r19,r19,-1
1000b0c4:	44e6703a 	and	r19,r8,r19
1000b0c8:	98007626 	beq	r19,zero,1000b2a4 <__adddf3+0x360>
1000b0cc:	9809883a 	mov	r4,r19
1000b0d0:	000d7840 	call	1000d784 <__clzsi2>
1000b0d4:	10fffe04 	addi	r3,r2,-8
1000b0d8:	010007c4 	movi	r4,31
1000b0dc:	20c07716 	blt	r4,r3,1000b2bc <__adddf3+0x378>
1000b0e0:	00800804 	movi	r2,32
1000b0e4:	10c5c83a 	sub	r2,r2,r3
1000b0e8:	8884d83a 	srl	r2,r17,r2
1000b0ec:	98d0983a 	sll	r8,r19,r3
1000b0f0:	88e2983a 	sll	r17,r17,r3
1000b0f4:	1204b03a 	or	r2,r2,r8
1000b0f8:	1c007416 	blt	r3,r16,1000b2cc <__adddf3+0x388>
1000b0fc:	1c21c83a 	sub	r16,r3,r16
1000b100:	82000044 	addi	r8,r16,1
1000b104:	00c007c4 	movi	r3,31
1000b108:	1a009116 	blt	r3,r8,1000b350 <__adddf3+0x40c>
1000b10c:	00c00804 	movi	r3,32
1000b110:	1a07c83a 	sub	r3,r3,r8
1000b114:	8a08d83a 	srl	r4,r17,r8
1000b118:	88e2983a 	sll	r17,r17,r3
1000b11c:	10c6983a 	sll	r3,r2,r3
1000b120:	1210d83a 	srl	r8,r2,r8
1000b124:	8804c03a 	cmpne	r2,r17,zero
1000b128:	1906b03a 	or	r3,r3,r4
1000b12c:	18a2b03a 	or	r17,r3,r2
1000b130:	0021883a 	mov	r16,zero
1000b134:	003fa206 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b138:	1890b03a 	or	r8,r3,r2
1000b13c:	40017d26 	beq	r8,zero,1000b734 <__adddf3+0x7f0>
1000b140:	1011883a 	mov	r8,r2
1000b144:	1823883a 	mov	r17,r3
1000b148:	888001cc 	andi	r2,r17,7
1000b14c:	103f9e1e 	bne	r2,zero,1000afc8 <__alt_data_end+0xf800afc8>
1000b150:	4004977a 	slli	r2,r8,29
1000b154:	8822d0fa 	srli	r17,r17,3
1000b158:	4010d0fa 	srli	r8,r8,3
1000b15c:	9007883a 	mov	r3,r18
1000b160:	1444b03a 	or	r2,r2,r17
1000b164:	0101ffc4 	movi	r4,2047
1000b168:	81002426 	beq	r16,r4,1000b1fc <__adddf3+0x2b8>
1000b16c:	8120703a 	and	r16,r16,r4
1000b170:	01000434 	movhi	r4,16
1000b174:	213fffc4 	addi	r4,r4,-1
1000b178:	4110703a 	and	r8,r8,r4
1000b17c:	003fa806 	br	1000b020 <__alt_data_end+0xf800b020>
1000b180:	8089c83a 	sub	r4,r16,r2
1000b184:	01005e0e 	bge	zero,r4,1000b300 <__adddf3+0x3bc>
1000b188:	10002b26 	beq	r2,zero,1000b238 <__adddf3+0x2f4>
1000b18c:	0081ffc4 	movi	r2,2047
1000b190:	80bf8b26 	beq	r16,r2,1000afc0 <__alt_data_end+0xf800afc0>
1000b194:	4a402034 	orhi	r9,r9,128
1000b198:	00800e04 	movi	r2,56
1000b19c:	1100a40e 	bge	r2,r4,1000b430 <__adddf3+0x4ec>
1000b1a0:	498cb03a 	or	r6,r9,r6
1000b1a4:	300ac03a 	cmpne	r5,r6,zero
1000b1a8:	0013883a 	mov	r9,zero
1000b1ac:	2c4b883a 	add	r5,r5,r17
1000b1b0:	2c63803a 	cmpltu	r17,r5,r17
1000b1b4:	4a11883a 	add	r8,r9,r8
1000b1b8:	8a11883a 	add	r8,r17,r8
1000b1bc:	2823883a 	mov	r17,r5
1000b1c0:	4080202c 	andhi	r2,r8,128
1000b1c4:	103fe026 	beq	r2,zero,1000b148 <__alt_data_end+0xf800b148>
1000b1c8:	84000044 	addi	r16,r16,1
1000b1cc:	0081ffc4 	movi	r2,2047
1000b1d0:	8080d226 	beq	r16,r2,1000b51c <__adddf3+0x5d8>
1000b1d4:	00bfe034 	movhi	r2,65408
1000b1d8:	10bfffc4 	addi	r2,r2,-1
1000b1dc:	4090703a 	and	r8,r8,r2
1000b1e0:	880ad07a 	srli	r5,r17,1
1000b1e4:	400897fa 	slli	r4,r8,31
1000b1e8:	88c0004c 	andi	r3,r17,1
1000b1ec:	28e2b03a 	or	r17,r5,r3
1000b1f0:	4010d07a 	srli	r8,r8,1
1000b1f4:	2462b03a 	or	r17,r4,r17
1000b1f8:	003f7106 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b1fc:	4088b03a 	or	r4,r8,r2
1000b200:	20014526 	beq	r4,zero,1000b718 <__adddf3+0x7d4>
1000b204:	01000434 	movhi	r4,16
1000b208:	42000234 	orhi	r8,r8,8
1000b20c:	213fffc4 	addi	r4,r4,-1
1000b210:	4110703a 	and	r8,r8,r4
1000b214:	003f8206 	br	1000b020 <__alt_data_end+0xf800b020>
1000b218:	18ffffc4 	addi	r3,r3,-1
1000b21c:	1800491e 	bne	r3,zero,1000b344 <__adddf3+0x400>
1000b220:	898bc83a 	sub	r5,r17,r6
1000b224:	8963803a 	cmpltu	r17,r17,r5
1000b228:	4251c83a 	sub	r8,r8,r9
1000b22c:	4451c83a 	sub	r8,r8,r17
1000b230:	2823883a 	mov	r17,r5
1000b234:	003f9f06 	br	1000b0b4 <__alt_data_end+0xf800b0b4>
1000b238:	4984b03a 	or	r2,r9,r6
1000b23c:	103f6026 	beq	r2,zero,1000afc0 <__alt_data_end+0xf800afc0>
1000b240:	213fffc4 	addi	r4,r4,-1
1000b244:	2000931e 	bne	r4,zero,1000b494 <__adddf3+0x550>
1000b248:	898d883a 	add	r6,r17,r6
1000b24c:	3463803a 	cmpltu	r17,r6,r17
1000b250:	4251883a 	add	r8,r8,r9
1000b254:	8a11883a 	add	r8,r17,r8
1000b258:	3023883a 	mov	r17,r6
1000b25c:	003fd806 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000b260:	1800541e 	bne	r3,zero,1000b3b4 <__adddf3+0x470>
1000b264:	80800044 	addi	r2,r16,1
1000b268:	1081ffcc 	andi	r2,r2,2047
1000b26c:	00c00044 	movi	r3,1
1000b270:	1880a00e 	bge	r3,r2,1000b4f4 <__adddf3+0x5b0>
1000b274:	8989c83a 	sub	r4,r17,r6
1000b278:	8905803a 	cmpltu	r2,r17,r4
1000b27c:	4267c83a 	sub	r19,r8,r9
1000b280:	98a7c83a 	sub	r19,r19,r2
1000b284:	9880202c 	andhi	r2,r19,128
1000b288:	10006326 	beq	r2,zero,1000b418 <__adddf3+0x4d4>
1000b28c:	3463c83a 	sub	r17,r6,r17
1000b290:	4a07c83a 	sub	r3,r9,r8
1000b294:	344d803a 	cmpltu	r6,r6,r17
1000b298:	19a7c83a 	sub	r19,r3,r6
1000b29c:	3825883a 	mov	r18,r7
1000b2a0:	983f8a1e 	bne	r19,zero,1000b0cc <__alt_data_end+0xf800b0cc>
1000b2a4:	8809883a 	mov	r4,r17
1000b2a8:	000d7840 	call	1000d784 <__clzsi2>
1000b2ac:	10800804 	addi	r2,r2,32
1000b2b0:	10fffe04 	addi	r3,r2,-8
1000b2b4:	010007c4 	movi	r4,31
1000b2b8:	20ff890e 	bge	r4,r3,1000b0e0 <__alt_data_end+0xf800b0e0>
1000b2bc:	10bff604 	addi	r2,r2,-40
1000b2c0:	8884983a 	sll	r2,r17,r2
1000b2c4:	0023883a 	mov	r17,zero
1000b2c8:	1c3f8c0e 	bge	r3,r16,1000b0fc <__alt_data_end+0xf800b0fc>
1000b2cc:	023fe034 	movhi	r8,65408
1000b2d0:	423fffc4 	addi	r8,r8,-1
1000b2d4:	80e1c83a 	sub	r16,r16,r3
1000b2d8:	1210703a 	and	r8,r2,r8
1000b2dc:	003f3806 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b2e0:	9007883a 	mov	r3,r18
1000b2e4:	0011883a 	mov	r8,zero
1000b2e8:	0005883a 	mov	r2,zero
1000b2ec:	003f4c06 	br	1000b020 <__alt_data_end+0xf800b020>
1000b2f0:	498cb03a 	or	r6,r9,r6
1000b2f4:	300cc03a 	cmpne	r6,r6,zero
1000b2f8:	0007883a 	mov	r3,zero
1000b2fc:	003f6806 	br	1000b0a0 <__alt_data_end+0xf800b0a0>
1000b300:	20009c1e 	bne	r4,zero,1000b574 <__adddf3+0x630>
1000b304:	80800044 	addi	r2,r16,1
1000b308:	1141ffcc 	andi	r5,r2,2047
1000b30c:	01000044 	movi	r4,1
1000b310:	2140670e 	bge	r4,r5,1000b4b0 <__adddf3+0x56c>
1000b314:	0101ffc4 	movi	r4,2047
1000b318:	11007f26 	beq	r2,r4,1000b518 <__adddf3+0x5d4>
1000b31c:	898d883a 	add	r6,r17,r6
1000b320:	4247883a 	add	r3,r8,r9
1000b324:	3451803a 	cmpltu	r8,r6,r17
1000b328:	40d1883a 	add	r8,r8,r3
1000b32c:	402297fa 	slli	r17,r8,31
1000b330:	300cd07a 	srli	r6,r6,1
1000b334:	4010d07a 	srli	r8,r8,1
1000b338:	1021883a 	mov	r16,r2
1000b33c:	89a2b03a 	or	r17,r17,r6
1000b340:	003f1f06 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b344:	0081ffc4 	movi	r2,2047
1000b348:	80bf481e 	bne	r16,r2,1000b06c <__alt_data_end+0xf800b06c>
1000b34c:	003f1c06 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b350:	843ff844 	addi	r16,r16,-31
1000b354:	01000804 	movi	r4,32
1000b358:	1406d83a 	srl	r3,r2,r16
1000b35c:	41005026 	beq	r8,r4,1000b4a0 <__adddf3+0x55c>
1000b360:	01001004 	movi	r4,64
1000b364:	2211c83a 	sub	r8,r4,r8
1000b368:	1204983a 	sll	r2,r2,r8
1000b36c:	88a2b03a 	or	r17,r17,r2
1000b370:	8822c03a 	cmpne	r17,r17,zero
1000b374:	1c62b03a 	or	r17,r3,r17
1000b378:	0011883a 	mov	r8,zero
1000b37c:	0021883a 	mov	r16,zero
1000b380:	003f7106 	br	1000b148 <__alt_data_end+0xf800b148>
1000b384:	193ff804 	addi	r4,r3,-32
1000b388:	00800804 	movi	r2,32
1000b38c:	4908d83a 	srl	r4,r9,r4
1000b390:	18804526 	beq	r3,r2,1000b4a8 <__adddf3+0x564>
1000b394:	00801004 	movi	r2,64
1000b398:	10c5c83a 	sub	r2,r2,r3
1000b39c:	4886983a 	sll	r3,r9,r2
1000b3a0:	198cb03a 	or	r6,r3,r6
1000b3a4:	300cc03a 	cmpne	r6,r6,zero
1000b3a8:	218cb03a 	or	r6,r4,r6
1000b3ac:	0007883a 	mov	r3,zero
1000b3b0:	003f3b06 	br	1000b0a0 <__alt_data_end+0xf800b0a0>
1000b3b4:	80002a26 	beq	r16,zero,1000b460 <__adddf3+0x51c>
1000b3b8:	0101ffc4 	movi	r4,2047
1000b3bc:	11006826 	beq	r2,r4,1000b560 <__adddf3+0x61c>
1000b3c0:	00c7c83a 	sub	r3,zero,r3
1000b3c4:	42002034 	orhi	r8,r8,128
1000b3c8:	01000e04 	movi	r4,56
1000b3cc:	20c07c16 	blt	r4,r3,1000b5c0 <__adddf3+0x67c>
1000b3d0:	010007c4 	movi	r4,31
1000b3d4:	20c0da16 	blt	r4,r3,1000b740 <__adddf3+0x7fc>
1000b3d8:	01000804 	movi	r4,32
1000b3dc:	20c9c83a 	sub	r4,r4,r3
1000b3e0:	4114983a 	sll	r10,r8,r4
1000b3e4:	88cad83a 	srl	r5,r17,r3
1000b3e8:	8908983a 	sll	r4,r17,r4
1000b3ec:	40c6d83a 	srl	r3,r8,r3
1000b3f0:	5162b03a 	or	r17,r10,r5
1000b3f4:	2008c03a 	cmpne	r4,r4,zero
1000b3f8:	8922b03a 	or	r17,r17,r4
1000b3fc:	3463c83a 	sub	r17,r6,r17
1000b400:	48c7c83a 	sub	r3,r9,r3
1000b404:	344d803a 	cmpltu	r6,r6,r17
1000b408:	1991c83a 	sub	r8,r3,r6
1000b40c:	1021883a 	mov	r16,r2
1000b410:	3825883a 	mov	r18,r7
1000b414:	003f2706 	br	1000b0b4 <__alt_data_end+0xf800b0b4>
1000b418:	24d0b03a 	or	r8,r4,r19
1000b41c:	40001b1e 	bne	r8,zero,1000b48c <__adddf3+0x548>
1000b420:	0005883a 	mov	r2,zero
1000b424:	0007883a 	mov	r3,zero
1000b428:	0021883a 	mov	r16,zero
1000b42c:	003f4d06 	br	1000b164 <__alt_data_end+0xf800b164>
1000b430:	008007c4 	movi	r2,31
1000b434:	11003c16 	blt	r2,r4,1000b528 <__adddf3+0x5e4>
1000b438:	00800804 	movi	r2,32
1000b43c:	1105c83a 	sub	r2,r2,r4
1000b440:	488e983a 	sll	r7,r9,r2
1000b444:	310ad83a 	srl	r5,r6,r4
1000b448:	3084983a 	sll	r2,r6,r2
1000b44c:	4912d83a 	srl	r9,r9,r4
1000b450:	394ab03a 	or	r5,r7,r5
1000b454:	1004c03a 	cmpne	r2,r2,zero
1000b458:	288ab03a 	or	r5,r5,r2
1000b45c:	003f5306 	br	1000b1ac <__alt_data_end+0xf800b1ac>
1000b460:	4448b03a 	or	r4,r8,r17
1000b464:	20003e26 	beq	r4,zero,1000b560 <__adddf3+0x61c>
1000b468:	00c6303a 	nor	r3,zero,r3
1000b46c:	18003a1e 	bne	r3,zero,1000b558 <__adddf3+0x614>
1000b470:	3463c83a 	sub	r17,r6,r17
1000b474:	4a07c83a 	sub	r3,r9,r8
1000b478:	344d803a 	cmpltu	r6,r6,r17
1000b47c:	1991c83a 	sub	r8,r3,r6
1000b480:	1021883a 	mov	r16,r2
1000b484:	3825883a 	mov	r18,r7
1000b488:	003f0a06 	br	1000b0b4 <__alt_data_end+0xf800b0b4>
1000b48c:	2023883a 	mov	r17,r4
1000b490:	003f0d06 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b494:	0081ffc4 	movi	r2,2047
1000b498:	80bf3f1e 	bne	r16,r2,1000b198 <__alt_data_end+0xf800b198>
1000b49c:	003ec806 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b4a0:	0005883a 	mov	r2,zero
1000b4a4:	003fb106 	br	1000b36c <__alt_data_end+0xf800b36c>
1000b4a8:	0007883a 	mov	r3,zero
1000b4ac:	003fbc06 	br	1000b3a0 <__alt_data_end+0xf800b3a0>
1000b4b0:	4444b03a 	or	r2,r8,r17
1000b4b4:	8000871e 	bne	r16,zero,1000b6d4 <__adddf3+0x790>
1000b4b8:	1000ba26 	beq	r2,zero,1000b7a4 <__adddf3+0x860>
1000b4bc:	4984b03a 	or	r2,r9,r6
1000b4c0:	103ebf26 	beq	r2,zero,1000afc0 <__alt_data_end+0xf800afc0>
1000b4c4:	8985883a 	add	r2,r17,r6
1000b4c8:	4247883a 	add	r3,r8,r9
1000b4cc:	1451803a 	cmpltu	r8,r2,r17
1000b4d0:	40d1883a 	add	r8,r8,r3
1000b4d4:	40c0202c 	andhi	r3,r8,128
1000b4d8:	1023883a 	mov	r17,r2
1000b4dc:	183f1a26 	beq	r3,zero,1000b148 <__alt_data_end+0xf800b148>
1000b4e0:	00bfe034 	movhi	r2,65408
1000b4e4:	10bfffc4 	addi	r2,r2,-1
1000b4e8:	2021883a 	mov	r16,r4
1000b4ec:	4090703a 	and	r8,r8,r2
1000b4f0:	003eb306 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b4f4:	4444b03a 	or	r2,r8,r17
1000b4f8:	8000291e 	bne	r16,zero,1000b5a0 <__adddf3+0x65c>
1000b4fc:	10004b1e 	bne	r2,zero,1000b62c <__adddf3+0x6e8>
1000b500:	4990b03a 	or	r8,r9,r6
1000b504:	40008b26 	beq	r8,zero,1000b734 <__adddf3+0x7f0>
1000b508:	4811883a 	mov	r8,r9
1000b50c:	3023883a 	mov	r17,r6
1000b510:	3825883a 	mov	r18,r7
1000b514:	003eaa06 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b518:	1021883a 	mov	r16,r2
1000b51c:	0011883a 	mov	r8,zero
1000b520:	0005883a 	mov	r2,zero
1000b524:	003f0f06 	br	1000b164 <__alt_data_end+0xf800b164>
1000b528:	217ff804 	addi	r5,r4,-32
1000b52c:	00800804 	movi	r2,32
1000b530:	494ad83a 	srl	r5,r9,r5
1000b534:	20807d26 	beq	r4,r2,1000b72c <__adddf3+0x7e8>
1000b538:	00801004 	movi	r2,64
1000b53c:	1109c83a 	sub	r4,r2,r4
1000b540:	4912983a 	sll	r9,r9,r4
1000b544:	498cb03a 	or	r6,r9,r6
1000b548:	300cc03a 	cmpne	r6,r6,zero
1000b54c:	298ab03a 	or	r5,r5,r6
1000b550:	0013883a 	mov	r9,zero
1000b554:	003f1506 	br	1000b1ac <__alt_data_end+0xf800b1ac>
1000b558:	0101ffc4 	movi	r4,2047
1000b55c:	113f9a1e 	bne	r2,r4,1000b3c8 <__alt_data_end+0xf800b3c8>
1000b560:	4811883a 	mov	r8,r9
1000b564:	3023883a 	mov	r17,r6
1000b568:	1021883a 	mov	r16,r2
1000b56c:	3825883a 	mov	r18,r7
1000b570:	003e9306 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b574:	8000161e 	bne	r16,zero,1000b5d0 <__adddf3+0x68c>
1000b578:	444ab03a 	or	r5,r8,r17
1000b57c:	28005126 	beq	r5,zero,1000b6c4 <__adddf3+0x780>
1000b580:	0108303a 	nor	r4,zero,r4
1000b584:	20004d1e 	bne	r4,zero,1000b6bc <__adddf3+0x778>
1000b588:	89a3883a 	add	r17,r17,r6
1000b58c:	4253883a 	add	r9,r8,r9
1000b590:	898d803a 	cmpltu	r6,r17,r6
1000b594:	3251883a 	add	r8,r6,r9
1000b598:	1021883a 	mov	r16,r2
1000b59c:	003f0806 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000b5a0:	1000301e 	bne	r2,zero,1000b664 <__adddf3+0x720>
1000b5a4:	4984b03a 	or	r2,r9,r6
1000b5a8:	10007126 	beq	r2,zero,1000b770 <__adddf3+0x82c>
1000b5ac:	4811883a 	mov	r8,r9
1000b5b0:	3023883a 	mov	r17,r6
1000b5b4:	3825883a 	mov	r18,r7
1000b5b8:	0401ffc4 	movi	r16,2047
1000b5bc:	003e8006 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b5c0:	4462b03a 	or	r17,r8,r17
1000b5c4:	8822c03a 	cmpne	r17,r17,zero
1000b5c8:	0007883a 	mov	r3,zero
1000b5cc:	003f8b06 	br	1000b3fc <__alt_data_end+0xf800b3fc>
1000b5d0:	0141ffc4 	movi	r5,2047
1000b5d4:	11403b26 	beq	r2,r5,1000b6c4 <__adddf3+0x780>
1000b5d8:	0109c83a 	sub	r4,zero,r4
1000b5dc:	42002034 	orhi	r8,r8,128
1000b5e0:	01400e04 	movi	r5,56
1000b5e4:	29006716 	blt	r5,r4,1000b784 <__adddf3+0x840>
1000b5e8:	014007c4 	movi	r5,31
1000b5ec:	29007016 	blt	r5,r4,1000b7b0 <__adddf3+0x86c>
1000b5f0:	01400804 	movi	r5,32
1000b5f4:	290bc83a 	sub	r5,r5,r4
1000b5f8:	4154983a 	sll	r10,r8,r5
1000b5fc:	890ed83a 	srl	r7,r17,r4
1000b600:	894a983a 	sll	r5,r17,r5
1000b604:	4108d83a 	srl	r4,r8,r4
1000b608:	51e2b03a 	or	r17,r10,r7
1000b60c:	280ac03a 	cmpne	r5,r5,zero
1000b610:	8962b03a 	or	r17,r17,r5
1000b614:	89a3883a 	add	r17,r17,r6
1000b618:	2253883a 	add	r9,r4,r9
1000b61c:	898d803a 	cmpltu	r6,r17,r6
1000b620:	3251883a 	add	r8,r6,r9
1000b624:	1021883a 	mov	r16,r2
1000b628:	003ee506 	br	1000b1c0 <__alt_data_end+0xf800b1c0>
1000b62c:	4984b03a 	or	r2,r9,r6
1000b630:	103e6326 	beq	r2,zero,1000afc0 <__alt_data_end+0xf800afc0>
1000b634:	8987c83a 	sub	r3,r17,r6
1000b638:	88c9803a 	cmpltu	r4,r17,r3
1000b63c:	4245c83a 	sub	r2,r8,r9
1000b640:	1105c83a 	sub	r2,r2,r4
1000b644:	1100202c 	andhi	r4,r2,128
1000b648:	203ebb26 	beq	r4,zero,1000b138 <__alt_data_end+0xf800b138>
1000b64c:	3463c83a 	sub	r17,r6,r17
1000b650:	4a07c83a 	sub	r3,r9,r8
1000b654:	344d803a 	cmpltu	r6,r6,r17
1000b658:	1991c83a 	sub	r8,r3,r6
1000b65c:	3825883a 	mov	r18,r7
1000b660:	003e5706 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b664:	4984b03a 	or	r2,r9,r6
1000b668:	10002e26 	beq	r2,zero,1000b724 <__adddf3+0x7e0>
1000b66c:	4004d0fa 	srli	r2,r8,3
1000b670:	8822d0fa 	srli	r17,r17,3
1000b674:	4010977a 	slli	r8,r8,29
1000b678:	10c0022c 	andhi	r3,r2,8
1000b67c:	4462b03a 	or	r17,r8,r17
1000b680:	18000826 	beq	r3,zero,1000b6a4 <__adddf3+0x760>
1000b684:	4808d0fa 	srli	r4,r9,3
1000b688:	20c0022c 	andhi	r3,r4,8
1000b68c:	1800051e 	bne	r3,zero,1000b6a4 <__adddf3+0x760>
1000b690:	300cd0fa 	srli	r6,r6,3
1000b694:	4806977a 	slli	r3,r9,29
1000b698:	2005883a 	mov	r2,r4
1000b69c:	3825883a 	mov	r18,r7
1000b6a0:	19a2b03a 	or	r17,r3,r6
1000b6a4:	8810d77a 	srli	r8,r17,29
1000b6a8:	100490fa 	slli	r2,r2,3
1000b6ac:	882290fa 	slli	r17,r17,3
1000b6b0:	0401ffc4 	movi	r16,2047
1000b6b4:	4090b03a 	or	r8,r8,r2
1000b6b8:	003e4106 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b6bc:	0141ffc4 	movi	r5,2047
1000b6c0:	117fc71e 	bne	r2,r5,1000b5e0 <__alt_data_end+0xf800b5e0>
1000b6c4:	4811883a 	mov	r8,r9
1000b6c8:	3023883a 	mov	r17,r6
1000b6cc:	1021883a 	mov	r16,r2
1000b6d0:	003e3b06 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b6d4:	10002f26 	beq	r2,zero,1000b794 <__adddf3+0x850>
1000b6d8:	4984b03a 	or	r2,r9,r6
1000b6dc:	10001126 	beq	r2,zero,1000b724 <__adddf3+0x7e0>
1000b6e0:	4004d0fa 	srli	r2,r8,3
1000b6e4:	8822d0fa 	srli	r17,r17,3
1000b6e8:	4010977a 	slli	r8,r8,29
1000b6ec:	10c0022c 	andhi	r3,r2,8
1000b6f0:	4462b03a 	or	r17,r8,r17
1000b6f4:	183feb26 	beq	r3,zero,1000b6a4 <__alt_data_end+0xf800b6a4>
1000b6f8:	4808d0fa 	srli	r4,r9,3
1000b6fc:	20c0022c 	andhi	r3,r4,8
1000b700:	183fe81e 	bne	r3,zero,1000b6a4 <__alt_data_end+0xf800b6a4>
1000b704:	300cd0fa 	srli	r6,r6,3
1000b708:	4806977a 	slli	r3,r9,29
1000b70c:	2005883a 	mov	r2,r4
1000b710:	19a2b03a 	or	r17,r3,r6
1000b714:	003fe306 	br	1000b6a4 <__alt_data_end+0xf800b6a4>
1000b718:	0011883a 	mov	r8,zero
1000b71c:	0005883a 	mov	r2,zero
1000b720:	003e3f06 	br	1000b020 <__alt_data_end+0xf800b020>
1000b724:	0401ffc4 	movi	r16,2047
1000b728:	003e2506 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b72c:	0013883a 	mov	r9,zero
1000b730:	003f8406 	br	1000b544 <__alt_data_end+0xf800b544>
1000b734:	0005883a 	mov	r2,zero
1000b738:	0007883a 	mov	r3,zero
1000b73c:	003e8906 	br	1000b164 <__alt_data_end+0xf800b164>
1000b740:	197ff804 	addi	r5,r3,-32
1000b744:	01000804 	movi	r4,32
1000b748:	414ad83a 	srl	r5,r8,r5
1000b74c:	19002426 	beq	r3,r4,1000b7e0 <__adddf3+0x89c>
1000b750:	01001004 	movi	r4,64
1000b754:	20c7c83a 	sub	r3,r4,r3
1000b758:	40c6983a 	sll	r3,r8,r3
1000b75c:	1c46b03a 	or	r3,r3,r17
1000b760:	1806c03a 	cmpne	r3,r3,zero
1000b764:	28e2b03a 	or	r17,r5,r3
1000b768:	0007883a 	mov	r3,zero
1000b76c:	003f2306 	br	1000b3fc <__alt_data_end+0xf800b3fc>
1000b770:	0007883a 	mov	r3,zero
1000b774:	5811883a 	mov	r8,r11
1000b778:	00bfffc4 	movi	r2,-1
1000b77c:	0401ffc4 	movi	r16,2047
1000b780:	003e7806 	br	1000b164 <__alt_data_end+0xf800b164>
1000b784:	4462b03a 	or	r17,r8,r17
1000b788:	8822c03a 	cmpne	r17,r17,zero
1000b78c:	0009883a 	mov	r4,zero
1000b790:	003fa006 	br	1000b614 <__alt_data_end+0xf800b614>
1000b794:	4811883a 	mov	r8,r9
1000b798:	3023883a 	mov	r17,r6
1000b79c:	0401ffc4 	movi	r16,2047
1000b7a0:	003e0706 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b7a4:	4811883a 	mov	r8,r9
1000b7a8:	3023883a 	mov	r17,r6
1000b7ac:	003e0406 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b7b0:	21fff804 	addi	r7,r4,-32
1000b7b4:	01400804 	movi	r5,32
1000b7b8:	41ced83a 	srl	r7,r8,r7
1000b7bc:	21400a26 	beq	r4,r5,1000b7e8 <__adddf3+0x8a4>
1000b7c0:	01401004 	movi	r5,64
1000b7c4:	2909c83a 	sub	r4,r5,r4
1000b7c8:	4108983a 	sll	r4,r8,r4
1000b7cc:	2448b03a 	or	r4,r4,r17
1000b7d0:	2008c03a 	cmpne	r4,r4,zero
1000b7d4:	3922b03a 	or	r17,r7,r4
1000b7d8:	0009883a 	mov	r4,zero
1000b7dc:	003f8d06 	br	1000b614 <__alt_data_end+0xf800b614>
1000b7e0:	0007883a 	mov	r3,zero
1000b7e4:	003fdd06 	br	1000b75c <__alt_data_end+0xf800b75c>
1000b7e8:	0009883a 	mov	r4,zero
1000b7ec:	003ff706 	br	1000b7cc <__alt_data_end+0xf800b7cc>

1000b7f0 <__divdf3>:
1000b7f0:	defff004 	addi	sp,sp,-64
1000b7f4:	dc800815 	stw	r18,32(sp)
1000b7f8:	2824d53a 	srli	r18,r5,20
1000b7fc:	dd800c15 	stw	r22,48(sp)
1000b800:	282cd7fa 	srli	r22,r5,31
1000b804:	dc000615 	stw	r16,24(sp)
1000b808:	04000434 	movhi	r16,16
1000b80c:	843fffc4 	addi	r16,r16,-1
1000b810:	dfc00f15 	stw	ra,60(sp)
1000b814:	df000e15 	stw	fp,56(sp)
1000b818:	ddc00d15 	stw	r23,52(sp)
1000b81c:	dd400b15 	stw	r21,44(sp)
1000b820:	dd000a15 	stw	r20,40(sp)
1000b824:	dcc00915 	stw	r19,36(sp)
1000b828:	dc400715 	stw	r17,28(sp)
1000b82c:	9481ffcc 	andi	r18,r18,2047
1000b830:	2c20703a 	and	r16,r5,r16
1000b834:	b2003fcc 	andi	r8,r22,255
1000b838:	90006126 	beq	r18,zero,1000b9c0 <__divdf3+0x1d0>
1000b83c:	0081ffc4 	movi	r2,2047
1000b840:	202b883a 	mov	r21,r4
1000b844:	90803726 	beq	r18,r2,1000b924 <__divdf3+0x134>
1000b848:	80800434 	orhi	r2,r16,16
1000b84c:	100490fa 	slli	r2,r2,3
1000b850:	2020d77a 	srli	r16,r4,29
1000b854:	202a90fa 	slli	r21,r4,3
1000b858:	94bf0044 	addi	r18,r18,-1023
1000b85c:	80a0b03a 	or	r16,r16,r2
1000b860:	0013883a 	mov	r9,zero
1000b864:	000b883a 	mov	r5,zero
1000b868:	3806d53a 	srli	r3,r7,20
1000b86c:	382ed7fa 	srli	r23,r7,31
1000b870:	04400434 	movhi	r17,16
1000b874:	8c7fffc4 	addi	r17,r17,-1
1000b878:	18c1ffcc 	andi	r3,r3,2047
1000b87c:	3029883a 	mov	r20,r6
1000b880:	3c62703a 	and	r17,r7,r17
1000b884:	bf003fcc 	andi	fp,r23,255
1000b888:	18006e26 	beq	r3,zero,1000ba44 <__divdf3+0x254>
1000b88c:	0081ffc4 	movi	r2,2047
1000b890:	18806626 	beq	r3,r2,1000ba2c <__divdf3+0x23c>
1000b894:	88800434 	orhi	r2,r17,16
1000b898:	100490fa 	slli	r2,r2,3
1000b89c:	3022d77a 	srli	r17,r6,29
1000b8a0:	302890fa 	slli	r20,r6,3
1000b8a4:	18ff0044 	addi	r3,r3,-1023
1000b8a8:	88a2b03a 	or	r17,r17,r2
1000b8ac:	000f883a 	mov	r7,zero
1000b8b0:	b5e6f03a 	xor	r19,r22,r23
1000b8b4:	3a4cb03a 	or	r6,r7,r9
1000b8b8:	008003c4 	movi	r2,15
1000b8bc:	9809883a 	mov	r4,r19
1000b8c0:	90c7c83a 	sub	r3,r18,r3
1000b8c4:	9cc03fcc 	andi	r19,r19,255
1000b8c8:	11809636 	bltu	r2,r6,1000bb24 <__divdf3+0x334>
1000b8cc:	300c90ba 	slli	r6,r6,2
1000b8d0:	00840074 	movhi	r2,4097
1000b8d4:	10ae3904 	addi	r2,r2,-18204
1000b8d8:	308d883a 	add	r6,r6,r2
1000b8dc:	30800017 	ldw	r2,0(r6)
1000b8e0:	1000683a 	jmp	r2
1000b8e4:	1000bb24 	muli	zero,r2,748
1000b8e8:	1000b95c 	xori	zero,r2,741
1000b8ec:	1000bb14 	ori	zero,r2,748
1000b8f0:	1000b950 	cmplti	zero,r2,741
1000b8f4:	1000bb14 	ori	zero,r2,748
1000b8f8:	1000bae8 	cmpgeui	zero,r2,747
1000b8fc:	1000bb14 	ori	zero,r2,748
1000b900:	1000b950 	cmplti	zero,r2,741
1000b904:	1000b95c 	xori	zero,r2,741
1000b908:	1000b95c 	xori	zero,r2,741
1000b90c:	1000bae8 	cmpgeui	zero,r2,747
1000b910:	1000b950 	cmplti	zero,r2,741
1000b914:	1000b940 	call	11000b94 <_gp+0xfe6cc8>
1000b918:	1000b940 	call	11000b94 <_gp+0xfe6cc8>
1000b91c:	1000b940 	call	11000b94 <_gp+0xfe6cc8>
1000b920:	1000beac 	andhi	zero,r2,762
1000b924:	2404b03a 	or	r2,r4,r16
1000b928:	10006c1e 	bne	r2,zero,1000badc <__divdf3+0x2ec>
1000b92c:	02400204 	movi	r9,8
1000b930:	0021883a 	mov	r16,zero
1000b934:	002b883a 	mov	r21,zero
1000b938:	01400084 	movi	r5,2
1000b93c:	003fca06 	br	1000b868 <__alt_data_end+0xf800b868>
1000b940:	8023883a 	mov	r17,r16
1000b944:	a829883a 	mov	r20,r21
1000b948:	4039883a 	mov	fp,r8
1000b94c:	280f883a 	mov	r7,r5
1000b950:	00800084 	movi	r2,2
1000b954:	3881601e 	bne	r7,r2,1000bed8 <__divdf3+0x6e8>
1000b958:	e027883a 	mov	r19,fp
1000b95c:	9900004c 	andi	r4,r19,1
1000b960:	0081ffc4 	movi	r2,2047
1000b964:	0021883a 	mov	r16,zero
1000b968:	002b883a 	mov	r21,zero
1000b96c:	1004953a 	slli	r2,r2,20
1000b970:	20c03fcc 	andi	r3,r4,255
1000b974:	01400434 	movhi	r5,16
1000b978:	297fffc4 	addi	r5,r5,-1
1000b97c:	180697fa 	slli	r3,r3,31
1000b980:	8160703a 	and	r16,r16,r5
1000b984:	80a0b03a 	or	r16,r16,r2
1000b988:	80c6b03a 	or	r3,r16,r3
1000b98c:	a805883a 	mov	r2,r21
1000b990:	dfc00f17 	ldw	ra,60(sp)
1000b994:	df000e17 	ldw	fp,56(sp)
1000b998:	ddc00d17 	ldw	r23,52(sp)
1000b99c:	dd800c17 	ldw	r22,48(sp)
1000b9a0:	dd400b17 	ldw	r21,44(sp)
1000b9a4:	dd000a17 	ldw	r20,40(sp)
1000b9a8:	dcc00917 	ldw	r19,36(sp)
1000b9ac:	dc800817 	ldw	r18,32(sp)
1000b9b0:	dc400717 	ldw	r17,28(sp)
1000b9b4:	dc000617 	ldw	r16,24(sp)
1000b9b8:	dec01004 	addi	sp,sp,64
1000b9bc:	f800283a 	ret
1000b9c0:	2404b03a 	or	r2,r4,r16
1000b9c4:	2023883a 	mov	r17,r4
1000b9c8:	10003f26 	beq	r2,zero,1000bac8 <__divdf3+0x2d8>
1000b9cc:	80015e26 	beq	r16,zero,1000bf48 <__divdf3+0x758>
1000b9d0:	8009883a 	mov	r4,r16
1000b9d4:	d9800215 	stw	r6,8(sp)
1000b9d8:	d9c00515 	stw	r7,20(sp)
1000b9dc:	da000415 	stw	r8,16(sp)
1000b9e0:	000d7840 	call	1000d784 <__clzsi2>
1000b9e4:	d9800217 	ldw	r6,8(sp)
1000b9e8:	d9c00517 	ldw	r7,20(sp)
1000b9ec:	da000417 	ldw	r8,16(sp)
1000b9f0:	113ffd44 	addi	r4,r2,-11
1000b9f4:	00c00704 	movi	r3,28
1000b9f8:	19014f16 	blt	r3,r4,1000bf38 <__divdf3+0x748>
1000b9fc:	00c00744 	movi	r3,29
1000ba00:	157ffe04 	addi	r21,r2,-8
1000ba04:	1907c83a 	sub	r3,r3,r4
1000ba08:	8560983a 	sll	r16,r16,r21
1000ba0c:	88c6d83a 	srl	r3,r17,r3
1000ba10:	8d6a983a 	sll	r21,r17,r21
1000ba14:	1c20b03a 	or	r16,r3,r16
1000ba18:	1080fcc4 	addi	r2,r2,1011
1000ba1c:	00a5c83a 	sub	r18,zero,r2
1000ba20:	0013883a 	mov	r9,zero
1000ba24:	000b883a 	mov	r5,zero
1000ba28:	003f8f06 	br	1000b868 <__alt_data_end+0xf800b868>
1000ba2c:	3444b03a 	or	r2,r6,r17
1000ba30:	1000231e 	bne	r2,zero,1000bac0 <__divdf3+0x2d0>
1000ba34:	0023883a 	mov	r17,zero
1000ba38:	0029883a 	mov	r20,zero
1000ba3c:	01c00084 	movi	r7,2
1000ba40:	003f9b06 	br	1000b8b0 <__alt_data_end+0xf800b8b0>
1000ba44:	3444b03a 	or	r2,r6,r17
1000ba48:	10001926 	beq	r2,zero,1000bab0 <__divdf3+0x2c0>
1000ba4c:	88014b26 	beq	r17,zero,1000bf7c <__divdf3+0x78c>
1000ba50:	8809883a 	mov	r4,r17
1000ba54:	d9400115 	stw	r5,4(sp)
1000ba58:	d9800215 	stw	r6,8(sp)
1000ba5c:	da000415 	stw	r8,16(sp)
1000ba60:	da400315 	stw	r9,12(sp)
1000ba64:	000d7840 	call	1000d784 <__clzsi2>
1000ba68:	d9400117 	ldw	r5,4(sp)
1000ba6c:	d9800217 	ldw	r6,8(sp)
1000ba70:	da000417 	ldw	r8,16(sp)
1000ba74:	da400317 	ldw	r9,12(sp)
1000ba78:	113ffd44 	addi	r4,r2,-11
1000ba7c:	00c00704 	movi	r3,28
1000ba80:	19013a16 	blt	r3,r4,1000bf6c <__divdf3+0x77c>
1000ba84:	00c00744 	movi	r3,29
1000ba88:	153ffe04 	addi	r20,r2,-8
1000ba8c:	1907c83a 	sub	r3,r3,r4
1000ba90:	8d22983a 	sll	r17,r17,r20
1000ba94:	30c6d83a 	srl	r3,r6,r3
1000ba98:	3528983a 	sll	r20,r6,r20
1000ba9c:	1c62b03a 	or	r17,r3,r17
1000baa0:	1080fcc4 	addi	r2,r2,1011
1000baa4:	0087c83a 	sub	r3,zero,r2
1000baa8:	000f883a 	mov	r7,zero
1000baac:	003f8006 	br	1000b8b0 <__alt_data_end+0xf800b8b0>
1000bab0:	0023883a 	mov	r17,zero
1000bab4:	0029883a 	mov	r20,zero
1000bab8:	01c00044 	movi	r7,1
1000babc:	003f7c06 	br	1000b8b0 <__alt_data_end+0xf800b8b0>
1000bac0:	01c000c4 	movi	r7,3
1000bac4:	003f7a06 	br	1000b8b0 <__alt_data_end+0xf800b8b0>
1000bac8:	02400104 	movi	r9,4
1000bacc:	0021883a 	mov	r16,zero
1000bad0:	002b883a 	mov	r21,zero
1000bad4:	01400044 	movi	r5,1
1000bad8:	003f6306 	br	1000b868 <__alt_data_end+0xf800b868>
1000badc:	02400304 	movi	r9,12
1000bae0:	014000c4 	movi	r5,3
1000bae4:	003f6006 	br	1000b868 <__alt_data_end+0xf800b868>
1000bae8:	04000434 	movhi	r16,16
1000baec:	0009883a 	mov	r4,zero
1000baf0:	843fffc4 	addi	r16,r16,-1
1000baf4:	057fffc4 	movi	r21,-1
1000baf8:	0081ffc4 	movi	r2,2047
1000bafc:	003f9b06 	br	1000b96c <__alt_data_end+0xf800b96c>
1000bb00:	00c00044 	movi	r3,1
1000bb04:	1887c83a 	sub	r3,r3,r2
1000bb08:	01000e04 	movi	r4,56
1000bb0c:	20c1530e 	bge	r4,r3,1000c05c <__divdf3+0x86c>
1000bb10:	9900004c 	andi	r4,r19,1
1000bb14:	0005883a 	mov	r2,zero
1000bb18:	0021883a 	mov	r16,zero
1000bb1c:	002b883a 	mov	r21,zero
1000bb20:	003f9206 	br	1000b96c <__alt_data_end+0xf800b96c>
1000bb24:	8c012e36 	bltu	r17,r16,1000bfe0 <__divdf3+0x7f0>
1000bb28:	84412c26 	beq	r16,r17,1000bfdc <__divdf3+0x7ec>
1000bb2c:	a82f883a 	mov	r23,r21
1000bb30:	18ffffc4 	addi	r3,r3,-1
1000bb34:	002b883a 	mov	r21,zero
1000bb38:	a004d63a 	srli	r2,r20,24
1000bb3c:	8822923a 	slli	r17,r17,8
1000bb40:	a028923a 	slli	r20,r20,8
1000bb44:	8009883a 	mov	r4,r16
1000bb48:	88acb03a 	or	r22,r17,r2
1000bb4c:	dd000015 	stw	r20,0(sp)
1000bb50:	b028d43a 	srli	r20,r22,16
1000bb54:	d8c00215 	stw	r3,8(sp)
1000bb58:	b4bfffcc 	andi	r18,r22,65535
1000bb5c:	a00b883a 	mov	r5,r20
1000bb60:	000ae880 	call	1000ae88 <__udivsi3>
1000bb64:	100b883a 	mov	r5,r2
1000bb68:	9009883a 	mov	r4,r18
1000bb6c:	1023883a 	mov	r17,r2
1000bb70:	000097c0 	call	1000097c <__mulsi3>
1000bb74:	8009883a 	mov	r4,r16
1000bb78:	a00b883a 	mov	r5,r20
1000bb7c:	1039883a 	mov	fp,r2
1000bb80:	000aeec0 	call	1000aeec <__umodsi3>
1000bb84:	1004943a 	slli	r2,r2,16
1000bb88:	b808d43a 	srli	r4,r23,16
1000bb8c:	d8c00217 	ldw	r3,8(sp)
1000bb90:	2084b03a 	or	r2,r4,r2
1000bb94:	1700062e 	bgeu	r2,fp,1000bbb0 <__divdf3+0x3c0>
1000bb98:	1585883a 	add	r2,r2,r22
1000bb9c:	893fffc4 	addi	r4,r17,-1
1000bba0:	15811d36 	bltu	r2,r22,1000c018 <__divdf3+0x828>
1000bba4:	17011c2e 	bgeu	r2,fp,1000c018 <__divdf3+0x828>
1000bba8:	8c7fff84 	addi	r17,r17,-2
1000bbac:	1585883a 	add	r2,r2,r22
1000bbb0:	1739c83a 	sub	fp,r2,fp
1000bbb4:	a00b883a 	mov	r5,r20
1000bbb8:	e009883a 	mov	r4,fp
1000bbbc:	d8c00215 	stw	r3,8(sp)
1000bbc0:	000ae880 	call	1000ae88 <__udivsi3>
1000bbc4:	100b883a 	mov	r5,r2
1000bbc8:	9009883a 	mov	r4,r18
1000bbcc:	1021883a 	mov	r16,r2
1000bbd0:	000097c0 	call	1000097c <__mulsi3>
1000bbd4:	a00b883a 	mov	r5,r20
1000bbd8:	e009883a 	mov	r4,fp
1000bbdc:	d8800415 	stw	r2,16(sp)
1000bbe0:	000aeec0 	call	1000aeec <__umodsi3>
1000bbe4:	1004943a 	slli	r2,r2,16
1000bbe8:	da000417 	ldw	r8,16(sp)
1000bbec:	bdffffcc 	andi	r23,r23,65535
1000bbf0:	b884b03a 	or	r2,r23,r2
1000bbf4:	d8c00217 	ldw	r3,8(sp)
1000bbf8:	1200062e 	bgeu	r2,r8,1000bc14 <__divdf3+0x424>
1000bbfc:	1585883a 	add	r2,r2,r22
1000bc00:	813fffc4 	addi	r4,r16,-1
1000bc04:	15810236 	bltu	r2,r22,1000c010 <__divdf3+0x820>
1000bc08:	1201012e 	bgeu	r2,r8,1000c010 <__divdf3+0x820>
1000bc0c:	843fff84 	addi	r16,r16,-2
1000bc10:	1585883a 	add	r2,r2,r22
1000bc14:	8822943a 	slli	r17,r17,16
1000bc18:	d9800017 	ldw	r6,0(sp)
1000bc1c:	1211c83a 	sub	r8,r2,r8
1000bc20:	8c22b03a 	or	r17,r17,r16
1000bc24:	373fffcc 	andi	fp,r6,65535
1000bc28:	8abfffcc 	andi	r10,r17,65535
1000bc2c:	8820d43a 	srli	r16,r17,16
1000bc30:	5009883a 	mov	r4,r10
1000bc34:	e00b883a 	mov	r5,fp
1000bc38:	302ed43a 	srli	r23,r6,16
1000bc3c:	d8c00215 	stw	r3,8(sp)
1000bc40:	da000415 	stw	r8,16(sp)
1000bc44:	da800115 	stw	r10,4(sp)
1000bc48:	000097c0 	call	1000097c <__mulsi3>
1000bc4c:	800b883a 	mov	r5,r16
1000bc50:	e009883a 	mov	r4,fp
1000bc54:	d8800515 	stw	r2,20(sp)
1000bc58:	000097c0 	call	1000097c <__mulsi3>
1000bc5c:	8009883a 	mov	r4,r16
1000bc60:	b80b883a 	mov	r5,r23
1000bc64:	d8800315 	stw	r2,12(sp)
1000bc68:	000097c0 	call	1000097c <__mulsi3>
1000bc6c:	da800117 	ldw	r10,4(sp)
1000bc70:	b80b883a 	mov	r5,r23
1000bc74:	1021883a 	mov	r16,r2
1000bc78:	5009883a 	mov	r4,r10
1000bc7c:	000097c0 	call	1000097c <__mulsi3>
1000bc80:	d9c00517 	ldw	r7,20(sp)
1000bc84:	da400317 	ldw	r9,12(sp)
1000bc88:	d8c00217 	ldw	r3,8(sp)
1000bc8c:	3808d43a 	srli	r4,r7,16
1000bc90:	1245883a 	add	r2,r2,r9
1000bc94:	da000417 	ldw	r8,16(sp)
1000bc98:	2085883a 	add	r2,r4,r2
1000bc9c:	1240022e 	bgeu	r2,r9,1000bca8 <__divdf3+0x4b8>
1000bca0:	01000074 	movhi	r4,1
1000bca4:	8121883a 	add	r16,r16,r4
1000bca8:	1008d43a 	srli	r4,r2,16
1000bcac:	1004943a 	slli	r2,r2,16
1000bcb0:	39ffffcc 	andi	r7,r7,65535
1000bcb4:	2409883a 	add	r4,r4,r16
1000bcb8:	11c5883a 	add	r2,r2,r7
1000bcbc:	4100bb36 	bltu	r8,r4,1000bfac <__divdf3+0x7bc>
1000bcc0:	4100d726 	beq	r8,r4,1000c020 <__divdf3+0x830>
1000bcc4:	4109c83a 	sub	r4,r8,r4
1000bcc8:	a8a1c83a 	sub	r16,r21,r2
1000bccc:	ac2b803a 	cmpltu	r21,r21,r16
1000bcd0:	256bc83a 	sub	r21,r4,r21
1000bcd4:	b540d926 	beq	r22,r21,1000c03c <__divdf3+0x84c>
1000bcd8:	a00b883a 	mov	r5,r20
1000bcdc:	a809883a 	mov	r4,r21
1000bce0:	d8c00215 	stw	r3,8(sp)
1000bce4:	000ae880 	call	1000ae88 <__udivsi3>
1000bce8:	100b883a 	mov	r5,r2
1000bcec:	9009883a 	mov	r4,r18
1000bcf0:	d8800515 	stw	r2,20(sp)
1000bcf4:	000097c0 	call	1000097c <__mulsi3>
1000bcf8:	a809883a 	mov	r4,r21
1000bcfc:	a00b883a 	mov	r5,r20
1000bd00:	d8800415 	stw	r2,16(sp)
1000bd04:	000aeec0 	call	1000aeec <__umodsi3>
1000bd08:	1004943a 	slli	r2,r2,16
1000bd0c:	8008d43a 	srli	r4,r16,16
1000bd10:	da000417 	ldw	r8,16(sp)
1000bd14:	d8c00217 	ldw	r3,8(sp)
1000bd18:	2084b03a 	or	r2,r4,r2
1000bd1c:	d9c00517 	ldw	r7,20(sp)
1000bd20:	1200062e 	bgeu	r2,r8,1000bd3c <__divdf3+0x54c>
1000bd24:	1585883a 	add	r2,r2,r22
1000bd28:	393fffc4 	addi	r4,r7,-1
1000bd2c:	1580c536 	bltu	r2,r22,1000c044 <__divdf3+0x854>
1000bd30:	1200c42e 	bgeu	r2,r8,1000c044 <__divdf3+0x854>
1000bd34:	39ffff84 	addi	r7,r7,-2
1000bd38:	1585883a 	add	r2,r2,r22
1000bd3c:	122bc83a 	sub	r21,r2,r8
1000bd40:	a00b883a 	mov	r5,r20
1000bd44:	a809883a 	mov	r4,r21
1000bd48:	d8c00215 	stw	r3,8(sp)
1000bd4c:	d9c00515 	stw	r7,20(sp)
1000bd50:	000ae880 	call	1000ae88 <__udivsi3>
1000bd54:	9009883a 	mov	r4,r18
1000bd58:	100b883a 	mov	r5,r2
1000bd5c:	d8800415 	stw	r2,16(sp)
1000bd60:	000097c0 	call	1000097c <__mulsi3>
1000bd64:	a809883a 	mov	r4,r21
1000bd68:	a00b883a 	mov	r5,r20
1000bd6c:	1025883a 	mov	r18,r2
1000bd70:	000aeec0 	call	1000aeec <__umodsi3>
1000bd74:	1004943a 	slli	r2,r2,16
1000bd78:	813fffcc 	andi	r4,r16,65535
1000bd7c:	d8c00217 	ldw	r3,8(sp)
1000bd80:	20a0b03a 	or	r16,r4,r2
1000bd84:	d9c00517 	ldw	r7,20(sp)
1000bd88:	da000417 	ldw	r8,16(sp)
1000bd8c:	8480062e 	bgeu	r16,r18,1000bda8 <__divdf3+0x5b8>
1000bd90:	85a1883a 	add	r16,r16,r22
1000bd94:	40bfffc4 	addi	r2,r8,-1
1000bd98:	8580ac36 	bltu	r16,r22,1000c04c <__divdf3+0x85c>
1000bd9c:	8480ab2e 	bgeu	r16,r18,1000c04c <__divdf3+0x85c>
1000bda0:	423fff84 	addi	r8,r8,-2
1000bda4:	85a1883a 	add	r16,r16,r22
1000bda8:	3804943a 	slli	r2,r7,16
1000bdac:	84a1c83a 	sub	r16,r16,r18
1000bdb0:	e009883a 	mov	r4,fp
1000bdb4:	1228b03a 	or	r20,r2,r8
1000bdb8:	a1ffffcc 	andi	r7,r20,65535
1000bdbc:	a024d43a 	srli	r18,r20,16
1000bdc0:	380b883a 	mov	r5,r7
1000bdc4:	d8c00215 	stw	r3,8(sp)
1000bdc8:	d9c00515 	stw	r7,20(sp)
1000bdcc:	000097c0 	call	1000097c <__mulsi3>
1000bdd0:	900b883a 	mov	r5,r18
1000bdd4:	e009883a 	mov	r4,fp
1000bdd8:	102b883a 	mov	r21,r2
1000bddc:	000097c0 	call	1000097c <__mulsi3>
1000bde0:	900b883a 	mov	r5,r18
1000bde4:	b809883a 	mov	r4,r23
1000bde8:	1039883a 	mov	fp,r2
1000bdec:	000097c0 	call	1000097c <__mulsi3>
1000bdf0:	d9c00517 	ldw	r7,20(sp)
1000bdf4:	b80b883a 	mov	r5,r23
1000bdf8:	1025883a 	mov	r18,r2
1000bdfc:	3809883a 	mov	r4,r7
1000be00:	000097c0 	call	1000097c <__mulsi3>
1000be04:	a808d43a 	srli	r4,r21,16
1000be08:	1705883a 	add	r2,r2,fp
1000be0c:	d8c00217 	ldw	r3,8(sp)
1000be10:	2085883a 	add	r2,r4,r2
1000be14:	1700022e 	bgeu	r2,fp,1000be20 <__divdf3+0x630>
1000be18:	01000074 	movhi	r4,1
1000be1c:	9125883a 	add	r18,r18,r4
1000be20:	1008d43a 	srli	r4,r2,16
1000be24:	1004943a 	slli	r2,r2,16
1000be28:	ad7fffcc 	andi	r21,r21,65535
1000be2c:	2489883a 	add	r4,r4,r18
1000be30:	1545883a 	add	r2,r2,r21
1000be34:	81003836 	bltu	r16,r4,1000bf18 <__divdf3+0x728>
1000be38:	81003626 	beq	r16,r4,1000bf14 <__divdf3+0x724>
1000be3c:	a5000054 	ori	r20,r20,1
1000be40:	1880ffc4 	addi	r2,r3,1023
1000be44:	00bf2e0e 	bge	zero,r2,1000bb00 <__alt_data_end+0xf800bb00>
1000be48:	a10001cc 	andi	r4,r20,7
1000be4c:	20000726 	beq	r4,zero,1000be6c <__divdf3+0x67c>
1000be50:	a10003cc 	andi	r4,r20,15
1000be54:	01400104 	movi	r5,4
1000be58:	21400426 	beq	r4,r5,1000be6c <__divdf3+0x67c>
1000be5c:	a149883a 	add	r4,r20,r5
1000be60:	2529803a 	cmpltu	r20,r4,r20
1000be64:	8d23883a 	add	r17,r17,r20
1000be68:	2029883a 	mov	r20,r4
1000be6c:	8900402c 	andhi	r4,r17,256
1000be70:	20000426 	beq	r4,zero,1000be84 <__divdf3+0x694>
1000be74:	18810004 	addi	r2,r3,1024
1000be78:	00ffc034 	movhi	r3,65280
1000be7c:	18ffffc4 	addi	r3,r3,-1
1000be80:	88e2703a 	and	r17,r17,r3
1000be84:	00c1ff84 	movi	r3,2046
1000be88:	18beb416 	blt	r3,r2,1000b95c <__alt_data_end+0xf800b95c>
1000be8c:	a028d0fa 	srli	r20,r20,3
1000be90:	882a977a 	slli	r21,r17,29
1000be94:	8820927a 	slli	r16,r17,9
1000be98:	1081ffcc 	andi	r2,r2,2047
1000be9c:	ad2ab03a 	or	r21,r21,r20
1000bea0:	8020d33a 	srli	r16,r16,12
1000bea4:	9900004c 	andi	r4,r19,1
1000bea8:	003eb006 	br	1000b96c <__alt_data_end+0xf800b96c>
1000beac:	8080022c 	andhi	r2,r16,8
1000beb0:	10001226 	beq	r2,zero,1000befc <__divdf3+0x70c>
1000beb4:	8880022c 	andhi	r2,r17,8
1000beb8:	1000101e 	bne	r2,zero,1000befc <__divdf3+0x70c>
1000bebc:	00800434 	movhi	r2,16
1000bec0:	8c000234 	orhi	r16,r17,8
1000bec4:	10bfffc4 	addi	r2,r2,-1
1000bec8:	b809883a 	mov	r4,r23
1000becc:	80a0703a 	and	r16,r16,r2
1000bed0:	a02b883a 	mov	r21,r20
1000bed4:	003f0806 	br	1000baf8 <__alt_data_end+0xf800baf8>
1000bed8:	008000c4 	movi	r2,3
1000bedc:	3880b126 	beq	r7,r2,1000c1a4 <__divdf3+0x9b4>
1000bee0:	00800044 	movi	r2,1
1000bee4:	38805b1e 	bne	r7,r2,1000c054 <__divdf3+0x864>
1000bee8:	e009883a 	mov	r4,fp
1000beec:	0005883a 	mov	r2,zero
1000bef0:	0021883a 	mov	r16,zero
1000bef4:	002b883a 	mov	r21,zero
1000bef8:	003e9c06 	br	1000b96c <__alt_data_end+0xf800b96c>
1000befc:	00800434 	movhi	r2,16
1000bf00:	84000234 	orhi	r16,r16,8
1000bf04:	10bfffc4 	addi	r2,r2,-1
1000bf08:	b009883a 	mov	r4,r22
1000bf0c:	80a0703a 	and	r16,r16,r2
1000bf10:	003ef906 	br	1000baf8 <__alt_data_end+0xf800baf8>
1000bf14:	103fca26 	beq	r2,zero,1000be40 <__alt_data_end+0xf800be40>
1000bf18:	b421883a 	add	r16,r22,r16
1000bf1c:	a17fffc4 	addi	r5,r20,-1
1000bf20:	8580422e 	bgeu	r16,r22,1000c02c <__divdf3+0x83c>
1000bf24:	2829883a 	mov	r20,r5
1000bf28:	813fc41e 	bne	r16,r4,1000be3c <__alt_data_end+0xf800be3c>
1000bf2c:	d9800017 	ldw	r6,0(sp)
1000bf30:	30bfc21e 	bne	r6,r2,1000be3c <__alt_data_end+0xf800be3c>
1000bf34:	003fc206 	br	1000be40 <__alt_data_end+0xf800be40>
1000bf38:	143ff604 	addi	r16,r2,-40
1000bf3c:	8c20983a 	sll	r16,r17,r16
1000bf40:	002b883a 	mov	r21,zero
1000bf44:	003eb406 	br	1000ba18 <__alt_data_end+0xf800ba18>
1000bf48:	d9800215 	stw	r6,8(sp)
1000bf4c:	d9c00515 	stw	r7,20(sp)
1000bf50:	da000415 	stw	r8,16(sp)
1000bf54:	000d7840 	call	1000d784 <__clzsi2>
1000bf58:	10800804 	addi	r2,r2,32
1000bf5c:	da000417 	ldw	r8,16(sp)
1000bf60:	d9c00517 	ldw	r7,20(sp)
1000bf64:	d9800217 	ldw	r6,8(sp)
1000bf68:	003ea106 	br	1000b9f0 <__alt_data_end+0xf800b9f0>
1000bf6c:	147ff604 	addi	r17,r2,-40
1000bf70:	3462983a 	sll	r17,r6,r17
1000bf74:	0029883a 	mov	r20,zero
1000bf78:	003ec906 	br	1000baa0 <__alt_data_end+0xf800baa0>
1000bf7c:	3009883a 	mov	r4,r6
1000bf80:	d9400115 	stw	r5,4(sp)
1000bf84:	d9800215 	stw	r6,8(sp)
1000bf88:	da000415 	stw	r8,16(sp)
1000bf8c:	da400315 	stw	r9,12(sp)
1000bf90:	000d7840 	call	1000d784 <__clzsi2>
1000bf94:	10800804 	addi	r2,r2,32
1000bf98:	da400317 	ldw	r9,12(sp)
1000bf9c:	da000417 	ldw	r8,16(sp)
1000bfa0:	d9800217 	ldw	r6,8(sp)
1000bfa4:	d9400117 	ldw	r5,4(sp)
1000bfa8:	003eb306 	br	1000ba78 <__alt_data_end+0xf800ba78>
1000bfac:	d9800017 	ldw	r6,0(sp)
1000bfb0:	a9ab883a 	add	r21,r21,r6
1000bfb4:	a98b803a 	cmpltu	r5,r21,r6
1000bfb8:	2d8b883a 	add	r5,r5,r22
1000bfbc:	2a11883a 	add	r8,r5,r8
1000bfc0:	897fffc4 	addi	r5,r17,-1
1000bfc4:	b2000c2e 	bgeu	r22,r8,1000bff8 <__divdf3+0x808>
1000bfc8:	41003f36 	bltu	r8,r4,1000c0c8 <__divdf3+0x8d8>
1000bfcc:	22006c26 	beq	r4,r8,1000c180 <__divdf3+0x990>
1000bfd0:	4109c83a 	sub	r4,r8,r4
1000bfd4:	2823883a 	mov	r17,r5
1000bfd8:	003f3b06 	br	1000bcc8 <__alt_data_end+0xf800bcc8>
1000bfdc:	ad3ed336 	bltu	r21,r20,1000bb2c <__alt_data_end+0xf800bb2c>
1000bfe0:	a804d07a 	srli	r2,r21,1
1000bfe4:	802e97fa 	slli	r23,r16,31
1000bfe8:	a82a97fa 	slli	r21,r21,31
1000bfec:	8020d07a 	srli	r16,r16,1
1000bff0:	b8aeb03a 	or	r23,r23,r2
1000bff4:	003ed006 	br	1000bb38 <__alt_data_end+0xf800bb38>
1000bff8:	b23ff51e 	bne	r22,r8,1000bfd0 <__alt_data_end+0xf800bfd0>
1000bffc:	d9800017 	ldw	r6,0(sp)
1000c000:	a9bff12e 	bgeu	r21,r6,1000bfc8 <__alt_data_end+0xf800bfc8>
1000c004:	b109c83a 	sub	r4,r22,r4
1000c008:	2823883a 	mov	r17,r5
1000c00c:	003f2e06 	br	1000bcc8 <__alt_data_end+0xf800bcc8>
1000c010:	2021883a 	mov	r16,r4
1000c014:	003eff06 	br	1000bc14 <__alt_data_end+0xf800bc14>
1000c018:	2023883a 	mov	r17,r4
1000c01c:	003ee406 	br	1000bbb0 <__alt_data_end+0xf800bbb0>
1000c020:	a8bfe236 	bltu	r21,r2,1000bfac <__alt_data_end+0xf800bfac>
1000c024:	0009883a 	mov	r4,zero
1000c028:	003f2706 	br	1000bcc8 <__alt_data_end+0xf800bcc8>
1000c02c:	81002d36 	bltu	r16,r4,1000c0e4 <__divdf3+0x8f4>
1000c030:	24005626 	beq	r4,r16,1000c18c <__divdf3+0x99c>
1000c034:	2829883a 	mov	r20,r5
1000c038:	003f8006 	br	1000be3c <__alt_data_end+0xf800be3c>
1000c03c:	053fffc4 	movi	r20,-1
1000c040:	003f7f06 	br	1000be40 <__alt_data_end+0xf800be40>
1000c044:	200f883a 	mov	r7,r4
1000c048:	003f3c06 	br	1000bd3c <__alt_data_end+0xf800bd3c>
1000c04c:	1011883a 	mov	r8,r2
1000c050:	003f5506 	br	1000bda8 <__alt_data_end+0xf800bda8>
1000c054:	e027883a 	mov	r19,fp
1000c058:	003f7906 	br	1000be40 <__alt_data_end+0xf800be40>
1000c05c:	010007c4 	movi	r4,31
1000c060:	20c02816 	blt	r4,r3,1000c104 <__divdf3+0x914>
1000c064:	00800804 	movi	r2,32
1000c068:	10c5c83a 	sub	r2,r2,r3
1000c06c:	888a983a 	sll	r5,r17,r2
1000c070:	a0c8d83a 	srl	r4,r20,r3
1000c074:	a084983a 	sll	r2,r20,r2
1000c078:	88e2d83a 	srl	r17,r17,r3
1000c07c:	2906b03a 	or	r3,r5,r4
1000c080:	1004c03a 	cmpne	r2,r2,zero
1000c084:	1886b03a 	or	r3,r3,r2
1000c088:	188001cc 	andi	r2,r3,7
1000c08c:	10000726 	beq	r2,zero,1000c0ac <__divdf3+0x8bc>
1000c090:	188003cc 	andi	r2,r3,15
1000c094:	01000104 	movi	r4,4
1000c098:	11000426 	beq	r2,r4,1000c0ac <__divdf3+0x8bc>
1000c09c:	1805883a 	mov	r2,r3
1000c0a0:	10c00104 	addi	r3,r2,4
1000c0a4:	1885803a 	cmpltu	r2,r3,r2
1000c0a8:	88a3883a 	add	r17,r17,r2
1000c0ac:	8880202c 	andhi	r2,r17,128
1000c0b0:	10002926 	beq	r2,zero,1000c158 <__divdf3+0x968>
1000c0b4:	9900004c 	andi	r4,r19,1
1000c0b8:	00800044 	movi	r2,1
1000c0bc:	0021883a 	mov	r16,zero
1000c0c0:	002b883a 	mov	r21,zero
1000c0c4:	003e2906 	br	1000b96c <__alt_data_end+0xf800b96c>
1000c0c8:	d9800017 	ldw	r6,0(sp)
1000c0cc:	8c7fff84 	addi	r17,r17,-2
1000c0d0:	a9ab883a 	add	r21,r21,r6
1000c0d4:	a98b803a 	cmpltu	r5,r21,r6
1000c0d8:	2d8b883a 	add	r5,r5,r22
1000c0dc:	2a11883a 	add	r8,r5,r8
1000c0e0:	003ef806 	br	1000bcc4 <__alt_data_end+0xf800bcc4>
1000c0e4:	d9800017 	ldw	r6,0(sp)
1000c0e8:	318f883a 	add	r7,r6,r6
1000c0ec:	398b803a 	cmpltu	r5,r7,r6
1000c0f0:	2d8d883a 	add	r6,r5,r22
1000c0f4:	81a1883a 	add	r16,r16,r6
1000c0f8:	a17fff84 	addi	r5,r20,-2
1000c0fc:	d9c00015 	stw	r7,0(sp)
1000c100:	003f8806 	br	1000bf24 <__alt_data_end+0xf800bf24>
1000c104:	013ff844 	movi	r4,-31
1000c108:	2085c83a 	sub	r2,r4,r2
1000c10c:	8888d83a 	srl	r4,r17,r2
1000c110:	00800804 	movi	r2,32
1000c114:	18802126 	beq	r3,r2,1000c19c <__divdf3+0x9ac>
1000c118:	04001004 	movi	r16,64
1000c11c:	80c7c83a 	sub	r3,r16,r3
1000c120:	88e0983a 	sll	r16,r17,r3
1000c124:	8504b03a 	or	r2,r16,r20
1000c128:	1004c03a 	cmpne	r2,r2,zero
1000c12c:	2084b03a 	or	r2,r4,r2
1000c130:	144001cc 	andi	r17,r2,7
1000c134:	88000d1e 	bne	r17,zero,1000c16c <__divdf3+0x97c>
1000c138:	0021883a 	mov	r16,zero
1000c13c:	102ad0fa 	srli	r21,r2,3
1000c140:	9900004c 	andi	r4,r19,1
1000c144:	0005883a 	mov	r2,zero
1000c148:	ac6ab03a 	or	r21,r21,r17
1000c14c:	003e0706 	br	1000b96c <__alt_data_end+0xf800b96c>
1000c150:	1007883a 	mov	r3,r2
1000c154:	0023883a 	mov	r17,zero
1000c158:	8820927a 	slli	r16,r17,9
1000c15c:	1805883a 	mov	r2,r3
1000c160:	8822977a 	slli	r17,r17,29
1000c164:	8020d33a 	srli	r16,r16,12
1000c168:	003ff406 	br	1000c13c <__alt_data_end+0xf800c13c>
1000c16c:	10c003cc 	andi	r3,r2,15
1000c170:	01000104 	movi	r4,4
1000c174:	193ff626 	beq	r3,r4,1000c150 <__alt_data_end+0xf800c150>
1000c178:	0023883a 	mov	r17,zero
1000c17c:	003fc806 	br	1000c0a0 <__alt_data_end+0xf800c0a0>
1000c180:	a8bfd136 	bltu	r21,r2,1000c0c8 <__alt_data_end+0xf800c0c8>
1000c184:	2823883a 	mov	r17,r5
1000c188:	003fa606 	br	1000c024 <__alt_data_end+0xf800c024>
1000c18c:	d9800017 	ldw	r6,0(sp)
1000c190:	30bfd436 	bltu	r6,r2,1000c0e4 <__alt_data_end+0xf800c0e4>
1000c194:	2829883a 	mov	r20,r5
1000c198:	003f6406 	br	1000bf2c <__alt_data_end+0xf800bf2c>
1000c19c:	0021883a 	mov	r16,zero
1000c1a0:	003fe006 	br	1000c124 <__alt_data_end+0xf800c124>
1000c1a4:	00800434 	movhi	r2,16
1000c1a8:	8c000234 	orhi	r16,r17,8
1000c1ac:	10bfffc4 	addi	r2,r2,-1
1000c1b0:	e009883a 	mov	r4,fp
1000c1b4:	80a0703a 	and	r16,r16,r2
1000c1b8:	a02b883a 	mov	r21,r20
1000c1bc:	003e4e06 	br	1000baf8 <__alt_data_end+0xf800baf8>

1000c1c0 <__eqdf2>:
1000c1c0:	2804d53a 	srli	r2,r5,20
1000c1c4:	3806d53a 	srli	r3,r7,20
1000c1c8:	02000434 	movhi	r8,16
1000c1cc:	423fffc4 	addi	r8,r8,-1
1000c1d0:	1081ffcc 	andi	r2,r2,2047
1000c1d4:	0281ffc4 	movi	r10,2047
1000c1d8:	2a12703a 	and	r9,r5,r8
1000c1dc:	18c1ffcc 	andi	r3,r3,2047
1000c1e0:	3a10703a 	and	r8,r7,r8
1000c1e4:	280ad7fa 	srli	r5,r5,31
1000c1e8:	380ed7fa 	srli	r7,r7,31
1000c1ec:	12801026 	beq	r2,r10,1000c230 <__eqdf2+0x70>
1000c1f0:	0281ffc4 	movi	r10,2047
1000c1f4:	1a800a26 	beq	r3,r10,1000c220 <__eqdf2+0x60>
1000c1f8:	10c00226 	beq	r2,r3,1000c204 <__eqdf2+0x44>
1000c1fc:	00800044 	movi	r2,1
1000c200:	f800283a 	ret
1000c204:	4a3ffd1e 	bne	r9,r8,1000c1fc <__alt_data_end+0xf800c1fc>
1000c208:	21bffc1e 	bne	r4,r6,1000c1fc <__alt_data_end+0xf800c1fc>
1000c20c:	29c00c26 	beq	r5,r7,1000c240 <__eqdf2+0x80>
1000c210:	103ffa1e 	bne	r2,zero,1000c1fc <__alt_data_end+0xf800c1fc>
1000c214:	2244b03a 	or	r2,r4,r9
1000c218:	1004c03a 	cmpne	r2,r2,zero
1000c21c:	f800283a 	ret
1000c220:	3214b03a 	or	r10,r6,r8
1000c224:	503ff426 	beq	r10,zero,1000c1f8 <__alt_data_end+0xf800c1f8>
1000c228:	00800044 	movi	r2,1
1000c22c:	f800283a 	ret
1000c230:	2254b03a 	or	r10,r4,r9
1000c234:	503fee26 	beq	r10,zero,1000c1f0 <__alt_data_end+0xf800c1f0>
1000c238:	00800044 	movi	r2,1
1000c23c:	f800283a 	ret
1000c240:	0005883a 	mov	r2,zero
1000c244:	f800283a 	ret

1000c248 <__gedf2>:
1000c248:	2804d53a 	srli	r2,r5,20
1000c24c:	3806d53a 	srli	r3,r7,20
1000c250:	02000434 	movhi	r8,16
1000c254:	423fffc4 	addi	r8,r8,-1
1000c258:	1081ffcc 	andi	r2,r2,2047
1000c25c:	0241ffc4 	movi	r9,2047
1000c260:	2a14703a 	and	r10,r5,r8
1000c264:	18c1ffcc 	andi	r3,r3,2047
1000c268:	3a10703a 	and	r8,r7,r8
1000c26c:	280ad7fa 	srli	r5,r5,31
1000c270:	380ed7fa 	srli	r7,r7,31
1000c274:	12401d26 	beq	r2,r9,1000c2ec <__gedf2+0xa4>
1000c278:	0241ffc4 	movi	r9,2047
1000c27c:	1a401226 	beq	r3,r9,1000c2c8 <__gedf2+0x80>
1000c280:	1000081e 	bne	r2,zero,1000c2a4 <__gedf2+0x5c>
1000c284:	2296b03a 	or	r11,r4,r10
1000c288:	5813003a 	cmpeq	r9,r11,zero
1000c28c:	1800091e 	bne	r3,zero,1000c2b4 <__gedf2+0x6c>
1000c290:	3218b03a 	or	r12,r6,r8
1000c294:	6000071e 	bne	r12,zero,1000c2b4 <__gedf2+0x6c>
1000c298:	0005883a 	mov	r2,zero
1000c29c:	5800101e 	bne	r11,zero,1000c2e0 <__gedf2+0x98>
1000c2a0:	f800283a 	ret
1000c2a4:	18000c1e 	bne	r3,zero,1000c2d8 <__gedf2+0x90>
1000c2a8:	3212b03a 	or	r9,r6,r8
1000c2ac:	48000c26 	beq	r9,zero,1000c2e0 <__gedf2+0x98>
1000c2b0:	0013883a 	mov	r9,zero
1000c2b4:	39c03fcc 	andi	r7,r7,255
1000c2b8:	48000826 	beq	r9,zero,1000c2dc <__gedf2+0x94>
1000c2bc:	38000926 	beq	r7,zero,1000c2e4 <__gedf2+0x9c>
1000c2c0:	00800044 	movi	r2,1
1000c2c4:	f800283a 	ret
1000c2c8:	3212b03a 	or	r9,r6,r8
1000c2cc:	483fec26 	beq	r9,zero,1000c280 <__alt_data_end+0xf800c280>
1000c2d0:	00bfff84 	movi	r2,-2
1000c2d4:	f800283a 	ret
1000c2d8:	39c03fcc 	andi	r7,r7,255
1000c2dc:	29c00626 	beq	r5,r7,1000c2f8 <__gedf2+0xb0>
1000c2e0:	283ff726 	beq	r5,zero,1000c2c0 <__alt_data_end+0xf800c2c0>
1000c2e4:	00bfffc4 	movi	r2,-1
1000c2e8:	f800283a 	ret
1000c2ec:	2292b03a 	or	r9,r4,r10
1000c2f0:	483fe126 	beq	r9,zero,1000c278 <__alt_data_end+0xf800c278>
1000c2f4:	003ff606 	br	1000c2d0 <__alt_data_end+0xf800c2d0>
1000c2f8:	18bff916 	blt	r3,r2,1000c2e0 <__alt_data_end+0xf800c2e0>
1000c2fc:	10c00316 	blt	r2,r3,1000c30c <__gedf2+0xc4>
1000c300:	42bff736 	bltu	r8,r10,1000c2e0 <__alt_data_end+0xf800c2e0>
1000c304:	52000326 	beq	r10,r8,1000c314 <__gedf2+0xcc>
1000c308:	5200042e 	bgeu	r10,r8,1000c31c <__gedf2+0xd4>
1000c30c:	283fec1e 	bne	r5,zero,1000c2c0 <__alt_data_end+0xf800c2c0>
1000c310:	003ff406 	br	1000c2e4 <__alt_data_end+0xf800c2e4>
1000c314:	313ff236 	bltu	r6,r4,1000c2e0 <__alt_data_end+0xf800c2e0>
1000c318:	21bffc36 	bltu	r4,r6,1000c30c <__alt_data_end+0xf800c30c>
1000c31c:	0005883a 	mov	r2,zero
1000c320:	f800283a 	ret

1000c324 <__ledf2>:
1000c324:	2804d53a 	srli	r2,r5,20
1000c328:	3810d53a 	srli	r8,r7,20
1000c32c:	00c00434 	movhi	r3,16
1000c330:	18ffffc4 	addi	r3,r3,-1
1000c334:	1081ffcc 	andi	r2,r2,2047
1000c338:	0241ffc4 	movi	r9,2047
1000c33c:	28d4703a 	and	r10,r5,r3
1000c340:	4201ffcc 	andi	r8,r8,2047
1000c344:	38c6703a 	and	r3,r7,r3
1000c348:	280ad7fa 	srli	r5,r5,31
1000c34c:	380ed7fa 	srli	r7,r7,31
1000c350:	12401f26 	beq	r2,r9,1000c3d0 <__ledf2+0xac>
1000c354:	0241ffc4 	movi	r9,2047
1000c358:	42401426 	beq	r8,r9,1000c3ac <__ledf2+0x88>
1000c35c:	1000091e 	bne	r2,zero,1000c384 <__ledf2+0x60>
1000c360:	2296b03a 	or	r11,r4,r10
1000c364:	5813003a 	cmpeq	r9,r11,zero
1000c368:	29403fcc 	andi	r5,r5,255
1000c36c:	40000a1e 	bne	r8,zero,1000c398 <__ledf2+0x74>
1000c370:	30d8b03a 	or	r12,r6,r3
1000c374:	6000081e 	bne	r12,zero,1000c398 <__ledf2+0x74>
1000c378:	0005883a 	mov	r2,zero
1000c37c:	5800111e 	bne	r11,zero,1000c3c4 <__ledf2+0xa0>
1000c380:	f800283a 	ret
1000c384:	29403fcc 	andi	r5,r5,255
1000c388:	40000c1e 	bne	r8,zero,1000c3bc <__ledf2+0x98>
1000c38c:	30d2b03a 	or	r9,r6,r3
1000c390:	48000c26 	beq	r9,zero,1000c3c4 <__ledf2+0xa0>
1000c394:	0013883a 	mov	r9,zero
1000c398:	39c03fcc 	andi	r7,r7,255
1000c39c:	48000826 	beq	r9,zero,1000c3c0 <__ledf2+0x9c>
1000c3a0:	38001126 	beq	r7,zero,1000c3e8 <__ledf2+0xc4>
1000c3a4:	00800044 	movi	r2,1
1000c3a8:	f800283a 	ret
1000c3ac:	30d2b03a 	or	r9,r6,r3
1000c3b0:	483fea26 	beq	r9,zero,1000c35c <__alt_data_end+0xf800c35c>
1000c3b4:	00800084 	movi	r2,2
1000c3b8:	f800283a 	ret
1000c3bc:	39c03fcc 	andi	r7,r7,255
1000c3c0:	39400726 	beq	r7,r5,1000c3e0 <__ledf2+0xbc>
1000c3c4:	2800081e 	bne	r5,zero,1000c3e8 <__ledf2+0xc4>
1000c3c8:	00800044 	movi	r2,1
1000c3cc:	f800283a 	ret
1000c3d0:	2292b03a 	or	r9,r4,r10
1000c3d4:	483fdf26 	beq	r9,zero,1000c354 <__alt_data_end+0xf800c354>
1000c3d8:	00800084 	movi	r2,2
1000c3dc:	f800283a 	ret
1000c3e0:	4080030e 	bge	r8,r2,1000c3f0 <__ledf2+0xcc>
1000c3e4:	383fef26 	beq	r7,zero,1000c3a4 <__alt_data_end+0xf800c3a4>
1000c3e8:	00bfffc4 	movi	r2,-1
1000c3ec:	f800283a 	ret
1000c3f0:	123feb16 	blt	r2,r8,1000c3a0 <__alt_data_end+0xf800c3a0>
1000c3f4:	1abff336 	bltu	r3,r10,1000c3c4 <__alt_data_end+0xf800c3c4>
1000c3f8:	50c00326 	beq	r10,r3,1000c408 <__ledf2+0xe4>
1000c3fc:	50c0042e 	bgeu	r10,r3,1000c410 <__ledf2+0xec>
1000c400:	283fe81e 	bne	r5,zero,1000c3a4 <__alt_data_end+0xf800c3a4>
1000c404:	003ff806 	br	1000c3e8 <__alt_data_end+0xf800c3e8>
1000c408:	313fee36 	bltu	r6,r4,1000c3c4 <__alt_data_end+0xf800c3c4>
1000c40c:	21bffc36 	bltu	r4,r6,1000c400 <__alt_data_end+0xf800c400>
1000c410:	0005883a 	mov	r2,zero
1000c414:	f800283a 	ret

1000c418 <__muldf3>:
1000c418:	deffee04 	addi	sp,sp,-72
1000c41c:	dd000c15 	stw	r20,48(sp)
1000c420:	2828d53a 	srli	r20,r5,20
1000c424:	ddc00f15 	stw	r23,60(sp)
1000c428:	282ed7fa 	srli	r23,r5,31
1000c42c:	dc000815 	stw	r16,32(sp)
1000c430:	04000434 	movhi	r16,16
1000c434:	dcc00b15 	stw	r19,44(sp)
1000c438:	843fffc4 	addi	r16,r16,-1
1000c43c:	dfc01115 	stw	ra,68(sp)
1000c440:	df001015 	stw	fp,64(sp)
1000c444:	dd800e15 	stw	r22,56(sp)
1000c448:	dd400d15 	stw	r21,52(sp)
1000c44c:	dc800a15 	stw	r18,40(sp)
1000c450:	dc400915 	stw	r17,36(sp)
1000c454:	a501ffcc 	andi	r20,r20,2047
1000c458:	2c20703a 	and	r16,r5,r16
1000c45c:	b827883a 	mov	r19,r23
1000c460:	ba403fcc 	andi	r9,r23,255
1000c464:	a0006026 	beq	r20,zero,1000c5e8 <__muldf3+0x1d0>
1000c468:	0081ffc4 	movi	r2,2047
1000c46c:	202d883a 	mov	r22,r4
1000c470:	a0803626 	beq	r20,r2,1000c54c <__muldf3+0x134>
1000c474:	84000434 	orhi	r16,r16,16
1000c478:	200ad77a 	srli	r5,r4,29
1000c47c:	800490fa 	slli	r2,r16,3
1000c480:	202c90fa 	slli	r22,r4,3
1000c484:	a53f0044 	addi	r20,r20,-1023
1000c488:	28a0b03a 	or	r16,r5,r2
1000c48c:	002b883a 	mov	r21,zero
1000c490:	000b883a 	mov	r5,zero
1000c494:	3804d53a 	srli	r2,r7,20
1000c498:	3838d7fa 	srli	fp,r7,31
1000c49c:	04400434 	movhi	r17,16
1000c4a0:	8c7fffc4 	addi	r17,r17,-1
1000c4a4:	1081ffcc 	andi	r2,r2,2047
1000c4a8:	3025883a 	mov	r18,r6
1000c4ac:	3c62703a 	and	r17,r7,r17
1000c4b0:	e2803fcc 	andi	r10,fp,255
1000c4b4:	10006d26 	beq	r2,zero,1000c66c <__muldf3+0x254>
1000c4b8:	00c1ffc4 	movi	r3,2047
1000c4bc:	10c06526 	beq	r2,r3,1000c654 <__muldf3+0x23c>
1000c4c0:	8c400434 	orhi	r17,r17,16
1000c4c4:	300ed77a 	srli	r7,r6,29
1000c4c8:	880690fa 	slli	r3,r17,3
1000c4cc:	302490fa 	slli	r18,r6,3
1000c4d0:	10bf0044 	addi	r2,r2,-1023
1000c4d4:	38e2b03a 	or	r17,r7,r3
1000c4d8:	000f883a 	mov	r7,zero
1000c4dc:	a087883a 	add	r3,r20,r2
1000c4e0:	010003c4 	movi	r4,15
1000c4e4:	3d44b03a 	or	r2,r7,r21
1000c4e8:	e5ccf03a 	xor	r6,fp,r23
1000c4ec:	1a000044 	addi	r8,r3,1
1000c4f0:	20809b36 	bltu	r4,r2,1000c760 <__muldf3+0x348>
1000c4f4:	100490ba 	slli	r2,r2,2
1000c4f8:	01040074 	movhi	r4,4097
1000c4fc:	21314304 	addi	r4,r4,-15092
1000c500:	1105883a 	add	r2,r2,r4
1000c504:	10800017 	ldw	r2,0(r2)
1000c508:	1000683a 	jmp	r2
1000c50c:	1000c760 	cmpeqi	zero,r2,797
1000c510:	1000c56c 	andhi	zero,r2,789
1000c514:	1000c56c 	andhi	zero,r2,789
1000c518:	1000c568 	cmpgeui	zero,r2,789
1000c51c:	1000c73c 	xorhi	zero,r2,796
1000c520:	1000c73c 	xorhi	zero,r2,796
1000c524:	1000c724 	muli	zero,r2,796
1000c528:	1000c568 	cmpgeui	zero,r2,789
1000c52c:	1000c73c 	xorhi	zero,r2,796
1000c530:	1000c724 	muli	zero,r2,796
1000c534:	1000c73c 	xorhi	zero,r2,796
1000c538:	1000c568 	cmpgeui	zero,r2,789
1000c53c:	1000c74c 	andi	zero,r2,797
1000c540:	1000c74c 	andi	zero,r2,797
1000c544:	1000c74c 	andi	zero,r2,797
1000c548:	1000caac 	andhi	zero,r2,810
1000c54c:	2404b03a 	or	r2,r4,r16
1000c550:	1000711e 	bne	r2,zero,1000c718 <__muldf3+0x300>
1000c554:	05400204 	movi	r21,8
1000c558:	0021883a 	mov	r16,zero
1000c55c:	002d883a 	mov	r22,zero
1000c560:	01400084 	movi	r5,2
1000c564:	003fcb06 	br	1000c494 <__alt_data_end+0xf800c494>
1000c568:	500d883a 	mov	r6,r10
1000c56c:	00800084 	movi	r2,2
1000c570:	38805926 	beq	r7,r2,1000c6d8 <__muldf3+0x2c0>
1000c574:	008000c4 	movi	r2,3
1000c578:	3881bb26 	beq	r7,r2,1000cc68 <__muldf3+0x850>
1000c57c:	00800044 	movi	r2,1
1000c580:	3881961e 	bne	r7,r2,1000cbdc <__muldf3+0x7c4>
1000c584:	3027883a 	mov	r19,r6
1000c588:	0005883a 	mov	r2,zero
1000c58c:	0021883a 	mov	r16,zero
1000c590:	002d883a 	mov	r22,zero
1000c594:	1004953a 	slli	r2,r2,20
1000c598:	98c03fcc 	andi	r3,r19,255
1000c59c:	04400434 	movhi	r17,16
1000c5a0:	8c7fffc4 	addi	r17,r17,-1
1000c5a4:	180697fa 	slli	r3,r3,31
1000c5a8:	8460703a 	and	r16,r16,r17
1000c5ac:	80a0b03a 	or	r16,r16,r2
1000c5b0:	80c6b03a 	or	r3,r16,r3
1000c5b4:	b005883a 	mov	r2,r22
1000c5b8:	dfc01117 	ldw	ra,68(sp)
1000c5bc:	df001017 	ldw	fp,64(sp)
1000c5c0:	ddc00f17 	ldw	r23,60(sp)
1000c5c4:	dd800e17 	ldw	r22,56(sp)
1000c5c8:	dd400d17 	ldw	r21,52(sp)
1000c5cc:	dd000c17 	ldw	r20,48(sp)
1000c5d0:	dcc00b17 	ldw	r19,44(sp)
1000c5d4:	dc800a17 	ldw	r18,40(sp)
1000c5d8:	dc400917 	ldw	r17,36(sp)
1000c5dc:	dc000817 	ldw	r16,32(sp)
1000c5e0:	dec01204 	addi	sp,sp,72
1000c5e4:	f800283a 	ret
1000c5e8:	2404b03a 	or	r2,r4,r16
1000c5ec:	202b883a 	mov	r21,r4
1000c5f0:	10004426 	beq	r2,zero,1000c704 <__muldf3+0x2ec>
1000c5f4:	80015126 	beq	r16,zero,1000cb3c <__muldf3+0x724>
1000c5f8:	8009883a 	mov	r4,r16
1000c5fc:	d9800715 	stw	r6,28(sp)
1000c600:	d9c00215 	stw	r7,8(sp)
1000c604:	da400415 	stw	r9,16(sp)
1000c608:	000d7840 	call	1000d784 <__clzsi2>
1000c60c:	d9800717 	ldw	r6,28(sp)
1000c610:	d9c00217 	ldw	r7,8(sp)
1000c614:	da400417 	ldw	r9,16(sp)
1000c618:	113ffd44 	addi	r4,r2,-11
1000c61c:	00c00704 	movi	r3,28
1000c620:	19014216 	blt	r3,r4,1000cb2c <__muldf3+0x714>
1000c624:	00c00744 	movi	r3,29
1000c628:	15bffe04 	addi	r22,r2,-8
1000c62c:	1907c83a 	sub	r3,r3,r4
1000c630:	85a0983a 	sll	r16,r16,r22
1000c634:	a8c6d83a 	srl	r3,r21,r3
1000c638:	adac983a 	sll	r22,r21,r22
1000c63c:	1c20b03a 	or	r16,r3,r16
1000c640:	1080fcc4 	addi	r2,r2,1011
1000c644:	00a9c83a 	sub	r20,zero,r2
1000c648:	002b883a 	mov	r21,zero
1000c64c:	000b883a 	mov	r5,zero
1000c650:	003f9006 	br	1000c494 <__alt_data_end+0xf800c494>
1000c654:	3446b03a 	or	r3,r6,r17
1000c658:	1800281e 	bne	r3,zero,1000c6fc <__muldf3+0x2e4>
1000c65c:	0023883a 	mov	r17,zero
1000c660:	0025883a 	mov	r18,zero
1000c664:	01c00084 	movi	r7,2
1000c668:	003f9c06 	br	1000c4dc <__alt_data_end+0xf800c4dc>
1000c66c:	3446b03a 	or	r3,r6,r17
1000c670:	18001e26 	beq	r3,zero,1000c6ec <__muldf3+0x2d4>
1000c674:	88012126 	beq	r17,zero,1000cafc <__muldf3+0x6e4>
1000c678:	8809883a 	mov	r4,r17
1000c67c:	d9400215 	stw	r5,8(sp)
1000c680:	d9800715 	stw	r6,28(sp)
1000c684:	da400415 	stw	r9,16(sp)
1000c688:	da800315 	stw	r10,12(sp)
1000c68c:	000d7840 	call	1000d784 <__clzsi2>
1000c690:	d9400217 	ldw	r5,8(sp)
1000c694:	d9800717 	ldw	r6,28(sp)
1000c698:	da400417 	ldw	r9,16(sp)
1000c69c:	da800317 	ldw	r10,12(sp)
1000c6a0:	113ffd44 	addi	r4,r2,-11
1000c6a4:	00c00704 	movi	r3,28
1000c6a8:	19011016 	blt	r3,r4,1000caec <__muldf3+0x6d4>
1000c6ac:	00c00744 	movi	r3,29
1000c6b0:	14bffe04 	addi	r18,r2,-8
1000c6b4:	1907c83a 	sub	r3,r3,r4
1000c6b8:	8ca2983a 	sll	r17,r17,r18
1000c6bc:	30c6d83a 	srl	r3,r6,r3
1000c6c0:	34a4983a 	sll	r18,r6,r18
1000c6c4:	1c62b03a 	or	r17,r3,r17
1000c6c8:	1080fcc4 	addi	r2,r2,1011
1000c6cc:	0085c83a 	sub	r2,zero,r2
1000c6d0:	000f883a 	mov	r7,zero
1000c6d4:	003f8106 	br	1000c4dc <__alt_data_end+0xf800c4dc>
1000c6d8:	3027883a 	mov	r19,r6
1000c6dc:	0081ffc4 	movi	r2,2047
1000c6e0:	0021883a 	mov	r16,zero
1000c6e4:	002d883a 	mov	r22,zero
1000c6e8:	003faa06 	br	1000c594 <__alt_data_end+0xf800c594>
1000c6ec:	0023883a 	mov	r17,zero
1000c6f0:	0025883a 	mov	r18,zero
1000c6f4:	01c00044 	movi	r7,1
1000c6f8:	003f7806 	br	1000c4dc <__alt_data_end+0xf800c4dc>
1000c6fc:	01c000c4 	movi	r7,3
1000c700:	003f7606 	br	1000c4dc <__alt_data_end+0xf800c4dc>
1000c704:	05400104 	movi	r21,4
1000c708:	0021883a 	mov	r16,zero
1000c70c:	002d883a 	mov	r22,zero
1000c710:	01400044 	movi	r5,1
1000c714:	003f5f06 	br	1000c494 <__alt_data_end+0xf800c494>
1000c718:	05400304 	movi	r21,12
1000c71c:	014000c4 	movi	r5,3
1000c720:	003f5c06 	br	1000c494 <__alt_data_end+0xf800c494>
1000c724:	04000434 	movhi	r16,16
1000c728:	0027883a 	mov	r19,zero
1000c72c:	843fffc4 	addi	r16,r16,-1
1000c730:	05bfffc4 	movi	r22,-1
1000c734:	0081ffc4 	movi	r2,2047
1000c738:	003f9606 	br	1000c594 <__alt_data_end+0xf800c594>
1000c73c:	8023883a 	mov	r17,r16
1000c740:	b025883a 	mov	r18,r22
1000c744:	280f883a 	mov	r7,r5
1000c748:	003f8806 	br	1000c56c <__alt_data_end+0xf800c56c>
1000c74c:	8023883a 	mov	r17,r16
1000c750:	b025883a 	mov	r18,r22
1000c754:	480d883a 	mov	r6,r9
1000c758:	280f883a 	mov	r7,r5
1000c75c:	003f8306 	br	1000c56c <__alt_data_end+0xf800c56c>
1000c760:	b026d43a 	srli	r19,r22,16
1000c764:	902ed43a 	srli	r23,r18,16
1000c768:	b5bfffcc 	andi	r22,r22,65535
1000c76c:	94bfffcc 	andi	r18,r18,65535
1000c770:	b00b883a 	mov	r5,r22
1000c774:	9009883a 	mov	r4,r18
1000c778:	d8c00515 	stw	r3,20(sp)
1000c77c:	d9800715 	stw	r6,28(sp)
1000c780:	da000615 	stw	r8,24(sp)
1000c784:	000097c0 	call	1000097c <__mulsi3>
1000c788:	980b883a 	mov	r5,r19
1000c78c:	9009883a 	mov	r4,r18
1000c790:	1029883a 	mov	r20,r2
1000c794:	000097c0 	call	1000097c <__mulsi3>
1000c798:	b80b883a 	mov	r5,r23
1000c79c:	9809883a 	mov	r4,r19
1000c7a0:	102b883a 	mov	r21,r2
1000c7a4:	000097c0 	call	1000097c <__mulsi3>
1000c7a8:	b809883a 	mov	r4,r23
1000c7ac:	b00b883a 	mov	r5,r22
1000c7b0:	1039883a 	mov	fp,r2
1000c7b4:	000097c0 	call	1000097c <__mulsi3>
1000c7b8:	a008d43a 	srli	r4,r20,16
1000c7bc:	1545883a 	add	r2,r2,r21
1000c7c0:	d8c00517 	ldw	r3,20(sp)
1000c7c4:	2085883a 	add	r2,r4,r2
1000c7c8:	d9800717 	ldw	r6,28(sp)
1000c7cc:	da000617 	ldw	r8,24(sp)
1000c7d0:	1540022e 	bgeu	r2,r21,1000c7dc <__muldf3+0x3c4>
1000c7d4:	01000074 	movhi	r4,1
1000c7d8:	e139883a 	add	fp,fp,r4
1000c7dc:	100e943a 	slli	r7,r2,16
1000c7e0:	1004d43a 	srli	r2,r2,16
1000c7e4:	882ad43a 	srli	r21,r17,16
1000c7e8:	a53fffcc 	andi	r20,r20,65535
1000c7ec:	8c7fffcc 	andi	r17,r17,65535
1000c7f0:	3d29883a 	add	r20,r7,r20
1000c7f4:	b00b883a 	mov	r5,r22
1000c7f8:	8809883a 	mov	r4,r17
1000c7fc:	d8c00515 	stw	r3,20(sp)
1000c800:	d9800715 	stw	r6,28(sp)
1000c804:	da000615 	stw	r8,24(sp)
1000c808:	dd000115 	stw	r20,4(sp)
1000c80c:	d8800015 	stw	r2,0(sp)
1000c810:	000097c0 	call	1000097c <__mulsi3>
1000c814:	980b883a 	mov	r5,r19
1000c818:	8809883a 	mov	r4,r17
1000c81c:	d8800215 	stw	r2,8(sp)
1000c820:	000097c0 	call	1000097c <__mulsi3>
1000c824:	9809883a 	mov	r4,r19
1000c828:	a80b883a 	mov	r5,r21
1000c82c:	1029883a 	mov	r20,r2
1000c830:	000097c0 	call	1000097c <__mulsi3>
1000c834:	b00b883a 	mov	r5,r22
1000c838:	a809883a 	mov	r4,r21
1000c83c:	d8800415 	stw	r2,16(sp)
1000c840:	000097c0 	call	1000097c <__mulsi3>
1000c844:	d9c00217 	ldw	r7,8(sp)
1000c848:	1505883a 	add	r2,r2,r20
1000c84c:	d8c00517 	ldw	r3,20(sp)
1000c850:	3826d43a 	srli	r19,r7,16
1000c854:	d9800717 	ldw	r6,28(sp)
1000c858:	da000617 	ldw	r8,24(sp)
1000c85c:	9885883a 	add	r2,r19,r2
1000c860:	da400417 	ldw	r9,16(sp)
1000c864:	1500022e 	bgeu	r2,r20,1000c870 <__muldf3+0x458>
1000c868:	01000074 	movhi	r4,1
1000c86c:	4913883a 	add	r9,r9,r4
1000c870:	1028d43a 	srli	r20,r2,16
1000c874:	1004943a 	slli	r2,r2,16
1000c878:	802cd43a 	srli	r22,r16,16
1000c87c:	843fffcc 	andi	r16,r16,65535
1000c880:	3cffffcc 	andi	r19,r7,65535
1000c884:	9009883a 	mov	r4,r18
1000c888:	800b883a 	mov	r5,r16
1000c88c:	a269883a 	add	r20,r20,r9
1000c890:	d8c00515 	stw	r3,20(sp)
1000c894:	d9800715 	stw	r6,28(sp)
1000c898:	da000615 	stw	r8,24(sp)
1000c89c:	14e7883a 	add	r19,r2,r19
1000c8a0:	000097c0 	call	1000097c <__mulsi3>
1000c8a4:	9009883a 	mov	r4,r18
1000c8a8:	b00b883a 	mov	r5,r22
1000c8ac:	d8800315 	stw	r2,12(sp)
1000c8b0:	000097c0 	call	1000097c <__mulsi3>
1000c8b4:	b809883a 	mov	r4,r23
1000c8b8:	b00b883a 	mov	r5,r22
1000c8bc:	d8800215 	stw	r2,8(sp)
1000c8c0:	000097c0 	call	1000097c <__mulsi3>
1000c8c4:	b80b883a 	mov	r5,r23
1000c8c8:	8009883a 	mov	r4,r16
1000c8cc:	d8800415 	stw	r2,16(sp)
1000c8d0:	000097c0 	call	1000097c <__mulsi3>
1000c8d4:	da800317 	ldw	r10,12(sp)
1000c8d8:	d9c00217 	ldw	r7,8(sp)
1000c8dc:	d9000017 	ldw	r4,0(sp)
1000c8e0:	502ed43a 	srli	r23,r10,16
1000c8e4:	11c5883a 	add	r2,r2,r7
1000c8e8:	24e5883a 	add	r18,r4,r19
1000c8ec:	b885883a 	add	r2,r23,r2
1000c8f0:	d8c00517 	ldw	r3,20(sp)
1000c8f4:	d9800717 	ldw	r6,28(sp)
1000c8f8:	da000617 	ldw	r8,24(sp)
1000c8fc:	da400417 	ldw	r9,16(sp)
1000c900:	11c0022e 	bgeu	r2,r7,1000c90c <__muldf3+0x4f4>
1000c904:	01000074 	movhi	r4,1
1000c908:	4913883a 	add	r9,r9,r4
1000c90c:	100ed43a 	srli	r7,r2,16
1000c910:	1004943a 	slli	r2,r2,16
1000c914:	55ffffcc 	andi	r23,r10,65535
1000c918:	3a53883a 	add	r9,r7,r9
1000c91c:	8809883a 	mov	r4,r17
1000c920:	800b883a 	mov	r5,r16
1000c924:	d8c00515 	stw	r3,20(sp)
1000c928:	d9800715 	stw	r6,28(sp)
1000c92c:	da000615 	stw	r8,24(sp)
1000c930:	da400415 	stw	r9,16(sp)
1000c934:	15ef883a 	add	r23,r2,r23
1000c938:	000097c0 	call	1000097c <__mulsi3>
1000c93c:	8809883a 	mov	r4,r17
1000c940:	b00b883a 	mov	r5,r22
1000c944:	d8800215 	stw	r2,8(sp)
1000c948:	000097c0 	call	1000097c <__mulsi3>
1000c94c:	b00b883a 	mov	r5,r22
1000c950:	a809883a 	mov	r4,r21
1000c954:	d8800315 	stw	r2,12(sp)
1000c958:	000097c0 	call	1000097c <__mulsi3>
1000c95c:	8009883a 	mov	r4,r16
1000c960:	a80b883a 	mov	r5,r21
1000c964:	1023883a 	mov	r17,r2
1000c968:	000097c0 	call	1000097c <__mulsi3>
1000c96c:	d9c00217 	ldw	r7,8(sp)
1000c970:	da800317 	ldw	r10,12(sp)
1000c974:	d8c00517 	ldw	r3,20(sp)
1000c978:	3808d43a 	srli	r4,r7,16
1000c97c:	1285883a 	add	r2,r2,r10
1000c980:	d9800717 	ldw	r6,28(sp)
1000c984:	2085883a 	add	r2,r4,r2
1000c988:	da000617 	ldw	r8,24(sp)
1000c98c:	da400417 	ldw	r9,16(sp)
1000c990:	1280022e 	bgeu	r2,r10,1000c99c <__muldf3+0x584>
1000c994:	01000074 	movhi	r4,1
1000c998:	8923883a 	add	r17,r17,r4
1000c99c:	1008943a 	slli	r4,r2,16
1000c9a0:	39ffffcc 	andi	r7,r7,65535
1000c9a4:	e4b9883a 	add	fp,fp,r18
1000c9a8:	21cf883a 	add	r7,r4,r7
1000c9ac:	e4e7803a 	cmpltu	r19,fp,r19
1000c9b0:	3d0f883a 	add	r7,r7,r20
1000c9b4:	bf39883a 	add	fp,r23,fp
1000c9b8:	99c9883a 	add	r4,r19,r7
1000c9bc:	e5ef803a 	cmpltu	r23,fp,r23
1000c9c0:	490b883a 	add	r5,r9,r4
1000c9c4:	1004d43a 	srli	r2,r2,16
1000c9c8:	b965883a 	add	r18,r23,r5
1000c9cc:	24c9803a 	cmpltu	r4,r4,r19
1000c9d0:	3d29803a 	cmpltu	r20,r7,r20
1000c9d4:	a128b03a 	or	r20,r20,r4
1000c9d8:	95ef803a 	cmpltu	r23,r18,r23
1000c9dc:	2a53803a 	cmpltu	r9,r5,r9
1000c9e0:	a0a9883a 	add	r20,r20,r2
1000c9e4:	4deeb03a 	or	r23,r9,r23
1000c9e8:	a5ef883a 	add	r23,r20,r23
1000c9ec:	bc63883a 	add	r17,r23,r17
1000c9f0:	e004927a 	slli	r2,fp,9
1000c9f4:	d9000117 	ldw	r4,4(sp)
1000c9f8:	882e927a 	slli	r23,r17,9
1000c9fc:	9022d5fa 	srli	r17,r18,23
1000ca00:	e038d5fa 	srli	fp,fp,23
1000ca04:	1104b03a 	or	r2,r2,r4
1000ca08:	9024927a 	slli	r18,r18,9
1000ca0c:	1004c03a 	cmpne	r2,r2,zero
1000ca10:	bc62b03a 	or	r17,r23,r17
1000ca14:	1738b03a 	or	fp,r2,fp
1000ca18:	8880402c 	andhi	r2,r17,256
1000ca1c:	e4a4b03a 	or	r18,fp,r18
1000ca20:	10000726 	beq	r2,zero,1000ca40 <__muldf3+0x628>
1000ca24:	9006d07a 	srli	r3,r18,1
1000ca28:	880497fa 	slli	r2,r17,31
1000ca2c:	9480004c 	andi	r18,r18,1
1000ca30:	8822d07a 	srli	r17,r17,1
1000ca34:	1ca4b03a 	or	r18,r3,r18
1000ca38:	14a4b03a 	or	r18,r2,r18
1000ca3c:	4007883a 	mov	r3,r8
1000ca40:	1880ffc4 	addi	r2,r3,1023
1000ca44:	0080460e 	bge	zero,r2,1000cb60 <__muldf3+0x748>
1000ca48:	910001cc 	andi	r4,r18,7
1000ca4c:	20000726 	beq	r4,zero,1000ca6c <__muldf3+0x654>
1000ca50:	910003cc 	andi	r4,r18,15
1000ca54:	01400104 	movi	r5,4
1000ca58:	21400426 	beq	r4,r5,1000ca6c <__muldf3+0x654>
1000ca5c:	9149883a 	add	r4,r18,r5
1000ca60:	24a5803a 	cmpltu	r18,r4,r18
1000ca64:	8ca3883a 	add	r17,r17,r18
1000ca68:	2025883a 	mov	r18,r4
1000ca6c:	8900402c 	andhi	r4,r17,256
1000ca70:	20000426 	beq	r4,zero,1000ca84 <__muldf3+0x66c>
1000ca74:	18810004 	addi	r2,r3,1024
1000ca78:	00ffc034 	movhi	r3,65280
1000ca7c:	18ffffc4 	addi	r3,r3,-1
1000ca80:	88e2703a 	and	r17,r17,r3
1000ca84:	00c1ff84 	movi	r3,2046
1000ca88:	18bf1316 	blt	r3,r2,1000c6d8 <__alt_data_end+0xf800c6d8>
1000ca8c:	882c977a 	slli	r22,r17,29
1000ca90:	9024d0fa 	srli	r18,r18,3
1000ca94:	8822927a 	slli	r17,r17,9
1000ca98:	1081ffcc 	andi	r2,r2,2047
1000ca9c:	b4acb03a 	or	r22,r22,r18
1000caa0:	8820d33a 	srli	r16,r17,12
1000caa4:	3027883a 	mov	r19,r6
1000caa8:	003eba06 	br	1000c594 <__alt_data_end+0xf800c594>
1000caac:	8080022c 	andhi	r2,r16,8
1000cab0:	10000926 	beq	r2,zero,1000cad8 <__muldf3+0x6c0>
1000cab4:	8880022c 	andhi	r2,r17,8
1000cab8:	1000071e 	bne	r2,zero,1000cad8 <__muldf3+0x6c0>
1000cabc:	00800434 	movhi	r2,16
1000cac0:	8c000234 	orhi	r16,r17,8
1000cac4:	10bfffc4 	addi	r2,r2,-1
1000cac8:	e027883a 	mov	r19,fp
1000cacc:	80a0703a 	and	r16,r16,r2
1000cad0:	902d883a 	mov	r22,r18
1000cad4:	003f1706 	br	1000c734 <__alt_data_end+0xf800c734>
1000cad8:	00800434 	movhi	r2,16
1000cadc:	84000234 	orhi	r16,r16,8
1000cae0:	10bfffc4 	addi	r2,r2,-1
1000cae4:	80a0703a 	and	r16,r16,r2
1000cae8:	003f1206 	br	1000c734 <__alt_data_end+0xf800c734>
1000caec:	147ff604 	addi	r17,r2,-40
1000caf0:	3462983a 	sll	r17,r6,r17
1000caf4:	0025883a 	mov	r18,zero
1000caf8:	003ef306 	br	1000c6c8 <__alt_data_end+0xf800c6c8>
1000cafc:	3009883a 	mov	r4,r6
1000cb00:	d9400215 	stw	r5,8(sp)
1000cb04:	d9800715 	stw	r6,28(sp)
1000cb08:	da400415 	stw	r9,16(sp)
1000cb0c:	da800315 	stw	r10,12(sp)
1000cb10:	000d7840 	call	1000d784 <__clzsi2>
1000cb14:	10800804 	addi	r2,r2,32
1000cb18:	da800317 	ldw	r10,12(sp)
1000cb1c:	da400417 	ldw	r9,16(sp)
1000cb20:	d9800717 	ldw	r6,28(sp)
1000cb24:	d9400217 	ldw	r5,8(sp)
1000cb28:	003edd06 	br	1000c6a0 <__alt_data_end+0xf800c6a0>
1000cb2c:	143ff604 	addi	r16,r2,-40
1000cb30:	ac20983a 	sll	r16,r21,r16
1000cb34:	002d883a 	mov	r22,zero
1000cb38:	003ec106 	br	1000c640 <__alt_data_end+0xf800c640>
1000cb3c:	d9800715 	stw	r6,28(sp)
1000cb40:	d9c00215 	stw	r7,8(sp)
1000cb44:	da400415 	stw	r9,16(sp)
1000cb48:	000d7840 	call	1000d784 <__clzsi2>
1000cb4c:	10800804 	addi	r2,r2,32
1000cb50:	da400417 	ldw	r9,16(sp)
1000cb54:	d9c00217 	ldw	r7,8(sp)
1000cb58:	d9800717 	ldw	r6,28(sp)
1000cb5c:	003eae06 	br	1000c618 <__alt_data_end+0xf800c618>
1000cb60:	00c00044 	movi	r3,1
1000cb64:	1887c83a 	sub	r3,r3,r2
1000cb68:	01000e04 	movi	r4,56
1000cb6c:	20fe8516 	blt	r4,r3,1000c584 <__alt_data_end+0xf800c584>
1000cb70:	010007c4 	movi	r4,31
1000cb74:	20c01b16 	blt	r4,r3,1000cbe4 <__muldf3+0x7cc>
1000cb78:	00800804 	movi	r2,32
1000cb7c:	10c5c83a 	sub	r2,r2,r3
1000cb80:	888a983a 	sll	r5,r17,r2
1000cb84:	90c8d83a 	srl	r4,r18,r3
1000cb88:	9084983a 	sll	r2,r18,r2
1000cb8c:	88e2d83a 	srl	r17,r17,r3
1000cb90:	2906b03a 	or	r3,r5,r4
1000cb94:	1004c03a 	cmpne	r2,r2,zero
1000cb98:	1886b03a 	or	r3,r3,r2
1000cb9c:	188001cc 	andi	r2,r3,7
1000cba0:	10000726 	beq	r2,zero,1000cbc0 <__muldf3+0x7a8>
1000cba4:	188003cc 	andi	r2,r3,15
1000cba8:	01000104 	movi	r4,4
1000cbac:	11000426 	beq	r2,r4,1000cbc0 <__muldf3+0x7a8>
1000cbb0:	1805883a 	mov	r2,r3
1000cbb4:	10c00104 	addi	r3,r2,4
1000cbb8:	1885803a 	cmpltu	r2,r3,r2
1000cbbc:	88a3883a 	add	r17,r17,r2
1000cbc0:	8880202c 	andhi	r2,r17,128
1000cbc4:	10001c26 	beq	r2,zero,1000cc38 <__muldf3+0x820>
1000cbc8:	3027883a 	mov	r19,r6
1000cbcc:	00800044 	movi	r2,1
1000cbd0:	0021883a 	mov	r16,zero
1000cbd4:	002d883a 	mov	r22,zero
1000cbd8:	003e6e06 	br	1000c594 <__alt_data_end+0xf800c594>
1000cbdc:	4007883a 	mov	r3,r8
1000cbe0:	003f9706 	br	1000ca40 <__alt_data_end+0xf800ca40>
1000cbe4:	017ff844 	movi	r5,-31
1000cbe8:	2885c83a 	sub	r2,r5,r2
1000cbec:	888ad83a 	srl	r5,r17,r2
1000cbf0:	00800804 	movi	r2,32
1000cbf4:	18801a26 	beq	r3,r2,1000cc60 <__muldf3+0x848>
1000cbf8:	01001004 	movi	r4,64
1000cbfc:	20c7c83a 	sub	r3,r4,r3
1000cc00:	88e2983a 	sll	r17,r17,r3
1000cc04:	8ca4b03a 	or	r18,r17,r18
1000cc08:	9004c03a 	cmpne	r2,r18,zero
1000cc0c:	2884b03a 	or	r2,r5,r2
1000cc10:	144001cc 	andi	r17,r2,7
1000cc14:	88000d1e 	bne	r17,zero,1000cc4c <__muldf3+0x834>
1000cc18:	0021883a 	mov	r16,zero
1000cc1c:	102cd0fa 	srli	r22,r2,3
1000cc20:	3027883a 	mov	r19,r6
1000cc24:	0005883a 	mov	r2,zero
1000cc28:	b46cb03a 	or	r22,r22,r17
1000cc2c:	003e5906 	br	1000c594 <__alt_data_end+0xf800c594>
1000cc30:	1007883a 	mov	r3,r2
1000cc34:	0023883a 	mov	r17,zero
1000cc38:	8820927a 	slli	r16,r17,9
1000cc3c:	1805883a 	mov	r2,r3
1000cc40:	8822977a 	slli	r17,r17,29
1000cc44:	8020d33a 	srli	r16,r16,12
1000cc48:	003ff406 	br	1000cc1c <__alt_data_end+0xf800cc1c>
1000cc4c:	10c003cc 	andi	r3,r2,15
1000cc50:	01000104 	movi	r4,4
1000cc54:	193ff626 	beq	r3,r4,1000cc30 <__alt_data_end+0xf800cc30>
1000cc58:	0023883a 	mov	r17,zero
1000cc5c:	003fd506 	br	1000cbb4 <__alt_data_end+0xf800cbb4>
1000cc60:	0023883a 	mov	r17,zero
1000cc64:	003fe706 	br	1000cc04 <__alt_data_end+0xf800cc04>
1000cc68:	00800434 	movhi	r2,16
1000cc6c:	8c000234 	orhi	r16,r17,8
1000cc70:	10bfffc4 	addi	r2,r2,-1
1000cc74:	3027883a 	mov	r19,r6
1000cc78:	80a0703a 	and	r16,r16,r2
1000cc7c:	902d883a 	mov	r22,r18
1000cc80:	003eac06 	br	1000c734 <__alt_data_end+0xf800c734>

1000cc84 <__subdf3>:
1000cc84:	02000434 	movhi	r8,16
1000cc88:	423fffc4 	addi	r8,r8,-1
1000cc8c:	defffb04 	addi	sp,sp,-20
1000cc90:	2a14703a 	and	r10,r5,r8
1000cc94:	3812d53a 	srli	r9,r7,20
1000cc98:	3a10703a 	and	r8,r7,r8
1000cc9c:	2006d77a 	srli	r3,r4,29
1000cca0:	3004d77a 	srli	r2,r6,29
1000cca4:	dc000015 	stw	r16,0(sp)
1000cca8:	501490fa 	slli	r10,r10,3
1000ccac:	2820d53a 	srli	r16,r5,20
1000ccb0:	401090fa 	slli	r8,r8,3
1000ccb4:	dc800215 	stw	r18,8(sp)
1000ccb8:	dc400115 	stw	r17,4(sp)
1000ccbc:	dfc00415 	stw	ra,16(sp)
1000ccc0:	202290fa 	slli	r17,r4,3
1000ccc4:	dcc00315 	stw	r19,12(sp)
1000ccc8:	4a41ffcc 	andi	r9,r9,2047
1000cccc:	0101ffc4 	movi	r4,2047
1000ccd0:	2824d7fa 	srli	r18,r5,31
1000ccd4:	8401ffcc 	andi	r16,r16,2047
1000ccd8:	50c6b03a 	or	r3,r10,r3
1000ccdc:	380ed7fa 	srli	r7,r7,31
1000cce0:	408ab03a 	or	r5,r8,r2
1000cce4:	300c90fa 	slli	r6,r6,3
1000cce8:	49009626 	beq	r9,r4,1000cf44 <__subdf3+0x2c0>
1000ccec:	39c0005c 	xori	r7,r7,1
1000ccf0:	8245c83a 	sub	r2,r16,r9
1000ccf4:	3c807426 	beq	r7,r18,1000cec8 <__subdf3+0x244>
1000ccf8:	0080af0e 	bge	zero,r2,1000cfb8 <__subdf3+0x334>
1000ccfc:	48002a1e 	bne	r9,zero,1000cda8 <__subdf3+0x124>
1000cd00:	2988b03a 	or	r4,r5,r6
1000cd04:	20009a1e 	bne	r4,zero,1000cf70 <__subdf3+0x2ec>
1000cd08:	888001cc 	andi	r2,r17,7
1000cd0c:	10000726 	beq	r2,zero,1000cd2c <__subdf3+0xa8>
1000cd10:	888003cc 	andi	r2,r17,15
1000cd14:	01000104 	movi	r4,4
1000cd18:	11000426 	beq	r2,r4,1000cd2c <__subdf3+0xa8>
1000cd1c:	890b883a 	add	r5,r17,r4
1000cd20:	2c63803a 	cmpltu	r17,r5,r17
1000cd24:	1c47883a 	add	r3,r3,r17
1000cd28:	2823883a 	mov	r17,r5
1000cd2c:	1880202c 	andhi	r2,r3,128
1000cd30:	10005926 	beq	r2,zero,1000ce98 <__subdf3+0x214>
1000cd34:	84000044 	addi	r16,r16,1
1000cd38:	0081ffc4 	movi	r2,2047
1000cd3c:	8080be26 	beq	r16,r2,1000d038 <__subdf3+0x3b4>
1000cd40:	017fe034 	movhi	r5,65408
1000cd44:	297fffc4 	addi	r5,r5,-1
1000cd48:	1946703a 	and	r3,r3,r5
1000cd4c:	1804977a 	slli	r2,r3,29
1000cd50:	1806927a 	slli	r3,r3,9
1000cd54:	8822d0fa 	srli	r17,r17,3
1000cd58:	8401ffcc 	andi	r16,r16,2047
1000cd5c:	180ad33a 	srli	r5,r3,12
1000cd60:	9100004c 	andi	r4,r18,1
1000cd64:	1444b03a 	or	r2,r2,r17
1000cd68:	80c1ffcc 	andi	r3,r16,2047
1000cd6c:	1820953a 	slli	r16,r3,20
1000cd70:	20c03fcc 	andi	r3,r4,255
1000cd74:	180897fa 	slli	r4,r3,31
1000cd78:	00c00434 	movhi	r3,16
1000cd7c:	18ffffc4 	addi	r3,r3,-1
1000cd80:	28c6703a 	and	r3,r5,r3
1000cd84:	1c06b03a 	or	r3,r3,r16
1000cd88:	1906b03a 	or	r3,r3,r4
1000cd8c:	dfc00417 	ldw	ra,16(sp)
1000cd90:	dcc00317 	ldw	r19,12(sp)
1000cd94:	dc800217 	ldw	r18,8(sp)
1000cd98:	dc400117 	ldw	r17,4(sp)
1000cd9c:	dc000017 	ldw	r16,0(sp)
1000cda0:	dec00504 	addi	sp,sp,20
1000cda4:	f800283a 	ret
1000cda8:	0101ffc4 	movi	r4,2047
1000cdac:	813fd626 	beq	r16,r4,1000cd08 <__alt_data_end+0xf800cd08>
1000cdb0:	29402034 	orhi	r5,r5,128
1000cdb4:	01000e04 	movi	r4,56
1000cdb8:	2080a316 	blt	r4,r2,1000d048 <__subdf3+0x3c4>
1000cdbc:	010007c4 	movi	r4,31
1000cdc0:	2080c616 	blt	r4,r2,1000d0dc <__subdf3+0x458>
1000cdc4:	01000804 	movi	r4,32
1000cdc8:	2089c83a 	sub	r4,r4,r2
1000cdcc:	2910983a 	sll	r8,r5,r4
1000cdd0:	308ed83a 	srl	r7,r6,r2
1000cdd4:	3108983a 	sll	r4,r6,r4
1000cdd8:	2884d83a 	srl	r2,r5,r2
1000cddc:	41ccb03a 	or	r6,r8,r7
1000cde0:	2008c03a 	cmpne	r4,r4,zero
1000cde4:	310cb03a 	or	r6,r6,r4
1000cde8:	898dc83a 	sub	r6,r17,r6
1000cdec:	89a3803a 	cmpltu	r17,r17,r6
1000cdf0:	1887c83a 	sub	r3,r3,r2
1000cdf4:	1c47c83a 	sub	r3,r3,r17
1000cdf8:	3023883a 	mov	r17,r6
1000cdfc:	1880202c 	andhi	r2,r3,128
1000ce00:	10002326 	beq	r2,zero,1000ce90 <__subdf3+0x20c>
1000ce04:	04c02034 	movhi	r19,128
1000ce08:	9cffffc4 	addi	r19,r19,-1
1000ce0c:	1ce6703a 	and	r19,r3,r19
1000ce10:	98007a26 	beq	r19,zero,1000cffc <__subdf3+0x378>
1000ce14:	9809883a 	mov	r4,r19
1000ce18:	000d7840 	call	1000d784 <__clzsi2>
1000ce1c:	113ffe04 	addi	r4,r2,-8
1000ce20:	00c007c4 	movi	r3,31
1000ce24:	19007b16 	blt	r3,r4,1000d014 <__subdf3+0x390>
1000ce28:	00800804 	movi	r2,32
1000ce2c:	1105c83a 	sub	r2,r2,r4
1000ce30:	8884d83a 	srl	r2,r17,r2
1000ce34:	9906983a 	sll	r3,r19,r4
1000ce38:	8922983a 	sll	r17,r17,r4
1000ce3c:	10c4b03a 	or	r2,r2,r3
1000ce40:	24007816 	blt	r4,r16,1000d024 <__subdf3+0x3a0>
1000ce44:	2421c83a 	sub	r16,r4,r16
1000ce48:	80c00044 	addi	r3,r16,1
1000ce4c:	010007c4 	movi	r4,31
1000ce50:	20c09516 	blt	r4,r3,1000d0a8 <__subdf3+0x424>
1000ce54:	01400804 	movi	r5,32
1000ce58:	28cbc83a 	sub	r5,r5,r3
1000ce5c:	88c8d83a 	srl	r4,r17,r3
1000ce60:	8962983a 	sll	r17,r17,r5
1000ce64:	114a983a 	sll	r5,r2,r5
1000ce68:	10c6d83a 	srl	r3,r2,r3
1000ce6c:	8804c03a 	cmpne	r2,r17,zero
1000ce70:	290ab03a 	or	r5,r5,r4
1000ce74:	28a2b03a 	or	r17,r5,r2
1000ce78:	0021883a 	mov	r16,zero
1000ce7c:	003fa206 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000ce80:	2090b03a 	or	r8,r4,r2
1000ce84:	40018e26 	beq	r8,zero,1000d4c0 <__subdf3+0x83c>
1000ce88:	1007883a 	mov	r3,r2
1000ce8c:	2023883a 	mov	r17,r4
1000ce90:	888001cc 	andi	r2,r17,7
1000ce94:	103f9e1e 	bne	r2,zero,1000cd10 <__alt_data_end+0xf800cd10>
1000ce98:	1804977a 	slli	r2,r3,29
1000ce9c:	8822d0fa 	srli	r17,r17,3
1000cea0:	1810d0fa 	srli	r8,r3,3
1000cea4:	9100004c 	andi	r4,r18,1
1000cea8:	1444b03a 	or	r2,r2,r17
1000ceac:	00c1ffc4 	movi	r3,2047
1000ceb0:	80c02826 	beq	r16,r3,1000cf54 <__subdf3+0x2d0>
1000ceb4:	01400434 	movhi	r5,16
1000ceb8:	297fffc4 	addi	r5,r5,-1
1000cebc:	80e0703a 	and	r16,r16,r3
1000cec0:	414a703a 	and	r5,r8,r5
1000cec4:	003fa806 	br	1000cd68 <__alt_data_end+0xf800cd68>
1000cec8:	0080630e 	bge	zero,r2,1000d058 <__subdf3+0x3d4>
1000cecc:	48003026 	beq	r9,zero,1000cf90 <__subdf3+0x30c>
1000ced0:	0101ffc4 	movi	r4,2047
1000ced4:	813f8c26 	beq	r16,r4,1000cd08 <__alt_data_end+0xf800cd08>
1000ced8:	29402034 	orhi	r5,r5,128
1000cedc:	01000e04 	movi	r4,56
1000cee0:	2080a90e 	bge	r4,r2,1000d188 <__subdf3+0x504>
1000cee4:	298cb03a 	or	r6,r5,r6
1000cee8:	3012c03a 	cmpne	r9,r6,zero
1000ceec:	0005883a 	mov	r2,zero
1000cef0:	4c53883a 	add	r9,r9,r17
1000cef4:	4c63803a 	cmpltu	r17,r9,r17
1000cef8:	10c7883a 	add	r3,r2,r3
1000cefc:	88c7883a 	add	r3,r17,r3
1000cf00:	4823883a 	mov	r17,r9
1000cf04:	1880202c 	andhi	r2,r3,128
1000cf08:	1000d026 	beq	r2,zero,1000d24c <__subdf3+0x5c8>
1000cf0c:	84000044 	addi	r16,r16,1
1000cf10:	0081ffc4 	movi	r2,2047
1000cf14:	8080fe26 	beq	r16,r2,1000d310 <__subdf3+0x68c>
1000cf18:	00bfe034 	movhi	r2,65408
1000cf1c:	10bfffc4 	addi	r2,r2,-1
1000cf20:	1886703a 	and	r3,r3,r2
1000cf24:	880ad07a 	srli	r5,r17,1
1000cf28:	180497fa 	slli	r2,r3,31
1000cf2c:	8900004c 	andi	r4,r17,1
1000cf30:	2922b03a 	or	r17,r5,r4
1000cf34:	1806d07a 	srli	r3,r3,1
1000cf38:	1462b03a 	or	r17,r2,r17
1000cf3c:	3825883a 	mov	r18,r7
1000cf40:	003f7106 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000cf44:	2984b03a 	or	r2,r5,r6
1000cf48:	103f6826 	beq	r2,zero,1000ccec <__alt_data_end+0xf800ccec>
1000cf4c:	39c03fcc 	andi	r7,r7,255
1000cf50:	003f6706 	br	1000ccf0 <__alt_data_end+0xf800ccf0>
1000cf54:	4086b03a 	or	r3,r8,r2
1000cf58:	18015226 	beq	r3,zero,1000d4a4 <__subdf3+0x820>
1000cf5c:	00c00434 	movhi	r3,16
1000cf60:	41400234 	orhi	r5,r8,8
1000cf64:	18ffffc4 	addi	r3,r3,-1
1000cf68:	28ca703a 	and	r5,r5,r3
1000cf6c:	003f7e06 	br	1000cd68 <__alt_data_end+0xf800cd68>
1000cf70:	10bfffc4 	addi	r2,r2,-1
1000cf74:	1000491e 	bne	r2,zero,1000d09c <__subdf3+0x418>
1000cf78:	898fc83a 	sub	r7,r17,r6
1000cf7c:	89e3803a 	cmpltu	r17,r17,r7
1000cf80:	1947c83a 	sub	r3,r3,r5
1000cf84:	1c47c83a 	sub	r3,r3,r17
1000cf88:	3823883a 	mov	r17,r7
1000cf8c:	003f9b06 	br	1000cdfc <__alt_data_end+0xf800cdfc>
1000cf90:	2988b03a 	or	r4,r5,r6
1000cf94:	203f5c26 	beq	r4,zero,1000cd08 <__alt_data_end+0xf800cd08>
1000cf98:	10bfffc4 	addi	r2,r2,-1
1000cf9c:	1000931e 	bne	r2,zero,1000d1ec <__subdf3+0x568>
1000cfa0:	898d883a 	add	r6,r17,r6
1000cfa4:	3463803a 	cmpltu	r17,r6,r17
1000cfa8:	1947883a 	add	r3,r3,r5
1000cfac:	88c7883a 	add	r3,r17,r3
1000cfb0:	3023883a 	mov	r17,r6
1000cfb4:	003fd306 	br	1000cf04 <__alt_data_end+0xf800cf04>
1000cfb8:	1000541e 	bne	r2,zero,1000d10c <__subdf3+0x488>
1000cfbc:	80800044 	addi	r2,r16,1
1000cfc0:	1081ffcc 	andi	r2,r2,2047
1000cfc4:	01000044 	movi	r4,1
1000cfc8:	2080a20e 	bge	r4,r2,1000d254 <__subdf3+0x5d0>
1000cfcc:	8989c83a 	sub	r4,r17,r6
1000cfd0:	8905803a 	cmpltu	r2,r17,r4
1000cfd4:	1967c83a 	sub	r19,r3,r5
1000cfd8:	98a7c83a 	sub	r19,r19,r2
1000cfdc:	9880202c 	andhi	r2,r19,128
1000cfe0:	10006326 	beq	r2,zero,1000d170 <__subdf3+0x4ec>
1000cfe4:	3463c83a 	sub	r17,r6,r17
1000cfe8:	28c7c83a 	sub	r3,r5,r3
1000cfec:	344d803a 	cmpltu	r6,r6,r17
1000cff0:	19a7c83a 	sub	r19,r3,r6
1000cff4:	3825883a 	mov	r18,r7
1000cff8:	983f861e 	bne	r19,zero,1000ce14 <__alt_data_end+0xf800ce14>
1000cffc:	8809883a 	mov	r4,r17
1000d000:	000d7840 	call	1000d784 <__clzsi2>
1000d004:	10800804 	addi	r2,r2,32
1000d008:	113ffe04 	addi	r4,r2,-8
1000d00c:	00c007c4 	movi	r3,31
1000d010:	193f850e 	bge	r3,r4,1000ce28 <__alt_data_end+0xf800ce28>
1000d014:	10bff604 	addi	r2,r2,-40
1000d018:	8884983a 	sll	r2,r17,r2
1000d01c:	0023883a 	mov	r17,zero
1000d020:	243f880e 	bge	r4,r16,1000ce44 <__alt_data_end+0xf800ce44>
1000d024:	00ffe034 	movhi	r3,65408
1000d028:	18ffffc4 	addi	r3,r3,-1
1000d02c:	8121c83a 	sub	r16,r16,r4
1000d030:	10c6703a 	and	r3,r2,r3
1000d034:	003f3406 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d038:	9100004c 	andi	r4,r18,1
1000d03c:	000b883a 	mov	r5,zero
1000d040:	0005883a 	mov	r2,zero
1000d044:	003f4806 	br	1000cd68 <__alt_data_end+0xf800cd68>
1000d048:	298cb03a 	or	r6,r5,r6
1000d04c:	300cc03a 	cmpne	r6,r6,zero
1000d050:	0005883a 	mov	r2,zero
1000d054:	003f6406 	br	1000cde8 <__alt_data_end+0xf800cde8>
1000d058:	10009a1e 	bne	r2,zero,1000d2c4 <__subdf3+0x640>
1000d05c:	82400044 	addi	r9,r16,1
1000d060:	4881ffcc 	andi	r2,r9,2047
1000d064:	02800044 	movi	r10,1
1000d068:	5080670e 	bge	r10,r2,1000d208 <__subdf3+0x584>
1000d06c:	0081ffc4 	movi	r2,2047
1000d070:	4880af26 	beq	r9,r2,1000d330 <__subdf3+0x6ac>
1000d074:	898d883a 	add	r6,r17,r6
1000d078:	1945883a 	add	r2,r3,r5
1000d07c:	3447803a 	cmpltu	r3,r6,r17
1000d080:	1887883a 	add	r3,r3,r2
1000d084:	182297fa 	slli	r17,r3,31
1000d088:	300cd07a 	srli	r6,r6,1
1000d08c:	1806d07a 	srli	r3,r3,1
1000d090:	4821883a 	mov	r16,r9
1000d094:	89a2b03a 	or	r17,r17,r6
1000d098:	003f1b06 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d09c:	0101ffc4 	movi	r4,2047
1000d0a0:	813f441e 	bne	r16,r4,1000cdb4 <__alt_data_end+0xf800cdb4>
1000d0a4:	003f1806 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d0a8:	843ff844 	addi	r16,r16,-31
1000d0ac:	01400804 	movi	r5,32
1000d0b0:	1408d83a 	srl	r4,r2,r16
1000d0b4:	19405026 	beq	r3,r5,1000d1f8 <__subdf3+0x574>
1000d0b8:	01401004 	movi	r5,64
1000d0bc:	28c7c83a 	sub	r3,r5,r3
1000d0c0:	10c4983a 	sll	r2,r2,r3
1000d0c4:	88a2b03a 	or	r17,r17,r2
1000d0c8:	8822c03a 	cmpne	r17,r17,zero
1000d0cc:	2462b03a 	or	r17,r4,r17
1000d0d0:	0007883a 	mov	r3,zero
1000d0d4:	0021883a 	mov	r16,zero
1000d0d8:	003f6d06 	br	1000ce90 <__alt_data_end+0xf800ce90>
1000d0dc:	11fff804 	addi	r7,r2,-32
1000d0e0:	01000804 	movi	r4,32
1000d0e4:	29ced83a 	srl	r7,r5,r7
1000d0e8:	11004526 	beq	r2,r4,1000d200 <__subdf3+0x57c>
1000d0ec:	01001004 	movi	r4,64
1000d0f0:	2089c83a 	sub	r4,r4,r2
1000d0f4:	2904983a 	sll	r2,r5,r4
1000d0f8:	118cb03a 	or	r6,r2,r6
1000d0fc:	300cc03a 	cmpne	r6,r6,zero
1000d100:	398cb03a 	or	r6,r7,r6
1000d104:	0005883a 	mov	r2,zero
1000d108:	003f3706 	br	1000cde8 <__alt_data_end+0xf800cde8>
1000d10c:	80002a26 	beq	r16,zero,1000d1b8 <__subdf3+0x534>
1000d110:	0101ffc4 	movi	r4,2047
1000d114:	49006626 	beq	r9,r4,1000d2b0 <__subdf3+0x62c>
1000d118:	0085c83a 	sub	r2,zero,r2
1000d11c:	18c02034 	orhi	r3,r3,128
1000d120:	01000e04 	movi	r4,56
1000d124:	20807e16 	blt	r4,r2,1000d320 <__subdf3+0x69c>
1000d128:	010007c4 	movi	r4,31
1000d12c:	2080e716 	blt	r4,r2,1000d4cc <__subdf3+0x848>
1000d130:	01000804 	movi	r4,32
1000d134:	2089c83a 	sub	r4,r4,r2
1000d138:	1914983a 	sll	r10,r3,r4
1000d13c:	8890d83a 	srl	r8,r17,r2
1000d140:	8908983a 	sll	r4,r17,r4
1000d144:	1884d83a 	srl	r2,r3,r2
1000d148:	5222b03a 	or	r17,r10,r8
1000d14c:	2006c03a 	cmpne	r3,r4,zero
1000d150:	88e2b03a 	or	r17,r17,r3
1000d154:	3463c83a 	sub	r17,r6,r17
1000d158:	2885c83a 	sub	r2,r5,r2
1000d15c:	344d803a 	cmpltu	r6,r6,r17
1000d160:	1187c83a 	sub	r3,r2,r6
1000d164:	4821883a 	mov	r16,r9
1000d168:	3825883a 	mov	r18,r7
1000d16c:	003f2306 	br	1000cdfc <__alt_data_end+0xf800cdfc>
1000d170:	24d0b03a 	or	r8,r4,r19
1000d174:	40001b1e 	bne	r8,zero,1000d1e4 <__subdf3+0x560>
1000d178:	0005883a 	mov	r2,zero
1000d17c:	0009883a 	mov	r4,zero
1000d180:	0021883a 	mov	r16,zero
1000d184:	003f4906 	br	1000ceac <__alt_data_end+0xf800ceac>
1000d188:	010007c4 	movi	r4,31
1000d18c:	20803a16 	blt	r4,r2,1000d278 <__subdf3+0x5f4>
1000d190:	01000804 	movi	r4,32
1000d194:	2089c83a 	sub	r4,r4,r2
1000d198:	2912983a 	sll	r9,r5,r4
1000d19c:	3090d83a 	srl	r8,r6,r2
1000d1a0:	3108983a 	sll	r4,r6,r4
1000d1a4:	2884d83a 	srl	r2,r5,r2
1000d1a8:	4a12b03a 	or	r9,r9,r8
1000d1ac:	2008c03a 	cmpne	r4,r4,zero
1000d1b0:	4912b03a 	or	r9,r9,r4
1000d1b4:	003f4e06 	br	1000cef0 <__alt_data_end+0xf800cef0>
1000d1b8:	1c48b03a 	or	r4,r3,r17
1000d1bc:	20003c26 	beq	r4,zero,1000d2b0 <__subdf3+0x62c>
1000d1c0:	0084303a 	nor	r2,zero,r2
1000d1c4:	1000381e 	bne	r2,zero,1000d2a8 <__subdf3+0x624>
1000d1c8:	3463c83a 	sub	r17,r6,r17
1000d1cc:	28c5c83a 	sub	r2,r5,r3
1000d1d0:	344d803a 	cmpltu	r6,r6,r17
1000d1d4:	1187c83a 	sub	r3,r2,r6
1000d1d8:	4821883a 	mov	r16,r9
1000d1dc:	3825883a 	mov	r18,r7
1000d1e0:	003f0606 	br	1000cdfc <__alt_data_end+0xf800cdfc>
1000d1e4:	2023883a 	mov	r17,r4
1000d1e8:	003f0906 	br	1000ce10 <__alt_data_end+0xf800ce10>
1000d1ec:	0101ffc4 	movi	r4,2047
1000d1f0:	813f3a1e 	bne	r16,r4,1000cedc <__alt_data_end+0xf800cedc>
1000d1f4:	003ec406 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d1f8:	0005883a 	mov	r2,zero
1000d1fc:	003fb106 	br	1000d0c4 <__alt_data_end+0xf800d0c4>
1000d200:	0005883a 	mov	r2,zero
1000d204:	003fbc06 	br	1000d0f8 <__alt_data_end+0xf800d0f8>
1000d208:	1c44b03a 	or	r2,r3,r17
1000d20c:	80008e1e 	bne	r16,zero,1000d448 <__subdf3+0x7c4>
1000d210:	1000c826 	beq	r2,zero,1000d534 <__subdf3+0x8b0>
1000d214:	2984b03a 	or	r2,r5,r6
1000d218:	103ebb26 	beq	r2,zero,1000cd08 <__alt_data_end+0xf800cd08>
1000d21c:	8989883a 	add	r4,r17,r6
1000d220:	1945883a 	add	r2,r3,r5
1000d224:	2447803a 	cmpltu	r3,r4,r17
1000d228:	1887883a 	add	r3,r3,r2
1000d22c:	1880202c 	andhi	r2,r3,128
1000d230:	2023883a 	mov	r17,r4
1000d234:	103f1626 	beq	r2,zero,1000ce90 <__alt_data_end+0xf800ce90>
1000d238:	00bfe034 	movhi	r2,65408
1000d23c:	10bfffc4 	addi	r2,r2,-1
1000d240:	5021883a 	mov	r16,r10
1000d244:	1886703a 	and	r3,r3,r2
1000d248:	003eaf06 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d24c:	3825883a 	mov	r18,r7
1000d250:	003f0f06 	br	1000ce90 <__alt_data_end+0xf800ce90>
1000d254:	1c44b03a 	or	r2,r3,r17
1000d258:	8000251e 	bne	r16,zero,1000d2f0 <__subdf3+0x66c>
1000d25c:	1000661e 	bne	r2,zero,1000d3f8 <__subdf3+0x774>
1000d260:	2990b03a 	or	r8,r5,r6
1000d264:	40009626 	beq	r8,zero,1000d4c0 <__subdf3+0x83c>
1000d268:	2807883a 	mov	r3,r5
1000d26c:	3023883a 	mov	r17,r6
1000d270:	3825883a 	mov	r18,r7
1000d274:	003ea406 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d278:	127ff804 	addi	r9,r2,-32
1000d27c:	01000804 	movi	r4,32
1000d280:	2a52d83a 	srl	r9,r5,r9
1000d284:	11008c26 	beq	r2,r4,1000d4b8 <__subdf3+0x834>
1000d288:	01001004 	movi	r4,64
1000d28c:	2085c83a 	sub	r2,r4,r2
1000d290:	2884983a 	sll	r2,r5,r2
1000d294:	118cb03a 	or	r6,r2,r6
1000d298:	300cc03a 	cmpne	r6,r6,zero
1000d29c:	4992b03a 	or	r9,r9,r6
1000d2a0:	0005883a 	mov	r2,zero
1000d2a4:	003f1206 	br	1000cef0 <__alt_data_end+0xf800cef0>
1000d2a8:	0101ffc4 	movi	r4,2047
1000d2ac:	493f9c1e 	bne	r9,r4,1000d120 <__alt_data_end+0xf800d120>
1000d2b0:	2807883a 	mov	r3,r5
1000d2b4:	3023883a 	mov	r17,r6
1000d2b8:	4821883a 	mov	r16,r9
1000d2bc:	3825883a 	mov	r18,r7
1000d2c0:	003e9106 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d2c4:	80001f1e 	bne	r16,zero,1000d344 <__subdf3+0x6c0>
1000d2c8:	1c48b03a 	or	r4,r3,r17
1000d2cc:	20005a26 	beq	r4,zero,1000d438 <__subdf3+0x7b4>
1000d2d0:	0084303a 	nor	r2,zero,r2
1000d2d4:	1000561e 	bne	r2,zero,1000d430 <__subdf3+0x7ac>
1000d2d8:	89a3883a 	add	r17,r17,r6
1000d2dc:	1945883a 	add	r2,r3,r5
1000d2e0:	898d803a 	cmpltu	r6,r17,r6
1000d2e4:	3087883a 	add	r3,r6,r2
1000d2e8:	4821883a 	mov	r16,r9
1000d2ec:	003f0506 	br	1000cf04 <__alt_data_end+0xf800cf04>
1000d2f0:	10002b1e 	bne	r2,zero,1000d3a0 <__subdf3+0x71c>
1000d2f4:	2984b03a 	or	r2,r5,r6
1000d2f8:	10008026 	beq	r2,zero,1000d4fc <__subdf3+0x878>
1000d2fc:	2807883a 	mov	r3,r5
1000d300:	3023883a 	mov	r17,r6
1000d304:	3825883a 	mov	r18,r7
1000d308:	0401ffc4 	movi	r16,2047
1000d30c:	003e7e06 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d310:	3809883a 	mov	r4,r7
1000d314:	0011883a 	mov	r8,zero
1000d318:	0005883a 	mov	r2,zero
1000d31c:	003ee306 	br	1000ceac <__alt_data_end+0xf800ceac>
1000d320:	1c62b03a 	or	r17,r3,r17
1000d324:	8822c03a 	cmpne	r17,r17,zero
1000d328:	0005883a 	mov	r2,zero
1000d32c:	003f8906 	br	1000d154 <__alt_data_end+0xf800d154>
1000d330:	3809883a 	mov	r4,r7
1000d334:	4821883a 	mov	r16,r9
1000d338:	0011883a 	mov	r8,zero
1000d33c:	0005883a 	mov	r2,zero
1000d340:	003eda06 	br	1000ceac <__alt_data_end+0xf800ceac>
1000d344:	0101ffc4 	movi	r4,2047
1000d348:	49003b26 	beq	r9,r4,1000d438 <__subdf3+0x7b4>
1000d34c:	0085c83a 	sub	r2,zero,r2
1000d350:	18c02034 	orhi	r3,r3,128
1000d354:	01000e04 	movi	r4,56
1000d358:	20806e16 	blt	r4,r2,1000d514 <__subdf3+0x890>
1000d35c:	010007c4 	movi	r4,31
1000d360:	20807716 	blt	r4,r2,1000d540 <__subdf3+0x8bc>
1000d364:	01000804 	movi	r4,32
1000d368:	2089c83a 	sub	r4,r4,r2
1000d36c:	1914983a 	sll	r10,r3,r4
1000d370:	8890d83a 	srl	r8,r17,r2
1000d374:	8908983a 	sll	r4,r17,r4
1000d378:	1884d83a 	srl	r2,r3,r2
1000d37c:	5222b03a 	or	r17,r10,r8
1000d380:	2006c03a 	cmpne	r3,r4,zero
1000d384:	88e2b03a 	or	r17,r17,r3
1000d388:	89a3883a 	add	r17,r17,r6
1000d38c:	1145883a 	add	r2,r2,r5
1000d390:	898d803a 	cmpltu	r6,r17,r6
1000d394:	3087883a 	add	r3,r6,r2
1000d398:	4821883a 	mov	r16,r9
1000d39c:	003ed906 	br	1000cf04 <__alt_data_end+0xf800cf04>
1000d3a0:	2984b03a 	or	r2,r5,r6
1000d3a4:	10004226 	beq	r2,zero,1000d4b0 <__subdf3+0x82c>
1000d3a8:	1808d0fa 	srli	r4,r3,3
1000d3ac:	8822d0fa 	srli	r17,r17,3
1000d3b0:	1806977a 	slli	r3,r3,29
1000d3b4:	2080022c 	andhi	r2,r4,8
1000d3b8:	1c62b03a 	or	r17,r3,r17
1000d3bc:	10000826 	beq	r2,zero,1000d3e0 <__subdf3+0x75c>
1000d3c0:	2812d0fa 	srli	r9,r5,3
1000d3c4:	4880022c 	andhi	r2,r9,8
1000d3c8:	1000051e 	bne	r2,zero,1000d3e0 <__subdf3+0x75c>
1000d3cc:	300cd0fa 	srli	r6,r6,3
1000d3d0:	2804977a 	slli	r2,r5,29
1000d3d4:	4809883a 	mov	r4,r9
1000d3d8:	3825883a 	mov	r18,r7
1000d3dc:	11a2b03a 	or	r17,r2,r6
1000d3e0:	8806d77a 	srli	r3,r17,29
1000d3e4:	200890fa 	slli	r4,r4,3
1000d3e8:	882290fa 	slli	r17,r17,3
1000d3ec:	0401ffc4 	movi	r16,2047
1000d3f0:	1906b03a 	or	r3,r3,r4
1000d3f4:	003e4406 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d3f8:	2984b03a 	or	r2,r5,r6
1000d3fc:	103e4226 	beq	r2,zero,1000cd08 <__alt_data_end+0xf800cd08>
1000d400:	8989c83a 	sub	r4,r17,r6
1000d404:	8911803a 	cmpltu	r8,r17,r4
1000d408:	1945c83a 	sub	r2,r3,r5
1000d40c:	1205c83a 	sub	r2,r2,r8
1000d410:	1200202c 	andhi	r8,r2,128
1000d414:	403e9a26 	beq	r8,zero,1000ce80 <__alt_data_end+0xf800ce80>
1000d418:	3463c83a 	sub	r17,r6,r17
1000d41c:	28c5c83a 	sub	r2,r5,r3
1000d420:	344d803a 	cmpltu	r6,r6,r17
1000d424:	1187c83a 	sub	r3,r2,r6
1000d428:	3825883a 	mov	r18,r7
1000d42c:	003e3606 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d430:	0101ffc4 	movi	r4,2047
1000d434:	493fc71e 	bne	r9,r4,1000d354 <__alt_data_end+0xf800d354>
1000d438:	2807883a 	mov	r3,r5
1000d43c:	3023883a 	mov	r17,r6
1000d440:	4821883a 	mov	r16,r9
1000d444:	003e3006 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d448:	10003626 	beq	r2,zero,1000d524 <__subdf3+0x8a0>
1000d44c:	2984b03a 	or	r2,r5,r6
1000d450:	10001726 	beq	r2,zero,1000d4b0 <__subdf3+0x82c>
1000d454:	1808d0fa 	srli	r4,r3,3
1000d458:	8822d0fa 	srli	r17,r17,3
1000d45c:	1806977a 	slli	r3,r3,29
1000d460:	2080022c 	andhi	r2,r4,8
1000d464:	1c62b03a 	or	r17,r3,r17
1000d468:	10000726 	beq	r2,zero,1000d488 <__subdf3+0x804>
1000d46c:	2812d0fa 	srli	r9,r5,3
1000d470:	4880022c 	andhi	r2,r9,8
1000d474:	1000041e 	bne	r2,zero,1000d488 <__subdf3+0x804>
1000d478:	300cd0fa 	srli	r6,r6,3
1000d47c:	2804977a 	slli	r2,r5,29
1000d480:	4809883a 	mov	r4,r9
1000d484:	11a2b03a 	or	r17,r2,r6
1000d488:	8806d77a 	srli	r3,r17,29
1000d48c:	200890fa 	slli	r4,r4,3
1000d490:	882290fa 	slli	r17,r17,3
1000d494:	3825883a 	mov	r18,r7
1000d498:	1906b03a 	or	r3,r3,r4
1000d49c:	0401ffc4 	movi	r16,2047
1000d4a0:	003e1906 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d4a4:	000b883a 	mov	r5,zero
1000d4a8:	0005883a 	mov	r2,zero
1000d4ac:	003e2e06 	br	1000cd68 <__alt_data_end+0xf800cd68>
1000d4b0:	0401ffc4 	movi	r16,2047
1000d4b4:	003e1406 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d4b8:	0005883a 	mov	r2,zero
1000d4bc:	003f7506 	br	1000d294 <__alt_data_end+0xf800d294>
1000d4c0:	0005883a 	mov	r2,zero
1000d4c4:	0009883a 	mov	r4,zero
1000d4c8:	003e7806 	br	1000ceac <__alt_data_end+0xf800ceac>
1000d4cc:	123ff804 	addi	r8,r2,-32
1000d4d0:	01000804 	movi	r4,32
1000d4d4:	1a10d83a 	srl	r8,r3,r8
1000d4d8:	11002526 	beq	r2,r4,1000d570 <__subdf3+0x8ec>
1000d4dc:	01001004 	movi	r4,64
1000d4e0:	2085c83a 	sub	r2,r4,r2
1000d4e4:	1884983a 	sll	r2,r3,r2
1000d4e8:	1444b03a 	or	r2,r2,r17
1000d4ec:	1004c03a 	cmpne	r2,r2,zero
1000d4f0:	40a2b03a 	or	r17,r8,r2
1000d4f4:	0005883a 	mov	r2,zero
1000d4f8:	003f1606 	br	1000d154 <__alt_data_end+0xf800d154>
1000d4fc:	02000434 	movhi	r8,16
1000d500:	0009883a 	mov	r4,zero
1000d504:	423fffc4 	addi	r8,r8,-1
1000d508:	00bfffc4 	movi	r2,-1
1000d50c:	0401ffc4 	movi	r16,2047
1000d510:	003e6606 	br	1000ceac <__alt_data_end+0xf800ceac>
1000d514:	1c62b03a 	or	r17,r3,r17
1000d518:	8822c03a 	cmpne	r17,r17,zero
1000d51c:	0005883a 	mov	r2,zero
1000d520:	003f9906 	br	1000d388 <__alt_data_end+0xf800d388>
1000d524:	2807883a 	mov	r3,r5
1000d528:	3023883a 	mov	r17,r6
1000d52c:	0401ffc4 	movi	r16,2047
1000d530:	003df506 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d534:	2807883a 	mov	r3,r5
1000d538:	3023883a 	mov	r17,r6
1000d53c:	003df206 	br	1000cd08 <__alt_data_end+0xf800cd08>
1000d540:	123ff804 	addi	r8,r2,-32
1000d544:	01000804 	movi	r4,32
1000d548:	1a10d83a 	srl	r8,r3,r8
1000d54c:	11000a26 	beq	r2,r4,1000d578 <__subdf3+0x8f4>
1000d550:	01001004 	movi	r4,64
1000d554:	2085c83a 	sub	r2,r4,r2
1000d558:	1884983a 	sll	r2,r3,r2
1000d55c:	1444b03a 	or	r2,r2,r17
1000d560:	1004c03a 	cmpne	r2,r2,zero
1000d564:	40a2b03a 	or	r17,r8,r2
1000d568:	0005883a 	mov	r2,zero
1000d56c:	003f8606 	br	1000d388 <__alt_data_end+0xf800d388>
1000d570:	0005883a 	mov	r2,zero
1000d574:	003fdc06 	br	1000d4e8 <__alt_data_end+0xf800d4e8>
1000d578:	0005883a 	mov	r2,zero
1000d57c:	003ff706 	br	1000d55c <__alt_data_end+0xf800d55c>

1000d580 <__fixdfsi>:
1000d580:	280cd53a 	srli	r6,r5,20
1000d584:	00c00434 	movhi	r3,16
1000d588:	18ffffc4 	addi	r3,r3,-1
1000d58c:	3181ffcc 	andi	r6,r6,2047
1000d590:	01c0ff84 	movi	r7,1022
1000d594:	28c6703a 	and	r3,r5,r3
1000d598:	280ad7fa 	srli	r5,r5,31
1000d59c:	3980120e 	bge	r7,r6,1000d5e8 <__fixdfsi+0x68>
1000d5a0:	00810744 	movi	r2,1053
1000d5a4:	11800c16 	blt	r2,r6,1000d5d8 <__fixdfsi+0x58>
1000d5a8:	00810cc4 	movi	r2,1075
1000d5ac:	1185c83a 	sub	r2,r2,r6
1000d5b0:	01c007c4 	movi	r7,31
1000d5b4:	18c00434 	orhi	r3,r3,16
1000d5b8:	38800d16 	blt	r7,r2,1000d5f0 <__fixdfsi+0x70>
1000d5bc:	31befb44 	addi	r6,r6,-1043
1000d5c0:	2084d83a 	srl	r2,r4,r2
1000d5c4:	1986983a 	sll	r3,r3,r6
1000d5c8:	1884b03a 	or	r2,r3,r2
1000d5cc:	28000726 	beq	r5,zero,1000d5ec <__fixdfsi+0x6c>
1000d5d0:	0085c83a 	sub	r2,zero,r2
1000d5d4:	f800283a 	ret
1000d5d8:	00a00034 	movhi	r2,32768
1000d5dc:	10bfffc4 	addi	r2,r2,-1
1000d5e0:	2885883a 	add	r2,r5,r2
1000d5e4:	f800283a 	ret
1000d5e8:	0005883a 	mov	r2,zero
1000d5ec:	f800283a 	ret
1000d5f0:	008104c4 	movi	r2,1043
1000d5f4:	1185c83a 	sub	r2,r2,r6
1000d5f8:	1884d83a 	srl	r2,r3,r2
1000d5fc:	003ff306 	br	1000d5cc <__alt_data_end+0xf800d5cc>

1000d600 <__floatsidf>:
1000d600:	defffd04 	addi	sp,sp,-12
1000d604:	dfc00215 	stw	ra,8(sp)
1000d608:	dc400115 	stw	r17,4(sp)
1000d60c:	dc000015 	stw	r16,0(sp)
1000d610:	20002b26 	beq	r4,zero,1000d6c0 <__floatsidf+0xc0>
1000d614:	2023883a 	mov	r17,r4
1000d618:	2020d7fa 	srli	r16,r4,31
1000d61c:	20002d16 	blt	r4,zero,1000d6d4 <__floatsidf+0xd4>
1000d620:	8809883a 	mov	r4,r17
1000d624:	000d7840 	call	1000d784 <__clzsi2>
1000d628:	01410784 	movi	r5,1054
1000d62c:	288bc83a 	sub	r5,r5,r2
1000d630:	01010cc4 	movi	r4,1075
1000d634:	2149c83a 	sub	r4,r4,r5
1000d638:	00c007c4 	movi	r3,31
1000d63c:	1900160e 	bge	r3,r4,1000d698 <__floatsidf+0x98>
1000d640:	00c104c4 	movi	r3,1043
1000d644:	1947c83a 	sub	r3,r3,r5
1000d648:	88c6983a 	sll	r3,r17,r3
1000d64c:	00800434 	movhi	r2,16
1000d650:	10bfffc4 	addi	r2,r2,-1
1000d654:	1886703a 	and	r3,r3,r2
1000d658:	2941ffcc 	andi	r5,r5,2047
1000d65c:	800d883a 	mov	r6,r16
1000d660:	0005883a 	mov	r2,zero
1000d664:	280a953a 	slli	r5,r5,20
1000d668:	31803fcc 	andi	r6,r6,255
1000d66c:	01000434 	movhi	r4,16
1000d670:	300c97fa 	slli	r6,r6,31
1000d674:	213fffc4 	addi	r4,r4,-1
1000d678:	1906703a 	and	r3,r3,r4
1000d67c:	1946b03a 	or	r3,r3,r5
1000d680:	1986b03a 	or	r3,r3,r6
1000d684:	dfc00217 	ldw	ra,8(sp)
1000d688:	dc400117 	ldw	r17,4(sp)
1000d68c:	dc000017 	ldw	r16,0(sp)
1000d690:	dec00304 	addi	sp,sp,12
1000d694:	f800283a 	ret
1000d698:	00c002c4 	movi	r3,11
1000d69c:	1887c83a 	sub	r3,r3,r2
1000d6a0:	88c6d83a 	srl	r3,r17,r3
1000d6a4:	8904983a 	sll	r2,r17,r4
1000d6a8:	01000434 	movhi	r4,16
1000d6ac:	213fffc4 	addi	r4,r4,-1
1000d6b0:	2941ffcc 	andi	r5,r5,2047
1000d6b4:	1906703a 	and	r3,r3,r4
1000d6b8:	800d883a 	mov	r6,r16
1000d6bc:	003fe906 	br	1000d664 <__alt_data_end+0xf800d664>
1000d6c0:	000d883a 	mov	r6,zero
1000d6c4:	000b883a 	mov	r5,zero
1000d6c8:	0007883a 	mov	r3,zero
1000d6cc:	0005883a 	mov	r2,zero
1000d6d0:	003fe406 	br	1000d664 <__alt_data_end+0xf800d664>
1000d6d4:	0123c83a 	sub	r17,zero,r4
1000d6d8:	003fd106 	br	1000d620 <__alt_data_end+0xf800d620>

1000d6dc <__floatunsidf>:
1000d6dc:	defffe04 	addi	sp,sp,-8
1000d6e0:	dc000015 	stw	r16,0(sp)
1000d6e4:	dfc00115 	stw	ra,4(sp)
1000d6e8:	2021883a 	mov	r16,r4
1000d6ec:	20002226 	beq	r4,zero,1000d778 <__floatunsidf+0x9c>
1000d6f0:	000d7840 	call	1000d784 <__clzsi2>
1000d6f4:	01010784 	movi	r4,1054
1000d6f8:	2089c83a 	sub	r4,r4,r2
1000d6fc:	01810cc4 	movi	r6,1075
1000d700:	310dc83a 	sub	r6,r6,r4
1000d704:	00c007c4 	movi	r3,31
1000d708:	1980120e 	bge	r3,r6,1000d754 <__floatunsidf+0x78>
1000d70c:	00c104c4 	movi	r3,1043
1000d710:	1907c83a 	sub	r3,r3,r4
1000d714:	80ca983a 	sll	r5,r16,r3
1000d718:	00800434 	movhi	r2,16
1000d71c:	10bfffc4 	addi	r2,r2,-1
1000d720:	2101ffcc 	andi	r4,r4,2047
1000d724:	0021883a 	mov	r16,zero
1000d728:	288a703a 	and	r5,r5,r2
1000d72c:	2008953a 	slli	r4,r4,20
1000d730:	00c00434 	movhi	r3,16
1000d734:	18ffffc4 	addi	r3,r3,-1
1000d738:	28c6703a 	and	r3,r5,r3
1000d73c:	8005883a 	mov	r2,r16
1000d740:	1906b03a 	or	r3,r3,r4
1000d744:	dfc00117 	ldw	ra,4(sp)
1000d748:	dc000017 	ldw	r16,0(sp)
1000d74c:	dec00204 	addi	sp,sp,8
1000d750:	f800283a 	ret
1000d754:	00c002c4 	movi	r3,11
1000d758:	188bc83a 	sub	r5,r3,r2
1000d75c:	814ad83a 	srl	r5,r16,r5
1000d760:	00c00434 	movhi	r3,16
1000d764:	18ffffc4 	addi	r3,r3,-1
1000d768:	81a0983a 	sll	r16,r16,r6
1000d76c:	2101ffcc 	andi	r4,r4,2047
1000d770:	28ca703a 	and	r5,r5,r3
1000d774:	003fed06 	br	1000d72c <__alt_data_end+0xf800d72c>
1000d778:	0009883a 	mov	r4,zero
1000d77c:	000b883a 	mov	r5,zero
1000d780:	003fea06 	br	1000d72c <__alt_data_end+0xf800d72c>

1000d784 <__clzsi2>:
1000d784:	00bfffd4 	movui	r2,65535
1000d788:	11000536 	bltu	r2,r4,1000d7a0 <__clzsi2+0x1c>
1000d78c:	00803fc4 	movi	r2,255
1000d790:	11000f36 	bltu	r2,r4,1000d7d0 <__clzsi2+0x4c>
1000d794:	00800804 	movi	r2,32
1000d798:	0007883a 	mov	r3,zero
1000d79c:	00000506 	br	1000d7b4 <__clzsi2+0x30>
1000d7a0:	00804034 	movhi	r2,256
1000d7a4:	10bfffc4 	addi	r2,r2,-1
1000d7a8:	11000c2e 	bgeu	r2,r4,1000d7dc <__clzsi2+0x58>
1000d7ac:	00800204 	movi	r2,8
1000d7b0:	00c00604 	movi	r3,24
1000d7b4:	20c8d83a 	srl	r4,r4,r3
1000d7b8:	00c40074 	movhi	r3,4097
1000d7bc:	18c0bb04 	addi	r3,r3,748
1000d7c0:	1909883a 	add	r4,r3,r4
1000d7c4:	20c00003 	ldbu	r3,0(r4)
1000d7c8:	10c5c83a 	sub	r2,r2,r3
1000d7cc:	f800283a 	ret
1000d7d0:	00800604 	movi	r2,24
1000d7d4:	00c00204 	movi	r3,8
1000d7d8:	003ff606 	br	1000d7b4 <__alt_data_end+0xf800d7b4>
1000d7dc:	00800404 	movi	r2,16
1000d7e0:	1007883a 	mov	r3,r2
1000d7e4:	003ff306 	br	1000d7b4 <__alt_data_end+0xf800d7b4>

1000d7e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d7e8:	defffe04 	addi	sp,sp,-8
1000d7ec:	dfc00115 	stw	ra,4(sp)
1000d7f0:	df000015 	stw	fp,0(sp)
1000d7f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d7f8:	d0a00d17 	ldw	r2,-32716(gp)
1000d7fc:	10000326 	beq	r2,zero,1000d80c <alt_get_errno+0x24>
1000d800:	d0a00d17 	ldw	r2,-32716(gp)
1000d804:	103ee83a 	callr	r2
1000d808:	00000106 	br	1000d810 <alt_get_errno+0x28>
1000d80c:	d0a6d504 	addi	r2,gp,-25772
}
1000d810:	e037883a 	mov	sp,fp
1000d814:	dfc00117 	ldw	ra,4(sp)
1000d818:	df000017 	ldw	fp,0(sp)
1000d81c:	dec00204 	addi	sp,sp,8
1000d820:	f800283a 	ret

1000d824 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000d824:	defffb04 	addi	sp,sp,-20
1000d828:	dfc00415 	stw	ra,16(sp)
1000d82c:	df000315 	stw	fp,12(sp)
1000d830:	df000304 	addi	fp,sp,12
1000d834:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000d838:	e0bfff17 	ldw	r2,-4(fp)
1000d83c:	10000816 	blt	r2,zero,1000d860 <close+0x3c>
1000d840:	01400304 	movi	r5,12
1000d844:	e13fff17 	ldw	r4,-4(fp)
1000d848:	000097c0 	call	1000097c <__mulsi3>
1000d84c:	1007883a 	mov	r3,r2
1000d850:	00840074 	movhi	r2,4097
1000d854:	10833b04 	addi	r2,r2,3308
1000d858:	1885883a 	add	r2,r3,r2
1000d85c:	00000106 	br	1000d864 <close+0x40>
1000d860:	0005883a 	mov	r2,zero
1000d864:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000d868:	e0bffd17 	ldw	r2,-12(fp)
1000d86c:	10001926 	beq	r2,zero,1000d8d4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000d870:	e0bffd17 	ldw	r2,-12(fp)
1000d874:	10800017 	ldw	r2,0(r2)
1000d878:	10800417 	ldw	r2,16(r2)
1000d87c:	10000626 	beq	r2,zero,1000d898 <close+0x74>
1000d880:	e0bffd17 	ldw	r2,-12(fp)
1000d884:	10800017 	ldw	r2,0(r2)
1000d888:	10800417 	ldw	r2,16(r2)
1000d88c:	e13ffd17 	ldw	r4,-12(fp)
1000d890:	103ee83a 	callr	r2
1000d894:	00000106 	br	1000d89c <close+0x78>
1000d898:	0005883a 	mov	r2,zero
1000d89c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000d8a0:	e13fff17 	ldw	r4,-4(fp)
1000d8a4:	000df0c0 	call	1000df0c <alt_release_fd>
    if (rval < 0)
1000d8a8:	e0bffe17 	ldw	r2,-8(fp)
1000d8ac:	1000070e 	bge	r2,zero,1000d8cc <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000d8b0:	000d7e80 	call	1000d7e8 <alt_get_errno>
1000d8b4:	1007883a 	mov	r3,r2
1000d8b8:	e0bffe17 	ldw	r2,-8(fp)
1000d8bc:	0085c83a 	sub	r2,zero,r2
1000d8c0:	18800015 	stw	r2,0(r3)
      return -1;
1000d8c4:	00bfffc4 	movi	r2,-1
1000d8c8:	00000706 	br	1000d8e8 <close+0xc4>
    }
    return 0;
1000d8cc:	0005883a 	mov	r2,zero
1000d8d0:	00000506 	br	1000d8e8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d8d4:	000d7e80 	call	1000d7e8 <alt_get_errno>
1000d8d8:	1007883a 	mov	r3,r2
1000d8dc:	00801444 	movi	r2,81
1000d8e0:	18800015 	stw	r2,0(r3)
    return -1;
1000d8e4:	00bfffc4 	movi	r2,-1
  }
}
1000d8e8:	e037883a 	mov	sp,fp
1000d8ec:	dfc00117 	ldw	ra,4(sp)
1000d8f0:	df000017 	ldw	fp,0(sp)
1000d8f4:	dec00204 	addi	sp,sp,8
1000d8f8:	f800283a 	ret

1000d8fc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000d8fc:	defffc04 	addi	sp,sp,-16
1000d900:	df000315 	stw	fp,12(sp)
1000d904:	df000304 	addi	fp,sp,12
1000d908:	e13ffd15 	stw	r4,-12(fp)
1000d90c:	e17ffe15 	stw	r5,-8(fp)
1000d910:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000d914:	e0bfff17 	ldw	r2,-4(fp)
}
1000d918:	e037883a 	mov	sp,fp
1000d91c:	df000017 	ldw	fp,0(sp)
1000d920:	dec00104 	addi	sp,sp,4
1000d924:	f800283a 	ret

1000d928 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000d928:	defffe04 	addi	sp,sp,-8
1000d92c:	dfc00115 	stw	ra,4(sp)
1000d930:	df000015 	stw	fp,0(sp)
1000d934:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000d938:	d0a00d17 	ldw	r2,-32716(gp)
1000d93c:	10000326 	beq	r2,zero,1000d94c <alt_get_errno+0x24>
1000d940:	d0a00d17 	ldw	r2,-32716(gp)
1000d944:	103ee83a 	callr	r2
1000d948:	00000106 	br	1000d950 <alt_get_errno+0x28>
1000d94c:	d0a6d504 	addi	r2,gp,-25772
}
1000d950:	e037883a 	mov	sp,fp
1000d954:	dfc00117 	ldw	ra,4(sp)
1000d958:	df000017 	ldw	fp,0(sp)
1000d95c:	dec00204 	addi	sp,sp,8
1000d960:	f800283a 	ret

1000d964 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000d964:	defffb04 	addi	sp,sp,-20
1000d968:	dfc00415 	stw	ra,16(sp)
1000d96c:	df000315 	stw	fp,12(sp)
1000d970:	df000304 	addi	fp,sp,12
1000d974:	e13ffe15 	stw	r4,-8(fp)
1000d978:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000d97c:	e0bffe17 	ldw	r2,-8(fp)
1000d980:	10000816 	blt	r2,zero,1000d9a4 <fstat+0x40>
1000d984:	01400304 	movi	r5,12
1000d988:	e13ffe17 	ldw	r4,-8(fp)
1000d98c:	000097c0 	call	1000097c <__mulsi3>
1000d990:	1007883a 	mov	r3,r2
1000d994:	00840074 	movhi	r2,4097
1000d998:	10833b04 	addi	r2,r2,3308
1000d99c:	1885883a 	add	r2,r3,r2
1000d9a0:	00000106 	br	1000d9a8 <fstat+0x44>
1000d9a4:	0005883a 	mov	r2,zero
1000d9a8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000d9ac:	e0bffd17 	ldw	r2,-12(fp)
1000d9b0:	10001026 	beq	r2,zero,1000d9f4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000d9b4:	e0bffd17 	ldw	r2,-12(fp)
1000d9b8:	10800017 	ldw	r2,0(r2)
1000d9bc:	10800817 	ldw	r2,32(r2)
1000d9c0:	10000726 	beq	r2,zero,1000d9e0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000d9c4:	e0bffd17 	ldw	r2,-12(fp)
1000d9c8:	10800017 	ldw	r2,0(r2)
1000d9cc:	10800817 	ldw	r2,32(r2)
1000d9d0:	e17fff17 	ldw	r5,-4(fp)
1000d9d4:	e13ffd17 	ldw	r4,-12(fp)
1000d9d8:	103ee83a 	callr	r2
1000d9dc:	00000a06 	br	1000da08 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000d9e0:	e0bfff17 	ldw	r2,-4(fp)
1000d9e4:	00c80004 	movi	r3,8192
1000d9e8:	10c00115 	stw	r3,4(r2)
      return 0;
1000d9ec:	0005883a 	mov	r2,zero
1000d9f0:	00000506 	br	1000da08 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000d9f4:	000d9280 	call	1000d928 <alt_get_errno>
1000d9f8:	1007883a 	mov	r3,r2
1000d9fc:	00801444 	movi	r2,81
1000da00:	18800015 	stw	r2,0(r3)
    return -1;
1000da04:	00bfffc4 	movi	r2,-1
  }
}
1000da08:	e037883a 	mov	sp,fp
1000da0c:	dfc00117 	ldw	ra,4(sp)
1000da10:	df000017 	ldw	fp,0(sp)
1000da14:	dec00204 	addi	sp,sp,8
1000da18:	f800283a 	ret

1000da1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000da1c:	defffe04 	addi	sp,sp,-8
1000da20:	dfc00115 	stw	ra,4(sp)
1000da24:	df000015 	stw	fp,0(sp)
1000da28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000da2c:	d0a00d17 	ldw	r2,-32716(gp)
1000da30:	10000326 	beq	r2,zero,1000da40 <alt_get_errno+0x24>
1000da34:	d0a00d17 	ldw	r2,-32716(gp)
1000da38:	103ee83a 	callr	r2
1000da3c:	00000106 	br	1000da44 <alt_get_errno+0x28>
1000da40:	d0a6d504 	addi	r2,gp,-25772
}
1000da44:	e037883a 	mov	sp,fp
1000da48:	dfc00117 	ldw	ra,4(sp)
1000da4c:	df000017 	ldw	fp,0(sp)
1000da50:	dec00204 	addi	sp,sp,8
1000da54:	f800283a 	ret

1000da58 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000da58:	deffed04 	addi	sp,sp,-76
1000da5c:	dfc01215 	stw	ra,72(sp)
1000da60:	df001115 	stw	fp,68(sp)
1000da64:	df001104 	addi	fp,sp,68
1000da68:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000da6c:	e0bfff17 	ldw	r2,-4(fp)
1000da70:	10000816 	blt	r2,zero,1000da94 <isatty+0x3c>
1000da74:	01400304 	movi	r5,12
1000da78:	e13fff17 	ldw	r4,-4(fp)
1000da7c:	000097c0 	call	1000097c <__mulsi3>
1000da80:	1007883a 	mov	r3,r2
1000da84:	00840074 	movhi	r2,4097
1000da88:	10833b04 	addi	r2,r2,3308
1000da8c:	1885883a 	add	r2,r3,r2
1000da90:	00000106 	br	1000da98 <isatty+0x40>
1000da94:	0005883a 	mov	r2,zero
1000da98:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000da9c:	e0bfef17 	ldw	r2,-68(fp)
1000daa0:	10000e26 	beq	r2,zero,1000dadc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000daa4:	e0bfef17 	ldw	r2,-68(fp)
1000daa8:	10800017 	ldw	r2,0(r2)
1000daac:	10800817 	ldw	r2,32(r2)
1000dab0:	1000021e 	bne	r2,zero,1000dabc <isatty+0x64>
    {
      return 1;
1000dab4:	00800044 	movi	r2,1
1000dab8:	00000d06 	br	1000daf0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000dabc:	e0bff004 	addi	r2,fp,-64
1000dac0:	100b883a 	mov	r5,r2
1000dac4:	e13fff17 	ldw	r4,-4(fp)
1000dac8:	000d9640 	call	1000d964 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000dacc:	e0bff117 	ldw	r2,-60(fp)
1000dad0:	10880020 	cmpeqi	r2,r2,8192
1000dad4:	10803fcc 	andi	r2,r2,255
1000dad8:	00000506 	br	1000daf0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000dadc:	000da1c0 	call	1000da1c <alt_get_errno>
1000dae0:	1007883a 	mov	r3,r2
1000dae4:	00801444 	movi	r2,81
1000dae8:	18800015 	stw	r2,0(r3)
    return 0;
1000daec:	0005883a 	mov	r2,zero
  }
}
1000daf0:	e037883a 	mov	sp,fp
1000daf4:	dfc00117 	ldw	ra,4(sp)
1000daf8:	df000017 	ldw	fp,0(sp)
1000dafc:	dec00204 	addi	sp,sp,8
1000db00:	f800283a 	ret

1000db04 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000db04:	defffc04 	addi	sp,sp,-16
1000db08:	df000315 	stw	fp,12(sp)
1000db0c:	df000304 	addi	fp,sp,12
1000db10:	e13ffd15 	stw	r4,-12(fp)
1000db14:	e17ffe15 	stw	r5,-8(fp)
1000db18:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000db1c:	e0fffe17 	ldw	r3,-8(fp)
1000db20:	e0bffd17 	ldw	r2,-12(fp)
1000db24:	18800c26 	beq	r3,r2,1000db58 <alt_load_section+0x54>
  {
    while( to != end )
1000db28:	00000806 	br	1000db4c <alt_load_section+0x48>
    {
      *to++ = *from++;
1000db2c:	e0bffe17 	ldw	r2,-8(fp)
1000db30:	10c00104 	addi	r3,r2,4
1000db34:	e0fffe15 	stw	r3,-8(fp)
1000db38:	e0fffd17 	ldw	r3,-12(fp)
1000db3c:	19000104 	addi	r4,r3,4
1000db40:	e13ffd15 	stw	r4,-12(fp)
1000db44:	18c00017 	ldw	r3,0(r3)
1000db48:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000db4c:	e0fffe17 	ldw	r3,-8(fp)
1000db50:	e0bfff17 	ldw	r2,-4(fp)
1000db54:	18bff51e 	bne	r3,r2,1000db2c <__alt_data_end+0xf800db2c>
    {
      *to++ = *from++;
    }
  }
}
1000db58:	0001883a 	nop
1000db5c:	e037883a 	mov	sp,fp
1000db60:	df000017 	ldw	fp,0(sp)
1000db64:	dec00104 	addi	sp,sp,4
1000db68:	f800283a 	ret

1000db6c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000db6c:	defffe04 	addi	sp,sp,-8
1000db70:	dfc00115 	stw	ra,4(sp)
1000db74:	df000015 	stw	fp,0(sp)
1000db78:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000db7c:	01840074 	movhi	r6,4097
1000db80:	3187c504 	addi	r6,r6,7956
1000db84:	01440074 	movhi	r5,4097
1000db88:	29410804 	addi	r5,r5,1056
1000db8c:	01040074 	movhi	r4,4097
1000db90:	2107c504 	addi	r4,r4,7956
1000db94:	000db040 	call	1000db04 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000db98:	01840034 	movhi	r6,4096
1000db9c:	31808c04 	addi	r6,r6,560
1000dba0:	01440034 	movhi	r5,4096
1000dba4:	29400804 	addi	r5,r5,32
1000dba8:	01040034 	movhi	r4,4096
1000dbac:	21000804 	addi	r4,r4,32
1000dbb0:	000db040 	call	1000db04 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000dbb4:	01840074 	movhi	r6,4097
1000dbb8:	31810804 	addi	r6,r6,1056
1000dbbc:	01440074 	movhi	r5,4097
1000dbc0:	29400204 	addi	r5,r5,8
1000dbc4:	01040074 	movhi	r4,4097
1000dbc8:	21000204 	addi	r4,r4,8
1000dbcc:	000db040 	call	1000db04 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000dbd0:	000ef500 	call	1000ef50 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000dbd4:	000f1100 	call	1000f110 <alt_icache_flush_all>
}
1000dbd8:	0001883a 	nop
1000dbdc:	e037883a 	mov	sp,fp
1000dbe0:	dfc00117 	ldw	ra,4(sp)
1000dbe4:	df000017 	ldw	fp,0(sp)
1000dbe8:	dec00204 	addi	sp,sp,8
1000dbec:	f800283a 	ret

1000dbf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000dbf0:	defffe04 	addi	sp,sp,-8
1000dbf4:	dfc00115 	stw	ra,4(sp)
1000dbf8:	df000015 	stw	fp,0(sp)
1000dbfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dc00:	d0a00d17 	ldw	r2,-32716(gp)
1000dc04:	10000326 	beq	r2,zero,1000dc14 <alt_get_errno+0x24>
1000dc08:	d0a00d17 	ldw	r2,-32716(gp)
1000dc0c:	103ee83a 	callr	r2
1000dc10:	00000106 	br	1000dc18 <alt_get_errno+0x28>
1000dc14:	d0a6d504 	addi	r2,gp,-25772
}
1000dc18:	e037883a 	mov	sp,fp
1000dc1c:	dfc00117 	ldw	ra,4(sp)
1000dc20:	df000017 	ldw	fp,0(sp)
1000dc24:	dec00204 	addi	sp,sp,8
1000dc28:	f800283a 	ret

1000dc2c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000dc2c:	defff904 	addi	sp,sp,-28
1000dc30:	dfc00615 	stw	ra,24(sp)
1000dc34:	df000515 	stw	fp,20(sp)
1000dc38:	df000504 	addi	fp,sp,20
1000dc3c:	e13ffd15 	stw	r4,-12(fp)
1000dc40:	e17ffe15 	stw	r5,-8(fp)
1000dc44:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000dc48:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000dc4c:	e0bffd17 	ldw	r2,-12(fp)
1000dc50:	10000816 	blt	r2,zero,1000dc74 <lseek+0x48>
1000dc54:	01400304 	movi	r5,12
1000dc58:	e13ffd17 	ldw	r4,-12(fp)
1000dc5c:	000097c0 	call	1000097c <__mulsi3>
1000dc60:	1007883a 	mov	r3,r2
1000dc64:	00840074 	movhi	r2,4097
1000dc68:	10833b04 	addi	r2,r2,3308
1000dc6c:	1885883a 	add	r2,r3,r2
1000dc70:	00000106 	br	1000dc78 <lseek+0x4c>
1000dc74:	0005883a 	mov	r2,zero
1000dc78:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000dc7c:	e0bffc17 	ldw	r2,-16(fp)
1000dc80:	10001026 	beq	r2,zero,1000dcc4 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000dc84:	e0bffc17 	ldw	r2,-16(fp)
1000dc88:	10800017 	ldw	r2,0(r2)
1000dc8c:	10800717 	ldw	r2,28(r2)
1000dc90:	10000926 	beq	r2,zero,1000dcb8 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000dc94:	e0bffc17 	ldw	r2,-16(fp)
1000dc98:	10800017 	ldw	r2,0(r2)
1000dc9c:	10800717 	ldw	r2,28(r2)
1000dca0:	e1bfff17 	ldw	r6,-4(fp)
1000dca4:	e17ffe17 	ldw	r5,-8(fp)
1000dca8:	e13ffc17 	ldw	r4,-16(fp)
1000dcac:	103ee83a 	callr	r2
1000dcb0:	e0bffb15 	stw	r2,-20(fp)
1000dcb4:	00000506 	br	1000dccc <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000dcb8:	00bfde84 	movi	r2,-134
1000dcbc:	e0bffb15 	stw	r2,-20(fp)
1000dcc0:	00000206 	br	1000dccc <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000dcc4:	00bfebc4 	movi	r2,-81
1000dcc8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000dccc:	e0bffb17 	ldw	r2,-20(fp)
1000dcd0:	1000070e 	bge	r2,zero,1000dcf0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000dcd4:	000dbf00 	call	1000dbf0 <alt_get_errno>
1000dcd8:	1007883a 	mov	r3,r2
1000dcdc:	e0bffb17 	ldw	r2,-20(fp)
1000dce0:	0085c83a 	sub	r2,zero,r2
1000dce4:	18800015 	stw	r2,0(r3)
    rc = -1;
1000dce8:	00bfffc4 	movi	r2,-1
1000dcec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000dcf0:	e0bffb17 	ldw	r2,-20(fp)
}
1000dcf4:	e037883a 	mov	sp,fp
1000dcf8:	dfc00117 	ldw	ra,4(sp)
1000dcfc:	df000017 	ldw	fp,0(sp)
1000dd00:	dec00204 	addi	sp,sp,8
1000dd04:	f800283a 	ret

1000dd08 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000dd08:	defffd04 	addi	sp,sp,-12
1000dd0c:	dfc00215 	stw	ra,8(sp)
1000dd10:	df000115 	stw	fp,4(sp)
1000dd14:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000dd18:	0009883a 	mov	r4,zero
1000dd1c:	000e1e00 	call	1000e1e0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000dd20:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000dd24:	000e2180 	call	1000e218 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000dd28:	01840074 	movhi	r6,4097
1000dd2c:	3180fe04 	addi	r6,r6,1016
1000dd30:	01440074 	movhi	r5,4097
1000dd34:	2940fe04 	addi	r5,r5,1016
1000dd38:	01040074 	movhi	r4,4097
1000dd3c:	2100fe04 	addi	r4,r4,1016
1000dd40:	000f4b40 	call	1000f4b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000dd44:	000f0500 	call	1000f050 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000dd48:	01040074 	movhi	r4,4097
1000dd4c:	213c2c04 	addi	r4,r4,-3920
1000dd50:	000fc740 	call	1000fc74 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000dd54:	d0a6d617 	ldw	r2,-25768(gp)
1000dd58:	d0e6d717 	ldw	r3,-25764(gp)
1000dd5c:	d126d817 	ldw	r4,-25760(gp)
1000dd60:	200d883a 	mov	r6,r4
1000dd64:	180b883a 	mov	r5,r3
1000dd68:	1009883a 	mov	r4,r2
1000dd6c:	000026c0 	call	1000026c <main>
1000dd70:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000dd74:	01000044 	movi	r4,1
1000dd78:	000d8240 	call	1000d824 <close>
  exit (result);
1000dd7c:	e13fff17 	ldw	r4,-4(fp)
1000dd80:	000fc880 	call	1000fc88 <exit>

1000dd84 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000dd84:	defffe04 	addi	sp,sp,-8
1000dd88:	df000115 	stw	fp,4(sp)
1000dd8c:	df000104 	addi	fp,sp,4
1000dd90:	e13fff15 	stw	r4,-4(fp)
}
1000dd94:	0001883a 	nop
1000dd98:	e037883a 	mov	sp,fp
1000dd9c:	df000017 	ldw	fp,0(sp)
1000dda0:	dec00104 	addi	sp,sp,4
1000dda4:	f800283a 	ret

1000dda8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000dda8:	defffe04 	addi	sp,sp,-8
1000ddac:	df000115 	stw	fp,4(sp)
1000ddb0:	df000104 	addi	fp,sp,4
1000ddb4:	e13fff15 	stw	r4,-4(fp)
}
1000ddb8:	0001883a 	nop
1000ddbc:	e037883a 	mov	sp,fp
1000ddc0:	df000017 	ldw	fp,0(sp)
1000ddc4:	dec00104 	addi	sp,sp,4
1000ddc8:	f800283a 	ret

1000ddcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ddcc:	defffe04 	addi	sp,sp,-8
1000ddd0:	dfc00115 	stw	ra,4(sp)
1000ddd4:	df000015 	stw	fp,0(sp)
1000ddd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000dddc:	d0a00d17 	ldw	r2,-32716(gp)
1000dde0:	10000326 	beq	r2,zero,1000ddf0 <alt_get_errno+0x24>
1000dde4:	d0a00d17 	ldw	r2,-32716(gp)
1000dde8:	103ee83a 	callr	r2
1000ddec:	00000106 	br	1000ddf4 <alt_get_errno+0x28>
1000ddf0:	d0a6d504 	addi	r2,gp,-25772
}
1000ddf4:	e037883a 	mov	sp,fp
1000ddf8:	dfc00117 	ldw	ra,4(sp)
1000ddfc:	df000017 	ldw	fp,0(sp)
1000de00:	dec00204 	addi	sp,sp,8
1000de04:	f800283a 	ret

1000de08 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000de08:	defff904 	addi	sp,sp,-28
1000de0c:	dfc00615 	stw	ra,24(sp)
1000de10:	df000515 	stw	fp,20(sp)
1000de14:	df000504 	addi	fp,sp,20
1000de18:	e13ffd15 	stw	r4,-12(fp)
1000de1c:	e17ffe15 	stw	r5,-8(fp)
1000de20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000de24:	e0bffd17 	ldw	r2,-12(fp)
1000de28:	10000816 	blt	r2,zero,1000de4c <read+0x44>
1000de2c:	01400304 	movi	r5,12
1000de30:	e13ffd17 	ldw	r4,-12(fp)
1000de34:	000097c0 	call	1000097c <__mulsi3>
1000de38:	1007883a 	mov	r3,r2
1000de3c:	00840074 	movhi	r2,4097
1000de40:	10833b04 	addi	r2,r2,3308
1000de44:	1885883a 	add	r2,r3,r2
1000de48:	00000106 	br	1000de50 <read+0x48>
1000de4c:	0005883a 	mov	r2,zero
1000de50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000de54:	e0bffb17 	ldw	r2,-20(fp)
1000de58:	10002226 	beq	r2,zero,1000dee4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000de5c:	e0bffb17 	ldw	r2,-20(fp)
1000de60:	10800217 	ldw	r2,8(r2)
1000de64:	108000cc 	andi	r2,r2,3
1000de68:	10800060 	cmpeqi	r2,r2,1
1000de6c:	1000181e 	bne	r2,zero,1000ded0 <read+0xc8>
        (fd->dev->read))
1000de70:	e0bffb17 	ldw	r2,-20(fp)
1000de74:	10800017 	ldw	r2,0(r2)
1000de78:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000de7c:	10001426 	beq	r2,zero,1000ded0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000de80:	e0bffb17 	ldw	r2,-20(fp)
1000de84:	10800017 	ldw	r2,0(r2)
1000de88:	10800517 	ldw	r2,20(r2)
1000de8c:	e0ffff17 	ldw	r3,-4(fp)
1000de90:	180d883a 	mov	r6,r3
1000de94:	e17ffe17 	ldw	r5,-8(fp)
1000de98:	e13ffb17 	ldw	r4,-20(fp)
1000de9c:	103ee83a 	callr	r2
1000dea0:	e0bffc15 	stw	r2,-16(fp)
1000dea4:	e0bffc17 	ldw	r2,-16(fp)
1000dea8:	1000070e 	bge	r2,zero,1000dec8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000deac:	000ddcc0 	call	1000ddcc <alt_get_errno>
1000deb0:	1007883a 	mov	r3,r2
1000deb4:	e0bffc17 	ldw	r2,-16(fp)
1000deb8:	0085c83a 	sub	r2,zero,r2
1000debc:	18800015 	stw	r2,0(r3)
          return -1;
1000dec0:	00bfffc4 	movi	r2,-1
1000dec4:	00000c06 	br	1000def8 <read+0xf0>
        }
        return rval;
1000dec8:	e0bffc17 	ldw	r2,-16(fp)
1000decc:	00000a06 	br	1000def8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000ded0:	000ddcc0 	call	1000ddcc <alt_get_errno>
1000ded4:	1007883a 	mov	r3,r2
1000ded8:	00800344 	movi	r2,13
1000dedc:	18800015 	stw	r2,0(r3)
1000dee0:	00000406 	br	1000def4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000dee4:	000ddcc0 	call	1000ddcc <alt_get_errno>
1000dee8:	1007883a 	mov	r3,r2
1000deec:	00801444 	movi	r2,81
1000def0:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000def4:	00bfffc4 	movi	r2,-1
}
1000def8:	e037883a 	mov	sp,fp
1000defc:	dfc00117 	ldw	ra,4(sp)
1000df00:	df000017 	ldw	fp,0(sp)
1000df04:	dec00204 	addi	sp,sp,8
1000df08:	f800283a 	ret

1000df0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000df0c:	defffc04 	addi	sp,sp,-16
1000df10:	dfc00315 	stw	ra,12(sp)
1000df14:	df000215 	stw	fp,8(sp)
1000df18:	dc000115 	stw	r16,4(sp)
1000df1c:	df000204 	addi	fp,sp,8
1000df20:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000df24:	e0bffe17 	ldw	r2,-8(fp)
1000df28:	108000d0 	cmplti	r2,r2,3
1000df2c:	1000111e 	bne	r2,zero,1000df74 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000df30:	04040074 	movhi	r16,4097
1000df34:	84033b04 	addi	r16,r16,3308
1000df38:	e0bffe17 	ldw	r2,-8(fp)
1000df3c:	01400304 	movi	r5,12
1000df40:	1009883a 	mov	r4,r2
1000df44:	000097c0 	call	1000097c <__mulsi3>
1000df48:	8085883a 	add	r2,r16,r2
1000df4c:	10800204 	addi	r2,r2,8
1000df50:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000df54:	04040074 	movhi	r16,4097
1000df58:	84033b04 	addi	r16,r16,3308
1000df5c:	e0bffe17 	ldw	r2,-8(fp)
1000df60:	01400304 	movi	r5,12
1000df64:	1009883a 	mov	r4,r2
1000df68:	000097c0 	call	1000097c <__mulsi3>
1000df6c:	8085883a 	add	r2,r16,r2
1000df70:	10000015 	stw	zero,0(r2)
  }
}
1000df74:	0001883a 	nop
1000df78:	e6ffff04 	addi	sp,fp,-4
1000df7c:	dfc00217 	ldw	ra,8(sp)
1000df80:	df000117 	ldw	fp,4(sp)
1000df84:	dc000017 	ldw	r16,0(sp)
1000df88:	dec00304 	addi	sp,sp,12
1000df8c:	f800283a 	ret

1000df90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000df90:	defff904 	addi	sp,sp,-28
1000df94:	df000615 	stw	fp,24(sp)
1000df98:	df000604 	addi	fp,sp,24
1000df9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000dfa0:	0005303a 	rdctl	r2,status
1000dfa4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000dfa8:	e0fffe17 	ldw	r3,-8(fp)
1000dfac:	00bfff84 	movi	r2,-2
1000dfb0:	1884703a 	and	r2,r3,r2
1000dfb4:	1001703a 	wrctl	status,r2
  
  return context;
1000dfb8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000dfbc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000dfc0:	d0a00e17 	ldw	r2,-32712(gp)
1000dfc4:	10c000c4 	addi	r3,r2,3
1000dfc8:	00bfff04 	movi	r2,-4
1000dfcc:	1884703a 	and	r2,r3,r2
1000dfd0:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000dfd4:	d0e00e17 	ldw	r3,-32712(gp)
1000dfd8:	e0bfff17 	ldw	r2,-4(fp)
1000dfdc:	1887883a 	add	r3,r3,r2
1000dfe0:	00860034 	movhi	r2,6144
1000dfe4:	10800004 	addi	r2,r2,0
1000dfe8:	10c0062e 	bgeu	r2,r3,1000e004 <sbrk+0x74>
1000dfec:	e0bffb17 	ldw	r2,-20(fp)
1000dff0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000dff4:	e0bffa17 	ldw	r2,-24(fp)
1000dff8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000dffc:	00bfffc4 	movi	r2,-1
1000e000:	00000b06 	br	1000e030 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000e004:	d0a00e17 	ldw	r2,-32712(gp)
1000e008:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1000e00c:	d0e00e17 	ldw	r3,-32712(gp)
1000e010:	e0bfff17 	ldw	r2,-4(fp)
1000e014:	1885883a 	add	r2,r3,r2
1000e018:	d0a00e15 	stw	r2,-32712(gp)
1000e01c:	e0bffb17 	ldw	r2,-20(fp)
1000e020:	e0bffc15 	stw	r2,-16(fp)
1000e024:	e0bffc17 	ldw	r2,-16(fp)
1000e028:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000e02c:	e0bffd17 	ldw	r2,-12(fp)
} 
1000e030:	e037883a 	mov	sp,fp
1000e034:	df000017 	ldw	fp,0(sp)
1000e038:	dec00104 	addi	sp,sp,4
1000e03c:	f800283a 	ret

1000e040 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000e040:	defffd04 	addi	sp,sp,-12
1000e044:	dfc00215 	stw	ra,8(sp)
1000e048:	df000115 	stw	fp,4(sp)
1000e04c:	df000104 	addi	fp,sp,4
1000e050:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000e054:	e13fff17 	ldw	r4,-4(fp)
1000e058:	000edf80 	call	1000edf8 <alt_busy_sleep>
}
1000e05c:	e037883a 	mov	sp,fp
1000e060:	dfc00117 	ldw	ra,4(sp)
1000e064:	df000017 	ldw	fp,0(sp)
1000e068:	dec00204 	addi	sp,sp,8
1000e06c:	f800283a 	ret

1000e070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000e070:	defffe04 	addi	sp,sp,-8
1000e074:	dfc00115 	stw	ra,4(sp)
1000e078:	df000015 	stw	fp,0(sp)
1000e07c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000e080:	d0a00d17 	ldw	r2,-32716(gp)
1000e084:	10000326 	beq	r2,zero,1000e094 <alt_get_errno+0x24>
1000e088:	d0a00d17 	ldw	r2,-32716(gp)
1000e08c:	103ee83a 	callr	r2
1000e090:	00000106 	br	1000e098 <alt_get_errno+0x28>
1000e094:	d0a6d504 	addi	r2,gp,-25772
}
1000e098:	e037883a 	mov	sp,fp
1000e09c:	dfc00117 	ldw	ra,4(sp)
1000e0a0:	df000017 	ldw	fp,0(sp)
1000e0a4:	dec00204 	addi	sp,sp,8
1000e0a8:	f800283a 	ret

1000e0ac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000e0ac:	defff904 	addi	sp,sp,-28
1000e0b0:	dfc00615 	stw	ra,24(sp)
1000e0b4:	df000515 	stw	fp,20(sp)
1000e0b8:	df000504 	addi	fp,sp,20
1000e0bc:	e13ffd15 	stw	r4,-12(fp)
1000e0c0:	e17ffe15 	stw	r5,-8(fp)
1000e0c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000e0c8:	e0bffd17 	ldw	r2,-12(fp)
1000e0cc:	10000816 	blt	r2,zero,1000e0f0 <write+0x44>
1000e0d0:	01400304 	movi	r5,12
1000e0d4:	e13ffd17 	ldw	r4,-12(fp)
1000e0d8:	000097c0 	call	1000097c <__mulsi3>
1000e0dc:	1007883a 	mov	r3,r2
1000e0e0:	00840074 	movhi	r2,4097
1000e0e4:	10833b04 	addi	r2,r2,3308
1000e0e8:	1885883a 	add	r2,r3,r2
1000e0ec:	00000106 	br	1000e0f4 <write+0x48>
1000e0f0:	0005883a 	mov	r2,zero
1000e0f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000e0f8:	e0bffb17 	ldw	r2,-20(fp)
1000e0fc:	10002126 	beq	r2,zero,1000e184 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000e100:	e0bffb17 	ldw	r2,-20(fp)
1000e104:	10800217 	ldw	r2,8(r2)
1000e108:	108000cc 	andi	r2,r2,3
1000e10c:	10001826 	beq	r2,zero,1000e170 <write+0xc4>
1000e110:	e0bffb17 	ldw	r2,-20(fp)
1000e114:	10800017 	ldw	r2,0(r2)
1000e118:	10800617 	ldw	r2,24(r2)
1000e11c:	10001426 	beq	r2,zero,1000e170 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000e120:	e0bffb17 	ldw	r2,-20(fp)
1000e124:	10800017 	ldw	r2,0(r2)
1000e128:	10800617 	ldw	r2,24(r2)
1000e12c:	e0ffff17 	ldw	r3,-4(fp)
1000e130:	180d883a 	mov	r6,r3
1000e134:	e17ffe17 	ldw	r5,-8(fp)
1000e138:	e13ffb17 	ldw	r4,-20(fp)
1000e13c:	103ee83a 	callr	r2
1000e140:	e0bffc15 	stw	r2,-16(fp)
1000e144:	e0bffc17 	ldw	r2,-16(fp)
1000e148:	1000070e 	bge	r2,zero,1000e168 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000e14c:	000e0700 	call	1000e070 <alt_get_errno>
1000e150:	1007883a 	mov	r3,r2
1000e154:	e0bffc17 	ldw	r2,-16(fp)
1000e158:	0085c83a 	sub	r2,zero,r2
1000e15c:	18800015 	stw	r2,0(r3)
        return -1;
1000e160:	00bfffc4 	movi	r2,-1
1000e164:	00000c06 	br	1000e198 <write+0xec>
      }
      return rval;
1000e168:	e0bffc17 	ldw	r2,-16(fp)
1000e16c:	00000a06 	br	1000e198 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000e170:	000e0700 	call	1000e070 <alt_get_errno>
1000e174:	1007883a 	mov	r3,r2
1000e178:	00800344 	movi	r2,13
1000e17c:	18800015 	stw	r2,0(r3)
1000e180:	00000406 	br	1000e194 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000e184:	000e0700 	call	1000e070 <alt_get_errno>
1000e188:	1007883a 	mov	r3,r2
1000e18c:	00801444 	movi	r2,81
1000e190:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000e194:	00bfffc4 	movi	r2,-1
}
1000e198:	e037883a 	mov	sp,fp
1000e19c:	dfc00117 	ldw	ra,4(sp)
1000e1a0:	df000017 	ldw	fp,0(sp)
1000e1a4:	dec00204 	addi	sp,sp,8
1000e1a8:	f800283a 	ret

1000e1ac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000e1ac:	defffd04 	addi	sp,sp,-12
1000e1b0:	dfc00215 	stw	ra,8(sp)
1000e1b4:	df000115 	stw	fp,4(sp)
1000e1b8:	df000104 	addi	fp,sp,4
1000e1bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000e1c0:	d1600a04 	addi	r5,gp,-32728
1000e1c4:	e13fff17 	ldw	r4,-4(fp)
1000e1c8:	000efac0 	call	1000efac <alt_dev_llist_insert>
}
1000e1cc:	e037883a 	mov	sp,fp
1000e1d0:	dfc00117 	ldw	ra,4(sp)
1000e1d4:	df000017 	ldw	fp,0(sp)
1000e1d8:	dec00204 	addi	sp,sp,8
1000e1dc:	f800283a 	ret

1000e1e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000e1e0:	defffd04 	addi	sp,sp,-12
1000e1e4:	dfc00215 	stw	ra,8(sp)
1000e1e8:	df000115 	stw	fp,4(sp)
1000e1ec:	df000104 	addi	fp,sp,4
1000e1f0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1000e1f4:	000f9580 	call	1000f958 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000e1f8:	00800044 	movi	r2,1
1000e1fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000e200:	0001883a 	nop
1000e204:	e037883a 	mov	sp,fp
1000e208:	dfc00117 	ldw	ra,4(sp)
1000e20c:	df000017 	ldw	fp,0(sp)
1000e210:	dec00204 	addi	sp,sp,8
1000e214:	f800283a 	ret

1000e218 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000e218:	defffe04 	addi	sp,sp,-8
1000e21c:	dfc00115 	stw	ra,4(sp)
1000e220:	df000015 	stw	fp,0(sp)
1000e224:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000e228:	01800144 	movi	r6,5
1000e22c:	000b883a 	mov	r5,zero
1000e230:	01040074 	movhi	r4,4097
1000e234:	2103a504 	addi	r4,r4,3732
1000e238:	000e3c80 	call	1000e3c8 <altera_avalon_jtag_uart_init>
1000e23c:	01040074 	movhi	r4,4097
1000e240:	21039b04 	addi	r4,r4,3692
1000e244:	000e1ac0 	call	1000e1ac <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000e248:	0001883a 	nop
}
1000e24c:	0001883a 	nop
1000e250:	e037883a 	mov	sp,fp
1000e254:	dfc00117 	ldw	ra,4(sp)
1000e258:	df000017 	ldw	fp,0(sp)
1000e25c:	dec00204 	addi	sp,sp,8
1000e260:	f800283a 	ret

1000e264 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000e264:	defffa04 	addi	sp,sp,-24
1000e268:	dfc00515 	stw	ra,20(sp)
1000e26c:	df000415 	stw	fp,16(sp)
1000e270:	df000404 	addi	fp,sp,16
1000e274:	e13ffd15 	stw	r4,-12(fp)
1000e278:	e17ffe15 	stw	r5,-8(fp)
1000e27c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e280:	e0bffd17 	ldw	r2,-12(fp)
1000e284:	10800017 	ldw	r2,0(r2)
1000e288:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000e28c:	e0bffc17 	ldw	r2,-16(fp)
1000e290:	10c00a04 	addi	r3,r2,40
1000e294:	e0bffd17 	ldw	r2,-12(fp)
1000e298:	10800217 	ldw	r2,8(r2)
1000e29c:	100f883a 	mov	r7,r2
1000e2a0:	e1bfff17 	ldw	r6,-4(fp)
1000e2a4:	e17ffe17 	ldw	r5,-8(fp)
1000e2a8:	1809883a 	mov	r4,r3
1000e2ac:	000e88c0 	call	1000e88c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000e2b0:	e037883a 	mov	sp,fp
1000e2b4:	dfc00117 	ldw	ra,4(sp)
1000e2b8:	df000017 	ldw	fp,0(sp)
1000e2bc:	dec00204 	addi	sp,sp,8
1000e2c0:	f800283a 	ret

1000e2c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000e2c4:	defffa04 	addi	sp,sp,-24
1000e2c8:	dfc00515 	stw	ra,20(sp)
1000e2cc:	df000415 	stw	fp,16(sp)
1000e2d0:	df000404 	addi	fp,sp,16
1000e2d4:	e13ffd15 	stw	r4,-12(fp)
1000e2d8:	e17ffe15 	stw	r5,-8(fp)
1000e2dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e2e0:	e0bffd17 	ldw	r2,-12(fp)
1000e2e4:	10800017 	ldw	r2,0(r2)
1000e2e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000e2ec:	e0bffc17 	ldw	r2,-16(fp)
1000e2f0:	10c00a04 	addi	r3,r2,40
1000e2f4:	e0bffd17 	ldw	r2,-12(fp)
1000e2f8:	10800217 	ldw	r2,8(r2)
1000e2fc:	100f883a 	mov	r7,r2
1000e300:	e1bfff17 	ldw	r6,-4(fp)
1000e304:	e17ffe17 	ldw	r5,-8(fp)
1000e308:	1809883a 	mov	r4,r3
1000e30c:	000eaa80 	call	1000eaa8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000e310:	e037883a 	mov	sp,fp
1000e314:	dfc00117 	ldw	ra,4(sp)
1000e318:	df000017 	ldw	fp,0(sp)
1000e31c:	dec00204 	addi	sp,sp,8
1000e320:	f800283a 	ret

1000e324 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000e324:	defffc04 	addi	sp,sp,-16
1000e328:	dfc00315 	stw	ra,12(sp)
1000e32c:	df000215 	stw	fp,8(sp)
1000e330:	df000204 	addi	fp,sp,8
1000e334:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000e338:	e0bfff17 	ldw	r2,-4(fp)
1000e33c:	10800017 	ldw	r2,0(r2)
1000e340:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000e344:	e0bffe17 	ldw	r2,-8(fp)
1000e348:	10c00a04 	addi	r3,r2,40
1000e34c:	e0bfff17 	ldw	r2,-4(fp)
1000e350:	10800217 	ldw	r2,8(r2)
1000e354:	100b883a 	mov	r5,r2
1000e358:	1809883a 	mov	r4,r3
1000e35c:	000e7340 	call	1000e734 <altera_avalon_jtag_uart_close>
}
1000e360:	e037883a 	mov	sp,fp
1000e364:	dfc00117 	ldw	ra,4(sp)
1000e368:	df000017 	ldw	fp,0(sp)
1000e36c:	dec00204 	addi	sp,sp,8
1000e370:	f800283a 	ret

1000e374 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000e374:	defffa04 	addi	sp,sp,-24
1000e378:	dfc00515 	stw	ra,20(sp)
1000e37c:	df000415 	stw	fp,16(sp)
1000e380:	df000404 	addi	fp,sp,16
1000e384:	e13ffd15 	stw	r4,-12(fp)
1000e388:	e17ffe15 	stw	r5,-8(fp)
1000e38c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000e390:	e0bffd17 	ldw	r2,-12(fp)
1000e394:	10800017 	ldw	r2,0(r2)
1000e398:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000e39c:	e0bffc17 	ldw	r2,-16(fp)
1000e3a0:	10800a04 	addi	r2,r2,40
1000e3a4:	e1bfff17 	ldw	r6,-4(fp)
1000e3a8:	e17ffe17 	ldw	r5,-8(fp)
1000e3ac:	1009883a 	mov	r4,r2
1000e3b0:	000e79c0 	call	1000e79c <altera_avalon_jtag_uart_ioctl>
}
1000e3b4:	e037883a 	mov	sp,fp
1000e3b8:	dfc00117 	ldw	ra,4(sp)
1000e3bc:	df000017 	ldw	fp,0(sp)
1000e3c0:	dec00204 	addi	sp,sp,8
1000e3c4:	f800283a 	ret

1000e3c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000e3c8:	defffa04 	addi	sp,sp,-24
1000e3cc:	dfc00515 	stw	ra,20(sp)
1000e3d0:	df000415 	stw	fp,16(sp)
1000e3d4:	df000404 	addi	fp,sp,16
1000e3d8:	e13ffd15 	stw	r4,-12(fp)
1000e3dc:	e17ffe15 	stw	r5,-8(fp)
1000e3e0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e3e4:	e0bffd17 	ldw	r2,-12(fp)
1000e3e8:	00c00044 	movi	r3,1
1000e3ec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000e3f0:	e0bffd17 	ldw	r2,-12(fp)
1000e3f4:	10800017 	ldw	r2,0(r2)
1000e3f8:	10800104 	addi	r2,r2,4
1000e3fc:	1007883a 	mov	r3,r2
1000e400:	e0bffd17 	ldw	r2,-12(fp)
1000e404:	10800817 	ldw	r2,32(r2)
1000e408:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000e40c:	e0bffe17 	ldw	r2,-8(fp)
1000e410:	e0ffff17 	ldw	r3,-4(fp)
1000e414:	d8000015 	stw	zero,0(sp)
1000e418:	e1fffd17 	ldw	r7,-12(fp)
1000e41c:	01840074 	movhi	r6,4097
1000e420:	31b92204 	addi	r6,r6,-7032
1000e424:	180b883a 	mov	r5,r3
1000e428:	1009883a 	mov	r4,r2
1000e42c:	000f1300 	call	1000f130 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000e430:	e0bffd17 	ldw	r2,-12(fp)
1000e434:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000e438:	e0bffd17 	ldw	r2,-12(fp)
1000e43c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000e440:	d0e6da17 	ldw	r3,-25752(gp)
1000e444:	e1fffd17 	ldw	r7,-12(fp)
1000e448:	01840074 	movhi	r6,4097
1000e44c:	31b9a504 	addi	r6,r6,-6508
1000e450:	180b883a 	mov	r5,r3
1000e454:	1009883a 	mov	r4,r2
1000e458:	000eccc0 	call	1000eccc <alt_alarm_start>
1000e45c:	1000040e 	bge	r2,zero,1000e470 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000e460:	e0fffd17 	ldw	r3,-12(fp)
1000e464:	00a00034 	movhi	r2,32768
1000e468:	10bfffc4 	addi	r2,r2,-1
1000e46c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000e470:	0001883a 	nop
1000e474:	e037883a 	mov	sp,fp
1000e478:	dfc00117 	ldw	ra,4(sp)
1000e47c:	df000017 	ldw	fp,0(sp)
1000e480:	dec00204 	addi	sp,sp,8
1000e484:	f800283a 	ret

1000e488 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000e488:	defff804 	addi	sp,sp,-32
1000e48c:	df000715 	stw	fp,28(sp)
1000e490:	df000704 	addi	fp,sp,28
1000e494:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000e498:	e0bfff17 	ldw	r2,-4(fp)
1000e49c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000e4a0:	e0bffb17 	ldw	r2,-20(fp)
1000e4a4:	10800017 	ldw	r2,0(r2)
1000e4a8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e4ac:	e0bffc17 	ldw	r2,-16(fp)
1000e4b0:	10800104 	addi	r2,r2,4
1000e4b4:	10800037 	ldwio	r2,0(r2)
1000e4b8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000e4bc:	e0bffd17 	ldw	r2,-12(fp)
1000e4c0:	1080c00c 	andi	r2,r2,768
1000e4c4:	10006d26 	beq	r2,zero,1000e67c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000e4c8:	e0bffd17 	ldw	r2,-12(fp)
1000e4cc:	1080400c 	andi	r2,r2,256
1000e4d0:	10003526 	beq	r2,zero,1000e5a8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000e4d4:	00800074 	movhi	r2,1
1000e4d8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e4dc:	e0bffb17 	ldw	r2,-20(fp)
1000e4e0:	10800a17 	ldw	r2,40(r2)
1000e4e4:	10800044 	addi	r2,r2,1
1000e4e8:	1081ffcc 	andi	r2,r2,2047
1000e4ec:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000e4f0:	e0bffb17 	ldw	r2,-20(fp)
1000e4f4:	10c00b17 	ldw	r3,44(r2)
1000e4f8:	e0bffe17 	ldw	r2,-8(fp)
1000e4fc:	18801526 	beq	r3,r2,1000e554 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000e500:	e0bffc17 	ldw	r2,-16(fp)
1000e504:	10800037 	ldwio	r2,0(r2)
1000e508:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000e50c:	e0bff917 	ldw	r2,-28(fp)
1000e510:	10a0000c 	andi	r2,r2,32768
1000e514:	10001126 	beq	r2,zero,1000e55c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000e518:	e0bffb17 	ldw	r2,-20(fp)
1000e51c:	10800a17 	ldw	r2,40(r2)
1000e520:	e0fff917 	ldw	r3,-28(fp)
1000e524:	1809883a 	mov	r4,r3
1000e528:	e0fffb17 	ldw	r3,-20(fp)
1000e52c:	1885883a 	add	r2,r3,r2
1000e530:	10800e04 	addi	r2,r2,56
1000e534:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e538:	e0bffb17 	ldw	r2,-20(fp)
1000e53c:	10800a17 	ldw	r2,40(r2)
1000e540:	10800044 	addi	r2,r2,1
1000e544:	10c1ffcc 	andi	r3,r2,2047
1000e548:	e0bffb17 	ldw	r2,-20(fp)
1000e54c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000e550:	003fe206 	br	1000e4dc <__alt_data_end+0xf800e4dc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1000e554:	0001883a 	nop
1000e558:	00000106 	br	1000e560 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1000e55c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000e560:	e0bff917 	ldw	r2,-28(fp)
1000e564:	10bfffec 	andhi	r2,r2,65535
1000e568:	10000f26 	beq	r2,zero,1000e5a8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000e56c:	e0bffb17 	ldw	r2,-20(fp)
1000e570:	10c00817 	ldw	r3,32(r2)
1000e574:	00bfff84 	movi	r2,-2
1000e578:	1886703a 	and	r3,r3,r2
1000e57c:	e0bffb17 	ldw	r2,-20(fp)
1000e580:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000e584:	e0bffc17 	ldw	r2,-16(fp)
1000e588:	10800104 	addi	r2,r2,4
1000e58c:	1007883a 	mov	r3,r2
1000e590:	e0bffb17 	ldw	r2,-20(fp)
1000e594:	10800817 	ldw	r2,32(r2)
1000e598:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e59c:	e0bffc17 	ldw	r2,-16(fp)
1000e5a0:	10800104 	addi	r2,r2,4
1000e5a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000e5a8:	e0bffd17 	ldw	r2,-12(fp)
1000e5ac:	1080800c 	andi	r2,r2,512
1000e5b0:	103fbe26 	beq	r2,zero,1000e4ac <__alt_data_end+0xf800e4ac>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000e5b4:	e0bffd17 	ldw	r2,-12(fp)
1000e5b8:	1004d43a 	srli	r2,r2,16
1000e5bc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e5c0:	00001406 	br	1000e614 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000e5c4:	e0bffc17 	ldw	r2,-16(fp)
1000e5c8:	e0fffb17 	ldw	r3,-20(fp)
1000e5cc:	18c00d17 	ldw	r3,52(r3)
1000e5d0:	e13ffb17 	ldw	r4,-20(fp)
1000e5d4:	20c7883a 	add	r3,r4,r3
1000e5d8:	18c20e04 	addi	r3,r3,2104
1000e5dc:	18c00003 	ldbu	r3,0(r3)
1000e5e0:	18c03fcc 	andi	r3,r3,255
1000e5e4:	18c0201c 	xori	r3,r3,128
1000e5e8:	18ffe004 	addi	r3,r3,-128
1000e5ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e5f0:	e0bffb17 	ldw	r2,-20(fp)
1000e5f4:	10800d17 	ldw	r2,52(r2)
1000e5f8:	10800044 	addi	r2,r2,1
1000e5fc:	10c1ffcc 	andi	r3,r2,2047
1000e600:	e0bffb17 	ldw	r2,-20(fp)
1000e604:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000e608:	e0bffa17 	ldw	r2,-24(fp)
1000e60c:	10bfffc4 	addi	r2,r2,-1
1000e610:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000e614:	e0bffa17 	ldw	r2,-24(fp)
1000e618:	10000526 	beq	r2,zero,1000e630 <altera_avalon_jtag_uart_irq+0x1a8>
1000e61c:	e0bffb17 	ldw	r2,-20(fp)
1000e620:	10c00d17 	ldw	r3,52(r2)
1000e624:	e0bffb17 	ldw	r2,-20(fp)
1000e628:	10800c17 	ldw	r2,48(r2)
1000e62c:	18bfe51e 	bne	r3,r2,1000e5c4 <__alt_data_end+0xf800e5c4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000e630:	e0bffa17 	ldw	r2,-24(fp)
1000e634:	103f9d26 	beq	r2,zero,1000e4ac <__alt_data_end+0xf800e4ac>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000e638:	e0bffb17 	ldw	r2,-20(fp)
1000e63c:	10c00817 	ldw	r3,32(r2)
1000e640:	00bfff44 	movi	r2,-3
1000e644:	1886703a 	and	r3,r3,r2
1000e648:	e0bffb17 	ldw	r2,-20(fp)
1000e64c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000e650:	e0bffb17 	ldw	r2,-20(fp)
1000e654:	10800017 	ldw	r2,0(r2)
1000e658:	10800104 	addi	r2,r2,4
1000e65c:	1007883a 	mov	r3,r2
1000e660:	e0bffb17 	ldw	r2,-20(fp)
1000e664:	10800817 	ldw	r2,32(r2)
1000e668:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000e66c:	e0bffc17 	ldw	r2,-16(fp)
1000e670:	10800104 	addi	r2,r2,4
1000e674:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000e678:	003f8c06 	br	1000e4ac <__alt_data_end+0xf800e4ac>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1000e67c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1000e680:	0001883a 	nop
1000e684:	e037883a 	mov	sp,fp
1000e688:	df000017 	ldw	fp,0(sp)
1000e68c:	dec00104 	addi	sp,sp,4
1000e690:	f800283a 	ret

1000e694 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000e694:	defff804 	addi	sp,sp,-32
1000e698:	df000715 	stw	fp,28(sp)
1000e69c:	df000704 	addi	fp,sp,28
1000e6a0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000e6a4:	e0bffb17 	ldw	r2,-20(fp)
1000e6a8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000e6ac:	e0bff917 	ldw	r2,-28(fp)
1000e6b0:	10800017 	ldw	r2,0(r2)
1000e6b4:	10800104 	addi	r2,r2,4
1000e6b8:	10800037 	ldwio	r2,0(r2)
1000e6bc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000e6c0:	e0bffa17 	ldw	r2,-24(fp)
1000e6c4:	1081000c 	andi	r2,r2,1024
1000e6c8:	10000b26 	beq	r2,zero,1000e6f8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000e6cc:	e0bff917 	ldw	r2,-28(fp)
1000e6d0:	10800017 	ldw	r2,0(r2)
1000e6d4:	10800104 	addi	r2,r2,4
1000e6d8:	1007883a 	mov	r3,r2
1000e6dc:	e0bff917 	ldw	r2,-28(fp)
1000e6e0:	10800817 	ldw	r2,32(r2)
1000e6e4:	10810014 	ori	r2,r2,1024
1000e6e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000e6ec:	e0bff917 	ldw	r2,-28(fp)
1000e6f0:	10000915 	stw	zero,36(r2)
1000e6f4:	00000a06 	br	1000e720 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000e6f8:	e0bff917 	ldw	r2,-28(fp)
1000e6fc:	10c00917 	ldw	r3,36(r2)
1000e700:	00a00034 	movhi	r2,32768
1000e704:	10bfff04 	addi	r2,r2,-4
1000e708:	10c00536 	bltu	r2,r3,1000e720 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000e70c:	e0bff917 	ldw	r2,-28(fp)
1000e710:	10800917 	ldw	r2,36(r2)
1000e714:	10c00044 	addi	r3,r2,1
1000e718:	e0bff917 	ldw	r2,-28(fp)
1000e71c:	10c00915 	stw	r3,36(r2)
1000e720:	d0a6da17 	ldw	r2,-25752(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000e724:	e037883a 	mov	sp,fp
1000e728:	df000017 	ldw	fp,0(sp)
1000e72c:	dec00104 	addi	sp,sp,4
1000e730:	f800283a 	ret

1000e734 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000e734:	defffd04 	addi	sp,sp,-12
1000e738:	df000215 	stw	fp,8(sp)
1000e73c:	df000204 	addi	fp,sp,8
1000e740:	e13ffe15 	stw	r4,-8(fp)
1000e744:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e748:	00000506 	br	1000e760 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000e74c:	e0bfff17 	ldw	r2,-4(fp)
1000e750:	1090000c 	andi	r2,r2,16384
1000e754:	10000226 	beq	r2,zero,1000e760 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000e758:	00bffd44 	movi	r2,-11
1000e75c:	00000b06 	br	1000e78c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000e760:	e0bffe17 	ldw	r2,-8(fp)
1000e764:	10c00d17 	ldw	r3,52(r2)
1000e768:	e0bffe17 	ldw	r2,-8(fp)
1000e76c:	10800c17 	ldw	r2,48(r2)
1000e770:	18800526 	beq	r3,r2,1000e788 <altera_avalon_jtag_uart_close+0x54>
1000e774:	e0bffe17 	ldw	r2,-8(fp)
1000e778:	10c00917 	ldw	r3,36(r2)
1000e77c:	e0bffe17 	ldw	r2,-8(fp)
1000e780:	10800117 	ldw	r2,4(r2)
1000e784:	18bff136 	bltu	r3,r2,1000e74c <__alt_data_end+0xf800e74c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000e788:	0005883a 	mov	r2,zero
}
1000e78c:	e037883a 	mov	sp,fp
1000e790:	df000017 	ldw	fp,0(sp)
1000e794:	dec00104 	addi	sp,sp,4
1000e798:	f800283a 	ret

1000e79c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000e79c:	defffa04 	addi	sp,sp,-24
1000e7a0:	df000515 	stw	fp,20(sp)
1000e7a4:	df000504 	addi	fp,sp,20
1000e7a8:	e13ffd15 	stw	r4,-12(fp)
1000e7ac:	e17ffe15 	stw	r5,-8(fp)
1000e7b0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000e7b4:	00bff9c4 	movi	r2,-25
1000e7b8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000e7bc:	e0bffe17 	ldw	r2,-8(fp)
1000e7c0:	10da8060 	cmpeqi	r3,r2,27137
1000e7c4:	1800031e 	bne	r3,zero,1000e7d4 <altera_avalon_jtag_uart_ioctl+0x38>
1000e7c8:	109a80a0 	cmpeqi	r2,r2,27138
1000e7cc:	1000181e 	bne	r2,zero,1000e830 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1000e7d0:	00002906 	br	1000e878 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000e7d4:	e0bffd17 	ldw	r2,-12(fp)
1000e7d8:	10c00117 	ldw	r3,4(r2)
1000e7dc:	00a00034 	movhi	r2,32768
1000e7e0:	10bfffc4 	addi	r2,r2,-1
1000e7e4:	18802126 	beq	r3,r2,1000e86c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1000e7e8:	e0bfff17 	ldw	r2,-4(fp)
1000e7ec:	10800017 	ldw	r2,0(r2)
1000e7f0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000e7f4:	e0bffc17 	ldw	r2,-16(fp)
1000e7f8:	10800090 	cmplti	r2,r2,2
1000e7fc:	1000061e 	bne	r2,zero,1000e818 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e800:	e0fffc17 	ldw	r3,-16(fp)
1000e804:	00a00034 	movhi	r2,32768
1000e808:	10bfffc4 	addi	r2,r2,-1
1000e80c:	18800226 	beq	r3,r2,1000e818 <altera_avalon_jtag_uart_ioctl+0x7c>
1000e810:	e0bffc17 	ldw	r2,-16(fp)
1000e814:	00000206 	br	1000e820 <altera_avalon_jtag_uart_ioctl+0x84>
1000e818:	00a00034 	movhi	r2,32768
1000e81c:	10bfff84 	addi	r2,r2,-2
1000e820:	e0fffd17 	ldw	r3,-12(fp)
1000e824:	18800115 	stw	r2,4(r3)
      rc = 0;
1000e828:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e82c:	00000f06 	br	1000e86c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000e830:	e0bffd17 	ldw	r2,-12(fp)
1000e834:	10c00117 	ldw	r3,4(r2)
1000e838:	00a00034 	movhi	r2,32768
1000e83c:	10bfffc4 	addi	r2,r2,-1
1000e840:	18800c26 	beq	r3,r2,1000e874 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000e844:	e0bffd17 	ldw	r2,-12(fp)
1000e848:	10c00917 	ldw	r3,36(r2)
1000e84c:	e0bffd17 	ldw	r2,-12(fp)
1000e850:	10800117 	ldw	r2,4(r2)
1000e854:	1885803a 	cmpltu	r2,r3,r2
1000e858:	10c03fcc 	andi	r3,r2,255
1000e85c:	e0bfff17 	ldw	r2,-4(fp)
1000e860:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000e864:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000e868:	00000206 	br	1000e874 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1000e86c:	0001883a 	nop
1000e870:	00000106 	br	1000e878 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1000e874:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000e878:	e0bffb17 	ldw	r2,-20(fp)
}
1000e87c:	e037883a 	mov	sp,fp
1000e880:	df000017 	ldw	fp,0(sp)
1000e884:	dec00104 	addi	sp,sp,4
1000e888:	f800283a 	ret

1000e88c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000e88c:	defff304 	addi	sp,sp,-52
1000e890:	dfc00c15 	stw	ra,48(sp)
1000e894:	df000b15 	stw	fp,44(sp)
1000e898:	df000b04 	addi	fp,sp,44
1000e89c:	e13ffc15 	stw	r4,-16(fp)
1000e8a0:	e17ffd15 	stw	r5,-12(fp)
1000e8a4:	e1bffe15 	stw	r6,-8(fp)
1000e8a8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000e8ac:	e0bffd17 	ldw	r2,-12(fp)
1000e8b0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e8b4:	00004706 	br	1000e9d4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000e8b8:	e0bffc17 	ldw	r2,-16(fp)
1000e8bc:	10800a17 	ldw	r2,40(r2)
1000e8c0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000e8c4:	e0bffc17 	ldw	r2,-16(fp)
1000e8c8:	10800b17 	ldw	r2,44(r2)
1000e8cc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000e8d0:	e0fff717 	ldw	r3,-36(fp)
1000e8d4:	e0bff817 	ldw	r2,-32(fp)
1000e8d8:	18800536 	bltu	r3,r2,1000e8f0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000e8dc:	e0fff717 	ldw	r3,-36(fp)
1000e8e0:	e0bff817 	ldw	r2,-32(fp)
1000e8e4:	1885c83a 	sub	r2,r3,r2
1000e8e8:	e0bff615 	stw	r2,-40(fp)
1000e8ec:	00000406 	br	1000e900 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000e8f0:	00c20004 	movi	r3,2048
1000e8f4:	e0bff817 	ldw	r2,-32(fp)
1000e8f8:	1885c83a 	sub	r2,r3,r2
1000e8fc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000e900:	e0bff617 	ldw	r2,-40(fp)
1000e904:	10001e26 	beq	r2,zero,1000e980 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1000e908:	e0fffe17 	ldw	r3,-8(fp)
1000e90c:	e0bff617 	ldw	r2,-40(fp)
1000e910:	1880022e 	bgeu	r3,r2,1000e91c <altera_avalon_jtag_uart_read+0x90>
        n = space;
1000e914:	e0bffe17 	ldw	r2,-8(fp)
1000e918:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000e91c:	e0bffc17 	ldw	r2,-16(fp)
1000e920:	10c00e04 	addi	r3,r2,56
1000e924:	e0bff817 	ldw	r2,-32(fp)
1000e928:	1885883a 	add	r2,r3,r2
1000e92c:	e1bff617 	ldw	r6,-40(fp)
1000e930:	100b883a 	mov	r5,r2
1000e934:	e13ff517 	ldw	r4,-44(fp)
1000e938:	00009a40 	call	100009a4 <memcpy>
      ptr   += n;
1000e93c:	e0fff517 	ldw	r3,-44(fp)
1000e940:	e0bff617 	ldw	r2,-40(fp)
1000e944:	1885883a 	add	r2,r3,r2
1000e948:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000e94c:	e0fffe17 	ldw	r3,-8(fp)
1000e950:	e0bff617 	ldw	r2,-40(fp)
1000e954:	1885c83a 	sub	r2,r3,r2
1000e958:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000e95c:	e0fff817 	ldw	r3,-32(fp)
1000e960:	e0bff617 	ldw	r2,-40(fp)
1000e964:	1885883a 	add	r2,r3,r2
1000e968:	10c1ffcc 	andi	r3,r2,2047
1000e96c:	e0bffc17 	ldw	r2,-16(fp)
1000e970:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000e974:	e0bffe17 	ldw	r2,-8(fp)
1000e978:	00bfcf16 	blt	zero,r2,1000e8b8 <__alt_data_end+0xf800e8b8>
1000e97c:	00000106 	br	1000e984 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1000e980:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1000e984:	e0fff517 	ldw	r3,-44(fp)
1000e988:	e0bffd17 	ldw	r2,-12(fp)
1000e98c:	1880141e 	bne	r3,r2,1000e9e0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000e990:	e0bfff17 	ldw	r2,-4(fp)
1000e994:	1090000c 	andi	r2,r2,16384
1000e998:	1000131e 	bne	r2,zero,1000e9e8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000e99c:	0001883a 	nop
1000e9a0:	e0bffc17 	ldw	r2,-16(fp)
1000e9a4:	10c00a17 	ldw	r3,40(r2)
1000e9a8:	e0bff717 	ldw	r2,-36(fp)
1000e9ac:	1880051e 	bne	r3,r2,1000e9c4 <altera_avalon_jtag_uart_read+0x138>
1000e9b0:	e0bffc17 	ldw	r2,-16(fp)
1000e9b4:	10c00917 	ldw	r3,36(r2)
1000e9b8:	e0bffc17 	ldw	r2,-16(fp)
1000e9bc:	10800117 	ldw	r2,4(r2)
1000e9c0:	18bff736 	bltu	r3,r2,1000e9a0 <__alt_data_end+0xf800e9a0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000e9c4:	e0bffc17 	ldw	r2,-16(fp)
1000e9c8:	10c00a17 	ldw	r3,40(r2)
1000e9cc:	e0bff717 	ldw	r2,-36(fp)
1000e9d0:	18800726 	beq	r3,r2,1000e9f0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000e9d4:	e0bffe17 	ldw	r2,-8(fp)
1000e9d8:	00bfb716 	blt	zero,r2,1000e8b8 <__alt_data_end+0xf800e8b8>
1000e9dc:	00000506 	br	1000e9f4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1000e9e0:	0001883a 	nop
1000e9e4:	00000306 	br	1000e9f4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1000e9e8:	0001883a 	nop
1000e9ec:	00000106 	br	1000e9f4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1000e9f0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000e9f4:	e0fff517 	ldw	r3,-44(fp)
1000e9f8:	e0bffd17 	ldw	r2,-12(fp)
1000e9fc:	18801826 	beq	r3,r2,1000ea60 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ea00:	0005303a 	rdctl	r2,status
1000ea04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ea08:	e0fffb17 	ldw	r3,-20(fp)
1000ea0c:	00bfff84 	movi	r2,-2
1000ea10:	1884703a 	and	r2,r3,r2
1000ea14:	1001703a 	wrctl	status,r2
  
  return context;
1000ea18:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000ea1c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000ea20:	e0bffc17 	ldw	r2,-16(fp)
1000ea24:	10800817 	ldw	r2,32(r2)
1000ea28:	10c00054 	ori	r3,r2,1
1000ea2c:	e0bffc17 	ldw	r2,-16(fp)
1000ea30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000ea34:	e0bffc17 	ldw	r2,-16(fp)
1000ea38:	10800017 	ldw	r2,0(r2)
1000ea3c:	10800104 	addi	r2,r2,4
1000ea40:	1007883a 	mov	r3,r2
1000ea44:	e0bffc17 	ldw	r2,-16(fp)
1000ea48:	10800817 	ldw	r2,32(r2)
1000ea4c:	18800035 	stwio	r2,0(r3)
1000ea50:	e0bffa17 	ldw	r2,-24(fp)
1000ea54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ea58:	e0bff917 	ldw	r2,-28(fp)
1000ea5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000ea60:	e0fff517 	ldw	r3,-44(fp)
1000ea64:	e0bffd17 	ldw	r2,-12(fp)
1000ea68:	18800426 	beq	r3,r2,1000ea7c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1000ea6c:	e0fff517 	ldw	r3,-44(fp)
1000ea70:	e0bffd17 	ldw	r2,-12(fp)
1000ea74:	1885c83a 	sub	r2,r3,r2
1000ea78:	00000606 	br	1000ea94 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1000ea7c:	e0bfff17 	ldw	r2,-4(fp)
1000ea80:	1090000c 	andi	r2,r2,16384
1000ea84:	10000226 	beq	r2,zero,1000ea90 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1000ea88:	00bffd44 	movi	r2,-11
1000ea8c:	00000106 	br	1000ea94 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1000ea90:	00bffec4 	movi	r2,-5
}
1000ea94:	e037883a 	mov	sp,fp
1000ea98:	dfc00117 	ldw	ra,4(sp)
1000ea9c:	df000017 	ldw	fp,0(sp)
1000eaa0:	dec00204 	addi	sp,sp,8
1000eaa4:	f800283a 	ret

1000eaa8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000eaa8:	defff304 	addi	sp,sp,-52
1000eaac:	dfc00c15 	stw	ra,48(sp)
1000eab0:	df000b15 	stw	fp,44(sp)
1000eab4:	df000b04 	addi	fp,sp,44
1000eab8:	e13ffc15 	stw	r4,-16(fp)
1000eabc:	e17ffd15 	stw	r5,-12(fp)
1000eac0:	e1bffe15 	stw	r6,-8(fp)
1000eac4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000eac8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000eacc:	e0bffd17 	ldw	r2,-12(fp)
1000ead0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000ead4:	00003706 	br	1000ebb4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000ead8:	e0bffc17 	ldw	r2,-16(fp)
1000eadc:	10800c17 	ldw	r2,48(r2)
1000eae0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1000eae4:	e0bffc17 	ldw	r2,-16(fp)
1000eae8:	10800d17 	ldw	r2,52(r2)
1000eaec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000eaf0:	e0fff917 	ldw	r3,-28(fp)
1000eaf4:	e0bff517 	ldw	r2,-44(fp)
1000eaf8:	1880062e 	bgeu	r3,r2,1000eb14 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000eafc:	e0fff517 	ldw	r3,-44(fp)
1000eb00:	e0bff917 	ldw	r2,-28(fp)
1000eb04:	1885c83a 	sub	r2,r3,r2
1000eb08:	10bfffc4 	addi	r2,r2,-1
1000eb0c:	e0bff615 	stw	r2,-40(fp)
1000eb10:	00000b06 	br	1000eb40 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000eb14:	e0bff517 	ldw	r2,-44(fp)
1000eb18:	10000526 	beq	r2,zero,1000eb30 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000eb1c:	00c20004 	movi	r3,2048
1000eb20:	e0bff917 	ldw	r2,-28(fp)
1000eb24:	1885c83a 	sub	r2,r3,r2
1000eb28:	e0bff615 	stw	r2,-40(fp)
1000eb2c:	00000406 	br	1000eb40 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000eb30:	00c1ffc4 	movi	r3,2047
1000eb34:	e0bff917 	ldw	r2,-28(fp)
1000eb38:	1885c83a 	sub	r2,r3,r2
1000eb3c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000eb40:	e0bff617 	ldw	r2,-40(fp)
1000eb44:	10001e26 	beq	r2,zero,1000ebc0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1000eb48:	e0fffe17 	ldw	r3,-8(fp)
1000eb4c:	e0bff617 	ldw	r2,-40(fp)
1000eb50:	1880022e 	bgeu	r3,r2,1000eb5c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1000eb54:	e0bffe17 	ldw	r2,-8(fp)
1000eb58:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000eb5c:	e0bffc17 	ldw	r2,-16(fp)
1000eb60:	10c20e04 	addi	r3,r2,2104
1000eb64:	e0bff917 	ldw	r2,-28(fp)
1000eb68:	1885883a 	add	r2,r3,r2
1000eb6c:	e1bff617 	ldw	r6,-40(fp)
1000eb70:	e17ffd17 	ldw	r5,-12(fp)
1000eb74:	1009883a 	mov	r4,r2
1000eb78:	00009a40 	call	100009a4 <memcpy>
      ptr   += n;
1000eb7c:	e0fffd17 	ldw	r3,-12(fp)
1000eb80:	e0bff617 	ldw	r2,-40(fp)
1000eb84:	1885883a 	add	r2,r3,r2
1000eb88:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000eb8c:	e0fffe17 	ldw	r3,-8(fp)
1000eb90:	e0bff617 	ldw	r2,-40(fp)
1000eb94:	1885c83a 	sub	r2,r3,r2
1000eb98:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000eb9c:	e0fff917 	ldw	r3,-28(fp)
1000eba0:	e0bff617 	ldw	r2,-40(fp)
1000eba4:	1885883a 	add	r2,r3,r2
1000eba8:	10c1ffcc 	andi	r3,r2,2047
1000ebac:	e0bffc17 	ldw	r2,-16(fp)
1000ebb0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000ebb4:	e0bffe17 	ldw	r2,-8(fp)
1000ebb8:	00bfc716 	blt	zero,r2,1000ead8 <__alt_data_end+0xf800ead8>
1000ebbc:	00000106 	br	1000ebc4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1000ebc0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ebc4:	0005303a 	rdctl	r2,status
1000ebc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ebcc:	e0fffb17 	ldw	r3,-20(fp)
1000ebd0:	00bfff84 	movi	r2,-2
1000ebd4:	1884703a 	and	r2,r3,r2
1000ebd8:	1001703a 	wrctl	status,r2
  
  return context;
1000ebdc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000ebe0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000ebe4:	e0bffc17 	ldw	r2,-16(fp)
1000ebe8:	10800817 	ldw	r2,32(r2)
1000ebec:	10c00094 	ori	r3,r2,2
1000ebf0:	e0bffc17 	ldw	r2,-16(fp)
1000ebf4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000ebf8:	e0bffc17 	ldw	r2,-16(fp)
1000ebfc:	10800017 	ldw	r2,0(r2)
1000ec00:	10800104 	addi	r2,r2,4
1000ec04:	1007883a 	mov	r3,r2
1000ec08:	e0bffc17 	ldw	r2,-16(fp)
1000ec0c:	10800817 	ldw	r2,32(r2)
1000ec10:	18800035 	stwio	r2,0(r3)
1000ec14:	e0bffa17 	ldw	r2,-24(fp)
1000ec18:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ec1c:	e0bff817 	ldw	r2,-32(fp)
1000ec20:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000ec24:	e0bffe17 	ldw	r2,-8(fp)
1000ec28:	0080100e 	bge	zero,r2,1000ec6c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1000ec2c:	e0bfff17 	ldw	r2,-4(fp)
1000ec30:	1090000c 	andi	r2,r2,16384
1000ec34:	1000101e 	bne	r2,zero,1000ec78 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000ec38:	0001883a 	nop
1000ec3c:	e0bffc17 	ldw	r2,-16(fp)
1000ec40:	10c00d17 	ldw	r3,52(r2)
1000ec44:	e0bff517 	ldw	r2,-44(fp)
1000ec48:	1880051e 	bne	r3,r2,1000ec60 <altera_avalon_jtag_uart_write+0x1b8>
1000ec4c:	e0bffc17 	ldw	r2,-16(fp)
1000ec50:	10c00917 	ldw	r3,36(r2)
1000ec54:	e0bffc17 	ldw	r2,-16(fp)
1000ec58:	10800117 	ldw	r2,4(r2)
1000ec5c:	18bff736 	bltu	r3,r2,1000ec3c <__alt_data_end+0xf800ec3c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000ec60:	e0bffc17 	ldw	r2,-16(fp)
1000ec64:	10800917 	ldw	r2,36(r2)
1000ec68:	1000051e 	bne	r2,zero,1000ec80 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1000ec6c:	e0bffe17 	ldw	r2,-8(fp)
1000ec70:	00bfd016 	blt	zero,r2,1000ebb4 <__alt_data_end+0xf800ebb4>
1000ec74:	00000306 	br	1000ec84 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1000ec78:	0001883a 	nop
1000ec7c:	00000106 	br	1000ec84 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1000ec80:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000ec84:	e0fffd17 	ldw	r3,-12(fp)
1000ec88:	e0bff717 	ldw	r2,-36(fp)
1000ec8c:	18800426 	beq	r3,r2,1000eca0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1000ec90:	e0fffd17 	ldw	r3,-12(fp)
1000ec94:	e0bff717 	ldw	r2,-36(fp)
1000ec98:	1885c83a 	sub	r2,r3,r2
1000ec9c:	00000606 	br	1000ecb8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1000eca0:	e0bfff17 	ldw	r2,-4(fp)
1000eca4:	1090000c 	andi	r2,r2,16384
1000eca8:	10000226 	beq	r2,zero,1000ecb4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1000ecac:	00bffd44 	movi	r2,-11
1000ecb0:	00000106 	br	1000ecb8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1000ecb4:	00bffec4 	movi	r2,-5
}
1000ecb8:	e037883a 	mov	sp,fp
1000ecbc:	dfc00117 	ldw	ra,4(sp)
1000ecc0:	df000017 	ldw	fp,0(sp)
1000ecc4:	dec00204 	addi	sp,sp,8
1000ecc8:	f800283a 	ret

1000eccc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1000eccc:	defff504 	addi	sp,sp,-44
1000ecd0:	df000a15 	stw	fp,40(sp)
1000ecd4:	df000a04 	addi	fp,sp,40
1000ecd8:	e13ffc15 	stw	r4,-16(fp)
1000ecdc:	e17ffd15 	stw	r5,-12(fp)
1000ece0:	e1bffe15 	stw	r6,-8(fp)
1000ece4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1000ece8:	e03ff615 	stw	zero,-40(fp)
1000ecec:	d0a6da17 	ldw	r2,-25752(gp)
  
  if (alt_ticks_per_second ())
1000ecf0:	10003c26 	beq	r2,zero,1000ede4 <alt_alarm_start+0x118>
  {
    if (alarm)
1000ecf4:	e0bffc17 	ldw	r2,-16(fp)
1000ecf8:	10003826 	beq	r2,zero,1000eddc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1000ecfc:	e0bffc17 	ldw	r2,-16(fp)
1000ed00:	e0fffe17 	ldw	r3,-8(fp)
1000ed04:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1000ed08:	e0bffc17 	ldw	r2,-16(fp)
1000ed0c:	e0ffff17 	ldw	r3,-4(fp)
1000ed10:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ed14:	0005303a 	rdctl	r2,status
1000ed18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ed1c:	e0fff917 	ldw	r3,-28(fp)
1000ed20:	00bfff84 	movi	r2,-2
1000ed24:	1884703a 	and	r2,r3,r2
1000ed28:	1001703a 	wrctl	status,r2
  
  return context;
1000ed2c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1000ed30:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1000ed34:	d0a6db17 	ldw	r2,-25748(gp)
      
      current_nticks = alt_nticks();
1000ed38:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1000ed3c:	e0fffd17 	ldw	r3,-12(fp)
1000ed40:	e0bff617 	ldw	r2,-40(fp)
1000ed44:	1885883a 	add	r2,r3,r2
1000ed48:	10c00044 	addi	r3,r2,1
1000ed4c:	e0bffc17 	ldw	r2,-16(fp)
1000ed50:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1000ed54:	e0bffc17 	ldw	r2,-16(fp)
1000ed58:	10c00217 	ldw	r3,8(r2)
1000ed5c:	e0bff617 	ldw	r2,-40(fp)
1000ed60:	1880042e 	bgeu	r3,r2,1000ed74 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1000ed64:	e0bffc17 	ldw	r2,-16(fp)
1000ed68:	00c00044 	movi	r3,1
1000ed6c:	10c00405 	stb	r3,16(r2)
1000ed70:	00000206 	br	1000ed7c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1000ed74:	e0bffc17 	ldw	r2,-16(fp)
1000ed78:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1000ed7c:	e0bffc17 	ldw	r2,-16(fp)
1000ed80:	d0e01004 	addi	r3,gp,-32704
1000ed84:	e0fffa15 	stw	r3,-24(fp)
1000ed88:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000ed8c:	e0bffb17 	ldw	r2,-20(fp)
1000ed90:	e0fffa17 	ldw	r3,-24(fp)
1000ed94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000ed98:	e0bffa17 	ldw	r2,-24(fp)
1000ed9c:	10c00017 	ldw	r3,0(r2)
1000eda0:	e0bffb17 	ldw	r2,-20(fp)
1000eda4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000eda8:	e0bffa17 	ldw	r2,-24(fp)
1000edac:	10800017 	ldw	r2,0(r2)
1000edb0:	e0fffb17 	ldw	r3,-20(fp)
1000edb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000edb8:	e0bffa17 	ldw	r2,-24(fp)
1000edbc:	e0fffb17 	ldw	r3,-20(fp)
1000edc0:	10c00015 	stw	r3,0(r2)
1000edc4:	e0bff817 	ldw	r2,-32(fp)
1000edc8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000edcc:	e0bff717 	ldw	r2,-36(fp)
1000edd0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1000edd4:	0005883a 	mov	r2,zero
1000edd8:	00000306 	br	1000ede8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1000eddc:	00bffa84 	movi	r2,-22
1000ede0:	00000106 	br	1000ede8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
1000ede4:	00bfde84 	movi	r2,-134
  }
}
1000ede8:	e037883a 	mov	sp,fp
1000edec:	df000017 	ldw	fp,0(sp)
1000edf0:	dec00104 	addi	sp,sp,4
1000edf4:	f800283a 	ret

1000edf8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1000edf8:	defffa04 	addi	sp,sp,-24
1000edfc:	dfc00515 	stw	ra,20(sp)
1000ee00:	df000415 	stw	fp,16(sp)
1000ee04:	df000404 	addi	fp,sp,16
1000ee08:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1000ee0c:	00800244 	movi	r2,9
1000ee10:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1000ee14:	014003f4 	movhi	r5,15
1000ee18:	29509004 	addi	r5,r5,16960
1000ee1c:	e13ffd17 	ldw	r4,-12(fp)
1000ee20:	000097c0 	call	1000097c <__mulsi3>
1000ee24:	100b883a 	mov	r5,r2
1000ee28:	0100bef4 	movhi	r4,763
1000ee2c:	213c2004 	addi	r4,r4,-3968
1000ee30:	000ae880 	call	1000ae88 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1000ee34:	100b883a 	mov	r5,r2
1000ee38:	01200034 	movhi	r4,32768
1000ee3c:	213fffc4 	addi	r4,r4,-1
1000ee40:	000ae880 	call	1000ae88 <__udivsi3>
1000ee44:	100b883a 	mov	r5,r2
1000ee48:	e13fff17 	ldw	r4,-4(fp)
1000ee4c:	000ae880 	call	1000ae88 <__udivsi3>
1000ee50:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1000ee54:	e0bffe17 	ldw	r2,-8(fp)
1000ee58:	10002a26 	beq	r2,zero,1000ef04 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1000ee5c:	e03ffc15 	stw	zero,-16(fp)
1000ee60:	00001706 	br	1000eec0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1000ee64:	00a00034 	movhi	r2,32768
1000ee68:	10bfffc4 	addi	r2,r2,-1
1000ee6c:	10bfffc4 	addi	r2,r2,-1
1000ee70:	103ffe1e 	bne	r2,zero,1000ee6c <__alt_data_end+0xf800ee6c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1000ee74:	014003f4 	movhi	r5,15
1000ee78:	29509004 	addi	r5,r5,16960
1000ee7c:	e13ffd17 	ldw	r4,-12(fp)
1000ee80:	000097c0 	call	1000097c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1000ee84:	100b883a 	mov	r5,r2
1000ee88:	0100bef4 	movhi	r4,763
1000ee8c:	213c2004 	addi	r4,r4,-3968
1000ee90:	000ae880 	call	1000ae88 <__udivsi3>
1000ee94:	100b883a 	mov	r5,r2
1000ee98:	01200034 	movhi	r4,32768
1000ee9c:	213fffc4 	addi	r4,r4,-1
1000eea0:	000ae880 	call	1000ae88 <__udivsi3>
1000eea4:	1007883a 	mov	r3,r2
1000eea8:	e0bfff17 	ldw	r2,-4(fp)
1000eeac:	10c5c83a 	sub	r2,r2,r3
1000eeb0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1000eeb4:	e0bffc17 	ldw	r2,-16(fp)
1000eeb8:	10800044 	addi	r2,r2,1
1000eebc:	e0bffc15 	stw	r2,-16(fp)
1000eec0:	e0fffc17 	ldw	r3,-16(fp)
1000eec4:	e0bffe17 	ldw	r2,-8(fp)
1000eec8:	18bfe616 	blt	r3,r2,1000ee64 <__alt_data_end+0xf800ee64>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1000eecc:	014003f4 	movhi	r5,15
1000eed0:	29509004 	addi	r5,r5,16960
1000eed4:	e13ffd17 	ldw	r4,-12(fp)
1000eed8:	000097c0 	call	1000097c <__mulsi3>
1000eedc:	100b883a 	mov	r5,r2
1000eee0:	0100bef4 	movhi	r4,763
1000eee4:	213c2004 	addi	r4,r4,-3968
1000eee8:	000ae880 	call	1000ae88 <__udivsi3>
1000eeec:	e17fff17 	ldw	r5,-4(fp)
1000eef0:	1009883a 	mov	r4,r2
1000eef4:	000097c0 	call	1000097c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1000eef8:	10bfffc4 	addi	r2,r2,-1
1000eefc:	103ffe1e 	bne	r2,zero,1000eef8 <__alt_data_end+0xf800eef8>
1000ef00:	00000d06 	br	1000ef38 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1000ef04:	014003f4 	movhi	r5,15
1000ef08:	29509004 	addi	r5,r5,16960
1000ef0c:	e13ffd17 	ldw	r4,-12(fp)
1000ef10:	000097c0 	call	1000097c <__mulsi3>
1000ef14:	100b883a 	mov	r5,r2
1000ef18:	0100bef4 	movhi	r4,763
1000ef1c:	213c2004 	addi	r4,r4,-3968
1000ef20:	000ae880 	call	1000ae88 <__udivsi3>
1000ef24:	e17fff17 	ldw	r5,-4(fp)
1000ef28:	1009883a 	mov	r4,r2
1000ef2c:	000097c0 	call	1000097c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1000ef30:	10bfffc4 	addi	r2,r2,-1
1000ef34:	00bffe16 	blt	zero,r2,1000ef30 <__alt_data_end+0xf800ef30>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
1000ef38:	0005883a 	mov	r2,zero
}
1000ef3c:	e037883a 	mov	sp,fp
1000ef40:	dfc00117 	ldw	ra,4(sp)
1000ef44:	df000017 	ldw	fp,0(sp)
1000ef48:	dec00204 	addi	sp,sp,8
1000ef4c:	f800283a 	ret

1000ef50 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1000ef50:	deffff04 	addi	sp,sp,-4
1000ef54:	df000015 	stw	fp,0(sp)
1000ef58:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1000ef5c:	0001883a 	nop
1000ef60:	e037883a 	mov	sp,fp
1000ef64:	df000017 	ldw	fp,0(sp)
1000ef68:	dec00104 	addi	sp,sp,4
1000ef6c:	f800283a 	ret

1000ef70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ef70:	defffe04 	addi	sp,sp,-8
1000ef74:	dfc00115 	stw	ra,4(sp)
1000ef78:	df000015 	stw	fp,0(sp)
1000ef7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ef80:	d0a00d17 	ldw	r2,-32716(gp)
1000ef84:	10000326 	beq	r2,zero,1000ef94 <alt_get_errno+0x24>
1000ef88:	d0a00d17 	ldw	r2,-32716(gp)
1000ef8c:	103ee83a 	callr	r2
1000ef90:	00000106 	br	1000ef98 <alt_get_errno+0x28>
1000ef94:	d0a6d504 	addi	r2,gp,-25772
}
1000ef98:	e037883a 	mov	sp,fp
1000ef9c:	dfc00117 	ldw	ra,4(sp)
1000efa0:	df000017 	ldw	fp,0(sp)
1000efa4:	dec00204 	addi	sp,sp,8
1000efa8:	f800283a 	ret

1000efac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1000efac:	defffa04 	addi	sp,sp,-24
1000efb0:	dfc00515 	stw	ra,20(sp)
1000efb4:	df000415 	stw	fp,16(sp)
1000efb8:	df000404 	addi	fp,sp,16
1000efbc:	e13ffe15 	stw	r4,-8(fp)
1000efc0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000efc4:	e0bffe17 	ldw	r2,-8(fp)
1000efc8:	10000326 	beq	r2,zero,1000efd8 <alt_dev_llist_insert+0x2c>
1000efcc:	e0bffe17 	ldw	r2,-8(fp)
1000efd0:	10800217 	ldw	r2,8(r2)
1000efd4:	1000061e 	bne	r2,zero,1000eff0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1000efd8:	000ef700 	call	1000ef70 <alt_get_errno>
1000efdc:	1007883a 	mov	r3,r2
1000efe0:	00800584 	movi	r2,22
1000efe4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1000efe8:	00bffa84 	movi	r2,-22
1000efec:	00001306 	br	1000f03c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1000eff0:	e0bffe17 	ldw	r2,-8(fp)
1000eff4:	e0ffff17 	ldw	r3,-4(fp)
1000eff8:	e0fffc15 	stw	r3,-16(fp)
1000effc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1000f000:	e0bffd17 	ldw	r2,-12(fp)
1000f004:	e0fffc17 	ldw	r3,-16(fp)
1000f008:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1000f00c:	e0bffc17 	ldw	r2,-16(fp)
1000f010:	10c00017 	ldw	r3,0(r2)
1000f014:	e0bffd17 	ldw	r2,-12(fp)
1000f018:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1000f01c:	e0bffc17 	ldw	r2,-16(fp)
1000f020:	10800017 	ldw	r2,0(r2)
1000f024:	e0fffd17 	ldw	r3,-12(fp)
1000f028:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1000f02c:	e0bffc17 	ldw	r2,-16(fp)
1000f030:	e0fffd17 	ldw	r3,-12(fp)
1000f034:	10c00015 	stw	r3,0(r2)

  return 0;  
1000f038:	0005883a 	mov	r2,zero
}
1000f03c:	e037883a 	mov	sp,fp
1000f040:	dfc00117 	ldw	ra,4(sp)
1000f044:	df000017 	ldw	fp,0(sp)
1000f048:	dec00204 	addi	sp,sp,8
1000f04c:	f800283a 	ret

1000f050 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1000f050:	defffd04 	addi	sp,sp,-12
1000f054:	dfc00215 	stw	ra,8(sp)
1000f058:	df000115 	stw	fp,4(sp)
1000f05c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000f060:	00840074 	movhi	r2,4097
1000f064:	10800104 	addi	r2,r2,4
1000f068:	e0bfff15 	stw	r2,-4(fp)
1000f06c:	00000606 	br	1000f088 <_do_ctors+0x38>
        (*ctor) (); 
1000f070:	e0bfff17 	ldw	r2,-4(fp)
1000f074:	10800017 	ldw	r2,0(r2)
1000f078:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1000f07c:	e0bfff17 	ldw	r2,-4(fp)
1000f080:	10bfff04 	addi	r2,r2,-4
1000f084:	e0bfff15 	stw	r2,-4(fp)
1000f088:	e0ffff17 	ldw	r3,-4(fp)
1000f08c:	00840074 	movhi	r2,4097
1000f090:	10800204 	addi	r2,r2,8
1000f094:	18bff62e 	bgeu	r3,r2,1000f070 <__alt_data_end+0xf800f070>
        (*ctor) (); 
}
1000f098:	0001883a 	nop
1000f09c:	e037883a 	mov	sp,fp
1000f0a0:	dfc00117 	ldw	ra,4(sp)
1000f0a4:	df000017 	ldw	fp,0(sp)
1000f0a8:	dec00204 	addi	sp,sp,8
1000f0ac:	f800283a 	ret

1000f0b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1000f0b0:	defffd04 	addi	sp,sp,-12
1000f0b4:	dfc00215 	stw	ra,8(sp)
1000f0b8:	df000115 	stw	fp,4(sp)
1000f0bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f0c0:	00840074 	movhi	r2,4097
1000f0c4:	10800104 	addi	r2,r2,4
1000f0c8:	e0bfff15 	stw	r2,-4(fp)
1000f0cc:	00000606 	br	1000f0e8 <_do_dtors+0x38>
        (*dtor) (); 
1000f0d0:	e0bfff17 	ldw	r2,-4(fp)
1000f0d4:	10800017 	ldw	r2,0(r2)
1000f0d8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000f0dc:	e0bfff17 	ldw	r2,-4(fp)
1000f0e0:	10bfff04 	addi	r2,r2,-4
1000f0e4:	e0bfff15 	stw	r2,-4(fp)
1000f0e8:	e0ffff17 	ldw	r3,-4(fp)
1000f0ec:	00840074 	movhi	r2,4097
1000f0f0:	10800204 	addi	r2,r2,8
1000f0f4:	18bff62e 	bgeu	r3,r2,1000f0d0 <__alt_data_end+0xf800f0d0>
        (*dtor) (); 
}
1000f0f8:	0001883a 	nop
1000f0fc:	e037883a 	mov	sp,fp
1000f100:	dfc00117 	ldw	ra,4(sp)
1000f104:	df000017 	ldw	fp,0(sp)
1000f108:	dec00204 	addi	sp,sp,8
1000f10c:	f800283a 	ret

1000f110 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1000f110:	deffff04 	addi	sp,sp,-4
1000f114:	df000015 	stw	fp,0(sp)
1000f118:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1000f11c:	0001883a 	nop
1000f120:	e037883a 	mov	sp,fp
1000f124:	df000017 	ldw	fp,0(sp)
1000f128:	dec00104 	addi	sp,sp,4
1000f12c:	f800283a 	ret

1000f130 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f130:	defff904 	addi	sp,sp,-28
1000f134:	dfc00615 	stw	ra,24(sp)
1000f138:	df000515 	stw	fp,20(sp)
1000f13c:	df000504 	addi	fp,sp,20
1000f140:	e13ffc15 	stw	r4,-16(fp)
1000f144:	e17ffd15 	stw	r5,-12(fp)
1000f148:	e1bffe15 	stw	r6,-8(fp)
1000f14c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1000f150:	e0800217 	ldw	r2,8(fp)
1000f154:	d8800015 	stw	r2,0(sp)
1000f158:	e1ffff17 	ldw	r7,-4(fp)
1000f15c:	e1bffe17 	ldw	r6,-8(fp)
1000f160:	e17ffd17 	ldw	r5,-12(fp)
1000f164:	e13ffc17 	ldw	r4,-16(fp)
1000f168:	000f2e00 	call	1000f2e0 <alt_iic_isr_register>
}  
1000f16c:	e037883a 	mov	sp,fp
1000f170:	dfc00117 	ldw	ra,4(sp)
1000f174:	df000017 	ldw	fp,0(sp)
1000f178:	dec00204 	addi	sp,sp,8
1000f17c:	f800283a 	ret

1000f180 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1000f180:	defff904 	addi	sp,sp,-28
1000f184:	df000615 	stw	fp,24(sp)
1000f188:	df000604 	addi	fp,sp,24
1000f18c:	e13ffe15 	stw	r4,-8(fp)
1000f190:	e17fff15 	stw	r5,-4(fp)
1000f194:	e0bfff17 	ldw	r2,-4(fp)
1000f198:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f19c:	0005303a 	rdctl	r2,status
1000f1a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f1a4:	e0fffb17 	ldw	r3,-20(fp)
1000f1a8:	00bfff84 	movi	r2,-2
1000f1ac:	1884703a 	and	r2,r3,r2
1000f1b0:	1001703a 	wrctl	status,r2
  
  return context;
1000f1b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f1b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1000f1bc:	00c00044 	movi	r3,1
1000f1c0:	e0bffa17 	ldw	r2,-24(fp)
1000f1c4:	1884983a 	sll	r2,r3,r2
1000f1c8:	1007883a 	mov	r3,r2
1000f1cc:	d0a6d917 	ldw	r2,-25756(gp)
1000f1d0:	1884b03a 	or	r2,r3,r2
1000f1d4:	d0a6d915 	stw	r2,-25756(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f1d8:	d0a6d917 	ldw	r2,-25756(gp)
1000f1dc:	100170fa 	wrctl	ienable,r2
1000f1e0:	e0bffc17 	ldw	r2,-16(fp)
1000f1e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f1e8:	e0bffd17 	ldw	r2,-12(fp)
1000f1ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f1f0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000f1f4:	0001883a 	nop
}
1000f1f8:	e037883a 	mov	sp,fp
1000f1fc:	df000017 	ldw	fp,0(sp)
1000f200:	dec00104 	addi	sp,sp,4
1000f204:	f800283a 	ret

1000f208 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1000f208:	defff904 	addi	sp,sp,-28
1000f20c:	df000615 	stw	fp,24(sp)
1000f210:	df000604 	addi	fp,sp,24
1000f214:	e13ffe15 	stw	r4,-8(fp)
1000f218:	e17fff15 	stw	r5,-4(fp)
1000f21c:	e0bfff17 	ldw	r2,-4(fp)
1000f220:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f224:	0005303a 	rdctl	r2,status
1000f228:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f22c:	e0fffb17 	ldw	r3,-20(fp)
1000f230:	00bfff84 	movi	r2,-2
1000f234:	1884703a 	and	r2,r3,r2
1000f238:	1001703a 	wrctl	status,r2
  
  return context;
1000f23c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1000f240:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000f244:	00c00044 	movi	r3,1
1000f248:	e0bffa17 	ldw	r2,-24(fp)
1000f24c:	1884983a 	sll	r2,r3,r2
1000f250:	0084303a 	nor	r2,zero,r2
1000f254:	1007883a 	mov	r3,r2
1000f258:	d0a6d917 	ldw	r2,-25756(gp)
1000f25c:	1884703a 	and	r2,r3,r2
1000f260:	d0a6d915 	stw	r2,-25756(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1000f264:	d0a6d917 	ldw	r2,-25756(gp)
1000f268:	100170fa 	wrctl	ienable,r2
1000f26c:	e0bffc17 	ldw	r2,-16(fp)
1000f270:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f274:	e0bffd17 	ldw	r2,-12(fp)
1000f278:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1000f27c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1000f280:	0001883a 	nop
}
1000f284:	e037883a 	mov	sp,fp
1000f288:	df000017 	ldw	fp,0(sp)
1000f28c:	dec00104 	addi	sp,sp,4
1000f290:	f800283a 	ret

1000f294 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000f294:	defffc04 	addi	sp,sp,-16
1000f298:	df000315 	stw	fp,12(sp)
1000f29c:	df000304 	addi	fp,sp,12
1000f2a0:	e13ffe15 	stw	r4,-8(fp)
1000f2a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1000f2a8:	000530fa 	rdctl	r2,ienable
1000f2ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1000f2b0:	00c00044 	movi	r3,1
1000f2b4:	e0bfff17 	ldw	r2,-4(fp)
1000f2b8:	1884983a 	sll	r2,r3,r2
1000f2bc:	1007883a 	mov	r3,r2
1000f2c0:	e0bffd17 	ldw	r2,-12(fp)
1000f2c4:	1884703a 	and	r2,r3,r2
1000f2c8:	1004c03a 	cmpne	r2,r2,zero
1000f2cc:	10803fcc 	andi	r2,r2,255
}
1000f2d0:	e037883a 	mov	sp,fp
1000f2d4:	df000017 	ldw	fp,0(sp)
1000f2d8:	dec00104 	addi	sp,sp,4
1000f2dc:	f800283a 	ret

1000f2e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1000f2e0:	defff504 	addi	sp,sp,-44
1000f2e4:	dfc00a15 	stw	ra,40(sp)
1000f2e8:	df000915 	stw	fp,36(sp)
1000f2ec:	df000904 	addi	fp,sp,36
1000f2f0:	e13ffc15 	stw	r4,-16(fp)
1000f2f4:	e17ffd15 	stw	r5,-12(fp)
1000f2f8:	e1bffe15 	stw	r6,-8(fp)
1000f2fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1000f300:	00bffa84 	movi	r2,-22
1000f304:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1000f308:	e0bffd17 	ldw	r2,-12(fp)
1000f30c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1000f310:	e0bff817 	ldw	r2,-32(fp)
1000f314:	10800808 	cmpgei	r2,r2,32
1000f318:	1000271e 	bne	r2,zero,1000f3b8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f31c:	0005303a 	rdctl	r2,status
1000f320:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f324:	e0fffb17 	ldw	r3,-20(fp)
1000f328:	00bfff84 	movi	r2,-2
1000f32c:	1884703a 	and	r2,r3,r2
1000f330:	1001703a 	wrctl	status,r2
  
  return context;
1000f334:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1000f338:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1000f33c:	00840074 	movhi	r2,4097
1000f340:	108e9a04 	addi	r2,r2,14952
1000f344:	e0fff817 	ldw	r3,-32(fp)
1000f348:	180690fa 	slli	r3,r3,3
1000f34c:	10c5883a 	add	r2,r2,r3
1000f350:	e0fffe17 	ldw	r3,-8(fp)
1000f354:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1000f358:	00840074 	movhi	r2,4097
1000f35c:	108e9a04 	addi	r2,r2,14952
1000f360:	e0fff817 	ldw	r3,-32(fp)
1000f364:	180690fa 	slli	r3,r3,3
1000f368:	10c5883a 	add	r2,r2,r3
1000f36c:	10800104 	addi	r2,r2,4
1000f370:	e0ffff17 	ldw	r3,-4(fp)
1000f374:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1000f378:	e0bffe17 	ldw	r2,-8(fp)
1000f37c:	10000526 	beq	r2,zero,1000f394 <alt_iic_isr_register+0xb4>
1000f380:	e0bff817 	ldw	r2,-32(fp)
1000f384:	100b883a 	mov	r5,r2
1000f388:	e13ffc17 	ldw	r4,-16(fp)
1000f38c:	000f1800 	call	1000f180 <alt_ic_irq_enable>
1000f390:	00000406 	br	1000f3a4 <alt_iic_isr_register+0xc4>
1000f394:	e0bff817 	ldw	r2,-32(fp)
1000f398:	100b883a 	mov	r5,r2
1000f39c:	e13ffc17 	ldw	r4,-16(fp)
1000f3a0:	000f2080 	call	1000f208 <alt_ic_irq_disable>
1000f3a4:	e0bff715 	stw	r2,-36(fp)
1000f3a8:	e0bffa17 	ldw	r2,-24(fp)
1000f3ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f3b0:	e0bff917 	ldw	r2,-28(fp)
1000f3b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1000f3b8:	e0bff717 	ldw	r2,-36(fp)
}
1000f3bc:	e037883a 	mov	sp,fp
1000f3c0:	dfc00117 	ldw	ra,4(sp)
1000f3c4:	df000017 	ldw	fp,0(sp)
1000f3c8:	dec00204 	addi	sp,sp,8
1000f3cc:	f800283a 	ret

1000f3d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1000f3d0:	defff804 	addi	sp,sp,-32
1000f3d4:	dfc00715 	stw	ra,28(sp)
1000f3d8:	df000615 	stw	fp,24(sp)
1000f3dc:	dc000515 	stw	r16,20(sp)
1000f3e0:	df000604 	addi	fp,sp,24
1000f3e4:	e13ffb15 	stw	r4,-20(fp)
1000f3e8:	e17ffc15 	stw	r5,-16(fp)
1000f3ec:	e1bffd15 	stw	r6,-12(fp)
1000f3f0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000f3f4:	e1bffe17 	ldw	r6,-8(fp)
1000f3f8:	e17ffd17 	ldw	r5,-12(fp)
1000f3fc:	e13ffc17 	ldw	r4,-16(fp)
1000f400:	000f6580 	call	1000f658 <open>
1000f404:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1000f408:	e0bffa17 	ldw	r2,-24(fp)
1000f40c:	10002216 	blt	r2,zero,1000f498 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1000f410:	04040074 	movhi	r16,4097
1000f414:	84033b04 	addi	r16,r16,3308
1000f418:	e0bffa17 	ldw	r2,-24(fp)
1000f41c:	01400304 	movi	r5,12
1000f420:	1009883a 	mov	r4,r2
1000f424:	000097c0 	call	1000097c <__mulsi3>
1000f428:	8085883a 	add	r2,r16,r2
1000f42c:	10c00017 	ldw	r3,0(r2)
1000f430:	e0bffb17 	ldw	r2,-20(fp)
1000f434:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1000f438:	04040074 	movhi	r16,4097
1000f43c:	84033b04 	addi	r16,r16,3308
1000f440:	e0bffa17 	ldw	r2,-24(fp)
1000f444:	01400304 	movi	r5,12
1000f448:	1009883a 	mov	r4,r2
1000f44c:	000097c0 	call	1000097c <__mulsi3>
1000f450:	8085883a 	add	r2,r16,r2
1000f454:	10800104 	addi	r2,r2,4
1000f458:	10c00017 	ldw	r3,0(r2)
1000f45c:	e0bffb17 	ldw	r2,-20(fp)
1000f460:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1000f464:	04040074 	movhi	r16,4097
1000f468:	84033b04 	addi	r16,r16,3308
1000f46c:	e0bffa17 	ldw	r2,-24(fp)
1000f470:	01400304 	movi	r5,12
1000f474:	1009883a 	mov	r4,r2
1000f478:	000097c0 	call	1000097c <__mulsi3>
1000f47c:	8085883a 	add	r2,r16,r2
1000f480:	10800204 	addi	r2,r2,8
1000f484:	10c00017 	ldw	r3,0(r2)
1000f488:	e0bffb17 	ldw	r2,-20(fp)
1000f48c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1000f490:	e13ffa17 	ldw	r4,-24(fp)
1000f494:	000df0c0 	call	1000df0c <alt_release_fd>
  }
} 
1000f498:	0001883a 	nop
1000f49c:	e6ffff04 	addi	sp,fp,-4
1000f4a0:	dfc00217 	ldw	ra,8(sp)
1000f4a4:	df000117 	ldw	fp,4(sp)
1000f4a8:	dc000017 	ldw	r16,0(sp)
1000f4ac:	dec00304 	addi	sp,sp,12
1000f4b0:	f800283a 	ret

1000f4b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000f4b4:	defffb04 	addi	sp,sp,-20
1000f4b8:	dfc00415 	stw	ra,16(sp)
1000f4bc:	df000315 	stw	fp,12(sp)
1000f4c0:	df000304 	addi	fp,sp,12
1000f4c4:	e13ffd15 	stw	r4,-12(fp)
1000f4c8:	e17ffe15 	stw	r5,-8(fp)
1000f4cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1000f4d0:	01c07fc4 	movi	r7,511
1000f4d4:	01800044 	movi	r6,1
1000f4d8:	e17ffd17 	ldw	r5,-12(fp)
1000f4dc:	01040074 	movhi	r4,4097
1000f4e0:	21033e04 	addi	r4,r4,3320
1000f4e4:	000f3d00 	call	1000f3d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1000f4e8:	01c07fc4 	movi	r7,511
1000f4ec:	000d883a 	mov	r6,zero
1000f4f0:	e17ffe17 	ldw	r5,-8(fp)
1000f4f4:	01040074 	movhi	r4,4097
1000f4f8:	21033b04 	addi	r4,r4,3308
1000f4fc:	000f3d00 	call	1000f3d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1000f500:	01c07fc4 	movi	r7,511
1000f504:	01800044 	movi	r6,1
1000f508:	e17fff17 	ldw	r5,-4(fp)
1000f50c:	01040074 	movhi	r4,4097
1000f510:	21034104 	addi	r4,r4,3332
1000f514:	000f3d00 	call	1000f3d0 <alt_open_fd>
}  
1000f518:	0001883a 	nop
1000f51c:	e037883a 	mov	sp,fp
1000f520:	dfc00117 	ldw	ra,4(sp)
1000f524:	df000017 	ldw	fp,0(sp)
1000f528:	dec00204 	addi	sp,sp,8
1000f52c:	f800283a 	ret

1000f530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f530:	defffe04 	addi	sp,sp,-8
1000f534:	dfc00115 	stw	ra,4(sp)
1000f538:	df000015 	stw	fp,0(sp)
1000f53c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f540:	d0a00d17 	ldw	r2,-32716(gp)
1000f544:	10000326 	beq	r2,zero,1000f554 <alt_get_errno+0x24>
1000f548:	d0a00d17 	ldw	r2,-32716(gp)
1000f54c:	103ee83a 	callr	r2
1000f550:	00000106 	br	1000f558 <alt_get_errno+0x28>
1000f554:	d0a6d504 	addi	r2,gp,-25772
}
1000f558:	e037883a 	mov	sp,fp
1000f55c:	dfc00117 	ldw	ra,4(sp)
1000f560:	df000017 	ldw	fp,0(sp)
1000f564:	dec00204 	addi	sp,sp,8
1000f568:	f800283a 	ret

1000f56c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1000f56c:	defffb04 	addi	sp,sp,-20
1000f570:	dfc00415 	stw	ra,16(sp)
1000f574:	df000315 	stw	fp,12(sp)
1000f578:	dc000215 	stw	r16,8(sp)
1000f57c:	df000304 	addi	fp,sp,12
1000f580:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1000f584:	e0bffe17 	ldw	r2,-8(fp)
1000f588:	10800217 	ldw	r2,8(r2)
1000f58c:	10d00034 	orhi	r3,r2,16384
1000f590:	e0bffe17 	ldw	r2,-8(fp)
1000f594:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f598:	e03ffd15 	stw	zero,-12(fp)
1000f59c:	00002306 	br	1000f62c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f5a0:	04040074 	movhi	r16,4097
1000f5a4:	84033b04 	addi	r16,r16,3308
1000f5a8:	e0bffd17 	ldw	r2,-12(fp)
1000f5ac:	01400304 	movi	r5,12
1000f5b0:	1009883a 	mov	r4,r2
1000f5b4:	000097c0 	call	1000097c <__mulsi3>
1000f5b8:	8085883a 	add	r2,r16,r2
1000f5bc:	10c00017 	ldw	r3,0(r2)
1000f5c0:	e0bffe17 	ldw	r2,-8(fp)
1000f5c4:	10800017 	ldw	r2,0(r2)
1000f5c8:	1880151e 	bne	r3,r2,1000f620 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f5cc:	04040074 	movhi	r16,4097
1000f5d0:	84033b04 	addi	r16,r16,3308
1000f5d4:	e0bffd17 	ldw	r2,-12(fp)
1000f5d8:	01400304 	movi	r5,12
1000f5dc:	1009883a 	mov	r4,r2
1000f5e0:	000097c0 	call	1000097c <__mulsi3>
1000f5e4:	8085883a 	add	r2,r16,r2
1000f5e8:	10800204 	addi	r2,r2,8
1000f5ec:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1000f5f0:	10000b0e 	bge	r2,zero,1000f620 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000f5f4:	01400304 	movi	r5,12
1000f5f8:	e13ffd17 	ldw	r4,-12(fp)
1000f5fc:	000097c0 	call	1000097c <__mulsi3>
1000f600:	1007883a 	mov	r3,r2
1000f604:	00840074 	movhi	r2,4097
1000f608:	10833b04 	addi	r2,r2,3308
1000f60c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1000f610:	e0bffe17 	ldw	r2,-8(fp)
1000f614:	18800226 	beq	r3,r2,1000f620 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1000f618:	00bffcc4 	movi	r2,-13
1000f61c:	00000806 	br	1000f640 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1000f620:	e0bffd17 	ldw	r2,-12(fp)
1000f624:	10800044 	addi	r2,r2,1
1000f628:	e0bffd15 	stw	r2,-12(fp)
1000f62c:	d0a00c17 	ldw	r2,-32720(gp)
1000f630:	1007883a 	mov	r3,r2
1000f634:	e0bffd17 	ldw	r2,-12(fp)
1000f638:	18bfd92e 	bgeu	r3,r2,1000f5a0 <__alt_data_end+0xf800f5a0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1000f63c:	0005883a 	mov	r2,zero
}
1000f640:	e6ffff04 	addi	sp,fp,-4
1000f644:	dfc00217 	ldw	ra,8(sp)
1000f648:	df000117 	ldw	fp,4(sp)
1000f64c:	dc000017 	ldw	r16,0(sp)
1000f650:	dec00304 	addi	sp,sp,12
1000f654:	f800283a 	ret

1000f658 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1000f658:	defff604 	addi	sp,sp,-40
1000f65c:	dfc00915 	stw	ra,36(sp)
1000f660:	df000815 	stw	fp,32(sp)
1000f664:	df000804 	addi	fp,sp,32
1000f668:	e13ffd15 	stw	r4,-12(fp)
1000f66c:	e17ffe15 	stw	r5,-8(fp)
1000f670:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1000f674:	00bfffc4 	movi	r2,-1
1000f678:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1000f67c:	00bffb44 	movi	r2,-19
1000f680:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1000f684:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1000f688:	d1600a04 	addi	r5,gp,-32728
1000f68c:	e13ffd17 	ldw	r4,-12(fp)
1000f690:	000f97c0 	call	1000f97c <alt_find_dev>
1000f694:	e0bff815 	stw	r2,-32(fp)
1000f698:	e0bff817 	ldw	r2,-32(fp)
1000f69c:	1000051e 	bne	r2,zero,1000f6b4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1000f6a0:	e13ffd17 	ldw	r4,-12(fp)
1000f6a4:	000fa0c0 	call	1000fa0c <alt_find_file>
1000f6a8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1000f6ac:	00800044 	movi	r2,1
1000f6b0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000f6b4:	e0bff817 	ldw	r2,-32(fp)
1000f6b8:	10002b26 	beq	r2,zero,1000f768 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
1000f6bc:	e13ff817 	ldw	r4,-32(fp)
1000f6c0:	000fb140 	call	1000fb14 <alt_get_fd>
1000f6c4:	e0bff915 	stw	r2,-28(fp)
1000f6c8:	e0bff917 	ldw	r2,-28(fp)
1000f6cc:	1000030e 	bge	r2,zero,1000f6dc <open+0x84>
    {
      status = index;
1000f6d0:	e0bff917 	ldw	r2,-28(fp)
1000f6d4:	e0bffa15 	stw	r2,-24(fp)
1000f6d8:	00002506 	br	1000f770 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
1000f6dc:	01400304 	movi	r5,12
1000f6e0:	e13ff917 	ldw	r4,-28(fp)
1000f6e4:	000097c0 	call	1000097c <__mulsi3>
1000f6e8:	1007883a 	mov	r3,r2
1000f6ec:	00840074 	movhi	r2,4097
1000f6f0:	10833b04 	addi	r2,r2,3308
1000f6f4:	1885883a 	add	r2,r3,r2
1000f6f8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1000f6fc:	e0fffe17 	ldw	r3,-8(fp)
1000f700:	00900034 	movhi	r2,16384
1000f704:	10bfffc4 	addi	r2,r2,-1
1000f708:	1886703a 	and	r3,r3,r2
1000f70c:	e0bffc17 	ldw	r2,-16(fp)
1000f710:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000f714:	e0bffb17 	ldw	r2,-20(fp)
1000f718:	1000051e 	bne	r2,zero,1000f730 <open+0xd8>
1000f71c:	e13ffc17 	ldw	r4,-16(fp)
1000f720:	000f56c0 	call	1000f56c <alt_file_locked>
1000f724:	e0bffa15 	stw	r2,-24(fp)
1000f728:	e0bffa17 	ldw	r2,-24(fp)
1000f72c:	10001016 	blt	r2,zero,1000f770 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1000f730:	e0bff817 	ldw	r2,-32(fp)
1000f734:	10800317 	ldw	r2,12(r2)
1000f738:	10000826 	beq	r2,zero,1000f75c <open+0x104>
1000f73c:	e0bff817 	ldw	r2,-32(fp)
1000f740:	10800317 	ldw	r2,12(r2)
1000f744:	e1ffff17 	ldw	r7,-4(fp)
1000f748:	e1bffe17 	ldw	r6,-8(fp)
1000f74c:	e17ffd17 	ldw	r5,-12(fp)
1000f750:	e13ffc17 	ldw	r4,-16(fp)
1000f754:	103ee83a 	callr	r2
1000f758:	00000106 	br	1000f760 <open+0x108>
1000f75c:	0005883a 	mov	r2,zero
1000f760:	e0bffa15 	stw	r2,-24(fp)
1000f764:	00000206 	br	1000f770 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
1000f768:	00bffb44 	movi	r2,-19
1000f76c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1000f770:	e0bffa17 	ldw	r2,-24(fp)
1000f774:	1000090e 	bge	r2,zero,1000f79c <open+0x144>
  {
    alt_release_fd (index);  
1000f778:	e13ff917 	ldw	r4,-28(fp)
1000f77c:	000df0c0 	call	1000df0c <alt_release_fd>
    ALT_ERRNO = -status;
1000f780:	000f5300 	call	1000f530 <alt_get_errno>
1000f784:	1007883a 	mov	r3,r2
1000f788:	e0bffa17 	ldw	r2,-24(fp)
1000f78c:	0085c83a 	sub	r2,zero,r2
1000f790:	18800015 	stw	r2,0(r3)
    return -1;
1000f794:	00bfffc4 	movi	r2,-1
1000f798:	00000106 	br	1000f7a0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
1000f79c:	e0bff917 	ldw	r2,-28(fp)
}
1000f7a0:	e037883a 	mov	sp,fp
1000f7a4:	dfc00117 	ldw	ra,4(sp)
1000f7a8:	df000017 	ldw	fp,0(sp)
1000f7ac:	dec00204 	addi	sp,sp,8
1000f7b0:	f800283a 	ret

1000f7b4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000f7b4:	defffa04 	addi	sp,sp,-24
1000f7b8:	df000515 	stw	fp,20(sp)
1000f7bc:	df000504 	addi	fp,sp,20
1000f7c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f7c4:	0005303a 	rdctl	r2,status
1000f7c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f7cc:	e0fffc17 	ldw	r3,-16(fp)
1000f7d0:	00bfff84 	movi	r2,-2
1000f7d4:	1884703a 	and	r2,r3,r2
1000f7d8:	1001703a 	wrctl	status,r2
  
  return context;
1000f7dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1000f7e0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000f7e4:	e0bfff17 	ldw	r2,-4(fp)
1000f7e8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1000f7ec:	e0bffd17 	ldw	r2,-12(fp)
1000f7f0:	10800017 	ldw	r2,0(r2)
1000f7f4:	e0fffd17 	ldw	r3,-12(fp)
1000f7f8:	18c00117 	ldw	r3,4(r3)
1000f7fc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1000f800:	e0bffd17 	ldw	r2,-12(fp)
1000f804:	10800117 	ldw	r2,4(r2)
1000f808:	e0fffd17 	ldw	r3,-12(fp)
1000f80c:	18c00017 	ldw	r3,0(r3)
1000f810:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000f814:	e0bffd17 	ldw	r2,-12(fp)
1000f818:	e0fffd17 	ldw	r3,-12(fp)
1000f81c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1000f820:	e0bffd17 	ldw	r2,-12(fp)
1000f824:	e0fffd17 	ldw	r3,-12(fp)
1000f828:	10c00015 	stw	r3,0(r2)
1000f82c:	e0bffb17 	ldw	r2,-20(fp)
1000f830:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f834:	e0bffe17 	ldw	r2,-8(fp)
1000f838:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1000f83c:	0001883a 	nop
1000f840:	e037883a 	mov	sp,fp
1000f844:	df000017 	ldw	fp,0(sp)
1000f848:	dec00104 	addi	sp,sp,4
1000f84c:	f800283a 	ret

1000f850 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000f850:	defffb04 	addi	sp,sp,-20
1000f854:	dfc00415 	stw	ra,16(sp)
1000f858:	df000315 	stw	fp,12(sp)
1000f85c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000f860:	d0a01017 	ldw	r2,-32704(gp)
1000f864:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1000f868:	d0a6db17 	ldw	r2,-25748(gp)
1000f86c:	10800044 	addi	r2,r2,1
1000f870:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f874:	00002e06 	br	1000f930 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1000f878:	e0bffd17 	ldw	r2,-12(fp)
1000f87c:	10800017 	ldw	r2,0(r2)
1000f880:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1000f884:	e0bffd17 	ldw	r2,-12(fp)
1000f888:	10800403 	ldbu	r2,16(r2)
1000f88c:	10803fcc 	andi	r2,r2,255
1000f890:	10000426 	beq	r2,zero,1000f8a4 <alt_tick+0x54>
1000f894:	d0a6db17 	ldw	r2,-25748(gp)
1000f898:	1000021e 	bne	r2,zero,1000f8a4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1000f89c:	e0bffd17 	ldw	r2,-12(fp)
1000f8a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1000f8a4:	e0bffd17 	ldw	r2,-12(fp)
1000f8a8:	10800217 	ldw	r2,8(r2)
1000f8ac:	d0e6db17 	ldw	r3,-25748(gp)
1000f8b0:	18801d36 	bltu	r3,r2,1000f928 <alt_tick+0xd8>
1000f8b4:	e0bffd17 	ldw	r2,-12(fp)
1000f8b8:	10800403 	ldbu	r2,16(r2)
1000f8bc:	10803fcc 	andi	r2,r2,255
1000f8c0:	1000191e 	bne	r2,zero,1000f928 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1000f8c4:	e0bffd17 	ldw	r2,-12(fp)
1000f8c8:	10800317 	ldw	r2,12(r2)
1000f8cc:	e0fffd17 	ldw	r3,-12(fp)
1000f8d0:	18c00517 	ldw	r3,20(r3)
1000f8d4:	1809883a 	mov	r4,r3
1000f8d8:	103ee83a 	callr	r2
1000f8dc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1000f8e0:	e0bfff17 	ldw	r2,-4(fp)
1000f8e4:	1000031e 	bne	r2,zero,1000f8f4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1000f8e8:	e13ffd17 	ldw	r4,-12(fp)
1000f8ec:	000f7b40 	call	1000f7b4 <alt_alarm_stop>
1000f8f0:	00000d06 	br	1000f928 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1000f8f4:	e0bffd17 	ldw	r2,-12(fp)
1000f8f8:	10c00217 	ldw	r3,8(r2)
1000f8fc:	e0bfff17 	ldw	r2,-4(fp)
1000f900:	1887883a 	add	r3,r3,r2
1000f904:	e0bffd17 	ldw	r2,-12(fp)
1000f908:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1000f90c:	e0bffd17 	ldw	r2,-12(fp)
1000f910:	10c00217 	ldw	r3,8(r2)
1000f914:	d0a6db17 	ldw	r2,-25748(gp)
1000f918:	1880032e 	bgeu	r3,r2,1000f928 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1000f91c:	e0bffd17 	ldw	r2,-12(fp)
1000f920:	00c00044 	movi	r3,1
1000f924:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1000f928:	e0bffe17 	ldw	r2,-8(fp)
1000f92c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1000f930:	e0fffd17 	ldw	r3,-12(fp)
1000f934:	d0a01004 	addi	r2,gp,-32704
1000f938:	18bfcf1e 	bne	r3,r2,1000f878 <__alt_data_end+0xf800f878>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1000f93c:	0001883a 	nop
}
1000f940:	0001883a 	nop
1000f944:	e037883a 	mov	sp,fp
1000f948:	dfc00117 	ldw	ra,4(sp)
1000f94c:	df000017 	ldw	fp,0(sp)
1000f950:	dec00204 	addi	sp,sp,8
1000f954:	f800283a 	ret

1000f958 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1000f958:	deffff04 	addi	sp,sp,-4
1000f95c:	df000015 	stw	fp,0(sp)
1000f960:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1000f964:	000170fa 	wrctl	ienable,zero
}
1000f968:	0001883a 	nop
1000f96c:	e037883a 	mov	sp,fp
1000f970:	df000017 	ldw	fp,0(sp)
1000f974:	dec00104 	addi	sp,sp,4
1000f978:	f800283a 	ret

1000f97c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1000f97c:	defffa04 	addi	sp,sp,-24
1000f980:	dfc00515 	stw	ra,20(sp)
1000f984:	df000415 	stw	fp,16(sp)
1000f988:	df000404 	addi	fp,sp,16
1000f98c:	e13ffe15 	stw	r4,-8(fp)
1000f990:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1000f994:	e0bfff17 	ldw	r2,-4(fp)
1000f998:	10800017 	ldw	r2,0(r2)
1000f99c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000f9a0:	e13ffe17 	ldw	r4,-8(fp)
1000f9a4:	000756c0 	call	1000756c <strlen>
1000f9a8:	10800044 	addi	r2,r2,1
1000f9ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000f9b0:	00000d06 	br	1000f9e8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1000f9b4:	e0bffc17 	ldw	r2,-16(fp)
1000f9b8:	10800217 	ldw	r2,8(r2)
1000f9bc:	e0fffd17 	ldw	r3,-12(fp)
1000f9c0:	180d883a 	mov	r6,r3
1000f9c4:	e17ffe17 	ldw	r5,-8(fp)
1000f9c8:	1009883a 	mov	r4,r2
1000f9cc:	000fcc00 	call	1000fcc0 <memcmp>
1000f9d0:	1000021e 	bne	r2,zero,1000f9dc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1000f9d4:	e0bffc17 	ldw	r2,-16(fp)
1000f9d8:	00000706 	br	1000f9f8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1000f9dc:	e0bffc17 	ldw	r2,-16(fp)
1000f9e0:	10800017 	ldw	r2,0(r2)
1000f9e4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000f9e8:	e0fffc17 	ldw	r3,-16(fp)
1000f9ec:	e0bfff17 	ldw	r2,-4(fp)
1000f9f0:	18bff01e 	bne	r3,r2,1000f9b4 <__alt_data_end+0xf800f9b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1000f9f4:	0005883a 	mov	r2,zero
}
1000f9f8:	e037883a 	mov	sp,fp
1000f9fc:	dfc00117 	ldw	ra,4(sp)
1000fa00:	df000017 	ldw	fp,0(sp)
1000fa04:	dec00204 	addi	sp,sp,8
1000fa08:	f800283a 	ret

1000fa0c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1000fa0c:	defffb04 	addi	sp,sp,-20
1000fa10:	dfc00415 	stw	ra,16(sp)
1000fa14:	df000315 	stw	fp,12(sp)
1000fa18:	df000304 	addi	fp,sp,12
1000fa1c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1000fa20:	d0a00817 	ldw	r2,-32736(gp)
1000fa24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000fa28:	00003106 	br	1000faf0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1000fa2c:	e0bffd17 	ldw	r2,-12(fp)
1000fa30:	10800217 	ldw	r2,8(r2)
1000fa34:	1009883a 	mov	r4,r2
1000fa38:	000756c0 	call	1000756c <strlen>
1000fa3c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1000fa40:	e0bffd17 	ldw	r2,-12(fp)
1000fa44:	10c00217 	ldw	r3,8(r2)
1000fa48:	e0bffe17 	ldw	r2,-8(fp)
1000fa4c:	10bfffc4 	addi	r2,r2,-1
1000fa50:	1885883a 	add	r2,r3,r2
1000fa54:	10800003 	ldbu	r2,0(r2)
1000fa58:	10803fcc 	andi	r2,r2,255
1000fa5c:	1080201c 	xori	r2,r2,128
1000fa60:	10bfe004 	addi	r2,r2,-128
1000fa64:	10800bd8 	cmpnei	r2,r2,47
1000fa68:	1000031e 	bne	r2,zero,1000fa78 <alt_find_file+0x6c>
    {
      len -= 1;
1000fa6c:	e0bffe17 	ldw	r2,-8(fp)
1000fa70:	10bfffc4 	addi	r2,r2,-1
1000fa74:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000fa78:	e0bffe17 	ldw	r2,-8(fp)
1000fa7c:	e0ffff17 	ldw	r3,-4(fp)
1000fa80:	1885883a 	add	r2,r3,r2
1000fa84:	10800003 	ldbu	r2,0(r2)
1000fa88:	10803fcc 	andi	r2,r2,255
1000fa8c:	1080201c 	xori	r2,r2,128
1000fa90:	10bfe004 	addi	r2,r2,-128
1000fa94:	10800be0 	cmpeqi	r2,r2,47
1000fa98:	1000081e 	bne	r2,zero,1000fabc <alt_find_file+0xb0>
1000fa9c:	e0bffe17 	ldw	r2,-8(fp)
1000faa0:	e0ffff17 	ldw	r3,-4(fp)
1000faa4:	1885883a 	add	r2,r3,r2
1000faa8:	10800003 	ldbu	r2,0(r2)
1000faac:	10803fcc 	andi	r2,r2,255
1000fab0:	1080201c 	xori	r2,r2,128
1000fab4:	10bfe004 	addi	r2,r2,-128
1000fab8:	10000a1e 	bne	r2,zero,1000fae4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
1000fabc:	e0bffd17 	ldw	r2,-12(fp)
1000fac0:	10800217 	ldw	r2,8(r2)
1000fac4:	e0fffe17 	ldw	r3,-8(fp)
1000fac8:	180d883a 	mov	r6,r3
1000facc:	e17fff17 	ldw	r5,-4(fp)
1000fad0:	1009883a 	mov	r4,r2
1000fad4:	000fcc00 	call	1000fcc0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1000fad8:	1000021e 	bne	r2,zero,1000fae4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1000fadc:	e0bffd17 	ldw	r2,-12(fp)
1000fae0:	00000706 	br	1000fb00 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
1000fae4:	e0bffd17 	ldw	r2,-12(fp)
1000fae8:	10800017 	ldw	r2,0(r2)
1000faec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1000faf0:	e0fffd17 	ldw	r3,-12(fp)
1000faf4:	d0a00804 	addi	r2,gp,-32736
1000faf8:	18bfcc1e 	bne	r3,r2,1000fa2c <__alt_data_end+0xf800fa2c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
1000fafc:	0005883a 	mov	r2,zero
}
1000fb00:	e037883a 	mov	sp,fp
1000fb04:	dfc00117 	ldw	ra,4(sp)
1000fb08:	df000017 	ldw	fp,0(sp)
1000fb0c:	dec00204 	addi	sp,sp,8
1000fb10:	f800283a 	ret

1000fb14 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1000fb14:	defffa04 	addi	sp,sp,-24
1000fb18:	dfc00515 	stw	ra,20(sp)
1000fb1c:	df000415 	stw	fp,16(sp)
1000fb20:	dc000315 	stw	r16,12(sp)
1000fb24:	df000404 	addi	fp,sp,16
1000fb28:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
1000fb2c:	00bffa04 	movi	r2,-24
1000fb30:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000fb34:	e03ffc15 	stw	zero,-16(fp)
1000fb38:	00001d06 	br	1000fbb0 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
1000fb3c:	04040074 	movhi	r16,4097
1000fb40:	84033b04 	addi	r16,r16,3308
1000fb44:	e0bffc17 	ldw	r2,-16(fp)
1000fb48:	01400304 	movi	r5,12
1000fb4c:	1009883a 	mov	r4,r2
1000fb50:	000097c0 	call	1000097c <__mulsi3>
1000fb54:	8085883a 	add	r2,r16,r2
1000fb58:	10800017 	ldw	r2,0(r2)
1000fb5c:	1000111e 	bne	r2,zero,1000fba4 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
1000fb60:	04040074 	movhi	r16,4097
1000fb64:	84033b04 	addi	r16,r16,3308
1000fb68:	e0bffc17 	ldw	r2,-16(fp)
1000fb6c:	01400304 	movi	r5,12
1000fb70:	1009883a 	mov	r4,r2
1000fb74:	000097c0 	call	1000097c <__mulsi3>
1000fb78:	8085883a 	add	r2,r16,r2
1000fb7c:	e0fffe17 	ldw	r3,-8(fp)
1000fb80:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
1000fb84:	d0e00c17 	ldw	r3,-32720(gp)
1000fb88:	e0bffc17 	ldw	r2,-16(fp)
1000fb8c:	1880020e 	bge	r3,r2,1000fb98 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
1000fb90:	e0bffc17 	ldw	r2,-16(fp)
1000fb94:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
1000fb98:	e0bffc17 	ldw	r2,-16(fp)
1000fb9c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1000fba0:	00000606 	br	1000fbbc <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1000fba4:	e0bffc17 	ldw	r2,-16(fp)
1000fba8:	10800044 	addi	r2,r2,1
1000fbac:	e0bffc15 	stw	r2,-16(fp)
1000fbb0:	e0bffc17 	ldw	r2,-16(fp)
1000fbb4:	10800810 	cmplti	r2,r2,32
1000fbb8:	103fe01e 	bne	r2,zero,1000fb3c <__alt_data_end+0xf800fb3c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
1000fbbc:	e0bffd17 	ldw	r2,-12(fp)
}
1000fbc0:	e6ffff04 	addi	sp,fp,-4
1000fbc4:	dfc00217 	ldw	ra,8(sp)
1000fbc8:	df000117 	ldw	fp,4(sp)
1000fbcc:	dc000017 	ldw	r16,0(sp)
1000fbd0:	dec00304 	addi	sp,sp,12
1000fbd4:	f800283a 	ret

1000fbd8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1000fbd8:	defffe04 	addi	sp,sp,-8
1000fbdc:	df000115 	stw	fp,4(sp)
1000fbe0:	df000104 	addi	fp,sp,4
1000fbe4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1000fbe8:	e0bfff17 	ldw	r2,-4(fp)
1000fbec:	10bffe84 	addi	r2,r2,-6
1000fbf0:	10c00428 	cmpgeui	r3,r2,16
1000fbf4:	18001a1e 	bne	r3,zero,1000fc60 <alt_exception_cause_generated_bad_addr+0x88>
1000fbf8:	100690ba 	slli	r3,r2,2
1000fbfc:	00840074 	movhi	r2,4097
1000fc00:	10bf0404 	addi	r2,r2,-1008
1000fc04:	1885883a 	add	r2,r3,r2
1000fc08:	10800017 	ldw	r2,0(r2)
1000fc0c:	1000683a 	jmp	r2
1000fc10:	1000fc50 	cmplti	zero,r2,1009
1000fc14:	1000fc50 	cmplti	zero,r2,1009
1000fc18:	1000fc60 	cmpeqi	zero,r2,1009
1000fc1c:	1000fc60 	cmpeqi	zero,r2,1009
1000fc20:	1000fc60 	cmpeqi	zero,r2,1009
1000fc24:	1000fc50 	cmplti	zero,r2,1009
1000fc28:	1000fc58 	cmpnei	zero,r2,1009
1000fc2c:	1000fc60 	cmpeqi	zero,r2,1009
1000fc30:	1000fc50 	cmplti	zero,r2,1009
1000fc34:	1000fc50 	cmplti	zero,r2,1009
1000fc38:	1000fc60 	cmpeqi	zero,r2,1009
1000fc3c:	1000fc50 	cmplti	zero,r2,1009
1000fc40:	1000fc58 	cmpnei	zero,r2,1009
1000fc44:	1000fc60 	cmpeqi	zero,r2,1009
1000fc48:	1000fc60 	cmpeqi	zero,r2,1009
1000fc4c:	1000fc50 	cmplti	zero,r2,1009
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
1000fc50:	00800044 	movi	r2,1
1000fc54:	00000306 	br	1000fc64 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1000fc58:	0005883a 	mov	r2,zero
1000fc5c:	00000106 	br	1000fc64 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
1000fc60:	0005883a 	mov	r2,zero
  }
}
1000fc64:	e037883a 	mov	sp,fp
1000fc68:	df000017 	ldw	fp,0(sp)
1000fc6c:	dec00104 	addi	sp,sp,4
1000fc70:	f800283a 	ret

1000fc74 <atexit>:
1000fc74:	200b883a 	mov	r5,r4
1000fc78:	000f883a 	mov	r7,zero
1000fc7c:	000d883a 	mov	r6,zero
1000fc80:	0009883a 	mov	r4,zero
1000fc84:	000fd3c1 	jmpi	1000fd3c <__register_exitproc>

1000fc88 <exit>:
1000fc88:	defffe04 	addi	sp,sp,-8
1000fc8c:	000b883a 	mov	r5,zero
1000fc90:	dc000015 	stw	r16,0(sp)
1000fc94:	dfc00115 	stw	ra,4(sp)
1000fc98:	2021883a 	mov	r16,r4
1000fc9c:	000fe540 	call	1000fe54 <__call_exitprocs>
1000fca0:	00840074 	movhi	r2,4097
1000fca4:	1087b504 	addi	r2,r2,7892
1000fca8:	11000017 	ldw	r4,0(r2)
1000fcac:	20800f17 	ldw	r2,60(r4)
1000fcb0:	10000126 	beq	r2,zero,1000fcb8 <exit+0x30>
1000fcb4:	103ee83a 	callr	r2
1000fcb8:	8009883a 	mov	r4,r16
1000fcbc:	000ffd40 	call	1000ffd4 <_exit>

1000fcc0 <memcmp>:
1000fcc0:	01c000c4 	movi	r7,3
1000fcc4:	3980192e 	bgeu	r7,r6,1000fd2c <memcmp+0x6c>
1000fcc8:	2144b03a 	or	r2,r4,r5
1000fccc:	11c4703a 	and	r2,r2,r7
1000fcd0:	10000f26 	beq	r2,zero,1000fd10 <memcmp+0x50>
1000fcd4:	20800003 	ldbu	r2,0(r4)
1000fcd8:	28c00003 	ldbu	r3,0(r5)
1000fcdc:	10c0151e 	bne	r2,r3,1000fd34 <memcmp+0x74>
1000fce0:	31bfff84 	addi	r6,r6,-2
1000fce4:	01ffffc4 	movi	r7,-1
1000fce8:	00000406 	br	1000fcfc <memcmp+0x3c>
1000fcec:	20800003 	ldbu	r2,0(r4)
1000fcf0:	28c00003 	ldbu	r3,0(r5)
1000fcf4:	31bfffc4 	addi	r6,r6,-1
1000fcf8:	10c00e1e 	bne	r2,r3,1000fd34 <memcmp+0x74>
1000fcfc:	21000044 	addi	r4,r4,1
1000fd00:	29400044 	addi	r5,r5,1
1000fd04:	31fff91e 	bne	r6,r7,1000fcec <__alt_data_end+0xf800fcec>
1000fd08:	0005883a 	mov	r2,zero
1000fd0c:	f800283a 	ret
1000fd10:	20c00017 	ldw	r3,0(r4)
1000fd14:	28800017 	ldw	r2,0(r5)
1000fd18:	18bfee1e 	bne	r3,r2,1000fcd4 <__alt_data_end+0xf800fcd4>
1000fd1c:	31bfff04 	addi	r6,r6,-4
1000fd20:	21000104 	addi	r4,r4,4
1000fd24:	29400104 	addi	r5,r5,4
1000fd28:	39bff936 	bltu	r7,r6,1000fd10 <__alt_data_end+0xf800fd10>
1000fd2c:	303fe91e 	bne	r6,zero,1000fcd4 <__alt_data_end+0xf800fcd4>
1000fd30:	003ff506 	br	1000fd08 <__alt_data_end+0xf800fd08>
1000fd34:	10c5c83a 	sub	r2,r2,r3
1000fd38:	f800283a 	ret

1000fd3c <__register_exitproc>:
1000fd3c:	defffa04 	addi	sp,sp,-24
1000fd40:	dc000315 	stw	r16,12(sp)
1000fd44:	04040074 	movhi	r16,4097
1000fd48:	8407b504 	addi	r16,r16,7892
1000fd4c:	80c00017 	ldw	r3,0(r16)
1000fd50:	dc400415 	stw	r17,16(sp)
1000fd54:	dfc00515 	stw	ra,20(sp)
1000fd58:	18805217 	ldw	r2,328(r3)
1000fd5c:	2023883a 	mov	r17,r4
1000fd60:	10003726 	beq	r2,zero,1000fe40 <__register_exitproc+0x104>
1000fd64:	10c00117 	ldw	r3,4(r2)
1000fd68:	010007c4 	movi	r4,31
1000fd6c:	20c00e16 	blt	r4,r3,1000fda8 <__register_exitproc+0x6c>
1000fd70:	1a000044 	addi	r8,r3,1
1000fd74:	8800221e 	bne	r17,zero,1000fe00 <__register_exitproc+0xc4>
1000fd78:	18c00084 	addi	r3,r3,2
1000fd7c:	18c7883a 	add	r3,r3,r3
1000fd80:	18c7883a 	add	r3,r3,r3
1000fd84:	12000115 	stw	r8,4(r2)
1000fd88:	10c7883a 	add	r3,r2,r3
1000fd8c:	19400015 	stw	r5,0(r3)
1000fd90:	0005883a 	mov	r2,zero
1000fd94:	dfc00517 	ldw	ra,20(sp)
1000fd98:	dc400417 	ldw	r17,16(sp)
1000fd9c:	dc000317 	ldw	r16,12(sp)
1000fda0:	dec00604 	addi	sp,sp,24
1000fda4:	f800283a 	ret
1000fda8:	00800034 	movhi	r2,0
1000fdac:	10800004 	addi	r2,r2,0
1000fdb0:	10002626 	beq	r2,zero,1000fe4c <__register_exitproc+0x110>
1000fdb4:	01006404 	movi	r4,400
1000fdb8:	d9400015 	stw	r5,0(sp)
1000fdbc:	d9800115 	stw	r6,4(sp)
1000fdc0:	d9c00215 	stw	r7,8(sp)
1000fdc4:	00000000 	call	10000000 <__reset>
1000fdc8:	d9400017 	ldw	r5,0(sp)
1000fdcc:	d9800117 	ldw	r6,4(sp)
1000fdd0:	d9c00217 	ldw	r7,8(sp)
1000fdd4:	10001d26 	beq	r2,zero,1000fe4c <__register_exitproc+0x110>
1000fdd8:	81000017 	ldw	r4,0(r16)
1000fddc:	10000115 	stw	zero,4(r2)
1000fde0:	02000044 	movi	r8,1
1000fde4:	22405217 	ldw	r9,328(r4)
1000fde8:	0007883a 	mov	r3,zero
1000fdec:	12400015 	stw	r9,0(r2)
1000fdf0:	20805215 	stw	r2,328(r4)
1000fdf4:	10006215 	stw	zero,392(r2)
1000fdf8:	10006315 	stw	zero,396(r2)
1000fdfc:	883fde26 	beq	r17,zero,1000fd78 <__alt_data_end+0xf800fd78>
1000fe00:	18c9883a 	add	r4,r3,r3
1000fe04:	2109883a 	add	r4,r4,r4
1000fe08:	1109883a 	add	r4,r2,r4
1000fe0c:	21802215 	stw	r6,136(r4)
1000fe10:	01800044 	movi	r6,1
1000fe14:	12406217 	ldw	r9,392(r2)
1000fe18:	30cc983a 	sll	r6,r6,r3
1000fe1c:	4992b03a 	or	r9,r9,r6
1000fe20:	12406215 	stw	r9,392(r2)
1000fe24:	21c04215 	stw	r7,264(r4)
1000fe28:	01000084 	movi	r4,2
1000fe2c:	893fd21e 	bne	r17,r4,1000fd78 <__alt_data_end+0xf800fd78>
1000fe30:	11006317 	ldw	r4,396(r2)
1000fe34:	218cb03a 	or	r6,r4,r6
1000fe38:	11806315 	stw	r6,396(r2)
1000fe3c:	003fce06 	br	1000fd78 <__alt_data_end+0xf800fd78>
1000fe40:	18805304 	addi	r2,r3,332
1000fe44:	18805215 	stw	r2,328(r3)
1000fe48:	003fc606 	br	1000fd64 <__alt_data_end+0xf800fd64>
1000fe4c:	00bfffc4 	movi	r2,-1
1000fe50:	003fd006 	br	1000fd94 <__alt_data_end+0xf800fd94>

1000fe54 <__call_exitprocs>:
1000fe54:	defff504 	addi	sp,sp,-44
1000fe58:	df000915 	stw	fp,36(sp)
1000fe5c:	dd400615 	stw	r21,24(sp)
1000fe60:	dc800315 	stw	r18,12(sp)
1000fe64:	dfc00a15 	stw	ra,40(sp)
1000fe68:	ddc00815 	stw	r23,32(sp)
1000fe6c:	dd800715 	stw	r22,28(sp)
1000fe70:	dd000515 	stw	r20,20(sp)
1000fe74:	dcc00415 	stw	r19,16(sp)
1000fe78:	dc400215 	stw	r17,8(sp)
1000fe7c:	dc000115 	stw	r16,4(sp)
1000fe80:	d9000015 	stw	r4,0(sp)
1000fe84:	2839883a 	mov	fp,r5
1000fe88:	04800044 	movi	r18,1
1000fe8c:	057fffc4 	movi	r21,-1
1000fe90:	00840074 	movhi	r2,4097
1000fe94:	1087b504 	addi	r2,r2,7892
1000fe98:	12000017 	ldw	r8,0(r2)
1000fe9c:	45005217 	ldw	r20,328(r8)
1000fea0:	44c05204 	addi	r19,r8,328
1000fea4:	a0001c26 	beq	r20,zero,1000ff18 <__call_exitprocs+0xc4>
1000fea8:	a0800117 	ldw	r2,4(r20)
1000feac:	15ffffc4 	addi	r23,r2,-1
1000feb0:	b8000d16 	blt	r23,zero,1000fee8 <__call_exitprocs+0x94>
1000feb4:	14000044 	addi	r16,r2,1
1000feb8:	8421883a 	add	r16,r16,r16
1000febc:	8421883a 	add	r16,r16,r16
1000fec0:	84402004 	addi	r17,r16,128
1000fec4:	a463883a 	add	r17,r20,r17
1000fec8:	a421883a 	add	r16,r20,r16
1000fecc:	e0001e26 	beq	fp,zero,1000ff48 <__call_exitprocs+0xf4>
1000fed0:	80804017 	ldw	r2,256(r16)
1000fed4:	e0801c26 	beq	fp,r2,1000ff48 <__call_exitprocs+0xf4>
1000fed8:	bdffffc4 	addi	r23,r23,-1
1000fedc:	843fff04 	addi	r16,r16,-4
1000fee0:	8c7fff04 	addi	r17,r17,-4
1000fee4:	bd7ff91e 	bne	r23,r21,1000fecc <__alt_data_end+0xf800fecc>
1000fee8:	00800034 	movhi	r2,0
1000feec:	10800004 	addi	r2,r2,0
1000fef0:	10000926 	beq	r2,zero,1000ff18 <__call_exitprocs+0xc4>
1000fef4:	a0800117 	ldw	r2,4(r20)
1000fef8:	1000301e 	bne	r2,zero,1000ffbc <__call_exitprocs+0x168>
1000fefc:	a0800017 	ldw	r2,0(r20)
1000ff00:	10003226 	beq	r2,zero,1000ffcc <__call_exitprocs+0x178>
1000ff04:	a009883a 	mov	r4,r20
1000ff08:	98800015 	stw	r2,0(r19)
1000ff0c:	00000000 	call	10000000 <__reset>
1000ff10:	9d000017 	ldw	r20,0(r19)
1000ff14:	a03fe41e 	bne	r20,zero,1000fea8 <__alt_data_end+0xf800fea8>
1000ff18:	dfc00a17 	ldw	ra,40(sp)
1000ff1c:	df000917 	ldw	fp,36(sp)
1000ff20:	ddc00817 	ldw	r23,32(sp)
1000ff24:	dd800717 	ldw	r22,28(sp)
1000ff28:	dd400617 	ldw	r21,24(sp)
1000ff2c:	dd000517 	ldw	r20,20(sp)
1000ff30:	dcc00417 	ldw	r19,16(sp)
1000ff34:	dc800317 	ldw	r18,12(sp)
1000ff38:	dc400217 	ldw	r17,8(sp)
1000ff3c:	dc000117 	ldw	r16,4(sp)
1000ff40:	dec00b04 	addi	sp,sp,44
1000ff44:	f800283a 	ret
1000ff48:	a0800117 	ldw	r2,4(r20)
1000ff4c:	80c00017 	ldw	r3,0(r16)
1000ff50:	10bfffc4 	addi	r2,r2,-1
1000ff54:	15c01426 	beq	r2,r23,1000ffa8 <__call_exitprocs+0x154>
1000ff58:	80000015 	stw	zero,0(r16)
1000ff5c:	183fde26 	beq	r3,zero,1000fed8 <__alt_data_end+0xf800fed8>
1000ff60:	95c8983a 	sll	r4,r18,r23
1000ff64:	a0806217 	ldw	r2,392(r20)
1000ff68:	a5800117 	ldw	r22,4(r20)
1000ff6c:	2084703a 	and	r2,r4,r2
1000ff70:	10000b26 	beq	r2,zero,1000ffa0 <__call_exitprocs+0x14c>
1000ff74:	a0806317 	ldw	r2,396(r20)
1000ff78:	2088703a 	and	r4,r4,r2
1000ff7c:	20000c1e 	bne	r4,zero,1000ffb0 <__call_exitprocs+0x15c>
1000ff80:	89400017 	ldw	r5,0(r17)
1000ff84:	d9000017 	ldw	r4,0(sp)
1000ff88:	183ee83a 	callr	r3
1000ff8c:	a0800117 	ldw	r2,4(r20)
1000ff90:	15bfbf1e 	bne	r2,r22,1000fe90 <__alt_data_end+0xf800fe90>
1000ff94:	98800017 	ldw	r2,0(r19)
1000ff98:	153fcf26 	beq	r2,r20,1000fed8 <__alt_data_end+0xf800fed8>
1000ff9c:	003fbc06 	br	1000fe90 <__alt_data_end+0xf800fe90>
1000ffa0:	183ee83a 	callr	r3
1000ffa4:	003ff906 	br	1000ff8c <__alt_data_end+0xf800ff8c>
1000ffa8:	a5c00115 	stw	r23,4(r20)
1000ffac:	003feb06 	br	1000ff5c <__alt_data_end+0xf800ff5c>
1000ffb0:	89000017 	ldw	r4,0(r17)
1000ffb4:	183ee83a 	callr	r3
1000ffb8:	003ff406 	br	1000ff8c <__alt_data_end+0xf800ff8c>
1000ffbc:	a0800017 	ldw	r2,0(r20)
1000ffc0:	a027883a 	mov	r19,r20
1000ffc4:	1029883a 	mov	r20,r2
1000ffc8:	003fb606 	br	1000fea4 <__alt_data_end+0xf800fea4>
1000ffcc:	0005883a 	mov	r2,zero
1000ffd0:	003ffb06 	br	1000ffc0 <__alt_data_end+0xf800ffc0>

1000ffd4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000ffd4:	defffd04 	addi	sp,sp,-12
1000ffd8:	df000215 	stw	fp,8(sp)
1000ffdc:	df000204 	addi	fp,sp,8
1000ffe0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000ffe4:	0001883a 	nop
1000ffe8:	e0bfff17 	ldw	r2,-4(fp)
1000ffec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1000fff0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000fff4:	10000226 	beq	r2,zero,10010000 <_exit+0x2c>
    ALT_SIM_FAIL();
1000fff8:	002af070 	cmpltui	zero,zero,43969
1000fffc:	00000106 	br	10010004 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10010000:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10010004:	003fff06 	br	10010004 <__alt_data_end+0xf8010004>
