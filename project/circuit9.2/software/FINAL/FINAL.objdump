
FINAL.elf:     file format elf32-littlenios2
FINAL.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000061d0 memsz 0x000061d0 flags r-x
    LOAD off    0x000071f0 vaddr 0x100061f0 paddr 0x10007f44 align 2**12
         filesz 0x00001d54 memsz 0x00001d54 flags rw-
    LOAD off    0x00009c98 vaddr 0x10009c98 paddr 0x10009c98 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005f50  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000070  10006180  10006180  00007180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d54  100061f0  10007f44  000071f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  10009c98  10009c98  00009c98  2**2
                  ALLOC, SMALL_DATA
  6 .ocm          00000000  00000000  00000000  00008f44  2**0
                  CONTENTS
  7 .sdram        00000000  10009dec  10009dec  00008f44  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008f44  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ad8  00000000  00000000  00008f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00017387  00000000  00000000  00009a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000064fb  00000000  00000000  00020dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006daa  00000000  00000000  000272c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000017a0  00000000  00000000  0002e06c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000297d  00000000  00000000  0002f80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004c4a  00000000  00000000  00032189  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00036dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000006c8  00000000  00000000  00036e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00039c66  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00039c69  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00039c75  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00039c76  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00039c77  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00039c7b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00039c7f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00039c83  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00039c8e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00039c99  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00039ca4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000034  00000000  00000000  00039cac  2**0
                  CONTENTS, READONLY
 30 .jdi          00004f1a  00000000  00000000  00039ce0  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0004d381  00000000  00000000  0003ebfa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10006180 l    d  .rodata	00000000 .rodata
100061f0 l    d  .rwdata	00000000 .rwdata
10009c98 l    d  .bss	00000000 .bss
00000000 l    d  .ocm	00000000 .ocm
10009dec l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FINAL_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 palette_test.c
10007f04 l     O .rwdata	00000004 vga_ctrl
100061f0 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
10007f08 l     O .rwdata	00000004 vga_ctrl
10006360 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
10000bdc l     F .text	00000008 __fp_unlock
10000bf0 l     F .text	0000019c __sinit.part.1
10000d8c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
100064d0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
10003960 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10003a74 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10003aa0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10003b94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10003c7c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10003d68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10003f44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10007f34 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
100041e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10004324 l     F .text	00000034 alt_dev_reg
10006ea4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10004600 l     F .text	0000020c altera_avalon_jtag_uart_irq
1000480c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100050e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10005548 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100056a8 l     F .text	0000003c alt_get_errno
100056e4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10009cc0 g     O .bss	00000004 alt_instruction_exception_handler
1000364c g     F .text	00000054 _isatty_r
10003e80 g     F .text	0000007c alt_main
100009f4 g     F .text	000000c0 _puts_r
10009cec g     O .bss	00000100 alt_irq
10003374 g     F .text	00000060 _lseek_r
10007f44 g       *ABS*	00000000 __flash_rwdata_start
10009dec g       *ABS*	00000000 __alt_heap_start
10002928 g     F .text	0000005c __sseek
10000f3c g     F .text	00000010 __sinit
10000d94 g     F .text	00000078 __sfmoreglue
10003f20 g     F .text	00000024 __malloc_unlock
10000728 g     F .text	00000144 textVGAColorScreenSaver
10002014 g     F .text	0000015c memmove
10000f24 g     F .text	00000018 _cleanup
10005ad0 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
100035f0 g     F .text	0000005c _fstat_r
10009ca4 g     O .bss	00000004 errno
100028a4 g     F .text	00000008 __seofread
10009cac g     O .bss	00000004 alt_argv
1000ff04 g       *ABS*	00000000 _gp
100041b8 g     F .text	00000030 usleep
1000044c g     F .text	00000050 textVGAColorClr
10006d24 g     O .rwdata	00000180 alt_fd_list
10005af4 g     F .text	00000090 alt_find_dev
10001ecc g     F .text	00000148 memcpy
10000be4 g     F .text	0000000c _cleanup_r
1000562c g     F .text	0000007c alt_io_redirect
10006180 g       *ABS*	00000000 __DTOR_END__
10000ab4 g     F .text	00000014 puts
10005d50 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10004a04 g     F .text	0000021c altera_avalon_jtag_uart_read
100038a4 g     F .text	00000064 .hidden __udivsi3
10003bd0 g     F .text	000000ac isatty
10009ca0 g     O .bss	00000004 __malloc_top_pad
10000f8c g     F .text	000004c8 __sfvwrite_r
100027fc g     F .text	00000054 _sbrk_r
10003590 g     F .text	00000060 _read_r
10007f2c g     O .rwdata	00000004 alt_max_fd
10002b94 g     F .text	000000f0 _fclose_r
10002f10 g     F .text	00000030 fflush
10009c9c g     O .bss	00000004 __malloc_max_sbrked_mem
10003da4 g     F .text	000000dc lseek
10007f0c g     O .rwdata	00000004 _global_impure_ptr
10002298 g     F .text	00000564 _realloc_r
10009dec g       *ABS*	00000000 __bss_end
10005458 g     F .text	000000f0 alt_iic_isr_register
100059c8 g     F .text	00000108 alt_tick
10000f5c g     F .text	00000018 __fp_lock_all
1000540c g     F .text	0000004c alt_ic_irq_enabled
1000592c g     F .text	0000009c alt_alarm_stop
10009cb4 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
10006cfc g     O .rwdata	00000028 alt_dev_null
100050c8 g     F .text	00000020 alt_dcache_flush_all
10007f44 g       *ABS*	00000000 __ram_rwdata_end
10007f24 g     O .rwdata	00000008 alt_dev_list
10004224 g     F .text	00000100 write
100061f0 g       *ABS*	00000000 __ram_rodata_end
10003adc g     F .text	000000b8 fstat
10003908 g     F .text	00000058 .hidden __umodsi3
10009dec g       *ABS*	00000000 end
10004540 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10006180 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10004c20 g     F .text	00000224 altera_avalon_jtag_uart_write
00000000 g       *ABS*	00000000 __alt_mem_ocm
10000f4c g     F .text	00000004 __sfp_lock_acquire
10001de8 g     F .text	000000e4 memchr
10003064 g     F .text	00000310 _free_r
10005fcc g     F .text	00000180 __call_exitprocs
10007f14 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
10009cb8 g     O .bss	00000004 _alt_tick_rate
10000ae0 g     F .text	00000064 rand
10009cbc g     O .bss	00000004 _alt_nticks
10003f80 g     F .text	00000104 read
10004390 g     F .text	0000004c alt_sys_init
10005eb4 g     F .text	00000118 __register_exitproc
100048ac g     F .text	00000068 altera_avalon_jtag_uart_close
100009cc g     F .text	00000028 .hidden __mulsi3
100061f0 g       *ABS*	00000000 __ram_rwdata_start
10006180 g       *ABS*	00000000 __ram_rodata_start
10009cc4 g     O .bss	00000028 __malloc_current_mallinfo
100043dc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10005c8c g     F .text	000000c4 alt_get_fd
10004f70 g     F .text	00000158 alt_busy_sleep
10002b40 g     F .text	00000054 _close_r
10005e38 g     F .text	0000007c memcmp
1000449c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10009dec g       *ABS*	00000000 __alt_stack_base
100044ec g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100029ec g     F .text	00000154 __swsetup_r
10000e0c g     F .text	00000118 __sfp
100068f4 g     O .rwdata	00000408 __malloc_av_
10000f58 g     F .text	00000004 __sinit_lock_release
10002850 g     F .text	00000054 __sread
10005b84 g     F .text	00000108 alt_find_file
10005124 g     F .text	000000a4 alt_dev_llist_insert
10003efc g     F .text	00000024 __malloc_lock
10004108 g     F .text	000000b0 sbrk
10002eb4 g     F .text	0000005c _fflush_r
10009c98 g       *ABS*	00000000 __bss_start
10002170 g     F .text	00000128 memset
1000026c g     F .text	0000002c main
10009cb0 g     O .bss	00000004 alt_envp
10009c98 g     O .bss	00000004 __malloc_max_total_mem
1000443c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10000ac8 g     F .text	00000018 srand
10002984 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10002c84 g     F .text	00000014 fclose
100015dc g     F .text	0000080c _malloc_r
10007f30 g     O .rwdata	00000004 alt_errno
10001454 g     F .text	000000c4 _fwalk
100037ac g     F .text	00000084 .hidden __divsi3
100005ac g     F .text	0000017c setColorPalette
10002f40 g     F .text	00000124 _malloc_trim_r
10006180 g       *ABS*	00000000 __CTOR_END__
10006180 g       *ABS*	00000000 __flash_rodata_start
10006180 g       *ABS*	00000000 __DTOR_LIST__
10004358 g     F .text	00000038 alt_irq_init
10004084 g     F .text	00000084 alt_release_fd
10005dec g     F .text	00000014 atexit
1000298c g     F .text	00000060 _write_r
10007f10 g     O .rwdata	00000004 _impure_ptr
10009ca8 g     O .bss	00000004 alt_argc
10002c98 g     F .text	0000021c __sflush_r
10005228 g     F .text	00000060 _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
10000f74 g     F .text	00000018 __fp_unlock_all
10007f1c g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
100052a8 g     F .text	00000050 alt_ic_isr_register
10007f44 g       *ABS*	00000000 _edata
10009dec g       *ABS*	00000000 _end
10000230 g       *ABS*	00000000 __ram_exceptions_end
10004914 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1000049c g     F .text	00000110 textVGADrawColorText
10005380 g     F .text	0000008c alt_ic_irq_disable
100028ac g     F .text	0000007c __swrite
10007f18 g     O .rwdata	00000004 __malloc_trim_threshold
10005e00 g     F .text	00000038 exit
10001518 g     F .text	000000c4 _fwalk_reent
10003830 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10000f50 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
1000614c g     F .text	00000034 _exit
10004e44 g     F .text	0000012c alt_alarm_start
100036a0 g     F .text	0000010c .hidden __muldi3
100033d4 g     F .text	000001bc __smakebuf_r
10000b44 g     F .text	00000098 strlen
100057d0 g     F .text	0000015c open
10000910 g     F .text	000000bc ground_init
10005288 g     F .text	00000020 alt_icache_flush_all
1000086c g     F .text	000000a4 background_init
10007f38 g     O .rwdata	00000004 alt_priority_mask
100052f8 g     F .text	00000088 alt_ic_irq_enable
10007f3c g     O .rwdata	00000008 alt_alarm_list
100051c8 g     F .text	00000060 _do_ctors
1000399c g     F .text	000000d8 close
10000298 g     F .text	000001b4 paletteTest
10003ce4 g     F .text	00000084 alt_load
10000f54 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10a73b04 	addi	r2,r2,-25364
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10a73b04 	addi	r2,r2,-25364
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a76f17 	ldw	r2,-25156(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a76f17 	ldw	r2,-25156(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
1000023c:	d6bfc114 	ori	gp,gp,65284
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000244:	10a72614 	ori	r2,r2,40088

    movhi r3, %hi(__bss_end)
10000248:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
1000024c:	18e77b14 	ori	r3,r3,40428

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	0003ce40 	call	10003ce4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	0003e800 	call	10003e80 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <main>:
#include "palette_test.h"
int main(void)
{
1000026c:	defffe04 	addi	sp,sp,-8
10000270:	dfc00115 	stw	ra,4(sp)
10000274:	df000015 	stw	fp,0(sp)
10000278:	d839883a 	mov	fp,sp

	//paletteTest();
	textVGAColorScreenSaver();
1000027c:	00007280 	call	10000728 <textVGAColorScreenSaver>
	//background_init();
	return 0;
10000280:	0005883a 	mov	r2,zero
}
10000284:	e037883a 	mov	sp,fp
10000288:	dfc00117 	ldw	ra,4(sp)
1000028c:	df000017 	ldw	fp,0(sp)
10000290:	dec00204 	addi	sp,sp,8
10000294:	f800283a 	ret

10000298 <paletteTest>:

#include "text_mode_vga_color.h"


void paletteTest()
{
10000298:	defffa04 	addi	sp,sp,-24
1000029c:	dfc00515 	stw	ra,20(sp)
100002a0:	df000415 	stw	fp,16(sp)
100002a4:	dc400315 	stw	r17,12(sp)
100002a8:	dc000215 	stw	r16,8(sp)
100002ac:	df000404 	addi	fp,sp,16
	textVGAColorClr();
100002b0:	000044c0 	call	1000044c <textVGAColorClr>
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);
100002b4:	00800044 	movi	r2,1
100002b8:	d8800015 	stw	r2,0(sp)
100002bc:	000f883a 	mov	r7,zero
100002c0:	000d883a 	mov	r6,zero
100002c4:	000b883a 	mov	r5,zero
100002c8:	01040034 	movhi	r4,4096
100002cc:	21186004 	addi	r4,r4,24960
100002d0:	000049c0 	call	1000049c <textVGADrawColorText>

	for (int i = 0; i < 100; i ++)
100002d4:	e03ffd15 	stw	zero,-12(fp)
100002d8:	00005106 	br	10000420 <paletteTest+0x188>
	{
		usleep (20000);
100002dc:	01138804 	movi	r4,20000
100002e0:	00041b80 	call	100041b8 <usleep>
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
100002e4:	0000ae00 	call	10000ae0 <rand>
100002e8:	1007883a 	mov	r3,r2
100002ec:	00a00034 	movhi	r2,32768
100002f0:	108003c4 	addi	r2,r2,15
100002f4:	1884703a 	and	r2,r3,r2
100002f8:	1000040e 	bge	r2,zero,1000030c <paletteTest+0x74>
100002fc:	10bfffc4 	addi	r2,r2,-1
10000300:	00fffc04 	movi	r3,-16
10000304:	10c4b03a 	or	r2,r2,r3
10000308:	10800044 	addi	r2,r2,1
1000030c:	14003fcc 	andi	r16,r2,255
10000310:	0000ae00 	call	10000ae0 <rand>
10000314:	1007883a 	mov	r3,r2
10000318:	00a00034 	movhi	r2,32768
1000031c:	108003c4 	addi	r2,r2,15
10000320:	1884703a 	and	r2,r3,r2
10000324:	1000040e 	bge	r2,zero,10000338 <paletteTest+0xa0>
10000328:	10bfffc4 	addi	r2,r2,-1
1000032c:	00fffc04 	movi	r3,-16
10000330:	10c4b03a 	or	r2,r2,r3
10000334:	10800044 	addi	r2,r2,1
10000338:	14403fcc 	andi	r17,r2,255
1000033c:	0000ae00 	call	10000ae0 <rand>
10000340:	1007883a 	mov	r3,r2
10000344:	00a00034 	movhi	r2,32768
10000348:	108003c4 	addi	r2,r2,15
1000034c:	1884703a 	and	r2,r3,r2
10000350:	1000040e 	bge	r2,zero,10000364 <paletteTest+0xcc>
10000354:	10bfffc4 	addi	r2,r2,-1
10000358:	00fffc04 	movi	r3,-16
1000035c:	10c4b03a 	or	r2,r2,r3
10000360:	10800044 	addi	r2,r2,1
10000364:	10803fcc 	andi	r2,r2,255
10000368:	100f883a 	mov	r7,r2
1000036c:	880d883a 	mov	r6,r17
10000370:	800b883a 	mov	r5,r16
10000374:	0009883a 	mov	r4,zero
10000378:	00005ac0 	call	100005ac <setColorPalette>
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
1000037c:	0000ae00 	call	10000ae0 <rand>
10000380:	1007883a 	mov	r3,r2
10000384:	00a00034 	movhi	r2,32768
10000388:	108003c4 	addi	r2,r2,15
1000038c:	1884703a 	and	r2,r3,r2
10000390:	1000040e 	bge	r2,zero,100003a4 <paletteTest+0x10c>
10000394:	10bfffc4 	addi	r2,r2,-1
10000398:	00fffc04 	movi	r3,-16
1000039c:	10c4b03a 	or	r2,r2,r3
100003a0:	10800044 	addi	r2,r2,1
100003a4:	14003fcc 	andi	r16,r2,255
100003a8:	0000ae00 	call	10000ae0 <rand>
100003ac:	1007883a 	mov	r3,r2
100003b0:	00a00034 	movhi	r2,32768
100003b4:	108003c4 	addi	r2,r2,15
100003b8:	1884703a 	and	r2,r3,r2
100003bc:	1000040e 	bge	r2,zero,100003d0 <paletteTest+0x138>
100003c0:	10bfffc4 	addi	r2,r2,-1
100003c4:	00fffc04 	movi	r3,-16
100003c8:	10c4b03a 	or	r2,r2,r3
100003cc:	10800044 	addi	r2,r2,1
100003d0:	14403fcc 	andi	r17,r2,255
100003d4:	0000ae00 	call	10000ae0 <rand>
100003d8:	1007883a 	mov	r3,r2
100003dc:	00a00034 	movhi	r2,32768
100003e0:	108003c4 	addi	r2,r2,15
100003e4:	1884703a 	and	r2,r3,r2
100003e8:	1000040e 	bge	r2,zero,100003fc <paletteTest+0x164>
100003ec:	10bfffc4 	addi	r2,r2,-1
100003f0:	00fffc04 	movi	r3,-16
100003f4:	10c4b03a 	or	r2,r2,r3
100003f8:	10800044 	addi	r2,r2,1
100003fc:	10803fcc 	andi	r2,r2,255
10000400:	100f883a 	mov	r7,r2
10000404:	880d883a 	mov	r6,r17
10000408:	800b883a 	mov	r5,r16
1000040c:	01000044 	movi	r4,1
10000410:	00005ac0 	call	100005ac <setColorPalette>
void paletteTest()
{
	textVGAColorClr();
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);

	for (int i = 0; i < 100; i ++)
10000414:	e0bffd17 	ldw	r2,-12(fp)
10000418:	10800044 	addi	r2,r2,1
1000041c:	e0bffd15 	stw	r2,-12(fp)
10000420:	e0bffd17 	ldw	r2,-12(fp)
10000424:	10801910 	cmplti	r2,r2,100
10000428:	103fac1e 	bne	r2,zero,100002dc <__alt_data_end+0xf80002dc>
		usleep (20000);
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
	}

}
1000042c:	0001883a 	nop
10000430:	e6fffe04 	addi	sp,fp,-8
10000434:	dfc00317 	ldw	ra,12(sp)
10000438:	df000217 	ldw	fp,8(sp)
1000043c:	dc400117 	ldw	r17,4(sp)
10000440:	dc000017 	ldw	r16,0(sp)
10000444:	dec00404 	addi	sp,sp,16
10000448:	f800283a 	ret

1000044c <textVGAColorClr>:
#include <string.h>
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
1000044c:	defffe04 	addi	sp,sp,-8
10000450:	df000115 	stw	fp,4(sp)
10000454:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
10000458:	e03fff15 	stw	zero,-4(fp)
1000045c:	00000706 	br	1000047c <textVGAColorClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
10000460:	d0e00117 	ldw	r3,-32764(gp)
10000464:	e0bfff17 	ldw	r2,-4(fp)
10000468:	1885883a 	add	r2,r3,r2
1000046c:	10000005 	stb	zero,0(r2)
#include <alt_types.h>
#include "text_mode_vga_color.h"

void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
10000470:	e0bfff17 	ldw	r2,-4(fp)
10000474:	10800044 	addi	r2,r2,1
10000478:	e0bfff15 	stw	r2,-4(fp)
1000047c:	e0bfff17 	ldw	r2,-4(fp)
10000480:	1084b010 	cmplti	r2,r2,4800
10000484:	103ff61e 	bne	r2,zero,10000460 <__alt_data_end+0xf8000460>
	{
		vga_ctrl->VRAM[i] = 0x00;
	}
}
10000488:	0001883a 	nop
1000048c:	e037883a 	mov	sp,fp
10000490:	df000017 	ldw	fp,0(sp)
10000494:	dec00104 	addi	sp,sp,4
10000498:	f800283a 	ret

1000049c <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
1000049c:	defff704 	addi	sp,sp,-36
100004a0:	dfc00815 	stw	ra,32(sp)
100004a4:	df000715 	stw	fp,28(sp)
100004a8:	dc000615 	stw	r16,24(sp)
100004ac:	df000704 	addi	fp,sp,28
100004b0:	e13ffa15 	stw	r4,-24(fp)
100004b4:	e17ffb15 	stw	r5,-20(fp)
100004b8:	e1bffc15 	stw	r6,-16(fp)
100004bc:	3807883a 	mov	r3,r7
100004c0:	e0800217 	ldw	r2,8(fp)
100004c4:	e0fffd05 	stb	r3,-12(fp)
100004c8:	e0bffe05 	stb	r2,-8(fp)
	int i = 0;
100004cc:	e03ff915 	stw	zero,-28(fp)
	while (str[i]!=0)
100004d0:	00002706 	br	10000570 <textVGADrawColorText+0xd4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
100004d4:	d4200117 	ldw	r16,-32764(gp)
100004d8:	01401404 	movi	r5,80
100004dc:	e13ffc17 	ldw	r4,-16(fp)
100004e0:	00009cc0 	call	100009cc <__mulsi3>
100004e4:	1007883a 	mov	r3,r2
100004e8:	e0bffb17 	ldw	r2,-20(fp)
100004ec:	1887883a 	add	r3,r3,r2
100004f0:	e0bff917 	ldw	r2,-28(fp)
100004f4:	1885883a 	add	r2,r3,r2
100004f8:	1085883a 	add	r2,r2,r2
100004fc:	1009883a 	mov	r4,r2
10000500:	e0bffe03 	ldbu	r2,-8(fp)
10000504:	1004913a 	slli	r2,r2,4
10000508:	1007883a 	mov	r3,r2
1000050c:	e0bffd03 	ldbu	r2,-12(fp)
10000510:	1884b03a 	or	r2,r3,r2
10000514:	1007883a 	mov	r3,r2
10000518:	8105883a 	add	r2,r16,r4
1000051c:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
10000520:	d4200117 	ldw	r16,-32764(gp)
10000524:	01401404 	movi	r5,80
10000528:	e13ffc17 	ldw	r4,-16(fp)
1000052c:	00009cc0 	call	100009cc <__mulsi3>
10000530:	1007883a 	mov	r3,r2
10000534:	e0bffb17 	ldw	r2,-20(fp)
10000538:	1887883a 	add	r3,r3,r2
1000053c:	e0bff917 	ldw	r2,-28(fp)
10000540:	1885883a 	add	r2,r3,r2
10000544:	1085883a 	add	r2,r2,r2
10000548:	10800044 	addi	r2,r2,1
1000054c:	e0fff917 	ldw	r3,-28(fp)
10000550:	e13ffa17 	ldw	r4,-24(fp)
10000554:	20c7883a 	add	r3,r4,r3
10000558:	18c00003 	ldbu	r3,0(r3)
1000055c:	8085883a 	add	r2,r16,r2
10000560:	10c00005 	stb	r3,0(r2)
		i++;
10000564:	e0bff917 	ldw	r2,-28(fp)
10000568:	10800044 	addi	r2,r2,1
1000056c:	e0bff915 	stw	r2,-28(fp)
}

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	int i = 0;
	while (str[i]!=0)
10000570:	e0bff917 	ldw	r2,-28(fp)
10000574:	e0fffa17 	ldw	r3,-24(fp)
10000578:	1885883a 	add	r2,r3,r2
1000057c:	10800003 	ldbu	r2,0(r2)
10000580:	10803fcc 	andi	r2,r2,255
10000584:	1080201c 	xori	r2,r2,128
10000588:	10bfe004 	addi	r2,r2,-128
1000058c:	103fd11e 	bne	r2,zero,100004d4 <__alt_data_end+0xf80004d4>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
		i++;
	}
}
10000590:	0001883a 	nop
10000594:	e6ffff04 	addi	sp,fp,-4
10000598:	dfc00217 	ldw	ra,8(sp)
1000059c:	df000117 	ldw	fp,4(sp)
100005a0:	dc000017 	ldw	r16,0(sp)
100005a4:	dec00304 	addi	sp,sp,12
100005a8:	f800283a 	ret

100005ac <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
100005ac:	defff904 	addi	sp,sp,-28
100005b0:	df000615 	stw	fp,24(sp)
100005b4:	df000604 	addi	fp,sp,24
100005b8:	2011883a 	mov	r8,r4
100005bc:	2809883a 	mov	r4,r5
100005c0:	3007883a 	mov	r3,r6
100005c4:	3805883a 	mov	r2,r7
100005c8:	e23ffc05 	stb	r8,-16(fp)
100005cc:	e13ffd05 	stb	r4,-12(fp)
100005d0:	e0fffe05 	stb	r3,-8(fp)
100005d4:	e0bfff05 	stb	r2,-4(fp)
	red = red & 0x0f;
100005d8:	e0bffd03 	ldbu	r2,-12(fp)
100005dc:	108003cc 	andi	r2,r2,15
100005e0:	e0bffd05 	stb	r2,-12(fp)
	green = green & 0x0f;
100005e4:	e0bffe03 	ldbu	r2,-8(fp)
100005e8:	108003cc 	andi	r2,r2,15
100005ec:	e0bffe05 	stb	r2,-8(fp)
	blue = blue & 0x0f;
100005f0:	e0bfff03 	ldbu	r2,-4(fp)
100005f4:	108003cc 	andi	r2,r2,15
100005f8:	e0bfff05 	stb	r2,-4(fp)
	if(color%2 == 0){	
100005fc:	e0bffc03 	ldbu	r2,-16(fp)
10000600:	1080004c 	andi	r2,r2,1
10000604:	10803fcc 	andi	r2,r2,255
10000608:	10000b1e 	bne	r2,zero,10000638 <setColorPalette+0x8c>
		vga_ctrl->colorCombined = ((red << 8) | (green << 4) | blue) & 0xFFF ;
1000060c:	d0a00117 	ldw	r2,-32764(gp)
10000610:	e0fffd03 	ldbu	r3,-12(fp)
10000614:	1808923a 	slli	r4,r3,8
10000618:	e0fffe03 	ldbu	r3,-8(fp)
1000061c:	1806913a 	slli	r3,r3,4
10000620:	20c8b03a 	or	r4,r4,r3
10000624:	e0ffff03 	ldbu	r3,-4(fp)
10000628:	20c6b03a 	or	r3,r4,r3
1000062c:	18c3ffcc 	andi	r3,r3,4095
10000630:	10c4b015 	stw	r3,4800(r2)
		vga_ctrl->VRAM[0x2000+2*(color-1)+1] = temp2;
		vga_ctrl->VRAM[0x2000+2*(color-1)+2] = temp3;
		vga_ctrl->VRAM[0x2000+2*(color-1)+3] = temp4;
	}
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
}
10000634:	00003706 	br	10000714 <setColorPalette+0x168>
	blue = blue & 0x0f;
	if(color%2 == 0){	
		vga_ctrl->colorCombined = ((red << 8) | (green << 4) | blue) & 0xFFF ;
	}
	else{
		alt_u32 temp = ((((red << 8) | (green << 4) | blue)<< 12) | vga_ctrl->colorCombined) << 1;
10000638:	e0bffd03 	ldbu	r2,-12(fp)
1000063c:	1006923a 	slli	r3,r2,8
10000640:	e0bffe03 	ldbu	r2,-8(fp)
10000644:	1004913a 	slli	r2,r2,4
10000648:	1886b03a 	or	r3,r3,r2
1000064c:	e0bfff03 	ldbu	r2,-4(fp)
10000650:	1884b03a 	or	r2,r3,r2
10000654:	1004933a 	slli	r2,r2,12
10000658:	1007883a 	mov	r3,r2
1000065c:	d0a00117 	ldw	r2,-32764(gp)
10000660:	1084b017 	ldw	r2,4800(r2)
10000664:	1884b03a 	or	r2,r3,r2
10000668:	1085883a 	add	r2,r2,r2
1000066c:	e0bffa15 	stw	r2,-24(fp)
		alt_u8 temp1 = temp & 0xff;
10000670:	e0bffa17 	ldw	r2,-24(fp)
10000674:	e0bffb05 	stb	r2,-20(fp)
		alt_u8 temp2 = (temp >> 8) & 0xff;
10000678:	e0bffa17 	ldw	r2,-24(fp)
1000067c:	1004d23a 	srli	r2,r2,8
10000680:	e0bffb45 	stb	r2,-19(fp)
		alt_u8 temp3 = (temp >> 16) & 0xff;
10000684:	e0bffa17 	ldw	r2,-24(fp)
10000688:	1004d43a 	srli	r2,r2,16
1000068c:	e0bffb85 	stb	r2,-18(fp)
		alt_u8 temp4 = (temp >> 24) & 0xff;
10000690:	e0bffa17 	ldw	r2,-24(fp)
10000694:	1004d63a 	srli	r2,r2,24
10000698:	e0bffbc5 	stb	r2,-17(fp)
		vga_ctrl->VRAM[0x2000+2*(color-1)+0] = temp1;
1000069c:	d0e00117 	ldw	r3,-32764(gp)
100006a0:	e0bffc03 	ldbu	r2,-16(fp)
100006a4:	1083ffc4 	addi	r2,r2,4095
100006a8:	1085883a 	add	r2,r2,r2
100006ac:	1885883a 	add	r2,r3,r2
100006b0:	e0fffb03 	ldbu	r3,-20(fp)
100006b4:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[0x2000+2*(color-1)+1] = temp2;
100006b8:	d0e00117 	ldw	r3,-32764(gp)
100006bc:	e0bffc03 	ldbu	r2,-16(fp)
100006c0:	1083ffc4 	addi	r2,r2,4095
100006c4:	1085883a 	add	r2,r2,r2
100006c8:	10800044 	addi	r2,r2,1
100006cc:	1885883a 	add	r2,r3,r2
100006d0:	e0fffb43 	ldbu	r3,-19(fp)
100006d4:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[0x2000+2*(color-1)+2] = temp3;
100006d8:	d0e00117 	ldw	r3,-32764(gp)
100006dc:	e0bffc03 	ldbu	r2,-16(fp)
100006e0:	10840004 	addi	r2,r2,4096
100006e4:	1085883a 	add	r2,r2,r2
100006e8:	1885883a 	add	r2,r3,r2
100006ec:	e0fffb83 	ldbu	r3,-18(fp)
100006f0:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[0x2000+2*(color-1)+3] = temp4;
100006f4:	d0e00117 	ldw	r3,-32764(gp)
100006f8:	e0bffc03 	ldbu	r2,-16(fp)
100006fc:	1083ffc4 	addi	r2,r2,4095
10000700:	1085883a 	add	r2,r2,r2
10000704:	108000c4 	addi	r2,r2,3
10000708:	1885883a 	add	r2,r3,r2
1000070c:	e0fffbc3 	ldbu	r3,-17(fp)
10000710:	10c00005 	stb	r3,0(r2)
	}
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
}
10000714:	0001883a 	nop
10000718:	e037883a 	mov	sp,fp
1000071c:	df000017 	ldw	fp,0(sp)
10000720:	dec00104 	addi	sp,sp,4
10000724:	f800283a 	ret

10000728 <textVGAColorScreenSaver>:


void textVGAColorScreenSaver()
{
10000728:	deffe504 	addi	sp,sp,-108
1000072c:	dfc01a15 	stw	ra,104(sp)
10000730:	df001915 	stw	fp,100(sp)
10000734:	dcc01815 	stw	r19,96(sp)
10000738:	dc801715 	stw	r18,92(sp)
1000073c:	dc401615 	stw	r17,88(sp)
10000740:	dc001515 	stw	r16,84(sp)
10000744:	df001904 	addi	fp,sp,100
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
10000748:	000044c0 	call	1000044c <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
1000074c:	e03fe715 	stw	zero,-100(fp)
10000750:	00002806 	br	100007f4 <textVGAColorScreenSaver+0xcc>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
10000754:	e0bfe717 	ldw	r2,-100(fp)
10000758:	14403fcc 	andi	r17,r2,255
1000075c:	04040034 	movhi	r16,4096
10000760:	8418d804 	addi	r16,r16,25440
10000764:	e0bfe717 	ldw	r2,-100(fp)
10000768:	014005c4 	movi	r5,23
1000076c:	1009883a 	mov	r4,r2
10000770:	00009cc0 	call	100009cc <__mulsi3>
10000774:	8085883a 	add	r2,r16,r2
10000778:	10800504 	addi	r2,r2,20
1000077c:	10800003 	ldbu	r2,0(r2)
10000780:	14803fcc 	andi	r18,r2,255
10000784:	04040034 	movhi	r16,4096
10000788:	8418d804 	addi	r16,r16,25440
1000078c:	e0bfe717 	ldw	r2,-100(fp)
10000790:	014005c4 	movi	r5,23
10000794:	1009883a 	mov	r4,r2
10000798:	00009cc0 	call	100009cc <__mulsi3>
1000079c:	8085883a 	add	r2,r16,r2
100007a0:	10800544 	addi	r2,r2,21
100007a4:	10800003 	ldbu	r2,0(r2)
100007a8:	14c03fcc 	andi	r19,r2,255
100007ac:	04040034 	movhi	r16,4096
100007b0:	8418d804 	addi	r16,r16,25440
100007b4:	e0bfe717 	ldw	r2,-100(fp)
100007b8:	014005c4 	movi	r5,23
100007bc:	1009883a 	mov	r4,r2
100007c0:	00009cc0 	call	100009cc <__mulsi3>
100007c4:	8085883a 	add	r2,r16,r2
100007c8:	10800584 	addi	r2,r2,22
100007cc:	10800003 	ldbu	r2,0(r2)
100007d0:	10803fcc 	andi	r2,r2,255
100007d4:	100f883a 	mov	r7,r2
100007d8:	980d883a 	mov	r6,r19
100007dc:	900b883a 	mov	r5,r18
100007e0:	8809883a 	mov	r4,r17
100007e4:	00005ac0 	call	100005ac <setColorPalette>
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
100007e8:	e0bfe717 	ldw	r2,-100(fp)
100007ec:	10800044 	addi	r2,r2,1
100007f0:	e0bfe715 	stw	r2,-100(fp)
100007f4:	e0bfe717 	ldw	r2,-100(fp)
100007f8:	10800410 	cmplti	r2,r2,16
100007fc:	103fd51e 	bne	r2,zero,10000754 <__alt_data_end+0xf8000754>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	// background_init();
	// ground_init();
	vga_ctrl->VRAM[0] = 0x00;
10000800:	d0a00117 	ldw	r2,-32764(gp)
10000804:	10000005 	stb	zero,0(r2)
	vga_ctrl->VRAM[1] = 0x00;
10000808:	d0a00117 	ldw	r2,-32764(gp)
1000080c:	10000045 	stb	zero,1(r2)
	vga_ctrl->VRAM[2] = 0x00;
10000810:	d0a00117 	ldw	r2,-32764(gp)
10000814:	10000085 	stb	zero,2(r2)
	vga_ctrl->VRAM[3] = 0x00;
10000818:	d0a00117 	ldw	r2,-32764(gp)
1000081c:	100000c5 	stb	zero,3(r2)
	vga_ctrl->VRAM[4] = 0x00;
10000820:	d0a00117 	ldw	r2,-32764(gp)
10000824:	10000105 	stb	zero,4(r2)
	vga_ctrl->VRAM[5] = 0x00;
10000828:	d0a00117 	ldw	r2,-32764(gp)
1000082c:	10000145 	stb	zero,5(r2)
	vga_ctrl->VRAM[6] = 0x77;
10000830:	d0a00117 	ldw	r2,-32764(gp)
10000834:	00c01dc4 	movi	r3,119
10000838:	10c00185 	stb	r3,6(r2)
	vga_ctrl->VRAM[7] = 0x00;
1000083c:	d0a00117 	ldw	r2,-32764(gp)
10000840:	100001c5 	stb	zero,7(r2)
	// 	x = rand() % (80-strlen(color_string));
	// 	y = rand() % 30;
	// 	textVGADrawColorText (color_string, x, y, bg, fg);
	// 	usleep (1000000);
	// }
}
10000844:	0001883a 	nop
10000848:	e6fffc04 	addi	sp,fp,-16
1000084c:	dfc00517 	ldw	ra,20(sp)
10000850:	df000417 	ldw	fp,16(sp)
10000854:	dcc00317 	ldw	r19,12(sp)
10000858:	dc800217 	ldw	r18,8(sp)
1000085c:	dc400117 	ldw	r17,4(sp)
10000860:	dc000017 	ldw	r16,0(sp)
10000864:	dec00604 	addi	sp,sp,24
10000868:	f800283a 	ret

1000086c <background_init>:

void background_init(){
1000086c:	defffb04 	addi	sp,sp,-20
10000870:	dfc00415 	stw	ra,16(sp)
10000874:	df000315 	stw	fp,12(sp)
10000878:	dc000215 	stw	r16,8(sp)
1000087c:	df000304 	addi	fp,sp,12
	int x,y;
	for (y = 0; y < 480; y++){
10000880:	e03ffe15 	stw	zero,-8(fp)
10000884:	00001806 	br	100008e8 <background_init+0x7c>
		for (x = 0; x < 640; x = x+2){
10000888:	e03ffd15 	stw	zero,-12(fp)
1000088c:	00001006 	br	100008d0 <background_init+0x64>
			vga_ctrl->VRAM[y*320 + (x/2)] = 0x99;//0x66;
10000890:	d4200117 	ldw	r16,-32764(gp)
10000894:	01405004 	movi	r5,320
10000898:	e13ffe17 	ldw	r4,-8(fp)
1000089c:	00009cc0 	call	100009cc <__mulsi3>
100008a0:	1009883a 	mov	r4,r2
100008a4:	e0bffd17 	ldw	r2,-12(fp)
100008a8:	1006d7fa 	srli	r3,r2,31
100008ac:	1885883a 	add	r2,r3,r2
100008b0:	1005d07a 	srai	r2,r2,1
100008b4:	2085883a 	add	r2,r4,r2
100008b8:	8085883a 	add	r2,r16,r2
100008bc:	00ffe644 	movi	r3,-103
100008c0:	10c00005 	stb	r3,0(r2)
}

void background_init(){
	int x,y;
	for (y = 0; y < 480; y++){
		for (x = 0; x < 640; x = x+2){
100008c4:	e0bffd17 	ldw	r2,-12(fp)
100008c8:	10800084 	addi	r2,r2,2
100008cc:	e0bffd15 	stw	r2,-12(fp)
100008d0:	e0bffd17 	ldw	r2,-12(fp)
100008d4:	1080a010 	cmplti	r2,r2,640
100008d8:	103fed1e 	bne	r2,zero,10000890 <__alt_data_end+0xf8000890>
	// }
}

void background_init(){
	int x,y;
	for (y = 0; y < 480; y++){
100008dc:	e0bffe17 	ldw	r2,-8(fp)
100008e0:	10800044 	addi	r2,r2,1
100008e4:	e0bffe15 	stw	r2,-8(fp)
100008e8:	e0bffe17 	ldw	r2,-8(fp)
100008ec:	10807810 	cmplti	r2,r2,480
100008f0:	103fe51e 	bne	r2,zero,10000888 <__alt_data_end+0xf8000888>
		for (x = 0; x < 640; x = x+2){
			vga_ctrl->VRAM[y*320 + (x/2)] = 0x99;//0x66;
			//printf("%d\n",pixel_color[y*640 + x]);
		}	
	}
}
100008f4:	0001883a 	nop
100008f8:	e6ffff04 	addi	sp,fp,-4
100008fc:	dfc00217 	ldw	ra,8(sp)
10000900:	df000117 	ldw	fp,4(sp)
10000904:	dc000017 	ldw	r16,0(sp)
10000908:	dec00304 	addi	sp,sp,12
1000090c:	f800283a 	ret

10000910 <ground_init>:



void ground_init(){
10000910:	defffb04 	addi	sp,sp,-20
10000914:	dfc00415 	stw	ra,16(sp)
10000918:	df000315 	stw	fp,12(sp)
1000091c:	df000304 	addi	fp,sp,12
		printf("b\n");
10000920:	01040034 	movhi	r4,4096
10000924:	21186c04 	addi	r4,r4,25008
10000928:	0000ab40 	call	10000ab4 <puts>
	int x,y,value;
	for (y = 0; y < 240; y++){
1000092c:	e03ffe15 	stw	zero,-8(fp)
10000930:	00001d06 	br	100009a8 <ground_init+0x98>
		for (x = 0; x < 640; x = x+2){
10000934:	e03ffd15 	stw	zero,-12(fp)
10000938:	00001506 	br	10000990 <ground_init+0x80>
			value = (480-y-1)*320 + (x/2);
1000093c:	00c077c4 	movi	r3,479
10000940:	e0bffe17 	ldw	r2,-8(fp)
10000944:	1885c83a 	sub	r2,r3,r2
10000948:	01405004 	movi	r5,320
1000094c:	1009883a 	mov	r4,r2
10000950:	00009cc0 	call	100009cc <__mulsi3>
10000954:	1009883a 	mov	r4,r2
10000958:	e0bffd17 	ldw	r2,-12(fp)
1000095c:	1006d7fa 	srli	r3,r2,31
10000960:	1885883a 	add	r2,r3,r2
10000964:	1005d07a 	srai	r2,r2,1
10000968:	2085883a 	add	r2,r4,r2
1000096c:	e0bfff15 	stw	r2,-4(fp)

			vga_ctrl->VRAM[value] = 0xAA;//0x66;
10000970:	d0e00117 	ldw	r3,-32764(gp)
10000974:	e0bfff17 	ldw	r2,-4(fp)
10000978:	1885883a 	add	r2,r3,r2
1000097c:	00ffea84 	movi	r3,-86
10000980:	10c00005 	stb	r3,0(r2)

void ground_init(){
		printf("b\n");
	int x,y,value;
	for (y = 0; y < 240; y++){
		for (x = 0; x < 640; x = x+2){
10000984:	e0bffd17 	ldw	r2,-12(fp)
10000988:	10800084 	addi	r2,r2,2
1000098c:	e0bffd15 	stw	r2,-12(fp)
10000990:	e0bffd17 	ldw	r2,-12(fp)
10000994:	1080a010 	cmplti	r2,r2,640
10000998:	103fe81e 	bne	r2,zero,1000093c <__alt_data_end+0xf800093c>


void ground_init(){
		printf("b\n");
	int x,y,value;
	for (y = 0; y < 240; y++){
1000099c:	e0bffe17 	ldw	r2,-8(fp)
100009a0:	10800044 	addi	r2,r2,1
100009a4:	e0bffe15 	stw	r2,-8(fp)
100009a8:	e0bffe17 	ldw	r2,-8(fp)
100009ac:	10803c10 	cmplti	r2,r2,240
100009b0:	103fe01e 	bne	r2,zero,10000934 <__alt_data_end+0xf8000934>
			// ground.validGround[y*640 + x] = 1;
			// ground.validGround[y*640 + x + 1] = 1;
		}
	}

}
100009b4:	0001883a 	nop
100009b8:	e037883a 	mov	sp,fp
100009bc:	dfc00117 	ldw	ra,4(sp)
100009c0:	df000017 	ldw	fp,0(sp)
100009c4:	dec00204 	addi	sp,sp,8
100009c8:	f800283a 	ret

100009cc <__mulsi3>:
100009cc:	0005883a 	mov	r2,zero
100009d0:	20000726 	beq	r4,zero,100009f0 <__mulsi3+0x24>
100009d4:	20c0004c 	andi	r3,r4,1
100009d8:	2008d07a 	srli	r4,r4,1
100009dc:	18000126 	beq	r3,zero,100009e4 <__mulsi3+0x18>
100009e0:	1145883a 	add	r2,r2,r5
100009e4:	294b883a 	add	r5,r5,r5
100009e8:	203ffa1e 	bne	r4,zero,100009d4 <__alt_data_end+0xf80009d4>
100009ec:	f800283a 	ret
100009f0:	f800283a 	ret

100009f4 <_puts_r>:
100009f4:	defff604 	addi	sp,sp,-40
100009f8:	dc000715 	stw	r16,28(sp)
100009fc:	2021883a 	mov	r16,r4
10000a00:	2809883a 	mov	r4,r5
10000a04:	dc400815 	stw	r17,32(sp)
10000a08:	dfc00915 	stw	ra,36(sp)
10000a0c:	2823883a 	mov	r17,r5
10000a10:	0000b440 	call	10000b44 <strlen>
10000a14:	10c00044 	addi	r3,r2,1
10000a18:	d8800115 	stw	r2,4(sp)
10000a1c:	00840034 	movhi	r2,4096
10000a20:	10986d04 	addi	r2,r2,25012
10000a24:	d8800215 	stw	r2,8(sp)
10000a28:	00800044 	movi	r2,1
10000a2c:	d8800315 	stw	r2,12(sp)
10000a30:	00800084 	movi	r2,2
10000a34:	dc400015 	stw	r17,0(sp)
10000a38:	d8c00615 	stw	r3,24(sp)
10000a3c:	dec00415 	stw	sp,16(sp)
10000a40:	d8800515 	stw	r2,20(sp)
10000a44:	80000226 	beq	r16,zero,10000a50 <_puts_r+0x5c>
10000a48:	80800e17 	ldw	r2,56(r16)
10000a4c:	10001426 	beq	r2,zero,10000aa0 <_puts_r+0xac>
10000a50:	81400217 	ldw	r5,8(r16)
10000a54:	2880030b 	ldhu	r2,12(r5)
10000a58:	10c8000c 	andi	r3,r2,8192
10000a5c:	1800061e 	bne	r3,zero,10000a78 <_puts_r+0x84>
10000a60:	29001917 	ldw	r4,100(r5)
10000a64:	00f7ffc4 	movi	r3,-8193
10000a68:	10880014 	ori	r2,r2,8192
10000a6c:	20c6703a 	and	r3,r4,r3
10000a70:	2880030d 	sth	r2,12(r5)
10000a74:	28c01915 	stw	r3,100(r5)
10000a78:	d9800404 	addi	r6,sp,16
10000a7c:	8009883a 	mov	r4,r16
10000a80:	0000f8c0 	call	10000f8c <__sfvwrite_r>
10000a84:	1000091e 	bne	r2,zero,10000aac <_puts_r+0xb8>
10000a88:	00800284 	movi	r2,10
10000a8c:	dfc00917 	ldw	ra,36(sp)
10000a90:	dc400817 	ldw	r17,32(sp)
10000a94:	dc000717 	ldw	r16,28(sp)
10000a98:	dec00a04 	addi	sp,sp,40
10000a9c:	f800283a 	ret
10000aa0:	8009883a 	mov	r4,r16
10000aa4:	0000f3c0 	call	10000f3c <__sinit>
10000aa8:	003fe906 	br	10000a50 <__alt_data_end+0xf8000a50>
10000aac:	00bfffc4 	movi	r2,-1
10000ab0:	003ff606 	br	10000a8c <__alt_data_end+0xf8000a8c>

10000ab4 <puts>:
10000ab4:	00840034 	movhi	r2,4096
10000ab8:	109fc404 	addi	r2,r2,32528
10000abc:	200b883a 	mov	r5,r4
10000ac0:	11000017 	ldw	r4,0(r2)
10000ac4:	00009f41 	jmpi	100009f4 <_puts_r>

10000ac8 <srand>:
10000ac8:	00840034 	movhi	r2,4096
10000acc:	109fc404 	addi	r2,r2,32528
10000ad0:	10800017 	ldw	r2,0(r2)
10000ad4:	11002915 	stw	r4,164(r2)
10000ad8:	10002a15 	stw	zero,168(r2)
10000adc:	f800283a 	ret

10000ae0 <rand>:
10000ae0:	00840034 	movhi	r2,4096
10000ae4:	defffe04 	addi	sp,sp,-8
10000ae8:	109fc404 	addi	r2,r2,32528
10000aec:	dc000015 	stw	r16,0(sp)
10000af0:	14000017 	ldw	r16,0(r2)
10000af4:	dfc00115 	stw	ra,4(sp)
10000af8:	01932574 	movhi	r6,19605
10000afc:	81002917 	ldw	r4,164(r16)
10000b00:	81402a17 	ldw	r5,168(r16)
10000b04:	01d614b4 	movhi	r7,22610
10000b08:	319fcb44 	addi	r6,r6,32557
10000b0c:	39fd0b44 	addi	r7,r7,-3027
10000b10:	00036a00 	call	100036a0 <__muldi3>
10000b14:	11000044 	addi	r4,r2,1
10000b18:	2085803a 	cmpltu	r2,r4,r2
10000b1c:	10c7883a 	add	r3,r2,r3
10000b20:	00a00034 	movhi	r2,32768
10000b24:	10bfffc4 	addi	r2,r2,-1
10000b28:	1884703a 	and	r2,r3,r2
10000b2c:	81002915 	stw	r4,164(r16)
10000b30:	80c02a15 	stw	r3,168(r16)
10000b34:	dfc00117 	ldw	ra,4(sp)
10000b38:	dc000017 	ldw	r16,0(sp)
10000b3c:	dec00204 	addi	sp,sp,8
10000b40:	f800283a 	ret

10000b44 <strlen>:
10000b44:	208000cc 	andi	r2,r4,3
10000b48:	10002026 	beq	r2,zero,10000bcc <strlen+0x88>
10000b4c:	20800007 	ldb	r2,0(r4)
10000b50:	10002026 	beq	r2,zero,10000bd4 <strlen+0x90>
10000b54:	2005883a 	mov	r2,r4
10000b58:	00000206 	br	10000b64 <strlen+0x20>
10000b5c:	10c00007 	ldb	r3,0(r2)
10000b60:	18001826 	beq	r3,zero,10000bc4 <strlen+0x80>
10000b64:	10800044 	addi	r2,r2,1
10000b68:	10c000cc 	andi	r3,r2,3
10000b6c:	183ffb1e 	bne	r3,zero,10000b5c <__alt_data_end+0xf8000b5c>
10000b70:	10c00017 	ldw	r3,0(r2)
10000b74:	01ffbff4 	movhi	r7,65279
10000b78:	39ffbfc4 	addi	r7,r7,-257
10000b7c:	00ca303a 	nor	r5,zero,r3
10000b80:	01a02074 	movhi	r6,32897
10000b84:	19c7883a 	add	r3,r3,r7
10000b88:	31a02004 	addi	r6,r6,-32640
10000b8c:	1946703a 	and	r3,r3,r5
10000b90:	1986703a 	and	r3,r3,r6
10000b94:	1800091e 	bne	r3,zero,10000bbc <strlen+0x78>
10000b98:	10800104 	addi	r2,r2,4
10000b9c:	10c00017 	ldw	r3,0(r2)
10000ba0:	19cb883a 	add	r5,r3,r7
10000ba4:	00c6303a 	nor	r3,zero,r3
10000ba8:	28c6703a 	and	r3,r5,r3
10000bac:	1986703a 	and	r3,r3,r6
10000bb0:	183ff926 	beq	r3,zero,10000b98 <__alt_data_end+0xf8000b98>
10000bb4:	00000106 	br	10000bbc <strlen+0x78>
10000bb8:	10800044 	addi	r2,r2,1
10000bbc:	10c00007 	ldb	r3,0(r2)
10000bc0:	183ffd1e 	bne	r3,zero,10000bb8 <__alt_data_end+0xf8000bb8>
10000bc4:	1105c83a 	sub	r2,r2,r4
10000bc8:	f800283a 	ret
10000bcc:	2005883a 	mov	r2,r4
10000bd0:	003fe706 	br	10000b70 <__alt_data_end+0xf8000b70>
10000bd4:	0005883a 	mov	r2,zero
10000bd8:	f800283a 	ret

10000bdc <__fp_unlock>:
10000bdc:	0005883a 	mov	r2,zero
10000be0:	f800283a 	ret

10000be4 <_cleanup_r>:
10000be4:	01440034 	movhi	r5,4096
10000be8:	294ae504 	addi	r5,r5,11156
10000bec:	00015181 	jmpi	10001518 <_fwalk_reent>

10000bf0 <__sinit.part.1>:
10000bf0:	defff704 	addi	sp,sp,-36
10000bf4:	00c40034 	movhi	r3,4096
10000bf8:	dfc00815 	stw	ra,32(sp)
10000bfc:	ddc00715 	stw	r23,28(sp)
10000c00:	dd800615 	stw	r22,24(sp)
10000c04:	dd400515 	stw	r21,20(sp)
10000c08:	dd000415 	stw	r20,16(sp)
10000c0c:	dcc00315 	stw	r19,12(sp)
10000c10:	dc800215 	stw	r18,8(sp)
10000c14:	dc400115 	stw	r17,4(sp)
10000c18:	dc000015 	stw	r16,0(sp)
10000c1c:	18c2f904 	addi	r3,r3,3044
10000c20:	24000117 	ldw	r16,4(r4)
10000c24:	20c00f15 	stw	r3,60(r4)
10000c28:	2080bb04 	addi	r2,r4,748
10000c2c:	00c000c4 	movi	r3,3
10000c30:	20c0b915 	stw	r3,740(r4)
10000c34:	2080ba15 	stw	r2,744(r4)
10000c38:	2000b815 	stw	zero,736(r4)
10000c3c:	05c00204 	movi	r23,8
10000c40:	00800104 	movi	r2,4
10000c44:	2025883a 	mov	r18,r4
10000c48:	b80d883a 	mov	r6,r23
10000c4c:	81001704 	addi	r4,r16,92
10000c50:	000b883a 	mov	r5,zero
10000c54:	80000015 	stw	zero,0(r16)
10000c58:	80000115 	stw	zero,4(r16)
10000c5c:	80000215 	stw	zero,8(r16)
10000c60:	8080030d 	sth	r2,12(r16)
10000c64:	80001915 	stw	zero,100(r16)
10000c68:	8000038d 	sth	zero,14(r16)
10000c6c:	80000415 	stw	zero,16(r16)
10000c70:	80000515 	stw	zero,20(r16)
10000c74:	80000615 	stw	zero,24(r16)
10000c78:	00021700 	call	10002170 <memset>
10000c7c:	05840034 	movhi	r22,4096
10000c80:	94400217 	ldw	r17,8(r18)
10000c84:	05440034 	movhi	r21,4096
10000c88:	05040034 	movhi	r20,4096
10000c8c:	04c40034 	movhi	r19,4096
10000c90:	b58a1404 	addi	r22,r22,10320
10000c94:	ad4a2b04 	addi	r21,r21,10412
10000c98:	a50a4a04 	addi	r20,r20,10536
10000c9c:	9cca6104 	addi	r19,r19,10628
10000ca0:	85800815 	stw	r22,32(r16)
10000ca4:	85400915 	stw	r21,36(r16)
10000ca8:	85000a15 	stw	r20,40(r16)
10000cac:	84c00b15 	stw	r19,44(r16)
10000cb0:	84000715 	stw	r16,28(r16)
10000cb4:	00800284 	movi	r2,10
10000cb8:	8880030d 	sth	r2,12(r17)
10000cbc:	00800044 	movi	r2,1
10000cc0:	b80d883a 	mov	r6,r23
10000cc4:	89001704 	addi	r4,r17,92
10000cc8:	000b883a 	mov	r5,zero
10000ccc:	88000015 	stw	zero,0(r17)
10000cd0:	88000115 	stw	zero,4(r17)
10000cd4:	88000215 	stw	zero,8(r17)
10000cd8:	88001915 	stw	zero,100(r17)
10000cdc:	8880038d 	sth	r2,14(r17)
10000ce0:	88000415 	stw	zero,16(r17)
10000ce4:	88000515 	stw	zero,20(r17)
10000ce8:	88000615 	stw	zero,24(r17)
10000cec:	00021700 	call	10002170 <memset>
10000cf0:	94000317 	ldw	r16,12(r18)
10000cf4:	00800484 	movi	r2,18
10000cf8:	8c400715 	stw	r17,28(r17)
10000cfc:	8d800815 	stw	r22,32(r17)
10000d00:	8d400915 	stw	r21,36(r17)
10000d04:	8d000a15 	stw	r20,40(r17)
10000d08:	8cc00b15 	stw	r19,44(r17)
10000d0c:	8080030d 	sth	r2,12(r16)
10000d10:	00800084 	movi	r2,2
10000d14:	80000015 	stw	zero,0(r16)
10000d18:	80000115 	stw	zero,4(r16)
10000d1c:	80000215 	stw	zero,8(r16)
10000d20:	80001915 	stw	zero,100(r16)
10000d24:	8080038d 	sth	r2,14(r16)
10000d28:	80000415 	stw	zero,16(r16)
10000d2c:	80000515 	stw	zero,20(r16)
10000d30:	80000615 	stw	zero,24(r16)
10000d34:	b80d883a 	mov	r6,r23
10000d38:	000b883a 	mov	r5,zero
10000d3c:	81001704 	addi	r4,r16,92
10000d40:	00021700 	call	10002170 <memset>
10000d44:	00800044 	movi	r2,1
10000d48:	84000715 	stw	r16,28(r16)
10000d4c:	85800815 	stw	r22,32(r16)
10000d50:	85400915 	stw	r21,36(r16)
10000d54:	85000a15 	stw	r20,40(r16)
10000d58:	84c00b15 	stw	r19,44(r16)
10000d5c:	90800e15 	stw	r2,56(r18)
10000d60:	dfc00817 	ldw	ra,32(sp)
10000d64:	ddc00717 	ldw	r23,28(sp)
10000d68:	dd800617 	ldw	r22,24(sp)
10000d6c:	dd400517 	ldw	r21,20(sp)
10000d70:	dd000417 	ldw	r20,16(sp)
10000d74:	dcc00317 	ldw	r19,12(sp)
10000d78:	dc800217 	ldw	r18,8(sp)
10000d7c:	dc400117 	ldw	r17,4(sp)
10000d80:	dc000017 	ldw	r16,0(sp)
10000d84:	dec00904 	addi	sp,sp,36
10000d88:	f800283a 	ret

10000d8c <__fp_lock>:
10000d8c:	0005883a 	mov	r2,zero
10000d90:	f800283a 	ret

10000d94 <__sfmoreglue>:
10000d94:	defffc04 	addi	sp,sp,-16
10000d98:	dc800215 	stw	r18,8(sp)
10000d9c:	2825883a 	mov	r18,r5
10000da0:	dc000015 	stw	r16,0(sp)
10000da4:	01401a04 	movi	r5,104
10000da8:	2021883a 	mov	r16,r4
10000dac:	913fffc4 	addi	r4,r18,-1
10000db0:	dfc00315 	stw	ra,12(sp)
10000db4:	dc400115 	stw	r17,4(sp)
10000db8:	00009cc0 	call	100009cc <__mulsi3>
10000dbc:	8009883a 	mov	r4,r16
10000dc0:	11401d04 	addi	r5,r2,116
10000dc4:	1023883a 	mov	r17,r2
10000dc8:	00015dc0 	call	100015dc <_malloc_r>
10000dcc:	1021883a 	mov	r16,r2
10000dd0:	10000726 	beq	r2,zero,10000df0 <__sfmoreglue+0x5c>
10000dd4:	11000304 	addi	r4,r2,12
10000dd8:	10000015 	stw	zero,0(r2)
10000ddc:	14800115 	stw	r18,4(r2)
10000de0:	11000215 	stw	r4,8(r2)
10000de4:	89801a04 	addi	r6,r17,104
10000de8:	000b883a 	mov	r5,zero
10000dec:	00021700 	call	10002170 <memset>
10000df0:	8005883a 	mov	r2,r16
10000df4:	dfc00317 	ldw	ra,12(sp)
10000df8:	dc800217 	ldw	r18,8(sp)
10000dfc:	dc400117 	ldw	r17,4(sp)
10000e00:	dc000017 	ldw	r16,0(sp)
10000e04:	dec00404 	addi	sp,sp,16
10000e08:	f800283a 	ret

10000e0c <__sfp>:
10000e0c:	defffb04 	addi	sp,sp,-20
10000e10:	dc000015 	stw	r16,0(sp)
10000e14:	04040034 	movhi	r16,4096
10000e18:	841fc304 	addi	r16,r16,32524
10000e1c:	dcc00315 	stw	r19,12(sp)
10000e20:	2027883a 	mov	r19,r4
10000e24:	81000017 	ldw	r4,0(r16)
10000e28:	dfc00415 	stw	ra,16(sp)
10000e2c:	dc800215 	stw	r18,8(sp)
10000e30:	20800e17 	ldw	r2,56(r4)
10000e34:	dc400115 	stw	r17,4(sp)
10000e38:	1000021e 	bne	r2,zero,10000e44 <__sfp+0x38>
10000e3c:	0000bf00 	call	10000bf0 <__sinit.part.1>
10000e40:	81000017 	ldw	r4,0(r16)
10000e44:	2480b804 	addi	r18,r4,736
10000e48:	047fffc4 	movi	r17,-1
10000e4c:	91000117 	ldw	r4,4(r18)
10000e50:	94000217 	ldw	r16,8(r18)
10000e54:	213fffc4 	addi	r4,r4,-1
10000e58:	20000a16 	blt	r4,zero,10000e84 <__sfp+0x78>
10000e5c:	8080030f 	ldh	r2,12(r16)
10000e60:	10000c26 	beq	r2,zero,10000e94 <__sfp+0x88>
10000e64:	80c01d04 	addi	r3,r16,116
10000e68:	00000206 	br	10000e74 <__sfp+0x68>
10000e6c:	18bfe60f 	ldh	r2,-104(r3)
10000e70:	10000826 	beq	r2,zero,10000e94 <__sfp+0x88>
10000e74:	213fffc4 	addi	r4,r4,-1
10000e78:	1c3ffd04 	addi	r16,r3,-12
10000e7c:	18c01a04 	addi	r3,r3,104
10000e80:	247ffa1e 	bne	r4,r17,10000e6c <__alt_data_end+0xf8000e6c>
10000e84:	90800017 	ldw	r2,0(r18)
10000e88:	10001d26 	beq	r2,zero,10000f00 <__sfp+0xf4>
10000e8c:	1025883a 	mov	r18,r2
10000e90:	003fee06 	br	10000e4c <__alt_data_end+0xf8000e4c>
10000e94:	00bfffc4 	movi	r2,-1
10000e98:	8080038d 	sth	r2,14(r16)
10000e9c:	00800044 	movi	r2,1
10000ea0:	8080030d 	sth	r2,12(r16)
10000ea4:	80001915 	stw	zero,100(r16)
10000ea8:	80000015 	stw	zero,0(r16)
10000eac:	80000215 	stw	zero,8(r16)
10000eb0:	80000115 	stw	zero,4(r16)
10000eb4:	80000415 	stw	zero,16(r16)
10000eb8:	80000515 	stw	zero,20(r16)
10000ebc:	80000615 	stw	zero,24(r16)
10000ec0:	01800204 	movi	r6,8
10000ec4:	000b883a 	mov	r5,zero
10000ec8:	81001704 	addi	r4,r16,92
10000ecc:	00021700 	call	10002170 <memset>
10000ed0:	8005883a 	mov	r2,r16
10000ed4:	80000c15 	stw	zero,48(r16)
10000ed8:	80000d15 	stw	zero,52(r16)
10000edc:	80001115 	stw	zero,68(r16)
10000ee0:	80001215 	stw	zero,72(r16)
10000ee4:	dfc00417 	ldw	ra,16(sp)
10000ee8:	dcc00317 	ldw	r19,12(sp)
10000eec:	dc800217 	ldw	r18,8(sp)
10000ef0:	dc400117 	ldw	r17,4(sp)
10000ef4:	dc000017 	ldw	r16,0(sp)
10000ef8:	dec00504 	addi	sp,sp,20
10000efc:	f800283a 	ret
10000f00:	01400104 	movi	r5,4
10000f04:	9809883a 	mov	r4,r19
10000f08:	0000d940 	call	10000d94 <__sfmoreglue>
10000f0c:	90800015 	stw	r2,0(r18)
10000f10:	103fde1e 	bne	r2,zero,10000e8c <__alt_data_end+0xf8000e8c>
10000f14:	00800304 	movi	r2,12
10000f18:	98800015 	stw	r2,0(r19)
10000f1c:	0005883a 	mov	r2,zero
10000f20:	003ff006 	br	10000ee4 <__alt_data_end+0xf8000ee4>

10000f24 <_cleanup>:
10000f24:	00840034 	movhi	r2,4096
10000f28:	109fc304 	addi	r2,r2,32524
10000f2c:	11000017 	ldw	r4,0(r2)
10000f30:	01440034 	movhi	r5,4096
10000f34:	294ae504 	addi	r5,r5,11156
10000f38:	00015181 	jmpi	10001518 <_fwalk_reent>

10000f3c <__sinit>:
10000f3c:	20800e17 	ldw	r2,56(r4)
10000f40:	10000126 	beq	r2,zero,10000f48 <__sinit+0xc>
10000f44:	f800283a 	ret
10000f48:	0000bf01 	jmpi	10000bf0 <__sinit.part.1>

10000f4c <__sfp_lock_acquire>:
10000f4c:	f800283a 	ret

10000f50 <__sfp_lock_release>:
10000f50:	f800283a 	ret

10000f54 <__sinit_lock_acquire>:
10000f54:	f800283a 	ret

10000f58 <__sinit_lock_release>:
10000f58:	f800283a 	ret

10000f5c <__fp_lock_all>:
10000f5c:	00840034 	movhi	r2,4096
10000f60:	109fc404 	addi	r2,r2,32528
10000f64:	11000017 	ldw	r4,0(r2)
10000f68:	01440034 	movhi	r5,4096
10000f6c:	29436304 	addi	r5,r5,3468
10000f70:	00014541 	jmpi	10001454 <_fwalk>

10000f74 <__fp_unlock_all>:
10000f74:	00840034 	movhi	r2,4096
10000f78:	109fc404 	addi	r2,r2,32528
10000f7c:	11000017 	ldw	r4,0(r2)
10000f80:	01440034 	movhi	r5,4096
10000f84:	2942f704 	addi	r5,r5,3036
10000f88:	00014541 	jmpi	10001454 <_fwalk>

10000f8c <__sfvwrite_r>:
10000f8c:	30800217 	ldw	r2,8(r6)
10000f90:	10006726 	beq	r2,zero,10001130 <__sfvwrite_r+0x1a4>
10000f94:	28c0030b 	ldhu	r3,12(r5)
10000f98:	defff404 	addi	sp,sp,-48
10000f9c:	dd400715 	stw	r21,28(sp)
10000fa0:	dd000615 	stw	r20,24(sp)
10000fa4:	dc000215 	stw	r16,8(sp)
10000fa8:	dfc00b15 	stw	ra,44(sp)
10000fac:	df000a15 	stw	fp,40(sp)
10000fb0:	ddc00915 	stw	r23,36(sp)
10000fb4:	dd800815 	stw	r22,32(sp)
10000fb8:	dcc00515 	stw	r19,20(sp)
10000fbc:	dc800415 	stw	r18,16(sp)
10000fc0:	dc400315 	stw	r17,12(sp)
10000fc4:	1880020c 	andi	r2,r3,8
10000fc8:	2821883a 	mov	r16,r5
10000fcc:	202b883a 	mov	r21,r4
10000fd0:	3029883a 	mov	r20,r6
10000fd4:	10002726 	beq	r2,zero,10001074 <__sfvwrite_r+0xe8>
10000fd8:	28800417 	ldw	r2,16(r5)
10000fdc:	10002526 	beq	r2,zero,10001074 <__sfvwrite_r+0xe8>
10000fe0:	1880008c 	andi	r2,r3,2
10000fe4:	a4400017 	ldw	r17,0(r20)
10000fe8:	10002a26 	beq	r2,zero,10001094 <__sfvwrite_r+0x108>
10000fec:	05a00034 	movhi	r22,32768
10000ff0:	0027883a 	mov	r19,zero
10000ff4:	0025883a 	mov	r18,zero
10000ff8:	b5bf0004 	addi	r22,r22,-1024
10000ffc:	980d883a 	mov	r6,r19
10001000:	a809883a 	mov	r4,r21
10001004:	90004626 	beq	r18,zero,10001120 <__sfvwrite_r+0x194>
10001008:	900f883a 	mov	r7,r18
1000100c:	b480022e 	bgeu	r22,r18,10001018 <__sfvwrite_r+0x8c>
10001010:	01e00034 	movhi	r7,32768
10001014:	39ff0004 	addi	r7,r7,-1024
10001018:	80800917 	ldw	r2,36(r16)
1000101c:	81400717 	ldw	r5,28(r16)
10001020:	103ee83a 	callr	r2
10001024:	00805a0e 	bge	zero,r2,10001190 <__sfvwrite_r+0x204>
10001028:	a0c00217 	ldw	r3,8(r20)
1000102c:	98a7883a 	add	r19,r19,r2
10001030:	90a5c83a 	sub	r18,r18,r2
10001034:	1885c83a 	sub	r2,r3,r2
10001038:	a0800215 	stw	r2,8(r20)
1000103c:	103fef1e 	bne	r2,zero,10000ffc <__alt_data_end+0xf8000ffc>
10001040:	0005883a 	mov	r2,zero
10001044:	dfc00b17 	ldw	ra,44(sp)
10001048:	df000a17 	ldw	fp,40(sp)
1000104c:	ddc00917 	ldw	r23,36(sp)
10001050:	dd800817 	ldw	r22,32(sp)
10001054:	dd400717 	ldw	r21,28(sp)
10001058:	dd000617 	ldw	r20,24(sp)
1000105c:	dcc00517 	ldw	r19,20(sp)
10001060:	dc800417 	ldw	r18,16(sp)
10001064:	dc400317 	ldw	r17,12(sp)
10001068:	dc000217 	ldw	r16,8(sp)
1000106c:	dec00c04 	addi	sp,sp,48
10001070:	f800283a 	ret
10001074:	800b883a 	mov	r5,r16
10001078:	a809883a 	mov	r4,r21
1000107c:	00029ec0 	call	100029ec <__swsetup_r>
10001080:	1000ee1e 	bne	r2,zero,1000143c <__sfvwrite_r+0x4b0>
10001084:	80c0030b 	ldhu	r3,12(r16)
10001088:	a4400017 	ldw	r17,0(r20)
1000108c:	1880008c 	andi	r2,r3,2
10001090:	103fd61e 	bne	r2,zero,10000fec <__alt_data_end+0xf8000fec>
10001094:	1880004c 	andi	r2,r3,1
10001098:	1000421e 	bne	r2,zero,100011a4 <__sfvwrite_r+0x218>
1000109c:	0039883a 	mov	fp,zero
100010a0:	0025883a 	mov	r18,zero
100010a4:	90001a26 	beq	r18,zero,10001110 <__sfvwrite_r+0x184>
100010a8:	1880800c 	andi	r2,r3,512
100010ac:	84c00217 	ldw	r19,8(r16)
100010b0:	10002126 	beq	r2,zero,10001138 <__sfvwrite_r+0x1ac>
100010b4:	982f883a 	mov	r23,r19
100010b8:	94c09636 	bltu	r18,r19,10001314 <__sfvwrite_r+0x388>
100010bc:	1881200c 	andi	r2,r3,1152
100010c0:	1000a11e 	bne	r2,zero,10001348 <__sfvwrite_r+0x3bc>
100010c4:	81000017 	ldw	r4,0(r16)
100010c8:	b80d883a 	mov	r6,r23
100010cc:	e00b883a 	mov	r5,fp
100010d0:	00020140 	call	10002014 <memmove>
100010d4:	80c00217 	ldw	r3,8(r16)
100010d8:	81000017 	ldw	r4,0(r16)
100010dc:	9005883a 	mov	r2,r18
100010e0:	1ce7c83a 	sub	r19,r3,r19
100010e4:	25cf883a 	add	r7,r4,r23
100010e8:	84c00215 	stw	r19,8(r16)
100010ec:	81c00015 	stw	r7,0(r16)
100010f0:	a0c00217 	ldw	r3,8(r20)
100010f4:	e0b9883a 	add	fp,fp,r2
100010f8:	90a5c83a 	sub	r18,r18,r2
100010fc:	18a7c83a 	sub	r19,r3,r2
10001100:	a4c00215 	stw	r19,8(r20)
10001104:	983fce26 	beq	r19,zero,10001040 <__alt_data_end+0xf8001040>
10001108:	80c0030b 	ldhu	r3,12(r16)
1000110c:	903fe61e 	bne	r18,zero,100010a8 <__alt_data_end+0xf80010a8>
10001110:	8f000017 	ldw	fp,0(r17)
10001114:	8c800117 	ldw	r18,4(r17)
10001118:	8c400204 	addi	r17,r17,8
1000111c:	003fe106 	br	100010a4 <__alt_data_end+0xf80010a4>
10001120:	8cc00017 	ldw	r19,0(r17)
10001124:	8c800117 	ldw	r18,4(r17)
10001128:	8c400204 	addi	r17,r17,8
1000112c:	003fb306 	br	10000ffc <__alt_data_end+0xf8000ffc>
10001130:	0005883a 	mov	r2,zero
10001134:	f800283a 	ret
10001138:	81000017 	ldw	r4,0(r16)
1000113c:	80800417 	ldw	r2,16(r16)
10001140:	11005a36 	bltu	r2,r4,100012ac <__sfvwrite_r+0x320>
10001144:	85c00517 	ldw	r23,20(r16)
10001148:	95c05836 	bltu	r18,r23,100012ac <__sfvwrite_r+0x320>
1000114c:	00a00034 	movhi	r2,32768
10001150:	10bfffc4 	addi	r2,r2,-1
10001154:	9009883a 	mov	r4,r18
10001158:	1480012e 	bgeu	r2,r18,10001160 <__sfvwrite_r+0x1d4>
1000115c:	1009883a 	mov	r4,r2
10001160:	b80b883a 	mov	r5,r23
10001164:	00037ac0 	call	100037ac <__divsi3>
10001168:	b80b883a 	mov	r5,r23
1000116c:	1009883a 	mov	r4,r2
10001170:	00009cc0 	call	100009cc <__mulsi3>
10001174:	81400717 	ldw	r5,28(r16)
10001178:	80c00917 	ldw	r3,36(r16)
1000117c:	100f883a 	mov	r7,r2
10001180:	e00d883a 	mov	r6,fp
10001184:	a809883a 	mov	r4,r21
10001188:	183ee83a 	callr	r3
1000118c:	00bfd816 	blt	zero,r2,100010f0 <__alt_data_end+0xf80010f0>
10001190:	8080030b 	ldhu	r2,12(r16)
10001194:	10801014 	ori	r2,r2,64
10001198:	8080030d 	sth	r2,12(r16)
1000119c:	00bfffc4 	movi	r2,-1
100011a0:	003fa806 	br	10001044 <__alt_data_end+0xf8001044>
100011a4:	0027883a 	mov	r19,zero
100011a8:	0011883a 	mov	r8,zero
100011ac:	0039883a 	mov	fp,zero
100011b0:	0025883a 	mov	r18,zero
100011b4:	90001f26 	beq	r18,zero,10001234 <__sfvwrite_r+0x2a8>
100011b8:	40005a26 	beq	r8,zero,10001324 <__sfvwrite_r+0x398>
100011bc:	982d883a 	mov	r22,r19
100011c0:	94c0012e 	bgeu	r18,r19,100011c8 <__sfvwrite_r+0x23c>
100011c4:	902d883a 	mov	r22,r18
100011c8:	81000017 	ldw	r4,0(r16)
100011cc:	80800417 	ldw	r2,16(r16)
100011d0:	b02f883a 	mov	r23,r22
100011d4:	81c00517 	ldw	r7,20(r16)
100011d8:	1100032e 	bgeu	r2,r4,100011e8 <__sfvwrite_r+0x25c>
100011dc:	80c00217 	ldw	r3,8(r16)
100011e0:	38c7883a 	add	r3,r7,r3
100011e4:	1d801816 	blt	r3,r22,10001248 <__sfvwrite_r+0x2bc>
100011e8:	b1c03e16 	blt	r22,r7,100012e4 <__sfvwrite_r+0x358>
100011ec:	80800917 	ldw	r2,36(r16)
100011f0:	81400717 	ldw	r5,28(r16)
100011f4:	e00d883a 	mov	r6,fp
100011f8:	da000115 	stw	r8,4(sp)
100011fc:	a809883a 	mov	r4,r21
10001200:	103ee83a 	callr	r2
10001204:	102f883a 	mov	r23,r2
10001208:	da000117 	ldw	r8,4(sp)
1000120c:	00bfe00e 	bge	zero,r2,10001190 <__alt_data_end+0xf8001190>
10001210:	9de7c83a 	sub	r19,r19,r23
10001214:	98001f26 	beq	r19,zero,10001294 <__sfvwrite_r+0x308>
10001218:	a0800217 	ldw	r2,8(r20)
1000121c:	e5f9883a 	add	fp,fp,r23
10001220:	95e5c83a 	sub	r18,r18,r23
10001224:	15efc83a 	sub	r23,r2,r23
10001228:	a5c00215 	stw	r23,8(r20)
1000122c:	b83f8426 	beq	r23,zero,10001040 <__alt_data_end+0xf8001040>
10001230:	903fe11e 	bne	r18,zero,100011b8 <__alt_data_end+0xf80011b8>
10001234:	8f000017 	ldw	fp,0(r17)
10001238:	8c800117 	ldw	r18,4(r17)
1000123c:	0011883a 	mov	r8,zero
10001240:	8c400204 	addi	r17,r17,8
10001244:	003fdb06 	br	100011b4 <__alt_data_end+0xf80011b4>
10001248:	180d883a 	mov	r6,r3
1000124c:	e00b883a 	mov	r5,fp
10001250:	da000115 	stw	r8,4(sp)
10001254:	d8c00015 	stw	r3,0(sp)
10001258:	00020140 	call	10002014 <memmove>
1000125c:	d8c00017 	ldw	r3,0(sp)
10001260:	80800017 	ldw	r2,0(r16)
10001264:	800b883a 	mov	r5,r16
10001268:	a809883a 	mov	r4,r21
1000126c:	10c5883a 	add	r2,r2,r3
10001270:	80800015 	stw	r2,0(r16)
10001274:	d8c00015 	stw	r3,0(sp)
10001278:	0002eb40 	call	10002eb4 <_fflush_r>
1000127c:	d8c00017 	ldw	r3,0(sp)
10001280:	da000117 	ldw	r8,4(sp)
10001284:	103fc21e 	bne	r2,zero,10001190 <__alt_data_end+0xf8001190>
10001288:	182f883a 	mov	r23,r3
1000128c:	9de7c83a 	sub	r19,r19,r23
10001290:	983fe11e 	bne	r19,zero,10001218 <__alt_data_end+0xf8001218>
10001294:	800b883a 	mov	r5,r16
10001298:	a809883a 	mov	r4,r21
1000129c:	0002eb40 	call	10002eb4 <_fflush_r>
100012a0:	103fbb1e 	bne	r2,zero,10001190 <__alt_data_end+0xf8001190>
100012a4:	0011883a 	mov	r8,zero
100012a8:	003fdb06 	br	10001218 <__alt_data_end+0xf8001218>
100012ac:	94c0012e 	bgeu	r18,r19,100012b4 <__sfvwrite_r+0x328>
100012b0:	9027883a 	mov	r19,r18
100012b4:	980d883a 	mov	r6,r19
100012b8:	e00b883a 	mov	r5,fp
100012bc:	00020140 	call	10002014 <memmove>
100012c0:	80800217 	ldw	r2,8(r16)
100012c4:	80c00017 	ldw	r3,0(r16)
100012c8:	14c5c83a 	sub	r2,r2,r19
100012cc:	1cc7883a 	add	r3,r3,r19
100012d0:	80800215 	stw	r2,8(r16)
100012d4:	80c00015 	stw	r3,0(r16)
100012d8:	10004326 	beq	r2,zero,100013e8 <__sfvwrite_r+0x45c>
100012dc:	9805883a 	mov	r2,r19
100012e0:	003f8306 	br	100010f0 <__alt_data_end+0xf80010f0>
100012e4:	b00d883a 	mov	r6,r22
100012e8:	e00b883a 	mov	r5,fp
100012ec:	da000115 	stw	r8,4(sp)
100012f0:	00020140 	call	10002014 <memmove>
100012f4:	80800217 	ldw	r2,8(r16)
100012f8:	80c00017 	ldw	r3,0(r16)
100012fc:	da000117 	ldw	r8,4(sp)
10001300:	1585c83a 	sub	r2,r2,r22
10001304:	1dad883a 	add	r22,r3,r22
10001308:	80800215 	stw	r2,8(r16)
1000130c:	85800015 	stw	r22,0(r16)
10001310:	003fbf06 	br	10001210 <__alt_data_end+0xf8001210>
10001314:	81000017 	ldw	r4,0(r16)
10001318:	9027883a 	mov	r19,r18
1000131c:	902f883a 	mov	r23,r18
10001320:	003f6906 	br	100010c8 <__alt_data_end+0xf80010c8>
10001324:	900d883a 	mov	r6,r18
10001328:	01400284 	movi	r5,10
1000132c:	e009883a 	mov	r4,fp
10001330:	0001de80 	call	10001de8 <memchr>
10001334:	10003e26 	beq	r2,zero,10001430 <__sfvwrite_r+0x4a4>
10001338:	10800044 	addi	r2,r2,1
1000133c:	1727c83a 	sub	r19,r2,fp
10001340:	02000044 	movi	r8,1
10001344:	003f9d06 	br	100011bc <__alt_data_end+0xf80011bc>
10001348:	80800517 	ldw	r2,20(r16)
1000134c:	81400417 	ldw	r5,16(r16)
10001350:	81c00017 	ldw	r7,0(r16)
10001354:	10a7883a 	add	r19,r2,r2
10001358:	9885883a 	add	r2,r19,r2
1000135c:	1026d7fa 	srli	r19,r2,31
10001360:	396dc83a 	sub	r22,r7,r5
10001364:	b1000044 	addi	r4,r22,1
10001368:	9885883a 	add	r2,r19,r2
1000136c:	1027d07a 	srai	r19,r2,1
10001370:	2485883a 	add	r2,r4,r18
10001374:	980d883a 	mov	r6,r19
10001378:	9880022e 	bgeu	r19,r2,10001384 <__sfvwrite_r+0x3f8>
1000137c:	1027883a 	mov	r19,r2
10001380:	100d883a 	mov	r6,r2
10001384:	18c1000c 	andi	r3,r3,1024
10001388:	18001c26 	beq	r3,zero,100013fc <__sfvwrite_r+0x470>
1000138c:	300b883a 	mov	r5,r6
10001390:	a809883a 	mov	r4,r21
10001394:	00015dc0 	call	100015dc <_malloc_r>
10001398:	102f883a 	mov	r23,r2
1000139c:	10002926 	beq	r2,zero,10001444 <__sfvwrite_r+0x4b8>
100013a0:	81400417 	ldw	r5,16(r16)
100013a4:	b00d883a 	mov	r6,r22
100013a8:	1009883a 	mov	r4,r2
100013ac:	0001ecc0 	call	10001ecc <memcpy>
100013b0:	8080030b 	ldhu	r2,12(r16)
100013b4:	00fedfc4 	movi	r3,-1153
100013b8:	10c4703a 	and	r2,r2,r3
100013bc:	10802014 	ori	r2,r2,128
100013c0:	8080030d 	sth	r2,12(r16)
100013c4:	bd89883a 	add	r4,r23,r22
100013c8:	9d8fc83a 	sub	r7,r19,r22
100013cc:	85c00415 	stw	r23,16(r16)
100013d0:	84c00515 	stw	r19,20(r16)
100013d4:	81000015 	stw	r4,0(r16)
100013d8:	9027883a 	mov	r19,r18
100013dc:	81c00215 	stw	r7,8(r16)
100013e0:	902f883a 	mov	r23,r18
100013e4:	003f3806 	br	100010c8 <__alt_data_end+0xf80010c8>
100013e8:	800b883a 	mov	r5,r16
100013ec:	a809883a 	mov	r4,r21
100013f0:	0002eb40 	call	10002eb4 <_fflush_r>
100013f4:	103fb926 	beq	r2,zero,100012dc <__alt_data_end+0xf80012dc>
100013f8:	003f6506 	br	10001190 <__alt_data_end+0xf8001190>
100013fc:	a809883a 	mov	r4,r21
10001400:	00022980 	call	10002298 <_realloc_r>
10001404:	102f883a 	mov	r23,r2
10001408:	103fee1e 	bne	r2,zero,100013c4 <__alt_data_end+0xf80013c4>
1000140c:	81400417 	ldw	r5,16(r16)
10001410:	a809883a 	mov	r4,r21
10001414:	00030640 	call	10003064 <_free_r>
10001418:	8080030b 	ldhu	r2,12(r16)
1000141c:	00ffdfc4 	movi	r3,-129
10001420:	1884703a 	and	r2,r3,r2
10001424:	00c00304 	movi	r3,12
10001428:	a8c00015 	stw	r3,0(r21)
1000142c:	003f5906 	br	10001194 <__alt_data_end+0xf8001194>
10001430:	94c00044 	addi	r19,r18,1
10001434:	02000044 	movi	r8,1
10001438:	003f6006 	br	100011bc <__alt_data_end+0xf80011bc>
1000143c:	00bfffc4 	movi	r2,-1
10001440:	003f0006 	br	10001044 <__alt_data_end+0xf8001044>
10001444:	00800304 	movi	r2,12
10001448:	a8800015 	stw	r2,0(r21)
1000144c:	8080030b 	ldhu	r2,12(r16)
10001450:	003f5006 	br	10001194 <__alt_data_end+0xf8001194>

10001454 <_fwalk>:
10001454:	defff704 	addi	sp,sp,-36
10001458:	dd000415 	stw	r20,16(sp)
1000145c:	dfc00815 	stw	ra,32(sp)
10001460:	ddc00715 	stw	r23,28(sp)
10001464:	dd800615 	stw	r22,24(sp)
10001468:	dd400515 	stw	r21,20(sp)
1000146c:	dcc00315 	stw	r19,12(sp)
10001470:	dc800215 	stw	r18,8(sp)
10001474:	dc400115 	stw	r17,4(sp)
10001478:	dc000015 	stw	r16,0(sp)
1000147c:	2500b804 	addi	r20,r4,736
10001480:	a0002326 	beq	r20,zero,10001510 <_fwalk+0xbc>
10001484:	282b883a 	mov	r21,r5
10001488:	002f883a 	mov	r23,zero
1000148c:	05800044 	movi	r22,1
10001490:	04ffffc4 	movi	r19,-1
10001494:	a4400117 	ldw	r17,4(r20)
10001498:	a4800217 	ldw	r18,8(r20)
1000149c:	8c7fffc4 	addi	r17,r17,-1
100014a0:	88000d16 	blt	r17,zero,100014d8 <_fwalk+0x84>
100014a4:	94000304 	addi	r16,r18,12
100014a8:	94800384 	addi	r18,r18,14
100014ac:	8080000b 	ldhu	r2,0(r16)
100014b0:	8c7fffc4 	addi	r17,r17,-1
100014b4:	813ffd04 	addi	r4,r16,-12
100014b8:	b080042e 	bgeu	r22,r2,100014cc <_fwalk+0x78>
100014bc:	9080000f 	ldh	r2,0(r18)
100014c0:	14c00226 	beq	r2,r19,100014cc <_fwalk+0x78>
100014c4:	a83ee83a 	callr	r21
100014c8:	b8aeb03a 	or	r23,r23,r2
100014cc:	84001a04 	addi	r16,r16,104
100014d0:	94801a04 	addi	r18,r18,104
100014d4:	8cfff51e 	bne	r17,r19,100014ac <__alt_data_end+0xf80014ac>
100014d8:	a5000017 	ldw	r20,0(r20)
100014dc:	a03fed1e 	bne	r20,zero,10001494 <__alt_data_end+0xf8001494>
100014e0:	b805883a 	mov	r2,r23
100014e4:	dfc00817 	ldw	ra,32(sp)
100014e8:	ddc00717 	ldw	r23,28(sp)
100014ec:	dd800617 	ldw	r22,24(sp)
100014f0:	dd400517 	ldw	r21,20(sp)
100014f4:	dd000417 	ldw	r20,16(sp)
100014f8:	dcc00317 	ldw	r19,12(sp)
100014fc:	dc800217 	ldw	r18,8(sp)
10001500:	dc400117 	ldw	r17,4(sp)
10001504:	dc000017 	ldw	r16,0(sp)
10001508:	dec00904 	addi	sp,sp,36
1000150c:	f800283a 	ret
10001510:	002f883a 	mov	r23,zero
10001514:	003ff206 	br	100014e0 <__alt_data_end+0xf80014e0>

10001518 <_fwalk_reent>:
10001518:	defff704 	addi	sp,sp,-36
1000151c:	dd000415 	stw	r20,16(sp)
10001520:	dfc00815 	stw	ra,32(sp)
10001524:	ddc00715 	stw	r23,28(sp)
10001528:	dd800615 	stw	r22,24(sp)
1000152c:	dd400515 	stw	r21,20(sp)
10001530:	dcc00315 	stw	r19,12(sp)
10001534:	dc800215 	stw	r18,8(sp)
10001538:	dc400115 	stw	r17,4(sp)
1000153c:	dc000015 	stw	r16,0(sp)
10001540:	2500b804 	addi	r20,r4,736
10001544:	a0002326 	beq	r20,zero,100015d4 <_fwalk_reent+0xbc>
10001548:	282b883a 	mov	r21,r5
1000154c:	2027883a 	mov	r19,r4
10001550:	002f883a 	mov	r23,zero
10001554:	05800044 	movi	r22,1
10001558:	04bfffc4 	movi	r18,-1
1000155c:	a4400117 	ldw	r17,4(r20)
10001560:	a4000217 	ldw	r16,8(r20)
10001564:	8c7fffc4 	addi	r17,r17,-1
10001568:	88000c16 	blt	r17,zero,1000159c <_fwalk_reent+0x84>
1000156c:	84000304 	addi	r16,r16,12
10001570:	8080000b 	ldhu	r2,0(r16)
10001574:	8c7fffc4 	addi	r17,r17,-1
10001578:	817ffd04 	addi	r5,r16,-12
1000157c:	b080052e 	bgeu	r22,r2,10001594 <_fwalk_reent+0x7c>
10001580:	8080008f 	ldh	r2,2(r16)
10001584:	9809883a 	mov	r4,r19
10001588:	14800226 	beq	r2,r18,10001594 <_fwalk_reent+0x7c>
1000158c:	a83ee83a 	callr	r21
10001590:	b8aeb03a 	or	r23,r23,r2
10001594:	84001a04 	addi	r16,r16,104
10001598:	8cbff51e 	bne	r17,r18,10001570 <__alt_data_end+0xf8001570>
1000159c:	a5000017 	ldw	r20,0(r20)
100015a0:	a03fee1e 	bne	r20,zero,1000155c <__alt_data_end+0xf800155c>
100015a4:	b805883a 	mov	r2,r23
100015a8:	dfc00817 	ldw	ra,32(sp)
100015ac:	ddc00717 	ldw	r23,28(sp)
100015b0:	dd800617 	ldw	r22,24(sp)
100015b4:	dd400517 	ldw	r21,20(sp)
100015b8:	dd000417 	ldw	r20,16(sp)
100015bc:	dcc00317 	ldw	r19,12(sp)
100015c0:	dc800217 	ldw	r18,8(sp)
100015c4:	dc400117 	ldw	r17,4(sp)
100015c8:	dc000017 	ldw	r16,0(sp)
100015cc:	dec00904 	addi	sp,sp,36
100015d0:	f800283a 	ret
100015d4:	002f883a 	mov	r23,zero
100015d8:	003ff206 	br	100015a4 <__alt_data_end+0xf80015a4>

100015dc <_malloc_r>:
100015dc:	defff504 	addi	sp,sp,-44
100015e0:	dc800315 	stw	r18,12(sp)
100015e4:	dfc00a15 	stw	ra,40(sp)
100015e8:	df000915 	stw	fp,36(sp)
100015ec:	ddc00815 	stw	r23,32(sp)
100015f0:	dd800715 	stw	r22,28(sp)
100015f4:	dd400615 	stw	r21,24(sp)
100015f8:	dd000515 	stw	r20,20(sp)
100015fc:	dcc00415 	stw	r19,16(sp)
10001600:	dc400215 	stw	r17,8(sp)
10001604:	dc000115 	stw	r16,4(sp)
10001608:	288002c4 	addi	r2,r5,11
1000160c:	00c00584 	movi	r3,22
10001610:	2025883a 	mov	r18,r4
10001614:	18807f2e 	bgeu	r3,r2,10001814 <_malloc_r+0x238>
10001618:	047ffe04 	movi	r17,-8
1000161c:	1462703a 	and	r17,r2,r17
10001620:	8800a316 	blt	r17,zero,100018b0 <_malloc_r+0x2d4>
10001624:	8940a236 	bltu	r17,r5,100018b0 <_malloc_r+0x2d4>
10001628:	0003efc0 	call	10003efc <__malloc_lock>
1000162c:	00807dc4 	movi	r2,503
10001630:	1441e92e 	bgeu	r2,r17,10001dd8 <_malloc_r+0x7fc>
10001634:	8804d27a 	srli	r2,r17,9
10001638:	1000a126 	beq	r2,zero,100018c0 <_malloc_r+0x2e4>
1000163c:	00c00104 	movi	r3,4
10001640:	18811e36 	bltu	r3,r2,10001abc <_malloc_r+0x4e0>
10001644:	8804d1ba 	srli	r2,r17,6
10001648:	12000e44 	addi	r8,r2,57
1000164c:	11c00e04 	addi	r7,r2,56
10001650:	4209883a 	add	r4,r8,r8
10001654:	04c40034 	movhi	r19,4096
10001658:	2109883a 	add	r4,r4,r4
1000165c:	9cda3d04 	addi	r19,r19,26868
10001660:	2109883a 	add	r4,r4,r4
10001664:	9909883a 	add	r4,r19,r4
10001668:	24000117 	ldw	r16,4(r4)
1000166c:	213ffe04 	addi	r4,r4,-8
10001670:	24009726 	beq	r4,r16,100018d0 <_malloc_r+0x2f4>
10001674:	80800117 	ldw	r2,4(r16)
10001678:	01bfff04 	movi	r6,-4
1000167c:	014003c4 	movi	r5,15
10001680:	1184703a 	and	r2,r2,r6
10001684:	1447c83a 	sub	r3,r2,r17
10001688:	28c00716 	blt	r5,r3,100016a8 <_malloc_r+0xcc>
1000168c:	1800920e 	bge	r3,zero,100018d8 <_malloc_r+0x2fc>
10001690:	84000317 	ldw	r16,12(r16)
10001694:	24008e26 	beq	r4,r16,100018d0 <_malloc_r+0x2f4>
10001698:	80800117 	ldw	r2,4(r16)
1000169c:	1184703a 	and	r2,r2,r6
100016a0:	1447c83a 	sub	r3,r2,r17
100016a4:	28fff90e 	bge	r5,r3,1000168c <__alt_data_end+0xf800168c>
100016a8:	3809883a 	mov	r4,r7
100016ac:	01840034 	movhi	r6,4096
100016b0:	9c000417 	ldw	r16,16(r19)
100016b4:	319a3d04 	addi	r6,r6,26868
100016b8:	32000204 	addi	r8,r6,8
100016bc:	82013426 	beq	r16,r8,10001b90 <_malloc_r+0x5b4>
100016c0:	80c00117 	ldw	r3,4(r16)
100016c4:	00bfff04 	movi	r2,-4
100016c8:	188e703a 	and	r7,r3,r2
100016cc:	3c45c83a 	sub	r2,r7,r17
100016d0:	00c003c4 	movi	r3,15
100016d4:	18811f16 	blt	r3,r2,10001b54 <_malloc_r+0x578>
100016d8:	32000515 	stw	r8,20(r6)
100016dc:	32000415 	stw	r8,16(r6)
100016e0:	10007f0e 	bge	r2,zero,100018e0 <_malloc_r+0x304>
100016e4:	00807fc4 	movi	r2,511
100016e8:	11c0fd36 	bltu	r2,r7,10001ae0 <_malloc_r+0x504>
100016ec:	3806d0fa 	srli	r3,r7,3
100016f0:	01c00044 	movi	r7,1
100016f4:	30800117 	ldw	r2,4(r6)
100016f8:	19400044 	addi	r5,r3,1
100016fc:	294b883a 	add	r5,r5,r5
10001700:	1807d0ba 	srai	r3,r3,2
10001704:	294b883a 	add	r5,r5,r5
10001708:	294b883a 	add	r5,r5,r5
1000170c:	298b883a 	add	r5,r5,r6
10001710:	38c6983a 	sll	r3,r7,r3
10001714:	29c00017 	ldw	r7,0(r5)
10001718:	2a7ffe04 	addi	r9,r5,-8
1000171c:	1886b03a 	or	r3,r3,r2
10001720:	82400315 	stw	r9,12(r16)
10001724:	81c00215 	stw	r7,8(r16)
10001728:	30c00115 	stw	r3,4(r6)
1000172c:	2c000015 	stw	r16,0(r5)
10001730:	3c000315 	stw	r16,12(r7)
10001734:	2005d0ba 	srai	r2,r4,2
10001738:	01400044 	movi	r5,1
1000173c:	288a983a 	sll	r5,r5,r2
10001740:	19406f36 	bltu	r3,r5,10001900 <_malloc_r+0x324>
10001744:	28c4703a 	and	r2,r5,r3
10001748:	10000a1e 	bne	r2,zero,10001774 <_malloc_r+0x198>
1000174c:	00bfff04 	movi	r2,-4
10001750:	294b883a 	add	r5,r5,r5
10001754:	2088703a 	and	r4,r4,r2
10001758:	28c4703a 	and	r2,r5,r3
1000175c:	21000104 	addi	r4,r4,4
10001760:	1000041e 	bne	r2,zero,10001774 <_malloc_r+0x198>
10001764:	294b883a 	add	r5,r5,r5
10001768:	28c4703a 	and	r2,r5,r3
1000176c:	21000104 	addi	r4,r4,4
10001770:	103ffc26 	beq	r2,zero,10001764 <__alt_data_end+0xf8001764>
10001774:	02bfff04 	movi	r10,-4
10001778:	024003c4 	movi	r9,15
1000177c:	21800044 	addi	r6,r4,1
10001780:	318d883a 	add	r6,r6,r6
10001784:	318d883a 	add	r6,r6,r6
10001788:	318d883a 	add	r6,r6,r6
1000178c:	998d883a 	add	r6,r19,r6
10001790:	333ffe04 	addi	r12,r6,-8
10001794:	2017883a 	mov	r11,r4
10001798:	31800104 	addi	r6,r6,4
1000179c:	34000017 	ldw	r16,0(r6)
100017a0:	31fffd04 	addi	r7,r6,-12
100017a4:	81c0041e 	bne	r16,r7,100017b8 <_malloc_r+0x1dc>
100017a8:	0000fb06 	br	10001b98 <_malloc_r+0x5bc>
100017ac:	1801030e 	bge	r3,zero,10001bbc <_malloc_r+0x5e0>
100017b0:	84000317 	ldw	r16,12(r16)
100017b4:	81c0f826 	beq	r16,r7,10001b98 <_malloc_r+0x5bc>
100017b8:	80800117 	ldw	r2,4(r16)
100017bc:	1284703a 	and	r2,r2,r10
100017c0:	1447c83a 	sub	r3,r2,r17
100017c4:	48fff90e 	bge	r9,r3,100017ac <__alt_data_end+0xf80017ac>
100017c8:	80800317 	ldw	r2,12(r16)
100017cc:	81000217 	ldw	r4,8(r16)
100017d0:	89400054 	ori	r5,r17,1
100017d4:	81400115 	stw	r5,4(r16)
100017d8:	20800315 	stw	r2,12(r4)
100017dc:	11000215 	stw	r4,8(r2)
100017e0:	8463883a 	add	r17,r16,r17
100017e4:	9c400515 	stw	r17,20(r19)
100017e8:	9c400415 	stw	r17,16(r19)
100017ec:	18800054 	ori	r2,r3,1
100017f0:	88800115 	stw	r2,4(r17)
100017f4:	8a000315 	stw	r8,12(r17)
100017f8:	8a000215 	stw	r8,8(r17)
100017fc:	88e3883a 	add	r17,r17,r3
10001800:	88c00015 	stw	r3,0(r17)
10001804:	9009883a 	mov	r4,r18
10001808:	0003f200 	call	10003f20 <__malloc_unlock>
1000180c:	80800204 	addi	r2,r16,8
10001810:	00001b06 	br	10001880 <_malloc_r+0x2a4>
10001814:	04400404 	movi	r17,16
10001818:	89402536 	bltu	r17,r5,100018b0 <_malloc_r+0x2d4>
1000181c:	0003efc0 	call	10003efc <__malloc_lock>
10001820:	00800184 	movi	r2,6
10001824:	01000084 	movi	r4,2
10001828:	04c40034 	movhi	r19,4096
1000182c:	1085883a 	add	r2,r2,r2
10001830:	9cda3d04 	addi	r19,r19,26868
10001834:	1085883a 	add	r2,r2,r2
10001838:	9885883a 	add	r2,r19,r2
1000183c:	14000117 	ldw	r16,4(r2)
10001840:	10fffe04 	addi	r3,r2,-8
10001844:	80c0d926 	beq	r16,r3,10001bac <_malloc_r+0x5d0>
10001848:	80c00117 	ldw	r3,4(r16)
1000184c:	81000317 	ldw	r4,12(r16)
10001850:	00bfff04 	movi	r2,-4
10001854:	1884703a 	and	r2,r3,r2
10001858:	81400217 	ldw	r5,8(r16)
1000185c:	8085883a 	add	r2,r16,r2
10001860:	10c00117 	ldw	r3,4(r2)
10001864:	29000315 	stw	r4,12(r5)
10001868:	21400215 	stw	r5,8(r4)
1000186c:	18c00054 	ori	r3,r3,1
10001870:	10c00115 	stw	r3,4(r2)
10001874:	9009883a 	mov	r4,r18
10001878:	0003f200 	call	10003f20 <__malloc_unlock>
1000187c:	80800204 	addi	r2,r16,8
10001880:	dfc00a17 	ldw	ra,40(sp)
10001884:	df000917 	ldw	fp,36(sp)
10001888:	ddc00817 	ldw	r23,32(sp)
1000188c:	dd800717 	ldw	r22,28(sp)
10001890:	dd400617 	ldw	r21,24(sp)
10001894:	dd000517 	ldw	r20,20(sp)
10001898:	dcc00417 	ldw	r19,16(sp)
1000189c:	dc800317 	ldw	r18,12(sp)
100018a0:	dc400217 	ldw	r17,8(sp)
100018a4:	dc000117 	ldw	r16,4(sp)
100018a8:	dec00b04 	addi	sp,sp,44
100018ac:	f800283a 	ret
100018b0:	00800304 	movi	r2,12
100018b4:	90800015 	stw	r2,0(r18)
100018b8:	0005883a 	mov	r2,zero
100018bc:	003ff006 	br	10001880 <__alt_data_end+0xf8001880>
100018c0:	01002004 	movi	r4,128
100018c4:	02001004 	movi	r8,64
100018c8:	01c00fc4 	movi	r7,63
100018cc:	003f6106 	br	10001654 <__alt_data_end+0xf8001654>
100018d0:	4009883a 	mov	r4,r8
100018d4:	003f7506 	br	100016ac <__alt_data_end+0xf80016ac>
100018d8:	81000317 	ldw	r4,12(r16)
100018dc:	003fde06 	br	10001858 <__alt_data_end+0xf8001858>
100018e0:	81c5883a 	add	r2,r16,r7
100018e4:	11400117 	ldw	r5,4(r2)
100018e8:	9009883a 	mov	r4,r18
100018ec:	29400054 	ori	r5,r5,1
100018f0:	11400115 	stw	r5,4(r2)
100018f4:	0003f200 	call	10003f20 <__malloc_unlock>
100018f8:	80800204 	addi	r2,r16,8
100018fc:	003fe006 	br	10001880 <__alt_data_end+0xf8001880>
10001900:	9c000217 	ldw	r16,8(r19)
10001904:	00bfff04 	movi	r2,-4
10001908:	85800117 	ldw	r22,4(r16)
1000190c:	b0ac703a 	and	r22,r22,r2
10001910:	b4400336 	bltu	r22,r17,10001920 <_malloc_r+0x344>
10001914:	b445c83a 	sub	r2,r22,r17
10001918:	00c003c4 	movi	r3,15
1000191c:	18805d16 	blt	r3,r2,10001a94 <_malloc_r+0x4b8>
10001920:	05c40034 	movhi	r23,4096
10001924:	00840074 	movhi	r2,4097
10001928:	10a72804 	addi	r2,r2,-25440
1000192c:	bddfc504 	addi	r23,r23,32532
10001930:	15400017 	ldw	r21,0(r2)
10001934:	b8c00017 	ldw	r3,0(r23)
10001938:	00bfffc4 	movi	r2,-1
1000193c:	858d883a 	add	r6,r16,r22
10001940:	8d6b883a 	add	r21,r17,r21
10001944:	1880ea26 	beq	r3,r2,10001cf0 <_malloc_r+0x714>
10001948:	ad4403c4 	addi	r21,r21,4111
1000194c:	00bc0004 	movi	r2,-4096
10001950:	a8aa703a 	and	r21,r21,r2
10001954:	a80b883a 	mov	r5,r21
10001958:	9009883a 	mov	r4,r18
1000195c:	d9800015 	stw	r6,0(sp)
10001960:	00027fc0 	call	100027fc <_sbrk_r>
10001964:	1029883a 	mov	r20,r2
10001968:	00bfffc4 	movi	r2,-1
1000196c:	d9800017 	ldw	r6,0(sp)
10001970:	a080e826 	beq	r20,r2,10001d14 <_malloc_r+0x738>
10001974:	a180a636 	bltu	r20,r6,10001c10 <_malloc_r+0x634>
10001978:	07040074 	movhi	fp,4097
1000197c:	e7273104 	addi	fp,fp,-25404
10001980:	e0800017 	ldw	r2,0(fp)
10001984:	a887883a 	add	r3,r21,r2
10001988:	e0c00015 	stw	r3,0(fp)
1000198c:	3500e626 	beq	r6,r20,10001d28 <_malloc_r+0x74c>
10001990:	b9000017 	ldw	r4,0(r23)
10001994:	00bfffc4 	movi	r2,-1
10001998:	2080ee26 	beq	r4,r2,10001d54 <_malloc_r+0x778>
1000199c:	a185c83a 	sub	r2,r20,r6
100019a0:	10c5883a 	add	r2,r2,r3
100019a4:	e0800015 	stw	r2,0(fp)
100019a8:	a0c001cc 	andi	r3,r20,7
100019ac:	1800bc26 	beq	r3,zero,10001ca0 <_malloc_r+0x6c4>
100019b0:	a0e9c83a 	sub	r20,r20,r3
100019b4:	00840204 	movi	r2,4104
100019b8:	a5000204 	addi	r20,r20,8
100019bc:	10c7c83a 	sub	r3,r2,r3
100019c0:	a545883a 	add	r2,r20,r21
100019c4:	1083ffcc 	andi	r2,r2,4095
100019c8:	18abc83a 	sub	r21,r3,r2
100019cc:	a80b883a 	mov	r5,r21
100019d0:	9009883a 	mov	r4,r18
100019d4:	00027fc0 	call	100027fc <_sbrk_r>
100019d8:	00ffffc4 	movi	r3,-1
100019dc:	10c0e126 	beq	r2,r3,10001d64 <_malloc_r+0x788>
100019e0:	1505c83a 	sub	r2,r2,r20
100019e4:	1545883a 	add	r2,r2,r21
100019e8:	10800054 	ori	r2,r2,1
100019ec:	e0c00017 	ldw	r3,0(fp)
100019f0:	9d000215 	stw	r20,8(r19)
100019f4:	a0800115 	stw	r2,4(r20)
100019f8:	a8c7883a 	add	r3,r21,r3
100019fc:	e0c00015 	stw	r3,0(fp)
10001a00:	84c00e26 	beq	r16,r19,10001a3c <_malloc_r+0x460>
10001a04:	018003c4 	movi	r6,15
10001a08:	3580a72e 	bgeu	r6,r22,10001ca8 <_malloc_r+0x6cc>
10001a0c:	81400117 	ldw	r5,4(r16)
10001a10:	013ffe04 	movi	r4,-8
10001a14:	b0bffd04 	addi	r2,r22,-12
10001a18:	1104703a 	and	r2,r2,r4
10001a1c:	2900004c 	andi	r4,r5,1
10001a20:	2088b03a 	or	r4,r4,r2
10001a24:	81000115 	stw	r4,4(r16)
10001a28:	01400144 	movi	r5,5
10001a2c:	8089883a 	add	r4,r16,r2
10001a30:	21400115 	stw	r5,4(r4)
10001a34:	21400215 	stw	r5,8(r4)
10001a38:	3080cd36 	bltu	r6,r2,10001d70 <_malloc_r+0x794>
10001a3c:	00840074 	movhi	r2,4097
10001a40:	10a72704 	addi	r2,r2,-25444
10001a44:	11000017 	ldw	r4,0(r2)
10001a48:	20c0012e 	bgeu	r4,r3,10001a50 <_malloc_r+0x474>
10001a4c:	10c00015 	stw	r3,0(r2)
10001a50:	00840074 	movhi	r2,4097
10001a54:	10a72604 	addi	r2,r2,-25448
10001a58:	11000017 	ldw	r4,0(r2)
10001a5c:	9c000217 	ldw	r16,8(r19)
10001a60:	20c0012e 	bgeu	r4,r3,10001a68 <_malloc_r+0x48c>
10001a64:	10c00015 	stw	r3,0(r2)
10001a68:	80c00117 	ldw	r3,4(r16)
10001a6c:	00bfff04 	movi	r2,-4
10001a70:	1886703a 	and	r3,r3,r2
10001a74:	1c45c83a 	sub	r2,r3,r17
10001a78:	1c400236 	bltu	r3,r17,10001a84 <_malloc_r+0x4a8>
10001a7c:	00c003c4 	movi	r3,15
10001a80:	18800416 	blt	r3,r2,10001a94 <_malloc_r+0x4b8>
10001a84:	9009883a 	mov	r4,r18
10001a88:	0003f200 	call	10003f20 <__malloc_unlock>
10001a8c:	0005883a 	mov	r2,zero
10001a90:	003f7b06 	br	10001880 <__alt_data_end+0xf8001880>
10001a94:	88c00054 	ori	r3,r17,1
10001a98:	80c00115 	stw	r3,4(r16)
10001a9c:	8463883a 	add	r17,r16,r17
10001aa0:	10800054 	ori	r2,r2,1
10001aa4:	9c400215 	stw	r17,8(r19)
10001aa8:	88800115 	stw	r2,4(r17)
10001aac:	9009883a 	mov	r4,r18
10001ab0:	0003f200 	call	10003f20 <__malloc_unlock>
10001ab4:	80800204 	addi	r2,r16,8
10001ab8:	003f7106 	br	10001880 <__alt_data_end+0xf8001880>
10001abc:	00c00504 	movi	r3,20
10001ac0:	18804a2e 	bgeu	r3,r2,10001bec <_malloc_r+0x610>
10001ac4:	00c01504 	movi	r3,84
10001ac8:	18806e36 	bltu	r3,r2,10001c84 <_malloc_r+0x6a8>
10001acc:	8804d33a 	srli	r2,r17,12
10001ad0:	12001bc4 	addi	r8,r2,111
10001ad4:	11c01b84 	addi	r7,r2,110
10001ad8:	4209883a 	add	r4,r8,r8
10001adc:	003edd06 	br	10001654 <__alt_data_end+0xf8001654>
10001ae0:	3804d27a 	srli	r2,r7,9
10001ae4:	00c00104 	movi	r3,4
10001ae8:	1880442e 	bgeu	r3,r2,10001bfc <_malloc_r+0x620>
10001aec:	00c00504 	movi	r3,20
10001af0:	18808136 	bltu	r3,r2,10001cf8 <_malloc_r+0x71c>
10001af4:	11401704 	addi	r5,r2,92
10001af8:	10c016c4 	addi	r3,r2,91
10001afc:	294b883a 	add	r5,r5,r5
10001b00:	294b883a 	add	r5,r5,r5
10001b04:	294b883a 	add	r5,r5,r5
10001b08:	994b883a 	add	r5,r19,r5
10001b0c:	28800017 	ldw	r2,0(r5)
10001b10:	01840034 	movhi	r6,4096
10001b14:	297ffe04 	addi	r5,r5,-8
10001b18:	319a3d04 	addi	r6,r6,26868
10001b1c:	28806526 	beq	r5,r2,10001cb4 <_malloc_r+0x6d8>
10001b20:	01bfff04 	movi	r6,-4
10001b24:	10c00117 	ldw	r3,4(r2)
10001b28:	1986703a 	and	r3,r3,r6
10001b2c:	38c0022e 	bgeu	r7,r3,10001b38 <_malloc_r+0x55c>
10001b30:	10800217 	ldw	r2,8(r2)
10001b34:	28bffb1e 	bne	r5,r2,10001b24 <__alt_data_end+0xf8001b24>
10001b38:	11400317 	ldw	r5,12(r2)
10001b3c:	98c00117 	ldw	r3,4(r19)
10001b40:	81400315 	stw	r5,12(r16)
10001b44:	80800215 	stw	r2,8(r16)
10001b48:	2c000215 	stw	r16,8(r5)
10001b4c:	14000315 	stw	r16,12(r2)
10001b50:	003ef806 	br	10001734 <__alt_data_end+0xf8001734>
10001b54:	88c00054 	ori	r3,r17,1
10001b58:	80c00115 	stw	r3,4(r16)
10001b5c:	8463883a 	add	r17,r16,r17
10001b60:	34400515 	stw	r17,20(r6)
10001b64:	34400415 	stw	r17,16(r6)
10001b68:	10c00054 	ori	r3,r2,1
10001b6c:	8a000315 	stw	r8,12(r17)
10001b70:	8a000215 	stw	r8,8(r17)
10001b74:	88c00115 	stw	r3,4(r17)
10001b78:	88a3883a 	add	r17,r17,r2
10001b7c:	88800015 	stw	r2,0(r17)
10001b80:	9009883a 	mov	r4,r18
10001b84:	0003f200 	call	10003f20 <__malloc_unlock>
10001b88:	80800204 	addi	r2,r16,8
10001b8c:	003f3c06 	br	10001880 <__alt_data_end+0xf8001880>
10001b90:	30c00117 	ldw	r3,4(r6)
10001b94:	003ee706 	br	10001734 <__alt_data_end+0xf8001734>
10001b98:	5ac00044 	addi	r11,r11,1
10001b9c:	588000cc 	andi	r2,r11,3
10001ba0:	31800204 	addi	r6,r6,8
10001ba4:	103efd1e 	bne	r2,zero,1000179c <__alt_data_end+0xf800179c>
10001ba8:	00002406 	br	10001c3c <_malloc_r+0x660>
10001bac:	14000317 	ldw	r16,12(r2)
10001bb0:	143f251e 	bne	r2,r16,10001848 <__alt_data_end+0xf8001848>
10001bb4:	21000084 	addi	r4,r4,2
10001bb8:	003ebc06 	br	100016ac <__alt_data_end+0xf80016ac>
10001bbc:	8085883a 	add	r2,r16,r2
10001bc0:	10c00117 	ldw	r3,4(r2)
10001bc4:	81000317 	ldw	r4,12(r16)
10001bc8:	81400217 	ldw	r5,8(r16)
10001bcc:	18c00054 	ori	r3,r3,1
10001bd0:	10c00115 	stw	r3,4(r2)
10001bd4:	29000315 	stw	r4,12(r5)
10001bd8:	21400215 	stw	r5,8(r4)
10001bdc:	9009883a 	mov	r4,r18
10001be0:	0003f200 	call	10003f20 <__malloc_unlock>
10001be4:	80800204 	addi	r2,r16,8
10001be8:	003f2506 	br	10001880 <__alt_data_end+0xf8001880>
10001bec:	12001704 	addi	r8,r2,92
10001bf0:	11c016c4 	addi	r7,r2,91
10001bf4:	4209883a 	add	r4,r8,r8
10001bf8:	003e9606 	br	10001654 <__alt_data_end+0xf8001654>
10001bfc:	3804d1ba 	srli	r2,r7,6
10001c00:	11400e44 	addi	r5,r2,57
10001c04:	10c00e04 	addi	r3,r2,56
10001c08:	294b883a 	add	r5,r5,r5
10001c0c:	003fbc06 	br	10001b00 <__alt_data_end+0xf8001b00>
10001c10:	84ff5926 	beq	r16,r19,10001978 <__alt_data_end+0xf8001978>
10001c14:	00840034 	movhi	r2,4096
10001c18:	109a3d04 	addi	r2,r2,26868
10001c1c:	14000217 	ldw	r16,8(r2)
10001c20:	00bfff04 	movi	r2,-4
10001c24:	80c00117 	ldw	r3,4(r16)
10001c28:	1886703a 	and	r3,r3,r2
10001c2c:	003f9106 	br	10001a74 <__alt_data_end+0xf8001a74>
10001c30:	60800217 	ldw	r2,8(r12)
10001c34:	213fffc4 	addi	r4,r4,-1
10001c38:	1300651e 	bne	r2,r12,10001dd0 <_malloc_r+0x7f4>
10001c3c:	208000cc 	andi	r2,r4,3
10001c40:	633ffe04 	addi	r12,r12,-8
10001c44:	103ffa1e 	bne	r2,zero,10001c30 <__alt_data_end+0xf8001c30>
10001c48:	98800117 	ldw	r2,4(r19)
10001c4c:	0146303a 	nor	r3,zero,r5
10001c50:	1884703a 	and	r2,r3,r2
10001c54:	98800115 	stw	r2,4(r19)
10001c58:	294b883a 	add	r5,r5,r5
10001c5c:	117f2836 	bltu	r2,r5,10001900 <__alt_data_end+0xf8001900>
10001c60:	283f2726 	beq	r5,zero,10001900 <__alt_data_end+0xf8001900>
10001c64:	2886703a 	and	r3,r5,r2
10001c68:	5809883a 	mov	r4,r11
10001c6c:	183ec31e 	bne	r3,zero,1000177c <__alt_data_end+0xf800177c>
10001c70:	294b883a 	add	r5,r5,r5
10001c74:	2886703a 	and	r3,r5,r2
10001c78:	21000104 	addi	r4,r4,4
10001c7c:	183ffc26 	beq	r3,zero,10001c70 <__alt_data_end+0xf8001c70>
10001c80:	003ebe06 	br	1000177c <__alt_data_end+0xf800177c>
10001c84:	00c05504 	movi	r3,340
10001c88:	18801236 	bltu	r3,r2,10001cd4 <_malloc_r+0x6f8>
10001c8c:	8804d3fa 	srli	r2,r17,15
10001c90:	12001e04 	addi	r8,r2,120
10001c94:	11c01dc4 	addi	r7,r2,119
10001c98:	4209883a 	add	r4,r8,r8
10001c9c:	003e6d06 	br	10001654 <__alt_data_end+0xf8001654>
10001ca0:	00c40004 	movi	r3,4096
10001ca4:	003f4606 	br	100019c0 <__alt_data_end+0xf80019c0>
10001ca8:	00800044 	movi	r2,1
10001cac:	a0800115 	stw	r2,4(r20)
10001cb0:	003f7406 	br	10001a84 <__alt_data_end+0xf8001a84>
10001cb4:	1805d0ba 	srai	r2,r3,2
10001cb8:	01c00044 	movi	r7,1
10001cbc:	30c00117 	ldw	r3,4(r6)
10001cc0:	388e983a 	sll	r7,r7,r2
10001cc4:	2805883a 	mov	r2,r5
10001cc8:	38c6b03a 	or	r3,r7,r3
10001ccc:	30c00115 	stw	r3,4(r6)
10001cd0:	003f9b06 	br	10001b40 <__alt_data_end+0xf8001b40>
10001cd4:	00c15504 	movi	r3,1364
10001cd8:	18801a36 	bltu	r3,r2,10001d44 <_malloc_r+0x768>
10001cdc:	8804d4ba 	srli	r2,r17,18
10001ce0:	12001f44 	addi	r8,r2,125
10001ce4:	11c01f04 	addi	r7,r2,124
10001ce8:	4209883a 	add	r4,r8,r8
10001cec:	003e5906 	br	10001654 <__alt_data_end+0xf8001654>
10001cf0:	ad400404 	addi	r21,r21,16
10001cf4:	003f1706 	br	10001954 <__alt_data_end+0xf8001954>
10001cf8:	00c01504 	movi	r3,84
10001cfc:	18802336 	bltu	r3,r2,10001d8c <_malloc_r+0x7b0>
10001d00:	3804d33a 	srli	r2,r7,12
10001d04:	11401bc4 	addi	r5,r2,111
10001d08:	10c01b84 	addi	r3,r2,110
10001d0c:	294b883a 	add	r5,r5,r5
10001d10:	003f7b06 	br	10001b00 <__alt_data_end+0xf8001b00>
10001d14:	9c000217 	ldw	r16,8(r19)
10001d18:	00bfff04 	movi	r2,-4
10001d1c:	80c00117 	ldw	r3,4(r16)
10001d20:	1886703a 	and	r3,r3,r2
10001d24:	003f5306 	br	10001a74 <__alt_data_end+0xf8001a74>
10001d28:	3083ffcc 	andi	r2,r6,4095
10001d2c:	103f181e 	bne	r2,zero,10001990 <__alt_data_end+0xf8001990>
10001d30:	99000217 	ldw	r4,8(r19)
10001d34:	b545883a 	add	r2,r22,r21
10001d38:	10800054 	ori	r2,r2,1
10001d3c:	20800115 	stw	r2,4(r4)
10001d40:	003f3e06 	br	10001a3c <__alt_data_end+0xf8001a3c>
10001d44:	01003f84 	movi	r4,254
10001d48:	02001fc4 	movi	r8,127
10001d4c:	01c01f84 	movi	r7,126
10001d50:	003e4006 	br	10001654 <__alt_data_end+0xf8001654>
10001d54:	00840034 	movhi	r2,4096
10001d58:	109fc504 	addi	r2,r2,32532
10001d5c:	15000015 	stw	r20,0(r2)
10001d60:	003f1106 	br	100019a8 <__alt_data_end+0xf80019a8>
10001d64:	00800044 	movi	r2,1
10001d68:	002b883a 	mov	r21,zero
10001d6c:	003f1f06 	br	100019ec <__alt_data_end+0xf80019ec>
10001d70:	81400204 	addi	r5,r16,8
10001d74:	9009883a 	mov	r4,r18
10001d78:	00030640 	call	10003064 <_free_r>
10001d7c:	00840074 	movhi	r2,4097
10001d80:	10a73104 	addi	r2,r2,-25404
10001d84:	10c00017 	ldw	r3,0(r2)
10001d88:	003f2c06 	br	10001a3c <__alt_data_end+0xf8001a3c>
10001d8c:	00c05504 	movi	r3,340
10001d90:	18800536 	bltu	r3,r2,10001da8 <_malloc_r+0x7cc>
10001d94:	3804d3fa 	srli	r2,r7,15
10001d98:	11401e04 	addi	r5,r2,120
10001d9c:	10c01dc4 	addi	r3,r2,119
10001da0:	294b883a 	add	r5,r5,r5
10001da4:	003f5606 	br	10001b00 <__alt_data_end+0xf8001b00>
10001da8:	00c15504 	movi	r3,1364
10001dac:	18800536 	bltu	r3,r2,10001dc4 <_malloc_r+0x7e8>
10001db0:	3804d4ba 	srli	r2,r7,18
10001db4:	11401f44 	addi	r5,r2,125
10001db8:	10c01f04 	addi	r3,r2,124
10001dbc:	294b883a 	add	r5,r5,r5
10001dc0:	003f4f06 	br	10001b00 <__alt_data_end+0xf8001b00>
10001dc4:	01403f84 	movi	r5,254
10001dc8:	00c01f84 	movi	r3,126
10001dcc:	003f4c06 	br	10001b00 <__alt_data_end+0xf8001b00>
10001dd0:	98800117 	ldw	r2,4(r19)
10001dd4:	003fa006 	br	10001c58 <__alt_data_end+0xf8001c58>
10001dd8:	8808d0fa 	srli	r4,r17,3
10001ddc:	20800044 	addi	r2,r4,1
10001de0:	1085883a 	add	r2,r2,r2
10001de4:	003e9006 	br	10001828 <__alt_data_end+0xf8001828>

10001de8 <memchr>:
10001de8:	208000cc 	andi	r2,r4,3
10001dec:	280f883a 	mov	r7,r5
10001df0:	10003426 	beq	r2,zero,10001ec4 <memchr+0xdc>
10001df4:	30bfffc4 	addi	r2,r6,-1
10001df8:	30001a26 	beq	r6,zero,10001e64 <memchr+0x7c>
10001dfc:	20c00003 	ldbu	r3,0(r4)
10001e00:	29803fcc 	andi	r6,r5,255
10001e04:	30c0051e 	bne	r6,r3,10001e1c <memchr+0x34>
10001e08:	00001806 	br	10001e6c <memchr+0x84>
10001e0c:	10001526 	beq	r2,zero,10001e64 <memchr+0x7c>
10001e10:	20c00003 	ldbu	r3,0(r4)
10001e14:	10bfffc4 	addi	r2,r2,-1
10001e18:	30c01426 	beq	r6,r3,10001e6c <memchr+0x84>
10001e1c:	21000044 	addi	r4,r4,1
10001e20:	20c000cc 	andi	r3,r4,3
10001e24:	183ff91e 	bne	r3,zero,10001e0c <__alt_data_end+0xf8001e0c>
10001e28:	020000c4 	movi	r8,3
10001e2c:	40801136 	bltu	r8,r2,10001e74 <memchr+0x8c>
10001e30:	10000c26 	beq	r2,zero,10001e64 <memchr+0x7c>
10001e34:	20c00003 	ldbu	r3,0(r4)
10001e38:	29403fcc 	andi	r5,r5,255
10001e3c:	28c00b26 	beq	r5,r3,10001e6c <memchr+0x84>
10001e40:	20c00044 	addi	r3,r4,1
10001e44:	39803fcc 	andi	r6,r7,255
10001e48:	2089883a 	add	r4,r4,r2
10001e4c:	00000306 	br	10001e5c <memchr+0x74>
10001e50:	18c00044 	addi	r3,r3,1
10001e54:	197fffc3 	ldbu	r5,-1(r3)
10001e58:	31400526 	beq	r6,r5,10001e70 <memchr+0x88>
10001e5c:	1805883a 	mov	r2,r3
10001e60:	20fffb1e 	bne	r4,r3,10001e50 <__alt_data_end+0xf8001e50>
10001e64:	0005883a 	mov	r2,zero
10001e68:	f800283a 	ret
10001e6c:	2005883a 	mov	r2,r4
10001e70:	f800283a 	ret
10001e74:	28c03fcc 	andi	r3,r5,255
10001e78:	1812923a 	slli	r9,r3,8
10001e7c:	02ffbff4 	movhi	r11,65279
10001e80:	02a02074 	movhi	r10,32897
10001e84:	48d2b03a 	or	r9,r9,r3
10001e88:	4806943a 	slli	r3,r9,16
10001e8c:	5affbfc4 	addi	r11,r11,-257
10001e90:	52a02004 	addi	r10,r10,-32640
10001e94:	48d2b03a 	or	r9,r9,r3
10001e98:	20c00017 	ldw	r3,0(r4)
10001e9c:	48c6f03a 	xor	r3,r9,r3
10001ea0:	1acd883a 	add	r6,r3,r11
10001ea4:	00c6303a 	nor	r3,zero,r3
10001ea8:	30c6703a 	and	r3,r6,r3
10001eac:	1a86703a 	and	r3,r3,r10
10001eb0:	183fe01e 	bne	r3,zero,10001e34 <__alt_data_end+0xf8001e34>
10001eb4:	10bfff04 	addi	r2,r2,-4
10001eb8:	21000104 	addi	r4,r4,4
10001ebc:	40bff636 	bltu	r8,r2,10001e98 <__alt_data_end+0xf8001e98>
10001ec0:	003fdb06 	br	10001e30 <__alt_data_end+0xf8001e30>
10001ec4:	3005883a 	mov	r2,r6
10001ec8:	003fd706 	br	10001e28 <__alt_data_end+0xf8001e28>

10001ecc <memcpy>:
10001ecc:	defffd04 	addi	sp,sp,-12
10001ed0:	dfc00215 	stw	ra,8(sp)
10001ed4:	dc400115 	stw	r17,4(sp)
10001ed8:	dc000015 	stw	r16,0(sp)
10001edc:	00c003c4 	movi	r3,15
10001ee0:	2005883a 	mov	r2,r4
10001ee4:	1980452e 	bgeu	r3,r6,10001ffc <memcpy+0x130>
10001ee8:	2906b03a 	or	r3,r5,r4
10001eec:	18c000cc 	andi	r3,r3,3
10001ef0:	1800441e 	bne	r3,zero,10002004 <memcpy+0x138>
10001ef4:	347ffc04 	addi	r17,r6,-16
10001ef8:	8822d13a 	srli	r17,r17,4
10001efc:	28c00104 	addi	r3,r5,4
10001f00:	23400104 	addi	r13,r4,4
10001f04:	8820913a 	slli	r16,r17,4
10001f08:	2b000204 	addi	r12,r5,8
10001f0c:	22c00204 	addi	r11,r4,8
10001f10:	84000504 	addi	r16,r16,20
10001f14:	2a800304 	addi	r10,r5,12
10001f18:	22400304 	addi	r9,r4,12
10001f1c:	2c21883a 	add	r16,r5,r16
10001f20:	2811883a 	mov	r8,r5
10001f24:	200f883a 	mov	r7,r4
10001f28:	41000017 	ldw	r4,0(r8)
10001f2c:	1fc00017 	ldw	ra,0(r3)
10001f30:	63c00017 	ldw	r15,0(r12)
10001f34:	39000015 	stw	r4,0(r7)
10001f38:	53800017 	ldw	r14,0(r10)
10001f3c:	6fc00015 	stw	ra,0(r13)
10001f40:	5bc00015 	stw	r15,0(r11)
10001f44:	4b800015 	stw	r14,0(r9)
10001f48:	18c00404 	addi	r3,r3,16
10001f4c:	39c00404 	addi	r7,r7,16
10001f50:	42000404 	addi	r8,r8,16
10001f54:	6b400404 	addi	r13,r13,16
10001f58:	63000404 	addi	r12,r12,16
10001f5c:	5ac00404 	addi	r11,r11,16
10001f60:	52800404 	addi	r10,r10,16
10001f64:	4a400404 	addi	r9,r9,16
10001f68:	1c3fef1e 	bne	r3,r16,10001f28 <__alt_data_end+0xf8001f28>
10001f6c:	89c00044 	addi	r7,r17,1
10001f70:	380e913a 	slli	r7,r7,4
10001f74:	310003cc 	andi	r4,r6,15
10001f78:	02c000c4 	movi	r11,3
10001f7c:	11c7883a 	add	r3,r2,r7
10001f80:	29cb883a 	add	r5,r5,r7
10001f84:	5900212e 	bgeu	r11,r4,1000200c <memcpy+0x140>
10001f88:	1813883a 	mov	r9,r3
10001f8c:	2811883a 	mov	r8,r5
10001f90:	200f883a 	mov	r7,r4
10001f94:	42800017 	ldw	r10,0(r8)
10001f98:	4a400104 	addi	r9,r9,4
10001f9c:	39ffff04 	addi	r7,r7,-4
10001fa0:	4abfff15 	stw	r10,-4(r9)
10001fa4:	42000104 	addi	r8,r8,4
10001fa8:	59fffa36 	bltu	r11,r7,10001f94 <__alt_data_end+0xf8001f94>
10001fac:	213fff04 	addi	r4,r4,-4
10001fb0:	2008d0ba 	srli	r4,r4,2
10001fb4:	318000cc 	andi	r6,r6,3
10001fb8:	21000044 	addi	r4,r4,1
10001fbc:	2109883a 	add	r4,r4,r4
10001fc0:	2109883a 	add	r4,r4,r4
10001fc4:	1907883a 	add	r3,r3,r4
10001fc8:	290b883a 	add	r5,r5,r4
10001fcc:	30000626 	beq	r6,zero,10001fe8 <memcpy+0x11c>
10001fd0:	198d883a 	add	r6,r3,r6
10001fd4:	29c00003 	ldbu	r7,0(r5)
10001fd8:	18c00044 	addi	r3,r3,1
10001fdc:	29400044 	addi	r5,r5,1
10001fe0:	19ffffc5 	stb	r7,-1(r3)
10001fe4:	19bffb1e 	bne	r3,r6,10001fd4 <__alt_data_end+0xf8001fd4>
10001fe8:	dfc00217 	ldw	ra,8(sp)
10001fec:	dc400117 	ldw	r17,4(sp)
10001ff0:	dc000017 	ldw	r16,0(sp)
10001ff4:	dec00304 	addi	sp,sp,12
10001ff8:	f800283a 	ret
10001ffc:	2007883a 	mov	r3,r4
10002000:	003ff206 	br	10001fcc <__alt_data_end+0xf8001fcc>
10002004:	2007883a 	mov	r3,r4
10002008:	003ff106 	br	10001fd0 <__alt_data_end+0xf8001fd0>
1000200c:	200d883a 	mov	r6,r4
10002010:	003fee06 	br	10001fcc <__alt_data_end+0xf8001fcc>

10002014 <memmove>:
10002014:	2005883a 	mov	r2,r4
10002018:	29000b2e 	bgeu	r5,r4,10002048 <memmove+0x34>
1000201c:	298f883a 	add	r7,r5,r6
10002020:	21c0092e 	bgeu	r4,r7,10002048 <memmove+0x34>
10002024:	2187883a 	add	r3,r4,r6
10002028:	198bc83a 	sub	r5,r3,r6
1000202c:	30004826 	beq	r6,zero,10002150 <memmove+0x13c>
10002030:	39ffffc4 	addi	r7,r7,-1
10002034:	39000003 	ldbu	r4,0(r7)
10002038:	18ffffc4 	addi	r3,r3,-1
1000203c:	19000005 	stb	r4,0(r3)
10002040:	28fffb1e 	bne	r5,r3,10002030 <__alt_data_end+0xf8002030>
10002044:	f800283a 	ret
10002048:	00c003c4 	movi	r3,15
1000204c:	1980412e 	bgeu	r3,r6,10002154 <memmove+0x140>
10002050:	2886b03a 	or	r3,r5,r2
10002054:	18c000cc 	andi	r3,r3,3
10002058:	1800401e 	bne	r3,zero,1000215c <memmove+0x148>
1000205c:	33fffc04 	addi	r15,r6,-16
10002060:	781ed13a 	srli	r15,r15,4
10002064:	28c00104 	addi	r3,r5,4
10002068:	13400104 	addi	r13,r2,4
1000206c:	781c913a 	slli	r14,r15,4
10002070:	2b000204 	addi	r12,r5,8
10002074:	12c00204 	addi	r11,r2,8
10002078:	73800504 	addi	r14,r14,20
1000207c:	2a800304 	addi	r10,r5,12
10002080:	12400304 	addi	r9,r2,12
10002084:	2b9d883a 	add	r14,r5,r14
10002088:	2811883a 	mov	r8,r5
1000208c:	100f883a 	mov	r7,r2
10002090:	41000017 	ldw	r4,0(r8)
10002094:	39c00404 	addi	r7,r7,16
10002098:	18c00404 	addi	r3,r3,16
1000209c:	393ffc15 	stw	r4,-16(r7)
100020a0:	193ffc17 	ldw	r4,-16(r3)
100020a4:	6b400404 	addi	r13,r13,16
100020a8:	5ac00404 	addi	r11,r11,16
100020ac:	693ffc15 	stw	r4,-16(r13)
100020b0:	61000017 	ldw	r4,0(r12)
100020b4:	4a400404 	addi	r9,r9,16
100020b8:	42000404 	addi	r8,r8,16
100020bc:	593ffc15 	stw	r4,-16(r11)
100020c0:	51000017 	ldw	r4,0(r10)
100020c4:	63000404 	addi	r12,r12,16
100020c8:	52800404 	addi	r10,r10,16
100020cc:	493ffc15 	stw	r4,-16(r9)
100020d0:	1bbfef1e 	bne	r3,r14,10002090 <__alt_data_end+0xf8002090>
100020d4:	79000044 	addi	r4,r15,1
100020d8:	2008913a 	slli	r4,r4,4
100020dc:	328003cc 	andi	r10,r6,15
100020e0:	02c000c4 	movi	r11,3
100020e4:	1107883a 	add	r3,r2,r4
100020e8:	290b883a 	add	r5,r5,r4
100020ec:	5a801e2e 	bgeu	r11,r10,10002168 <memmove+0x154>
100020f0:	1813883a 	mov	r9,r3
100020f4:	2811883a 	mov	r8,r5
100020f8:	500f883a 	mov	r7,r10
100020fc:	41000017 	ldw	r4,0(r8)
10002100:	4a400104 	addi	r9,r9,4
10002104:	39ffff04 	addi	r7,r7,-4
10002108:	493fff15 	stw	r4,-4(r9)
1000210c:	42000104 	addi	r8,r8,4
10002110:	59fffa36 	bltu	r11,r7,100020fc <__alt_data_end+0xf80020fc>
10002114:	513fff04 	addi	r4,r10,-4
10002118:	2008d0ba 	srli	r4,r4,2
1000211c:	318000cc 	andi	r6,r6,3
10002120:	21000044 	addi	r4,r4,1
10002124:	2109883a 	add	r4,r4,r4
10002128:	2109883a 	add	r4,r4,r4
1000212c:	1907883a 	add	r3,r3,r4
10002130:	290b883a 	add	r5,r5,r4
10002134:	30000b26 	beq	r6,zero,10002164 <memmove+0x150>
10002138:	198d883a 	add	r6,r3,r6
1000213c:	29c00003 	ldbu	r7,0(r5)
10002140:	18c00044 	addi	r3,r3,1
10002144:	29400044 	addi	r5,r5,1
10002148:	19ffffc5 	stb	r7,-1(r3)
1000214c:	19bffb1e 	bne	r3,r6,1000213c <__alt_data_end+0xf800213c>
10002150:	f800283a 	ret
10002154:	1007883a 	mov	r3,r2
10002158:	003ff606 	br	10002134 <__alt_data_end+0xf8002134>
1000215c:	1007883a 	mov	r3,r2
10002160:	003ff506 	br	10002138 <__alt_data_end+0xf8002138>
10002164:	f800283a 	ret
10002168:	500d883a 	mov	r6,r10
1000216c:	003ff106 	br	10002134 <__alt_data_end+0xf8002134>

10002170 <memset>:
10002170:	20c000cc 	andi	r3,r4,3
10002174:	2005883a 	mov	r2,r4
10002178:	18004426 	beq	r3,zero,1000228c <memset+0x11c>
1000217c:	31ffffc4 	addi	r7,r6,-1
10002180:	30004026 	beq	r6,zero,10002284 <memset+0x114>
10002184:	2813883a 	mov	r9,r5
10002188:	200d883a 	mov	r6,r4
1000218c:	2007883a 	mov	r3,r4
10002190:	00000406 	br	100021a4 <memset+0x34>
10002194:	3a3fffc4 	addi	r8,r7,-1
10002198:	31800044 	addi	r6,r6,1
1000219c:	38003926 	beq	r7,zero,10002284 <memset+0x114>
100021a0:	400f883a 	mov	r7,r8
100021a4:	18c00044 	addi	r3,r3,1
100021a8:	32400005 	stb	r9,0(r6)
100021ac:	1a0000cc 	andi	r8,r3,3
100021b0:	403ff81e 	bne	r8,zero,10002194 <__alt_data_end+0xf8002194>
100021b4:	010000c4 	movi	r4,3
100021b8:	21c02d2e 	bgeu	r4,r7,10002270 <memset+0x100>
100021bc:	29003fcc 	andi	r4,r5,255
100021c0:	200c923a 	slli	r6,r4,8
100021c4:	3108b03a 	or	r4,r6,r4
100021c8:	200c943a 	slli	r6,r4,16
100021cc:	218cb03a 	or	r6,r4,r6
100021d0:	010003c4 	movi	r4,15
100021d4:	21c0182e 	bgeu	r4,r7,10002238 <memset+0xc8>
100021d8:	3b3ffc04 	addi	r12,r7,-16
100021dc:	6018d13a 	srli	r12,r12,4
100021e0:	1a000104 	addi	r8,r3,4
100021e4:	1ac00204 	addi	r11,r3,8
100021e8:	6008913a 	slli	r4,r12,4
100021ec:	1a800304 	addi	r10,r3,12
100021f0:	1813883a 	mov	r9,r3
100021f4:	21000504 	addi	r4,r4,20
100021f8:	1909883a 	add	r4,r3,r4
100021fc:	49800015 	stw	r6,0(r9)
10002200:	41800015 	stw	r6,0(r8)
10002204:	59800015 	stw	r6,0(r11)
10002208:	51800015 	stw	r6,0(r10)
1000220c:	42000404 	addi	r8,r8,16
10002210:	4a400404 	addi	r9,r9,16
10002214:	5ac00404 	addi	r11,r11,16
10002218:	52800404 	addi	r10,r10,16
1000221c:	413ff71e 	bne	r8,r4,100021fc <__alt_data_end+0xf80021fc>
10002220:	63000044 	addi	r12,r12,1
10002224:	6018913a 	slli	r12,r12,4
10002228:	39c003cc 	andi	r7,r7,15
1000222c:	010000c4 	movi	r4,3
10002230:	1b07883a 	add	r3,r3,r12
10002234:	21c00e2e 	bgeu	r4,r7,10002270 <memset+0x100>
10002238:	1813883a 	mov	r9,r3
1000223c:	3811883a 	mov	r8,r7
10002240:	010000c4 	movi	r4,3
10002244:	49800015 	stw	r6,0(r9)
10002248:	423fff04 	addi	r8,r8,-4
1000224c:	4a400104 	addi	r9,r9,4
10002250:	223ffc36 	bltu	r4,r8,10002244 <__alt_data_end+0xf8002244>
10002254:	393fff04 	addi	r4,r7,-4
10002258:	2008d0ba 	srli	r4,r4,2
1000225c:	39c000cc 	andi	r7,r7,3
10002260:	21000044 	addi	r4,r4,1
10002264:	2109883a 	add	r4,r4,r4
10002268:	2109883a 	add	r4,r4,r4
1000226c:	1907883a 	add	r3,r3,r4
10002270:	38000526 	beq	r7,zero,10002288 <memset+0x118>
10002274:	19cf883a 	add	r7,r3,r7
10002278:	19400005 	stb	r5,0(r3)
1000227c:	18c00044 	addi	r3,r3,1
10002280:	38fffd1e 	bne	r7,r3,10002278 <__alt_data_end+0xf8002278>
10002284:	f800283a 	ret
10002288:	f800283a 	ret
1000228c:	2007883a 	mov	r3,r4
10002290:	300f883a 	mov	r7,r6
10002294:	003fc706 	br	100021b4 <__alt_data_end+0xf80021b4>

10002298 <_realloc_r>:
10002298:	defff604 	addi	sp,sp,-40
1000229c:	dc800215 	stw	r18,8(sp)
100022a0:	dfc00915 	stw	ra,36(sp)
100022a4:	df000815 	stw	fp,32(sp)
100022a8:	ddc00715 	stw	r23,28(sp)
100022ac:	dd800615 	stw	r22,24(sp)
100022b0:	dd400515 	stw	r21,20(sp)
100022b4:	dd000415 	stw	r20,16(sp)
100022b8:	dcc00315 	stw	r19,12(sp)
100022bc:	dc400115 	stw	r17,4(sp)
100022c0:	dc000015 	stw	r16,0(sp)
100022c4:	3025883a 	mov	r18,r6
100022c8:	2800b726 	beq	r5,zero,100025a8 <_realloc_r+0x310>
100022cc:	282b883a 	mov	r21,r5
100022d0:	2029883a 	mov	r20,r4
100022d4:	0003efc0 	call	10003efc <__malloc_lock>
100022d8:	a8bfff17 	ldw	r2,-4(r21)
100022dc:	043fff04 	movi	r16,-4
100022e0:	90c002c4 	addi	r3,r18,11
100022e4:	01000584 	movi	r4,22
100022e8:	acfffe04 	addi	r19,r21,-8
100022ec:	1420703a 	and	r16,r2,r16
100022f0:	20c0332e 	bgeu	r4,r3,100023c0 <_realloc_r+0x128>
100022f4:	047ffe04 	movi	r17,-8
100022f8:	1c62703a 	and	r17,r3,r17
100022fc:	8807883a 	mov	r3,r17
10002300:	88005816 	blt	r17,zero,10002464 <_realloc_r+0x1cc>
10002304:	8c805736 	bltu	r17,r18,10002464 <_realloc_r+0x1cc>
10002308:	80c0300e 	bge	r16,r3,100023cc <_realloc_r+0x134>
1000230c:	07040034 	movhi	fp,4096
10002310:	e71a3d04 	addi	fp,fp,26868
10002314:	e1c00217 	ldw	r7,8(fp)
10002318:	9c09883a 	add	r4,r19,r16
1000231c:	22000117 	ldw	r8,4(r4)
10002320:	21c06326 	beq	r4,r7,100024b0 <_realloc_r+0x218>
10002324:	017fff84 	movi	r5,-2
10002328:	414a703a 	and	r5,r8,r5
1000232c:	214b883a 	add	r5,r4,r5
10002330:	29800117 	ldw	r6,4(r5)
10002334:	3180004c 	andi	r6,r6,1
10002338:	30003f26 	beq	r6,zero,10002438 <_realloc_r+0x1a0>
1000233c:	1080004c 	andi	r2,r2,1
10002340:	10008326 	beq	r2,zero,10002550 <_realloc_r+0x2b8>
10002344:	900b883a 	mov	r5,r18
10002348:	a009883a 	mov	r4,r20
1000234c:	00015dc0 	call	100015dc <_malloc_r>
10002350:	1025883a 	mov	r18,r2
10002354:	10011e26 	beq	r2,zero,100027d0 <_realloc_r+0x538>
10002358:	a93fff17 	ldw	r4,-4(r21)
1000235c:	10fffe04 	addi	r3,r2,-8
10002360:	00bfff84 	movi	r2,-2
10002364:	2084703a 	and	r2,r4,r2
10002368:	9885883a 	add	r2,r19,r2
1000236c:	1880ee26 	beq	r3,r2,10002728 <_realloc_r+0x490>
10002370:	81bfff04 	addi	r6,r16,-4
10002374:	00800904 	movi	r2,36
10002378:	1180b836 	bltu	r2,r6,1000265c <_realloc_r+0x3c4>
1000237c:	00c004c4 	movi	r3,19
10002380:	19809636 	bltu	r3,r6,100025dc <_realloc_r+0x344>
10002384:	9005883a 	mov	r2,r18
10002388:	a807883a 	mov	r3,r21
1000238c:	19000017 	ldw	r4,0(r3)
10002390:	11000015 	stw	r4,0(r2)
10002394:	19000117 	ldw	r4,4(r3)
10002398:	11000115 	stw	r4,4(r2)
1000239c:	18c00217 	ldw	r3,8(r3)
100023a0:	10c00215 	stw	r3,8(r2)
100023a4:	a80b883a 	mov	r5,r21
100023a8:	a009883a 	mov	r4,r20
100023ac:	00030640 	call	10003064 <_free_r>
100023b0:	a009883a 	mov	r4,r20
100023b4:	0003f200 	call	10003f20 <__malloc_unlock>
100023b8:	9005883a 	mov	r2,r18
100023bc:	00001206 	br	10002408 <_realloc_r+0x170>
100023c0:	00c00404 	movi	r3,16
100023c4:	1823883a 	mov	r17,r3
100023c8:	003fce06 	br	10002304 <__alt_data_end+0xf8002304>
100023cc:	a825883a 	mov	r18,r21
100023d0:	8445c83a 	sub	r2,r16,r17
100023d4:	00c003c4 	movi	r3,15
100023d8:	18802636 	bltu	r3,r2,10002474 <_realloc_r+0x1dc>
100023dc:	99800117 	ldw	r6,4(r19)
100023e0:	9c07883a 	add	r3,r19,r16
100023e4:	3180004c 	andi	r6,r6,1
100023e8:	3420b03a 	or	r16,r6,r16
100023ec:	9c000115 	stw	r16,4(r19)
100023f0:	18800117 	ldw	r2,4(r3)
100023f4:	10800054 	ori	r2,r2,1
100023f8:	18800115 	stw	r2,4(r3)
100023fc:	a009883a 	mov	r4,r20
10002400:	0003f200 	call	10003f20 <__malloc_unlock>
10002404:	9005883a 	mov	r2,r18
10002408:	dfc00917 	ldw	ra,36(sp)
1000240c:	df000817 	ldw	fp,32(sp)
10002410:	ddc00717 	ldw	r23,28(sp)
10002414:	dd800617 	ldw	r22,24(sp)
10002418:	dd400517 	ldw	r21,20(sp)
1000241c:	dd000417 	ldw	r20,16(sp)
10002420:	dcc00317 	ldw	r19,12(sp)
10002424:	dc800217 	ldw	r18,8(sp)
10002428:	dc400117 	ldw	r17,4(sp)
1000242c:	dc000017 	ldw	r16,0(sp)
10002430:	dec00a04 	addi	sp,sp,40
10002434:	f800283a 	ret
10002438:	017fff04 	movi	r5,-4
1000243c:	414a703a 	and	r5,r8,r5
10002440:	814d883a 	add	r6,r16,r5
10002444:	30c01f16 	blt	r6,r3,100024c4 <_realloc_r+0x22c>
10002448:	20800317 	ldw	r2,12(r4)
1000244c:	20c00217 	ldw	r3,8(r4)
10002450:	a825883a 	mov	r18,r21
10002454:	3021883a 	mov	r16,r6
10002458:	18800315 	stw	r2,12(r3)
1000245c:	10c00215 	stw	r3,8(r2)
10002460:	003fdb06 	br	100023d0 <__alt_data_end+0xf80023d0>
10002464:	00800304 	movi	r2,12
10002468:	a0800015 	stw	r2,0(r20)
1000246c:	0005883a 	mov	r2,zero
10002470:	003fe506 	br	10002408 <__alt_data_end+0xf8002408>
10002474:	98c00117 	ldw	r3,4(r19)
10002478:	9c4b883a 	add	r5,r19,r17
1000247c:	11000054 	ori	r4,r2,1
10002480:	18c0004c 	andi	r3,r3,1
10002484:	1c62b03a 	or	r17,r3,r17
10002488:	9c400115 	stw	r17,4(r19)
1000248c:	29000115 	stw	r4,4(r5)
10002490:	2885883a 	add	r2,r5,r2
10002494:	10c00117 	ldw	r3,4(r2)
10002498:	29400204 	addi	r5,r5,8
1000249c:	a009883a 	mov	r4,r20
100024a0:	18c00054 	ori	r3,r3,1
100024a4:	10c00115 	stw	r3,4(r2)
100024a8:	00030640 	call	10003064 <_free_r>
100024ac:	003fd306 	br	100023fc <__alt_data_end+0xf80023fc>
100024b0:	017fff04 	movi	r5,-4
100024b4:	414a703a 	and	r5,r8,r5
100024b8:	89800404 	addi	r6,r17,16
100024bc:	8151883a 	add	r8,r16,r5
100024c0:	4180590e 	bge	r8,r6,10002628 <_realloc_r+0x390>
100024c4:	1080004c 	andi	r2,r2,1
100024c8:	103f9e1e 	bne	r2,zero,10002344 <__alt_data_end+0xf8002344>
100024cc:	adbffe17 	ldw	r22,-8(r21)
100024d0:	00bfff04 	movi	r2,-4
100024d4:	9dadc83a 	sub	r22,r19,r22
100024d8:	b1800117 	ldw	r6,4(r22)
100024dc:	3084703a 	and	r2,r6,r2
100024e0:	20002026 	beq	r4,zero,10002564 <_realloc_r+0x2cc>
100024e4:	80af883a 	add	r23,r16,r2
100024e8:	b96f883a 	add	r23,r23,r5
100024ec:	21c05f26 	beq	r4,r7,1000266c <_realloc_r+0x3d4>
100024f0:	b8c01c16 	blt	r23,r3,10002564 <_realloc_r+0x2cc>
100024f4:	20800317 	ldw	r2,12(r4)
100024f8:	20c00217 	ldw	r3,8(r4)
100024fc:	81bfff04 	addi	r6,r16,-4
10002500:	01000904 	movi	r4,36
10002504:	18800315 	stw	r2,12(r3)
10002508:	10c00215 	stw	r3,8(r2)
1000250c:	b0c00217 	ldw	r3,8(r22)
10002510:	b0800317 	ldw	r2,12(r22)
10002514:	b4800204 	addi	r18,r22,8
10002518:	18800315 	stw	r2,12(r3)
1000251c:	10c00215 	stw	r3,8(r2)
10002520:	21801b36 	bltu	r4,r6,10002590 <_realloc_r+0x2f8>
10002524:	008004c4 	movi	r2,19
10002528:	1180352e 	bgeu	r2,r6,10002600 <_realloc_r+0x368>
1000252c:	a8800017 	ldw	r2,0(r21)
10002530:	b0800215 	stw	r2,8(r22)
10002534:	a8800117 	ldw	r2,4(r21)
10002538:	b0800315 	stw	r2,12(r22)
1000253c:	008006c4 	movi	r2,27
10002540:	11807f36 	bltu	r2,r6,10002740 <_realloc_r+0x4a8>
10002544:	b0800404 	addi	r2,r22,16
10002548:	ad400204 	addi	r21,r21,8
1000254c:	00002d06 	br	10002604 <_realloc_r+0x36c>
10002550:	adbffe17 	ldw	r22,-8(r21)
10002554:	00bfff04 	movi	r2,-4
10002558:	9dadc83a 	sub	r22,r19,r22
1000255c:	b1000117 	ldw	r4,4(r22)
10002560:	2084703a 	and	r2,r4,r2
10002564:	b03f7726 	beq	r22,zero,10002344 <__alt_data_end+0xf8002344>
10002568:	80af883a 	add	r23,r16,r2
1000256c:	b8ff7516 	blt	r23,r3,10002344 <__alt_data_end+0xf8002344>
10002570:	b0800317 	ldw	r2,12(r22)
10002574:	b0c00217 	ldw	r3,8(r22)
10002578:	81bfff04 	addi	r6,r16,-4
1000257c:	01000904 	movi	r4,36
10002580:	18800315 	stw	r2,12(r3)
10002584:	10c00215 	stw	r3,8(r2)
10002588:	b4800204 	addi	r18,r22,8
1000258c:	21bfe52e 	bgeu	r4,r6,10002524 <__alt_data_end+0xf8002524>
10002590:	a80b883a 	mov	r5,r21
10002594:	9009883a 	mov	r4,r18
10002598:	00020140 	call	10002014 <memmove>
1000259c:	b821883a 	mov	r16,r23
100025a0:	b027883a 	mov	r19,r22
100025a4:	003f8a06 	br	100023d0 <__alt_data_end+0xf80023d0>
100025a8:	300b883a 	mov	r5,r6
100025ac:	dfc00917 	ldw	ra,36(sp)
100025b0:	df000817 	ldw	fp,32(sp)
100025b4:	ddc00717 	ldw	r23,28(sp)
100025b8:	dd800617 	ldw	r22,24(sp)
100025bc:	dd400517 	ldw	r21,20(sp)
100025c0:	dd000417 	ldw	r20,16(sp)
100025c4:	dcc00317 	ldw	r19,12(sp)
100025c8:	dc800217 	ldw	r18,8(sp)
100025cc:	dc400117 	ldw	r17,4(sp)
100025d0:	dc000017 	ldw	r16,0(sp)
100025d4:	dec00a04 	addi	sp,sp,40
100025d8:	00015dc1 	jmpi	100015dc <_malloc_r>
100025dc:	a8c00017 	ldw	r3,0(r21)
100025e0:	90c00015 	stw	r3,0(r18)
100025e4:	a8c00117 	ldw	r3,4(r21)
100025e8:	90c00115 	stw	r3,4(r18)
100025ec:	00c006c4 	movi	r3,27
100025f0:	19804536 	bltu	r3,r6,10002708 <_realloc_r+0x470>
100025f4:	90800204 	addi	r2,r18,8
100025f8:	a8c00204 	addi	r3,r21,8
100025fc:	003f6306 	br	1000238c <__alt_data_end+0xf800238c>
10002600:	9005883a 	mov	r2,r18
10002604:	a8c00017 	ldw	r3,0(r21)
10002608:	b821883a 	mov	r16,r23
1000260c:	b027883a 	mov	r19,r22
10002610:	10c00015 	stw	r3,0(r2)
10002614:	a8c00117 	ldw	r3,4(r21)
10002618:	10c00115 	stw	r3,4(r2)
1000261c:	a8c00217 	ldw	r3,8(r21)
10002620:	10c00215 	stw	r3,8(r2)
10002624:	003f6a06 	br	100023d0 <__alt_data_end+0xf80023d0>
10002628:	9c67883a 	add	r19,r19,r17
1000262c:	4445c83a 	sub	r2,r8,r17
10002630:	e4c00215 	stw	r19,8(fp)
10002634:	10800054 	ori	r2,r2,1
10002638:	98800115 	stw	r2,4(r19)
1000263c:	a8bfff17 	ldw	r2,-4(r21)
10002640:	a009883a 	mov	r4,r20
10002644:	1080004c 	andi	r2,r2,1
10002648:	1462b03a 	or	r17,r2,r17
1000264c:	ac7fff15 	stw	r17,-4(r21)
10002650:	0003f200 	call	10003f20 <__malloc_unlock>
10002654:	a805883a 	mov	r2,r21
10002658:	003f6b06 	br	10002408 <__alt_data_end+0xf8002408>
1000265c:	a80b883a 	mov	r5,r21
10002660:	9009883a 	mov	r4,r18
10002664:	00020140 	call	10002014 <memmove>
10002668:	003f4e06 	br	100023a4 <__alt_data_end+0xf80023a4>
1000266c:	89000404 	addi	r4,r17,16
10002670:	b93fbc16 	blt	r23,r4,10002564 <__alt_data_end+0xf8002564>
10002674:	b0800317 	ldw	r2,12(r22)
10002678:	b0c00217 	ldw	r3,8(r22)
1000267c:	81bfff04 	addi	r6,r16,-4
10002680:	01000904 	movi	r4,36
10002684:	18800315 	stw	r2,12(r3)
10002688:	10c00215 	stw	r3,8(r2)
1000268c:	b4800204 	addi	r18,r22,8
10002690:	21804336 	bltu	r4,r6,100027a0 <_realloc_r+0x508>
10002694:	008004c4 	movi	r2,19
10002698:	11803f2e 	bgeu	r2,r6,10002798 <_realloc_r+0x500>
1000269c:	a8800017 	ldw	r2,0(r21)
100026a0:	b0800215 	stw	r2,8(r22)
100026a4:	a8800117 	ldw	r2,4(r21)
100026a8:	b0800315 	stw	r2,12(r22)
100026ac:	008006c4 	movi	r2,27
100026b0:	11803f36 	bltu	r2,r6,100027b0 <_realloc_r+0x518>
100026b4:	b0800404 	addi	r2,r22,16
100026b8:	ad400204 	addi	r21,r21,8
100026bc:	a8c00017 	ldw	r3,0(r21)
100026c0:	10c00015 	stw	r3,0(r2)
100026c4:	a8c00117 	ldw	r3,4(r21)
100026c8:	10c00115 	stw	r3,4(r2)
100026cc:	a8c00217 	ldw	r3,8(r21)
100026d0:	10c00215 	stw	r3,8(r2)
100026d4:	b447883a 	add	r3,r22,r17
100026d8:	bc45c83a 	sub	r2,r23,r17
100026dc:	e0c00215 	stw	r3,8(fp)
100026e0:	10800054 	ori	r2,r2,1
100026e4:	18800115 	stw	r2,4(r3)
100026e8:	b0800117 	ldw	r2,4(r22)
100026ec:	a009883a 	mov	r4,r20
100026f0:	1080004c 	andi	r2,r2,1
100026f4:	1462b03a 	or	r17,r2,r17
100026f8:	b4400115 	stw	r17,4(r22)
100026fc:	0003f200 	call	10003f20 <__malloc_unlock>
10002700:	9005883a 	mov	r2,r18
10002704:	003f4006 	br	10002408 <__alt_data_end+0xf8002408>
10002708:	a8c00217 	ldw	r3,8(r21)
1000270c:	90c00215 	stw	r3,8(r18)
10002710:	a8c00317 	ldw	r3,12(r21)
10002714:	90c00315 	stw	r3,12(r18)
10002718:	30801126 	beq	r6,r2,10002760 <_realloc_r+0x4c8>
1000271c:	90800404 	addi	r2,r18,16
10002720:	a8c00404 	addi	r3,r21,16
10002724:	003f1906 	br	1000238c <__alt_data_end+0xf800238c>
10002728:	90ffff17 	ldw	r3,-4(r18)
1000272c:	00bfff04 	movi	r2,-4
10002730:	a825883a 	mov	r18,r21
10002734:	1884703a 	and	r2,r3,r2
10002738:	80a1883a 	add	r16,r16,r2
1000273c:	003f2406 	br	100023d0 <__alt_data_end+0xf80023d0>
10002740:	a8800217 	ldw	r2,8(r21)
10002744:	b0800415 	stw	r2,16(r22)
10002748:	a8800317 	ldw	r2,12(r21)
1000274c:	b0800515 	stw	r2,20(r22)
10002750:	31000a26 	beq	r6,r4,1000277c <_realloc_r+0x4e4>
10002754:	b0800604 	addi	r2,r22,24
10002758:	ad400404 	addi	r21,r21,16
1000275c:	003fa906 	br	10002604 <__alt_data_end+0xf8002604>
10002760:	a9000417 	ldw	r4,16(r21)
10002764:	90800604 	addi	r2,r18,24
10002768:	a8c00604 	addi	r3,r21,24
1000276c:	91000415 	stw	r4,16(r18)
10002770:	a9000517 	ldw	r4,20(r21)
10002774:	91000515 	stw	r4,20(r18)
10002778:	003f0406 	br	1000238c <__alt_data_end+0xf800238c>
1000277c:	a8c00417 	ldw	r3,16(r21)
10002780:	ad400604 	addi	r21,r21,24
10002784:	b0800804 	addi	r2,r22,32
10002788:	b0c00615 	stw	r3,24(r22)
1000278c:	a8ffff17 	ldw	r3,-4(r21)
10002790:	b0c00715 	stw	r3,28(r22)
10002794:	003f9b06 	br	10002604 <__alt_data_end+0xf8002604>
10002798:	9005883a 	mov	r2,r18
1000279c:	003fc706 	br	100026bc <__alt_data_end+0xf80026bc>
100027a0:	a80b883a 	mov	r5,r21
100027a4:	9009883a 	mov	r4,r18
100027a8:	00020140 	call	10002014 <memmove>
100027ac:	003fc906 	br	100026d4 <__alt_data_end+0xf80026d4>
100027b0:	a8800217 	ldw	r2,8(r21)
100027b4:	b0800415 	stw	r2,16(r22)
100027b8:	a8800317 	ldw	r2,12(r21)
100027bc:	b0800515 	stw	r2,20(r22)
100027c0:	31000726 	beq	r6,r4,100027e0 <_realloc_r+0x548>
100027c4:	b0800604 	addi	r2,r22,24
100027c8:	ad400404 	addi	r21,r21,16
100027cc:	003fbb06 	br	100026bc <__alt_data_end+0xf80026bc>
100027d0:	a009883a 	mov	r4,r20
100027d4:	0003f200 	call	10003f20 <__malloc_unlock>
100027d8:	0005883a 	mov	r2,zero
100027dc:	003f0a06 	br	10002408 <__alt_data_end+0xf8002408>
100027e0:	a8c00417 	ldw	r3,16(r21)
100027e4:	ad400604 	addi	r21,r21,24
100027e8:	b0800804 	addi	r2,r22,32
100027ec:	b0c00615 	stw	r3,24(r22)
100027f0:	a8ffff17 	ldw	r3,-4(r21)
100027f4:	b0c00715 	stw	r3,28(r22)
100027f8:	003fb006 	br	100026bc <__alt_data_end+0xf80026bc>

100027fc <_sbrk_r>:
100027fc:	defffd04 	addi	sp,sp,-12
10002800:	dc000015 	stw	r16,0(sp)
10002804:	04040074 	movhi	r16,4097
10002808:	dc400115 	stw	r17,4(sp)
1000280c:	84272904 	addi	r16,r16,-25436
10002810:	2023883a 	mov	r17,r4
10002814:	2809883a 	mov	r4,r5
10002818:	dfc00215 	stw	ra,8(sp)
1000281c:	80000015 	stw	zero,0(r16)
10002820:	00041080 	call	10004108 <sbrk>
10002824:	00ffffc4 	movi	r3,-1
10002828:	10c00526 	beq	r2,r3,10002840 <_sbrk_r+0x44>
1000282c:	dfc00217 	ldw	ra,8(sp)
10002830:	dc400117 	ldw	r17,4(sp)
10002834:	dc000017 	ldw	r16,0(sp)
10002838:	dec00304 	addi	sp,sp,12
1000283c:	f800283a 	ret
10002840:	80c00017 	ldw	r3,0(r16)
10002844:	183ff926 	beq	r3,zero,1000282c <__alt_data_end+0xf800282c>
10002848:	88c00015 	stw	r3,0(r17)
1000284c:	003ff706 	br	1000282c <__alt_data_end+0xf800282c>

10002850 <__sread>:
10002850:	defffe04 	addi	sp,sp,-8
10002854:	dc000015 	stw	r16,0(sp)
10002858:	2821883a 	mov	r16,r5
1000285c:	2940038f 	ldh	r5,14(r5)
10002860:	dfc00115 	stw	ra,4(sp)
10002864:	00035900 	call	10003590 <_read_r>
10002868:	10000716 	blt	r2,zero,10002888 <__sread+0x38>
1000286c:	80c01417 	ldw	r3,80(r16)
10002870:	1887883a 	add	r3,r3,r2
10002874:	80c01415 	stw	r3,80(r16)
10002878:	dfc00117 	ldw	ra,4(sp)
1000287c:	dc000017 	ldw	r16,0(sp)
10002880:	dec00204 	addi	sp,sp,8
10002884:	f800283a 	ret
10002888:	80c0030b 	ldhu	r3,12(r16)
1000288c:	18fbffcc 	andi	r3,r3,61439
10002890:	80c0030d 	sth	r3,12(r16)
10002894:	dfc00117 	ldw	ra,4(sp)
10002898:	dc000017 	ldw	r16,0(sp)
1000289c:	dec00204 	addi	sp,sp,8
100028a0:	f800283a 	ret

100028a4 <__seofread>:
100028a4:	0005883a 	mov	r2,zero
100028a8:	f800283a 	ret

100028ac <__swrite>:
100028ac:	2880030b 	ldhu	r2,12(r5)
100028b0:	defffb04 	addi	sp,sp,-20
100028b4:	dcc00315 	stw	r19,12(sp)
100028b8:	dc800215 	stw	r18,8(sp)
100028bc:	dc400115 	stw	r17,4(sp)
100028c0:	dc000015 	stw	r16,0(sp)
100028c4:	dfc00415 	stw	ra,16(sp)
100028c8:	10c0400c 	andi	r3,r2,256
100028cc:	2821883a 	mov	r16,r5
100028d0:	2023883a 	mov	r17,r4
100028d4:	3025883a 	mov	r18,r6
100028d8:	3827883a 	mov	r19,r7
100028dc:	18000526 	beq	r3,zero,100028f4 <__swrite+0x48>
100028e0:	2940038f 	ldh	r5,14(r5)
100028e4:	01c00084 	movi	r7,2
100028e8:	000d883a 	mov	r6,zero
100028ec:	00033740 	call	10003374 <_lseek_r>
100028f0:	8080030b 	ldhu	r2,12(r16)
100028f4:	8140038f 	ldh	r5,14(r16)
100028f8:	10bbffcc 	andi	r2,r2,61439
100028fc:	980f883a 	mov	r7,r19
10002900:	900d883a 	mov	r6,r18
10002904:	8809883a 	mov	r4,r17
10002908:	8080030d 	sth	r2,12(r16)
1000290c:	dfc00417 	ldw	ra,16(sp)
10002910:	dcc00317 	ldw	r19,12(sp)
10002914:	dc800217 	ldw	r18,8(sp)
10002918:	dc400117 	ldw	r17,4(sp)
1000291c:	dc000017 	ldw	r16,0(sp)
10002920:	dec00504 	addi	sp,sp,20
10002924:	000298c1 	jmpi	1000298c <_write_r>

10002928 <__sseek>:
10002928:	defffe04 	addi	sp,sp,-8
1000292c:	dc000015 	stw	r16,0(sp)
10002930:	2821883a 	mov	r16,r5
10002934:	2940038f 	ldh	r5,14(r5)
10002938:	dfc00115 	stw	ra,4(sp)
1000293c:	00033740 	call	10003374 <_lseek_r>
10002940:	00ffffc4 	movi	r3,-1
10002944:	10c00826 	beq	r2,r3,10002968 <__sseek+0x40>
10002948:	80c0030b 	ldhu	r3,12(r16)
1000294c:	80801415 	stw	r2,80(r16)
10002950:	18c40014 	ori	r3,r3,4096
10002954:	80c0030d 	sth	r3,12(r16)
10002958:	dfc00117 	ldw	ra,4(sp)
1000295c:	dc000017 	ldw	r16,0(sp)
10002960:	dec00204 	addi	sp,sp,8
10002964:	f800283a 	ret
10002968:	80c0030b 	ldhu	r3,12(r16)
1000296c:	18fbffcc 	andi	r3,r3,61439
10002970:	80c0030d 	sth	r3,12(r16)
10002974:	dfc00117 	ldw	ra,4(sp)
10002978:	dc000017 	ldw	r16,0(sp)
1000297c:	dec00204 	addi	sp,sp,8
10002980:	f800283a 	ret

10002984 <__sclose>:
10002984:	2940038f 	ldh	r5,14(r5)
10002988:	0002b401 	jmpi	10002b40 <_close_r>

1000298c <_write_r>:
1000298c:	defffd04 	addi	sp,sp,-12
10002990:	2805883a 	mov	r2,r5
10002994:	dc000015 	stw	r16,0(sp)
10002998:	04040074 	movhi	r16,4097
1000299c:	dc400115 	stw	r17,4(sp)
100029a0:	300b883a 	mov	r5,r6
100029a4:	84272904 	addi	r16,r16,-25436
100029a8:	2023883a 	mov	r17,r4
100029ac:	380d883a 	mov	r6,r7
100029b0:	1009883a 	mov	r4,r2
100029b4:	dfc00215 	stw	ra,8(sp)
100029b8:	80000015 	stw	zero,0(r16)
100029bc:	00042240 	call	10004224 <write>
100029c0:	00ffffc4 	movi	r3,-1
100029c4:	10c00526 	beq	r2,r3,100029dc <_write_r+0x50>
100029c8:	dfc00217 	ldw	ra,8(sp)
100029cc:	dc400117 	ldw	r17,4(sp)
100029d0:	dc000017 	ldw	r16,0(sp)
100029d4:	dec00304 	addi	sp,sp,12
100029d8:	f800283a 	ret
100029dc:	80c00017 	ldw	r3,0(r16)
100029e0:	183ff926 	beq	r3,zero,100029c8 <__alt_data_end+0xf80029c8>
100029e4:	88c00015 	stw	r3,0(r17)
100029e8:	003ff706 	br	100029c8 <__alt_data_end+0xf80029c8>

100029ec <__swsetup_r>:
100029ec:	00840034 	movhi	r2,4096
100029f0:	defffd04 	addi	sp,sp,-12
100029f4:	109fc404 	addi	r2,r2,32528
100029f8:	dc400115 	stw	r17,4(sp)
100029fc:	2023883a 	mov	r17,r4
10002a00:	11000017 	ldw	r4,0(r2)
10002a04:	dc000015 	stw	r16,0(sp)
10002a08:	dfc00215 	stw	ra,8(sp)
10002a0c:	2821883a 	mov	r16,r5
10002a10:	20000226 	beq	r4,zero,10002a1c <__swsetup_r+0x30>
10002a14:	20800e17 	ldw	r2,56(r4)
10002a18:	10003126 	beq	r2,zero,10002ae0 <__swsetup_r+0xf4>
10002a1c:	8080030b 	ldhu	r2,12(r16)
10002a20:	10c0020c 	andi	r3,r2,8
10002a24:	1009883a 	mov	r4,r2
10002a28:	18000f26 	beq	r3,zero,10002a68 <__swsetup_r+0x7c>
10002a2c:	80c00417 	ldw	r3,16(r16)
10002a30:	18001526 	beq	r3,zero,10002a88 <__swsetup_r+0x9c>
10002a34:	1100004c 	andi	r4,r2,1
10002a38:	20001c1e 	bne	r4,zero,10002aac <__swsetup_r+0xc0>
10002a3c:	1080008c 	andi	r2,r2,2
10002a40:	1000291e 	bne	r2,zero,10002ae8 <__swsetup_r+0xfc>
10002a44:	80800517 	ldw	r2,20(r16)
10002a48:	80800215 	stw	r2,8(r16)
10002a4c:	18001c26 	beq	r3,zero,10002ac0 <__swsetup_r+0xd4>
10002a50:	0005883a 	mov	r2,zero
10002a54:	dfc00217 	ldw	ra,8(sp)
10002a58:	dc400117 	ldw	r17,4(sp)
10002a5c:	dc000017 	ldw	r16,0(sp)
10002a60:	dec00304 	addi	sp,sp,12
10002a64:	f800283a 	ret
10002a68:	2080040c 	andi	r2,r4,16
10002a6c:	10002e26 	beq	r2,zero,10002b28 <__swsetup_r+0x13c>
10002a70:	2080010c 	andi	r2,r4,4
10002a74:	10001e1e 	bne	r2,zero,10002af0 <__swsetup_r+0x104>
10002a78:	80c00417 	ldw	r3,16(r16)
10002a7c:	20800214 	ori	r2,r4,8
10002a80:	8080030d 	sth	r2,12(r16)
10002a84:	183feb1e 	bne	r3,zero,10002a34 <__alt_data_end+0xf8002a34>
10002a88:	1100a00c 	andi	r4,r2,640
10002a8c:	01408004 	movi	r5,512
10002a90:	217fe826 	beq	r4,r5,10002a34 <__alt_data_end+0xf8002a34>
10002a94:	800b883a 	mov	r5,r16
10002a98:	8809883a 	mov	r4,r17
10002a9c:	00033d40 	call	100033d4 <__smakebuf_r>
10002aa0:	8080030b 	ldhu	r2,12(r16)
10002aa4:	80c00417 	ldw	r3,16(r16)
10002aa8:	003fe206 	br	10002a34 <__alt_data_end+0xf8002a34>
10002aac:	80800517 	ldw	r2,20(r16)
10002ab0:	80000215 	stw	zero,8(r16)
10002ab4:	0085c83a 	sub	r2,zero,r2
10002ab8:	80800615 	stw	r2,24(r16)
10002abc:	183fe41e 	bne	r3,zero,10002a50 <__alt_data_end+0xf8002a50>
10002ac0:	80c0030b 	ldhu	r3,12(r16)
10002ac4:	0005883a 	mov	r2,zero
10002ac8:	1900200c 	andi	r4,r3,128
10002acc:	203fe126 	beq	r4,zero,10002a54 <__alt_data_end+0xf8002a54>
10002ad0:	18c01014 	ori	r3,r3,64
10002ad4:	80c0030d 	sth	r3,12(r16)
10002ad8:	00bfffc4 	movi	r2,-1
10002adc:	003fdd06 	br	10002a54 <__alt_data_end+0xf8002a54>
10002ae0:	0000f3c0 	call	10000f3c <__sinit>
10002ae4:	003fcd06 	br	10002a1c <__alt_data_end+0xf8002a1c>
10002ae8:	0005883a 	mov	r2,zero
10002aec:	003fd606 	br	10002a48 <__alt_data_end+0xf8002a48>
10002af0:	81400c17 	ldw	r5,48(r16)
10002af4:	28000626 	beq	r5,zero,10002b10 <__swsetup_r+0x124>
10002af8:	80801004 	addi	r2,r16,64
10002afc:	28800326 	beq	r5,r2,10002b0c <__swsetup_r+0x120>
10002b00:	8809883a 	mov	r4,r17
10002b04:	00030640 	call	10003064 <_free_r>
10002b08:	8100030b 	ldhu	r4,12(r16)
10002b0c:	80000c15 	stw	zero,48(r16)
10002b10:	80c00417 	ldw	r3,16(r16)
10002b14:	00bff6c4 	movi	r2,-37
10002b18:	1108703a 	and	r4,r2,r4
10002b1c:	80000115 	stw	zero,4(r16)
10002b20:	80c00015 	stw	r3,0(r16)
10002b24:	003fd506 	br	10002a7c <__alt_data_end+0xf8002a7c>
10002b28:	00800244 	movi	r2,9
10002b2c:	88800015 	stw	r2,0(r17)
10002b30:	20801014 	ori	r2,r4,64
10002b34:	8080030d 	sth	r2,12(r16)
10002b38:	00bfffc4 	movi	r2,-1
10002b3c:	003fc506 	br	10002a54 <__alt_data_end+0xf8002a54>

10002b40 <_close_r>:
10002b40:	defffd04 	addi	sp,sp,-12
10002b44:	dc000015 	stw	r16,0(sp)
10002b48:	04040074 	movhi	r16,4097
10002b4c:	dc400115 	stw	r17,4(sp)
10002b50:	84272904 	addi	r16,r16,-25436
10002b54:	2023883a 	mov	r17,r4
10002b58:	2809883a 	mov	r4,r5
10002b5c:	dfc00215 	stw	ra,8(sp)
10002b60:	80000015 	stw	zero,0(r16)
10002b64:	000399c0 	call	1000399c <close>
10002b68:	00ffffc4 	movi	r3,-1
10002b6c:	10c00526 	beq	r2,r3,10002b84 <_close_r+0x44>
10002b70:	dfc00217 	ldw	ra,8(sp)
10002b74:	dc400117 	ldw	r17,4(sp)
10002b78:	dc000017 	ldw	r16,0(sp)
10002b7c:	dec00304 	addi	sp,sp,12
10002b80:	f800283a 	ret
10002b84:	80c00017 	ldw	r3,0(r16)
10002b88:	183ff926 	beq	r3,zero,10002b70 <__alt_data_end+0xf8002b70>
10002b8c:	88c00015 	stw	r3,0(r17)
10002b90:	003ff706 	br	10002b70 <__alt_data_end+0xf8002b70>

10002b94 <_fclose_r>:
10002b94:	28003926 	beq	r5,zero,10002c7c <_fclose_r+0xe8>
10002b98:	defffc04 	addi	sp,sp,-16
10002b9c:	dc400115 	stw	r17,4(sp)
10002ba0:	dc000015 	stw	r16,0(sp)
10002ba4:	dfc00315 	stw	ra,12(sp)
10002ba8:	dc800215 	stw	r18,8(sp)
10002bac:	2023883a 	mov	r17,r4
10002bb0:	2821883a 	mov	r16,r5
10002bb4:	20000226 	beq	r4,zero,10002bc0 <_fclose_r+0x2c>
10002bb8:	20800e17 	ldw	r2,56(r4)
10002bbc:	10002726 	beq	r2,zero,10002c5c <_fclose_r+0xc8>
10002bc0:	8080030f 	ldh	r2,12(r16)
10002bc4:	1000071e 	bne	r2,zero,10002be4 <_fclose_r+0x50>
10002bc8:	0005883a 	mov	r2,zero
10002bcc:	dfc00317 	ldw	ra,12(sp)
10002bd0:	dc800217 	ldw	r18,8(sp)
10002bd4:	dc400117 	ldw	r17,4(sp)
10002bd8:	dc000017 	ldw	r16,0(sp)
10002bdc:	dec00404 	addi	sp,sp,16
10002be0:	f800283a 	ret
10002be4:	800b883a 	mov	r5,r16
10002be8:	8809883a 	mov	r4,r17
10002bec:	0002c980 	call	10002c98 <__sflush_r>
10002bf0:	1025883a 	mov	r18,r2
10002bf4:	80800b17 	ldw	r2,44(r16)
10002bf8:	10000426 	beq	r2,zero,10002c0c <_fclose_r+0x78>
10002bfc:	81400717 	ldw	r5,28(r16)
10002c00:	8809883a 	mov	r4,r17
10002c04:	103ee83a 	callr	r2
10002c08:	10001616 	blt	r2,zero,10002c64 <_fclose_r+0xd0>
10002c0c:	8080030b 	ldhu	r2,12(r16)
10002c10:	1080200c 	andi	r2,r2,128
10002c14:	1000151e 	bne	r2,zero,10002c6c <_fclose_r+0xd8>
10002c18:	81400c17 	ldw	r5,48(r16)
10002c1c:	28000526 	beq	r5,zero,10002c34 <_fclose_r+0xa0>
10002c20:	80801004 	addi	r2,r16,64
10002c24:	28800226 	beq	r5,r2,10002c30 <_fclose_r+0x9c>
10002c28:	8809883a 	mov	r4,r17
10002c2c:	00030640 	call	10003064 <_free_r>
10002c30:	80000c15 	stw	zero,48(r16)
10002c34:	81401117 	ldw	r5,68(r16)
10002c38:	28000326 	beq	r5,zero,10002c48 <_fclose_r+0xb4>
10002c3c:	8809883a 	mov	r4,r17
10002c40:	00030640 	call	10003064 <_free_r>
10002c44:	80001115 	stw	zero,68(r16)
10002c48:	0000f4c0 	call	10000f4c <__sfp_lock_acquire>
10002c4c:	8000030d 	sth	zero,12(r16)
10002c50:	0000f500 	call	10000f50 <__sfp_lock_release>
10002c54:	9005883a 	mov	r2,r18
10002c58:	003fdc06 	br	10002bcc <__alt_data_end+0xf8002bcc>
10002c5c:	0000f3c0 	call	10000f3c <__sinit>
10002c60:	003fd706 	br	10002bc0 <__alt_data_end+0xf8002bc0>
10002c64:	04bfffc4 	movi	r18,-1
10002c68:	003fe806 	br	10002c0c <__alt_data_end+0xf8002c0c>
10002c6c:	81400417 	ldw	r5,16(r16)
10002c70:	8809883a 	mov	r4,r17
10002c74:	00030640 	call	10003064 <_free_r>
10002c78:	003fe706 	br	10002c18 <__alt_data_end+0xf8002c18>
10002c7c:	0005883a 	mov	r2,zero
10002c80:	f800283a 	ret

10002c84 <fclose>:
10002c84:	00840034 	movhi	r2,4096
10002c88:	109fc404 	addi	r2,r2,32528
10002c8c:	200b883a 	mov	r5,r4
10002c90:	11000017 	ldw	r4,0(r2)
10002c94:	0002b941 	jmpi	10002b94 <_fclose_r>

10002c98 <__sflush_r>:
10002c98:	2880030b 	ldhu	r2,12(r5)
10002c9c:	defffb04 	addi	sp,sp,-20
10002ca0:	dcc00315 	stw	r19,12(sp)
10002ca4:	dc400115 	stw	r17,4(sp)
10002ca8:	dfc00415 	stw	ra,16(sp)
10002cac:	dc800215 	stw	r18,8(sp)
10002cb0:	dc000015 	stw	r16,0(sp)
10002cb4:	10c0020c 	andi	r3,r2,8
10002cb8:	2823883a 	mov	r17,r5
10002cbc:	2027883a 	mov	r19,r4
10002cc0:	1800311e 	bne	r3,zero,10002d88 <__sflush_r+0xf0>
10002cc4:	28c00117 	ldw	r3,4(r5)
10002cc8:	10820014 	ori	r2,r2,2048
10002ccc:	2880030d 	sth	r2,12(r5)
10002cd0:	00c04b0e 	bge	zero,r3,10002e00 <__sflush_r+0x168>
10002cd4:	8a000a17 	ldw	r8,40(r17)
10002cd8:	40002326 	beq	r8,zero,10002d68 <__sflush_r+0xd0>
10002cdc:	9c000017 	ldw	r16,0(r19)
10002ce0:	10c4000c 	andi	r3,r2,4096
10002ce4:	98000015 	stw	zero,0(r19)
10002ce8:	18004826 	beq	r3,zero,10002e0c <__sflush_r+0x174>
10002cec:	89801417 	ldw	r6,80(r17)
10002cf0:	10c0010c 	andi	r3,r2,4
10002cf4:	18000626 	beq	r3,zero,10002d10 <__sflush_r+0x78>
10002cf8:	88c00117 	ldw	r3,4(r17)
10002cfc:	88800c17 	ldw	r2,48(r17)
10002d00:	30cdc83a 	sub	r6,r6,r3
10002d04:	10000226 	beq	r2,zero,10002d10 <__sflush_r+0x78>
10002d08:	88800f17 	ldw	r2,60(r17)
10002d0c:	308dc83a 	sub	r6,r6,r2
10002d10:	89400717 	ldw	r5,28(r17)
10002d14:	000f883a 	mov	r7,zero
10002d18:	9809883a 	mov	r4,r19
10002d1c:	403ee83a 	callr	r8
10002d20:	00ffffc4 	movi	r3,-1
10002d24:	10c04426 	beq	r2,r3,10002e38 <__sflush_r+0x1a0>
10002d28:	88c0030b 	ldhu	r3,12(r17)
10002d2c:	89000417 	ldw	r4,16(r17)
10002d30:	88000115 	stw	zero,4(r17)
10002d34:	197dffcc 	andi	r5,r3,63487
10002d38:	8940030d 	sth	r5,12(r17)
10002d3c:	89000015 	stw	r4,0(r17)
10002d40:	18c4000c 	andi	r3,r3,4096
10002d44:	18002c1e 	bne	r3,zero,10002df8 <__sflush_r+0x160>
10002d48:	89400c17 	ldw	r5,48(r17)
10002d4c:	9c000015 	stw	r16,0(r19)
10002d50:	28000526 	beq	r5,zero,10002d68 <__sflush_r+0xd0>
10002d54:	88801004 	addi	r2,r17,64
10002d58:	28800226 	beq	r5,r2,10002d64 <__sflush_r+0xcc>
10002d5c:	9809883a 	mov	r4,r19
10002d60:	00030640 	call	10003064 <_free_r>
10002d64:	88000c15 	stw	zero,48(r17)
10002d68:	0005883a 	mov	r2,zero
10002d6c:	dfc00417 	ldw	ra,16(sp)
10002d70:	dcc00317 	ldw	r19,12(sp)
10002d74:	dc800217 	ldw	r18,8(sp)
10002d78:	dc400117 	ldw	r17,4(sp)
10002d7c:	dc000017 	ldw	r16,0(sp)
10002d80:	dec00504 	addi	sp,sp,20
10002d84:	f800283a 	ret
10002d88:	2c800417 	ldw	r18,16(r5)
10002d8c:	903ff626 	beq	r18,zero,10002d68 <__alt_data_end+0xf8002d68>
10002d90:	2c000017 	ldw	r16,0(r5)
10002d94:	108000cc 	andi	r2,r2,3
10002d98:	2c800015 	stw	r18,0(r5)
10002d9c:	84a1c83a 	sub	r16,r16,r18
10002da0:	1000131e 	bne	r2,zero,10002df0 <__sflush_r+0x158>
10002da4:	28800517 	ldw	r2,20(r5)
10002da8:	88800215 	stw	r2,8(r17)
10002dac:	04000316 	blt	zero,r16,10002dbc <__sflush_r+0x124>
10002db0:	003fed06 	br	10002d68 <__alt_data_end+0xf8002d68>
10002db4:	90a5883a 	add	r18,r18,r2
10002db8:	043feb0e 	bge	zero,r16,10002d68 <__alt_data_end+0xf8002d68>
10002dbc:	88800917 	ldw	r2,36(r17)
10002dc0:	89400717 	ldw	r5,28(r17)
10002dc4:	800f883a 	mov	r7,r16
10002dc8:	900d883a 	mov	r6,r18
10002dcc:	9809883a 	mov	r4,r19
10002dd0:	103ee83a 	callr	r2
10002dd4:	80a1c83a 	sub	r16,r16,r2
10002dd8:	00bff616 	blt	zero,r2,10002db4 <__alt_data_end+0xf8002db4>
10002ddc:	88c0030b 	ldhu	r3,12(r17)
10002de0:	00bfffc4 	movi	r2,-1
10002de4:	18c01014 	ori	r3,r3,64
10002de8:	88c0030d 	sth	r3,12(r17)
10002dec:	003fdf06 	br	10002d6c <__alt_data_end+0xf8002d6c>
10002df0:	0005883a 	mov	r2,zero
10002df4:	003fec06 	br	10002da8 <__alt_data_end+0xf8002da8>
10002df8:	88801415 	stw	r2,80(r17)
10002dfc:	003fd206 	br	10002d48 <__alt_data_end+0xf8002d48>
10002e00:	28c00f17 	ldw	r3,60(r5)
10002e04:	00ffb316 	blt	zero,r3,10002cd4 <__alt_data_end+0xf8002cd4>
10002e08:	003fd706 	br	10002d68 <__alt_data_end+0xf8002d68>
10002e0c:	89400717 	ldw	r5,28(r17)
10002e10:	000d883a 	mov	r6,zero
10002e14:	01c00044 	movi	r7,1
10002e18:	9809883a 	mov	r4,r19
10002e1c:	403ee83a 	callr	r8
10002e20:	100d883a 	mov	r6,r2
10002e24:	00bfffc4 	movi	r2,-1
10002e28:	30801426 	beq	r6,r2,10002e7c <__sflush_r+0x1e4>
10002e2c:	8880030b 	ldhu	r2,12(r17)
10002e30:	8a000a17 	ldw	r8,40(r17)
10002e34:	003fae06 	br	10002cf0 <__alt_data_end+0xf8002cf0>
10002e38:	98c00017 	ldw	r3,0(r19)
10002e3c:	183fba26 	beq	r3,zero,10002d28 <__alt_data_end+0xf8002d28>
10002e40:	01000744 	movi	r4,29
10002e44:	19000626 	beq	r3,r4,10002e60 <__sflush_r+0x1c8>
10002e48:	01000584 	movi	r4,22
10002e4c:	19000426 	beq	r3,r4,10002e60 <__sflush_r+0x1c8>
10002e50:	88c0030b 	ldhu	r3,12(r17)
10002e54:	18c01014 	ori	r3,r3,64
10002e58:	88c0030d 	sth	r3,12(r17)
10002e5c:	003fc306 	br	10002d6c <__alt_data_end+0xf8002d6c>
10002e60:	8880030b 	ldhu	r2,12(r17)
10002e64:	88c00417 	ldw	r3,16(r17)
10002e68:	88000115 	stw	zero,4(r17)
10002e6c:	10bdffcc 	andi	r2,r2,63487
10002e70:	8880030d 	sth	r2,12(r17)
10002e74:	88c00015 	stw	r3,0(r17)
10002e78:	003fb306 	br	10002d48 <__alt_data_end+0xf8002d48>
10002e7c:	98800017 	ldw	r2,0(r19)
10002e80:	103fea26 	beq	r2,zero,10002e2c <__alt_data_end+0xf8002e2c>
10002e84:	00c00744 	movi	r3,29
10002e88:	10c00226 	beq	r2,r3,10002e94 <__sflush_r+0x1fc>
10002e8c:	00c00584 	movi	r3,22
10002e90:	10c0031e 	bne	r2,r3,10002ea0 <__sflush_r+0x208>
10002e94:	9c000015 	stw	r16,0(r19)
10002e98:	0005883a 	mov	r2,zero
10002e9c:	003fb306 	br	10002d6c <__alt_data_end+0xf8002d6c>
10002ea0:	88c0030b 	ldhu	r3,12(r17)
10002ea4:	3005883a 	mov	r2,r6
10002ea8:	18c01014 	ori	r3,r3,64
10002eac:	88c0030d 	sth	r3,12(r17)
10002eb0:	003fae06 	br	10002d6c <__alt_data_end+0xf8002d6c>

10002eb4 <_fflush_r>:
10002eb4:	defffd04 	addi	sp,sp,-12
10002eb8:	dc000115 	stw	r16,4(sp)
10002ebc:	dfc00215 	stw	ra,8(sp)
10002ec0:	2021883a 	mov	r16,r4
10002ec4:	20000226 	beq	r4,zero,10002ed0 <_fflush_r+0x1c>
10002ec8:	20800e17 	ldw	r2,56(r4)
10002ecc:	10000c26 	beq	r2,zero,10002f00 <_fflush_r+0x4c>
10002ed0:	2880030f 	ldh	r2,12(r5)
10002ed4:	1000051e 	bne	r2,zero,10002eec <_fflush_r+0x38>
10002ed8:	0005883a 	mov	r2,zero
10002edc:	dfc00217 	ldw	ra,8(sp)
10002ee0:	dc000117 	ldw	r16,4(sp)
10002ee4:	dec00304 	addi	sp,sp,12
10002ee8:	f800283a 	ret
10002eec:	8009883a 	mov	r4,r16
10002ef0:	dfc00217 	ldw	ra,8(sp)
10002ef4:	dc000117 	ldw	r16,4(sp)
10002ef8:	dec00304 	addi	sp,sp,12
10002efc:	0002c981 	jmpi	10002c98 <__sflush_r>
10002f00:	d9400015 	stw	r5,0(sp)
10002f04:	0000f3c0 	call	10000f3c <__sinit>
10002f08:	d9400017 	ldw	r5,0(sp)
10002f0c:	003ff006 	br	10002ed0 <__alt_data_end+0xf8002ed0>

10002f10 <fflush>:
10002f10:	20000526 	beq	r4,zero,10002f28 <fflush+0x18>
10002f14:	00840034 	movhi	r2,4096
10002f18:	109fc404 	addi	r2,r2,32528
10002f1c:	200b883a 	mov	r5,r4
10002f20:	11000017 	ldw	r4,0(r2)
10002f24:	0002eb41 	jmpi	10002eb4 <_fflush_r>
10002f28:	00840034 	movhi	r2,4096
10002f2c:	109fc304 	addi	r2,r2,32524
10002f30:	11000017 	ldw	r4,0(r2)
10002f34:	01440034 	movhi	r5,4096
10002f38:	294bad04 	addi	r5,r5,11956
10002f3c:	00015181 	jmpi	10001518 <_fwalk_reent>

10002f40 <_malloc_trim_r>:
10002f40:	defffb04 	addi	sp,sp,-20
10002f44:	dcc00315 	stw	r19,12(sp)
10002f48:	04c40034 	movhi	r19,4096
10002f4c:	dc800215 	stw	r18,8(sp)
10002f50:	dc400115 	stw	r17,4(sp)
10002f54:	dc000015 	stw	r16,0(sp)
10002f58:	dfc00415 	stw	ra,16(sp)
10002f5c:	2821883a 	mov	r16,r5
10002f60:	9cda3d04 	addi	r19,r19,26868
10002f64:	2025883a 	mov	r18,r4
10002f68:	0003efc0 	call	10003efc <__malloc_lock>
10002f6c:	98800217 	ldw	r2,8(r19)
10002f70:	14400117 	ldw	r17,4(r2)
10002f74:	00bfff04 	movi	r2,-4
10002f78:	88a2703a 	and	r17,r17,r2
10002f7c:	8c21c83a 	sub	r16,r17,r16
10002f80:	8403fbc4 	addi	r16,r16,4079
10002f84:	8020d33a 	srli	r16,r16,12
10002f88:	0083ffc4 	movi	r2,4095
10002f8c:	843fffc4 	addi	r16,r16,-1
10002f90:	8020933a 	slli	r16,r16,12
10002f94:	1400060e 	bge	r2,r16,10002fb0 <_malloc_trim_r+0x70>
10002f98:	000b883a 	mov	r5,zero
10002f9c:	9009883a 	mov	r4,r18
10002fa0:	00027fc0 	call	100027fc <_sbrk_r>
10002fa4:	98c00217 	ldw	r3,8(r19)
10002fa8:	1c47883a 	add	r3,r3,r17
10002fac:	10c00a26 	beq	r2,r3,10002fd8 <_malloc_trim_r+0x98>
10002fb0:	9009883a 	mov	r4,r18
10002fb4:	0003f200 	call	10003f20 <__malloc_unlock>
10002fb8:	0005883a 	mov	r2,zero
10002fbc:	dfc00417 	ldw	ra,16(sp)
10002fc0:	dcc00317 	ldw	r19,12(sp)
10002fc4:	dc800217 	ldw	r18,8(sp)
10002fc8:	dc400117 	ldw	r17,4(sp)
10002fcc:	dc000017 	ldw	r16,0(sp)
10002fd0:	dec00504 	addi	sp,sp,20
10002fd4:	f800283a 	ret
10002fd8:	040bc83a 	sub	r5,zero,r16
10002fdc:	9009883a 	mov	r4,r18
10002fe0:	00027fc0 	call	100027fc <_sbrk_r>
10002fe4:	00ffffc4 	movi	r3,-1
10002fe8:	10c00d26 	beq	r2,r3,10003020 <_malloc_trim_r+0xe0>
10002fec:	00c40074 	movhi	r3,4097
10002ff0:	18e73104 	addi	r3,r3,-25404
10002ff4:	18800017 	ldw	r2,0(r3)
10002ff8:	99000217 	ldw	r4,8(r19)
10002ffc:	8c23c83a 	sub	r17,r17,r16
10003000:	8c400054 	ori	r17,r17,1
10003004:	1421c83a 	sub	r16,r2,r16
10003008:	24400115 	stw	r17,4(r4)
1000300c:	9009883a 	mov	r4,r18
10003010:	1c000015 	stw	r16,0(r3)
10003014:	0003f200 	call	10003f20 <__malloc_unlock>
10003018:	00800044 	movi	r2,1
1000301c:	003fe706 	br	10002fbc <__alt_data_end+0xf8002fbc>
10003020:	000b883a 	mov	r5,zero
10003024:	9009883a 	mov	r4,r18
10003028:	00027fc0 	call	100027fc <_sbrk_r>
1000302c:	99000217 	ldw	r4,8(r19)
10003030:	014003c4 	movi	r5,15
10003034:	1107c83a 	sub	r3,r2,r4
10003038:	28ffdd0e 	bge	r5,r3,10002fb0 <__alt_data_end+0xf8002fb0>
1000303c:	01440034 	movhi	r5,4096
10003040:	295fc504 	addi	r5,r5,32532
10003044:	29400017 	ldw	r5,0(r5)
10003048:	18c00054 	ori	r3,r3,1
1000304c:	20c00115 	stw	r3,4(r4)
10003050:	00c40074 	movhi	r3,4097
10003054:	1145c83a 	sub	r2,r2,r5
10003058:	18e73104 	addi	r3,r3,-25404
1000305c:	18800015 	stw	r2,0(r3)
10003060:	003fd306 	br	10002fb0 <__alt_data_end+0xf8002fb0>

10003064 <_free_r>:
10003064:	28004126 	beq	r5,zero,1000316c <_free_r+0x108>
10003068:	defffd04 	addi	sp,sp,-12
1000306c:	dc400115 	stw	r17,4(sp)
10003070:	dc000015 	stw	r16,0(sp)
10003074:	2023883a 	mov	r17,r4
10003078:	2821883a 	mov	r16,r5
1000307c:	dfc00215 	stw	ra,8(sp)
10003080:	0003efc0 	call	10003efc <__malloc_lock>
10003084:	81ffff17 	ldw	r7,-4(r16)
10003088:	00bfff84 	movi	r2,-2
1000308c:	01040034 	movhi	r4,4096
10003090:	81bffe04 	addi	r6,r16,-8
10003094:	3884703a 	and	r2,r7,r2
10003098:	211a3d04 	addi	r4,r4,26868
1000309c:	308b883a 	add	r5,r6,r2
100030a0:	2a400117 	ldw	r9,4(r5)
100030a4:	22000217 	ldw	r8,8(r4)
100030a8:	00ffff04 	movi	r3,-4
100030ac:	48c6703a 	and	r3,r9,r3
100030b0:	2a005726 	beq	r5,r8,10003210 <_free_r+0x1ac>
100030b4:	28c00115 	stw	r3,4(r5)
100030b8:	39c0004c 	andi	r7,r7,1
100030bc:	3800091e 	bne	r7,zero,100030e4 <_free_r+0x80>
100030c0:	823ffe17 	ldw	r8,-8(r16)
100030c4:	22400204 	addi	r9,r4,8
100030c8:	320dc83a 	sub	r6,r6,r8
100030cc:	31c00217 	ldw	r7,8(r6)
100030d0:	1205883a 	add	r2,r2,r8
100030d4:	3a406526 	beq	r7,r9,1000326c <_free_r+0x208>
100030d8:	32000317 	ldw	r8,12(r6)
100030dc:	3a000315 	stw	r8,12(r7)
100030e0:	41c00215 	stw	r7,8(r8)
100030e4:	28cf883a 	add	r7,r5,r3
100030e8:	39c00117 	ldw	r7,4(r7)
100030ec:	39c0004c 	andi	r7,r7,1
100030f0:	38003a26 	beq	r7,zero,100031dc <_free_r+0x178>
100030f4:	10c00054 	ori	r3,r2,1
100030f8:	30c00115 	stw	r3,4(r6)
100030fc:	3087883a 	add	r3,r6,r2
10003100:	18800015 	stw	r2,0(r3)
10003104:	00c07fc4 	movi	r3,511
10003108:	18801936 	bltu	r3,r2,10003170 <_free_r+0x10c>
1000310c:	1004d0fa 	srli	r2,r2,3
10003110:	01c00044 	movi	r7,1
10003114:	21400117 	ldw	r5,4(r4)
10003118:	10c00044 	addi	r3,r2,1
1000311c:	18c7883a 	add	r3,r3,r3
10003120:	1005d0ba 	srai	r2,r2,2
10003124:	18c7883a 	add	r3,r3,r3
10003128:	18c7883a 	add	r3,r3,r3
1000312c:	1907883a 	add	r3,r3,r4
10003130:	3884983a 	sll	r2,r7,r2
10003134:	19c00017 	ldw	r7,0(r3)
10003138:	1a3ffe04 	addi	r8,r3,-8
1000313c:	1144b03a 	or	r2,r2,r5
10003140:	32000315 	stw	r8,12(r6)
10003144:	31c00215 	stw	r7,8(r6)
10003148:	20800115 	stw	r2,4(r4)
1000314c:	19800015 	stw	r6,0(r3)
10003150:	39800315 	stw	r6,12(r7)
10003154:	8809883a 	mov	r4,r17
10003158:	dfc00217 	ldw	ra,8(sp)
1000315c:	dc400117 	ldw	r17,4(sp)
10003160:	dc000017 	ldw	r16,0(sp)
10003164:	dec00304 	addi	sp,sp,12
10003168:	0003f201 	jmpi	10003f20 <__malloc_unlock>
1000316c:	f800283a 	ret
10003170:	100ad27a 	srli	r5,r2,9
10003174:	00c00104 	movi	r3,4
10003178:	19404a36 	bltu	r3,r5,100032a4 <_free_r+0x240>
1000317c:	100ad1ba 	srli	r5,r2,6
10003180:	28c00e44 	addi	r3,r5,57
10003184:	18c7883a 	add	r3,r3,r3
10003188:	29400e04 	addi	r5,r5,56
1000318c:	18c7883a 	add	r3,r3,r3
10003190:	18c7883a 	add	r3,r3,r3
10003194:	1909883a 	add	r4,r3,r4
10003198:	20c00017 	ldw	r3,0(r4)
1000319c:	01c40034 	movhi	r7,4096
100031a0:	213ffe04 	addi	r4,r4,-8
100031a4:	39da3d04 	addi	r7,r7,26868
100031a8:	20c04426 	beq	r4,r3,100032bc <_free_r+0x258>
100031ac:	01ffff04 	movi	r7,-4
100031b0:	19400117 	ldw	r5,4(r3)
100031b4:	29ca703a 	and	r5,r5,r7
100031b8:	1140022e 	bgeu	r2,r5,100031c4 <_free_r+0x160>
100031bc:	18c00217 	ldw	r3,8(r3)
100031c0:	20fffb1e 	bne	r4,r3,100031b0 <__alt_data_end+0xf80031b0>
100031c4:	19000317 	ldw	r4,12(r3)
100031c8:	31000315 	stw	r4,12(r6)
100031cc:	30c00215 	stw	r3,8(r6)
100031d0:	21800215 	stw	r6,8(r4)
100031d4:	19800315 	stw	r6,12(r3)
100031d8:	003fde06 	br	10003154 <__alt_data_end+0xf8003154>
100031dc:	29c00217 	ldw	r7,8(r5)
100031e0:	10c5883a 	add	r2,r2,r3
100031e4:	00c40034 	movhi	r3,4096
100031e8:	18da3f04 	addi	r3,r3,26876
100031ec:	38c03b26 	beq	r7,r3,100032dc <_free_r+0x278>
100031f0:	2a000317 	ldw	r8,12(r5)
100031f4:	11400054 	ori	r5,r2,1
100031f8:	3087883a 	add	r3,r6,r2
100031fc:	3a000315 	stw	r8,12(r7)
10003200:	41c00215 	stw	r7,8(r8)
10003204:	31400115 	stw	r5,4(r6)
10003208:	18800015 	stw	r2,0(r3)
1000320c:	003fbd06 	br	10003104 <__alt_data_end+0xf8003104>
10003210:	39c0004c 	andi	r7,r7,1
10003214:	10c5883a 	add	r2,r2,r3
10003218:	3800071e 	bne	r7,zero,10003238 <_free_r+0x1d4>
1000321c:	81fffe17 	ldw	r7,-8(r16)
10003220:	31cdc83a 	sub	r6,r6,r7
10003224:	30c00317 	ldw	r3,12(r6)
10003228:	31400217 	ldw	r5,8(r6)
1000322c:	11c5883a 	add	r2,r2,r7
10003230:	28c00315 	stw	r3,12(r5)
10003234:	19400215 	stw	r5,8(r3)
10003238:	10c00054 	ori	r3,r2,1
1000323c:	30c00115 	stw	r3,4(r6)
10003240:	00c40034 	movhi	r3,4096
10003244:	18dfc604 	addi	r3,r3,32536
10003248:	18c00017 	ldw	r3,0(r3)
1000324c:	21800215 	stw	r6,8(r4)
10003250:	10ffc036 	bltu	r2,r3,10003154 <__alt_data_end+0xf8003154>
10003254:	00840074 	movhi	r2,4097
10003258:	10a72804 	addi	r2,r2,-25440
1000325c:	11400017 	ldw	r5,0(r2)
10003260:	8809883a 	mov	r4,r17
10003264:	0002f400 	call	10002f40 <_malloc_trim_r>
10003268:	003fba06 	br	10003154 <__alt_data_end+0xf8003154>
1000326c:	28c9883a 	add	r4,r5,r3
10003270:	21000117 	ldw	r4,4(r4)
10003274:	2100004c 	andi	r4,r4,1
10003278:	2000391e 	bne	r4,zero,10003360 <_free_r+0x2fc>
1000327c:	29c00217 	ldw	r7,8(r5)
10003280:	29000317 	ldw	r4,12(r5)
10003284:	1885883a 	add	r2,r3,r2
10003288:	10c00054 	ori	r3,r2,1
1000328c:	39000315 	stw	r4,12(r7)
10003290:	21c00215 	stw	r7,8(r4)
10003294:	30c00115 	stw	r3,4(r6)
10003298:	308d883a 	add	r6,r6,r2
1000329c:	30800015 	stw	r2,0(r6)
100032a0:	003fac06 	br	10003154 <__alt_data_end+0xf8003154>
100032a4:	00c00504 	movi	r3,20
100032a8:	19401536 	bltu	r3,r5,10003300 <_free_r+0x29c>
100032ac:	28c01704 	addi	r3,r5,92
100032b0:	18c7883a 	add	r3,r3,r3
100032b4:	294016c4 	addi	r5,r5,91
100032b8:	003fb406 	br	1000318c <__alt_data_end+0xf800318c>
100032bc:	280bd0ba 	srai	r5,r5,2
100032c0:	00c00044 	movi	r3,1
100032c4:	38800117 	ldw	r2,4(r7)
100032c8:	194a983a 	sll	r5,r3,r5
100032cc:	2007883a 	mov	r3,r4
100032d0:	2884b03a 	or	r2,r5,r2
100032d4:	38800115 	stw	r2,4(r7)
100032d8:	003fbb06 	br	100031c8 <__alt_data_end+0xf80031c8>
100032dc:	21800515 	stw	r6,20(r4)
100032e0:	21800415 	stw	r6,16(r4)
100032e4:	10c00054 	ori	r3,r2,1
100032e8:	31c00315 	stw	r7,12(r6)
100032ec:	31c00215 	stw	r7,8(r6)
100032f0:	30c00115 	stw	r3,4(r6)
100032f4:	308d883a 	add	r6,r6,r2
100032f8:	30800015 	stw	r2,0(r6)
100032fc:	003f9506 	br	10003154 <__alt_data_end+0xf8003154>
10003300:	00c01504 	movi	r3,84
10003304:	19400536 	bltu	r3,r5,1000331c <_free_r+0x2b8>
10003308:	100ad33a 	srli	r5,r2,12
1000330c:	28c01bc4 	addi	r3,r5,111
10003310:	18c7883a 	add	r3,r3,r3
10003314:	29401b84 	addi	r5,r5,110
10003318:	003f9c06 	br	1000318c <__alt_data_end+0xf800318c>
1000331c:	00c05504 	movi	r3,340
10003320:	19400536 	bltu	r3,r5,10003338 <_free_r+0x2d4>
10003324:	100ad3fa 	srli	r5,r2,15
10003328:	28c01e04 	addi	r3,r5,120
1000332c:	18c7883a 	add	r3,r3,r3
10003330:	29401dc4 	addi	r5,r5,119
10003334:	003f9506 	br	1000318c <__alt_data_end+0xf800318c>
10003338:	00c15504 	movi	r3,1364
1000333c:	19400536 	bltu	r3,r5,10003354 <_free_r+0x2f0>
10003340:	100ad4ba 	srli	r5,r2,18
10003344:	28c01f44 	addi	r3,r5,125
10003348:	18c7883a 	add	r3,r3,r3
1000334c:	29401f04 	addi	r5,r5,124
10003350:	003f8e06 	br	1000318c <__alt_data_end+0xf800318c>
10003354:	00c03f84 	movi	r3,254
10003358:	01401f84 	movi	r5,126
1000335c:	003f8b06 	br	1000318c <__alt_data_end+0xf800318c>
10003360:	10c00054 	ori	r3,r2,1
10003364:	30c00115 	stw	r3,4(r6)
10003368:	308d883a 	add	r6,r6,r2
1000336c:	30800015 	stw	r2,0(r6)
10003370:	003f7806 	br	10003154 <__alt_data_end+0xf8003154>

10003374 <_lseek_r>:
10003374:	defffd04 	addi	sp,sp,-12
10003378:	2805883a 	mov	r2,r5
1000337c:	dc000015 	stw	r16,0(sp)
10003380:	04040074 	movhi	r16,4097
10003384:	dc400115 	stw	r17,4(sp)
10003388:	300b883a 	mov	r5,r6
1000338c:	84272904 	addi	r16,r16,-25436
10003390:	2023883a 	mov	r17,r4
10003394:	380d883a 	mov	r6,r7
10003398:	1009883a 	mov	r4,r2
1000339c:	dfc00215 	stw	ra,8(sp)
100033a0:	80000015 	stw	zero,0(r16)
100033a4:	0003da40 	call	10003da4 <lseek>
100033a8:	00ffffc4 	movi	r3,-1
100033ac:	10c00526 	beq	r2,r3,100033c4 <_lseek_r+0x50>
100033b0:	dfc00217 	ldw	ra,8(sp)
100033b4:	dc400117 	ldw	r17,4(sp)
100033b8:	dc000017 	ldw	r16,0(sp)
100033bc:	dec00304 	addi	sp,sp,12
100033c0:	f800283a 	ret
100033c4:	80c00017 	ldw	r3,0(r16)
100033c8:	183ff926 	beq	r3,zero,100033b0 <__alt_data_end+0xf80033b0>
100033cc:	88c00015 	stw	r3,0(r17)
100033d0:	003ff706 	br	100033b0 <__alt_data_end+0xf80033b0>

100033d4 <__smakebuf_r>:
100033d4:	2880030b 	ldhu	r2,12(r5)
100033d8:	10c0008c 	andi	r3,r2,2
100033dc:	1800411e 	bne	r3,zero,100034e4 <__smakebuf_r+0x110>
100033e0:	deffec04 	addi	sp,sp,-80
100033e4:	dc000f15 	stw	r16,60(sp)
100033e8:	2821883a 	mov	r16,r5
100033ec:	2940038f 	ldh	r5,14(r5)
100033f0:	dc401015 	stw	r17,64(sp)
100033f4:	dfc01315 	stw	ra,76(sp)
100033f8:	dcc01215 	stw	r19,72(sp)
100033fc:	dc801115 	stw	r18,68(sp)
10003400:	2023883a 	mov	r17,r4
10003404:	28001c16 	blt	r5,zero,10003478 <__smakebuf_r+0xa4>
10003408:	d80d883a 	mov	r6,sp
1000340c:	00035f00 	call	100035f0 <_fstat_r>
10003410:	10001816 	blt	r2,zero,10003474 <__smakebuf_r+0xa0>
10003414:	d8800117 	ldw	r2,4(sp)
10003418:	00e00014 	movui	r3,32768
1000341c:	10bc000c 	andi	r2,r2,61440
10003420:	14c80020 	cmpeqi	r19,r2,8192
10003424:	10c03726 	beq	r2,r3,10003504 <__smakebuf_r+0x130>
10003428:	80c0030b 	ldhu	r3,12(r16)
1000342c:	18c20014 	ori	r3,r3,2048
10003430:	80c0030d 	sth	r3,12(r16)
10003434:	00c80004 	movi	r3,8192
10003438:	10c0521e 	bne	r2,r3,10003584 <__smakebuf_r+0x1b0>
1000343c:	8140038f 	ldh	r5,14(r16)
10003440:	8809883a 	mov	r4,r17
10003444:	000364c0 	call	1000364c <_isatty_r>
10003448:	10004c26 	beq	r2,zero,1000357c <__smakebuf_r+0x1a8>
1000344c:	8080030b 	ldhu	r2,12(r16)
10003450:	80c010c4 	addi	r3,r16,67
10003454:	80c00015 	stw	r3,0(r16)
10003458:	10800054 	ori	r2,r2,1
1000345c:	8080030d 	sth	r2,12(r16)
10003460:	00800044 	movi	r2,1
10003464:	80c00415 	stw	r3,16(r16)
10003468:	80800515 	stw	r2,20(r16)
1000346c:	04810004 	movi	r18,1024
10003470:	00000706 	br	10003490 <__smakebuf_r+0xbc>
10003474:	8080030b 	ldhu	r2,12(r16)
10003478:	10c0200c 	andi	r3,r2,128
1000347c:	18001f1e 	bne	r3,zero,100034fc <__smakebuf_r+0x128>
10003480:	04810004 	movi	r18,1024
10003484:	10820014 	ori	r2,r2,2048
10003488:	8080030d 	sth	r2,12(r16)
1000348c:	0027883a 	mov	r19,zero
10003490:	900b883a 	mov	r5,r18
10003494:	8809883a 	mov	r4,r17
10003498:	00015dc0 	call	100015dc <_malloc_r>
1000349c:	10002c26 	beq	r2,zero,10003550 <__smakebuf_r+0x17c>
100034a0:	80c0030b 	ldhu	r3,12(r16)
100034a4:	01040034 	movhi	r4,4096
100034a8:	2102f904 	addi	r4,r4,3044
100034ac:	89000f15 	stw	r4,60(r17)
100034b0:	18c02014 	ori	r3,r3,128
100034b4:	80c0030d 	sth	r3,12(r16)
100034b8:	80800015 	stw	r2,0(r16)
100034bc:	80800415 	stw	r2,16(r16)
100034c0:	84800515 	stw	r18,20(r16)
100034c4:	98001a1e 	bne	r19,zero,10003530 <__smakebuf_r+0x15c>
100034c8:	dfc01317 	ldw	ra,76(sp)
100034cc:	dcc01217 	ldw	r19,72(sp)
100034d0:	dc801117 	ldw	r18,68(sp)
100034d4:	dc401017 	ldw	r17,64(sp)
100034d8:	dc000f17 	ldw	r16,60(sp)
100034dc:	dec01404 	addi	sp,sp,80
100034e0:	f800283a 	ret
100034e4:	288010c4 	addi	r2,r5,67
100034e8:	28800015 	stw	r2,0(r5)
100034ec:	28800415 	stw	r2,16(r5)
100034f0:	00800044 	movi	r2,1
100034f4:	28800515 	stw	r2,20(r5)
100034f8:	f800283a 	ret
100034fc:	04801004 	movi	r18,64
10003500:	003fe006 	br	10003484 <__alt_data_end+0xf8003484>
10003504:	81000a17 	ldw	r4,40(r16)
10003508:	00c40034 	movhi	r3,4096
1000350c:	18ca4a04 	addi	r3,r3,10536
10003510:	20ffc51e 	bne	r4,r3,10003428 <__alt_data_end+0xf8003428>
10003514:	8080030b 	ldhu	r2,12(r16)
10003518:	04810004 	movi	r18,1024
1000351c:	84801315 	stw	r18,76(r16)
10003520:	1484b03a 	or	r2,r2,r18
10003524:	8080030d 	sth	r2,12(r16)
10003528:	0027883a 	mov	r19,zero
1000352c:	003fd806 	br	10003490 <__alt_data_end+0xf8003490>
10003530:	8140038f 	ldh	r5,14(r16)
10003534:	8809883a 	mov	r4,r17
10003538:	000364c0 	call	1000364c <_isatty_r>
1000353c:	103fe226 	beq	r2,zero,100034c8 <__alt_data_end+0xf80034c8>
10003540:	8080030b 	ldhu	r2,12(r16)
10003544:	10800054 	ori	r2,r2,1
10003548:	8080030d 	sth	r2,12(r16)
1000354c:	003fde06 	br	100034c8 <__alt_data_end+0xf80034c8>
10003550:	8080030b 	ldhu	r2,12(r16)
10003554:	10c0800c 	andi	r3,r2,512
10003558:	183fdb1e 	bne	r3,zero,100034c8 <__alt_data_end+0xf80034c8>
1000355c:	10800094 	ori	r2,r2,2
10003560:	80c010c4 	addi	r3,r16,67
10003564:	8080030d 	sth	r2,12(r16)
10003568:	00800044 	movi	r2,1
1000356c:	80c00015 	stw	r3,0(r16)
10003570:	80c00415 	stw	r3,16(r16)
10003574:	80800515 	stw	r2,20(r16)
10003578:	003fd306 	br	100034c8 <__alt_data_end+0xf80034c8>
1000357c:	04810004 	movi	r18,1024
10003580:	003fc306 	br	10003490 <__alt_data_end+0xf8003490>
10003584:	0027883a 	mov	r19,zero
10003588:	04810004 	movi	r18,1024
1000358c:	003fc006 	br	10003490 <__alt_data_end+0xf8003490>

10003590 <_read_r>:
10003590:	defffd04 	addi	sp,sp,-12
10003594:	2805883a 	mov	r2,r5
10003598:	dc000015 	stw	r16,0(sp)
1000359c:	04040074 	movhi	r16,4097
100035a0:	dc400115 	stw	r17,4(sp)
100035a4:	300b883a 	mov	r5,r6
100035a8:	84272904 	addi	r16,r16,-25436
100035ac:	2023883a 	mov	r17,r4
100035b0:	380d883a 	mov	r6,r7
100035b4:	1009883a 	mov	r4,r2
100035b8:	dfc00215 	stw	ra,8(sp)
100035bc:	80000015 	stw	zero,0(r16)
100035c0:	0003f800 	call	10003f80 <read>
100035c4:	00ffffc4 	movi	r3,-1
100035c8:	10c00526 	beq	r2,r3,100035e0 <_read_r+0x50>
100035cc:	dfc00217 	ldw	ra,8(sp)
100035d0:	dc400117 	ldw	r17,4(sp)
100035d4:	dc000017 	ldw	r16,0(sp)
100035d8:	dec00304 	addi	sp,sp,12
100035dc:	f800283a 	ret
100035e0:	80c00017 	ldw	r3,0(r16)
100035e4:	183ff926 	beq	r3,zero,100035cc <__alt_data_end+0xf80035cc>
100035e8:	88c00015 	stw	r3,0(r17)
100035ec:	003ff706 	br	100035cc <__alt_data_end+0xf80035cc>

100035f0 <_fstat_r>:
100035f0:	defffd04 	addi	sp,sp,-12
100035f4:	2805883a 	mov	r2,r5
100035f8:	dc000015 	stw	r16,0(sp)
100035fc:	04040074 	movhi	r16,4097
10003600:	dc400115 	stw	r17,4(sp)
10003604:	84272904 	addi	r16,r16,-25436
10003608:	2023883a 	mov	r17,r4
1000360c:	300b883a 	mov	r5,r6
10003610:	1009883a 	mov	r4,r2
10003614:	dfc00215 	stw	ra,8(sp)
10003618:	80000015 	stw	zero,0(r16)
1000361c:	0003adc0 	call	10003adc <fstat>
10003620:	00ffffc4 	movi	r3,-1
10003624:	10c00526 	beq	r2,r3,1000363c <_fstat_r+0x4c>
10003628:	dfc00217 	ldw	ra,8(sp)
1000362c:	dc400117 	ldw	r17,4(sp)
10003630:	dc000017 	ldw	r16,0(sp)
10003634:	dec00304 	addi	sp,sp,12
10003638:	f800283a 	ret
1000363c:	80c00017 	ldw	r3,0(r16)
10003640:	183ff926 	beq	r3,zero,10003628 <__alt_data_end+0xf8003628>
10003644:	88c00015 	stw	r3,0(r17)
10003648:	003ff706 	br	10003628 <__alt_data_end+0xf8003628>

1000364c <_isatty_r>:
1000364c:	defffd04 	addi	sp,sp,-12
10003650:	dc000015 	stw	r16,0(sp)
10003654:	04040074 	movhi	r16,4097
10003658:	dc400115 	stw	r17,4(sp)
1000365c:	84272904 	addi	r16,r16,-25436
10003660:	2023883a 	mov	r17,r4
10003664:	2809883a 	mov	r4,r5
10003668:	dfc00215 	stw	ra,8(sp)
1000366c:	80000015 	stw	zero,0(r16)
10003670:	0003bd00 	call	10003bd0 <isatty>
10003674:	00ffffc4 	movi	r3,-1
10003678:	10c00526 	beq	r2,r3,10003690 <_isatty_r+0x44>
1000367c:	dfc00217 	ldw	ra,8(sp)
10003680:	dc400117 	ldw	r17,4(sp)
10003684:	dc000017 	ldw	r16,0(sp)
10003688:	dec00304 	addi	sp,sp,12
1000368c:	f800283a 	ret
10003690:	80c00017 	ldw	r3,0(r16)
10003694:	183ff926 	beq	r3,zero,1000367c <__alt_data_end+0xf800367c>
10003698:	88c00015 	stw	r3,0(r17)
1000369c:	003ff706 	br	1000367c <__alt_data_end+0xf800367c>

100036a0 <__muldi3>:
100036a0:	defff604 	addi	sp,sp,-40
100036a4:	dd800615 	stw	r22,24(sp)
100036a8:	dd400515 	stw	r21,20(sp)
100036ac:	dc400115 	stw	r17,4(sp)
100036b0:	357fffcc 	andi	r21,r6,65535
100036b4:	2022d43a 	srli	r17,r4,16
100036b8:	25bfffcc 	andi	r22,r4,65535
100036bc:	dcc00315 	stw	r19,12(sp)
100036c0:	dc800215 	stw	r18,8(sp)
100036c4:	2027883a 	mov	r19,r4
100036c8:	2825883a 	mov	r18,r5
100036cc:	b009883a 	mov	r4,r22
100036d0:	a80b883a 	mov	r5,r21
100036d4:	dfc00915 	stw	ra,36(sp)
100036d8:	df000815 	stw	fp,32(sp)
100036dc:	ddc00715 	stw	r23,28(sp)
100036e0:	3839883a 	mov	fp,r7
100036e4:	302ed43a 	srli	r23,r6,16
100036e8:	dd000415 	stw	r20,16(sp)
100036ec:	dc000015 	stw	r16,0(sp)
100036f0:	3029883a 	mov	r20,r6
100036f4:	00009cc0 	call	100009cc <__mulsi3>
100036f8:	a80b883a 	mov	r5,r21
100036fc:	8809883a 	mov	r4,r17
10003700:	1021883a 	mov	r16,r2
10003704:	00009cc0 	call	100009cc <__mulsi3>
10003708:	8809883a 	mov	r4,r17
1000370c:	b80b883a 	mov	r5,r23
10003710:	102b883a 	mov	r21,r2
10003714:	00009cc0 	call	100009cc <__mulsi3>
10003718:	b80b883a 	mov	r5,r23
1000371c:	b009883a 	mov	r4,r22
10003720:	1023883a 	mov	r17,r2
10003724:	00009cc0 	call	100009cc <__mulsi3>
10003728:	8006d43a 	srli	r3,r16,16
1000372c:	1545883a 	add	r2,r2,r21
10003730:	1885883a 	add	r2,r3,r2
10003734:	1540022e 	bgeu	r2,r21,10003740 <__muldi3+0xa0>
10003738:	00c00074 	movhi	r3,1
1000373c:	88e3883a 	add	r17,r17,r3
10003740:	1006d43a 	srli	r3,r2,16
10003744:	1004943a 	slli	r2,r2,16
10003748:	e00b883a 	mov	r5,fp
1000374c:	9809883a 	mov	r4,r19
10003750:	843fffcc 	andi	r16,r16,65535
10003754:	1c63883a 	add	r17,r3,r17
10003758:	1421883a 	add	r16,r2,r16
1000375c:	00009cc0 	call	100009cc <__mulsi3>
10003760:	900b883a 	mov	r5,r18
10003764:	a009883a 	mov	r4,r20
10003768:	1027883a 	mov	r19,r2
1000376c:	00009cc0 	call	100009cc <__mulsi3>
10003770:	9885883a 	add	r2,r19,r2
10003774:	1447883a 	add	r3,r2,r17
10003778:	8005883a 	mov	r2,r16
1000377c:	dfc00917 	ldw	ra,36(sp)
10003780:	df000817 	ldw	fp,32(sp)
10003784:	ddc00717 	ldw	r23,28(sp)
10003788:	dd800617 	ldw	r22,24(sp)
1000378c:	dd400517 	ldw	r21,20(sp)
10003790:	dd000417 	ldw	r20,16(sp)
10003794:	dcc00317 	ldw	r19,12(sp)
10003798:	dc800217 	ldw	r18,8(sp)
1000379c:	dc400117 	ldw	r17,4(sp)
100037a0:	dc000017 	ldw	r16,0(sp)
100037a4:	dec00a04 	addi	sp,sp,40
100037a8:	f800283a 	ret

100037ac <__divsi3>:
100037ac:	20001b16 	blt	r4,zero,1000381c <__divsi3+0x70>
100037b0:	000f883a 	mov	r7,zero
100037b4:	28001616 	blt	r5,zero,10003810 <__divsi3+0x64>
100037b8:	200d883a 	mov	r6,r4
100037bc:	29001a2e 	bgeu	r5,r4,10003828 <__divsi3+0x7c>
100037c0:	00800804 	movi	r2,32
100037c4:	00c00044 	movi	r3,1
100037c8:	00000106 	br	100037d0 <__divsi3+0x24>
100037cc:	10000d26 	beq	r2,zero,10003804 <__divsi3+0x58>
100037d0:	294b883a 	add	r5,r5,r5
100037d4:	10bfffc4 	addi	r2,r2,-1
100037d8:	18c7883a 	add	r3,r3,r3
100037dc:	293ffb36 	bltu	r5,r4,100037cc <__alt_data_end+0xf80037cc>
100037e0:	0005883a 	mov	r2,zero
100037e4:	18000726 	beq	r3,zero,10003804 <__divsi3+0x58>
100037e8:	0005883a 	mov	r2,zero
100037ec:	31400236 	bltu	r6,r5,100037f8 <__divsi3+0x4c>
100037f0:	314dc83a 	sub	r6,r6,r5
100037f4:	10c4b03a 	or	r2,r2,r3
100037f8:	1806d07a 	srli	r3,r3,1
100037fc:	280ad07a 	srli	r5,r5,1
10003800:	183ffa1e 	bne	r3,zero,100037ec <__alt_data_end+0xf80037ec>
10003804:	38000126 	beq	r7,zero,1000380c <__divsi3+0x60>
10003808:	0085c83a 	sub	r2,zero,r2
1000380c:	f800283a 	ret
10003810:	014bc83a 	sub	r5,zero,r5
10003814:	39c0005c 	xori	r7,r7,1
10003818:	003fe706 	br	100037b8 <__alt_data_end+0xf80037b8>
1000381c:	0109c83a 	sub	r4,zero,r4
10003820:	01c00044 	movi	r7,1
10003824:	003fe306 	br	100037b4 <__alt_data_end+0xf80037b4>
10003828:	00c00044 	movi	r3,1
1000382c:	003fee06 	br	100037e8 <__alt_data_end+0xf80037e8>

10003830 <__modsi3>:
10003830:	20001716 	blt	r4,zero,10003890 <__modsi3+0x60>
10003834:	000f883a 	mov	r7,zero
10003838:	2005883a 	mov	r2,r4
1000383c:	28001216 	blt	r5,zero,10003888 <__modsi3+0x58>
10003840:	2900162e 	bgeu	r5,r4,1000389c <__modsi3+0x6c>
10003844:	01800804 	movi	r6,32
10003848:	00c00044 	movi	r3,1
1000384c:	00000106 	br	10003854 <__modsi3+0x24>
10003850:	30000a26 	beq	r6,zero,1000387c <__modsi3+0x4c>
10003854:	294b883a 	add	r5,r5,r5
10003858:	31bfffc4 	addi	r6,r6,-1
1000385c:	18c7883a 	add	r3,r3,r3
10003860:	293ffb36 	bltu	r5,r4,10003850 <__alt_data_end+0xf8003850>
10003864:	18000526 	beq	r3,zero,1000387c <__modsi3+0x4c>
10003868:	1806d07a 	srli	r3,r3,1
1000386c:	11400136 	bltu	r2,r5,10003874 <__modsi3+0x44>
10003870:	1145c83a 	sub	r2,r2,r5
10003874:	280ad07a 	srli	r5,r5,1
10003878:	183ffb1e 	bne	r3,zero,10003868 <__alt_data_end+0xf8003868>
1000387c:	38000126 	beq	r7,zero,10003884 <__modsi3+0x54>
10003880:	0085c83a 	sub	r2,zero,r2
10003884:	f800283a 	ret
10003888:	014bc83a 	sub	r5,zero,r5
1000388c:	003fec06 	br	10003840 <__alt_data_end+0xf8003840>
10003890:	0109c83a 	sub	r4,zero,r4
10003894:	01c00044 	movi	r7,1
10003898:	003fe706 	br	10003838 <__alt_data_end+0xf8003838>
1000389c:	00c00044 	movi	r3,1
100038a0:	003ff106 	br	10003868 <__alt_data_end+0xf8003868>

100038a4 <__udivsi3>:
100038a4:	200d883a 	mov	r6,r4
100038a8:	2900152e 	bgeu	r5,r4,10003900 <__udivsi3+0x5c>
100038ac:	28001416 	blt	r5,zero,10003900 <__udivsi3+0x5c>
100038b0:	00800804 	movi	r2,32
100038b4:	00c00044 	movi	r3,1
100038b8:	00000206 	br	100038c4 <__udivsi3+0x20>
100038bc:	10000e26 	beq	r2,zero,100038f8 <__udivsi3+0x54>
100038c0:	28000516 	blt	r5,zero,100038d8 <__udivsi3+0x34>
100038c4:	294b883a 	add	r5,r5,r5
100038c8:	10bfffc4 	addi	r2,r2,-1
100038cc:	18c7883a 	add	r3,r3,r3
100038d0:	293ffa36 	bltu	r5,r4,100038bc <__alt_data_end+0xf80038bc>
100038d4:	18000826 	beq	r3,zero,100038f8 <__udivsi3+0x54>
100038d8:	0005883a 	mov	r2,zero
100038dc:	31400236 	bltu	r6,r5,100038e8 <__udivsi3+0x44>
100038e0:	314dc83a 	sub	r6,r6,r5
100038e4:	10c4b03a 	or	r2,r2,r3
100038e8:	1806d07a 	srli	r3,r3,1
100038ec:	280ad07a 	srli	r5,r5,1
100038f0:	183ffa1e 	bne	r3,zero,100038dc <__alt_data_end+0xf80038dc>
100038f4:	f800283a 	ret
100038f8:	0005883a 	mov	r2,zero
100038fc:	f800283a 	ret
10003900:	00c00044 	movi	r3,1
10003904:	003ff406 	br	100038d8 <__alt_data_end+0xf80038d8>

10003908 <__umodsi3>:
10003908:	2005883a 	mov	r2,r4
1000390c:	2900122e 	bgeu	r5,r4,10003958 <__umodsi3+0x50>
10003910:	28001116 	blt	r5,zero,10003958 <__umodsi3+0x50>
10003914:	01800804 	movi	r6,32
10003918:	00c00044 	movi	r3,1
1000391c:	00000206 	br	10003928 <__umodsi3+0x20>
10003920:	30000c26 	beq	r6,zero,10003954 <__umodsi3+0x4c>
10003924:	28000516 	blt	r5,zero,1000393c <__umodsi3+0x34>
10003928:	294b883a 	add	r5,r5,r5
1000392c:	31bfffc4 	addi	r6,r6,-1
10003930:	18c7883a 	add	r3,r3,r3
10003934:	293ffa36 	bltu	r5,r4,10003920 <__alt_data_end+0xf8003920>
10003938:	18000626 	beq	r3,zero,10003954 <__umodsi3+0x4c>
1000393c:	1806d07a 	srli	r3,r3,1
10003940:	11400136 	bltu	r2,r5,10003948 <__umodsi3+0x40>
10003944:	1145c83a 	sub	r2,r2,r5
10003948:	280ad07a 	srli	r5,r5,1
1000394c:	183ffb1e 	bne	r3,zero,1000393c <__alt_data_end+0xf800393c>
10003950:	f800283a 	ret
10003954:	f800283a 	ret
10003958:	00c00044 	movi	r3,1
1000395c:	003ff706 	br	1000393c <__alt_data_end+0xf800393c>

10003960 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003960:	defffe04 	addi	sp,sp,-8
10003964:	dfc00115 	stw	ra,4(sp)
10003968:	df000015 	stw	fp,0(sp)
1000396c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003970:	d0a00b17 	ldw	r2,-32724(gp)
10003974:	10000326 	beq	r2,zero,10003984 <alt_get_errno+0x24>
10003978:	d0a00b17 	ldw	r2,-32724(gp)
1000397c:	103ee83a 	callr	r2
10003980:	00000106 	br	10003988 <alt_get_errno+0x28>
10003984:	d0a76804 	addi	r2,gp,-25184
}
10003988:	e037883a 	mov	sp,fp
1000398c:	dfc00117 	ldw	ra,4(sp)
10003990:	df000017 	ldw	fp,0(sp)
10003994:	dec00204 	addi	sp,sp,8
10003998:	f800283a 	ret

1000399c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000399c:	defffb04 	addi	sp,sp,-20
100039a0:	dfc00415 	stw	ra,16(sp)
100039a4:	df000315 	stw	fp,12(sp)
100039a8:	df000304 	addi	fp,sp,12
100039ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100039b0:	e0bfff17 	ldw	r2,-4(fp)
100039b4:	10000816 	blt	r2,zero,100039d8 <close+0x3c>
100039b8:	01400304 	movi	r5,12
100039bc:	e13fff17 	ldw	r4,-4(fp)
100039c0:	00009cc0 	call	100009cc <__mulsi3>
100039c4:	1007883a 	mov	r3,r2
100039c8:	00840034 	movhi	r2,4096
100039cc:	109b4904 	addi	r2,r2,27940
100039d0:	1885883a 	add	r2,r3,r2
100039d4:	00000106 	br	100039dc <close+0x40>
100039d8:	0005883a 	mov	r2,zero
100039dc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
100039e0:	e0bffd17 	ldw	r2,-12(fp)
100039e4:	10001926 	beq	r2,zero,10003a4c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100039e8:	e0bffd17 	ldw	r2,-12(fp)
100039ec:	10800017 	ldw	r2,0(r2)
100039f0:	10800417 	ldw	r2,16(r2)
100039f4:	10000626 	beq	r2,zero,10003a10 <close+0x74>
100039f8:	e0bffd17 	ldw	r2,-12(fp)
100039fc:	10800017 	ldw	r2,0(r2)
10003a00:	10800417 	ldw	r2,16(r2)
10003a04:	e13ffd17 	ldw	r4,-12(fp)
10003a08:	103ee83a 	callr	r2
10003a0c:	00000106 	br	10003a14 <close+0x78>
10003a10:	0005883a 	mov	r2,zero
10003a14:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10003a18:	e13fff17 	ldw	r4,-4(fp)
10003a1c:	00040840 	call	10004084 <alt_release_fd>
    if (rval < 0)
10003a20:	e0bffe17 	ldw	r2,-8(fp)
10003a24:	1000070e 	bge	r2,zero,10003a44 <close+0xa8>
    {
      ALT_ERRNO = -rval;
10003a28:	00039600 	call	10003960 <alt_get_errno>
10003a2c:	1007883a 	mov	r3,r2
10003a30:	e0bffe17 	ldw	r2,-8(fp)
10003a34:	0085c83a 	sub	r2,zero,r2
10003a38:	18800015 	stw	r2,0(r3)
      return -1;
10003a3c:	00bfffc4 	movi	r2,-1
10003a40:	00000706 	br	10003a60 <close+0xc4>
    }
    return 0;
10003a44:	0005883a 	mov	r2,zero
10003a48:	00000506 	br	10003a60 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10003a4c:	00039600 	call	10003960 <alt_get_errno>
10003a50:	1007883a 	mov	r3,r2
10003a54:	00801444 	movi	r2,81
10003a58:	18800015 	stw	r2,0(r3)
    return -1;
10003a5c:	00bfffc4 	movi	r2,-1
  }
}
10003a60:	e037883a 	mov	sp,fp
10003a64:	dfc00117 	ldw	ra,4(sp)
10003a68:	df000017 	ldw	fp,0(sp)
10003a6c:	dec00204 	addi	sp,sp,8
10003a70:	f800283a 	ret

10003a74 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10003a74:	defffc04 	addi	sp,sp,-16
10003a78:	df000315 	stw	fp,12(sp)
10003a7c:	df000304 	addi	fp,sp,12
10003a80:	e13ffd15 	stw	r4,-12(fp)
10003a84:	e17ffe15 	stw	r5,-8(fp)
10003a88:	e1bfff15 	stw	r6,-4(fp)
  return len;
10003a8c:	e0bfff17 	ldw	r2,-4(fp)
}
10003a90:	e037883a 	mov	sp,fp
10003a94:	df000017 	ldw	fp,0(sp)
10003a98:	dec00104 	addi	sp,sp,4
10003a9c:	f800283a 	ret

10003aa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003aa0:	defffe04 	addi	sp,sp,-8
10003aa4:	dfc00115 	stw	ra,4(sp)
10003aa8:	df000015 	stw	fp,0(sp)
10003aac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003ab0:	d0a00b17 	ldw	r2,-32724(gp)
10003ab4:	10000326 	beq	r2,zero,10003ac4 <alt_get_errno+0x24>
10003ab8:	d0a00b17 	ldw	r2,-32724(gp)
10003abc:	103ee83a 	callr	r2
10003ac0:	00000106 	br	10003ac8 <alt_get_errno+0x28>
10003ac4:	d0a76804 	addi	r2,gp,-25184
}
10003ac8:	e037883a 	mov	sp,fp
10003acc:	dfc00117 	ldw	ra,4(sp)
10003ad0:	df000017 	ldw	fp,0(sp)
10003ad4:	dec00204 	addi	sp,sp,8
10003ad8:	f800283a 	ret

10003adc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10003adc:	defffb04 	addi	sp,sp,-20
10003ae0:	dfc00415 	stw	ra,16(sp)
10003ae4:	df000315 	stw	fp,12(sp)
10003ae8:	df000304 	addi	fp,sp,12
10003aec:	e13ffe15 	stw	r4,-8(fp)
10003af0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003af4:	e0bffe17 	ldw	r2,-8(fp)
10003af8:	10000816 	blt	r2,zero,10003b1c <fstat+0x40>
10003afc:	01400304 	movi	r5,12
10003b00:	e13ffe17 	ldw	r4,-8(fp)
10003b04:	00009cc0 	call	100009cc <__mulsi3>
10003b08:	1007883a 	mov	r3,r2
10003b0c:	00840034 	movhi	r2,4096
10003b10:	109b4904 	addi	r2,r2,27940
10003b14:	1885883a 	add	r2,r3,r2
10003b18:	00000106 	br	10003b20 <fstat+0x44>
10003b1c:	0005883a 	mov	r2,zero
10003b20:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10003b24:	e0bffd17 	ldw	r2,-12(fp)
10003b28:	10001026 	beq	r2,zero,10003b6c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10003b2c:	e0bffd17 	ldw	r2,-12(fp)
10003b30:	10800017 	ldw	r2,0(r2)
10003b34:	10800817 	ldw	r2,32(r2)
10003b38:	10000726 	beq	r2,zero,10003b58 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10003b3c:	e0bffd17 	ldw	r2,-12(fp)
10003b40:	10800017 	ldw	r2,0(r2)
10003b44:	10800817 	ldw	r2,32(r2)
10003b48:	e17fff17 	ldw	r5,-4(fp)
10003b4c:	e13ffd17 	ldw	r4,-12(fp)
10003b50:	103ee83a 	callr	r2
10003b54:	00000a06 	br	10003b80 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10003b58:	e0bfff17 	ldw	r2,-4(fp)
10003b5c:	00c80004 	movi	r3,8192
10003b60:	10c00115 	stw	r3,4(r2)
      return 0;
10003b64:	0005883a 	mov	r2,zero
10003b68:	00000506 	br	10003b80 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10003b6c:	0003aa00 	call	10003aa0 <alt_get_errno>
10003b70:	1007883a 	mov	r3,r2
10003b74:	00801444 	movi	r2,81
10003b78:	18800015 	stw	r2,0(r3)
    return -1;
10003b7c:	00bfffc4 	movi	r2,-1
  }
}
10003b80:	e037883a 	mov	sp,fp
10003b84:	dfc00117 	ldw	ra,4(sp)
10003b88:	df000017 	ldw	fp,0(sp)
10003b8c:	dec00204 	addi	sp,sp,8
10003b90:	f800283a 	ret

10003b94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003b94:	defffe04 	addi	sp,sp,-8
10003b98:	dfc00115 	stw	ra,4(sp)
10003b9c:	df000015 	stw	fp,0(sp)
10003ba0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003ba4:	d0a00b17 	ldw	r2,-32724(gp)
10003ba8:	10000326 	beq	r2,zero,10003bb8 <alt_get_errno+0x24>
10003bac:	d0a00b17 	ldw	r2,-32724(gp)
10003bb0:	103ee83a 	callr	r2
10003bb4:	00000106 	br	10003bbc <alt_get_errno+0x28>
10003bb8:	d0a76804 	addi	r2,gp,-25184
}
10003bbc:	e037883a 	mov	sp,fp
10003bc0:	dfc00117 	ldw	ra,4(sp)
10003bc4:	df000017 	ldw	fp,0(sp)
10003bc8:	dec00204 	addi	sp,sp,8
10003bcc:	f800283a 	ret

10003bd0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10003bd0:	deffed04 	addi	sp,sp,-76
10003bd4:	dfc01215 	stw	ra,72(sp)
10003bd8:	df001115 	stw	fp,68(sp)
10003bdc:	df001104 	addi	fp,sp,68
10003be0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003be4:	e0bfff17 	ldw	r2,-4(fp)
10003be8:	10000816 	blt	r2,zero,10003c0c <isatty+0x3c>
10003bec:	01400304 	movi	r5,12
10003bf0:	e13fff17 	ldw	r4,-4(fp)
10003bf4:	00009cc0 	call	100009cc <__mulsi3>
10003bf8:	1007883a 	mov	r3,r2
10003bfc:	00840034 	movhi	r2,4096
10003c00:	109b4904 	addi	r2,r2,27940
10003c04:	1885883a 	add	r2,r3,r2
10003c08:	00000106 	br	10003c10 <isatty+0x40>
10003c0c:	0005883a 	mov	r2,zero
10003c10:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10003c14:	e0bfef17 	ldw	r2,-68(fp)
10003c18:	10000e26 	beq	r2,zero,10003c54 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10003c1c:	e0bfef17 	ldw	r2,-68(fp)
10003c20:	10800017 	ldw	r2,0(r2)
10003c24:	10800817 	ldw	r2,32(r2)
10003c28:	1000021e 	bne	r2,zero,10003c34 <isatty+0x64>
    {
      return 1;
10003c2c:	00800044 	movi	r2,1
10003c30:	00000d06 	br	10003c68 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10003c34:	e0bff004 	addi	r2,fp,-64
10003c38:	100b883a 	mov	r5,r2
10003c3c:	e13fff17 	ldw	r4,-4(fp)
10003c40:	0003adc0 	call	10003adc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10003c44:	e0bff117 	ldw	r2,-60(fp)
10003c48:	10880020 	cmpeqi	r2,r2,8192
10003c4c:	10803fcc 	andi	r2,r2,255
10003c50:	00000506 	br	10003c68 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10003c54:	0003b940 	call	10003b94 <alt_get_errno>
10003c58:	1007883a 	mov	r3,r2
10003c5c:	00801444 	movi	r2,81
10003c60:	18800015 	stw	r2,0(r3)
    return 0;
10003c64:	0005883a 	mov	r2,zero
  }
}
10003c68:	e037883a 	mov	sp,fp
10003c6c:	dfc00117 	ldw	ra,4(sp)
10003c70:	df000017 	ldw	fp,0(sp)
10003c74:	dec00204 	addi	sp,sp,8
10003c78:	f800283a 	ret

10003c7c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10003c7c:	defffc04 	addi	sp,sp,-16
10003c80:	df000315 	stw	fp,12(sp)
10003c84:	df000304 	addi	fp,sp,12
10003c88:	e13ffd15 	stw	r4,-12(fp)
10003c8c:	e17ffe15 	stw	r5,-8(fp)
10003c90:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10003c94:	e0fffe17 	ldw	r3,-8(fp)
10003c98:	e0bffd17 	ldw	r2,-12(fp)
10003c9c:	18800c26 	beq	r3,r2,10003cd0 <alt_load_section+0x54>
  {
    while( to != end )
10003ca0:	00000806 	br	10003cc4 <alt_load_section+0x48>
    {
      *to++ = *from++;
10003ca4:	e0bffe17 	ldw	r2,-8(fp)
10003ca8:	10c00104 	addi	r3,r2,4
10003cac:	e0fffe15 	stw	r3,-8(fp)
10003cb0:	e0fffd17 	ldw	r3,-12(fp)
10003cb4:	19000104 	addi	r4,r3,4
10003cb8:	e13ffd15 	stw	r4,-12(fp)
10003cbc:	18c00017 	ldw	r3,0(r3)
10003cc0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10003cc4:	e0fffe17 	ldw	r3,-8(fp)
10003cc8:	e0bfff17 	ldw	r2,-4(fp)
10003ccc:	18bff51e 	bne	r3,r2,10003ca4 <__alt_data_end+0xf8003ca4>
    {
      *to++ = *from++;
    }
  }
}
10003cd0:	0001883a 	nop
10003cd4:	e037883a 	mov	sp,fp
10003cd8:	df000017 	ldw	fp,0(sp)
10003cdc:	dec00104 	addi	sp,sp,4
10003ce0:	f800283a 	ret

10003ce4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10003ce4:	defffe04 	addi	sp,sp,-8
10003ce8:	dfc00115 	stw	ra,4(sp)
10003cec:	df000015 	stw	fp,0(sp)
10003cf0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10003cf4:	01840034 	movhi	r6,4096
10003cf8:	319fd104 	addi	r6,r6,32580
10003cfc:	01440034 	movhi	r5,4096
10003d00:	29587c04 	addi	r5,r5,25072
10003d04:	01040034 	movhi	r4,4096
10003d08:	211fd104 	addi	r4,r4,32580
10003d0c:	0003c7c0 	call	10003c7c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10003d10:	01840034 	movhi	r6,4096
10003d14:	31808c04 	addi	r6,r6,560
10003d18:	01440034 	movhi	r5,4096
10003d1c:	29400804 	addi	r5,r5,32
10003d20:	01040034 	movhi	r4,4096
10003d24:	21000804 	addi	r4,r4,32
10003d28:	0003c7c0 	call	10003c7c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10003d2c:	01840034 	movhi	r6,4096
10003d30:	31987c04 	addi	r6,r6,25072
10003d34:	01440034 	movhi	r5,4096
10003d38:	29586004 	addi	r5,r5,24960
10003d3c:	01040034 	movhi	r4,4096
10003d40:	21186004 	addi	r4,r4,24960
10003d44:	0003c7c0 	call	10003c7c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10003d48:	00050c80 	call	100050c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
10003d4c:	00052880 	call	10005288 <alt_icache_flush_all>
}
10003d50:	0001883a 	nop
10003d54:	e037883a 	mov	sp,fp
10003d58:	dfc00117 	ldw	ra,4(sp)
10003d5c:	df000017 	ldw	fp,0(sp)
10003d60:	dec00204 	addi	sp,sp,8
10003d64:	f800283a 	ret

10003d68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003d68:	defffe04 	addi	sp,sp,-8
10003d6c:	dfc00115 	stw	ra,4(sp)
10003d70:	df000015 	stw	fp,0(sp)
10003d74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003d78:	d0a00b17 	ldw	r2,-32724(gp)
10003d7c:	10000326 	beq	r2,zero,10003d8c <alt_get_errno+0x24>
10003d80:	d0a00b17 	ldw	r2,-32724(gp)
10003d84:	103ee83a 	callr	r2
10003d88:	00000106 	br	10003d90 <alt_get_errno+0x28>
10003d8c:	d0a76804 	addi	r2,gp,-25184
}
10003d90:	e037883a 	mov	sp,fp
10003d94:	dfc00117 	ldw	ra,4(sp)
10003d98:	df000017 	ldw	fp,0(sp)
10003d9c:	dec00204 	addi	sp,sp,8
10003da0:	f800283a 	ret

10003da4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10003da4:	defff904 	addi	sp,sp,-28
10003da8:	dfc00615 	stw	ra,24(sp)
10003dac:	df000515 	stw	fp,20(sp)
10003db0:	df000504 	addi	fp,sp,20
10003db4:	e13ffd15 	stw	r4,-12(fp)
10003db8:	e17ffe15 	stw	r5,-8(fp)
10003dbc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10003dc0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003dc4:	e0bffd17 	ldw	r2,-12(fp)
10003dc8:	10000816 	blt	r2,zero,10003dec <lseek+0x48>
10003dcc:	01400304 	movi	r5,12
10003dd0:	e13ffd17 	ldw	r4,-12(fp)
10003dd4:	00009cc0 	call	100009cc <__mulsi3>
10003dd8:	1007883a 	mov	r3,r2
10003ddc:	00840034 	movhi	r2,4096
10003de0:	109b4904 	addi	r2,r2,27940
10003de4:	1885883a 	add	r2,r3,r2
10003de8:	00000106 	br	10003df0 <lseek+0x4c>
10003dec:	0005883a 	mov	r2,zero
10003df0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10003df4:	e0bffc17 	ldw	r2,-16(fp)
10003df8:	10001026 	beq	r2,zero,10003e3c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10003dfc:	e0bffc17 	ldw	r2,-16(fp)
10003e00:	10800017 	ldw	r2,0(r2)
10003e04:	10800717 	ldw	r2,28(r2)
10003e08:	10000926 	beq	r2,zero,10003e30 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10003e0c:	e0bffc17 	ldw	r2,-16(fp)
10003e10:	10800017 	ldw	r2,0(r2)
10003e14:	10800717 	ldw	r2,28(r2)
10003e18:	e1bfff17 	ldw	r6,-4(fp)
10003e1c:	e17ffe17 	ldw	r5,-8(fp)
10003e20:	e13ffc17 	ldw	r4,-16(fp)
10003e24:	103ee83a 	callr	r2
10003e28:	e0bffb15 	stw	r2,-20(fp)
10003e2c:	00000506 	br	10003e44 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10003e30:	00bfde84 	movi	r2,-134
10003e34:	e0bffb15 	stw	r2,-20(fp)
10003e38:	00000206 	br	10003e44 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10003e3c:	00bfebc4 	movi	r2,-81
10003e40:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10003e44:	e0bffb17 	ldw	r2,-20(fp)
10003e48:	1000070e 	bge	r2,zero,10003e68 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10003e4c:	0003d680 	call	10003d68 <alt_get_errno>
10003e50:	1007883a 	mov	r3,r2
10003e54:	e0bffb17 	ldw	r2,-20(fp)
10003e58:	0085c83a 	sub	r2,zero,r2
10003e5c:	18800015 	stw	r2,0(r3)
    rc = -1;
10003e60:	00bfffc4 	movi	r2,-1
10003e64:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10003e68:	e0bffb17 	ldw	r2,-20(fp)
}
10003e6c:	e037883a 	mov	sp,fp
10003e70:	dfc00117 	ldw	ra,4(sp)
10003e74:	df000017 	ldw	fp,0(sp)
10003e78:	dec00204 	addi	sp,sp,8
10003e7c:	f800283a 	ret

10003e80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10003e80:	defffd04 	addi	sp,sp,-12
10003e84:	dfc00215 	stw	ra,8(sp)
10003e88:	df000115 	stw	fp,4(sp)
10003e8c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10003e90:	0009883a 	mov	r4,zero
10003e94:	00043580 	call	10004358 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10003e98:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10003e9c:	00043900 	call	10004390 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10003ea0:	01840034 	movhi	r6,4096
10003ea4:	31987204 	addi	r6,r6,25032
10003ea8:	01440034 	movhi	r5,4096
10003eac:	29587204 	addi	r5,r5,25032
10003eb0:	01040034 	movhi	r4,4096
10003eb4:	21187204 	addi	r4,r4,25032
10003eb8:	000562c0 	call	1000562c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10003ebc:	00051c80 	call	100051c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10003ec0:	01040034 	movhi	r4,4096
10003ec4:	21148a04 	addi	r4,r4,21032
10003ec8:	0005dec0 	call	10005dec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10003ecc:	d0a76917 	ldw	r2,-25180(gp)
10003ed0:	d0e76a17 	ldw	r3,-25176(gp)
10003ed4:	d1276b17 	ldw	r4,-25172(gp)
10003ed8:	200d883a 	mov	r6,r4
10003edc:	180b883a 	mov	r5,r3
10003ee0:	1009883a 	mov	r4,r2
10003ee4:	000026c0 	call	1000026c <main>
10003ee8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10003eec:	01000044 	movi	r4,1
10003ef0:	000399c0 	call	1000399c <close>
  exit (result);
10003ef4:	e13fff17 	ldw	r4,-4(fp)
10003ef8:	0005e000 	call	10005e00 <exit>

10003efc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10003efc:	defffe04 	addi	sp,sp,-8
10003f00:	df000115 	stw	fp,4(sp)
10003f04:	df000104 	addi	fp,sp,4
10003f08:	e13fff15 	stw	r4,-4(fp)
}
10003f0c:	0001883a 	nop
10003f10:	e037883a 	mov	sp,fp
10003f14:	df000017 	ldw	fp,0(sp)
10003f18:	dec00104 	addi	sp,sp,4
10003f1c:	f800283a 	ret

10003f20 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10003f20:	defffe04 	addi	sp,sp,-8
10003f24:	df000115 	stw	fp,4(sp)
10003f28:	df000104 	addi	fp,sp,4
10003f2c:	e13fff15 	stw	r4,-4(fp)
}
10003f30:	0001883a 	nop
10003f34:	e037883a 	mov	sp,fp
10003f38:	df000017 	ldw	fp,0(sp)
10003f3c:	dec00104 	addi	sp,sp,4
10003f40:	f800283a 	ret

10003f44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003f44:	defffe04 	addi	sp,sp,-8
10003f48:	dfc00115 	stw	ra,4(sp)
10003f4c:	df000015 	stw	fp,0(sp)
10003f50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003f54:	d0a00b17 	ldw	r2,-32724(gp)
10003f58:	10000326 	beq	r2,zero,10003f68 <alt_get_errno+0x24>
10003f5c:	d0a00b17 	ldw	r2,-32724(gp)
10003f60:	103ee83a 	callr	r2
10003f64:	00000106 	br	10003f6c <alt_get_errno+0x28>
10003f68:	d0a76804 	addi	r2,gp,-25184
}
10003f6c:	e037883a 	mov	sp,fp
10003f70:	dfc00117 	ldw	ra,4(sp)
10003f74:	df000017 	ldw	fp,0(sp)
10003f78:	dec00204 	addi	sp,sp,8
10003f7c:	f800283a 	ret

10003f80 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10003f80:	defff904 	addi	sp,sp,-28
10003f84:	dfc00615 	stw	ra,24(sp)
10003f88:	df000515 	stw	fp,20(sp)
10003f8c:	df000504 	addi	fp,sp,20
10003f90:	e13ffd15 	stw	r4,-12(fp)
10003f94:	e17ffe15 	stw	r5,-8(fp)
10003f98:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10003f9c:	e0bffd17 	ldw	r2,-12(fp)
10003fa0:	10000816 	blt	r2,zero,10003fc4 <read+0x44>
10003fa4:	01400304 	movi	r5,12
10003fa8:	e13ffd17 	ldw	r4,-12(fp)
10003fac:	00009cc0 	call	100009cc <__mulsi3>
10003fb0:	1007883a 	mov	r3,r2
10003fb4:	00840034 	movhi	r2,4096
10003fb8:	109b4904 	addi	r2,r2,27940
10003fbc:	1885883a 	add	r2,r3,r2
10003fc0:	00000106 	br	10003fc8 <read+0x48>
10003fc4:	0005883a 	mov	r2,zero
10003fc8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10003fcc:	e0bffb17 	ldw	r2,-20(fp)
10003fd0:	10002226 	beq	r2,zero,1000405c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10003fd4:	e0bffb17 	ldw	r2,-20(fp)
10003fd8:	10800217 	ldw	r2,8(r2)
10003fdc:	108000cc 	andi	r2,r2,3
10003fe0:	10800060 	cmpeqi	r2,r2,1
10003fe4:	1000181e 	bne	r2,zero,10004048 <read+0xc8>
        (fd->dev->read))
10003fe8:	e0bffb17 	ldw	r2,-20(fp)
10003fec:	10800017 	ldw	r2,0(r2)
10003ff0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10003ff4:	10001426 	beq	r2,zero,10004048 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10003ff8:	e0bffb17 	ldw	r2,-20(fp)
10003ffc:	10800017 	ldw	r2,0(r2)
10004000:	10800517 	ldw	r2,20(r2)
10004004:	e0ffff17 	ldw	r3,-4(fp)
10004008:	180d883a 	mov	r6,r3
1000400c:	e17ffe17 	ldw	r5,-8(fp)
10004010:	e13ffb17 	ldw	r4,-20(fp)
10004014:	103ee83a 	callr	r2
10004018:	e0bffc15 	stw	r2,-16(fp)
1000401c:	e0bffc17 	ldw	r2,-16(fp)
10004020:	1000070e 	bge	r2,zero,10004040 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10004024:	0003f440 	call	10003f44 <alt_get_errno>
10004028:	1007883a 	mov	r3,r2
1000402c:	e0bffc17 	ldw	r2,-16(fp)
10004030:	0085c83a 	sub	r2,zero,r2
10004034:	18800015 	stw	r2,0(r3)
          return -1;
10004038:	00bfffc4 	movi	r2,-1
1000403c:	00000c06 	br	10004070 <read+0xf0>
        }
        return rval;
10004040:	e0bffc17 	ldw	r2,-16(fp)
10004044:	00000a06 	br	10004070 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10004048:	0003f440 	call	10003f44 <alt_get_errno>
1000404c:	1007883a 	mov	r3,r2
10004050:	00800344 	movi	r2,13
10004054:	18800015 	stw	r2,0(r3)
10004058:	00000406 	br	1000406c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000405c:	0003f440 	call	10003f44 <alt_get_errno>
10004060:	1007883a 	mov	r3,r2
10004064:	00801444 	movi	r2,81
10004068:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000406c:	00bfffc4 	movi	r2,-1
}
10004070:	e037883a 	mov	sp,fp
10004074:	dfc00117 	ldw	ra,4(sp)
10004078:	df000017 	ldw	fp,0(sp)
1000407c:	dec00204 	addi	sp,sp,8
10004080:	f800283a 	ret

10004084 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10004084:	defffc04 	addi	sp,sp,-16
10004088:	dfc00315 	stw	ra,12(sp)
1000408c:	df000215 	stw	fp,8(sp)
10004090:	dc000115 	stw	r16,4(sp)
10004094:	df000204 	addi	fp,sp,8
10004098:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000409c:	e0bffe17 	ldw	r2,-8(fp)
100040a0:	108000d0 	cmplti	r2,r2,3
100040a4:	1000111e 	bne	r2,zero,100040ec <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
100040a8:	04040034 	movhi	r16,4096
100040ac:	841b4904 	addi	r16,r16,27940
100040b0:	e0bffe17 	ldw	r2,-8(fp)
100040b4:	01400304 	movi	r5,12
100040b8:	1009883a 	mov	r4,r2
100040bc:	00009cc0 	call	100009cc <__mulsi3>
100040c0:	8085883a 	add	r2,r16,r2
100040c4:	10800204 	addi	r2,r2,8
100040c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
100040cc:	04040034 	movhi	r16,4096
100040d0:	841b4904 	addi	r16,r16,27940
100040d4:	e0bffe17 	ldw	r2,-8(fp)
100040d8:	01400304 	movi	r5,12
100040dc:	1009883a 	mov	r4,r2
100040e0:	00009cc0 	call	100009cc <__mulsi3>
100040e4:	8085883a 	add	r2,r16,r2
100040e8:	10000015 	stw	zero,0(r2)
  }
}
100040ec:	0001883a 	nop
100040f0:	e6ffff04 	addi	sp,fp,-4
100040f4:	dfc00217 	ldw	ra,8(sp)
100040f8:	df000117 	ldw	fp,4(sp)
100040fc:	dc000017 	ldw	r16,0(sp)
10004100:	dec00304 	addi	sp,sp,12
10004104:	f800283a 	ret

10004108 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10004108:	defff904 	addi	sp,sp,-28
1000410c:	df000615 	stw	fp,24(sp)
10004110:	df000604 	addi	fp,sp,24
10004114:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004118:	0005303a 	rdctl	r2,status
1000411c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004120:	e0fffe17 	ldw	r3,-8(fp)
10004124:	00bfff84 	movi	r2,-2
10004128:	1884703a 	and	r2,r3,r2
1000412c:	1001703a 	wrctl	status,r2
  
  return context;
10004130:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10004134:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10004138:	d0a00c17 	ldw	r2,-32720(gp)
1000413c:	10c000c4 	addi	r3,r2,3
10004140:	00bfff04 	movi	r2,-4
10004144:	1884703a 	and	r2,r3,r2
10004148:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000414c:	d0e00c17 	ldw	r3,-32720(gp)
10004150:	e0bfff17 	ldw	r2,-4(fp)
10004154:	1887883a 	add	r3,r3,r2
10004158:	00860034 	movhi	r2,6144
1000415c:	10800004 	addi	r2,r2,0
10004160:	10c0062e 	bgeu	r2,r3,1000417c <sbrk+0x74>
10004164:	e0bffb17 	ldw	r2,-20(fp)
10004168:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000416c:	e0bffa17 	ldw	r2,-24(fp)
10004170:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10004174:	00bfffc4 	movi	r2,-1
10004178:	00000b06 	br	100041a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000417c:	d0a00c17 	ldw	r2,-32720(gp)
10004180:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10004184:	d0e00c17 	ldw	r3,-32720(gp)
10004188:	e0bfff17 	ldw	r2,-4(fp)
1000418c:	1885883a 	add	r2,r3,r2
10004190:	d0a00c15 	stw	r2,-32720(gp)
10004194:	e0bffb17 	ldw	r2,-20(fp)
10004198:	e0bffc15 	stw	r2,-16(fp)
1000419c:	e0bffc17 	ldw	r2,-16(fp)
100041a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
100041a4:	e0bffd17 	ldw	r2,-12(fp)
} 
100041a8:	e037883a 	mov	sp,fp
100041ac:	df000017 	ldw	fp,0(sp)
100041b0:	dec00104 	addi	sp,sp,4
100041b4:	f800283a 	ret

100041b8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
100041b8:	defffd04 	addi	sp,sp,-12
100041bc:	dfc00215 	stw	ra,8(sp)
100041c0:	df000115 	stw	fp,4(sp)
100041c4:	df000104 	addi	fp,sp,4
100041c8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
100041cc:	e13fff17 	ldw	r4,-4(fp)
100041d0:	0004f700 	call	10004f70 <alt_busy_sleep>
}
100041d4:	e037883a 	mov	sp,fp
100041d8:	dfc00117 	ldw	ra,4(sp)
100041dc:	df000017 	ldw	fp,0(sp)
100041e0:	dec00204 	addi	sp,sp,8
100041e4:	f800283a 	ret

100041e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100041e8:	defffe04 	addi	sp,sp,-8
100041ec:	dfc00115 	stw	ra,4(sp)
100041f0:	df000015 	stw	fp,0(sp)
100041f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100041f8:	d0a00b17 	ldw	r2,-32724(gp)
100041fc:	10000326 	beq	r2,zero,1000420c <alt_get_errno+0x24>
10004200:	d0a00b17 	ldw	r2,-32724(gp)
10004204:	103ee83a 	callr	r2
10004208:	00000106 	br	10004210 <alt_get_errno+0x28>
1000420c:	d0a76804 	addi	r2,gp,-25184
}
10004210:	e037883a 	mov	sp,fp
10004214:	dfc00117 	ldw	ra,4(sp)
10004218:	df000017 	ldw	fp,0(sp)
1000421c:	dec00204 	addi	sp,sp,8
10004220:	f800283a 	ret

10004224 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10004224:	defff904 	addi	sp,sp,-28
10004228:	dfc00615 	stw	ra,24(sp)
1000422c:	df000515 	stw	fp,20(sp)
10004230:	df000504 	addi	fp,sp,20
10004234:	e13ffd15 	stw	r4,-12(fp)
10004238:	e17ffe15 	stw	r5,-8(fp)
1000423c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10004240:	e0bffd17 	ldw	r2,-12(fp)
10004244:	10000816 	blt	r2,zero,10004268 <write+0x44>
10004248:	01400304 	movi	r5,12
1000424c:	e13ffd17 	ldw	r4,-12(fp)
10004250:	00009cc0 	call	100009cc <__mulsi3>
10004254:	1007883a 	mov	r3,r2
10004258:	00840034 	movhi	r2,4096
1000425c:	109b4904 	addi	r2,r2,27940
10004260:	1885883a 	add	r2,r3,r2
10004264:	00000106 	br	1000426c <write+0x48>
10004268:	0005883a 	mov	r2,zero
1000426c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10004270:	e0bffb17 	ldw	r2,-20(fp)
10004274:	10002126 	beq	r2,zero,100042fc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10004278:	e0bffb17 	ldw	r2,-20(fp)
1000427c:	10800217 	ldw	r2,8(r2)
10004280:	108000cc 	andi	r2,r2,3
10004284:	10001826 	beq	r2,zero,100042e8 <write+0xc4>
10004288:	e0bffb17 	ldw	r2,-20(fp)
1000428c:	10800017 	ldw	r2,0(r2)
10004290:	10800617 	ldw	r2,24(r2)
10004294:	10001426 	beq	r2,zero,100042e8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10004298:	e0bffb17 	ldw	r2,-20(fp)
1000429c:	10800017 	ldw	r2,0(r2)
100042a0:	10800617 	ldw	r2,24(r2)
100042a4:	e0ffff17 	ldw	r3,-4(fp)
100042a8:	180d883a 	mov	r6,r3
100042ac:	e17ffe17 	ldw	r5,-8(fp)
100042b0:	e13ffb17 	ldw	r4,-20(fp)
100042b4:	103ee83a 	callr	r2
100042b8:	e0bffc15 	stw	r2,-16(fp)
100042bc:	e0bffc17 	ldw	r2,-16(fp)
100042c0:	1000070e 	bge	r2,zero,100042e0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
100042c4:	00041e80 	call	100041e8 <alt_get_errno>
100042c8:	1007883a 	mov	r3,r2
100042cc:	e0bffc17 	ldw	r2,-16(fp)
100042d0:	0085c83a 	sub	r2,zero,r2
100042d4:	18800015 	stw	r2,0(r3)
        return -1;
100042d8:	00bfffc4 	movi	r2,-1
100042dc:	00000c06 	br	10004310 <write+0xec>
      }
      return rval;
100042e0:	e0bffc17 	ldw	r2,-16(fp)
100042e4:	00000a06 	br	10004310 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100042e8:	00041e80 	call	100041e8 <alt_get_errno>
100042ec:	1007883a 	mov	r3,r2
100042f0:	00800344 	movi	r2,13
100042f4:	18800015 	stw	r2,0(r3)
100042f8:	00000406 	br	1000430c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
100042fc:	00041e80 	call	100041e8 <alt_get_errno>
10004300:	1007883a 	mov	r3,r2
10004304:	00801444 	movi	r2,81
10004308:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000430c:	00bfffc4 	movi	r2,-1
}
10004310:	e037883a 	mov	sp,fp
10004314:	dfc00117 	ldw	ra,4(sp)
10004318:	df000017 	ldw	fp,0(sp)
1000431c:	dec00204 	addi	sp,sp,8
10004320:	f800283a 	ret

10004324 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10004324:	defffd04 	addi	sp,sp,-12
10004328:	dfc00215 	stw	ra,8(sp)
1000432c:	df000115 	stw	fp,4(sp)
10004330:	df000104 	addi	fp,sp,4
10004334:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10004338:	d1600804 	addi	r5,gp,-32736
1000433c:	e13fff17 	ldw	r4,-4(fp)
10004340:	00051240 	call	10005124 <alt_dev_llist_insert>
}
10004344:	e037883a 	mov	sp,fp
10004348:	dfc00117 	ldw	ra,4(sp)
1000434c:	df000017 	ldw	fp,0(sp)
10004350:	dec00204 	addi	sp,sp,8
10004354:	f800283a 	ret

10004358 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10004358:	defffd04 	addi	sp,sp,-12
1000435c:	dfc00215 	stw	ra,8(sp)
10004360:	df000115 	stw	fp,4(sp)
10004364:	df000104 	addi	fp,sp,4
10004368:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1000436c:	0005ad00 	call	10005ad0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10004370:	00800044 	movi	r2,1
10004374:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10004378:	0001883a 	nop
1000437c:	e037883a 	mov	sp,fp
10004380:	dfc00117 	ldw	ra,4(sp)
10004384:	df000017 	ldw	fp,0(sp)
10004388:	dec00204 	addi	sp,sp,8
1000438c:	f800283a 	ret

10004390 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10004390:	defffe04 	addi	sp,sp,-8
10004394:	dfc00115 	stw	ra,4(sp)
10004398:	df000015 	stw	fp,0(sp)
1000439c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100043a0:	01800144 	movi	r6,5
100043a4:	000b883a 	mov	r5,zero
100043a8:	01040034 	movhi	r4,4096
100043ac:	211bb304 	addi	r4,r4,28364
100043b0:	00045400 	call	10004540 <altera_avalon_jtag_uart_init>
100043b4:	01040034 	movhi	r4,4096
100043b8:	211ba904 	addi	r4,r4,28324
100043bc:	00043240 	call	10004324 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100043c0:	0001883a 	nop
}
100043c4:	0001883a 	nop
100043c8:	e037883a 	mov	sp,fp
100043cc:	dfc00117 	ldw	ra,4(sp)
100043d0:	df000017 	ldw	fp,0(sp)
100043d4:	dec00204 	addi	sp,sp,8
100043d8:	f800283a 	ret

100043dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100043dc:	defffa04 	addi	sp,sp,-24
100043e0:	dfc00515 	stw	ra,20(sp)
100043e4:	df000415 	stw	fp,16(sp)
100043e8:	df000404 	addi	fp,sp,16
100043ec:	e13ffd15 	stw	r4,-12(fp)
100043f0:	e17ffe15 	stw	r5,-8(fp)
100043f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100043f8:	e0bffd17 	ldw	r2,-12(fp)
100043fc:	10800017 	ldw	r2,0(r2)
10004400:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10004404:	e0bffc17 	ldw	r2,-16(fp)
10004408:	10c00a04 	addi	r3,r2,40
1000440c:	e0bffd17 	ldw	r2,-12(fp)
10004410:	10800217 	ldw	r2,8(r2)
10004414:	100f883a 	mov	r7,r2
10004418:	e1bfff17 	ldw	r6,-4(fp)
1000441c:	e17ffe17 	ldw	r5,-8(fp)
10004420:	1809883a 	mov	r4,r3
10004424:	0004a040 	call	10004a04 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10004428:	e037883a 	mov	sp,fp
1000442c:	dfc00117 	ldw	ra,4(sp)
10004430:	df000017 	ldw	fp,0(sp)
10004434:	dec00204 	addi	sp,sp,8
10004438:	f800283a 	ret

1000443c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000443c:	defffa04 	addi	sp,sp,-24
10004440:	dfc00515 	stw	ra,20(sp)
10004444:	df000415 	stw	fp,16(sp)
10004448:	df000404 	addi	fp,sp,16
1000444c:	e13ffd15 	stw	r4,-12(fp)
10004450:	e17ffe15 	stw	r5,-8(fp)
10004454:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10004458:	e0bffd17 	ldw	r2,-12(fp)
1000445c:	10800017 	ldw	r2,0(r2)
10004460:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10004464:	e0bffc17 	ldw	r2,-16(fp)
10004468:	10c00a04 	addi	r3,r2,40
1000446c:	e0bffd17 	ldw	r2,-12(fp)
10004470:	10800217 	ldw	r2,8(r2)
10004474:	100f883a 	mov	r7,r2
10004478:	e1bfff17 	ldw	r6,-4(fp)
1000447c:	e17ffe17 	ldw	r5,-8(fp)
10004480:	1809883a 	mov	r4,r3
10004484:	0004c200 	call	10004c20 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10004488:	e037883a 	mov	sp,fp
1000448c:	dfc00117 	ldw	ra,4(sp)
10004490:	df000017 	ldw	fp,0(sp)
10004494:	dec00204 	addi	sp,sp,8
10004498:	f800283a 	ret

1000449c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000449c:	defffc04 	addi	sp,sp,-16
100044a0:	dfc00315 	stw	ra,12(sp)
100044a4:	df000215 	stw	fp,8(sp)
100044a8:	df000204 	addi	fp,sp,8
100044ac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100044b0:	e0bfff17 	ldw	r2,-4(fp)
100044b4:	10800017 	ldw	r2,0(r2)
100044b8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100044bc:	e0bffe17 	ldw	r2,-8(fp)
100044c0:	10c00a04 	addi	r3,r2,40
100044c4:	e0bfff17 	ldw	r2,-4(fp)
100044c8:	10800217 	ldw	r2,8(r2)
100044cc:	100b883a 	mov	r5,r2
100044d0:	1809883a 	mov	r4,r3
100044d4:	00048ac0 	call	100048ac <altera_avalon_jtag_uart_close>
}
100044d8:	e037883a 	mov	sp,fp
100044dc:	dfc00117 	ldw	ra,4(sp)
100044e0:	df000017 	ldw	fp,0(sp)
100044e4:	dec00204 	addi	sp,sp,8
100044e8:	f800283a 	ret

100044ec <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100044ec:	defffa04 	addi	sp,sp,-24
100044f0:	dfc00515 	stw	ra,20(sp)
100044f4:	df000415 	stw	fp,16(sp)
100044f8:	df000404 	addi	fp,sp,16
100044fc:	e13ffd15 	stw	r4,-12(fp)
10004500:	e17ffe15 	stw	r5,-8(fp)
10004504:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10004508:	e0bffd17 	ldw	r2,-12(fp)
1000450c:	10800017 	ldw	r2,0(r2)
10004510:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10004514:	e0bffc17 	ldw	r2,-16(fp)
10004518:	10800a04 	addi	r2,r2,40
1000451c:	e1bfff17 	ldw	r6,-4(fp)
10004520:	e17ffe17 	ldw	r5,-8(fp)
10004524:	1009883a 	mov	r4,r2
10004528:	00049140 	call	10004914 <altera_avalon_jtag_uart_ioctl>
}
1000452c:	e037883a 	mov	sp,fp
10004530:	dfc00117 	ldw	ra,4(sp)
10004534:	df000017 	ldw	fp,0(sp)
10004538:	dec00204 	addi	sp,sp,8
1000453c:	f800283a 	ret

10004540 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10004540:	defffa04 	addi	sp,sp,-24
10004544:	dfc00515 	stw	ra,20(sp)
10004548:	df000415 	stw	fp,16(sp)
1000454c:	df000404 	addi	fp,sp,16
10004550:	e13ffd15 	stw	r4,-12(fp)
10004554:	e17ffe15 	stw	r5,-8(fp)
10004558:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000455c:	e0bffd17 	ldw	r2,-12(fp)
10004560:	00c00044 	movi	r3,1
10004564:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10004568:	e0bffd17 	ldw	r2,-12(fp)
1000456c:	10800017 	ldw	r2,0(r2)
10004570:	10800104 	addi	r2,r2,4
10004574:	1007883a 	mov	r3,r2
10004578:	e0bffd17 	ldw	r2,-12(fp)
1000457c:	10800817 	ldw	r2,32(r2)
10004580:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10004584:	e0bffe17 	ldw	r2,-8(fp)
10004588:	e0ffff17 	ldw	r3,-4(fp)
1000458c:	d8000015 	stw	zero,0(sp)
10004590:	e1fffd17 	ldw	r7,-12(fp)
10004594:	01840034 	movhi	r6,4096
10004598:	31918004 	addi	r6,r6,17920
1000459c:	180b883a 	mov	r5,r3
100045a0:	1009883a 	mov	r4,r2
100045a4:	00052a80 	call	100052a8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100045a8:	e0bffd17 	ldw	r2,-12(fp)
100045ac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100045b0:	e0bffd17 	ldw	r2,-12(fp)
100045b4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100045b8:	d0e76d17 	ldw	r3,-25164(gp)
100045bc:	e1fffd17 	ldw	r7,-12(fp)
100045c0:	01840034 	movhi	r6,4096
100045c4:	31920304 	addi	r6,r6,18444
100045c8:	180b883a 	mov	r5,r3
100045cc:	1009883a 	mov	r4,r2
100045d0:	0004e440 	call	10004e44 <alt_alarm_start>
100045d4:	1000040e 	bge	r2,zero,100045e8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100045d8:	e0fffd17 	ldw	r3,-12(fp)
100045dc:	00a00034 	movhi	r2,32768
100045e0:	10bfffc4 	addi	r2,r2,-1
100045e4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100045e8:	0001883a 	nop
100045ec:	e037883a 	mov	sp,fp
100045f0:	dfc00117 	ldw	ra,4(sp)
100045f4:	df000017 	ldw	fp,0(sp)
100045f8:	dec00204 	addi	sp,sp,8
100045fc:	f800283a 	ret

10004600 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10004600:	defff804 	addi	sp,sp,-32
10004604:	df000715 	stw	fp,28(sp)
10004608:	df000704 	addi	fp,sp,28
1000460c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10004610:	e0bfff17 	ldw	r2,-4(fp)
10004614:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10004618:	e0bffb17 	ldw	r2,-20(fp)
1000461c:	10800017 	ldw	r2,0(r2)
10004620:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10004624:	e0bffc17 	ldw	r2,-16(fp)
10004628:	10800104 	addi	r2,r2,4
1000462c:	10800037 	ldwio	r2,0(r2)
10004630:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10004634:	e0bffd17 	ldw	r2,-12(fp)
10004638:	1080c00c 	andi	r2,r2,768
1000463c:	10006d26 	beq	r2,zero,100047f4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10004640:	e0bffd17 	ldw	r2,-12(fp)
10004644:	1080400c 	andi	r2,r2,256
10004648:	10003526 	beq	r2,zero,10004720 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000464c:	00800074 	movhi	r2,1
10004650:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004654:	e0bffb17 	ldw	r2,-20(fp)
10004658:	10800a17 	ldw	r2,40(r2)
1000465c:	10800044 	addi	r2,r2,1
10004660:	1081ffcc 	andi	r2,r2,2047
10004664:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10004668:	e0bffb17 	ldw	r2,-20(fp)
1000466c:	10c00b17 	ldw	r3,44(r2)
10004670:	e0bffe17 	ldw	r2,-8(fp)
10004674:	18801526 	beq	r3,r2,100046cc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10004678:	e0bffc17 	ldw	r2,-16(fp)
1000467c:	10800037 	ldwio	r2,0(r2)
10004680:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10004684:	e0bff917 	ldw	r2,-28(fp)
10004688:	10a0000c 	andi	r2,r2,32768
1000468c:	10001126 	beq	r2,zero,100046d4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10004690:	e0bffb17 	ldw	r2,-20(fp)
10004694:	10800a17 	ldw	r2,40(r2)
10004698:	e0fff917 	ldw	r3,-28(fp)
1000469c:	1809883a 	mov	r4,r3
100046a0:	e0fffb17 	ldw	r3,-20(fp)
100046a4:	1885883a 	add	r2,r3,r2
100046a8:	10800e04 	addi	r2,r2,56
100046ac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100046b0:	e0bffb17 	ldw	r2,-20(fp)
100046b4:	10800a17 	ldw	r2,40(r2)
100046b8:	10800044 	addi	r2,r2,1
100046bc:	10c1ffcc 	andi	r3,r2,2047
100046c0:	e0bffb17 	ldw	r2,-20(fp)
100046c4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100046c8:	003fe206 	br	10004654 <__alt_data_end+0xf8004654>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
100046cc:	0001883a 	nop
100046d0:	00000106 	br	100046d8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
100046d4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100046d8:	e0bff917 	ldw	r2,-28(fp)
100046dc:	10bfffec 	andhi	r2,r2,65535
100046e0:	10000f26 	beq	r2,zero,10004720 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100046e4:	e0bffb17 	ldw	r2,-20(fp)
100046e8:	10c00817 	ldw	r3,32(r2)
100046ec:	00bfff84 	movi	r2,-2
100046f0:	1886703a 	and	r3,r3,r2
100046f4:	e0bffb17 	ldw	r2,-20(fp)
100046f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100046fc:	e0bffc17 	ldw	r2,-16(fp)
10004700:	10800104 	addi	r2,r2,4
10004704:	1007883a 	mov	r3,r2
10004708:	e0bffb17 	ldw	r2,-20(fp)
1000470c:	10800817 	ldw	r2,32(r2)
10004710:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10004714:	e0bffc17 	ldw	r2,-16(fp)
10004718:	10800104 	addi	r2,r2,4
1000471c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10004720:	e0bffd17 	ldw	r2,-12(fp)
10004724:	1080800c 	andi	r2,r2,512
10004728:	103fbe26 	beq	r2,zero,10004624 <__alt_data_end+0xf8004624>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000472c:	e0bffd17 	ldw	r2,-12(fp)
10004730:	1004d43a 	srli	r2,r2,16
10004734:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10004738:	00001406 	br	1000478c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000473c:	e0bffc17 	ldw	r2,-16(fp)
10004740:	e0fffb17 	ldw	r3,-20(fp)
10004744:	18c00d17 	ldw	r3,52(r3)
10004748:	e13ffb17 	ldw	r4,-20(fp)
1000474c:	20c7883a 	add	r3,r4,r3
10004750:	18c20e04 	addi	r3,r3,2104
10004754:	18c00003 	ldbu	r3,0(r3)
10004758:	18c03fcc 	andi	r3,r3,255
1000475c:	18c0201c 	xori	r3,r3,128
10004760:	18ffe004 	addi	r3,r3,-128
10004764:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004768:	e0bffb17 	ldw	r2,-20(fp)
1000476c:	10800d17 	ldw	r2,52(r2)
10004770:	10800044 	addi	r2,r2,1
10004774:	10c1ffcc 	andi	r3,r2,2047
10004778:	e0bffb17 	ldw	r2,-20(fp)
1000477c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10004780:	e0bffa17 	ldw	r2,-24(fp)
10004784:	10bfffc4 	addi	r2,r2,-1
10004788:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000478c:	e0bffa17 	ldw	r2,-24(fp)
10004790:	10000526 	beq	r2,zero,100047a8 <altera_avalon_jtag_uart_irq+0x1a8>
10004794:	e0bffb17 	ldw	r2,-20(fp)
10004798:	10c00d17 	ldw	r3,52(r2)
1000479c:	e0bffb17 	ldw	r2,-20(fp)
100047a0:	10800c17 	ldw	r2,48(r2)
100047a4:	18bfe51e 	bne	r3,r2,1000473c <__alt_data_end+0xf800473c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100047a8:	e0bffa17 	ldw	r2,-24(fp)
100047ac:	103f9d26 	beq	r2,zero,10004624 <__alt_data_end+0xf8004624>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100047b0:	e0bffb17 	ldw	r2,-20(fp)
100047b4:	10c00817 	ldw	r3,32(r2)
100047b8:	00bfff44 	movi	r2,-3
100047bc:	1886703a 	and	r3,r3,r2
100047c0:	e0bffb17 	ldw	r2,-20(fp)
100047c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100047c8:	e0bffb17 	ldw	r2,-20(fp)
100047cc:	10800017 	ldw	r2,0(r2)
100047d0:	10800104 	addi	r2,r2,4
100047d4:	1007883a 	mov	r3,r2
100047d8:	e0bffb17 	ldw	r2,-20(fp)
100047dc:	10800817 	ldw	r2,32(r2)
100047e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100047e4:	e0bffc17 	ldw	r2,-16(fp)
100047e8:	10800104 	addi	r2,r2,4
100047ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100047f0:	003f8c06 	br	10004624 <__alt_data_end+0xf8004624>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
100047f4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
100047f8:	0001883a 	nop
100047fc:	e037883a 	mov	sp,fp
10004800:	df000017 	ldw	fp,0(sp)
10004804:	dec00104 	addi	sp,sp,4
10004808:	f800283a 	ret

1000480c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000480c:	defff804 	addi	sp,sp,-32
10004810:	df000715 	stw	fp,28(sp)
10004814:	df000704 	addi	fp,sp,28
10004818:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000481c:	e0bffb17 	ldw	r2,-20(fp)
10004820:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10004824:	e0bff917 	ldw	r2,-28(fp)
10004828:	10800017 	ldw	r2,0(r2)
1000482c:	10800104 	addi	r2,r2,4
10004830:	10800037 	ldwio	r2,0(r2)
10004834:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10004838:	e0bffa17 	ldw	r2,-24(fp)
1000483c:	1081000c 	andi	r2,r2,1024
10004840:	10000b26 	beq	r2,zero,10004870 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10004844:	e0bff917 	ldw	r2,-28(fp)
10004848:	10800017 	ldw	r2,0(r2)
1000484c:	10800104 	addi	r2,r2,4
10004850:	1007883a 	mov	r3,r2
10004854:	e0bff917 	ldw	r2,-28(fp)
10004858:	10800817 	ldw	r2,32(r2)
1000485c:	10810014 	ori	r2,r2,1024
10004860:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10004864:	e0bff917 	ldw	r2,-28(fp)
10004868:	10000915 	stw	zero,36(r2)
1000486c:	00000a06 	br	10004898 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10004870:	e0bff917 	ldw	r2,-28(fp)
10004874:	10c00917 	ldw	r3,36(r2)
10004878:	00a00034 	movhi	r2,32768
1000487c:	10bfff04 	addi	r2,r2,-4
10004880:	10c00536 	bltu	r2,r3,10004898 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10004884:	e0bff917 	ldw	r2,-28(fp)
10004888:	10800917 	ldw	r2,36(r2)
1000488c:	10c00044 	addi	r3,r2,1
10004890:	e0bff917 	ldw	r2,-28(fp)
10004894:	10c00915 	stw	r3,36(r2)
10004898:	d0a76d17 	ldw	r2,-25164(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000489c:	e037883a 	mov	sp,fp
100048a0:	df000017 	ldw	fp,0(sp)
100048a4:	dec00104 	addi	sp,sp,4
100048a8:	f800283a 	ret

100048ac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100048ac:	defffd04 	addi	sp,sp,-12
100048b0:	df000215 	stw	fp,8(sp)
100048b4:	df000204 	addi	fp,sp,8
100048b8:	e13ffe15 	stw	r4,-8(fp)
100048bc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100048c0:	00000506 	br	100048d8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100048c4:	e0bfff17 	ldw	r2,-4(fp)
100048c8:	1090000c 	andi	r2,r2,16384
100048cc:	10000226 	beq	r2,zero,100048d8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100048d0:	00bffd44 	movi	r2,-11
100048d4:	00000b06 	br	10004904 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100048d8:	e0bffe17 	ldw	r2,-8(fp)
100048dc:	10c00d17 	ldw	r3,52(r2)
100048e0:	e0bffe17 	ldw	r2,-8(fp)
100048e4:	10800c17 	ldw	r2,48(r2)
100048e8:	18800526 	beq	r3,r2,10004900 <altera_avalon_jtag_uart_close+0x54>
100048ec:	e0bffe17 	ldw	r2,-8(fp)
100048f0:	10c00917 	ldw	r3,36(r2)
100048f4:	e0bffe17 	ldw	r2,-8(fp)
100048f8:	10800117 	ldw	r2,4(r2)
100048fc:	18bff136 	bltu	r3,r2,100048c4 <__alt_data_end+0xf80048c4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10004900:	0005883a 	mov	r2,zero
}
10004904:	e037883a 	mov	sp,fp
10004908:	df000017 	ldw	fp,0(sp)
1000490c:	dec00104 	addi	sp,sp,4
10004910:	f800283a 	ret

10004914 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10004914:	defffa04 	addi	sp,sp,-24
10004918:	df000515 	stw	fp,20(sp)
1000491c:	df000504 	addi	fp,sp,20
10004920:	e13ffd15 	stw	r4,-12(fp)
10004924:	e17ffe15 	stw	r5,-8(fp)
10004928:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000492c:	00bff9c4 	movi	r2,-25
10004930:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10004934:	e0bffe17 	ldw	r2,-8(fp)
10004938:	10da8060 	cmpeqi	r3,r2,27137
1000493c:	1800031e 	bne	r3,zero,1000494c <altera_avalon_jtag_uart_ioctl+0x38>
10004940:	109a80a0 	cmpeqi	r2,r2,27138
10004944:	1000181e 	bne	r2,zero,100049a8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10004948:	00002906 	br	100049f0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000494c:	e0bffd17 	ldw	r2,-12(fp)
10004950:	10c00117 	ldw	r3,4(r2)
10004954:	00a00034 	movhi	r2,32768
10004958:	10bfffc4 	addi	r2,r2,-1
1000495c:	18802126 	beq	r3,r2,100049e4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10004960:	e0bfff17 	ldw	r2,-4(fp)
10004964:	10800017 	ldw	r2,0(r2)
10004968:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000496c:	e0bffc17 	ldw	r2,-16(fp)
10004970:	10800090 	cmplti	r2,r2,2
10004974:	1000061e 	bne	r2,zero,10004990 <altera_avalon_jtag_uart_ioctl+0x7c>
10004978:	e0fffc17 	ldw	r3,-16(fp)
1000497c:	00a00034 	movhi	r2,32768
10004980:	10bfffc4 	addi	r2,r2,-1
10004984:	18800226 	beq	r3,r2,10004990 <altera_avalon_jtag_uart_ioctl+0x7c>
10004988:	e0bffc17 	ldw	r2,-16(fp)
1000498c:	00000206 	br	10004998 <altera_avalon_jtag_uart_ioctl+0x84>
10004990:	00a00034 	movhi	r2,32768
10004994:	10bfff84 	addi	r2,r2,-2
10004998:	e0fffd17 	ldw	r3,-12(fp)
1000499c:	18800115 	stw	r2,4(r3)
      rc = 0;
100049a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100049a4:	00000f06 	br	100049e4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100049a8:	e0bffd17 	ldw	r2,-12(fp)
100049ac:	10c00117 	ldw	r3,4(r2)
100049b0:	00a00034 	movhi	r2,32768
100049b4:	10bfffc4 	addi	r2,r2,-1
100049b8:	18800c26 	beq	r3,r2,100049ec <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100049bc:	e0bffd17 	ldw	r2,-12(fp)
100049c0:	10c00917 	ldw	r3,36(r2)
100049c4:	e0bffd17 	ldw	r2,-12(fp)
100049c8:	10800117 	ldw	r2,4(r2)
100049cc:	1885803a 	cmpltu	r2,r3,r2
100049d0:	10c03fcc 	andi	r3,r2,255
100049d4:	e0bfff17 	ldw	r2,-4(fp)
100049d8:	10c00015 	stw	r3,0(r2)
      rc = 0;
100049dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100049e0:	00000206 	br	100049ec <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
100049e4:	0001883a 	nop
100049e8:	00000106 	br	100049f0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
100049ec:	0001883a 	nop

  default:
    break;
  }

  return rc;
100049f0:	e0bffb17 	ldw	r2,-20(fp)
}
100049f4:	e037883a 	mov	sp,fp
100049f8:	df000017 	ldw	fp,0(sp)
100049fc:	dec00104 	addi	sp,sp,4
10004a00:	f800283a 	ret

10004a04 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10004a04:	defff304 	addi	sp,sp,-52
10004a08:	dfc00c15 	stw	ra,48(sp)
10004a0c:	df000b15 	stw	fp,44(sp)
10004a10:	df000b04 	addi	fp,sp,44
10004a14:	e13ffc15 	stw	r4,-16(fp)
10004a18:	e17ffd15 	stw	r5,-12(fp)
10004a1c:	e1bffe15 	stw	r6,-8(fp)
10004a20:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10004a24:	e0bffd17 	ldw	r2,-12(fp)
10004a28:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10004a2c:	00004706 	br	10004b4c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10004a30:	e0bffc17 	ldw	r2,-16(fp)
10004a34:	10800a17 	ldw	r2,40(r2)
10004a38:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10004a3c:	e0bffc17 	ldw	r2,-16(fp)
10004a40:	10800b17 	ldw	r2,44(r2)
10004a44:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10004a48:	e0fff717 	ldw	r3,-36(fp)
10004a4c:	e0bff817 	ldw	r2,-32(fp)
10004a50:	18800536 	bltu	r3,r2,10004a68 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10004a54:	e0fff717 	ldw	r3,-36(fp)
10004a58:	e0bff817 	ldw	r2,-32(fp)
10004a5c:	1885c83a 	sub	r2,r3,r2
10004a60:	e0bff615 	stw	r2,-40(fp)
10004a64:	00000406 	br	10004a78 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10004a68:	00c20004 	movi	r3,2048
10004a6c:	e0bff817 	ldw	r2,-32(fp)
10004a70:	1885c83a 	sub	r2,r3,r2
10004a74:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10004a78:	e0bff617 	ldw	r2,-40(fp)
10004a7c:	10001e26 	beq	r2,zero,10004af8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10004a80:	e0fffe17 	ldw	r3,-8(fp)
10004a84:	e0bff617 	ldw	r2,-40(fp)
10004a88:	1880022e 	bgeu	r3,r2,10004a94 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10004a8c:	e0bffe17 	ldw	r2,-8(fp)
10004a90:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10004a94:	e0bffc17 	ldw	r2,-16(fp)
10004a98:	10c00e04 	addi	r3,r2,56
10004a9c:	e0bff817 	ldw	r2,-32(fp)
10004aa0:	1885883a 	add	r2,r3,r2
10004aa4:	e1bff617 	ldw	r6,-40(fp)
10004aa8:	100b883a 	mov	r5,r2
10004aac:	e13ff517 	ldw	r4,-44(fp)
10004ab0:	0001ecc0 	call	10001ecc <memcpy>
      ptr   += n;
10004ab4:	e0fff517 	ldw	r3,-44(fp)
10004ab8:	e0bff617 	ldw	r2,-40(fp)
10004abc:	1885883a 	add	r2,r3,r2
10004ac0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10004ac4:	e0fffe17 	ldw	r3,-8(fp)
10004ac8:	e0bff617 	ldw	r2,-40(fp)
10004acc:	1885c83a 	sub	r2,r3,r2
10004ad0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004ad4:	e0fff817 	ldw	r3,-32(fp)
10004ad8:	e0bff617 	ldw	r2,-40(fp)
10004adc:	1885883a 	add	r2,r3,r2
10004ae0:	10c1ffcc 	andi	r3,r2,2047
10004ae4:	e0bffc17 	ldw	r2,-16(fp)
10004ae8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10004aec:	e0bffe17 	ldw	r2,-8(fp)
10004af0:	00bfcf16 	blt	zero,r2,10004a30 <__alt_data_end+0xf8004a30>
10004af4:	00000106 	br	10004afc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10004af8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10004afc:	e0fff517 	ldw	r3,-44(fp)
10004b00:	e0bffd17 	ldw	r2,-12(fp)
10004b04:	1880141e 	bne	r3,r2,10004b58 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10004b08:	e0bfff17 	ldw	r2,-4(fp)
10004b0c:	1090000c 	andi	r2,r2,16384
10004b10:	1000131e 	bne	r2,zero,10004b60 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10004b14:	0001883a 	nop
10004b18:	e0bffc17 	ldw	r2,-16(fp)
10004b1c:	10c00a17 	ldw	r3,40(r2)
10004b20:	e0bff717 	ldw	r2,-36(fp)
10004b24:	1880051e 	bne	r3,r2,10004b3c <altera_avalon_jtag_uart_read+0x138>
10004b28:	e0bffc17 	ldw	r2,-16(fp)
10004b2c:	10c00917 	ldw	r3,36(r2)
10004b30:	e0bffc17 	ldw	r2,-16(fp)
10004b34:	10800117 	ldw	r2,4(r2)
10004b38:	18bff736 	bltu	r3,r2,10004b18 <__alt_data_end+0xf8004b18>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10004b3c:	e0bffc17 	ldw	r2,-16(fp)
10004b40:	10c00a17 	ldw	r3,40(r2)
10004b44:	e0bff717 	ldw	r2,-36(fp)
10004b48:	18800726 	beq	r3,r2,10004b68 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10004b4c:	e0bffe17 	ldw	r2,-8(fp)
10004b50:	00bfb716 	blt	zero,r2,10004a30 <__alt_data_end+0xf8004a30>
10004b54:	00000506 	br	10004b6c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10004b58:	0001883a 	nop
10004b5c:	00000306 	br	10004b6c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10004b60:	0001883a 	nop
10004b64:	00000106 	br	10004b6c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10004b68:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10004b6c:	e0fff517 	ldw	r3,-44(fp)
10004b70:	e0bffd17 	ldw	r2,-12(fp)
10004b74:	18801826 	beq	r3,r2,10004bd8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004b78:	0005303a 	rdctl	r2,status
10004b7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004b80:	e0fffb17 	ldw	r3,-20(fp)
10004b84:	00bfff84 	movi	r2,-2
10004b88:	1884703a 	and	r2,r3,r2
10004b8c:	1001703a 	wrctl	status,r2
  
  return context;
10004b90:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10004b94:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10004b98:	e0bffc17 	ldw	r2,-16(fp)
10004b9c:	10800817 	ldw	r2,32(r2)
10004ba0:	10c00054 	ori	r3,r2,1
10004ba4:	e0bffc17 	ldw	r2,-16(fp)
10004ba8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10004bac:	e0bffc17 	ldw	r2,-16(fp)
10004bb0:	10800017 	ldw	r2,0(r2)
10004bb4:	10800104 	addi	r2,r2,4
10004bb8:	1007883a 	mov	r3,r2
10004bbc:	e0bffc17 	ldw	r2,-16(fp)
10004bc0:	10800817 	ldw	r2,32(r2)
10004bc4:	18800035 	stwio	r2,0(r3)
10004bc8:	e0bffa17 	ldw	r2,-24(fp)
10004bcc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004bd0:	e0bff917 	ldw	r2,-28(fp)
10004bd4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10004bd8:	e0fff517 	ldw	r3,-44(fp)
10004bdc:	e0bffd17 	ldw	r2,-12(fp)
10004be0:	18800426 	beq	r3,r2,10004bf4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10004be4:	e0fff517 	ldw	r3,-44(fp)
10004be8:	e0bffd17 	ldw	r2,-12(fp)
10004bec:	1885c83a 	sub	r2,r3,r2
10004bf0:	00000606 	br	10004c0c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10004bf4:	e0bfff17 	ldw	r2,-4(fp)
10004bf8:	1090000c 	andi	r2,r2,16384
10004bfc:	10000226 	beq	r2,zero,10004c08 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10004c00:	00bffd44 	movi	r2,-11
10004c04:	00000106 	br	10004c0c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10004c08:	00bffec4 	movi	r2,-5
}
10004c0c:	e037883a 	mov	sp,fp
10004c10:	dfc00117 	ldw	ra,4(sp)
10004c14:	df000017 	ldw	fp,0(sp)
10004c18:	dec00204 	addi	sp,sp,8
10004c1c:	f800283a 	ret

10004c20 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10004c20:	defff304 	addi	sp,sp,-52
10004c24:	dfc00c15 	stw	ra,48(sp)
10004c28:	df000b15 	stw	fp,44(sp)
10004c2c:	df000b04 	addi	fp,sp,44
10004c30:	e13ffc15 	stw	r4,-16(fp)
10004c34:	e17ffd15 	stw	r5,-12(fp)
10004c38:	e1bffe15 	stw	r6,-8(fp)
10004c3c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10004c40:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10004c44:	e0bffd17 	ldw	r2,-12(fp)
10004c48:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10004c4c:	00003706 	br	10004d2c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10004c50:	e0bffc17 	ldw	r2,-16(fp)
10004c54:	10800c17 	ldw	r2,48(r2)
10004c58:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10004c5c:	e0bffc17 	ldw	r2,-16(fp)
10004c60:	10800d17 	ldw	r2,52(r2)
10004c64:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10004c68:	e0fff917 	ldw	r3,-28(fp)
10004c6c:	e0bff517 	ldw	r2,-44(fp)
10004c70:	1880062e 	bgeu	r3,r2,10004c8c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10004c74:	e0fff517 	ldw	r3,-44(fp)
10004c78:	e0bff917 	ldw	r2,-28(fp)
10004c7c:	1885c83a 	sub	r2,r3,r2
10004c80:	10bfffc4 	addi	r2,r2,-1
10004c84:	e0bff615 	stw	r2,-40(fp)
10004c88:	00000b06 	br	10004cb8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10004c8c:	e0bff517 	ldw	r2,-44(fp)
10004c90:	10000526 	beq	r2,zero,10004ca8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10004c94:	00c20004 	movi	r3,2048
10004c98:	e0bff917 	ldw	r2,-28(fp)
10004c9c:	1885c83a 	sub	r2,r3,r2
10004ca0:	e0bff615 	stw	r2,-40(fp)
10004ca4:	00000406 	br	10004cb8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10004ca8:	00c1ffc4 	movi	r3,2047
10004cac:	e0bff917 	ldw	r2,-28(fp)
10004cb0:	1885c83a 	sub	r2,r3,r2
10004cb4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10004cb8:	e0bff617 	ldw	r2,-40(fp)
10004cbc:	10001e26 	beq	r2,zero,10004d38 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10004cc0:	e0fffe17 	ldw	r3,-8(fp)
10004cc4:	e0bff617 	ldw	r2,-40(fp)
10004cc8:	1880022e 	bgeu	r3,r2,10004cd4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10004ccc:	e0bffe17 	ldw	r2,-8(fp)
10004cd0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10004cd4:	e0bffc17 	ldw	r2,-16(fp)
10004cd8:	10c20e04 	addi	r3,r2,2104
10004cdc:	e0bff917 	ldw	r2,-28(fp)
10004ce0:	1885883a 	add	r2,r3,r2
10004ce4:	e1bff617 	ldw	r6,-40(fp)
10004ce8:	e17ffd17 	ldw	r5,-12(fp)
10004cec:	1009883a 	mov	r4,r2
10004cf0:	0001ecc0 	call	10001ecc <memcpy>
      ptr   += n;
10004cf4:	e0fffd17 	ldw	r3,-12(fp)
10004cf8:	e0bff617 	ldw	r2,-40(fp)
10004cfc:	1885883a 	add	r2,r3,r2
10004d00:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10004d04:	e0fffe17 	ldw	r3,-8(fp)
10004d08:	e0bff617 	ldw	r2,-40(fp)
10004d0c:	1885c83a 	sub	r2,r3,r2
10004d10:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10004d14:	e0fff917 	ldw	r3,-28(fp)
10004d18:	e0bff617 	ldw	r2,-40(fp)
10004d1c:	1885883a 	add	r2,r3,r2
10004d20:	10c1ffcc 	andi	r3,r2,2047
10004d24:	e0bffc17 	ldw	r2,-16(fp)
10004d28:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10004d2c:	e0bffe17 	ldw	r2,-8(fp)
10004d30:	00bfc716 	blt	zero,r2,10004c50 <__alt_data_end+0xf8004c50>
10004d34:	00000106 	br	10004d3c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10004d38:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004d3c:	0005303a 	rdctl	r2,status
10004d40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004d44:	e0fffb17 	ldw	r3,-20(fp)
10004d48:	00bfff84 	movi	r2,-2
10004d4c:	1884703a 	and	r2,r3,r2
10004d50:	1001703a 	wrctl	status,r2
  
  return context;
10004d54:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10004d58:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10004d5c:	e0bffc17 	ldw	r2,-16(fp)
10004d60:	10800817 	ldw	r2,32(r2)
10004d64:	10c00094 	ori	r3,r2,2
10004d68:	e0bffc17 	ldw	r2,-16(fp)
10004d6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10004d70:	e0bffc17 	ldw	r2,-16(fp)
10004d74:	10800017 	ldw	r2,0(r2)
10004d78:	10800104 	addi	r2,r2,4
10004d7c:	1007883a 	mov	r3,r2
10004d80:	e0bffc17 	ldw	r2,-16(fp)
10004d84:	10800817 	ldw	r2,32(r2)
10004d88:	18800035 	stwio	r2,0(r3)
10004d8c:	e0bffa17 	ldw	r2,-24(fp)
10004d90:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004d94:	e0bff817 	ldw	r2,-32(fp)
10004d98:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10004d9c:	e0bffe17 	ldw	r2,-8(fp)
10004da0:	0080100e 	bge	zero,r2,10004de4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10004da4:	e0bfff17 	ldw	r2,-4(fp)
10004da8:	1090000c 	andi	r2,r2,16384
10004dac:	1000101e 	bne	r2,zero,10004df0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10004db0:	0001883a 	nop
10004db4:	e0bffc17 	ldw	r2,-16(fp)
10004db8:	10c00d17 	ldw	r3,52(r2)
10004dbc:	e0bff517 	ldw	r2,-44(fp)
10004dc0:	1880051e 	bne	r3,r2,10004dd8 <altera_avalon_jtag_uart_write+0x1b8>
10004dc4:	e0bffc17 	ldw	r2,-16(fp)
10004dc8:	10c00917 	ldw	r3,36(r2)
10004dcc:	e0bffc17 	ldw	r2,-16(fp)
10004dd0:	10800117 	ldw	r2,4(r2)
10004dd4:	18bff736 	bltu	r3,r2,10004db4 <__alt_data_end+0xf8004db4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10004dd8:	e0bffc17 	ldw	r2,-16(fp)
10004ddc:	10800917 	ldw	r2,36(r2)
10004de0:	1000051e 	bne	r2,zero,10004df8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10004de4:	e0bffe17 	ldw	r2,-8(fp)
10004de8:	00bfd016 	blt	zero,r2,10004d2c <__alt_data_end+0xf8004d2c>
10004dec:	00000306 	br	10004dfc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10004df0:	0001883a 	nop
10004df4:	00000106 	br	10004dfc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10004df8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10004dfc:	e0fffd17 	ldw	r3,-12(fp)
10004e00:	e0bff717 	ldw	r2,-36(fp)
10004e04:	18800426 	beq	r3,r2,10004e18 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10004e08:	e0fffd17 	ldw	r3,-12(fp)
10004e0c:	e0bff717 	ldw	r2,-36(fp)
10004e10:	1885c83a 	sub	r2,r3,r2
10004e14:	00000606 	br	10004e30 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10004e18:	e0bfff17 	ldw	r2,-4(fp)
10004e1c:	1090000c 	andi	r2,r2,16384
10004e20:	10000226 	beq	r2,zero,10004e2c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10004e24:	00bffd44 	movi	r2,-11
10004e28:	00000106 	br	10004e30 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10004e2c:	00bffec4 	movi	r2,-5
}
10004e30:	e037883a 	mov	sp,fp
10004e34:	dfc00117 	ldw	ra,4(sp)
10004e38:	df000017 	ldw	fp,0(sp)
10004e3c:	dec00204 	addi	sp,sp,8
10004e40:	f800283a 	ret

10004e44 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10004e44:	defff504 	addi	sp,sp,-44
10004e48:	df000a15 	stw	fp,40(sp)
10004e4c:	df000a04 	addi	fp,sp,40
10004e50:	e13ffc15 	stw	r4,-16(fp)
10004e54:	e17ffd15 	stw	r5,-12(fp)
10004e58:	e1bffe15 	stw	r6,-8(fp)
10004e5c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10004e60:	e03ff615 	stw	zero,-40(fp)
10004e64:	d0a76d17 	ldw	r2,-25164(gp)
  
  if (alt_ticks_per_second ())
10004e68:	10003c26 	beq	r2,zero,10004f5c <alt_alarm_start+0x118>
  {
    if (alarm)
10004e6c:	e0bffc17 	ldw	r2,-16(fp)
10004e70:	10003826 	beq	r2,zero,10004f54 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10004e74:	e0bffc17 	ldw	r2,-16(fp)
10004e78:	e0fffe17 	ldw	r3,-8(fp)
10004e7c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10004e80:	e0bffc17 	ldw	r2,-16(fp)
10004e84:	e0ffff17 	ldw	r3,-4(fp)
10004e88:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004e8c:	0005303a 	rdctl	r2,status
10004e90:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004e94:	e0fff917 	ldw	r3,-28(fp)
10004e98:	00bfff84 	movi	r2,-2
10004e9c:	1884703a 	and	r2,r3,r2
10004ea0:	1001703a 	wrctl	status,r2
  
  return context;
10004ea4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10004ea8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10004eac:	d0a76e17 	ldw	r2,-25160(gp)
      
      current_nticks = alt_nticks();
10004eb0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10004eb4:	e0fffd17 	ldw	r3,-12(fp)
10004eb8:	e0bff617 	ldw	r2,-40(fp)
10004ebc:	1885883a 	add	r2,r3,r2
10004ec0:	10c00044 	addi	r3,r2,1
10004ec4:	e0bffc17 	ldw	r2,-16(fp)
10004ec8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10004ecc:	e0bffc17 	ldw	r2,-16(fp)
10004ed0:	10c00217 	ldw	r3,8(r2)
10004ed4:	e0bff617 	ldw	r2,-40(fp)
10004ed8:	1880042e 	bgeu	r3,r2,10004eec <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10004edc:	e0bffc17 	ldw	r2,-16(fp)
10004ee0:	00c00044 	movi	r3,1
10004ee4:	10c00405 	stb	r3,16(r2)
10004ee8:	00000206 	br	10004ef4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10004eec:	e0bffc17 	ldw	r2,-16(fp)
10004ef0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10004ef4:	e0bffc17 	ldw	r2,-16(fp)
10004ef8:	d0e00e04 	addi	r3,gp,-32712
10004efc:	e0fffa15 	stw	r3,-24(fp)
10004f00:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10004f04:	e0bffb17 	ldw	r2,-20(fp)
10004f08:	e0fffa17 	ldw	r3,-24(fp)
10004f0c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10004f10:	e0bffa17 	ldw	r2,-24(fp)
10004f14:	10c00017 	ldw	r3,0(r2)
10004f18:	e0bffb17 	ldw	r2,-20(fp)
10004f1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10004f20:	e0bffa17 	ldw	r2,-24(fp)
10004f24:	10800017 	ldw	r2,0(r2)
10004f28:	e0fffb17 	ldw	r3,-20(fp)
10004f2c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10004f30:	e0bffa17 	ldw	r2,-24(fp)
10004f34:	e0fffb17 	ldw	r3,-20(fp)
10004f38:	10c00015 	stw	r3,0(r2)
10004f3c:	e0bff817 	ldw	r2,-32(fp)
10004f40:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004f44:	e0bff717 	ldw	r2,-36(fp)
10004f48:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10004f4c:	0005883a 	mov	r2,zero
10004f50:	00000306 	br	10004f60 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10004f54:	00bffa84 	movi	r2,-22
10004f58:	00000106 	br	10004f60 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10004f5c:	00bfde84 	movi	r2,-134
  }
}
10004f60:	e037883a 	mov	sp,fp
10004f64:	df000017 	ldw	fp,0(sp)
10004f68:	dec00104 	addi	sp,sp,4
10004f6c:	f800283a 	ret

10004f70 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10004f70:	defffa04 	addi	sp,sp,-24
10004f74:	dfc00515 	stw	ra,20(sp)
10004f78:	df000415 	stw	fp,16(sp)
10004f7c:	df000404 	addi	fp,sp,16
10004f80:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10004f84:	00800244 	movi	r2,9
10004f88:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10004f8c:	014003f4 	movhi	r5,15
10004f90:	29509004 	addi	r5,r5,16960
10004f94:	e13ffd17 	ldw	r4,-12(fp)
10004f98:	00009cc0 	call	100009cc <__mulsi3>
10004f9c:	100b883a 	mov	r5,r2
10004fa0:	0100bef4 	movhi	r4,763
10004fa4:	213c2004 	addi	r4,r4,-3968
10004fa8:	00038a40 	call	100038a4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10004fac:	100b883a 	mov	r5,r2
10004fb0:	01200034 	movhi	r4,32768
10004fb4:	213fffc4 	addi	r4,r4,-1
10004fb8:	00038a40 	call	100038a4 <__udivsi3>
10004fbc:	100b883a 	mov	r5,r2
10004fc0:	e13fff17 	ldw	r4,-4(fp)
10004fc4:	00038a40 	call	100038a4 <__udivsi3>
10004fc8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10004fcc:	e0bffe17 	ldw	r2,-8(fp)
10004fd0:	10002a26 	beq	r2,zero,1000507c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10004fd4:	e03ffc15 	stw	zero,-16(fp)
10004fd8:	00001706 	br	10005038 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10004fdc:	00a00034 	movhi	r2,32768
10004fe0:	10bfffc4 	addi	r2,r2,-1
10004fe4:	10bfffc4 	addi	r2,r2,-1
10004fe8:	103ffe1e 	bne	r2,zero,10004fe4 <__alt_data_end+0xf8004fe4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10004fec:	014003f4 	movhi	r5,15
10004ff0:	29509004 	addi	r5,r5,16960
10004ff4:	e13ffd17 	ldw	r4,-12(fp)
10004ff8:	00009cc0 	call	100009cc <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10004ffc:	100b883a 	mov	r5,r2
10005000:	0100bef4 	movhi	r4,763
10005004:	213c2004 	addi	r4,r4,-3968
10005008:	00038a40 	call	100038a4 <__udivsi3>
1000500c:	100b883a 	mov	r5,r2
10005010:	01200034 	movhi	r4,32768
10005014:	213fffc4 	addi	r4,r4,-1
10005018:	00038a40 	call	100038a4 <__udivsi3>
1000501c:	1007883a 	mov	r3,r2
10005020:	e0bfff17 	ldw	r2,-4(fp)
10005024:	10c5c83a 	sub	r2,r2,r3
10005028:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1000502c:	e0bffc17 	ldw	r2,-16(fp)
10005030:	10800044 	addi	r2,r2,1
10005034:	e0bffc15 	stw	r2,-16(fp)
10005038:	e0fffc17 	ldw	r3,-16(fp)
1000503c:	e0bffe17 	ldw	r2,-8(fp)
10005040:	18bfe616 	blt	r3,r2,10004fdc <__alt_data_end+0xf8004fdc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10005044:	014003f4 	movhi	r5,15
10005048:	29509004 	addi	r5,r5,16960
1000504c:	e13ffd17 	ldw	r4,-12(fp)
10005050:	00009cc0 	call	100009cc <__mulsi3>
10005054:	100b883a 	mov	r5,r2
10005058:	0100bef4 	movhi	r4,763
1000505c:	213c2004 	addi	r4,r4,-3968
10005060:	00038a40 	call	100038a4 <__udivsi3>
10005064:	e17fff17 	ldw	r5,-4(fp)
10005068:	1009883a 	mov	r4,r2
1000506c:	00009cc0 	call	100009cc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10005070:	10bfffc4 	addi	r2,r2,-1
10005074:	103ffe1e 	bne	r2,zero,10005070 <__alt_data_end+0xf8005070>
10005078:	00000d06 	br	100050b0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1000507c:	014003f4 	movhi	r5,15
10005080:	29509004 	addi	r5,r5,16960
10005084:	e13ffd17 	ldw	r4,-12(fp)
10005088:	00009cc0 	call	100009cc <__mulsi3>
1000508c:	100b883a 	mov	r5,r2
10005090:	0100bef4 	movhi	r4,763
10005094:	213c2004 	addi	r4,r4,-3968
10005098:	00038a40 	call	100038a4 <__udivsi3>
1000509c:	e17fff17 	ldw	r5,-4(fp)
100050a0:	1009883a 	mov	r4,r2
100050a4:	00009cc0 	call	100009cc <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100050a8:	10bfffc4 	addi	r2,r2,-1
100050ac:	00bffe16 	blt	zero,r2,100050a8 <__alt_data_end+0xf80050a8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
100050b0:	0005883a 	mov	r2,zero
}
100050b4:	e037883a 	mov	sp,fp
100050b8:	dfc00117 	ldw	ra,4(sp)
100050bc:	df000017 	ldw	fp,0(sp)
100050c0:	dec00204 	addi	sp,sp,8
100050c4:	f800283a 	ret

100050c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100050c8:	deffff04 	addi	sp,sp,-4
100050cc:	df000015 	stw	fp,0(sp)
100050d0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100050d4:	0001883a 	nop
100050d8:	e037883a 	mov	sp,fp
100050dc:	df000017 	ldw	fp,0(sp)
100050e0:	dec00104 	addi	sp,sp,4
100050e4:	f800283a 	ret

100050e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100050e8:	defffe04 	addi	sp,sp,-8
100050ec:	dfc00115 	stw	ra,4(sp)
100050f0:	df000015 	stw	fp,0(sp)
100050f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100050f8:	d0a00b17 	ldw	r2,-32724(gp)
100050fc:	10000326 	beq	r2,zero,1000510c <alt_get_errno+0x24>
10005100:	d0a00b17 	ldw	r2,-32724(gp)
10005104:	103ee83a 	callr	r2
10005108:	00000106 	br	10005110 <alt_get_errno+0x28>
1000510c:	d0a76804 	addi	r2,gp,-25184
}
10005110:	e037883a 	mov	sp,fp
10005114:	dfc00117 	ldw	ra,4(sp)
10005118:	df000017 	ldw	fp,0(sp)
1000511c:	dec00204 	addi	sp,sp,8
10005120:	f800283a 	ret

10005124 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10005124:	defffa04 	addi	sp,sp,-24
10005128:	dfc00515 	stw	ra,20(sp)
1000512c:	df000415 	stw	fp,16(sp)
10005130:	df000404 	addi	fp,sp,16
10005134:	e13ffe15 	stw	r4,-8(fp)
10005138:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1000513c:	e0bffe17 	ldw	r2,-8(fp)
10005140:	10000326 	beq	r2,zero,10005150 <alt_dev_llist_insert+0x2c>
10005144:	e0bffe17 	ldw	r2,-8(fp)
10005148:	10800217 	ldw	r2,8(r2)
1000514c:	1000061e 	bne	r2,zero,10005168 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10005150:	00050e80 	call	100050e8 <alt_get_errno>
10005154:	1007883a 	mov	r3,r2
10005158:	00800584 	movi	r2,22
1000515c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10005160:	00bffa84 	movi	r2,-22
10005164:	00001306 	br	100051b4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10005168:	e0bffe17 	ldw	r2,-8(fp)
1000516c:	e0ffff17 	ldw	r3,-4(fp)
10005170:	e0fffc15 	stw	r3,-16(fp)
10005174:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10005178:	e0bffd17 	ldw	r2,-12(fp)
1000517c:	e0fffc17 	ldw	r3,-16(fp)
10005180:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10005184:	e0bffc17 	ldw	r2,-16(fp)
10005188:	10c00017 	ldw	r3,0(r2)
1000518c:	e0bffd17 	ldw	r2,-12(fp)
10005190:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10005194:	e0bffc17 	ldw	r2,-16(fp)
10005198:	10800017 	ldw	r2,0(r2)
1000519c:	e0fffd17 	ldw	r3,-12(fp)
100051a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100051a4:	e0bffc17 	ldw	r2,-16(fp)
100051a8:	e0fffd17 	ldw	r3,-12(fp)
100051ac:	10c00015 	stw	r3,0(r2)

  return 0;  
100051b0:	0005883a 	mov	r2,zero
}
100051b4:	e037883a 	mov	sp,fp
100051b8:	dfc00117 	ldw	ra,4(sp)
100051bc:	df000017 	ldw	fp,0(sp)
100051c0:	dec00204 	addi	sp,sp,8
100051c4:	f800283a 	ret

100051c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100051c8:	defffd04 	addi	sp,sp,-12
100051cc:	dfc00215 	stw	ra,8(sp)
100051d0:	df000115 	stw	fp,4(sp)
100051d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100051d8:	00840034 	movhi	r2,4096
100051dc:	10985f04 	addi	r2,r2,24956
100051e0:	e0bfff15 	stw	r2,-4(fp)
100051e4:	00000606 	br	10005200 <_do_ctors+0x38>
        (*ctor) (); 
100051e8:	e0bfff17 	ldw	r2,-4(fp)
100051ec:	10800017 	ldw	r2,0(r2)
100051f0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100051f4:	e0bfff17 	ldw	r2,-4(fp)
100051f8:	10bfff04 	addi	r2,r2,-4
100051fc:	e0bfff15 	stw	r2,-4(fp)
10005200:	e0ffff17 	ldw	r3,-4(fp)
10005204:	00840034 	movhi	r2,4096
10005208:	10986004 	addi	r2,r2,24960
1000520c:	18bff62e 	bgeu	r3,r2,100051e8 <__alt_data_end+0xf80051e8>
        (*ctor) (); 
}
10005210:	0001883a 	nop
10005214:	e037883a 	mov	sp,fp
10005218:	dfc00117 	ldw	ra,4(sp)
1000521c:	df000017 	ldw	fp,0(sp)
10005220:	dec00204 	addi	sp,sp,8
10005224:	f800283a 	ret

10005228 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10005228:	defffd04 	addi	sp,sp,-12
1000522c:	dfc00215 	stw	ra,8(sp)
10005230:	df000115 	stw	fp,4(sp)
10005234:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10005238:	00840034 	movhi	r2,4096
1000523c:	10985f04 	addi	r2,r2,24956
10005240:	e0bfff15 	stw	r2,-4(fp)
10005244:	00000606 	br	10005260 <_do_dtors+0x38>
        (*dtor) (); 
10005248:	e0bfff17 	ldw	r2,-4(fp)
1000524c:	10800017 	ldw	r2,0(r2)
10005250:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10005254:	e0bfff17 	ldw	r2,-4(fp)
10005258:	10bfff04 	addi	r2,r2,-4
1000525c:	e0bfff15 	stw	r2,-4(fp)
10005260:	e0ffff17 	ldw	r3,-4(fp)
10005264:	00840034 	movhi	r2,4096
10005268:	10986004 	addi	r2,r2,24960
1000526c:	18bff62e 	bgeu	r3,r2,10005248 <__alt_data_end+0xf8005248>
        (*dtor) (); 
}
10005270:	0001883a 	nop
10005274:	e037883a 	mov	sp,fp
10005278:	dfc00117 	ldw	ra,4(sp)
1000527c:	df000017 	ldw	fp,0(sp)
10005280:	dec00204 	addi	sp,sp,8
10005284:	f800283a 	ret

10005288 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10005288:	deffff04 	addi	sp,sp,-4
1000528c:	df000015 	stw	fp,0(sp)
10005290:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10005294:	0001883a 	nop
10005298:	e037883a 	mov	sp,fp
1000529c:	df000017 	ldw	fp,0(sp)
100052a0:	dec00104 	addi	sp,sp,4
100052a4:	f800283a 	ret

100052a8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100052a8:	defff904 	addi	sp,sp,-28
100052ac:	dfc00615 	stw	ra,24(sp)
100052b0:	df000515 	stw	fp,20(sp)
100052b4:	df000504 	addi	fp,sp,20
100052b8:	e13ffc15 	stw	r4,-16(fp)
100052bc:	e17ffd15 	stw	r5,-12(fp)
100052c0:	e1bffe15 	stw	r6,-8(fp)
100052c4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100052c8:	e0800217 	ldw	r2,8(fp)
100052cc:	d8800015 	stw	r2,0(sp)
100052d0:	e1ffff17 	ldw	r7,-4(fp)
100052d4:	e1bffe17 	ldw	r6,-8(fp)
100052d8:	e17ffd17 	ldw	r5,-12(fp)
100052dc:	e13ffc17 	ldw	r4,-16(fp)
100052e0:	00054580 	call	10005458 <alt_iic_isr_register>
}  
100052e4:	e037883a 	mov	sp,fp
100052e8:	dfc00117 	ldw	ra,4(sp)
100052ec:	df000017 	ldw	fp,0(sp)
100052f0:	dec00204 	addi	sp,sp,8
100052f4:	f800283a 	ret

100052f8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100052f8:	defff904 	addi	sp,sp,-28
100052fc:	df000615 	stw	fp,24(sp)
10005300:	df000604 	addi	fp,sp,24
10005304:	e13ffe15 	stw	r4,-8(fp)
10005308:	e17fff15 	stw	r5,-4(fp)
1000530c:	e0bfff17 	ldw	r2,-4(fp)
10005310:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10005314:	0005303a 	rdctl	r2,status
10005318:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000531c:	e0fffb17 	ldw	r3,-20(fp)
10005320:	00bfff84 	movi	r2,-2
10005324:	1884703a 	and	r2,r3,r2
10005328:	1001703a 	wrctl	status,r2
  
  return context;
1000532c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10005330:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10005334:	00c00044 	movi	r3,1
10005338:	e0bffa17 	ldw	r2,-24(fp)
1000533c:	1884983a 	sll	r2,r3,r2
10005340:	1007883a 	mov	r3,r2
10005344:	d0a76c17 	ldw	r2,-25168(gp)
10005348:	1884b03a 	or	r2,r3,r2
1000534c:	d0a76c15 	stw	r2,-25168(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10005350:	d0a76c17 	ldw	r2,-25168(gp)
10005354:	100170fa 	wrctl	ienable,r2
10005358:	e0bffc17 	ldw	r2,-16(fp)
1000535c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10005360:	e0bffd17 	ldw	r2,-12(fp)
10005364:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10005368:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000536c:	0001883a 	nop
}
10005370:	e037883a 	mov	sp,fp
10005374:	df000017 	ldw	fp,0(sp)
10005378:	dec00104 	addi	sp,sp,4
1000537c:	f800283a 	ret

10005380 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10005380:	defff904 	addi	sp,sp,-28
10005384:	df000615 	stw	fp,24(sp)
10005388:	df000604 	addi	fp,sp,24
1000538c:	e13ffe15 	stw	r4,-8(fp)
10005390:	e17fff15 	stw	r5,-4(fp)
10005394:	e0bfff17 	ldw	r2,-4(fp)
10005398:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000539c:	0005303a 	rdctl	r2,status
100053a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100053a4:	e0fffb17 	ldw	r3,-20(fp)
100053a8:	00bfff84 	movi	r2,-2
100053ac:	1884703a 	and	r2,r3,r2
100053b0:	1001703a 	wrctl	status,r2
  
  return context;
100053b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100053b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100053bc:	00c00044 	movi	r3,1
100053c0:	e0bffa17 	ldw	r2,-24(fp)
100053c4:	1884983a 	sll	r2,r3,r2
100053c8:	0084303a 	nor	r2,zero,r2
100053cc:	1007883a 	mov	r3,r2
100053d0:	d0a76c17 	ldw	r2,-25168(gp)
100053d4:	1884703a 	and	r2,r3,r2
100053d8:	d0a76c15 	stw	r2,-25168(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100053dc:	d0a76c17 	ldw	r2,-25168(gp)
100053e0:	100170fa 	wrctl	ienable,r2
100053e4:	e0bffc17 	ldw	r2,-16(fp)
100053e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100053ec:	e0bffd17 	ldw	r2,-12(fp)
100053f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100053f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100053f8:	0001883a 	nop
}
100053fc:	e037883a 	mov	sp,fp
10005400:	df000017 	ldw	fp,0(sp)
10005404:	dec00104 	addi	sp,sp,4
10005408:	f800283a 	ret

1000540c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1000540c:	defffc04 	addi	sp,sp,-16
10005410:	df000315 	stw	fp,12(sp)
10005414:	df000304 	addi	fp,sp,12
10005418:	e13ffe15 	stw	r4,-8(fp)
1000541c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10005420:	000530fa 	rdctl	r2,ienable
10005424:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10005428:	00c00044 	movi	r3,1
1000542c:	e0bfff17 	ldw	r2,-4(fp)
10005430:	1884983a 	sll	r2,r3,r2
10005434:	1007883a 	mov	r3,r2
10005438:	e0bffd17 	ldw	r2,-12(fp)
1000543c:	1884703a 	and	r2,r3,r2
10005440:	1004c03a 	cmpne	r2,r2,zero
10005444:	10803fcc 	andi	r2,r2,255
}
10005448:	e037883a 	mov	sp,fp
1000544c:	df000017 	ldw	fp,0(sp)
10005450:	dec00104 	addi	sp,sp,4
10005454:	f800283a 	ret

10005458 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10005458:	defff504 	addi	sp,sp,-44
1000545c:	dfc00a15 	stw	ra,40(sp)
10005460:	df000915 	stw	fp,36(sp)
10005464:	df000904 	addi	fp,sp,36
10005468:	e13ffc15 	stw	r4,-16(fp)
1000546c:	e17ffd15 	stw	r5,-12(fp)
10005470:	e1bffe15 	stw	r6,-8(fp)
10005474:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10005478:	00bffa84 	movi	r2,-22
1000547c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10005480:	e0bffd17 	ldw	r2,-12(fp)
10005484:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10005488:	e0bff817 	ldw	r2,-32(fp)
1000548c:	10800808 	cmpgei	r2,r2,32
10005490:	1000271e 	bne	r2,zero,10005530 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10005494:	0005303a 	rdctl	r2,status
10005498:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000549c:	e0fffb17 	ldw	r3,-20(fp)
100054a0:	00bfff84 	movi	r2,-2
100054a4:	1884703a 	and	r2,r3,r2
100054a8:	1001703a 	wrctl	status,r2
  
  return context;
100054ac:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100054b0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
100054b4:	00840074 	movhi	r2,4097
100054b8:	10a73b04 	addi	r2,r2,-25364
100054bc:	e0fff817 	ldw	r3,-32(fp)
100054c0:	180690fa 	slli	r3,r3,3
100054c4:	10c5883a 	add	r2,r2,r3
100054c8:	e0fffe17 	ldw	r3,-8(fp)
100054cc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100054d0:	00840074 	movhi	r2,4097
100054d4:	10a73b04 	addi	r2,r2,-25364
100054d8:	e0fff817 	ldw	r3,-32(fp)
100054dc:	180690fa 	slli	r3,r3,3
100054e0:	10c5883a 	add	r2,r2,r3
100054e4:	10800104 	addi	r2,r2,4
100054e8:	e0ffff17 	ldw	r3,-4(fp)
100054ec:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100054f0:	e0bffe17 	ldw	r2,-8(fp)
100054f4:	10000526 	beq	r2,zero,1000550c <alt_iic_isr_register+0xb4>
100054f8:	e0bff817 	ldw	r2,-32(fp)
100054fc:	100b883a 	mov	r5,r2
10005500:	e13ffc17 	ldw	r4,-16(fp)
10005504:	00052f80 	call	100052f8 <alt_ic_irq_enable>
10005508:	00000406 	br	1000551c <alt_iic_isr_register+0xc4>
1000550c:	e0bff817 	ldw	r2,-32(fp)
10005510:	100b883a 	mov	r5,r2
10005514:	e13ffc17 	ldw	r4,-16(fp)
10005518:	00053800 	call	10005380 <alt_ic_irq_disable>
1000551c:	e0bff715 	stw	r2,-36(fp)
10005520:	e0bffa17 	ldw	r2,-24(fp)
10005524:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10005528:	e0bff917 	ldw	r2,-28(fp)
1000552c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10005530:	e0bff717 	ldw	r2,-36(fp)
}
10005534:	e037883a 	mov	sp,fp
10005538:	dfc00117 	ldw	ra,4(sp)
1000553c:	df000017 	ldw	fp,0(sp)
10005540:	dec00204 	addi	sp,sp,8
10005544:	f800283a 	ret

10005548 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10005548:	defff804 	addi	sp,sp,-32
1000554c:	dfc00715 	stw	ra,28(sp)
10005550:	df000615 	stw	fp,24(sp)
10005554:	dc000515 	stw	r16,20(sp)
10005558:	df000604 	addi	fp,sp,24
1000555c:	e13ffb15 	stw	r4,-20(fp)
10005560:	e17ffc15 	stw	r5,-16(fp)
10005564:	e1bffd15 	stw	r6,-12(fp)
10005568:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000556c:	e1bffe17 	ldw	r6,-8(fp)
10005570:	e17ffd17 	ldw	r5,-12(fp)
10005574:	e13ffc17 	ldw	r4,-16(fp)
10005578:	00057d00 	call	100057d0 <open>
1000557c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10005580:	e0bffa17 	ldw	r2,-24(fp)
10005584:	10002216 	blt	r2,zero,10005610 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10005588:	04040034 	movhi	r16,4096
1000558c:	841b4904 	addi	r16,r16,27940
10005590:	e0bffa17 	ldw	r2,-24(fp)
10005594:	01400304 	movi	r5,12
10005598:	1009883a 	mov	r4,r2
1000559c:	00009cc0 	call	100009cc <__mulsi3>
100055a0:	8085883a 	add	r2,r16,r2
100055a4:	10c00017 	ldw	r3,0(r2)
100055a8:	e0bffb17 	ldw	r2,-20(fp)
100055ac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100055b0:	04040034 	movhi	r16,4096
100055b4:	841b4904 	addi	r16,r16,27940
100055b8:	e0bffa17 	ldw	r2,-24(fp)
100055bc:	01400304 	movi	r5,12
100055c0:	1009883a 	mov	r4,r2
100055c4:	00009cc0 	call	100009cc <__mulsi3>
100055c8:	8085883a 	add	r2,r16,r2
100055cc:	10800104 	addi	r2,r2,4
100055d0:	10c00017 	ldw	r3,0(r2)
100055d4:	e0bffb17 	ldw	r2,-20(fp)
100055d8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100055dc:	04040034 	movhi	r16,4096
100055e0:	841b4904 	addi	r16,r16,27940
100055e4:	e0bffa17 	ldw	r2,-24(fp)
100055e8:	01400304 	movi	r5,12
100055ec:	1009883a 	mov	r4,r2
100055f0:	00009cc0 	call	100009cc <__mulsi3>
100055f4:	8085883a 	add	r2,r16,r2
100055f8:	10800204 	addi	r2,r2,8
100055fc:	10c00017 	ldw	r3,0(r2)
10005600:	e0bffb17 	ldw	r2,-20(fp)
10005604:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10005608:	e13ffa17 	ldw	r4,-24(fp)
1000560c:	00040840 	call	10004084 <alt_release_fd>
  }
} 
10005610:	0001883a 	nop
10005614:	e6ffff04 	addi	sp,fp,-4
10005618:	dfc00217 	ldw	ra,8(sp)
1000561c:	df000117 	ldw	fp,4(sp)
10005620:	dc000017 	ldw	r16,0(sp)
10005624:	dec00304 	addi	sp,sp,12
10005628:	f800283a 	ret

1000562c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1000562c:	defffb04 	addi	sp,sp,-20
10005630:	dfc00415 	stw	ra,16(sp)
10005634:	df000315 	stw	fp,12(sp)
10005638:	df000304 	addi	fp,sp,12
1000563c:	e13ffd15 	stw	r4,-12(fp)
10005640:	e17ffe15 	stw	r5,-8(fp)
10005644:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10005648:	01c07fc4 	movi	r7,511
1000564c:	01800044 	movi	r6,1
10005650:	e17ffd17 	ldw	r5,-12(fp)
10005654:	01040034 	movhi	r4,4096
10005658:	211b4c04 	addi	r4,r4,27952
1000565c:	00055480 	call	10005548 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10005660:	01c07fc4 	movi	r7,511
10005664:	000d883a 	mov	r6,zero
10005668:	e17ffe17 	ldw	r5,-8(fp)
1000566c:	01040034 	movhi	r4,4096
10005670:	211b4904 	addi	r4,r4,27940
10005674:	00055480 	call	10005548 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10005678:	01c07fc4 	movi	r7,511
1000567c:	01800044 	movi	r6,1
10005680:	e17fff17 	ldw	r5,-4(fp)
10005684:	01040034 	movhi	r4,4096
10005688:	211b4f04 	addi	r4,r4,27964
1000568c:	00055480 	call	10005548 <alt_open_fd>
}  
10005690:	0001883a 	nop
10005694:	e037883a 	mov	sp,fp
10005698:	dfc00117 	ldw	ra,4(sp)
1000569c:	df000017 	ldw	fp,0(sp)
100056a0:	dec00204 	addi	sp,sp,8
100056a4:	f800283a 	ret

100056a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100056a8:	defffe04 	addi	sp,sp,-8
100056ac:	dfc00115 	stw	ra,4(sp)
100056b0:	df000015 	stw	fp,0(sp)
100056b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100056b8:	d0a00b17 	ldw	r2,-32724(gp)
100056bc:	10000326 	beq	r2,zero,100056cc <alt_get_errno+0x24>
100056c0:	d0a00b17 	ldw	r2,-32724(gp)
100056c4:	103ee83a 	callr	r2
100056c8:	00000106 	br	100056d0 <alt_get_errno+0x28>
100056cc:	d0a76804 	addi	r2,gp,-25184
}
100056d0:	e037883a 	mov	sp,fp
100056d4:	dfc00117 	ldw	ra,4(sp)
100056d8:	df000017 	ldw	fp,0(sp)
100056dc:	dec00204 	addi	sp,sp,8
100056e0:	f800283a 	ret

100056e4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100056e4:	defffb04 	addi	sp,sp,-20
100056e8:	dfc00415 	stw	ra,16(sp)
100056ec:	df000315 	stw	fp,12(sp)
100056f0:	dc000215 	stw	r16,8(sp)
100056f4:	df000304 	addi	fp,sp,12
100056f8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100056fc:	e0bffe17 	ldw	r2,-8(fp)
10005700:	10800217 	ldw	r2,8(r2)
10005704:	10d00034 	orhi	r3,r2,16384
10005708:	e0bffe17 	ldw	r2,-8(fp)
1000570c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10005710:	e03ffd15 	stw	zero,-12(fp)
10005714:	00002306 	br	100057a4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10005718:	04040034 	movhi	r16,4096
1000571c:	841b4904 	addi	r16,r16,27940
10005720:	e0bffd17 	ldw	r2,-12(fp)
10005724:	01400304 	movi	r5,12
10005728:	1009883a 	mov	r4,r2
1000572c:	00009cc0 	call	100009cc <__mulsi3>
10005730:	8085883a 	add	r2,r16,r2
10005734:	10c00017 	ldw	r3,0(r2)
10005738:	e0bffe17 	ldw	r2,-8(fp)
1000573c:	10800017 	ldw	r2,0(r2)
10005740:	1880151e 	bne	r3,r2,10005798 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10005744:	04040034 	movhi	r16,4096
10005748:	841b4904 	addi	r16,r16,27940
1000574c:	e0bffd17 	ldw	r2,-12(fp)
10005750:	01400304 	movi	r5,12
10005754:	1009883a 	mov	r4,r2
10005758:	00009cc0 	call	100009cc <__mulsi3>
1000575c:	8085883a 	add	r2,r16,r2
10005760:	10800204 	addi	r2,r2,8
10005764:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10005768:	10000b0e 	bge	r2,zero,10005798 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000576c:	01400304 	movi	r5,12
10005770:	e13ffd17 	ldw	r4,-12(fp)
10005774:	00009cc0 	call	100009cc <__mulsi3>
10005778:	1007883a 	mov	r3,r2
1000577c:	00840034 	movhi	r2,4096
10005780:	109b4904 	addi	r2,r2,27940
10005784:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10005788:	e0bffe17 	ldw	r2,-8(fp)
1000578c:	18800226 	beq	r3,r2,10005798 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10005790:	00bffcc4 	movi	r2,-13
10005794:	00000806 	br	100057b8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10005798:	e0bffd17 	ldw	r2,-12(fp)
1000579c:	10800044 	addi	r2,r2,1
100057a0:	e0bffd15 	stw	r2,-12(fp)
100057a4:	d0a00a17 	ldw	r2,-32728(gp)
100057a8:	1007883a 	mov	r3,r2
100057ac:	e0bffd17 	ldw	r2,-12(fp)
100057b0:	18bfd92e 	bgeu	r3,r2,10005718 <__alt_data_end+0xf8005718>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100057b4:	0005883a 	mov	r2,zero
}
100057b8:	e6ffff04 	addi	sp,fp,-4
100057bc:	dfc00217 	ldw	ra,8(sp)
100057c0:	df000117 	ldw	fp,4(sp)
100057c4:	dc000017 	ldw	r16,0(sp)
100057c8:	dec00304 	addi	sp,sp,12
100057cc:	f800283a 	ret

100057d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100057d0:	defff604 	addi	sp,sp,-40
100057d4:	dfc00915 	stw	ra,36(sp)
100057d8:	df000815 	stw	fp,32(sp)
100057dc:	df000804 	addi	fp,sp,32
100057e0:	e13ffd15 	stw	r4,-12(fp)
100057e4:	e17ffe15 	stw	r5,-8(fp)
100057e8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100057ec:	00bfffc4 	movi	r2,-1
100057f0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100057f4:	00bffb44 	movi	r2,-19
100057f8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100057fc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10005800:	d1600804 	addi	r5,gp,-32736
10005804:	e13ffd17 	ldw	r4,-12(fp)
10005808:	0005af40 	call	10005af4 <alt_find_dev>
1000580c:	e0bff815 	stw	r2,-32(fp)
10005810:	e0bff817 	ldw	r2,-32(fp)
10005814:	1000051e 	bne	r2,zero,1000582c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10005818:	e13ffd17 	ldw	r4,-12(fp)
1000581c:	0005b840 	call	10005b84 <alt_find_file>
10005820:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10005824:	00800044 	movi	r2,1
10005828:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1000582c:	e0bff817 	ldw	r2,-32(fp)
10005830:	10002b26 	beq	r2,zero,100058e0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10005834:	e13ff817 	ldw	r4,-32(fp)
10005838:	0005c8c0 	call	10005c8c <alt_get_fd>
1000583c:	e0bff915 	stw	r2,-28(fp)
10005840:	e0bff917 	ldw	r2,-28(fp)
10005844:	1000030e 	bge	r2,zero,10005854 <open+0x84>
    {
      status = index;
10005848:	e0bff917 	ldw	r2,-28(fp)
1000584c:	e0bffa15 	stw	r2,-24(fp)
10005850:	00002506 	br	100058e8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10005854:	01400304 	movi	r5,12
10005858:	e13ff917 	ldw	r4,-28(fp)
1000585c:	00009cc0 	call	100009cc <__mulsi3>
10005860:	1007883a 	mov	r3,r2
10005864:	00840034 	movhi	r2,4096
10005868:	109b4904 	addi	r2,r2,27940
1000586c:	1885883a 	add	r2,r3,r2
10005870:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10005874:	e0fffe17 	ldw	r3,-8(fp)
10005878:	00900034 	movhi	r2,16384
1000587c:	10bfffc4 	addi	r2,r2,-1
10005880:	1886703a 	and	r3,r3,r2
10005884:	e0bffc17 	ldw	r2,-16(fp)
10005888:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000588c:	e0bffb17 	ldw	r2,-20(fp)
10005890:	1000051e 	bne	r2,zero,100058a8 <open+0xd8>
10005894:	e13ffc17 	ldw	r4,-16(fp)
10005898:	00056e40 	call	100056e4 <alt_file_locked>
1000589c:	e0bffa15 	stw	r2,-24(fp)
100058a0:	e0bffa17 	ldw	r2,-24(fp)
100058a4:	10001016 	blt	r2,zero,100058e8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100058a8:	e0bff817 	ldw	r2,-32(fp)
100058ac:	10800317 	ldw	r2,12(r2)
100058b0:	10000826 	beq	r2,zero,100058d4 <open+0x104>
100058b4:	e0bff817 	ldw	r2,-32(fp)
100058b8:	10800317 	ldw	r2,12(r2)
100058bc:	e1ffff17 	ldw	r7,-4(fp)
100058c0:	e1bffe17 	ldw	r6,-8(fp)
100058c4:	e17ffd17 	ldw	r5,-12(fp)
100058c8:	e13ffc17 	ldw	r4,-16(fp)
100058cc:	103ee83a 	callr	r2
100058d0:	00000106 	br	100058d8 <open+0x108>
100058d4:	0005883a 	mov	r2,zero
100058d8:	e0bffa15 	stw	r2,-24(fp)
100058dc:	00000206 	br	100058e8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
100058e0:	00bffb44 	movi	r2,-19
100058e4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100058e8:	e0bffa17 	ldw	r2,-24(fp)
100058ec:	1000090e 	bge	r2,zero,10005914 <open+0x144>
  {
    alt_release_fd (index);  
100058f0:	e13ff917 	ldw	r4,-28(fp)
100058f4:	00040840 	call	10004084 <alt_release_fd>
    ALT_ERRNO = -status;
100058f8:	00056a80 	call	100056a8 <alt_get_errno>
100058fc:	1007883a 	mov	r3,r2
10005900:	e0bffa17 	ldw	r2,-24(fp)
10005904:	0085c83a 	sub	r2,zero,r2
10005908:	18800015 	stw	r2,0(r3)
    return -1;
1000590c:	00bfffc4 	movi	r2,-1
10005910:	00000106 	br	10005918 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10005914:	e0bff917 	ldw	r2,-28(fp)
}
10005918:	e037883a 	mov	sp,fp
1000591c:	dfc00117 	ldw	ra,4(sp)
10005920:	df000017 	ldw	fp,0(sp)
10005924:	dec00204 	addi	sp,sp,8
10005928:	f800283a 	ret

1000592c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1000592c:	defffa04 	addi	sp,sp,-24
10005930:	df000515 	stw	fp,20(sp)
10005934:	df000504 	addi	fp,sp,20
10005938:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000593c:	0005303a 	rdctl	r2,status
10005940:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10005944:	e0fffc17 	ldw	r3,-16(fp)
10005948:	00bfff84 	movi	r2,-2
1000594c:	1884703a 	and	r2,r3,r2
10005950:	1001703a 	wrctl	status,r2
  
  return context;
10005954:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10005958:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1000595c:	e0bfff17 	ldw	r2,-4(fp)
10005960:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10005964:	e0bffd17 	ldw	r2,-12(fp)
10005968:	10800017 	ldw	r2,0(r2)
1000596c:	e0fffd17 	ldw	r3,-12(fp)
10005970:	18c00117 	ldw	r3,4(r3)
10005974:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10005978:	e0bffd17 	ldw	r2,-12(fp)
1000597c:	10800117 	ldw	r2,4(r2)
10005980:	e0fffd17 	ldw	r3,-12(fp)
10005984:	18c00017 	ldw	r3,0(r3)
10005988:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1000598c:	e0bffd17 	ldw	r2,-12(fp)
10005990:	e0fffd17 	ldw	r3,-12(fp)
10005994:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10005998:	e0bffd17 	ldw	r2,-12(fp)
1000599c:	e0fffd17 	ldw	r3,-12(fp)
100059a0:	10c00015 	stw	r3,0(r2)
100059a4:	e0bffb17 	ldw	r2,-20(fp)
100059a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100059ac:	e0bffe17 	ldw	r2,-8(fp)
100059b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100059b4:	0001883a 	nop
100059b8:	e037883a 	mov	sp,fp
100059bc:	df000017 	ldw	fp,0(sp)
100059c0:	dec00104 	addi	sp,sp,4
100059c4:	f800283a 	ret

100059c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100059c8:	defffb04 	addi	sp,sp,-20
100059cc:	dfc00415 	stw	ra,16(sp)
100059d0:	df000315 	stw	fp,12(sp)
100059d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100059d8:	d0a00e17 	ldw	r2,-32712(gp)
100059dc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100059e0:	d0a76e17 	ldw	r2,-25160(gp)
100059e4:	10800044 	addi	r2,r2,1
100059e8:	d0a76e15 	stw	r2,-25160(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100059ec:	00002e06 	br	10005aa8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100059f0:	e0bffd17 	ldw	r2,-12(fp)
100059f4:	10800017 	ldw	r2,0(r2)
100059f8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100059fc:	e0bffd17 	ldw	r2,-12(fp)
10005a00:	10800403 	ldbu	r2,16(r2)
10005a04:	10803fcc 	andi	r2,r2,255
10005a08:	10000426 	beq	r2,zero,10005a1c <alt_tick+0x54>
10005a0c:	d0a76e17 	ldw	r2,-25160(gp)
10005a10:	1000021e 	bne	r2,zero,10005a1c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10005a14:	e0bffd17 	ldw	r2,-12(fp)
10005a18:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10005a1c:	e0bffd17 	ldw	r2,-12(fp)
10005a20:	10800217 	ldw	r2,8(r2)
10005a24:	d0e76e17 	ldw	r3,-25160(gp)
10005a28:	18801d36 	bltu	r3,r2,10005aa0 <alt_tick+0xd8>
10005a2c:	e0bffd17 	ldw	r2,-12(fp)
10005a30:	10800403 	ldbu	r2,16(r2)
10005a34:	10803fcc 	andi	r2,r2,255
10005a38:	1000191e 	bne	r2,zero,10005aa0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10005a3c:	e0bffd17 	ldw	r2,-12(fp)
10005a40:	10800317 	ldw	r2,12(r2)
10005a44:	e0fffd17 	ldw	r3,-12(fp)
10005a48:	18c00517 	ldw	r3,20(r3)
10005a4c:	1809883a 	mov	r4,r3
10005a50:	103ee83a 	callr	r2
10005a54:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10005a58:	e0bfff17 	ldw	r2,-4(fp)
10005a5c:	1000031e 	bne	r2,zero,10005a6c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10005a60:	e13ffd17 	ldw	r4,-12(fp)
10005a64:	000592c0 	call	1000592c <alt_alarm_stop>
10005a68:	00000d06 	br	10005aa0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10005a6c:	e0bffd17 	ldw	r2,-12(fp)
10005a70:	10c00217 	ldw	r3,8(r2)
10005a74:	e0bfff17 	ldw	r2,-4(fp)
10005a78:	1887883a 	add	r3,r3,r2
10005a7c:	e0bffd17 	ldw	r2,-12(fp)
10005a80:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10005a84:	e0bffd17 	ldw	r2,-12(fp)
10005a88:	10c00217 	ldw	r3,8(r2)
10005a8c:	d0a76e17 	ldw	r2,-25160(gp)
10005a90:	1880032e 	bgeu	r3,r2,10005aa0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10005a94:	e0bffd17 	ldw	r2,-12(fp)
10005a98:	00c00044 	movi	r3,1
10005a9c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10005aa0:	e0bffe17 	ldw	r2,-8(fp)
10005aa4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10005aa8:	e0fffd17 	ldw	r3,-12(fp)
10005aac:	d0a00e04 	addi	r2,gp,-32712
10005ab0:	18bfcf1e 	bne	r3,r2,100059f0 <__alt_data_end+0xf80059f0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10005ab4:	0001883a 	nop
}
10005ab8:	0001883a 	nop
10005abc:	e037883a 	mov	sp,fp
10005ac0:	dfc00117 	ldw	ra,4(sp)
10005ac4:	df000017 	ldw	fp,0(sp)
10005ac8:	dec00204 	addi	sp,sp,8
10005acc:	f800283a 	ret

10005ad0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10005ad0:	deffff04 	addi	sp,sp,-4
10005ad4:	df000015 	stw	fp,0(sp)
10005ad8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10005adc:	000170fa 	wrctl	ienable,zero
}
10005ae0:	0001883a 	nop
10005ae4:	e037883a 	mov	sp,fp
10005ae8:	df000017 	ldw	fp,0(sp)
10005aec:	dec00104 	addi	sp,sp,4
10005af0:	f800283a 	ret

10005af4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10005af4:	defffa04 	addi	sp,sp,-24
10005af8:	dfc00515 	stw	ra,20(sp)
10005afc:	df000415 	stw	fp,16(sp)
10005b00:	df000404 	addi	fp,sp,16
10005b04:	e13ffe15 	stw	r4,-8(fp)
10005b08:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10005b0c:	e0bfff17 	ldw	r2,-4(fp)
10005b10:	10800017 	ldw	r2,0(r2)
10005b14:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10005b18:	e13ffe17 	ldw	r4,-8(fp)
10005b1c:	0000b440 	call	10000b44 <strlen>
10005b20:	10800044 	addi	r2,r2,1
10005b24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10005b28:	00000d06 	br	10005b60 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10005b2c:	e0bffc17 	ldw	r2,-16(fp)
10005b30:	10800217 	ldw	r2,8(r2)
10005b34:	e0fffd17 	ldw	r3,-12(fp)
10005b38:	180d883a 	mov	r6,r3
10005b3c:	e17ffe17 	ldw	r5,-8(fp)
10005b40:	1009883a 	mov	r4,r2
10005b44:	0005e380 	call	10005e38 <memcmp>
10005b48:	1000021e 	bne	r2,zero,10005b54 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10005b4c:	e0bffc17 	ldw	r2,-16(fp)
10005b50:	00000706 	br	10005b70 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10005b54:	e0bffc17 	ldw	r2,-16(fp)
10005b58:	10800017 	ldw	r2,0(r2)
10005b5c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10005b60:	e0fffc17 	ldw	r3,-16(fp)
10005b64:	e0bfff17 	ldw	r2,-4(fp)
10005b68:	18bff01e 	bne	r3,r2,10005b2c <__alt_data_end+0xf8005b2c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10005b6c:	0005883a 	mov	r2,zero
}
10005b70:	e037883a 	mov	sp,fp
10005b74:	dfc00117 	ldw	ra,4(sp)
10005b78:	df000017 	ldw	fp,0(sp)
10005b7c:	dec00204 	addi	sp,sp,8
10005b80:	f800283a 	ret

10005b84 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10005b84:	defffb04 	addi	sp,sp,-20
10005b88:	dfc00415 	stw	ra,16(sp)
10005b8c:	df000315 	stw	fp,12(sp)
10005b90:	df000304 	addi	fp,sp,12
10005b94:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10005b98:	d0a00617 	ldw	r2,-32744(gp)
10005b9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10005ba0:	00003106 	br	10005c68 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10005ba4:	e0bffd17 	ldw	r2,-12(fp)
10005ba8:	10800217 	ldw	r2,8(r2)
10005bac:	1009883a 	mov	r4,r2
10005bb0:	0000b440 	call	10000b44 <strlen>
10005bb4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10005bb8:	e0bffd17 	ldw	r2,-12(fp)
10005bbc:	10c00217 	ldw	r3,8(r2)
10005bc0:	e0bffe17 	ldw	r2,-8(fp)
10005bc4:	10bfffc4 	addi	r2,r2,-1
10005bc8:	1885883a 	add	r2,r3,r2
10005bcc:	10800003 	ldbu	r2,0(r2)
10005bd0:	10803fcc 	andi	r2,r2,255
10005bd4:	1080201c 	xori	r2,r2,128
10005bd8:	10bfe004 	addi	r2,r2,-128
10005bdc:	10800bd8 	cmpnei	r2,r2,47
10005be0:	1000031e 	bne	r2,zero,10005bf0 <alt_find_file+0x6c>
    {
      len -= 1;
10005be4:	e0bffe17 	ldw	r2,-8(fp)
10005be8:	10bfffc4 	addi	r2,r2,-1
10005bec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10005bf0:	e0bffe17 	ldw	r2,-8(fp)
10005bf4:	e0ffff17 	ldw	r3,-4(fp)
10005bf8:	1885883a 	add	r2,r3,r2
10005bfc:	10800003 	ldbu	r2,0(r2)
10005c00:	10803fcc 	andi	r2,r2,255
10005c04:	1080201c 	xori	r2,r2,128
10005c08:	10bfe004 	addi	r2,r2,-128
10005c0c:	10800be0 	cmpeqi	r2,r2,47
10005c10:	1000081e 	bne	r2,zero,10005c34 <alt_find_file+0xb0>
10005c14:	e0bffe17 	ldw	r2,-8(fp)
10005c18:	e0ffff17 	ldw	r3,-4(fp)
10005c1c:	1885883a 	add	r2,r3,r2
10005c20:	10800003 	ldbu	r2,0(r2)
10005c24:	10803fcc 	andi	r2,r2,255
10005c28:	1080201c 	xori	r2,r2,128
10005c2c:	10bfe004 	addi	r2,r2,-128
10005c30:	10000a1e 	bne	r2,zero,10005c5c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10005c34:	e0bffd17 	ldw	r2,-12(fp)
10005c38:	10800217 	ldw	r2,8(r2)
10005c3c:	e0fffe17 	ldw	r3,-8(fp)
10005c40:	180d883a 	mov	r6,r3
10005c44:	e17fff17 	ldw	r5,-4(fp)
10005c48:	1009883a 	mov	r4,r2
10005c4c:	0005e380 	call	10005e38 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10005c50:	1000021e 	bne	r2,zero,10005c5c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10005c54:	e0bffd17 	ldw	r2,-12(fp)
10005c58:	00000706 	br	10005c78 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10005c5c:	e0bffd17 	ldw	r2,-12(fp)
10005c60:	10800017 	ldw	r2,0(r2)
10005c64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10005c68:	e0fffd17 	ldw	r3,-12(fp)
10005c6c:	d0a00604 	addi	r2,gp,-32744
10005c70:	18bfcc1e 	bne	r3,r2,10005ba4 <__alt_data_end+0xf8005ba4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10005c74:	0005883a 	mov	r2,zero
}
10005c78:	e037883a 	mov	sp,fp
10005c7c:	dfc00117 	ldw	ra,4(sp)
10005c80:	df000017 	ldw	fp,0(sp)
10005c84:	dec00204 	addi	sp,sp,8
10005c88:	f800283a 	ret

10005c8c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10005c8c:	defffa04 	addi	sp,sp,-24
10005c90:	dfc00515 	stw	ra,20(sp)
10005c94:	df000415 	stw	fp,16(sp)
10005c98:	dc000315 	stw	r16,12(sp)
10005c9c:	df000404 	addi	fp,sp,16
10005ca0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10005ca4:	00bffa04 	movi	r2,-24
10005ca8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10005cac:	e03ffc15 	stw	zero,-16(fp)
10005cb0:	00001d06 	br	10005d28 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10005cb4:	04040034 	movhi	r16,4096
10005cb8:	841b4904 	addi	r16,r16,27940
10005cbc:	e0bffc17 	ldw	r2,-16(fp)
10005cc0:	01400304 	movi	r5,12
10005cc4:	1009883a 	mov	r4,r2
10005cc8:	00009cc0 	call	100009cc <__mulsi3>
10005ccc:	8085883a 	add	r2,r16,r2
10005cd0:	10800017 	ldw	r2,0(r2)
10005cd4:	1000111e 	bne	r2,zero,10005d1c <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10005cd8:	04040034 	movhi	r16,4096
10005cdc:	841b4904 	addi	r16,r16,27940
10005ce0:	e0bffc17 	ldw	r2,-16(fp)
10005ce4:	01400304 	movi	r5,12
10005ce8:	1009883a 	mov	r4,r2
10005cec:	00009cc0 	call	100009cc <__mulsi3>
10005cf0:	8085883a 	add	r2,r16,r2
10005cf4:	e0fffe17 	ldw	r3,-8(fp)
10005cf8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10005cfc:	d0e00a17 	ldw	r3,-32728(gp)
10005d00:	e0bffc17 	ldw	r2,-16(fp)
10005d04:	1880020e 	bge	r3,r2,10005d10 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10005d08:	e0bffc17 	ldw	r2,-16(fp)
10005d0c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10005d10:	e0bffc17 	ldw	r2,-16(fp)
10005d14:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10005d18:	00000606 	br	10005d34 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10005d1c:	e0bffc17 	ldw	r2,-16(fp)
10005d20:	10800044 	addi	r2,r2,1
10005d24:	e0bffc15 	stw	r2,-16(fp)
10005d28:	e0bffc17 	ldw	r2,-16(fp)
10005d2c:	10800810 	cmplti	r2,r2,32
10005d30:	103fe01e 	bne	r2,zero,10005cb4 <__alt_data_end+0xf8005cb4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10005d34:	e0bffd17 	ldw	r2,-12(fp)
}
10005d38:	e6ffff04 	addi	sp,fp,-4
10005d3c:	dfc00217 	ldw	ra,8(sp)
10005d40:	df000117 	ldw	fp,4(sp)
10005d44:	dc000017 	ldw	r16,0(sp)
10005d48:	dec00304 	addi	sp,sp,12
10005d4c:	f800283a 	ret

10005d50 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10005d50:	defffe04 	addi	sp,sp,-8
10005d54:	df000115 	stw	fp,4(sp)
10005d58:	df000104 	addi	fp,sp,4
10005d5c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10005d60:	e0bfff17 	ldw	r2,-4(fp)
10005d64:	10bffe84 	addi	r2,r2,-6
10005d68:	10c00428 	cmpgeui	r3,r2,16
10005d6c:	18001a1e 	bne	r3,zero,10005dd8 <alt_exception_cause_generated_bad_addr+0x88>
10005d70:	100690ba 	slli	r3,r2,2
10005d74:	00840034 	movhi	r2,4096
10005d78:	10976204 	addi	r2,r2,23944
10005d7c:	1885883a 	add	r2,r3,r2
10005d80:	10800017 	ldw	r2,0(r2)
10005d84:	1000683a 	jmp	r2
10005d88:	10005dc8 	cmpgei	zero,r2,375
10005d8c:	10005dc8 	cmpgei	zero,r2,375
10005d90:	10005dd8 	cmpnei	zero,r2,375
10005d94:	10005dd8 	cmpnei	zero,r2,375
10005d98:	10005dd8 	cmpnei	zero,r2,375
10005d9c:	10005dc8 	cmpgei	zero,r2,375
10005da0:	10005dd0 	cmplti	zero,r2,375
10005da4:	10005dd8 	cmpnei	zero,r2,375
10005da8:	10005dc8 	cmpgei	zero,r2,375
10005dac:	10005dc8 	cmpgei	zero,r2,375
10005db0:	10005dd8 	cmpnei	zero,r2,375
10005db4:	10005dc8 	cmpgei	zero,r2,375
10005db8:	10005dd0 	cmplti	zero,r2,375
10005dbc:	10005dd8 	cmpnei	zero,r2,375
10005dc0:	10005dd8 	cmpnei	zero,r2,375
10005dc4:	10005dc8 	cmpgei	zero,r2,375
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10005dc8:	00800044 	movi	r2,1
10005dcc:	00000306 	br	10005ddc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10005dd0:	0005883a 	mov	r2,zero
10005dd4:	00000106 	br	10005ddc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10005dd8:	0005883a 	mov	r2,zero
  }
}
10005ddc:	e037883a 	mov	sp,fp
10005de0:	df000017 	ldw	fp,0(sp)
10005de4:	dec00104 	addi	sp,sp,4
10005de8:	f800283a 	ret

10005dec <atexit>:
10005dec:	200b883a 	mov	r5,r4
10005df0:	000f883a 	mov	r7,zero
10005df4:	000d883a 	mov	r6,zero
10005df8:	0009883a 	mov	r4,zero
10005dfc:	0005eb41 	jmpi	10005eb4 <__register_exitproc>

10005e00 <exit>:
10005e00:	defffe04 	addi	sp,sp,-8
10005e04:	000b883a 	mov	r5,zero
10005e08:	dc000015 	stw	r16,0(sp)
10005e0c:	dfc00115 	stw	ra,4(sp)
10005e10:	2021883a 	mov	r16,r4
10005e14:	0005fcc0 	call	10005fcc <__call_exitprocs>
10005e18:	00840034 	movhi	r2,4096
10005e1c:	109fc304 	addi	r2,r2,32524
10005e20:	11000017 	ldw	r4,0(r2)
10005e24:	20800f17 	ldw	r2,60(r4)
10005e28:	10000126 	beq	r2,zero,10005e30 <exit+0x30>
10005e2c:	103ee83a 	callr	r2
10005e30:	8009883a 	mov	r4,r16
10005e34:	000614c0 	call	1000614c <_exit>

10005e38 <memcmp>:
10005e38:	01c000c4 	movi	r7,3
10005e3c:	3980192e 	bgeu	r7,r6,10005ea4 <memcmp+0x6c>
10005e40:	2144b03a 	or	r2,r4,r5
10005e44:	11c4703a 	and	r2,r2,r7
10005e48:	10000f26 	beq	r2,zero,10005e88 <memcmp+0x50>
10005e4c:	20800003 	ldbu	r2,0(r4)
10005e50:	28c00003 	ldbu	r3,0(r5)
10005e54:	10c0151e 	bne	r2,r3,10005eac <memcmp+0x74>
10005e58:	31bfff84 	addi	r6,r6,-2
10005e5c:	01ffffc4 	movi	r7,-1
10005e60:	00000406 	br	10005e74 <memcmp+0x3c>
10005e64:	20800003 	ldbu	r2,0(r4)
10005e68:	28c00003 	ldbu	r3,0(r5)
10005e6c:	31bfffc4 	addi	r6,r6,-1
10005e70:	10c00e1e 	bne	r2,r3,10005eac <memcmp+0x74>
10005e74:	21000044 	addi	r4,r4,1
10005e78:	29400044 	addi	r5,r5,1
10005e7c:	31fff91e 	bne	r6,r7,10005e64 <__alt_data_end+0xf8005e64>
10005e80:	0005883a 	mov	r2,zero
10005e84:	f800283a 	ret
10005e88:	20c00017 	ldw	r3,0(r4)
10005e8c:	28800017 	ldw	r2,0(r5)
10005e90:	18bfee1e 	bne	r3,r2,10005e4c <__alt_data_end+0xf8005e4c>
10005e94:	31bfff04 	addi	r6,r6,-4
10005e98:	21000104 	addi	r4,r4,4
10005e9c:	29400104 	addi	r5,r5,4
10005ea0:	39bff936 	bltu	r7,r6,10005e88 <__alt_data_end+0xf8005e88>
10005ea4:	303fe91e 	bne	r6,zero,10005e4c <__alt_data_end+0xf8005e4c>
10005ea8:	003ff506 	br	10005e80 <__alt_data_end+0xf8005e80>
10005eac:	10c5c83a 	sub	r2,r2,r3
10005eb0:	f800283a 	ret

10005eb4 <__register_exitproc>:
10005eb4:	defffa04 	addi	sp,sp,-24
10005eb8:	dc000315 	stw	r16,12(sp)
10005ebc:	04040034 	movhi	r16,4096
10005ec0:	841fc304 	addi	r16,r16,32524
10005ec4:	80c00017 	ldw	r3,0(r16)
10005ec8:	dc400415 	stw	r17,16(sp)
10005ecc:	dfc00515 	stw	ra,20(sp)
10005ed0:	18805217 	ldw	r2,328(r3)
10005ed4:	2023883a 	mov	r17,r4
10005ed8:	10003726 	beq	r2,zero,10005fb8 <__register_exitproc+0x104>
10005edc:	10c00117 	ldw	r3,4(r2)
10005ee0:	010007c4 	movi	r4,31
10005ee4:	20c00e16 	blt	r4,r3,10005f20 <__register_exitproc+0x6c>
10005ee8:	1a000044 	addi	r8,r3,1
10005eec:	8800221e 	bne	r17,zero,10005f78 <__register_exitproc+0xc4>
10005ef0:	18c00084 	addi	r3,r3,2
10005ef4:	18c7883a 	add	r3,r3,r3
10005ef8:	18c7883a 	add	r3,r3,r3
10005efc:	12000115 	stw	r8,4(r2)
10005f00:	10c7883a 	add	r3,r2,r3
10005f04:	19400015 	stw	r5,0(r3)
10005f08:	0005883a 	mov	r2,zero
10005f0c:	dfc00517 	ldw	ra,20(sp)
10005f10:	dc400417 	ldw	r17,16(sp)
10005f14:	dc000317 	ldw	r16,12(sp)
10005f18:	dec00604 	addi	sp,sp,24
10005f1c:	f800283a 	ret
10005f20:	00800034 	movhi	r2,0
10005f24:	10800004 	addi	r2,r2,0
10005f28:	10002626 	beq	r2,zero,10005fc4 <__register_exitproc+0x110>
10005f2c:	01006404 	movi	r4,400
10005f30:	d9400015 	stw	r5,0(sp)
10005f34:	d9800115 	stw	r6,4(sp)
10005f38:	d9c00215 	stw	r7,8(sp)
10005f3c:	00000000 	call	10000000 <__alt_mem_sdram>
10005f40:	d9400017 	ldw	r5,0(sp)
10005f44:	d9800117 	ldw	r6,4(sp)
10005f48:	d9c00217 	ldw	r7,8(sp)
10005f4c:	10001d26 	beq	r2,zero,10005fc4 <__register_exitproc+0x110>
10005f50:	81000017 	ldw	r4,0(r16)
10005f54:	10000115 	stw	zero,4(r2)
10005f58:	02000044 	movi	r8,1
10005f5c:	22405217 	ldw	r9,328(r4)
10005f60:	0007883a 	mov	r3,zero
10005f64:	12400015 	stw	r9,0(r2)
10005f68:	20805215 	stw	r2,328(r4)
10005f6c:	10006215 	stw	zero,392(r2)
10005f70:	10006315 	stw	zero,396(r2)
10005f74:	883fde26 	beq	r17,zero,10005ef0 <__alt_data_end+0xf8005ef0>
10005f78:	18c9883a 	add	r4,r3,r3
10005f7c:	2109883a 	add	r4,r4,r4
10005f80:	1109883a 	add	r4,r2,r4
10005f84:	21802215 	stw	r6,136(r4)
10005f88:	01800044 	movi	r6,1
10005f8c:	12406217 	ldw	r9,392(r2)
10005f90:	30cc983a 	sll	r6,r6,r3
10005f94:	4992b03a 	or	r9,r9,r6
10005f98:	12406215 	stw	r9,392(r2)
10005f9c:	21c04215 	stw	r7,264(r4)
10005fa0:	01000084 	movi	r4,2
10005fa4:	893fd21e 	bne	r17,r4,10005ef0 <__alt_data_end+0xf8005ef0>
10005fa8:	11006317 	ldw	r4,396(r2)
10005fac:	218cb03a 	or	r6,r4,r6
10005fb0:	11806315 	stw	r6,396(r2)
10005fb4:	003fce06 	br	10005ef0 <__alt_data_end+0xf8005ef0>
10005fb8:	18805304 	addi	r2,r3,332
10005fbc:	18805215 	stw	r2,328(r3)
10005fc0:	003fc606 	br	10005edc <__alt_data_end+0xf8005edc>
10005fc4:	00bfffc4 	movi	r2,-1
10005fc8:	003fd006 	br	10005f0c <__alt_data_end+0xf8005f0c>

10005fcc <__call_exitprocs>:
10005fcc:	defff504 	addi	sp,sp,-44
10005fd0:	df000915 	stw	fp,36(sp)
10005fd4:	dd400615 	stw	r21,24(sp)
10005fd8:	dc800315 	stw	r18,12(sp)
10005fdc:	dfc00a15 	stw	ra,40(sp)
10005fe0:	ddc00815 	stw	r23,32(sp)
10005fe4:	dd800715 	stw	r22,28(sp)
10005fe8:	dd000515 	stw	r20,20(sp)
10005fec:	dcc00415 	stw	r19,16(sp)
10005ff0:	dc400215 	stw	r17,8(sp)
10005ff4:	dc000115 	stw	r16,4(sp)
10005ff8:	d9000015 	stw	r4,0(sp)
10005ffc:	2839883a 	mov	fp,r5
10006000:	04800044 	movi	r18,1
10006004:	057fffc4 	movi	r21,-1
10006008:	00840034 	movhi	r2,4096
1000600c:	109fc304 	addi	r2,r2,32524
10006010:	12000017 	ldw	r8,0(r2)
10006014:	45005217 	ldw	r20,328(r8)
10006018:	44c05204 	addi	r19,r8,328
1000601c:	a0001c26 	beq	r20,zero,10006090 <__call_exitprocs+0xc4>
10006020:	a0800117 	ldw	r2,4(r20)
10006024:	15ffffc4 	addi	r23,r2,-1
10006028:	b8000d16 	blt	r23,zero,10006060 <__call_exitprocs+0x94>
1000602c:	14000044 	addi	r16,r2,1
10006030:	8421883a 	add	r16,r16,r16
10006034:	8421883a 	add	r16,r16,r16
10006038:	84402004 	addi	r17,r16,128
1000603c:	a463883a 	add	r17,r20,r17
10006040:	a421883a 	add	r16,r20,r16
10006044:	e0001e26 	beq	fp,zero,100060c0 <__call_exitprocs+0xf4>
10006048:	80804017 	ldw	r2,256(r16)
1000604c:	e0801c26 	beq	fp,r2,100060c0 <__call_exitprocs+0xf4>
10006050:	bdffffc4 	addi	r23,r23,-1
10006054:	843fff04 	addi	r16,r16,-4
10006058:	8c7fff04 	addi	r17,r17,-4
1000605c:	bd7ff91e 	bne	r23,r21,10006044 <__alt_data_end+0xf8006044>
10006060:	00800034 	movhi	r2,0
10006064:	10800004 	addi	r2,r2,0
10006068:	10000926 	beq	r2,zero,10006090 <__call_exitprocs+0xc4>
1000606c:	a0800117 	ldw	r2,4(r20)
10006070:	1000301e 	bne	r2,zero,10006134 <__call_exitprocs+0x168>
10006074:	a0800017 	ldw	r2,0(r20)
10006078:	10003226 	beq	r2,zero,10006144 <__call_exitprocs+0x178>
1000607c:	a009883a 	mov	r4,r20
10006080:	98800015 	stw	r2,0(r19)
10006084:	00000000 	call	10000000 <__alt_mem_sdram>
10006088:	9d000017 	ldw	r20,0(r19)
1000608c:	a03fe41e 	bne	r20,zero,10006020 <__alt_data_end+0xf8006020>
10006090:	dfc00a17 	ldw	ra,40(sp)
10006094:	df000917 	ldw	fp,36(sp)
10006098:	ddc00817 	ldw	r23,32(sp)
1000609c:	dd800717 	ldw	r22,28(sp)
100060a0:	dd400617 	ldw	r21,24(sp)
100060a4:	dd000517 	ldw	r20,20(sp)
100060a8:	dcc00417 	ldw	r19,16(sp)
100060ac:	dc800317 	ldw	r18,12(sp)
100060b0:	dc400217 	ldw	r17,8(sp)
100060b4:	dc000117 	ldw	r16,4(sp)
100060b8:	dec00b04 	addi	sp,sp,44
100060bc:	f800283a 	ret
100060c0:	a0800117 	ldw	r2,4(r20)
100060c4:	80c00017 	ldw	r3,0(r16)
100060c8:	10bfffc4 	addi	r2,r2,-1
100060cc:	15c01426 	beq	r2,r23,10006120 <__call_exitprocs+0x154>
100060d0:	80000015 	stw	zero,0(r16)
100060d4:	183fde26 	beq	r3,zero,10006050 <__alt_data_end+0xf8006050>
100060d8:	95c8983a 	sll	r4,r18,r23
100060dc:	a0806217 	ldw	r2,392(r20)
100060e0:	a5800117 	ldw	r22,4(r20)
100060e4:	2084703a 	and	r2,r4,r2
100060e8:	10000b26 	beq	r2,zero,10006118 <__call_exitprocs+0x14c>
100060ec:	a0806317 	ldw	r2,396(r20)
100060f0:	2088703a 	and	r4,r4,r2
100060f4:	20000c1e 	bne	r4,zero,10006128 <__call_exitprocs+0x15c>
100060f8:	89400017 	ldw	r5,0(r17)
100060fc:	d9000017 	ldw	r4,0(sp)
10006100:	183ee83a 	callr	r3
10006104:	a0800117 	ldw	r2,4(r20)
10006108:	15bfbf1e 	bne	r2,r22,10006008 <__alt_data_end+0xf8006008>
1000610c:	98800017 	ldw	r2,0(r19)
10006110:	153fcf26 	beq	r2,r20,10006050 <__alt_data_end+0xf8006050>
10006114:	003fbc06 	br	10006008 <__alt_data_end+0xf8006008>
10006118:	183ee83a 	callr	r3
1000611c:	003ff906 	br	10006104 <__alt_data_end+0xf8006104>
10006120:	a5c00115 	stw	r23,4(r20)
10006124:	003feb06 	br	100060d4 <__alt_data_end+0xf80060d4>
10006128:	89000017 	ldw	r4,0(r17)
1000612c:	183ee83a 	callr	r3
10006130:	003ff406 	br	10006104 <__alt_data_end+0xf8006104>
10006134:	a0800017 	ldw	r2,0(r20)
10006138:	a027883a 	mov	r19,r20
1000613c:	1029883a 	mov	r20,r2
10006140:	003fb606 	br	1000601c <__alt_data_end+0xf800601c>
10006144:	0005883a 	mov	r2,zero
10006148:	003ffb06 	br	10006138 <__alt_data_end+0xf8006138>

1000614c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1000614c:	defffd04 	addi	sp,sp,-12
10006150:	df000215 	stw	fp,8(sp)
10006154:	df000204 	addi	fp,sp,8
10006158:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1000615c:	0001883a 	nop
10006160:	e0bfff17 	ldw	r2,-4(fp)
10006164:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10006168:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1000616c:	10000226 	beq	r2,zero,10006178 <_exit+0x2c>
    ALT_SIM_FAIL();
10006170:	002af070 	cmpltui	zero,zero,43969
10006174:	00000106 	br	1000617c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10006178:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1000617c:	003fff06 	br	1000617c <__alt_data_end+0xf800617c>
